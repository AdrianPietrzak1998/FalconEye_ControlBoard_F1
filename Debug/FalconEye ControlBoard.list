
FalconEye ControlBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ead0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  0800ecb4  0800ecb4  0001ecb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef74  0800ef74  00020230  2**0
                  CONTENTS
  4 .ARM          00000000  0800ef74  0800ef74  00020230  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ef74  0800ef74  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef74  0800ef74  0001ef74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ef78  0800ef78  0001ef78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800ef7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f3c  20000230  0800f1ac  00020230  2**2
                  ALLOC
 10 ._user_heap_stack 00001804  2000216c  0800f1ac  0002216c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e945  00000000  00000000  00020259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fd6  00000000  00000000  0003eb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  00043b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001810  00000000  00000000  000455c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002010b  00000000  00000000  00046dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023d6d  00000000  00000000  00066edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a82c1  00000000  00000000  0008ac48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00132f09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075c8  00000000  00000000  00132f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000230 	.word	0x20000230
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ec9c 	.word	0x0800ec9c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000234 	.word	0x20000234
 8000220:	0800ec9c 	.word	0x0800ec9c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_frsub>:
 8000234:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000238:	e002      	b.n	8000240 <__addsf3>
 800023a:	bf00      	nop

0800023c <__aeabi_fsub>:
 800023c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000240 <__addsf3>:
 8000240:	0042      	lsls	r2, r0, #1
 8000242:	bf1f      	itttt	ne
 8000244:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000248:	ea92 0f03 	teqne	r2, r3
 800024c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000250:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000254:	d06a      	beq.n	800032c <__addsf3+0xec>
 8000256:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800025a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800025e:	bfc1      	itttt	gt
 8000260:	18d2      	addgt	r2, r2, r3
 8000262:	4041      	eorgt	r1, r0
 8000264:	4048      	eorgt	r0, r1
 8000266:	4041      	eorgt	r1, r0
 8000268:	bfb8      	it	lt
 800026a:	425b      	neglt	r3, r3
 800026c:	2b19      	cmp	r3, #25
 800026e:	bf88      	it	hi
 8000270:	4770      	bxhi	lr
 8000272:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000276:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800027a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4240      	negne	r0, r0
 8000282:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000286:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800028a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800028e:	bf18      	it	ne
 8000290:	4249      	negne	r1, r1
 8000292:	ea92 0f03 	teq	r2, r3
 8000296:	d03f      	beq.n	8000318 <__addsf3+0xd8>
 8000298:	f1a2 0201 	sub.w	r2, r2, #1
 800029c:	fa41 fc03 	asr.w	ip, r1, r3
 80002a0:	eb10 000c 	adds.w	r0, r0, ip
 80002a4:	f1c3 0320 	rsb	r3, r3, #32
 80002a8:	fa01 f103 	lsl.w	r1, r1, r3
 80002ac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b0:	d502      	bpl.n	80002b8 <__addsf3+0x78>
 80002b2:	4249      	negs	r1, r1
 80002b4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002bc:	d313      	bcc.n	80002e6 <__addsf3+0xa6>
 80002be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002c2:	d306      	bcc.n	80002d2 <__addsf3+0x92>
 80002c4:	0840      	lsrs	r0, r0, #1
 80002c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ca:	f102 0201 	add.w	r2, r2, #1
 80002ce:	2afe      	cmp	r2, #254	; 0xfe
 80002d0:	d251      	bcs.n	8000376 <__addsf3+0x136>
 80002d2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002da:	bf08      	it	eq
 80002dc:	f020 0001 	biceq.w	r0, r0, #1
 80002e0:	ea40 0003 	orr.w	r0, r0, r3
 80002e4:	4770      	bx	lr
 80002e6:	0049      	lsls	r1, r1, #1
 80002e8:	eb40 0000 	adc.w	r0, r0, r0
 80002ec:	3a01      	subs	r2, #1
 80002ee:	bf28      	it	cs
 80002f0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002f4:	d2ed      	bcs.n	80002d2 <__addsf3+0x92>
 80002f6:	fab0 fc80 	clz	ip, r0
 80002fa:	f1ac 0c08 	sub.w	ip, ip, #8
 80002fe:	ebb2 020c 	subs.w	r2, r2, ip
 8000302:	fa00 f00c 	lsl.w	r0, r0, ip
 8000306:	bfaa      	itet	ge
 8000308:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800030c:	4252      	neglt	r2, r2
 800030e:	4318      	orrge	r0, r3
 8000310:	bfbc      	itt	lt
 8000312:	40d0      	lsrlt	r0, r2
 8000314:	4318      	orrlt	r0, r3
 8000316:	4770      	bx	lr
 8000318:	f092 0f00 	teq	r2, #0
 800031c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000320:	bf06      	itte	eq
 8000322:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000326:	3201      	addeq	r2, #1
 8000328:	3b01      	subne	r3, #1
 800032a:	e7b5      	b.n	8000298 <__addsf3+0x58>
 800032c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000330:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000334:	bf18      	it	ne
 8000336:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800033a:	d021      	beq.n	8000380 <__addsf3+0x140>
 800033c:	ea92 0f03 	teq	r2, r3
 8000340:	d004      	beq.n	800034c <__addsf3+0x10c>
 8000342:	f092 0f00 	teq	r2, #0
 8000346:	bf08      	it	eq
 8000348:	4608      	moveq	r0, r1
 800034a:	4770      	bx	lr
 800034c:	ea90 0f01 	teq	r0, r1
 8000350:	bf1c      	itt	ne
 8000352:	2000      	movne	r0, #0
 8000354:	4770      	bxne	lr
 8000356:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800035a:	d104      	bne.n	8000366 <__addsf3+0x126>
 800035c:	0040      	lsls	r0, r0, #1
 800035e:	bf28      	it	cs
 8000360:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000364:	4770      	bx	lr
 8000366:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800036a:	bf3c      	itt	cc
 800036c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000370:	4770      	bxcc	lr
 8000372:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000376:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800037a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800037e:	4770      	bx	lr
 8000380:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000384:	bf16      	itet	ne
 8000386:	4608      	movne	r0, r1
 8000388:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800038c:	4601      	movne	r1, r0
 800038e:	0242      	lsls	r2, r0, #9
 8000390:	bf06      	itte	eq
 8000392:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000396:	ea90 0f01 	teqeq	r0, r1
 800039a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_ui2f>:
 80003a0:	f04f 0300 	mov.w	r3, #0
 80003a4:	e004      	b.n	80003b0 <__aeabi_i2f+0x8>
 80003a6:	bf00      	nop

080003a8 <__aeabi_i2f>:
 80003a8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003ac:	bf48      	it	mi
 80003ae:	4240      	negmi	r0, r0
 80003b0:	ea5f 0c00 	movs.w	ip, r0
 80003b4:	bf08      	it	eq
 80003b6:	4770      	bxeq	lr
 80003b8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003bc:	4601      	mov	r1, r0
 80003be:	f04f 0000 	mov.w	r0, #0
 80003c2:	e01c      	b.n	80003fe <__aeabi_l2f+0x2a>

080003c4 <__aeabi_ul2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f04f 0300 	mov.w	r3, #0
 80003d0:	e00a      	b.n	80003e8 <__aeabi_l2f+0x14>
 80003d2:	bf00      	nop

080003d4 <__aeabi_l2f>:
 80003d4:	ea50 0201 	orrs.w	r2, r0, r1
 80003d8:	bf08      	it	eq
 80003da:	4770      	bxeq	lr
 80003dc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003e0:	d502      	bpl.n	80003e8 <__aeabi_l2f+0x14>
 80003e2:	4240      	negs	r0, r0
 80003e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e8:	ea5f 0c01 	movs.w	ip, r1
 80003ec:	bf02      	ittt	eq
 80003ee:	4684      	moveq	ip, r0
 80003f0:	4601      	moveq	r1, r0
 80003f2:	2000      	moveq	r0, #0
 80003f4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003f8:	bf08      	it	eq
 80003fa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003fe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000402:	fabc f28c 	clz	r2, ip
 8000406:	3a08      	subs	r2, #8
 8000408:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800040c:	db10      	blt.n	8000430 <__aeabi_l2f+0x5c>
 800040e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000412:	4463      	add	r3, ip
 8000414:	fa00 fc02 	lsl.w	ip, r0, r2
 8000418:	f1c2 0220 	rsb	r2, r2, #32
 800041c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000420:	fa20 f202 	lsr.w	r2, r0, r2
 8000424:	eb43 0002 	adc.w	r0, r3, r2
 8000428:	bf08      	it	eq
 800042a:	f020 0001 	biceq.w	r0, r0, #1
 800042e:	4770      	bx	lr
 8000430:	f102 0220 	add.w	r2, r2, #32
 8000434:	fa01 fc02 	lsl.w	ip, r1, r2
 8000438:	f1c2 0220 	rsb	r2, r2, #32
 800043c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000440:	fa21 f202 	lsr.w	r2, r1, r2
 8000444:	eb43 0002 	adc.w	r0, r3, r2
 8000448:	bf08      	it	eq
 800044a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800044e:	4770      	bx	lr

08000450 <__aeabi_fmul>:
 8000450:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000454:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000458:	bf1e      	ittt	ne
 800045a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800045e:	ea92 0f0c 	teqne	r2, ip
 8000462:	ea93 0f0c 	teqne	r3, ip
 8000466:	d06f      	beq.n	8000548 <__aeabi_fmul+0xf8>
 8000468:	441a      	add	r2, r3
 800046a:	ea80 0c01 	eor.w	ip, r0, r1
 800046e:	0240      	lsls	r0, r0, #9
 8000470:	bf18      	it	ne
 8000472:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000476:	d01e      	beq.n	80004b6 <__aeabi_fmul+0x66>
 8000478:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800047c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000480:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000484:	fba0 3101 	umull	r3, r1, r0, r1
 8000488:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800048c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000490:	bf3e      	ittt	cc
 8000492:	0049      	lslcc	r1, r1, #1
 8000494:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000498:	005b      	lslcc	r3, r3, #1
 800049a:	ea40 0001 	orr.w	r0, r0, r1
 800049e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004a2:	2afd      	cmp	r2, #253	; 0xfd
 80004a4:	d81d      	bhi.n	80004e2 <__aeabi_fmul+0x92>
 80004a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004ae:	bf08      	it	eq
 80004b0:	f020 0001 	biceq.w	r0, r0, #1
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004be:	bf08      	it	eq
 80004c0:	0249      	lsleq	r1, r1, #9
 80004c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ca:	3a7f      	subs	r2, #127	; 0x7f
 80004cc:	bfc2      	ittt	gt
 80004ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004d6:	4770      	bxgt	lr
 80004d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004dc:	f04f 0300 	mov.w	r3, #0
 80004e0:	3a01      	subs	r2, #1
 80004e2:	dc5d      	bgt.n	80005a0 <__aeabi_fmul+0x150>
 80004e4:	f112 0f19 	cmn.w	r2, #25
 80004e8:	bfdc      	itt	le
 80004ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004ee:	4770      	bxle	lr
 80004f0:	f1c2 0200 	rsb	r2, r2, #0
 80004f4:	0041      	lsls	r1, r0, #1
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	f1c2 0220 	rsb	r2, r2, #32
 80004fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000502:	ea5f 0031 	movs.w	r0, r1, rrx
 8000506:	f140 0000 	adc.w	r0, r0, #0
 800050a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800050e:	bf08      	it	eq
 8000510:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000514:	4770      	bx	lr
 8000516:	f092 0f00 	teq	r2, #0
 800051a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800051e:	bf02      	ittt	eq
 8000520:	0040      	lsleq	r0, r0, #1
 8000522:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000526:	3a01      	subeq	r2, #1
 8000528:	d0f9      	beq.n	800051e <__aeabi_fmul+0xce>
 800052a:	ea40 000c 	orr.w	r0, r0, ip
 800052e:	f093 0f00 	teq	r3, #0
 8000532:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000536:	bf02      	ittt	eq
 8000538:	0049      	lsleq	r1, r1, #1
 800053a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800053e:	3b01      	subeq	r3, #1
 8000540:	d0f9      	beq.n	8000536 <__aeabi_fmul+0xe6>
 8000542:	ea41 010c 	orr.w	r1, r1, ip
 8000546:	e78f      	b.n	8000468 <__aeabi_fmul+0x18>
 8000548:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800054c:	ea92 0f0c 	teq	r2, ip
 8000550:	bf18      	it	ne
 8000552:	ea93 0f0c 	teqne	r3, ip
 8000556:	d00a      	beq.n	800056e <__aeabi_fmul+0x11e>
 8000558:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800055c:	bf18      	it	ne
 800055e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000562:	d1d8      	bne.n	8000516 <__aeabi_fmul+0xc6>
 8000564:	ea80 0001 	eor.w	r0, r0, r1
 8000568:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800056c:	4770      	bx	lr
 800056e:	f090 0f00 	teq	r0, #0
 8000572:	bf17      	itett	ne
 8000574:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000578:	4608      	moveq	r0, r1
 800057a:	f091 0f00 	teqne	r1, #0
 800057e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000582:	d014      	beq.n	80005ae <__aeabi_fmul+0x15e>
 8000584:	ea92 0f0c 	teq	r2, ip
 8000588:	d101      	bne.n	800058e <__aeabi_fmul+0x13e>
 800058a:	0242      	lsls	r2, r0, #9
 800058c:	d10f      	bne.n	80005ae <__aeabi_fmul+0x15e>
 800058e:	ea93 0f0c 	teq	r3, ip
 8000592:	d103      	bne.n	800059c <__aeabi_fmul+0x14c>
 8000594:	024b      	lsls	r3, r1, #9
 8000596:	bf18      	it	ne
 8000598:	4608      	movne	r0, r1
 800059a:	d108      	bne.n	80005ae <__aeabi_fmul+0x15e>
 800059c:	ea80 0001 	eor.w	r0, r0, r1
 80005a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ac:	4770      	bx	lr
 80005ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005b6:	4770      	bx	lr

080005b8 <__aeabi_fdiv>:
 80005b8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005bc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005c0:	bf1e      	ittt	ne
 80005c2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005c6:	ea92 0f0c 	teqne	r2, ip
 80005ca:	ea93 0f0c 	teqne	r3, ip
 80005ce:	d069      	beq.n	80006a4 <__aeabi_fdiv+0xec>
 80005d0:	eba2 0203 	sub.w	r2, r2, r3
 80005d4:	ea80 0c01 	eor.w	ip, r0, r1
 80005d8:	0249      	lsls	r1, r1, #9
 80005da:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005de:	d037      	beq.n	8000650 <__aeabi_fdiv+0x98>
 80005e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005e4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005e8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005ec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005f0:	428b      	cmp	r3, r1
 80005f2:	bf38      	it	cc
 80005f4:	005b      	lslcc	r3, r3, #1
 80005f6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005fa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005fe:	428b      	cmp	r3, r1
 8000600:	bf24      	itt	cs
 8000602:	1a5b      	subcs	r3, r3, r1
 8000604:	ea40 000c 	orrcs.w	r0, r0, ip
 8000608:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800060c:	bf24      	itt	cs
 800060e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000612:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000616:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800061a:	bf24      	itt	cs
 800061c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000620:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000624:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000628:	bf24      	itt	cs
 800062a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800062e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	bf18      	it	ne
 8000636:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800063a:	d1e0      	bne.n	80005fe <__aeabi_fdiv+0x46>
 800063c:	2afd      	cmp	r2, #253	; 0xfd
 800063e:	f63f af50 	bhi.w	80004e2 <__aeabi_fmul+0x92>
 8000642:	428b      	cmp	r3, r1
 8000644:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000648:	bf08      	it	eq
 800064a:	f020 0001 	biceq.w	r0, r0, #1
 800064e:	4770      	bx	lr
 8000650:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000654:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000658:	327f      	adds	r2, #127	; 0x7f
 800065a:	bfc2      	ittt	gt
 800065c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000660:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000664:	4770      	bxgt	lr
 8000666:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800066a:	f04f 0300 	mov.w	r3, #0
 800066e:	3a01      	subs	r2, #1
 8000670:	e737      	b.n	80004e2 <__aeabi_fmul+0x92>
 8000672:	f092 0f00 	teq	r2, #0
 8000676:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800067a:	bf02      	ittt	eq
 800067c:	0040      	lsleq	r0, r0, #1
 800067e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000682:	3a01      	subeq	r2, #1
 8000684:	d0f9      	beq.n	800067a <__aeabi_fdiv+0xc2>
 8000686:	ea40 000c 	orr.w	r0, r0, ip
 800068a:	f093 0f00 	teq	r3, #0
 800068e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000692:	bf02      	ittt	eq
 8000694:	0049      	lsleq	r1, r1, #1
 8000696:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800069a:	3b01      	subeq	r3, #1
 800069c:	d0f9      	beq.n	8000692 <__aeabi_fdiv+0xda>
 800069e:	ea41 010c 	orr.w	r1, r1, ip
 80006a2:	e795      	b.n	80005d0 <__aeabi_fdiv+0x18>
 80006a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006a8:	ea92 0f0c 	teq	r2, ip
 80006ac:	d108      	bne.n	80006c0 <__aeabi_fdiv+0x108>
 80006ae:	0242      	lsls	r2, r0, #9
 80006b0:	f47f af7d 	bne.w	80005ae <__aeabi_fmul+0x15e>
 80006b4:	ea93 0f0c 	teq	r3, ip
 80006b8:	f47f af70 	bne.w	800059c <__aeabi_fmul+0x14c>
 80006bc:	4608      	mov	r0, r1
 80006be:	e776      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006c0:	ea93 0f0c 	teq	r3, ip
 80006c4:	d104      	bne.n	80006d0 <__aeabi_fdiv+0x118>
 80006c6:	024b      	lsls	r3, r1, #9
 80006c8:	f43f af4c 	beq.w	8000564 <__aeabi_fmul+0x114>
 80006cc:	4608      	mov	r0, r1
 80006ce:	e76e      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006d0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006d4:	bf18      	it	ne
 80006d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006da:	d1ca      	bne.n	8000672 <__aeabi_fdiv+0xba>
 80006dc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006e0:	f47f af5c 	bne.w	800059c <__aeabi_fmul+0x14c>
 80006e4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006e8:	f47f af3c 	bne.w	8000564 <__aeabi_fmul+0x114>
 80006ec:	e75f      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006ee:	bf00      	nop

080006f0 <set_baudrate>:
#include "usart.h"



static void set_baudrate(uint32_t baudrate)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	  huart3.Instance = USART3;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <set_baudrate+0x50>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <set_baudrate+0x54>)
 80006fc:	601a      	str	r2, [r3, #0]
	  huart3.Init.BaudRate = baudrate;
 80006fe:	4a10      	ldr	r2, [pc, #64]	; (8000740 <set_baudrate+0x50>)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6053      	str	r3, [r2, #4]
	  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000704:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <set_baudrate+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
	  huart3.Init.StopBits = UART_STOPBITS_1;
 800070a:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <set_baudrate+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
	  huart3.Init.Parity = UART_PARITY_NONE;
 8000710:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <set_baudrate+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
	  huart3.Init.Mode = UART_MODE_TX_RX;
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <set_baudrate+0x50>)
 8000718:	220c      	movs	r2, #12
 800071a:	615a      	str	r2, [r3, #20]
	  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <set_baudrate+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
	  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000722:	4b07      	ldr	r3, [pc, #28]	; (8000740 <set_baudrate+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
	  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8000728:	4805      	ldr	r0, [pc, #20]	; (8000740 <set_baudrate+0x50>)
 800072a:	f008 fb7b 	bl	8008e24 <HAL_HalfDuplex_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <set_baudrate+0x48>
	  {
	    Error_Handler();
 8000734:	f001 f810 	bl	8001758 <Error_Handler>
	  }
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000f38 	.word	0x20000f38
 8000744:	40004800 	.word	0x40004800

08000748 <wire_reset>:


HAL_StatusTypeDef wire_reset(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
	uint8_t data_out = 0xF0;
 800074e:	23f0      	movs	r3, #240	; 0xf0
 8000750:	71fb      	strb	r3, [r7, #7]
	uint8_t data_in = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	71bb      	strb	r3, [r7, #6]

	set_baudrate(9600);
 8000756:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 800075a:	f7ff ffc9 	bl	80006f0 <set_baudrate>
	HAL_UART_Transmit(&UART, &data_out, 1, 100);
 800075e:	1df9      	adds	r1, r7, #7
 8000760:	2364      	movs	r3, #100	; 0x64
 8000762:	2201      	movs	r2, #1
 8000764:	480b      	ldr	r0, [pc, #44]	; (8000794 <wire_reset+0x4c>)
 8000766:	f008 fbb5 	bl	8008ed4 <HAL_UART_Transmit>
	HAL_UART_Receive(&UART, &data_in, 1, 100);
 800076a:	1db9      	adds	r1, r7, #6
 800076c:	2364      	movs	r3, #100	; 0x64
 800076e:	2201      	movs	r2, #1
 8000770:	4808      	ldr	r0, [pc, #32]	; (8000794 <wire_reset+0x4c>)
 8000772:	f008 fc32 	bl	8008fda <HAL_UART_Receive>
	set_baudrate(115200);
 8000776:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800077a:	f7ff ffb9 	bl	80006f0 <set_baudrate>

	if (data_in != 0xF0)
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	2bf0      	cmp	r3, #240	; 0xf0
 8000782:	d001      	beq.n	8000788 <wire_reset+0x40>
		return HAL_OK;
 8000784:	2300      	movs	r3, #0
 8000786:	e000      	b.n	800078a <wire_reset+0x42>
	else
		return HAL_ERROR;
 8000788:	2301      	movs	r3, #1
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000f38 	.word	0x20000f38

08000798 <read_bit>:

static int read_bit(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
	uint8_t data_out = 0xff;
 800079e:	23ff      	movs	r3, #255	; 0xff
 80007a0:	71fb      	strb	r3, [r7, #7]
	uint8_t data_in = 0x0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	71bb      	strb	r3, [r7, #6]
	data_in = 0x0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	71bb      	strb	r3, [r7, #6]
	if(USARTn -> SR & (1<<5))
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <read_bit+0x4c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f003 0320 	and.w	r3, r3, #32
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <read_bit+0x22>
	{
		USARTn -> DR;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <read_bit+0x4c>)
 80007b8:	685b      	ldr	r3, [r3, #4]
	}
	HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 80007ba:	1df9      	adds	r1, r7, #7
 80007bc:	f04f 33ff 	mov.w	r3, #4294967295
 80007c0:	2201      	movs	r2, #1
 80007c2:	4809      	ldr	r0, [pc, #36]	; (80007e8 <read_bit+0x50>)
 80007c4:	f008 fb86 	bl	8008ed4 <HAL_UART_Transmit>
	HAL_UART_Receive(&UART, &data_in, 1, HAL_MAX_DELAY);
 80007c8:	1db9      	adds	r1, r7, #6
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	2201      	movs	r2, #1
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <read_bit+0x50>)
 80007d2:	f008 fc02 	bl	8008fda <HAL_UART_Receive>

	return data_in & 0x01;
 80007d6:	79bb      	ldrb	r3, [r7, #6]
 80007d8:	f003 0301 	and.w	r3, r3, #1
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40004800 	.word	0x40004800
 80007e8:	20000f38 	.word	0x20000f38

080007ec <wire_read>:

uint8_t wire_read(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++)
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	e00e      	b.n	800081a <wire_read+0x2e>
  {
    value >>= 1;
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	085b      	lsrs	r3, r3, #1
 8000800:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 8000802:	f7ff ffc9 	bl	8000798 <read_bit>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d003      	beq.n	8000814 <wire_read+0x28>
      value |= 0x80;
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000812:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++)
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	2b07      	cmp	r3, #7
 800081e:	dded      	ble.n	80007fc <wire_read+0x10>
  }
  return value;
 8000820:	79fb      	ldrb	r3, [r7, #7]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <write_bit>:

static void write_bit(int value)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if (value)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d00a      	beq.n	8000850 <write_bit+0x24>
  {
    uint8_t data_out = 0xff;
 800083a:	23ff      	movs	r3, #255	; 0xff
 800083c:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 800083e:	f107 010f 	add.w	r1, r7, #15
 8000842:	f04f 33ff 	mov.w	r3, #4294967295
 8000846:	2201      	movs	r2, #1
 8000848:	4808      	ldr	r0, [pc, #32]	; (800086c <write_bit+0x40>)
 800084a:	f008 fb43 	bl	8008ed4 <HAL_UART_Transmit>
  else
  {
    uint8_t data_out = 0x0;
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
  }
}
 800084e:	e009      	b.n	8000864 <write_bit+0x38>
    uint8_t data_out = 0x0;
 8000850:	2300      	movs	r3, #0
 8000852:	73bb      	strb	r3, [r7, #14]
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000854:	f107 010e 	add.w	r1, r7, #14
 8000858:	f04f 33ff 	mov.w	r3, #4294967295
 800085c:	2201      	movs	r2, #1
 800085e:	4803      	ldr	r0, [pc, #12]	; (800086c <write_bit+0x40>)
 8000860:	f008 fb38 	bl	8008ed4 <HAL_UART_Transmit>
}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000f38 	.word	0x20000f38

08000870 <wire_write>:

void wire_write(uint8_t byte)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	e00b      	b.n	8000898 <wire_write+0x28>
    write_bit(byte & 0x01);
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ffd0 	bl	800082c <write_bit>
    byte >>= 1;
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	085b      	lsrs	r3, r3, #1
 8000890:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	3301      	adds	r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2b07      	cmp	r3, #7
 800089c:	ddf0      	ble.n	8000880 <wire_write+0x10>
  }
}
 800089e:	bf00      	nop
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	460a      	mov	r2, r1
 80008b2:	71fb      	strb	r3, [r7, #7]
 80008b4:	4613      	mov	r3, r2
 80008b6:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	e016      	b.n	80008ec <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 80008be:	79fa      	ldrb	r2, [r7, #7]
 80008c0:	79bb      	ldrb	r3, [r7, #6]
 80008c2:	4053      	eors	r3, r2
 80008c4:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 80008cc:	7afb      	ldrb	r3, [r7, #11]
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d004      	beq.n	80008e0 <byte_crc+0x38>
      crc ^= 0x8c;
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80008dc:	43db      	mvns	r3, r3
 80008de:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 80008e0:	79bb      	ldrb	r3, [r7, #6]
 80008e2:	085b      	lsrs	r3, r3, #1
 80008e4:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	3301      	adds	r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	2b07      	cmp	r3, #7
 80008f0:	dde5      	ble.n	80008be <byte_crc+0x16>
  }
  return crc;
 80008f2:	79fb      	ldrb	r3, [r7, #7]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr

080008fe <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b084      	sub	sp, #16
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
 8000906:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	e00d      	b.n	800092e <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	4413      	add	r3, r2
 8000918:	781a      	ldrb	r2, [r3, #0]
 800091a:	7afb      	ldrb	r3, [r7, #11]
 800091c:	4611      	mov	r1, r2
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ffc2 	bl	80008a8 <byte_crc>
 8000924:	4603      	mov	r3, r0
 8000926:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	3301      	adds	r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	429a      	cmp	r2, r3
 8000934:	dbed      	blt.n	8000912 <wire_crc+0x14>

    return crc;
 8000936:	7afb      	ldrb	r3, [r7, #11]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <m24cxxInit>:
#include "M24Cxx.h"



void m24cxxInit(m24cxx_t *m24, I2C_HandleTypeDef *i2c, uint8_t addr, uint16_t memsize, GPIO_TypeDef *WcPort, uint16_t WcPin)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	4611      	mov	r1, r2
 800094c:	461a      	mov	r2, r3
 800094e:	460b      	mov	r3, r1
 8000950:	71fb      	strb	r3, [r7, #7]
 8000952:	4613      	mov	r3, r2
 8000954:	80bb      	strh	r3, [r7, #4]
	m24 -> addr    = addr<<1;
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	b2da      	uxtb	r2, r3
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	701a      	strb	r2, [r3, #0]
	m24 -> i2c     = i2c;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	605a      	str	r2, [r3, #4]
	m24 -> memsize = memsize;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	88ba      	ldrh	r2, [r7, #4]
 800096a:	811a      	strh	r2, [r3, #8]
	m24 -> WcPort  = WcPort;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	69ba      	ldr	r2, [r7, #24]
 8000970:	60da      	str	r2, [r3, #12]
	m24 -> WcPin   = WcPin;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	8bba      	ldrh	r2, [r7, #28]
 8000976:	821a      	strh	r2, [r3, #16]
	HAL_GPIO_WritePin(m24->WcPort, m24->WcPin, SET);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	68d8      	ldr	r0, [r3, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	8a1b      	ldrh	r3, [r3, #16]
 8000980:	2201      	movs	r2, #1
 8000982:	4619      	mov	r1, r3
 8000984:	f002 fe49 	bl	800361a <HAL_GPIO_WritePin>
}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <m24cxxFullRead>:
	m24 -> WcIsZero = 1;
	HAL_I2C_Mem_Write_DMA(m24 -> i2c, m24 -> addr, DataAddr, 1, Data, 4);
}

void m24cxxFullRead(m24cxx_t *m24, uint8_t *Data)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af02      	add	r7, sp, #8
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Read_DMA(m24 -> i2c, m24 -> addr, 0x00, 1, Data, m24 -> memsize);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6858      	ldr	r0, [r3, #4]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b299      	uxth	r1, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	891b      	ldrh	r3, [r3, #8]
 80009a8:	9301      	str	r3, [sp, #4]
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	2301      	movs	r3, #1
 80009b0:	2200      	movs	r2, #0
 80009b2:	f003 f8b5 	bl	8003b20 <HAL_I2C_Mem_Read_DMA>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <m24cxxWcSetIt>:
		}
	HAL_GPIO_WritePin(m24->WcPort, m24->WcPin, SET);
}

void m24cxxWcSetIt(m24cxx_t *m24, I2C_HandleTypeDef *hi2c)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
	if(hi2c->Instance == m24->i2c->Instance && m24->WcIsZero == 1)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d10e      	bne.n	80009f4 <m24cxxWcSetIt+0x36>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	7c9b      	ldrb	r3, [r3, #18]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d10a      	bne.n	80009f4 <m24cxxWcSetIt+0x36>
	{
		HAL_GPIO_WritePin(m24->WcPort, m24->WcPin, SET);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	68d8      	ldr	r0, [r3, #12]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	8a1b      	ldrh	r3, [r3, #16]
 80009e6:	2201      	movs	r2, #1
 80009e8:	4619      	mov	r1, r3
 80009ea:	f002 fe16 	bl	800361a <HAL_GPIO_WritePin>
		m24->WcIsZero = 0;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	749a      	strb	r2, [r3, #18]
	}
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <MX_ADC1_Init+0x74>)
 8000a0e:	4a19      	ldr	r2, [pc, #100]	; (8000a74 <MX_ADC1_Init+0x78>)
 8000a10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <MX_ADC1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a18:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <MX_ADC1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <MX_ADC1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <MX_ADC1_Init+0x74>)
 8000a26:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a2a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a2c:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <MX_ADC1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <MX_ADC1_Init+0x74>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <MX_ADC1_Init+0x74>)
 8000a3a:	f001 fcbd 	bl	80023b8 <HAL_ADC_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a44:	f000 fe88 	bl	8001758 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a48:	2306      	movs	r3, #6
 8000a4a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <MX_ADC1_Init+0x74>)
 8000a5a:	f001 fd97 	bl	800258c <HAL_ADC_ConfigChannel>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a64:	f000 fe78 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	2000024c 	.word	0x2000024c
 8000a74:	40012400 	.word	0x40012400

08000a78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	; 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0318 	add.w	r3, r7, #24
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a1f      	ldr	r2, [pc, #124]	; (8000b10 <HAL_ADC_MspInit+0x98>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d137      	bne.n	8000b08 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a98:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <HAL_ADC_MspInit+0x9c>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	4a1d      	ldr	r2, [pc, #116]	; (8000b14 <HAL_ADC_MspInit+0x9c>)
 8000a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <HAL_ADC_MspInit+0x9c>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <HAL_ADC_MspInit+0x9c>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <HAL_ADC_MspInit+0x9c>)
 8000ab6:	f043 0304 	orr.w	r3, r3, #4
 8000aba:	6193      	str	r3, [r2, #24]
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_ADC_MspInit+0x9c>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f003 0304 	and.w	r3, r3, #4
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_ADC_MspInit+0x9c>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a11      	ldr	r2, [pc, #68]	; (8000b14 <HAL_ADC_MspInit+0x9c>)
 8000ace:	f043 0308 	orr.w	r3, r3, #8
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <HAL_ADC_MspInit+0x9c>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f003 0308 	and.w	r3, r3, #8
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ae0:	23c0      	movs	r3, #192	; 0xc0
 8000ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 0318 	add.w	r3, r7, #24
 8000aec:	4619      	mov	r1, r3
 8000aee:	480a      	ldr	r0, [pc, #40]	; (8000b18 <HAL_ADC_MspInit+0xa0>)
 8000af0:	f002 fbe8 	bl	80032c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af8:	2303      	movs	r3, #3
 8000afa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 0318 	add.w	r3, r7, #24
 8000b00:	4619      	mov	r1, r3
 8000b02:	4806      	ldr	r0, [pc, #24]	; (8000b1c <HAL_ADC_MspInit+0xa4>)
 8000b04:	f002 fbde 	bl	80032c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b08:	bf00      	nop
 8000b0a:	3728      	adds	r7, #40	; 0x28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40012400 	.word	0x40012400
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010800 	.word	0x40010800
 8000b1c:	40010c00 	.word	0x40010c00

08000b20 <ButtonInitKey>:
#include "main.h"
#include "button.h"

//Button init
void ButtonInitKey(button_t * Key, GPIO_TypeDef *GpioPort, uint16_t GpioPin, uint32_t TimerDebounce, uint32_t TimerLongPressed, uint32_t TimerRepeat)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	80fb      	strh	r3, [r7, #6]
	Key->State = IDLE;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
	Key->GpioPort = GpioPort;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	68ba      	ldr	r2, [r7, #8]
 8000b3a:	605a      	str	r2, [r3, #4]
	Key->GpioPin = GpioPin;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	88fa      	ldrh	r2, [r7, #6]
 8000b40:	811a      	strh	r2, [r3, #8]
	Key->TimerDebounce = TimerDebounce;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	683a      	ldr	r2, [r7, #0]
 8000b46:	611a      	str	r2, [r3, #16]
	Key->TimerLongPressed = TimerLongPressed;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	69ba      	ldr	r2, [r7, #24]
 8000b4c:	615a      	str	r2, [r3, #20]
	Key->TimerRepeat = TimerRepeat;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	69fa      	ldr	r2, [r7, #28]
 8000b52:	619a      	str	r2, [r3, #24]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr

08000b5e <ButtonIdleRoutine>:
{
	Key->ButtonRelease = Callback;
}
//States routine
void ButtonIdleRoutine(button_t *Key)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_RESET)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	685a      	ldr	r2, [r3, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	891b      	ldrh	r3, [r3, #8]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4610      	mov	r0, r2
 8000b72:	f002 fd3b 	bl	80035ec <HAL_GPIO_ReadPin>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d107      	bne.n	8000b8c <ButtonIdleRoutine+0x2e>
	{
		Key->LastTick = HAL_GetTick();
 8000b7c:	f001 fbee 	bl	800235c <HAL_GetTick>
 8000b80:	4602      	mov	r2, r0
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60da      	str	r2, [r3, #12]
		Key->State = DEBOUNCE;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2201      	movs	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]
	}
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <ButtonDebounceRoutine>:

void ButtonDebounceRoutine(button_t *Key)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - Key->LastTick) >= Key->TimerDebounce)
 8000b9c:	f001 fbde 	bl	800235c <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	1ad2      	subs	r2, r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	691b      	ldr	r3, [r3, #16]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d31d      	bcc.n	8000bec <ButtonDebounceRoutine+0x58>
	{
		if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_RESET)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	891b      	ldrh	r3, [r3, #8]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4610      	mov	r0, r2
 8000bbc:	f002 fd16 	bl	80035ec <HAL_GPIO_ReadPin>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d10f      	bne.n	8000be6 <ButtonDebounceRoutine+0x52>
		{
			Key->State = PRESSED;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2202      	movs	r2, #2
 8000bca:	701a      	strb	r2, [r3, #0]
			Key->LastTick = HAL_GetTick();
 8000bcc:	f001 fbc6 	bl	800235c <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	60da      	str	r2, [r3, #12]
			if(Key->ButtonPressed != NULL)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d006      	beq.n	8000bec <ButtonDebounceRoutine+0x58>
			{
				Key->ButtonPressed();
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	4798      	blx	r3
		else
		{
			Key->State = IDLE;
		}
	}
}
 8000be4:	e002      	b.n	8000bec <ButtonDebounceRoutine+0x58>
			Key->State = IDLE;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <ButtonPressedRoutine>:

void ButtonPressedRoutine(button_t *Key)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_SET)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	891b      	ldrh	r3, [r3, #8]
 8000c04:	4619      	mov	r1, r3
 8000c06:	4610      	mov	r0, r2
 8000c08:	f002 fcf0 	bl	80035ec <HAL_GPIO_ReadPin>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d103      	bne.n	8000c1a <ButtonPressedRoutine+0x26>
	{
		Key->State = RELEASE;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2204      	movs	r2, #4
 8000c16:	701a      	strb	r2, [r3, #0]
		if(Key->ButtonLongPressed != NULL)
		{
			Key->ButtonLongPressed();
		}
	}
}
 8000c18:	e018      	b.n	8000c4c <ButtonPressedRoutine+0x58>
	else if(HAL_GetTick() - Key->LastTick >= Key->TimerLongPressed)
 8000c1a:	f001 fb9f 	bl	800235c <HAL_GetTick>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	1ad2      	subs	r2, r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d30e      	bcc.n	8000c4c <ButtonPressedRoutine+0x58>
		Key->State = REPEAT;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2203      	movs	r2, #3
 8000c32:	701a      	strb	r2, [r3, #0]
		Key->LastTick = HAL_GetTick();
 8000c34:	f001 fb92 	bl	800235c <HAL_GetTick>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	60da      	str	r2, [r3, #12]
		if(Key->ButtonLongPressed != NULL)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6a1b      	ldr	r3, [r3, #32]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d002      	beq.n	8000c4c <ButtonPressedRoutine+0x58>
			Key->ButtonLongPressed();
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6a1b      	ldr	r3, [r3, #32]
 8000c4a:	4798      	blx	r3
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <ButtonRepeatRoutine>:

void ButtonRepeatRoutine(button_t *Key)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_SET)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	891b      	ldrh	r3, [r3, #8]
 8000c64:	4619      	mov	r1, r3
 8000c66:	4610      	mov	r0, r2
 8000c68:	f002 fcc0 	bl	80035ec <HAL_GPIO_ReadPin>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d103      	bne.n	8000c7a <ButtonRepeatRoutine+0x26>
	{
		Key->State = RELEASE;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2204      	movs	r2, #4
 8000c76:	701a      	strb	r2, [r3, #0]
		if(Key->ButtonRepeat != NULL)
		{
			Key->ButtonRepeat();
		}
	}
}
 8000c78:	e015      	b.n	8000ca6 <ButtonRepeatRoutine+0x52>
	else if(HAL_GetTick() - Key->LastTick >= Key->TimerRepeat)
 8000c7a:	f001 fb6f 	bl	800235c <HAL_GetTick>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	1ad2      	subs	r2, r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d30b      	bcc.n	8000ca6 <ButtonRepeatRoutine+0x52>
		Key->LastTick = HAL_GetTick();
 8000c8e:	f001 fb65 	bl	800235c <HAL_GetTick>
 8000c92:	4602      	mov	r2, r0
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	60da      	str	r2, [r3, #12]
		if(Key->ButtonRepeat != NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d002      	beq.n	8000ca6 <ButtonRepeatRoutine+0x52>
			Key->ButtonRepeat();
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca4:	4798      	blx	r3
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <ButtonReleaseRoutine>:

void ButtonReleaseRoutine(button_t *Key)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
	if(Key->ButtonRelease != NULL)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <ButtonReleaseRoutine+0x16>
	{
		Key->ButtonRelease();
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc2:	4798      	blx	r3
	}
	Key->State = IDLE;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <ButtonTask>:

//State machines
void ButtonTask(button_t *Key)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	switch(Key->State)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b04      	cmp	r3, #4
 8000ce2:	d821      	bhi.n	8000d28 <ButtonTask+0x54>
 8000ce4:	a201      	add	r2, pc, #4	; (adr r2, 8000cec <ButtonTask+0x18>)
 8000ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cea:	bf00      	nop
 8000cec:	08000d01 	.word	0x08000d01
 8000cf0:	08000d09 	.word	0x08000d09
 8000cf4:	08000d11 	.word	0x08000d11
 8000cf8:	08000d19 	.word	0x08000d19
 8000cfc:	08000d21 	.word	0x08000d21
	{
	case IDLE:
		ButtonIdleRoutine(Key);
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f7ff ff2c 	bl	8000b5e <ButtonIdleRoutine>
		break;
 8000d06:	e00f      	b.n	8000d28 <ButtonTask+0x54>

	case DEBOUNCE:
		ButtonDebounceRoutine(Key);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ff43 	bl	8000b94 <ButtonDebounceRoutine>
		break;
 8000d0e:	e00b      	b.n	8000d28 <ButtonTask+0x54>

	case PRESSED:
		ButtonPressedRoutine(Key);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f7ff ff6f 	bl	8000bf4 <ButtonPressedRoutine>
		break;
 8000d16:	e007      	b.n	8000d28 <ButtonTask+0x54>

	case REPEAT:
		ButtonRepeatRoutine(Key);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff9b 	bl	8000c54 <ButtonRepeatRoutine>
		break;
 8000d1e:	e003      	b.n	8000d28 <ButtonTask+0x54>

	case RELEASE:
		ButtonReleaseRoutine(Key);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ffc4 	bl	8000cae <ButtonReleaseRoutine>
		break;
 8000d26:	bf00      	nop
	}
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <MX_DMA_Init+0x28>)
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <MX_DMA_Init+0x28>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6153      	str	r3, [r2, #20]
 8000d42:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <MX_DMA_Init+0x28>)
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]

}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	40021000 	.word	0x40021000

08000d5c <ds18b20_read_address>:
#define DS18B20_READ_SCRATCHPAD    0xBE



HAL_StatusTypeDef ds18b20_read_address(uint8_t* rom_code)
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t crc;

  if (wire_reset() != HAL_OK)
 8000d64:	f7ff fcf0 	bl	8000748 <wire_reset>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <ds18b20_read_address+0x16>
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e021      	b.n	8000db6 <ds18b20_read_address+0x5a>

  wire_write(DS18B20_READ_ROM);
 8000d72:	2033      	movs	r0, #51	; 0x33
 8000d74:	f7ff fd7c 	bl	8000870 <wire_write>

  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	e009      	b.n	8000d92 <ds18b20_read_address+0x36>
    rom_code[i] = wire_read();
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	18d4      	adds	r4, r2, r3
 8000d84:	f7ff fd32 	bl	80007ec <wire_read>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2b07      	cmp	r3, #7
 8000d96:	ddf2      	ble.n	8000d7e <ds18b20_read_address+0x22>

  crc = wire_crc(rom_code, DS18B20_ROM_CODE_SIZE - 1);
 8000d98:	2107      	movs	r1, #7
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff fdaf 	bl	80008fe <wire_crc>
 8000da0:	4603      	mov	r3, r0
 8000da2:	72fb      	strb	r3, [r7, #11]
  if (rom_code[DS18B20_ROM_CODE_SIZE - 1] == crc)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3307      	adds	r3, #7
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	7afa      	ldrb	r2, [r7, #11]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d101      	bne.n	8000db4 <ds18b20_read_address+0x58>
    return HAL_OK;
 8000db0:	2300      	movs	r3, #0
 8000db2:	e000      	b.n	8000db6 <ds18b20_read_address+0x5a>
  else
    return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd90      	pop	{r4, r7, pc}

08000dbe <send_cmd>:

static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b084      	sub	sp, #16
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 8000dca:	f7ff fcbd 	bl	8000748 <wire_reset>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <send_cmd+0x1a>
    return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e01e      	b.n	8000e16 <send_cmd+0x58>

  if (!rom_code) {
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d103      	bne.n	8000de6 <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 8000dde:	20cc      	movs	r0, #204	; 0xcc
 8000de0:	f7ff fd46 	bl	8000870 <wire_write>
 8000de4:	e012      	b.n	8000e0c <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 8000de6:	2055      	movs	r0, #85	; 0x55
 8000de8:	f7ff fd42 	bl	8000870 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	e009      	b.n	8000e06 <send_cmd+0x48>
      wire_write(rom_code[i]);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	4413      	add	r3, r2
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fd38 	bl	8000870 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3301      	adds	r3, #1
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2b07      	cmp	r3, #7
 8000e0a:	ddf2      	ble.n	8000df2 <send_cmd+0x34>
  }
  wire_write(cmd);
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fd2e 	bl	8000870 <wire_write>
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <ds18b20_start_measure>:

HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 8000e26:	2144      	movs	r1, #68	; 0x44
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ffc8 	bl	8000dbe <send_cmd>
 8000e2e:	4603      	mov	r3, r0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <ds18b20_read_scratchpad>:

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 8000e42:	21be      	movs	r1, #190	; 0xbe
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ffba 	bl	8000dbe <send_cmd>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e01e      	b.n	8000e92 <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	e009      	b.n	8000e6e <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	18d4      	adds	r4, r2, r3
 8000e60:	f7ff fcc4 	bl	80007ec <wire_read>
 8000e64:	4603      	mov	r3, r0
 8000e66:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	ddf2      	ble.n	8000e5a <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 8000e74:	2108      	movs	r1, #8
 8000e76:	6838      	ldr	r0, [r7, #0]
 8000e78:	f7ff fd41 	bl	80008fe <wire_crc>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	3308      	adds	r3, #8
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	7afa      	ldrb	r2, [r7, #11]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d101      	bne.n	8000e90 <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e000      	b.n	8000e92 <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd90      	pop	{r4, r7, pc}

08000e9a <ds18b20_get_temp_wo_fp>:

  return temp / 16.0f;
}

uint32_t ds18b20_get_temp_wo_fp(const uint8_t* rom_code)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b086      	sub	sp, #24
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff ffc5 	bl	8000e38 <ds18b20_read_scratchpad>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d002      	beq.n	8000eba <ds18b20_get_temp_wo_fp+0x20>
    return 8500;
 8000eb4:	f242 1334 	movw	r3, #8500	; 0x2134
 8000eb8:	e00b      	b.n	8000ed2 <ds18b20_get_temp_wo_fp+0x38>
 8000eba:	89bb      	ldrh	r3, [r7, #12]

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 8000ebc:	817b      	strh	r3, [r7, #10]

  return (temp * 100) / 16;
 8000ebe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	2364      	movs	r3, #100	; 0x64
 8000ec6:	fb02 f303 	mul.w	r3, r2, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	da00      	bge.n	8000ed0 <ds18b20_get_temp_wo_fp+0x36>
 8000ece:	330f      	adds	r3, #15
 8000ed0:	111b      	asrs	r3, r3, #4
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08c      	sub	sp, #48	; 0x30
 8000ee0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 0320 	add.w	r3, r7, #32
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef0:	4b6f      	ldr	r3, [pc, #444]	; (80010b0 <MX_GPIO_Init+0x1d4>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a6e      	ldr	r2, [pc, #440]	; (80010b0 <MX_GPIO_Init+0x1d4>)
 8000ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b6c      	ldr	r3, [pc, #432]	; (80010b0 <MX_GPIO_Init+0x1d4>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f04:	61fb      	str	r3, [r7, #28]
 8000f06:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f08:	4b69      	ldr	r3, [pc, #420]	; (80010b0 <MX_GPIO_Init+0x1d4>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a68      	ldr	r2, [pc, #416]	; (80010b0 <MX_GPIO_Init+0x1d4>)
 8000f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b66      	ldr	r3, [pc, #408]	; (80010b0 <MX_GPIO_Init+0x1d4>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1c:	61bb      	str	r3, [r7, #24]
 8000f1e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f20:	4b63      	ldr	r3, [pc, #396]	; (80010b0 <MX_GPIO_Init+0x1d4>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a62      	ldr	r2, [pc, #392]	; (80010b0 <MX_GPIO_Init+0x1d4>)
 8000f26:	f043 0310 	orr.w	r3, r3, #16
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b60      	ldr	r3, [pc, #384]	; (80010b0 <MX_GPIO_Init+0x1d4>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f38:	4b5d      	ldr	r3, [pc, #372]	; (80010b0 <MX_GPIO_Init+0x1d4>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a5c      	ldr	r2, [pc, #368]	; (80010b0 <MX_GPIO_Init+0x1d4>)
 8000f3e:	f043 0304 	orr.w	r3, r3, #4
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b5a      	ldr	r3, [pc, #360]	; (80010b0 <MX_GPIO_Init+0x1d4>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f50:	4b57      	ldr	r3, [pc, #348]	; (80010b0 <MX_GPIO_Init+0x1d4>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	4a56      	ldr	r2, [pc, #344]	; (80010b0 <MX_GPIO_Init+0x1d4>)
 8000f56:	f043 0308 	orr.w	r3, r3, #8
 8000f5a:	6193      	str	r3, [r2, #24]
 8000f5c:	4b54      	ldr	r3, [pc, #336]	; (80010b0 <MX_GPIO_Init+0x1d4>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f003 0308 	and.w	r3, r3, #8
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f68:	4b51      	ldr	r3, [pc, #324]	; (80010b0 <MX_GPIO_Init+0x1d4>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a50      	ldr	r2, [pc, #320]	; (80010b0 <MX_GPIO_Init+0x1d4>)
 8000f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b4e      	ldr	r3, [pc, #312]	; (80010b0 <MX_GPIO_Init+0x1d4>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f80:	4b4b      	ldr	r3, [pc, #300]	; (80010b0 <MX_GPIO_Init+0x1d4>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a4a      	ldr	r2, [pc, #296]	; (80010b0 <MX_GPIO_Init+0x1d4>)
 8000f86:	f043 0320 	orr.w	r3, r3, #32
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b48      	ldr	r3, [pc, #288]	; (80010b0 <MX_GPIO_Init+0x1d4>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0320 	and.w	r3, r3, #32
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f64b 71ff 	movw	r1, #49151	; 0xbfff
 8000f9e:	4845      	ldr	r0, [pc, #276]	; (80010b4 <MX_GPIO_Init+0x1d8>)
 8000fa0:	f002 fb3b 	bl	800361a <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, COMM_PC_LED_Pin|COMM_CAN_LED_Pin|COMM_CAN_CHECK_LED_Pin|COMM_UART_LED_Pin
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8000faa:	4843      	ldr	r0, [pc, #268]	; (80010b8 <MX_GPIO_Init+0x1dc>)
 8000fac:	f002 fb35 	bl	800361a <HAL_GPIO_WritePin>
                          |COMM_RS485_LED_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|RS485_TXE_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2112      	movs	r1, #18
 8000fb4:	4841      	ldr	r0, [pc, #260]	; (80010bc <MX_GPIO_Init+0x1e0>)
 8000fb6:	f002 fb30 	bl	800361a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fc0:	483c      	ldr	r0, [pc, #240]	; (80010b4 <MX_GPIO_Init+0x1d8>)
 8000fc2:	f002 fb2a 	bl	800361a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WC_EEPROM_GPIO_Port, WC_EEPROM_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2120      	movs	r1, #32
 8000fca:	483d      	ldr	r0, [pc, #244]	; (80010c0 <MX_GPIO_Init+0x1e4>)
 8000fcc:	f002 fb25 	bl	800361a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fd4:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fe2:	f107 0320 	add.w	r3, r7, #32
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4832      	ldr	r0, [pc, #200]	; (80010b4 <MX_GPIO_Init+0x1d8>)
 8000fea:	f002 f96b 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ffa:	f107 0320 	add.w	r3, r7, #32
 8000ffe:	4619      	mov	r1, r3
 8001000:	482d      	ldr	r0, [pc, #180]	; (80010b8 <MX_GPIO_Init+0x1dc>)
 8001002:	f002 f95f 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin */
  GPIO_InitStruct.Pin = COMM_PC_LED_Pin|COMM_CAN_LED_Pin|COMM_CAN_CHECK_LED_Pin|COMM_UART_LED_Pin
 8001006:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800100a:	623b      	str	r3, [r7, #32]
                          |COMM_RS485_LED_Pin|ERROR_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2302      	movs	r3, #2
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001018:	f107 0320 	add.w	r3, r7, #32
 800101c:	4619      	mov	r1, r3
 800101e:	4826      	ldr	r0, [pc, #152]	; (80010b8 <MX_GPIO_Init+0x1dc>)
 8001020:	f002 f950 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = CHECK_WIRE_1_Pin|CHECK_WIRE_2_Pin|CHECK_WIRE_3_Pin|CHECK_WIRE_4_Pin
 8001024:	f240 330f 	movw	r3, #783	; 0x30f
 8001028:	623b      	str	r3, [r7, #32]
                          |BUTTON_DOWN_Pin|BUTTON_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001032:	f107 0320 	add.w	r3, r7, #32
 8001036:	4619      	mov	r1, r3
 8001038:	4822      	ldr	r0, [pc, #136]	; (80010c4 <MX_GPIO_Init+0x1e8>)
 800103a:	f002 f943 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_OPEN_Pin;
 800103e:	2301      	movs	r3, #1
 8001040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SW_OPEN_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 0320 	add.w	r3, r7, #32
 800104e:	4619      	mov	r1, r3
 8001050:	481a      	ldr	r0, [pc, #104]	; (80010bc <MX_GPIO_Init+0x1e0>)
 8001052:	f002 f937 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RS485_TXE_Pin;
 8001056:	2312      	movs	r3, #18
 8001058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2302      	movs	r3, #2
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 0320 	add.w	r3, r7, #32
 800106a:	4619      	mov	r1, r3
 800106c:	4813      	ldr	r0, [pc, #76]	; (80010bc <MX_GPIO_Init+0x1e0>)
 800106e:	f002 f929 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001072:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001076:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001078:	2300      	movs	r3, #0
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001080:	f107 0320 	add.w	r3, r7, #32
 8001084:	4619      	mov	r1, r3
 8001086:	4810      	ldr	r0, [pc, #64]	; (80010c8 <MX_GPIO_Init+0x1ec>)
 8001088:	f002 f91c 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WC_EEPROM_Pin;
 800108c:	2320      	movs	r3, #32
 800108e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001090:	2301      	movs	r3, #1
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2302      	movs	r3, #2
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(WC_EEPROM_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 0320 	add.w	r3, r7, #32
 80010a0:	4619      	mov	r1, r3
 80010a2:	4807      	ldr	r0, [pc, #28]	; (80010c0 <MX_GPIO_Init+0x1e4>)
 80010a4:	f002 f90e 	bl	80032c4 <HAL_GPIO_Init>

}
 80010a8:	bf00      	nop
 80010aa:	3730      	adds	r7, #48	; 0x30
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40011800 	.word	0x40011800
 80010b8:	40011c00 	.word	0x40011c00
 80010bc:	40010800 	.word	0x40010800
 80010c0:	40010c00 	.word	0x40010c00
 80010c4:	40011000 	.word	0x40011000
 80010c8:	40012000 	.word	0x40012000

080010cc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <MX_I2C1_Init+0x50>)
 80010d2:	4a13      	ldr	r2, [pc, #76]	; (8001120 <MX_I2C1_Init+0x54>)
 80010d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_I2C1_Init+0x50>)
 80010d8:	4a12      	ldr	r2, [pc, #72]	; (8001124 <MX_I2C1_Init+0x58>)
 80010da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_I2C1_Init+0x50>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_I2C1_Init+0x50>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_I2C1_Init+0x50>)
 80010ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f0:	4b0a      	ldr	r3, [pc, #40]	; (800111c <MX_I2C1_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_I2C1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <MX_I2C1_Init+0x50>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_I2C1_Init+0x50>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001108:	4804      	ldr	r0, [pc, #16]	; (800111c <MX_I2C1_Init+0x50>)
 800110a:	f002 fab7 	bl	800367c <HAL_I2C_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001114:	f000 fb20 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	2000027c 	.word	0x2000027c
 8001120:	40005400 	.word	0x40005400
 8001124:	00061a80 	.word	0x00061a80

08001128 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a3b      	ldr	r2, [pc, #236]	; (8001230 <HAL_I2C_MspInit+0x108>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d16f      	bne.n	8001228 <HAL_I2C_MspInit+0x100>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001148:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <HAL_I2C_MspInit+0x10c>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a39      	ldr	r2, [pc, #228]	; (8001234 <HAL_I2C_MspInit+0x10c>)
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b37      	ldr	r3, [pc, #220]	; (8001234 <HAL_I2C_MspInit+0x10c>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0308 	and.w	r3, r3, #8
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001160:	23c0      	movs	r3, #192	; 0xc0
 8001162:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001164:	2312      	movs	r3, #18
 8001166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	4619      	mov	r1, r3
 8001172:	4831      	ldr	r0, [pc, #196]	; (8001238 <HAL_I2C_MspInit+0x110>)
 8001174:	f002 f8a6 	bl	80032c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001178:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <HAL_I2C_MspInit+0x10c>)
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	4a2d      	ldr	r2, [pc, #180]	; (8001234 <HAL_I2C_MspInit+0x10c>)
 800117e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001182:	61d3      	str	r3, [r2, #28]
 8001184:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <HAL_I2C_MspInit+0x10c>)
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001190:	4b2a      	ldr	r3, [pc, #168]	; (800123c <HAL_I2C_MspInit+0x114>)
 8001192:	4a2b      	ldr	r2, [pc, #172]	; (8001240 <HAL_I2C_MspInit+0x118>)
 8001194:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001196:	4b29      	ldr	r3, [pc, #164]	; (800123c <HAL_I2C_MspInit+0x114>)
 8001198:	2200      	movs	r2, #0
 800119a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800119c:	4b27      	ldr	r3, [pc, #156]	; (800123c <HAL_I2C_MspInit+0x114>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <HAL_I2C_MspInit+0x114>)
 80011a4:	2280      	movs	r2, #128	; 0x80
 80011a6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011a8:	4b24      	ldr	r3, [pc, #144]	; (800123c <HAL_I2C_MspInit+0x114>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <HAL_I2C_MspInit+0x114>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80011b4:	4b21      	ldr	r3, [pc, #132]	; (800123c <HAL_I2C_MspInit+0x114>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011ba:	4b20      	ldr	r3, [pc, #128]	; (800123c <HAL_I2C_MspInit+0x114>)
 80011bc:	2200      	movs	r2, #0
 80011be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80011c0:	481e      	ldr	r0, [pc, #120]	; (800123c <HAL_I2C_MspInit+0x114>)
 80011c2:	f001 fc2b 	bl	8002a1c <HAL_DMA_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 80011cc:	f000 fac4 	bl	8001758 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a1a      	ldr	r2, [pc, #104]	; (800123c <HAL_I2C_MspInit+0x114>)
 80011d4:	639a      	str	r2, [r3, #56]	; 0x38
 80011d6:	4a19      	ldr	r2, [pc, #100]	; (800123c <HAL_I2C_MspInit+0x114>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <HAL_I2C_MspInit+0x11c>)
 80011de:	4a1a      	ldr	r2, [pc, #104]	; (8001248 <HAL_I2C_MspInit+0x120>)
 80011e0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <HAL_I2C_MspInit+0x11c>)
 80011e4:	2210      	movs	r2, #16
 80011e6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <HAL_I2C_MspInit+0x11c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_I2C_MspInit+0x11c>)
 80011f0:	2280      	movs	r2, #128	; 0x80
 80011f2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <HAL_I2C_MspInit+0x11c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_I2C_MspInit+0x11c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_I2C_MspInit+0x11c>)
 8001202:	2200      	movs	r2, #0
 8001204:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <HAL_I2C_MspInit+0x11c>)
 8001208:	2200      	movs	r2, #0
 800120a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <HAL_I2C_MspInit+0x11c>)
 800120e:	f001 fc05 	bl	8002a1c <HAL_DMA_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 8001218:	f000 fa9e 	bl	8001758 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a09      	ldr	r2, [pc, #36]	; (8001244 <HAL_I2C_MspInit+0x11c>)
 8001220:	635a      	str	r2, [r3, #52]	; 0x34
 8001222:	4a08      	ldr	r2, [pc, #32]	; (8001244 <HAL_I2C_MspInit+0x11c>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001228:	bf00      	nop
 800122a:	3720      	adds	r7, #32
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40005400 	.word	0x40005400
 8001234:	40021000 	.word	0x40021000
 8001238:	40010c00 	.word	0x40010c00
 800123c:	200002d0 	.word	0x200002d0
 8001240:	40020080 	.word	0x40020080
 8001244:	20000314 	.word	0x20000314
 8001248:	4002006c 	.word	0x4002006c

0800124c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	for(uint8_t i = 0; i<255; i++)
 8001252:	2300      	movs	r3, #0
 8001254:	71fb      	strb	r3, [r7, #7]
 8001256:	e006      	b.n	8001266 <main+0x1a>
	{
		buff[i] = 'a';
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	4a48      	ldr	r2, [pc, #288]	; (800137c <main+0x130>)
 800125c:	2161      	movs	r1, #97	; 0x61
 800125e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<255; i++)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	3301      	adds	r3, #1
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2bff      	cmp	r3, #255	; 0xff
 800126a:	d1f5      	bne.n	8001258 <main+0xc>
	}
	buff[254] = 0;
 800126c:	4b43      	ldr	r3, [pc, #268]	; (800137c <main+0x130>)
 800126e:	2200      	movs	r2, #0
 8001270:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001274:	f001 f81a 	bl	80022ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001278:	f000 f89e 	bl	80013b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127c:	f7ff fe2e 	bl	8000edc <MX_GPIO_Init>
  MX_DMA_Init();
 8001280:	f7ff fd56 	bl	8000d30 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001284:	f000 ff0e 	bl	80020a4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001288:	f7ff ff20 	bl	80010cc <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800128c:	f00b ff40 	bl	800d110 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001290:	f7ff fbb4 	bl	80009fc <MX_ADC1_Init>
  MX_TIM3_Init();
 8001294:	f000 fcfa 	bl	8001c8c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001298:	f000 fd6e 	bl	8001d78 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800129c:	f000 feae 	bl	8001ffc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80012a0:	f000 fed6 	bl	8002050 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80012a4:	f000 f8e7 	bl	8001476 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  OldTick500ms = HAL_GetTick();
 80012a8:	f001 f858 	bl	800235c <HAL_GetTick>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4a34      	ldr	r2, [pc, #208]	; (8001380 <main+0x134>)
 80012b0:	6013      	str	r3, [r2, #0]

  if (ds18b20_read_address(ds1) != HAL_OK)
 80012b2:	4834      	ldr	r0, [pc, #208]	; (8001384 <main+0x138>)
 80012b4:	f7ff fd52 	bl	8000d5c <ds18b20_read_address>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <main+0x76>
  {
    Error_Handler();
 80012be:	f000 fa4b 	bl	8001758 <Error_Handler>
  }

  ButtonInitKey(&KeyUp, BUTTON_UP_GPIO_Port, BUTTON_UP_Pin, 20, 1000, 500);
 80012c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2314      	movs	r3, #20
 80012d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d4:	492c      	ldr	r1, [pc, #176]	; (8001388 <main+0x13c>)
 80012d6:	482d      	ldr	r0, [pc, #180]	; (800138c <main+0x140>)
 80012d8:	f7ff fc22 	bl	8000b20 <ButtonInitKey>
  ButtonInitKey(&KeyDown, BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin, 20, 1000, 500);
 80012dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2314      	movs	r3, #20
 80012ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ee:	4926      	ldr	r1, [pc, #152]	; (8001388 <main+0x13c>)
 80012f0:	4827      	ldr	r0, [pc, #156]	; (8001390 <main+0x144>)
 80012f2:	f7ff fc15 	bl	8000b20 <ButtonInitKey>


  SSD1306_Init(&hi2c1);
 80012f6:	4827      	ldr	r0, [pc, #156]	; (8001394 <main+0x148>)
 80012f8:	f000 fb24 	bl	8001944 <SSD1306_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  GPIOF->ODR = 0x400;
 80012fc:	4b26      	ldr	r3, [pc, #152]	; (8001398 <main+0x14c>)
 80012fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001302:	60da      	str	r2, [r3, #12]

  m24cxxInit(&M24C02, &hi2c1, EEPROM_ADDRES, M24C02_MEM_SIZE, WC_EEPROM_GPIO_Port, WC_EEPROM_Pin);
 8001304:	2320      	movs	r3, #32
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	4b24      	ldr	r3, [pc, #144]	; (800139c <main+0x150>)
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001310:	2250      	movs	r2, #80	; 0x50
 8001312:	4920      	ldr	r1, [pc, #128]	; (8001394 <main+0x148>)
 8001314:	4822      	ldr	r0, [pc, #136]	; (80013a0 <main+0x154>)
 8001316:	f7ff fb13 	bl	8000940 <m24cxxInit>

  while (1)
  {
	  if(LineCounter)
 800131a:	4b22      	ldr	r3, [pc, #136]	; (80013a4 <main+0x158>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00c      	beq.n	800133c <main+0xf0>
	  {
		  Parser_TakeLine(&ReceiveBuffer, ReceivedData);
 8001322:	4921      	ldr	r1, [pc, #132]	; (80013a8 <main+0x15c>)
 8001324:	4821      	ldr	r0, [pc, #132]	; (80013ac <main+0x160>)
 8001326:	f000 fa1c 	bl	8001762 <Parser_TakeLine>

		  LineCounter--;
 800132a:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <main+0x158>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	3b01      	subs	r3, #1
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <main+0x158>)
 8001334:	701a      	strb	r2, [r3, #0]

		  Parser_parse(ReceivedData);
 8001336:	481c      	ldr	r0, [pc, #112]	; (80013a8 <main+0x15c>)
 8001338:	f000 fa3c 	bl	80017b4 <Parser_parse>
	  }
	  if(DataToTransmit > 0 )
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <main+0x164>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d010      	beq.n	8001366 <main+0x11a>
	  {

		  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <main+0x168>)
 8001346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800134a:	603b      	str	r3, [r7, #0]
		  if (hcdc->TxState == 0)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001352:	2b00      	cmp	r3, #0
 8001354:	d107      	bne.n	8001366 <main+0x11a>
		  {
			  UsbTransmitTask();
 8001356:	f000 f9d5 	bl	8001704 <UsbTransmitTask>

			  DataToTransmit--;
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <main+0x164>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	3b01      	subs	r3, #1
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <main+0x164>)
 8001364:	701a      	strb	r2, [r3, #0]
		  }

	  }

	  IntervalFunc100ms();
 8001366:	f000 f927 	bl	80015b8 <IntervalFunc100ms>
	  IntervalFunc500ms();
 800136a:	f000 f8cb 	bl	8001504 <IntervalFunc500ms>

	  ButtonTask(&KeyDown);
 800136e:	4808      	ldr	r0, [pc, #32]	; (8001390 <main+0x144>)
 8001370:	f7ff fcb0 	bl	8000cd4 <ButtonTask>
	  ButtonTask(&KeyUp);
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <main+0x140>)
 8001376:	f7ff fcad 	bl	8000cd4 <ButtonTask>
	  if(LineCounter)
 800137a:	e7ce      	b.n	800131a <main+0xce>
 800137c:	20000cec 	.word	0x20000cec
 8001380:	20000bc0 	.word	0x20000bc0
 8001384:	20000bd0 	.word	0x20000bd0
 8001388:	40011000 	.word	0x40011000
 800138c:	20000358 	.word	0x20000358
 8001390:	20000384 	.word	0x20000384
 8001394:	2000027c 	.word	0x2000027c
 8001398:	40011c00 	.word	0x40011c00
 800139c:	40010c00 	.word	0x40010c00
 80013a0:	20000bd8 	.word	0x20000bd8
 80013a4:	200007b8 	.word	0x200007b8
 80013a8:	200007bc 	.word	0x200007bc
 80013ac:	200003b0 	.word	0x200003b0
 80013b0:	20000bbc 	.word	0x20000bbc
 80013b4:	20000f88 	.word	0x20000f88

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b096      	sub	sp, #88	; 0x58
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013c2:	2228      	movs	r2, #40	; 0x28
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f00c fb7e 	bl	800dac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]
 80013ea:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ec:	2301      	movs	r3, #1
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013fa:	2301      	movs	r3, #1
 80013fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fe:	2302      	movs	r3, #2
 8001400:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001402:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001406:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001408:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800140c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001412:	4618      	mov	r0, r3
 8001414:	f006 fa94 	bl	8007940 <HAL_RCC_OscConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800141e:	f000 f99b 	bl	8001758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001422:	230f      	movs	r3, #15
 8001424:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001426:	2302      	movs	r3, #2
 8001428:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800142e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	2102      	movs	r1, #2
 800143e:	4618      	mov	r0, r3
 8001440:	f006 fd00 	bl	8007e44 <HAL_RCC_ClockConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800144a:	f000 f985 	bl	8001758 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800144e:	2312      	movs	r3, #18
 8001450:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001456:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001458:	2300      	movs	r3, #0
 800145a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	4618      	mov	r0, r3
 8001460:	f006 fe80 	bl	8008164 <HAL_RCCEx_PeriphCLKConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800146a:	f000 f975 	bl	8001758 <Error_Handler>
  }
}
 800146e:	bf00      	nop
 8001470:	3758      	adds	r7, #88	; 0x58
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	201f      	movs	r0, #31
 8001480:	f001 fa95 	bl	80029ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001484:	201f      	movs	r0, #31
 8001486:	f001 faae 	bl	80029e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	2011      	movs	r0, #17
 8001490:	f001 fa8d 	bl	80029ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001494:	2011      	movs	r0, #17
 8001496:	f001 faa6 	bl	80029e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	2010      	movs	r0, #16
 80014a0:	f001 fa85 	bl	80029ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80014a4:	2010      	movs	r0, #16
 80014a6:	f001 fa9e 	bl	80029e6 <HAL_NVIC_EnableIRQ>
  /* USB_LP_CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	2014      	movs	r0, #20
 80014b0:	f001 fa7d 	bl	80029ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80014b4:	2014      	movs	r0, #20
 80014b6:	f001 fa96 	bl	80029e6 <HAL_NVIC_EnableIRQ>
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}

080014be <all>:

/* USER CODE BEGIN 4 */

void all(void)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 80014c2:	2032      	movs	r0, #50	; 0x32
 80014c4:	f000 ff54 	bl	8002370 <HAL_Delay>
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}

080014cc <GpioFLedToggle>:
//	{
//		GPIOE->ODR = 0x01;
//	}
//}
void GpioFLedToggle()
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
	GPIOF->ODR = GPIOF->ODR << 1;
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <GpioFLedToggle+0x34>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <GpioFLedToggle+0x34>)
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	60d3      	str	r3, [r2, #12]
	if(!(GPIOF->ODR <= 0x8000 && GPIOF->ODR >= 0x200))
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <GpioFLedToggle+0x34>)
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014e2:	d804      	bhi.n	80014ee <GpioFLedToggle+0x22>
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <GpioFLedToggle+0x34>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014ec:	d203      	bcs.n	80014f6 <GpioFLedToggle+0x2a>
	{
		GPIOF->ODR = 0x200;
 80014ee:	4b04      	ldr	r3, [pc, #16]	; (8001500 <GpioFLedToggle+0x34>)
 80014f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f4:	60da      	str	r2, [r3, #12]
	}
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40011c00 	.word	0x40011c00

08001504 <IntervalFunc500ms>:

void IntervalFunc500ms(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	  if(HAL_GetTick() - OldTick500ms >500)
 8001508:	f000 ff28 	bl	800235c <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	4b22      	ldr	r3, [pc, #136]	; (8001598 <IntervalFunc500ms+0x94>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001518:	d93c      	bls.n	8001594 <IntervalFunc500ms+0x90>
	  {
		  OldTick500ms = HAL_GetTick();
 800151a:	f000 ff1f 	bl	800235c <HAL_GetTick>
 800151e:	4603      	mov	r3, r0
 8001520:	4a1d      	ldr	r2, [pc, #116]	; (8001598 <IntervalFunc500ms+0x94>)
 8001522:	6013      	str	r3, [r2, #0]

		  if(M24C02.i2c -> State == HAL_I2C_STATE_READY)
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <IntervalFunc500ms+0x98>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b20      	cmp	r3, #32
 8001530:	d103      	bne.n	800153a <IntervalFunc500ms+0x36>
		  {
			  m24cxxFullRead(&M24C02, EpromBufer);
 8001532:	491b      	ldr	r1, [pc, #108]	; (80015a0 <IntervalFunc500ms+0x9c>)
 8001534:	4819      	ldr	r0, [pc, #100]	; (800159c <IntervalFunc500ms+0x98>)
 8001536:	f7ff fa2b 	bl	8000990 <m24cxxFullRead>
		  }

//		  GpioELedToggle();
		  GpioFLedToggle();
 800153a:	f7ff ffc7 	bl	80014cc <GpioFLedToggle>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800153e:	2102      	movs	r1, #2
 8001540:	4818      	ldr	r0, [pc, #96]	; (80015a4 <IntervalFunc500ms+0xa0>)
 8001542:	f002 f882 	bl	800364a <HAL_GPIO_TogglePin>

		  static uint8_t TempMeasureFlag = 0;
		  if(!TempMeasureFlag)
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <IntervalFunc500ms+0xa4>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d106      	bne.n	800155c <IntervalFunc500ms+0x58>
		  {
			  ds18b20_start_measure(NULL);
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff fc65 	bl	8000e1e <ds18b20_start_measure>
			  TempMeasureFlag = 1;
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <IntervalFunc500ms+0xa4>)
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
			  Temperature = Temp;
			  Temperature = Temperature/100;
			  TempMeasureFlag = 0;
		  }
	  }
}
 800155a:	e01b      	b.n	8001594 <IntervalFunc500ms+0x90>
			  Temp = ds18b20_get_temp_wo_fp(NULL);
 800155c:	2000      	movs	r0, #0
 800155e:	f7ff fc9c 	bl	8000e9a <ds18b20_get_temp_wo_fp>
 8001562:	4603      	mov	r3, r0
 8001564:	461a      	mov	r2, r3
 8001566:	4b11      	ldr	r3, [pc, #68]	; (80015ac <IntervalFunc500ms+0xa8>)
 8001568:	601a      	str	r2, [r3, #0]
			  Temperature = Temp;
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <IntervalFunc500ms+0xa8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ff1a 	bl	80003a8 <__aeabi_i2f>
 8001574:	4603      	mov	r3, r0
 8001576:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <IntervalFunc500ms+0xac>)
 8001578:	6013      	str	r3, [r2, #0]
			  Temperature = Temperature/100;
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <IntervalFunc500ms+0xac>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	490d      	ldr	r1, [pc, #52]	; (80015b4 <IntervalFunc500ms+0xb0>)
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff f819 	bl	80005b8 <__aeabi_fdiv>
 8001586:	4603      	mov	r3, r0
 8001588:	461a      	mov	r2, r3
 800158a:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <IntervalFunc500ms+0xac>)
 800158c:	601a      	str	r2, [r3, #0]
			  TempMeasureFlag = 0;
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <IntervalFunc500ms+0xa4>)
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000bc0 	.word	0x20000bc0
 800159c:	20000bd8 	.word	0x20000bd8
 80015a0:	20000bec 	.word	0x20000bec
 80015a4:	40010800 	.word	0x40010800
 80015a8:	20000dec 	.word	0x20000dec
 80015ac:	20000bc8 	.word	0x20000bc8
 80015b0:	20000bcc 	.word	0x20000bcc
 80015b4:	42c80000 	.word	0x42c80000

080015b8 <IntervalFunc100ms>:

void IntervalFunc100ms(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - OldTick100ms >100)
 80015bc:	f000 fece 	bl	800235c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <IntervalFunc100ms+0x28>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b64      	cmp	r3, #100	; 0x64
 80015ca:	d907      	bls.n	80015dc <IntervalFunc100ms+0x24>
	{
		OldTick100ms = HAL_GetTick();
 80015cc:	f000 fec6 	bl	800235c <HAL_GetTick>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4a03      	ldr	r2, [pc, #12]	; (80015e0 <IntervalFunc100ms+0x28>)
 80015d4:	6013      	str	r3, [r2, #0]
		UsbBuffWrite((char*)buff);
 80015d6:	4803      	ldr	r0, [pc, #12]	; (80015e4 <IntervalFunc100ms+0x2c>)
 80015d8:	f000 f850 	bl	800167c <UsbBuffWrite>
	}

}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000bc4 	.word	0x20000bc4
 80015e4:	20000cec 	.word	0x20000cec

080015e8 <HAL_I2C_MemTxCpltCallback>:


void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	m24cxxWcSetIt(&M24C02, hi2c);
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	4803      	ldr	r0, [pc, #12]	; (8001600 <HAL_I2C_MemTxCpltCallback+0x18>)
 80015f4:	f7ff f9e3 	bl	80009be <m24cxxWcSetIt>
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000bd8 	.word	0x20000bd8

08001604 <CDC_ReveiveCallback>:

void CDC_ReveiveCallback(uint8_t *Buffer, uint8_t Length)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
	if(Length > 0)
 8001610:	78fb      	ldrb	r3, [r7, #3]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d027      	beq.n	8001666 <CDC_ReveiveCallback+0x62>
	{
		uint8_t i = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	73fb      	strb	r3, [r7, #15]
		while(i < Length)
 800161a:	e020      	b.n	800165e <CDC_ReveiveCallback+0x5a>
		{
		if (RB_OK == Ring_Buffer_Write(&ReceiveBuffer, Buffer[i]))
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	4812      	ldr	r0, [pc, #72]	; (8001670 <CDC_ReveiveCallback+0x6c>)
 8001628:	f000 f93a 	bl	80018a0 <Ring_Buffer_Write>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10c      	bne.n	800164c <CDC_ReveiveCallback+0x48>
		{
			if(Buffer[i] == ENDLINE)
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	4413      	add	r3, r2
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b5e      	cmp	r3, #94	; 0x5e
 800163c:	d10c      	bne.n	8001658 <CDC_ReveiveCallback+0x54>
			{
				LineCounter++;
 800163e:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <CDC_ReveiveCallback+0x70>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <CDC_ReveiveCallback+0x70>)
 8001648:	701a      	strb	r2, [r3, #0]
 800164a:	e005      	b.n	8001658 <CDC_ReveiveCallback+0x54>
			}
		}
		else
		{
			Ring_Buffer_Flush(&ReceiveBuffer);
 800164c:	4808      	ldr	r0, [pc, #32]	; (8001670 <CDC_ReveiveCallback+0x6c>)
 800164e:	f000 f94f 	bl	80018f0 <Ring_Buffer_Flush>
			UsbBuffWrite("ERROR");
 8001652:	4809      	ldr	r0, [pc, #36]	; (8001678 <CDC_ReveiveCallback+0x74>)
 8001654:	f000 f812 	bl	800167c <UsbBuffWrite>
		}
		i++;
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	3301      	adds	r3, #1
 800165c:	73fb      	strb	r3, [r7, #15]
		while(i < Length)
 800165e:	7bfa      	ldrb	r2, [r7, #15]
 8001660:	78fb      	ldrb	r3, [r7, #3]
 8001662:	429a      	cmp	r2, r3
 8001664:	d3da      	bcc.n	800161c <CDC_ReveiveCallback+0x18>
		}
	}
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200003b0 	.word	0x200003b0
 8001674:	200007b8 	.word	0x200007b8
 8001678:	0800ecb4 	.word	0x0800ecb4

0800167c <UsbBuffWrite>:

void UsbBuffWrite(char * Message)
{
 800167c:	b590      	push	{r4, r7, lr}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

	DataToTransmit++;
 8001684:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <UsbBuffWrite+0x80>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	3301      	adds	r3, #1
 800168a:	b2da      	uxtb	r2, r3
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <UsbBuffWrite+0x80>)
 800168e:	701a      	strb	r2, [r3, #0]
	for(uint8_t y = 0 ; y < strlen(Message) ; y++)
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]
 8001694:	e016      	b.n	80016c4 <UsbBuffWrite+0x48>
	{
		if(RB_OK == Ring_Buffer_Write(&TransmitBuffer, Message[y]))
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	4413      	add	r3, r2
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	4619      	mov	r1, r3
 80016a0:	4817      	ldr	r0, [pc, #92]	; (8001700 <UsbBuffWrite+0x84>)
 80016a2:	f000 f8fd 	bl	80018a0 <Ring_Buffer_Write>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <UsbBuffWrite+0x42>
		{

		}
		else
		{
			Ring_Buffer_Flush(&TransmitBuffer);
 80016ac:	4814      	ldr	r0, [pc, #80]	; (8001700 <UsbBuffWrite+0x84>)
 80016ae:	f000 f91f 	bl	80018f0 <Ring_Buffer_Flush>
			DataToTransmit--;
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <UsbBuffWrite+0x80>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	4b10      	ldr	r3, [pc, #64]	; (80016fc <UsbBuffWrite+0x80>)
 80016bc:	701a      	strb	r2, [r3, #0]
	for(uint8_t y = 0 ; y < strlen(Message) ; y++)
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	3301      	adds	r3, #1
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	7bfc      	ldrb	r4, [r7, #15]
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7fe fdac 	bl	8000224 <strlen>
 80016cc:	4603      	mov	r3, r0
 80016ce:	429c      	cmp	r4, r3
 80016d0:	d3e1      	bcc.n	8001696 <UsbBuffWrite+0x1a>
		}
	}

	if(RB_OK == Ring_Buffer_Write(&TransmitBuffer, '^'))
 80016d2:	215e      	movs	r1, #94	; 0x5e
 80016d4:	480a      	ldr	r0, [pc, #40]	; (8001700 <UsbBuffWrite+0x84>)
 80016d6:	f000 f8e3 	bl	80018a0 <Ring_Buffer_Write>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <UsbBuffWrite+0x76>
	{

	}
	else
	{
		Ring_Buffer_Flush(&TransmitBuffer);
 80016e0:	4807      	ldr	r0, [pc, #28]	; (8001700 <UsbBuffWrite+0x84>)
 80016e2:	f000 f905 	bl	80018f0 <Ring_Buffer_Flush>
		DataToTransmit--;
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <UsbBuffWrite+0x80>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4b03      	ldr	r3, [pc, #12]	; (80016fc <UsbBuffWrite+0x80>)
 80016f0:	701a      	strb	r2, [r3, #0]
	}

}
 80016f2:	bf00      	nop
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd90      	pop	{r4, r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000bbc 	.word	0x20000bbc
 8001700:	200005b4 	.word	0x200005b4

08001704 <UsbTransmitTask>:

void UsbTransmitTask(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	71bb      	strb	r3, [r7, #6]
		do
		{
			if(Ring_Buffer_Read(&TransmitBuffer, &tmp) == RB_OK)
 8001712:	1dbb      	adds	r3, r7, #6
 8001714:	4619      	mov	r1, r3
 8001716:	480e      	ldr	r0, [pc, #56]	; (8001750 <UsbTransmitTask+0x4c>)
 8001718:	f000 f89a 	bl	8001850 <Ring_Buffer_Read>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10a      	bne.n	8001738 <UsbTransmitTask+0x34>
			{
			TransmitData[i] = tmp;
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	79b9      	ldrb	r1, [r7, #6]
 8001726:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <UsbTransmitTask+0x50>)
 8001728:	54d1      	strb	r1, [r2, r3]
			i++;
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	3301      	adds	r3, #1
 800172e:	71fb      	strb	r3, [r7, #7]
			else
			{
				break;
			}

		} while(tmp != '^');
 8001730:	79bb      	ldrb	r3, [r7, #6]
 8001732:	2b5e      	cmp	r3, #94	; 0x5e
 8001734:	d1ed      	bne.n	8001712 <UsbTransmitTask+0xe>
 8001736:	e000      	b.n	800173a <UsbTransmitTask+0x36>
				break;
 8001738:	bf00      	nop

		CDC_Transmit_FS(TransmitData, i);
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	b29b      	uxth	r3, r3
 800173e:	4619      	mov	r1, r3
 8001740:	4804      	ldr	r0, [pc, #16]	; (8001754 <UsbTransmitTask+0x50>)
 8001742:	f00b fdbd 	bl	800d2c0 <CDC_Transmit_FS>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200005b4 	.word	0x200005b4
 8001754:	200009bc 	.word	0x200009bc

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800175c:	b672      	cpsid	i
}
 800175e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001760:	e7fe      	b.n	8001760 <Error_Handler+0x8>

08001762 <Parser_TakeLine>:
		{PWM3, all, 1},
		{PWM4, all, 1},
};

void Parser_TakeLine(RingBuffer_t *Buff, uint8_t *Destination)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b084      	sub	sp, #16
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	6039      	str	r1, [r7, #0]
	  uint8_t i = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]
	  uint8_t tmp = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	73bb      	strb	r3, [r7, #14]
	do
	{
		 Ring_Buffer_Read(Buff, &tmp);
 8001774:	f107 030e 	add.w	r3, r7, #14
 8001778:	4619      	mov	r1, r3
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f868 	bl	8001850 <Ring_Buffer_Read>
		 if(tmp == ENDLINE)
 8001780:	7bbb      	ldrb	r3, [r7, #14]
 8001782:	2b5e      	cmp	r3, #94	; 0x5e
 8001784:	d105      	bne.n	8001792 <Parser_TakeLine+0x30>
			{
			 Destination[i] = 0;
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	4413      	add	r3, r2
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
 8001790:	e004      	b.n	800179c <Parser_TakeLine+0x3a>
			}
		else
			{
			Destination[i] = tmp;
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	4413      	add	r3, r2
 8001798:	7bba      	ldrb	r2, [r7, #14]
 800179a:	701a      	strb	r2, [r3, #0]
			}

			i++;
 800179c:	7bfb      	ldrb	r3, [r7, #15]
 800179e:	3301      	adds	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]

	} while(tmp != ENDLINE);
 80017a2:	7bbb      	ldrb	r3, [r7, #14]
 80017a4:	2b5e      	cmp	r3, #94	; 0x5e
 80017a6:	d1e5      	bne.n	8001774 <Parser_TakeLine+0x12>
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <Parser_parse>:




void Parser_parse(uint8_t * DataToParse)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	char * ParsePointer = strtok((char*)DataToParse, "/");
 80017bc:	4921      	ldr	r1, [pc, #132]	; (8001844 <Parser_parse+0x90>)
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f00c f98a 	bl	800dad8 <strtok>
 80017c4:	6138      	str	r0, [r7, #16]
	uint8_t CommandID = atoi(ParsePointer);
 80017c6:	6938      	ldr	r0, [r7, #16]
 80017c8:	f00c f950 	bl	800da6c <atoi>
 80017cc:	4603      	mov	r3, r0
 80017ce:	73fb      	strb	r3, [r7, #15]

	if(CommandMapper[CommandID].Action != NULL)
 80017d0:	7bfa      	ldrb	r2, [r7, #15]
 80017d2:	491d      	ldr	r1, [pc, #116]	; (8001848 <Parser_parse+0x94>)
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	3304      	adds	r3, #4
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d029      	beq.n	800183a <Parser_parse+0x86>
	{
		for(uint8_t i = 0; i<CommandMapper[CommandID].CommandArgQ; i++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	75fb      	strb	r3, [r7, #23]
 80017ea:	e010      	b.n	800180e <Parser_parse+0x5a>
		{
			char * ParsePointer = strtok(NULL, "/");
 80017ec:	4915      	ldr	r1, [pc, #84]	; (8001844 <Parser_parse+0x90>)
 80017ee:	2000      	movs	r0, #0
 80017f0:	f00c f972 	bl	800dad8 <strtok>
 80017f4:	60b8      	str	r0, [r7, #8]
			ReceivedCommandArgument[i] = atoi(ParsePointer);
 80017f6:	68b8      	ldr	r0, [r7, #8]
 80017f8:	f00c f938 	bl	800da6c <atoi>
 80017fc:	4602      	mov	r2, r0
 80017fe:	7dfb      	ldrb	r3, [r7, #23]
 8001800:	b291      	uxth	r1, r2
 8001802:	4a12      	ldr	r2, [pc, #72]	; (800184c <Parser_parse+0x98>)
 8001804:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i = 0; i<CommandMapper[CommandID].CommandArgQ; i++)
 8001808:	7dfb      	ldrb	r3, [r7, #23]
 800180a:	3301      	adds	r3, #1
 800180c:	75fb      	strb	r3, [r7, #23]
 800180e:	7bfa      	ldrb	r2, [r7, #15]
 8001810:	490d      	ldr	r1, [pc, #52]	; (8001848 <Parser_parse+0x94>)
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	440b      	add	r3, r1
 800181c:	3308      	adds	r3, #8
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	7dfa      	ldrb	r2, [r7, #23]
 8001822:	429a      	cmp	r2, r3
 8001824:	d3e2      	bcc.n	80017ec <Parser_parse+0x38>
		}

		CommandMapper[CommandID].Action();
 8001826:	7bfa      	ldrb	r2, [r7, #15]
 8001828:	4907      	ldr	r1, [pc, #28]	; (8001848 <Parser_parse+0x94>)
 800182a:	4613      	mov	r3, r2
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4413      	add	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	440b      	add	r3, r1
 8001834:	3304      	adds	r3, #4
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4798      	blx	r3
	}
}
 800183a:	bf00      	nop
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	0800ecbc 	.word	0x0800ecbc
 8001848:	20000000 	.word	0x20000000
 800184c:	20000df0 	.word	0x20000df0

08001850 <Ring_Buffer_Read>:
 */
#include "main.h"
#include "ring_buffer.h"

RbStatus_t Ring_Buffer_Read(RingBuffer_t * Buff, uint8_t *value)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
	if(Buff->Head == Buff->Tail)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	881a      	ldrh	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	885b      	ldrh	r3, [r3, #2]
 8001862:	429a      	cmp	r2, r3
 8001864:	d101      	bne.n	800186a <Ring_Buffer_Read+0x1a>
	{
		return RB_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e015      	b.n	8001896 <Ring_Buffer_Read+0x46>
	}
	*value = Buff->Buffer[Buff->Tail];
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	885b      	ldrh	r3, [r3, #2]
 800186e:	461a      	mov	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4413      	add	r3, r2
 8001874:	791a      	ldrb	r2, [r3, #4]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	701a      	strb	r2, [r3, #0]

	Buff->Tail = (Buff->Tail + 1) % RING_BUFFER_SIZE;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	885b      	ldrh	r3, [r3, #2]
 800187e:	3301      	adds	r3, #1
 8001880:	425a      	negs	r2, r3
 8001882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001886:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800188a:	bf58      	it	pl
 800188c:	4253      	negpl	r3, r2
 800188e:	b29a      	uxth	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	805a      	strh	r2, [r3, #2]

	return RB_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <Ring_Buffer_Write>:

RbStatus_t Ring_Buffer_Write(RingBuffer_t * Buff, uint8_t value)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	70fb      	strb	r3, [r7, #3]
	uint16_t Head_tmp = (Buff->Head + 1) % RING_BUFFER_SIZE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	3301      	adds	r3, #1
 80018b2:	425a      	negs	r2, r3
 80018b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018bc:	bf58      	it	pl
 80018be:	4253      	negpl	r3, r2
 80018c0:	81fb      	strh	r3, [r7, #14]

	if(Head_tmp == Buff->Tail)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	885b      	ldrh	r3, [r3, #2]
 80018c6:	89fa      	ldrh	r2, [r7, #14]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d101      	bne.n	80018d0 <Ring_Buffer_Write+0x30>
	{
		return RB_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e00a      	b.n	80018e6 <Ring_Buffer_Write+0x46>
	}
	Buff->Buffer[Buff->Head] = value;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	78fa      	ldrb	r2, [r7, #3]
 80018dc:	711a      	strb	r2, [r3, #4]
	Buff->Head = Head_tmp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	89fa      	ldrh	r2, [r7, #14]
 80018e2:	801a      	strh	r2, [r3, #0]

	return RB_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <Ring_Buffer_Flush>:

void Ring_Buffer_Flush(RingBuffer_t * Buff)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	Buff->Head = 0;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	801a      	strh	r2, [r3, #0]
	Buff->Tail = 0;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	805a      	strh	r2, [r3, #2]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
	...

08001910 <SSD1306_Command>:
static I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

static void SSD1306_Command(uint8_t Command)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af04      	add	r7, sp, #16
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <SSD1306_Command+0x30>)
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001922:	9302      	str	r3, [sp, #8]
 8001924:	2301      	movs	r3, #1
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	1dfb      	adds	r3, r7, #7
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2301      	movs	r3, #1
 800192e:	2200      	movs	r2, #0
 8001930:	2178      	movs	r1, #120	; 0x78
 8001932:	f001 fffb 	bl	800392c <HAL_I2C_Mem_Write>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000e10 	.word	0x20000e10

08001944 <SSD1306_Init>:
	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);

}

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 800194c:	4a2a      	ldr	r2, [pc, #168]	; (80019f8 <SSD1306_Init+0xb4>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 8001952:	20ae      	movs	r0, #174	; 0xae
 8001954:	f7ff ffdc 	bl	8001910 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 8001958:	20d5      	movs	r0, #213	; 0xd5
 800195a:	f7ff ffd9 	bl	8001910 <SSD1306_Command>
	SSD1306_Command(0x80);
 800195e:	2080      	movs	r0, #128	; 0x80
 8001960:	f7ff ffd6 	bl	8001910 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETMULTIPLEX);
 8001964:	20a8      	movs	r0, #168	; 0xa8
 8001966:	f7ff ffd3 	bl	8001910 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 800196a:	203f      	movs	r0, #63	; 0x3f
 800196c:	f7ff ffd0 	bl	8001910 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 8001970:	20d3      	movs	r0, #211	; 0xd3
 8001972:	f7ff ffcd 	bl	8001910 <SSD1306_Command>
	SSD1306_Command(0x00);
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff ffca 	bl	8001910 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 800197c:	2040      	movs	r0, #64	; 0x40
 800197e:	f7ff ffc7 	bl	8001910 <SSD1306_Command>
	SSD1306_Command(SSD1306_CHARGEPUMP);
 8001982:	208d      	movs	r0, #141	; 0x8d
 8001984:	f7ff ffc4 	bl	8001910 <SSD1306_Command>
	SSD1306_Command(0x14);
 8001988:	2014      	movs	r0, #20
 800198a:	f7ff ffc1 	bl	8001910 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 800198e:	2020      	movs	r0, #32
 8001990:	f7ff ffbe 	bl	8001910 <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 8001994:	2000      	movs	r0, #0
 8001996:	f7ff ffbb 	bl	8001910 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 800199a:	20a1      	movs	r0, #161	; 0xa1
 800199c:	f7ff ffb8 	bl	8001910 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 80019a0:	20c8      	movs	r0, #200	; 0xc8
 80019a2:	f7ff ffb5 	bl	8001910 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 80019a6:	20da      	movs	r0, #218	; 0xda
 80019a8:	f7ff ffb2 	bl	8001910 <SSD1306_Command>
	SSD1306_Command(0x12);
 80019ac:	2012      	movs	r0, #18
 80019ae:	f7ff ffaf 	bl	8001910 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 80019b2:	2081      	movs	r0, #129	; 0x81
 80019b4:	f7ff ffac 	bl	8001910 <SSD1306_Command>
	SSD1306_Command(0xFF);
 80019b8:	20ff      	movs	r0, #255	; 0xff
 80019ba:	f7ff ffa9 	bl	8001910 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 80019be:	20d9      	movs	r0, #217	; 0xd9
 80019c0:	f7ff ffa6 	bl	8001910 <SSD1306_Command>
	SSD1306_Command(0xF1);
 80019c4:	20f1      	movs	r0, #241	; 0xf1
 80019c6:	f7ff ffa3 	bl	8001910 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 80019ca:	20db      	movs	r0, #219	; 0xdb
 80019cc:	f7ff ffa0 	bl	8001910 <SSD1306_Command>
	SSD1306_Command(0x40);
 80019d0:	2040      	movs	r0, #64	; 0x40
 80019d2:	f7ff ff9d 	bl	8001910 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 80019d6:	20a4      	movs	r0, #164	; 0xa4
 80019d8:	f7ff ff9a 	bl	8001910 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 80019dc:	20a6      	movs	r0, #166	; 0xa6
 80019de:	f7ff ff97 	bl	8001910 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 80019e2:	202e      	movs	r0, #46	; 0x2e
 80019e4:	f7ff ff94 	bl	8001910 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON);
 80019e8:	20af      	movs	r0, #175	; 0xaf
 80019ea:	f7ff ff91 	bl	8001910 <SSD1306_Command>



}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000e10 	.word	0x20000e10

080019fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_MspInit+0x5c>)
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <HAL_MspInit+0x5c>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6193      	str	r3, [r2, #24]
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_MspInit+0x5c>)
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <HAL_MspInit+0x5c>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	4a0e      	ldr	r2, [pc, #56]	; (8001a58 <HAL_MspInit+0x5c>)
 8001a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a24:	61d3      	str	r3, [r2, #28]
 8001a26:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <HAL_MspInit+0x5c>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <HAL_MspInit+0x60>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <HAL_MspInit+0x60>)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40010000 	.word	0x40010000

08001a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <NMI_Handler+0x4>

08001a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <HardFault_Handler+0x4>

08001a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <MemManage_Handler+0x4>

08001a72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <BusFault_Handler+0x4>

08001a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <UsageFault_Handler+0x4>

08001a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr

08001a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr

08001aa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa6:	f000 fc47 	bl	8002338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <DMA1_Channel6_IRQHandler+0x10>)
 8001ab6:	f001 f98f 	bl	8002dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000314 	.word	0x20000314

08001ac4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <DMA1_Channel7_IRQHandler+0x10>)
 8001aca:	f001 f985 	bl	8002dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200002d0 	.word	0x200002d0

08001ad8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001ade:	f004 fae6 	bl	80060ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20001c4c 	.word	0x20001c4c

08001aec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001af0:	4802      	ldr	r0, [pc, #8]	; (8001afc <I2C1_EV_IRQHandler+0x10>)
 8001af2:	f002 f99b 	bl	8003e2c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	2000027c 	.word	0x2000027c

08001b00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return 1;
 8001b04:	2301      	movs	r3, #1
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <_kill>:

int _kill(int pid, int sig)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b18:	f00b ffac 	bl	800da74 <__errno>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2216      	movs	r2, #22
 8001b20:	601a      	str	r2, [r3, #0]
  return -1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <_exit>:

void _exit (int status)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b36:	f04f 31ff 	mov.w	r1, #4294967295
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ffe7 	bl	8001b0e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b40:	e7fe      	b.n	8001b40 <_exit+0x12>

08001b42 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e00a      	b.n	8001b6a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b54:	f3af 8000 	nop.w
 8001b58:	4601      	mov	r1, r0
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	60ba      	str	r2, [r7, #8]
 8001b60:	b2ca      	uxtb	r2, r1
 8001b62:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3301      	adds	r3, #1
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	dbf0      	blt.n	8001b54 <_read+0x12>
  }

  return len;
 8001b72:	687b      	ldr	r3, [r7, #4]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	e009      	b.n	8001ba2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	60ba      	str	r2, [r7, #8]
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	dbf1      	blt.n	8001b8e <_write+0x12>
  }
  return len;
 8001baa:	687b      	ldr	r3, [r7, #4]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <_close>:

int _close(int file)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr

08001bca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bda:	605a      	str	r2, [r3, #4]
  return 0;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <_isatty>:

int _isatty(int file)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bf0:	2301      	movs	r3, #1
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c1c:	4a14      	ldr	r2, [pc, #80]	; (8001c70 <_sbrk+0x5c>)
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <_sbrk+0x60>)
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <_sbrk+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d102      	bne.n	8001c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <_sbrk+0x64>)
 8001c32:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <_sbrk+0x68>)
 8001c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d207      	bcs.n	8001c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c44:	f00b ff16 	bl	800da74 <__errno>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c52:	e009      	b.n	8001c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <_sbrk+0x64>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <_sbrk+0x64>)
 8001c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c66:	68fb      	ldr	r3, [r7, #12]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20010000 	.word	0x20010000
 8001c74:	00001000 	.word	0x00001000
 8001c78:	20000e14 	.word	0x20000e14
 8001c7c:	20002170 	.word	0x20002170

08001c80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08e      	sub	sp, #56	; 0x38
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca0:	f107 0320 	add.w	r3, r7, #32
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
 8001cb8:	615a      	str	r2, [r3, #20]
 8001cba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cbc:	4b2c      	ldr	r3, [pc, #176]	; (8001d70 <MX_TIM3_Init+0xe4>)
 8001cbe:	4a2d      	ldr	r2, [pc, #180]	; (8001d74 <MX_TIM3_Init+0xe8>)
 8001cc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cc2:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <MX_TIM3_Init+0xe4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc8:	4b29      	ldr	r3, [pc, #164]	; (8001d70 <MX_TIM3_Init+0xe4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001cce:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <MX_TIM3_Init+0xe4>)
 8001cd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd6:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <MX_TIM3_Init+0xe4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cdc:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <MX_TIM3_Init+0xe4>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ce2:	4823      	ldr	r0, [pc, #140]	; (8001d70 <MX_TIM3_Init+0xe4>)
 8001ce4:	f006 faf4 	bl	80082d0 <HAL_TIM_Base_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001cee:	f7ff fd33 	bl	8001758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	481c      	ldr	r0, [pc, #112]	; (8001d70 <MX_TIM3_Init+0xe4>)
 8001d00:	f006 fc50 	bl	80085a4 <HAL_TIM_ConfigClockSource>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001d0a:	f7ff fd25 	bl	8001758 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d0e:	4818      	ldr	r0, [pc, #96]	; (8001d70 <MX_TIM3_Init+0xe4>)
 8001d10:	f006 fb2d 	bl	800836e <HAL_TIM_PWM_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001d1a:	f7ff fd1d 	bl	8001758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d26:	f107 0320 	add.w	r3, r7, #32
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4810      	ldr	r0, [pc, #64]	; (8001d70 <MX_TIM3_Init+0xe4>)
 8001d2e:	f006 ffbd 	bl	8008cac <HAL_TIMEx_MasterConfigSynchronization>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001d38:	f7ff fd0e 	bl	8001758 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d3c:	2360      	movs	r3, #96	; 0x60
 8001d3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d4c:	1d3b      	adds	r3, r7, #4
 8001d4e:	2200      	movs	r2, #0
 8001d50:	4619      	mov	r1, r3
 8001d52:	4807      	ldr	r0, [pc, #28]	; (8001d70 <MX_TIM3_Init+0xe4>)
 8001d54:	f006 fb64 	bl	8008420 <HAL_TIM_PWM_ConfigChannel>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001d5e:	f7ff fcfb 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d62:	4803      	ldr	r0, [pc, #12]	; (8001d70 <MX_TIM3_Init+0xe4>)
 8001d64:	f000 f8d2 	bl	8001f0c <HAL_TIM_MspPostInit>

}
 8001d68:	bf00      	nop
 8001d6a:	3738      	adds	r7, #56	; 0x38
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000e18 	.word	0x20000e18
 8001d74:	40000400 	.word	0x40000400

08001d78 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08e      	sub	sp, #56	; 0x38
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8c:	f107 0320 	add.w	r3, r7, #32
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
 8001da4:	615a      	str	r2, [r3, #20]
 8001da6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001da8:	4b3d      	ldr	r3, [pc, #244]	; (8001ea0 <MX_TIM4_Init+0x128>)
 8001daa:	4a3e      	ldr	r2, [pc, #248]	; (8001ea4 <MX_TIM4_Init+0x12c>)
 8001dac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001dae:	4b3c      	ldr	r3, [pc, #240]	; (8001ea0 <MX_TIM4_Init+0x128>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db4:	4b3a      	ldr	r3, [pc, #232]	; (8001ea0 <MX_TIM4_Init+0x128>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001dba:	4b39      	ldr	r3, [pc, #228]	; (8001ea0 <MX_TIM4_Init+0x128>)
 8001dbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dc0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc2:	4b37      	ldr	r3, [pc, #220]	; (8001ea0 <MX_TIM4_Init+0x128>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc8:	4b35      	ldr	r3, [pc, #212]	; (8001ea0 <MX_TIM4_Init+0x128>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001dce:	4834      	ldr	r0, [pc, #208]	; (8001ea0 <MX_TIM4_Init+0x128>)
 8001dd0:	f006 fa7e 	bl	80082d0 <HAL_TIM_Base_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001dda:	f7ff fcbd 	bl	8001758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001de4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001de8:	4619      	mov	r1, r3
 8001dea:	482d      	ldr	r0, [pc, #180]	; (8001ea0 <MX_TIM4_Init+0x128>)
 8001dec:	f006 fbda 	bl	80085a4 <HAL_TIM_ConfigClockSource>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001df6:	f7ff fcaf 	bl	8001758 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001dfa:	4829      	ldr	r0, [pc, #164]	; (8001ea0 <MX_TIM4_Init+0x128>)
 8001dfc:	f006 fab7 	bl	800836e <HAL_TIM_PWM_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001e06:	f7ff fca7 	bl	8001758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e12:	f107 0320 	add.w	r3, r7, #32
 8001e16:	4619      	mov	r1, r3
 8001e18:	4821      	ldr	r0, [pc, #132]	; (8001ea0 <MX_TIM4_Init+0x128>)
 8001e1a:	f006 ff47 	bl	8008cac <HAL_TIMEx_MasterConfigSynchronization>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001e24:	f7ff fc98 	bl	8001758 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e28:	2360      	movs	r3, #96	; 0x60
 8001e2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4818      	ldr	r0, [pc, #96]	; (8001ea0 <MX_TIM4_Init+0x128>)
 8001e40:	f006 faee 	bl	8008420 <HAL_TIM_PWM_ConfigChannel>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001e4a:	f7ff fc85 	bl	8001758 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	2204      	movs	r2, #4
 8001e52:	4619      	mov	r1, r3
 8001e54:	4812      	ldr	r0, [pc, #72]	; (8001ea0 <MX_TIM4_Init+0x128>)
 8001e56:	f006 fae3 	bl	8008420 <HAL_TIM_PWM_ConfigChannel>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001e60:	f7ff fc7a 	bl	8001758 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e64:	1d3b      	adds	r3, r7, #4
 8001e66:	2208      	movs	r2, #8
 8001e68:	4619      	mov	r1, r3
 8001e6a:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <MX_TIM4_Init+0x128>)
 8001e6c:	f006 fad8 	bl	8008420 <HAL_TIM_PWM_ConfigChannel>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001e76:	f7ff fc6f 	bl	8001758 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	220c      	movs	r2, #12
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4807      	ldr	r0, [pc, #28]	; (8001ea0 <MX_TIM4_Init+0x128>)
 8001e82:	f006 facd 	bl	8008420 <HAL_TIM_PWM_ConfigChannel>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001e8c:	f7ff fc64 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e90:	4803      	ldr	r0, [pc, #12]	; (8001ea0 <MX_TIM4_Init+0x128>)
 8001e92:	f000 f83b 	bl	8001f0c <HAL_TIM_MspPostInit>

}
 8001e96:	bf00      	nop
 8001e98:	3738      	adds	r7, #56	; 0x38
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000e60 	.word	0x20000e60
 8001ea4:	40000800 	.word	0x40000800

08001ea8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <HAL_TIM_Base_MspInit+0x58>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_TIM_Base_MspInit+0x5c>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	4a11      	ldr	r2, [pc, #68]	; (8001f04 <HAL_TIM_Base_MspInit+0x5c>)
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	61d3      	str	r3, [r2, #28]
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <HAL_TIM_Base_MspInit+0x5c>)
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001ed2:	e010      	b.n	8001ef6 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <HAL_TIM_Base_MspInit+0x60>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d10b      	bne.n	8001ef6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_TIM_Base_MspInit+0x5c>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <HAL_TIM_Base_MspInit+0x5c>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	61d3      	str	r3, [r2, #28]
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_TIM_Base_MspInit+0x5c>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
}
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	40000400 	.word	0x40000400
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40000800 	.word	0x40000800

08001f0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	; 0x28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 0310 	add.w	r3, r7, #16
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a2f      	ldr	r2, [pc, #188]	; (8001fe4 <HAL_TIM_MspPostInit+0xd8>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d12a      	bne.n	8001f82 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2c:	4b2e      	ldr	r3, [pc, #184]	; (8001fe8 <HAL_TIM_MspPostInit+0xdc>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	4a2d      	ldr	r2, [pc, #180]	; (8001fe8 <HAL_TIM_MspPostInit+0xdc>)
 8001f32:	f043 0310 	orr.w	r3, r3, #16
 8001f36:	6193      	str	r3, [r2, #24]
 8001f38:	4b2b      	ldr	r3, [pc, #172]	; (8001fe8 <HAL_TIM_MspPostInit+0xdc>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f003 0310 	and.w	r3, r3, #16
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f44:	2340      	movs	r3, #64	; 0x40
 8001f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	4619      	mov	r1, r3
 8001f56:	4825      	ldr	r0, [pc, #148]	; (8001fec <HAL_TIM_MspPostInit+0xe0>)
 8001f58:	f001 f9b4 	bl	80032c4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001f5c:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <HAL_TIM_MspPostInit+0xe4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	623b      	str	r3, [r7, #32]
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001f68:	623b      	str	r3, [r7, #32]
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f70:	623b      	str	r3, [r7, #32]
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001f78:	623b      	str	r3, [r7, #32]
 8001f7a:	4a1d      	ldr	r2, [pc, #116]	; (8001ff0 <HAL_TIM_MspPostInit+0xe4>)
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f80:	e02b      	b.n	8001fda <HAL_TIM_MspPostInit+0xce>
  else if(timHandle->Instance==TIM4)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a1b      	ldr	r2, [pc, #108]	; (8001ff4 <HAL_TIM_MspPostInit+0xe8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d126      	bne.n	8001fda <HAL_TIM_MspPostInit+0xce>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f8c:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <HAL_TIM_MspPostInit+0xdc>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	4a15      	ldr	r2, [pc, #84]	; (8001fe8 <HAL_TIM_MspPostInit+0xdc>)
 8001f92:	f043 0320 	orr.w	r3, r3, #32
 8001f96:	6193      	str	r3, [r2, #24]
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <HAL_TIM_MspPostInit+0xdc>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001fa4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001fa8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001faa:	2302      	movs	r3, #2
 8001fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fb2:	f107 0310 	add.w	r3, r7, #16
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	480f      	ldr	r0, [pc, #60]	; (8001ff8 <HAL_TIM_MspPostInit+0xec>)
 8001fba:	f001 f983 	bl	80032c4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <HAL_TIM_MspPostInit+0xe4>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd4:	4a06      	ldr	r2, [pc, #24]	; (8001ff0 <HAL_TIM_MspPostInit+0xe4>)
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	6053      	str	r3, [r2, #4]
}
 8001fda:	bf00      	nop
 8001fdc:	3728      	adds	r7, #40	; 0x28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40000400 	.word	0x40000400
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40011000 	.word	0x40011000
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	40000800 	.word	0x40000800
 8001ff8:	40011400 	.word	0x40011400

08001ffc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002000:	4b11      	ldr	r3, [pc, #68]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 8002002:	4a12      	ldr	r2, [pc, #72]	; (800204c <MX_USART1_UART_Init+0x50>)
 8002004:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 8002008:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800200c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 8002016:	2200      	movs	r2, #0
 8002018:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 800201c:	2200      	movs	r2, #0
 800201e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002020:	4b09      	ldr	r3, [pc, #36]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 8002022:	220c      	movs	r2, #12
 8002024:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002026:	4b08      	ldr	r3, [pc, #32]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 8002028:	2200      	movs	r2, #0
 800202a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 800202e:	2200      	movs	r2, #0
 8002030:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002032:	4805      	ldr	r0, [pc, #20]	; (8002048 <MX_USART1_UART_Init+0x4c>)
 8002034:	f006 fea6 	bl	8008d84 <HAL_UART_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800203e:	f7ff fb8b 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000ea8 	.word	0x20000ea8
 800204c:	40013800 	.word	0x40013800

08002050 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <MX_USART2_UART_Init+0x4c>)
 8002056:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <MX_USART2_UART_Init+0x50>)
 8002058:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <MX_USART2_UART_Init+0x4c>)
 800205c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002060:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <MX_USART2_UART_Init+0x4c>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <MX_USART2_UART_Init+0x4c>)
 800206a:	2200      	movs	r2, #0
 800206c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800206e:	4b0b      	ldr	r3, [pc, #44]	; (800209c <MX_USART2_UART_Init+0x4c>)
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <MX_USART2_UART_Init+0x4c>)
 8002076:	220c      	movs	r2, #12
 8002078:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207a:	4b08      	ldr	r3, [pc, #32]	; (800209c <MX_USART2_UART_Init+0x4c>)
 800207c:	2200      	movs	r2, #0
 800207e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <MX_USART2_UART_Init+0x4c>)
 8002082:	2200      	movs	r2, #0
 8002084:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002086:	4805      	ldr	r0, [pc, #20]	; (800209c <MX_USART2_UART_Init+0x4c>)
 8002088:	f006 fe7c 	bl	8008d84 <HAL_UART_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002092:	f7ff fb61 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000ef0 	.word	0x20000ef0
 80020a0:	40004400 	.word	0x40004400

080020a4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <MX_USART3_UART_Init+0x4c>)
 80020aa:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <MX_USART3_UART_Init+0x50>)
 80020ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <MX_USART3_UART_Init+0x4c>)
 80020b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80020b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <MX_USART3_UART_Init+0x4c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <MX_USART3_UART_Init+0x4c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <MX_USART3_UART_Init+0x4c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <MX_USART3_UART_Init+0x4c>)
 80020ca:	220c      	movs	r2, #12
 80020cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <MX_USART3_UART_Init+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <MX_USART3_UART_Init+0x4c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 80020da:	4805      	ldr	r0, [pc, #20]	; (80020f0 <MX_USART3_UART_Init+0x4c>)
 80020dc:	f006 fea2 	bl	8008e24 <HAL_HalfDuplex_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80020e6:	f7ff fb37 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000f38 	.word	0x20000f38
 80020f4:	40004800 	.word	0x40004800

080020f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08c      	sub	sp, #48	; 0x30
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 0320 	add.w	r3, r7, #32
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a4d      	ldr	r2, [pc, #308]	; (8002248 <HAL_UART_MspInit+0x150>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d132      	bne.n	800217e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002118:	4b4c      	ldr	r3, [pc, #304]	; (800224c <HAL_UART_MspInit+0x154>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	4a4b      	ldr	r2, [pc, #300]	; (800224c <HAL_UART_MspInit+0x154>)
 800211e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002122:	6193      	str	r3, [r2, #24]
 8002124:	4b49      	ldr	r3, [pc, #292]	; (800224c <HAL_UART_MspInit+0x154>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002130:	4b46      	ldr	r3, [pc, #280]	; (800224c <HAL_UART_MspInit+0x154>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	4a45      	ldr	r2, [pc, #276]	; (800224c <HAL_UART_MspInit+0x154>)
 8002136:	f043 0304 	orr.w	r3, r3, #4
 800213a:	6193      	str	r3, [r2, #24]
 800213c:	4b43      	ldr	r3, [pc, #268]	; (800224c <HAL_UART_MspInit+0x154>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	61bb      	str	r3, [r7, #24]
 8002146:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002148:	f44f 7300 	mov.w	r3, #512	; 0x200
 800214c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002152:	2303      	movs	r3, #3
 8002154:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002156:	f107 0320 	add.w	r3, r7, #32
 800215a:	4619      	mov	r1, r3
 800215c:	483c      	ldr	r0, [pc, #240]	; (8002250 <HAL_UART_MspInit+0x158>)
 800215e:	f001 f8b1 	bl	80032c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002168:	2300      	movs	r3, #0
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002170:	f107 0320 	add.w	r3, r7, #32
 8002174:	4619      	mov	r1, r3
 8002176:	4836      	ldr	r0, [pc, #216]	; (8002250 <HAL_UART_MspInit+0x158>)
 8002178:	f001 f8a4 	bl	80032c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800217c:	e05f      	b.n	800223e <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART2)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a34      	ldr	r2, [pc, #208]	; (8002254 <HAL_UART_MspInit+0x15c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d130      	bne.n	80021ea <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002188:	4b30      	ldr	r3, [pc, #192]	; (800224c <HAL_UART_MspInit+0x154>)
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	4a2f      	ldr	r2, [pc, #188]	; (800224c <HAL_UART_MspInit+0x154>)
 800218e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002192:	61d3      	str	r3, [r2, #28]
 8002194:	4b2d      	ldr	r3, [pc, #180]	; (800224c <HAL_UART_MspInit+0x154>)
 8002196:	69db      	ldr	r3, [r3, #28]
 8002198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a0:	4b2a      	ldr	r3, [pc, #168]	; (800224c <HAL_UART_MspInit+0x154>)
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	4a29      	ldr	r2, [pc, #164]	; (800224c <HAL_UART_MspInit+0x154>)
 80021a6:	f043 0304 	orr.w	r3, r3, #4
 80021aa:	6193      	str	r3, [r2, #24]
 80021ac:	4b27      	ldr	r3, [pc, #156]	; (800224c <HAL_UART_MspInit+0x154>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021b8:	2304      	movs	r3, #4
 80021ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021c0:	2303      	movs	r3, #3
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c4:	f107 0320 	add.w	r3, r7, #32
 80021c8:	4619      	mov	r1, r3
 80021ca:	4821      	ldr	r0, [pc, #132]	; (8002250 <HAL_UART_MspInit+0x158>)
 80021cc:	f001 f87a 	bl	80032c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021d0:	2308      	movs	r3, #8
 80021d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d4:	2300      	movs	r3, #0
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021dc:	f107 0320 	add.w	r3, r7, #32
 80021e0:	4619      	mov	r1, r3
 80021e2:	481b      	ldr	r0, [pc, #108]	; (8002250 <HAL_UART_MspInit+0x158>)
 80021e4:	f001 f86e 	bl	80032c4 <HAL_GPIO_Init>
}
 80021e8:	e029      	b.n	800223e <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART3)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1a      	ldr	r2, [pc, #104]	; (8002258 <HAL_UART_MspInit+0x160>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d124      	bne.n	800223e <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 80021f4:	4b15      	ldr	r3, [pc, #84]	; (800224c <HAL_UART_MspInit+0x154>)
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	4a14      	ldr	r2, [pc, #80]	; (800224c <HAL_UART_MspInit+0x154>)
 80021fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021fe:	61d3      	str	r3, [r2, #28]
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_UART_MspInit+0x154>)
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220c:	4b0f      	ldr	r3, [pc, #60]	; (800224c <HAL_UART_MspInit+0x154>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	4a0e      	ldr	r2, [pc, #56]	; (800224c <HAL_UART_MspInit+0x154>)
 8002212:	f043 0308 	orr.w	r3, r3, #8
 8002216:	6193      	str	r3, [r2, #24]
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <HAL_UART_MspInit+0x154>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800222a:	2312      	movs	r3, #18
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800222e:	2303      	movs	r3, #3
 8002230:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002232:	f107 0320 	add.w	r3, r7, #32
 8002236:	4619      	mov	r1, r3
 8002238:	4808      	ldr	r0, [pc, #32]	; (800225c <HAL_UART_MspInit+0x164>)
 800223a:	f001 f843 	bl	80032c4 <HAL_GPIO_Init>
}
 800223e:	bf00      	nop
 8002240:	3730      	adds	r7, #48	; 0x30
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40013800 	.word	0x40013800
 800224c:	40021000 	.word	0x40021000
 8002250:	40010800 	.word	0x40010800
 8002254:	40004400 	.word	0x40004400
 8002258:	40004800 	.word	0x40004800
 800225c:	40010c00 	.word	0x40010c00

08002260 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002260:	f7ff fd0e 	bl	8001c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002264:	480b      	ldr	r0, [pc, #44]	; (8002294 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002266:	490c      	ldr	r1, [pc, #48]	; (8002298 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002268:	4a0c      	ldr	r2, [pc, #48]	; (800229c <LoopFillZerobss+0x16>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800226c:	e002      	b.n	8002274 <LoopCopyDataInit>

0800226e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002272:	3304      	adds	r3, #4

08002274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002278:	d3f9      	bcc.n	800226e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227a:	4a09      	ldr	r2, [pc, #36]	; (80022a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800227c:	4c09      	ldr	r4, [pc, #36]	; (80022a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002280:	e001      	b.n	8002286 <LoopFillZerobss>

08002282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002284:	3204      	adds	r2, #4

08002286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002288:	d3fb      	bcc.n	8002282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800228a:	f00b fbf9 	bl	800da80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800228e:	f7fe ffdd 	bl	800124c <main>
  bx lr
 8002292:	4770      	bx	lr
  ldr r0, =_sdata
 8002294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002298:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 800229c:	0800ef7c 	.word	0x0800ef7c
  ldr r2, =_sbss
 80022a0:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 80022a4:	2000216c 	.word	0x2000216c

080022a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022a8:	e7fe      	b.n	80022a8 <ADC1_2_IRQHandler>
	...

080022ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_Init+0x28>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <HAL_Init+0x28>)
 80022b6:	f043 0310 	orr.w	r3, r3, #16
 80022ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022bc:	2003      	movs	r0, #3
 80022be:	f000 fb6b 	bl	8002998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022c2:	200f      	movs	r0, #15
 80022c4:	f000 f808 	bl	80022d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c8:	f7ff fb98 	bl	80019fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40022000 	.word	0x40022000

080022d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022e0:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_InitTick+0x54>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_InitTick+0x58>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	4619      	mov	r1, r3
 80022ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80022f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 fb83 	bl	8002a02 <HAL_SYSTICK_Config>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e00e      	b.n	8002324 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b0f      	cmp	r3, #15
 800230a:	d80a      	bhi.n	8002322 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800230c:	2200      	movs	r2, #0
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f000 fb4b 	bl	80029ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002318:	4a06      	ldr	r2, [pc, #24]	; (8002334 <HAL_InitTick+0x5c>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e000      	b.n	8002324 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000048 	.word	0x20000048
 8002330:	20000050 	.word	0x20000050
 8002334:	2000004c 	.word	0x2000004c

08002338 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_IncTick+0x1c>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_IncTick+0x20>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4413      	add	r3, r2
 8002348:	4a03      	ldr	r2, [pc, #12]	; (8002358 <HAL_IncTick+0x20>)
 800234a:	6013      	str	r3, [r2, #0]
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	20000050 	.word	0x20000050
 8002358:	20000f80 	.word	0x20000f80

0800235c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return uwTick;
 8002360:	4b02      	ldr	r3, [pc, #8]	; (800236c <HAL_GetTick+0x10>)
 8002362:	681b      	ldr	r3, [r3, #0]
}
 8002364:	4618      	mov	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr
 800236c:	20000f80 	.word	0x20000f80

08002370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002378:	f7ff fff0 	bl	800235c <HAL_GetTick>
 800237c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002388:	d005      	beq.n	8002396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_Delay+0x44>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4413      	add	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002396:	bf00      	nop
 8002398:	f7ff ffe0 	bl	800235c <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d8f7      	bhi.n	8002398 <HAL_Delay+0x28>
  {
  }
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000050 	.word	0x20000050

080023b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e0ce      	b.n	8002578 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d109      	bne.n	80023fc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7fe fb3e 	bl	8000a78 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f9bd 	bl	800277c <ADC_ConversionStop_Disable>
 8002402:	4603      	mov	r3, r0
 8002404:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	2b00      	cmp	r3, #0
 8002410:	f040 80a9 	bne.w	8002566 <HAL_ADC_Init+0x1ae>
 8002414:	7dfb      	ldrb	r3, [r7, #23]
 8002416:	2b00      	cmp	r3, #0
 8002418:	f040 80a5 	bne.w	8002566 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002424:	f023 0302 	bic.w	r3, r3, #2
 8002428:	f043 0202 	orr.w	r2, r3, #2
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4951      	ldr	r1, [pc, #324]	; (8002580 <HAL_ADC_Init+0x1c8>)
 800243a:	428b      	cmp	r3, r1
 800243c:	d10a      	bne.n	8002454 <HAL_ADC_Init+0x9c>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002446:	d002      	beq.n	800244e <HAL_ADC_Init+0x96>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	e004      	b.n	8002458 <HAL_ADC_Init+0xa0>
 800244e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002452:	e001      	b.n	8002458 <HAL_ADC_Init+0xa0>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002458:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	7b1b      	ldrb	r3, [r3, #12]
 800245e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002460:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	4313      	orrs	r3, r2
 8002466:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002470:	d003      	beq.n	800247a <HAL_ADC_Init+0xc2>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d102      	bne.n	8002480 <HAL_ADC_Init+0xc8>
 800247a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800247e:	e000      	b.n	8002482 <HAL_ADC_Init+0xca>
 8002480:	2300      	movs	r3, #0
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	7d1b      	ldrb	r3, [r3, #20]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d119      	bne.n	80024c4 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	7b1b      	ldrb	r3, [r3, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d109      	bne.n	80024ac <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	3b01      	subs	r3, #1
 800249e:	035a      	lsls	r2, r3, #13
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	e00b      	b.n	80024c4 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b0:	f043 0220 	orr.w	r2, r3, #32
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	f043 0201 	orr.w	r2, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	4b29      	ldr	r3, [pc, #164]	; (8002584 <HAL_ADC_Init+0x1cc>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	68b9      	ldr	r1, [r7, #8]
 80024e8:	430b      	orrs	r3, r1
 80024ea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024f4:	d003      	beq.n	80024fe <HAL_ADC_Init+0x146>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d104      	bne.n	8002508 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	3b01      	subs	r3, #1
 8002504:	051b      	lsls	r3, r3, #20
 8002506:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	430a      	orrs	r2, r1
 800251a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	4b19      	ldr	r3, [pc, #100]	; (8002588 <HAL_ADC_Init+0x1d0>)
 8002524:	4013      	ands	r3, r2
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	429a      	cmp	r2, r3
 800252a:	d10b      	bne.n	8002544 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	f023 0303 	bic.w	r3, r3, #3
 800253a:	f043 0201 	orr.w	r2, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002542:	e018      	b.n	8002576 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	f023 0312 	bic.w	r3, r3, #18
 800254c:	f043 0210 	orr.w	r2, r3, #16
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002558:	f043 0201 	orr.w	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002564:	e007      	b.n	8002576 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256a:	f043 0210 	orr.w	r2, r3, #16
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002576:	7dfb      	ldrb	r3, [r7, #23]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40013c00 	.word	0x40013c00
 8002584:	ffe1f7fd 	.word	0xffe1f7fd
 8002588:	ff1f0efe 	.word	0xff1f0efe

0800258c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x20>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e0dc      	b.n	8002766 <HAL_ADC_ConfigChannel+0x1da>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b06      	cmp	r3, #6
 80025ba:	d81c      	bhi.n	80025f6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	3b05      	subs	r3, #5
 80025ce:	221f      	movs	r2, #31
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	4019      	ands	r1, r3
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	6818      	ldr	r0, [r3, #0]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	3b05      	subs	r3, #5
 80025e8:	fa00 f203 	lsl.w	r2, r0, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	635a      	str	r2, [r3, #52]	; 0x34
 80025f4:	e03c      	b.n	8002670 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b0c      	cmp	r3, #12
 80025fc:	d81c      	bhi.n	8002638 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	3b23      	subs	r3, #35	; 0x23
 8002610:	221f      	movs	r2, #31
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	4019      	ands	r1, r3
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	3b23      	subs	r3, #35	; 0x23
 800262a:	fa00 f203 	lsl.w	r2, r0, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	631a      	str	r2, [r3, #48]	; 0x30
 8002636:	e01b      	b.n	8002670 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	3b41      	subs	r3, #65	; 0x41
 800264a:	221f      	movs	r2, #31
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	4019      	ands	r1, r3
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	3b41      	subs	r3, #65	; 0x41
 8002664:	fa00 f203 	lsl.w	r2, r0, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b09      	cmp	r3, #9
 8002676:	d91c      	bls.n	80026b2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68d9      	ldr	r1, [r3, #12]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	4613      	mov	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	3b1e      	subs	r3, #30
 800268a:	2207      	movs	r2, #7
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	4019      	ands	r1, r3
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	6898      	ldr	r0, [r3, #8]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	3b1e      	subs	r3, #30
 80026a4:	fa00 f203 	lsl.w	r2, r0, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	60da      	str	r2, [r3, #12]
 80026b0:	e019      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6919      	ldr	r1, [r3, #16]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4613      	mov	r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4413      	add	r3, r2
 80026c2:	2207      	movs	r2, #7
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	4019      	ands	r1, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	6898      	ldr	r0, [r3, #8]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4613      	mov	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	fa00 f203 	lsl.w	r2, r0, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b10      	cmp	r3, #16
 80026ec:	d003      	beq.n	80026f6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80026f2:	2b11      	cmp	r3, #17
 80026f4:	d132      	bne.n	800275c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a1d      	ldr	r2, [pc, #116]	; (8002770 <HAL_ADC_ConfigChannel+0x1e4>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d125      	bne.n	800274c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d126      	bne.n	800275c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800271c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b10      	cmp	r3, #16
 8002724:	d11a      	bne.n	800275c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002726:	4b13      	ldr	r3, [pc, #76]	; (8002774 <HAL_ADC_ConfigChannel+0x1e8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a13      	ldr	r2, [pc, #76]	; (8002778 <HAL_ADC_ConfigChannel+0x1ec>)
 800272c:	fba2 2303 	umull	r2, r3, r2, r3
 8002730:	0c9a      	lsrs	r2, r3, #18
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800273c:	e002      	b.n	8002744 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	3b01      	subs	r3, #1
 8002742:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f9      	bne.n	800273e <HAL_ADC_ConfigChannel+0x1b2>
 800274a:	e007      	b.n	800275c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	f043 0220 	orr.w	r2, r3, #32
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr
 8002770:	40012400 	.word	0x40012400
 8002774:	20000048 	.word	0x20000048
 8002778:	431bde83 	.word	0x431bde83

0800277c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b01      	cmp	r3, #1
 8002794:	d12e      	bne.n	80027f4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0201 	bic.w	r2, r2, #1
 80027a4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027a6:	f7ff fdd9 	bl	800235c <HAL_GetTick>
 80027aa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027ac:	e01b      	b.n	80027e6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027ae:	f7ff fdd5 	bl	800235c <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d914      	bls.n	80027e6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d10d      	bne.n	80027e6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ce:	f043 0210 	orr.w	r2, r3, #16
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027da:	f043 0201 	orr.w	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e007      	b.n	80027f6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d0dc      	beq.n	80027ae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <__NVIC_SetPriorityGrouping+0x44>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800281c:	4013      	ands	r3, r2
 800281e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800282c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002832:	4a04      	ldr	r2, [pc, #16]	; (8002844 <__NVIC_SetPriorityGrouping+0x44>)
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	60d3      	str	r3, [r2, #12]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800284c:	4b04      	ldr	r3, [pc, #16]	; (8002860 <__NVIC_GetPriorityGrouping+0x18>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	0a1b      	lsrs	r3, r3, #8
 8002852:	f003 0307 	and.w	r3, r3, #7
}
 8002856:	4618      	mov	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	2b00      	cmp	r3, #0
 8002874:	db0b      	blt.n	800288e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	f003 021f 	and.w	r2, r3, #31
 800287c:	4906      	ldr	r1, [pc, #24]	; (8002898 <__NVIC_EnableIRQ+0x34>)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	2001      	movs	r0, #1
 8002886:	fa00 f202 	lsl.w	r2, r0, r2
 800288a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr
 8002898:	e000e100 	.word	0xe000e100

0800289c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	6039      	str	r1, [r7, #0]
 80028a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	db0a      	blt.n	80028c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	490c      	ldr	r1, [pc, #48]	; (80028e8 <__NVIC_SetPriority+0x4c>)
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	0112      	lsls	r2, r2, #4
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	440b      	add	r3, r1
 80028c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028c4:	e00a      	b.n	80028dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	4908      	ldr	r1, [pc, #32]	; (80028ec <__NVIC_SetPriority+0x50>)
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	3b04      	subs	r3, #4
 80028d4:	0112      	lsls	r2, r2, #4
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	440b      	add	r3, r1
 80028da:	761a      	strb	r2, [r3, #24]
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000e100 	.word	0xe000e100
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b089      	sub	sp, #36	; 0x24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f1c3 0307 	rsb	r3, r3, #7
 800290a:	2b04      	cmp	r3, #4
 800290c:	bf28      	it	cs
 800290e:	2304      	movcs	r3, #4
 8002910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3304      	adds	r3, #4
 8002916:	2b06      	cmp	r3, #6
 8002918:	d902      	bls.n	8002920 <NVIC_EncodePriority+0x30>
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3b03      	subs	r3, #3
 800291e:	e000      	b.n	8002922 <NVIC_EncodePriority+0x32>
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002924:	f04f 32ff 	mov.w	r2, #4294967295
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43da      	mvns	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	401a      	ands	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002938:	f04f 31ff 	mov.w	r1, #4294967295
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	fa01 f303 	lsl.w	r3, r1, r3
 8002942:	43d9      	mvns	r1, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002948:	4313      	orrs	r3, r2
         );
}
 800294a:	4618      	mov	r0, r3
 800294c:	3724      	adds	r7, #36	; 0x24
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3b01      	subs	r3, #1
 8002960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002964:	d301      	bcc.n	800296a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002966:	2301      	movs	r3, #1
 8002968:	e00f      	b.n	800298a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800296a:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <SysTick_Config+0x40>)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	3b01      	subs	r3, #1
 8002970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002972:	210f      	movs	r1, #15
 8002974:	f04f 30ff 	mov.w	r0, #4294967295
 8002978:	f7ff ff90 	bl	800289c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <SysTick_Config+0x40>)
 800297e:	2200      	movs	r2, #0
 8002980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002982:	4b04      	ldr	r3, [pc, #16]	; (8002994 <SysTick_Config+0x40>)
 8002984:	2207      	movs	r2, #7
 8002986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	e000e010 	.word	0xe000e010

08002998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ff2d 	bl	8002800 <__NVIC_SetPriorityGrouping>
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b086      	sub	sp, #24
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	4603      	mov	r3, r0
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029c0:	f7ff ff42 	bl	8002848 <__NVIC_GetPriorityGrouping>
 80029c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	6978      	ldr	r0, [r7, #20]
 80029cc:	f7ff ff90 	bl	80028f0 <NVIC_EncodePriority>
 80029d0:	4602      	mov	r2, r0
 80029d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff ff5f 	bl	800289c <__NVIC_SetPriority>
}
 80029de:	bf00      	nop
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	4603      	mov	r3, r0
 80029ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff35 	bl	8002864 <__NVIC_EnableIRQ>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff ffa2 	bl	8002954 <SysTick_Config>
 8002a10:	4603      	mov	r3, r0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e059      	b.n	8002ae6 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	4b2d      	ldr	r3, [pc, #180]	; (8002af0 <HAL_DMA_Init+0xd4>)
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d80f      	bhi.n	8002a5e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	4b2b      	ldr	r3, [pc, #172]	; (8002af4 <HAL_DMA_Init+0xd8>)
 8002a46:	4413      	add	r3, r2
 8002a48:	4a2b      	ldr	r2, [pc, #172]	; (8002af8 <HAL_DMA_Init+0xdc>)
 8002a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	009a      	lsls	r2, r3, #2
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a28      	ldr	r2, [pc, #160]	; (8002afc <HAL_DMA_Init+0xe0>)
 8002a5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a5c:	e00e      	b.n	8002a7c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	4b26      	ldr	r3, [pc, #152]	; (8002b00 <HAL_DMA_Init+0xe4>)
 8002a66:	4413      	add	r3, r2
 8002a68:	4a23      	ldr	r2, [pc, #140]	; (8002af8 <HAL_DMA_Init+0xdc>)
 8002a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6e:	091b      	lsrs	r3, r3, #4
 8002a70:	009a      	lsls	r2, r3, #2
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a22      	ldr	r2, [pc, #136]	; (8002b04 <HAL_DMA_Init+0xe8>)
 8002a7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002a92:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002a96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	40020407 	.word	0x40020407
 8002af4:	bffdfff8 	.word	0xbffdfff8
 8002af8:	cccccccd 	.word	0xcccccccd
 8002afc:	40020000 	.word	0x40020000
 8002b00:	bffdfbf8 	.word	0xbffdfbf8
 8002b04:	40020400 	.word	0x40020400

08002b08 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_DMA_Start_IT+0x20>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e04b      	b.n	8002bc0 <HAL_DMA_Start_IT+0xb8>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d13a      	bne.n	8002bb2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0201 	bic.w	r2, r2, #1
 8002b58:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fb82 	bl	800326a <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d008      	beq.n	8002b80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 020e 	orr.w	r2, r2, #14
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	e00f      	b.n	8002ba0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0204 	bic.w	r2, r2, #4
 8002b8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 020a 	orr.w	r2, r2, #10
 8002b9e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	e005      	b.n	8002bbe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d005      	beq.n	8002bec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2204      	movs	r2, #4
 8002be4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	73fb      	strb	r3, [r7, #15]
 8002bea:	e0d6      	b.n	8002d9a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 020e 	bic.w	r2, r2, #14
 8002bfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0201 	bic.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b64      	ldr	r3, [pc, #400]	; (8002da4 <HAL_DMA_Abort_IT+0x1dc>)
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d958      	bls.n	8002cca <HAL_DMA_Abort_IT+0x102>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a62      	ldr	r2, [pc, #392]	; (8002da8 <HAL_DMA_Abort_IT+0x1e0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d04f      	beq.n	8002cc2 <HAL_DMA_Abort_IT+0xfa>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a61      	ldr	r2, [pc, #388]	; (8002dac <HAL_DMA_Abort_IT+0x1e4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d048      	beq.n	8002cbe <HAL_DMA_Abort_IT+0xf6>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a5f      	ldr	r2, [pc, #380]	; (8002db0 <HAL_DMA_Abort_IT+0x1e8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d040      	beq.n	8002cb8 <HAL_DMA_Abort_IT+0xf0>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a5e      	ldr	r2, [pc, #376]	; (8002db4 <HAL_DMA_Abort_IT+0x1ec>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d038      	beq.n	8002cb2 <HAL_DMA_Abort_IT+0xea>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a5c      	ldr	r2, [pc, #368]	; (8002db8 <HAL_DMA_Abort_IT+0x1f0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d030      	beq.n	8002cac <HAL_DMA_Abort_IT+0xe4>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a5b      	ldr	r2, [pc, #364]	; (8002dbc <HAL_DMA_Abort_IT+0x1f4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d028      	beq.n	8002ca6 <HAL_DMA_Abort_IT+0xde>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a52      	ldr	r2, [pc, #328]	; (8002da4 <HAL_DMA_Abort_IT+0x1dc>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d020      	beq.n	8002ca0 <HAL_DMA_Abort_IT+0xd8>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a57      	ldr	r2, [pc, #348]	; (8002dc0 <HAL_DMA_Abort_IT+0x1f8>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d019      	beq.n	8002c9c <HAL_DMA_Abort_IT+0xd4>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a55      	ldr	r2, [pc, #340]	; (8002dc4 <HAL_DMA_Abort_IT+0x1fc>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d012      	beq.n	8002c98 <HAL_DMA_Abort_IT+0xd0>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a54      	ldr	r2, [pc, #336]	; (8002dc8 <HAL_DMA_Abort_IT+0x200>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d00a      	beq.n	8002c92 <HAL_DMA_Abort_IT+0xca>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a52      	ldr	r2, [pc, #328]	; (8002dcc <HAL_DMA_Abort_IT+0x204>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d102      	bne.n	8002c8c <HAL_DMA_Abort_IT+0xc4>
 8002c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c8a:	e01b      	b.n	8002cc4 <HAL_DMA_Abort_IT+0xfc>
 8002c8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c90:	e018      	b.n	8002cc4 <HAL_DMA_Abort_IT+0xfc>
 8002c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c96:	e015      	b.n	8002cc4 <HAL_DMA_Abort_IT+0xfc>
 8002c98:	2310      	movs	r3, #16
 8002c9a:	e013      	b.n	8002cc4 <HAL_DMA_Abort_IT+0xfc>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e011      	b.n	8002cc4 <HAL_DMA_Abort_IT+0xfc>
 8002ca0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ca4:	e00e      	b.n	8002cc4 <HAL_DMA_Abort_IT+0xfc>
 8002ca6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002caa:	e00b      	b.n	8002cc4 <HAL_DMA_Abort_IT+0xfc>
 8002cac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cb0:	e008      	b.n	8002cc4 <HAL_DMA_Abort_IT+0xfc>
 8002cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cb6:	e005      	b.n	8002cc4 <HAL_DMA_Abort_IT+0xfc>
 8002cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cbc:	e002      	b.n	8002cc4 <HAL_DMA_Abort_IT+0xfc>
 8002cbe:	2310      	movs	r3, #16
 8002cc0:	e000      	b.n	8002cc4 <HAL_DMA_Abort_IT+0xfc>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	4a42      	ldr	r2, [pc, #264]	; (8002dd0 <HAL_DMA_Abort_IT+0x208>)
 8002cc6:	6053      	str	r3, [r2, #4]
 8002cc8:	e057      	b.n	8002d7a <HAL_DMA_Abort_IT+0x1b2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a36      	ldr	r2, [pc, #216]	; (8002da8 <HAL_DMA_Abort_IT+0x1e0>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d04f      	beq.n	8002d74 <HAL_DMA_Abort_IT+0x1ac>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a34      	ldr	r2, [pc, #208]	; (8002dac <HAL_DMA_Abort_IT+0x1e4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d048      	beq.n	8002d70 <HAL_DMA_Abort_IT+0x1a8>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a33      	ldr	r2, [pc, #204]	; (8002db0 <HAL_DMA_Abort_IT+0x1e8>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d040      	beq.n	8002d6a <HAL_DMA_Abort_IT+0x1a2>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a31      	ldr	r2, [pc, #196]	; (8002db4 <HAL_DMA_Abort_IT+0x1ec>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d038      	beq.n	8002d64 <HAL_DMA_Abort_IT+0x19c>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a30      	ldr	r2, [pc, #192]	; (8002db8 <HAL_DMA_Abort_IT+0x1f0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d030      	beq.n	8002d5e <HAL_DMA_Abort_IT+0x196>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a2e      	ldr	r2, [pc, #184]	; (8002dbc <HAL_DMA_Abort_IT+0x1f4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d028      	beq.n	8002d58 <HAL_DMA_Abort_IT+0x190>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a26      	ldr	r2, [pc, #152]	; (8002da4 <HAL_DMA_Abort_IT+0x1dc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d020      	beq.n	8002d52 <HAL_DMA_Abort_IT+0x18a>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a2a      	ldr	r2, [pc, #168]	; (8002dc0 <HAL_DMA_Abort_IT+0x1f8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d019      	beq.n	8002d4e <HAL_DMA_Abort_IT+0x186>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a29      	ldr	r2, [pc, #164]	; (8002dc4 <HAL_DMA_Abort_IT+0x1fc>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d012      	beq.n	8002d4a <HAL_DMA_Abort_IT+0x182>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a27      	ldr	r2, [pc, #156]	; (8002dc8 <HAL_DMA_Abort_IT+0x200>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00a      	beq.n	8002d44 <HAL_DMA_Abort_IT+0x17c>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a26      	ldr	r2, [pc, #152]	; (8002dcc <HAL_DMA_Abort_IT+0x204>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d102      	bne.n	8002d3e <HAL_DMA_Abort_IT+0x176>
 8002d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d3c:	e01b      	b.n	8002d76 <HAL_DMA_Abort_IT+0x1ae>
 8002d3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d42:	e018      	b.n	8002d76 <HAL_DMA_Abort_IT+0x1ae>
 8002d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d48:	e015      	b.n	8002d76 <HAL_DMA_Abort_IT+0x1ae>
 8002d4a:	2310      	movs	r3, #16
 8002d4c:	e013      	b.n	8002d76 <HAL_DMA_Abort_IT+0x1ae>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e011      	b.n	8002d76 <HAL_DMA_Abort_IT+0x1ae>
 8002d52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d56:	e00e      	b.n	8002d76 <HAL_DMA_Abort_IT+0x1ae>
 8002d58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d5c:	e00b      	b.n	8002d76 <HAL_DMA_Abort_IT+0x1ae>
 8002d5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d62:	e008      	b.n	8002d76 <HAL_DMA_Abort_IT+0x1ae>
 8002d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d68:	e005      	b.n	8002d76 <HAL_DMA_Abort_IT+0x1ae>
 8002d6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d6e:	e002      	b.n	8002d76 <HAL_DMA_Abort_IT+0x1ae>
 8002d70:	2310      	movs	r3, #16
 8002d72:	e000      	b.n	8002d76 <HAL_DMA_Abort_IT+0x1ae>
 8002d74:	2301      	movs	r3, #1
 8002d76:	4a17      	ldr	r2, [pc, #92]	; (8002dd4 <HAL_DMA_Abort_IT+0x20c>)
 8002d78:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	4798      	blx	r3
    } 
  }
  return status;
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40020080 	.word	0x40020080
 8002da8:	40020008 	.word	0x40020008
 8002dac:	4002001c 	.word	0x4002001c
 8002db0:	40020030 	.word	0x40020030
 8002db4:	40020044 	.word	0x40020044
 8002db8:	40020058 	.word	0x40020058
 8002dbc:	4002006c 	.word	0x4002006c
 8002dc0:	40020408 	.word	0x40020408
 8002dc4:	4002041c 	.word	0x4002041c
 8002dc8:	40020430 	.word	0x40020430
 8002dcc:	40020444 	.word	0x40020444
 8002dd0:	40020400 	.word	0x40020400
 8002dd4:	40020000 	.word	0x40020000

08002dd8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	2204      	movs	r2, #4
 8002df6:	409a      	lsls	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 80f1 	beq.w	8002fe4 <HAL_DMA_IRQHandler+0x20c>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 80eb 	beq.w	8002fe4 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d107      	bne.n	8002e2c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0204 	bic.w	r2, r2, #4
 8002e2a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	4b5f      	ldr	r3, [pc, #380]	; (8002fb0 <HAL_DMA_IRQHandler+0x1d8>)
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d958      	bls.n	8002eea <HAL_DMA_IRQHandler+0x112>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a5d      	ldr	r2, [pc, #372]	; (8002fb4 <HAL_DMA_IRQHandler+0x1dc>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d04f      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x10a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a5c      	ldr	r2, [pc, #368]	; (8002fb8 <HAL_DMA_IRQHandler+0x1e0>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d048      	beq.n	8002ede <HAL_DMA_IRQHandler+0x106>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a5a      	ldr	r2, [pc, #360]	; (8002fbc <HAL_DMA_IRQHandler+0x1e4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d040      	beq.n	8002ed8 <HAL_DMA_IRQHandler+0x100>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a59      	ldr	r2, [pc, #356]	; (8002fc0 <HAL_DMA_IRQHandler+0x1e8>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d038      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xfa>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a57      	ldr	r2, [pc, #348]	; (8002fc4 <HAL_DMA_IRQHandler+0x1ec>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d030      	beq.n	8002ecc <HAL_DMA_IRQHandler+0xf4>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a56      	ldr	r2, [pc, #344]	; (8002fc8 <HAL_DMA_IRQHandler+0x1f0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d028      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0xee>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a4d      	ldr	r2, [pc, #308]	; (8002fb0 <HAL_DMA_IRQHandler+0x1d8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d020      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0xe8>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a52      	ldr	r2, [pc, #328]	; (8002fcc <HAL_DMA_IRQHandler+0x1f4>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d019      	beq.n	8002ebc <HAL_DMA_IRQHandler+0xe4>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a50      	ldr	r2, [pc, #320]	; (8002fd0 <HAL_DMA_IRQHandler+0x1f8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d012      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0xe0>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a4f      	ldr	r2, [pc, #316]	; (8002fd4 <HAL_DMA_IRQHandler+0x1fc>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d00a      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0xda>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a4d      	ldr	r2, [pc, #308]	; (8002fd8 <HAL_DMA_IRQHandler+0x200>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d102      	bne.n	8002eac <HAL_DMA_IRQHandler+0xd4>
 8002ea6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002eaa:	e01b      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x10c>
 8002eac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002eb0:	e018      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x10c>
 8002eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eb6:	e015      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x10c>
 8002eb8:	2340      	movs	r3, #64	; 0x40
 8002eba:	e013      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x10c>
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	e011      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x10c>
 8002ec0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002ec4:	e00e      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x10c>
 8002ec6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002eca:	e00b      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x10c>
 8002ecc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ed0:	e008      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x10c>
 8002ed2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ed6:	e005      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x10c>
 8002ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002edc:	e002      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x10c>
 8002ede:	2340      	movs	r3, #64	; 0x40
 8002ee0:	e000      	b.n	8002ee4 <HAL_DMA_IRQHandler+0x10c>
 8002ee2:	2304      	movs	r3, #4
 8002ee4:	4a3d      	ldr	r2, [pc, #244]	; (8002fdc <HAL_DMA_IRQHandler+0x204>)
 8002ee6:	6053      	str	r3, [r2, #4]
 8002ee8:	e057      	b.n	8002f9a <HAL_DMA_IRQHandler+0x1c2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a31      	ldr	r2, [pc, #196]	; (8002fb4 <HAL_DMA_IRQHandler+0x1dc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d04f      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x1bc>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a2f      	ldr	r2, [pc, #188]	; (8002fb8 <HAL_DMA_IRQHandler+0x1e0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d048      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x1b8>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a2e      	ldr	r2, [pc, #184]	; (8002fbc <HAL_DMA_IRQHandler+0x1e4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d040      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x1b2>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a2c      	ldr	r2, [pc, #176]	; (8002fc0 <HAL_DMA_IRQHandler+0x1e8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d038      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x1ac>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a2b      	ldr	r2, [pc, #172]	; (8002fc4 <HAL_DMA_IRQHandler+0x1ec>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d030      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x1a6>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a29      	ldr	r2, [pc, #164]	; (8002fc8 <HAL_DMA_IRQHandler+0x1f0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d028      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x1a0>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a21      	ldr	r2, [pc, #132]	; (8002fb0 <HAL_DMA_IRQHandler+0x1d8>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d020      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x19a>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a25      	ldr	r2, [pc, #148]	; (8002fcc <HAL_DMA_IRQHandler+0x1f4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d019      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x196>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a24      	ldr	r2, [pc, #144]	; (8002fd0 <HAL_DMA_IRQHandler+0x1f8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d012      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x192>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a22      	ldr	r2, [pc, #136]	; (8002fd4 <HAL_DMA_IRQHandler+0x1fc>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00a      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x18c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a21      	ldr	r2, [pc, #132]	; (8002fd8 <HAL_DMA_IRQHandler+0x200>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d102      	bne.n	8002f5e <HAL_DMA_IRQHandler+0x186>
 8002f58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f5c:	e01b      	b.n	8002f96 <HAL_DMA_IRQHandler+0x1be>
 8002f5e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f62:	e018      	b.n	8002f96 <HAL_DMA_IRQHandler+0x1be>
 8002f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f68:	e015      	b.n	8002f96 <HAL_DMA_IRQHandler+0x1be>
 8002f6a:	2340      	movs	r3, #64	; 0x40
 8002f6c:	e013      	b.n	8002f96 <HAL_DMA_IRQHandler+0x1be>
 8002f6e:	2304      	movs	r3, #4
 8002f70:	e011      	b.n	8002f96 <HAL_DMA_IRQHandler+0x1be>
 8002f72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002f76:	e00e      	b.n	8002f96 <HAL_DMA_IRQHandler+0x1be>
 8002f78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f7c:	e00b      	b.n	8002f96 <HAL_DMA_IRQHandler+0x1be>
 8002f7e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f82:	e008      	b.n	8002f96 <HAL_DMA_IRQHandler+0x1be>
 8002f84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f88:	e005      	b.n	8002f96 <HAL_DMA_IRQHandler+0x1be>
 8002f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f8e:	e002      	b.n	8002f96 <HAL_DMA_IRQHandler+0x1be>
 8002f90:	2340      	movs	r3, #64	; 0x40
 8002f92:	e000      	b.n	8002f96 <HAL_DMA_IRQHandler+0x1be>
 8002f94:	2304      	movs	r3, #4
 8002f96:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <HAL_DMA_IRQHandler+0x208>)
 8002f98:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 8136 	beq.w	8003210 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002fac:	e130      	b.n	8003210 <HAL_DMA_IRQHandler+0x438>
 8002fae:	bf00      	nop
 8002fb0:	40020080 	.word	0x40020080
 8002fb4:	40020008 	.word	0x40020008
 8002fb8:	4002001c 	.word	0x4002001c
 8002fbc:	40020030 	.word	0x40020030
 8002fc0:	40020044 	.word	0x40020044
 8002fc4:	40020058 	.word	0x40020058
 8002fc8:	4002006c 	.word	0x4002006c
 8002fcc:	40020408 	.word	0x40020408
 8002fd0:	4002041c 	.word	0x4002041c
 8002fd4:	40020430 	.word	0x40020430
 8002fd8:	40020444 	.word	0x40020444
 8002fdc:	40020400 	.word	0x40020400
 8002fe0:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	2202      	movs	r2, #2
 8002fea:	409a      	lsls	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 80dd 	beq.w	80031b0 <HAL_DMA_IRQHandler+0x3d8>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 80d7 	beq.w	80031b0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0320 	and.w	r3, r3, #32
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10b      	bne.n	8003028 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 020a 	bic.w	r2, r2, #10
 800301e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	4b7b      	ldr	r3, [pc, #492]	; (800321c <HAL_DMA_IRQHandler+0x444>)
 8003030:	429a      	cmp	r2, r3
 8003032:	d958      	bls.n	80030e6 <HAL_DMA_IRQHandler+0x30e>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a79      	ldr	r2, [pc, #484]	; (8003220 <HAL_DMA_IRQHandler+0x448>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d04f      	beq.n	80030de <HAL_DMA_IRQHandler+0x306>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a78      	ldr	r2, [pc, #480]	; (8003224 <HAL_DMA_IRQHandler+0x44c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d048      	beq.n	80030da <HAL_DMA_IRQHandler+0x302>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a76      	ldr	r2, [pc, #472]	; (8003228 <HAL_DMA_IRQHandler+0x450>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d040      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x2fc>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a75      	ldr	r2, [pc, #468]	; (800322c <HAL_DMA_IRQHandler+0x454>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d038      	beq.n	80030ce <HAL_DMA_IRQHandler+0x2f6>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a73      	ldr	r2, [pc, #460]	; (8003230 <HAL_DMA_IRQHandler+0x458>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d030      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x2f0>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a72      	ldr	r2, [pc, #456]	; (8003234 <HAL_DMA_IRQHandler+0x45c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d028      	beq.n	80030c2 <HAL_DMA_IRQHandler+0x2ea>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a69      	ldr	r2, [pc, #420]	; (800321c <HAL_DMA_IRQHandler+0x444>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d020      	beq.n	80030bc <HAL_DMA_IRQHandler+0x2e4>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a6e      	ldr	r2, [pc, #440]	; (8003238 <HAL_DMA_IRQHandler+0x460>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d019      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x2e0>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a6c      	ldr	r2, [pc, #432]	; (800323c <HAL_DMA_IRQHandler+0x464>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d012      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x2dc>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a6b      	ldr	r2, [pc, #428]	; (8003240 <HAL_DMA_IRQHandler+0x468>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d00a      	beq.n	80030ae <HAL_DMA_IRQHandler+0x2d6>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a69      	ldr	r2, [pc, #420]	; (8003244 <HAL_DMA_IRQHandler+0x46c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d102      	bne.n	80030a8 <HAL_DMA_IRQHandler+0x2d0>
 80030a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030a6:	e01b      	b.n	80030e0 <HAL_DMA_IRQHandler+0x308>
 80030a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030ac:	e018      	b.n	80030e0 <HAL_DMA_IRQHandler+0x308>
 80030ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030b2:	e015      	b.n	80030e0 <HAL_DMA_IRQHandler+0x308>
 80030b4:	2320      	movs	r3, #32
 80030b6:	e013      	b.n	80030e0 <HAL_DMA_IRQHandler+0x308>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e011      	b.n	80030e0 <HAL_DMA_IRQHandler+0x308>
 80030bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030c0:	e00e      	b.n	80030e0 <HAL_DMA_IRQHandler+0x308>
 80030c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030c6:	e00b      	b.n	80030e0 <HAL_DMA_IRQHandler+0x308>
 80030c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030cc:	e008      	b.n	80030e0 <HAL_DMA_IRQHandler+0x308>
 80030ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030d2:	e005      	b.n	80030e0 <HAL_DMA_IRQHandler+0x308>
 80030d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030d8:	e002      	b.n	80030e0 <HAL_DMA_IRQHandler+0x308>
 80030da:	2320      	movs	r3, #32
 80030dc:	e000      	b.n	80030e0 <HAL_DMA_IRQHandler+0x308>
 80030de:	2302      	movs	r3, #2
 80030e0:	4a59      	ldr	r2, [pc, #356]	; (8003248 <HAL_DMA_IRQHandler+0x470>)
 80030e2:	6053      	str	r3, [r2, #4]
 80030e4:	e057      	b.n	8003196 <HAL_DMA_IRQHandler+0x3be>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a4d      	ldr	r2, [pc, #308]	; (8003220 <HAL_DMA_IRQHandler+0x448>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d04f      	beq.n	8003190 <HAL_DMA_IRQHandler+0x3b8>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a4b      	ldr	r2, [pc, #300]	; (8003224 <HAL_DMA_IRQHandler+0x44c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d048      	beq.n	800318c <HAL_DMA_IRQHandler+0x3b4>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a4a      	ldr	r2, [pc, #296]	; (8003228 <HAL_DMA_IRQHandler+0x450>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d040      	beq.n	8003186 <HAL_DMA_IRQHandler+0x3ae>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a48      	ldr	r2, [pc, #288]	; (800322c <HAL_DMA_IRQHandler+0x454>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d038      	beq.n	8003180 <HAL_DMA_IRQHandler+0x3a8>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a47      	ldr	r2, [pc, #284]	; (8003230 <HAL_DMA_IRQHandler+0x458>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d030      	beq.n	800317a <HAL_DMA_IRQHandler+0x3a2>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a45      	ldr	r2, [pc, #276]	; (8003234 <HAL_DMA_IRQHandler+0x45c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d028      	beq.n	8003174 <HAL_DMA_IRQHandler+0x39c>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a3d      	ldr	r2, [pc, #244]	; (800321c <HAL_DMA_IRQHandler+0x444>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d020      	beq.n	800316e <HAL_DMA_IRQHandler+0x396>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a41      	ldr	r2, [pc, #260]	; (8003238 <HAL_DMA_IRQHandler+0x460>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d019      	beq.n	800316a <HAL_DMA_IRQHandler+0x392>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a40      	ldr	r2, [pc, #256]	; (800323c <HAL_DMA_IRQHandler+0x464>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d012      	beq.n	8003166 <HAL_DMA_IRQHandler+0x38e>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a3e      	ldr	r2, [pc, #248]	; (8003240 <HAL_DMA_IRQHandler+0x468>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00a      	beq.n	8003160 <HAL_DMA_IRQHandler+0x388>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a3d      	ldr	r2, [pc, #244]	; (8003244 <HAL_DMA_IRQHandler+0x46c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d102      	bne.n	800315a <HAL_DMA_IRQHandler+0x382>
 8003154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003158:	e01b      	b.n	8003192 <HAL_DMA_IRQHandler+0x3ba>
 800315a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800315e:	e018      	b.n	8003192 <HAL_DMA_IRQHandler+0x3ba>
 8003160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003164:	e015      	b.n	8003192 <HAL_DMA_IRQHandler+0x3ba>
 8003166:	2320      	movs	r3, #32
 8003168:	e013      	b.n	8003192 <HAL_DMA_IRQHandler+0x3ba>
 800316a:	2302      	movs	r3, #2
 800316c:	e011      	b.n	8003192 <HAL_DMA_IRQHandler+0x3ba>
 800316e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003172:	e00e      	b.n	8003192 <HAL_DMA_IRQHandler+0x3ba>
 8003174:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003178:	e00b      	b.n	8003192 <HAL_DMA_IRQHandler+0x3ba>
 800317a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800317e:	e008      	b.n	8003192 <HAL_DMA_IRQHandler+0x3ba>
 8003180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003184:	e005      	b.n	8003192 <HAL_DMA_IRQHandler+0x3ba>
 8003186:	f44f 7300 	mov.w	r3, #512	; 0x200
 800318a:	e002      	b.n	8003192 <HAL_DMA_IRQHandler+0x3ba>
 800318c:	2320      	movs	r3, #32
 800318e:	e000      	b.n	8003192 <HAL_DMA_IRQHandler+0x3ba>
 8003190:	2302      	movs	r3, #2
 8003192:	4a2e      	ldr	r2, [pc, #184]	; (800324c <HAL_DMA_IRQHandler+0x474>)
 8003194:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d034      	beq.n	8003210 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80031ae:	e02f      	b.n	8003210 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	2208      	movs	r2, #8
 80031b6:	409a      	lsls	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d028      	beq.n	8003212 <HAL_DMA_IRQHandler+0x43a>
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d023      	beq.n	8003212 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 020e 	bic.w	r2, r2, #14
 80031d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e2:	2101      	movs	r1, #1
 80031e4:	fa01 f202 	lsl.w	r2, r1, r2
 80031e8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003204:	2b00      	cmp	r3, #0
 8003206:	d004      	beq.n	8003212 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	4798      	blx	r3
    }
  }
  return;
 8003210:	bf00      	nop
 8003212:	bf00      	nop
}
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40020080 	.word	0x40020080
 8003220:	40020008 	.word	0x40020008
 8003224:	4002001c 	.word	0x4002001c
 8003228:	40020030 	.word	0x40020030
 800322c:	40020044 	.word	0x40020044
 8003230:	40020058 	.word	0x40020058
 8003234:	4002006c 	.word	0x4002006c
 8003238:	40020408 	.word	0x40020408
 800323c:	4002041c 	.word	0x4002041c
 8003240:	40020430 	.word	0x40020430
 8003244:	40020444 	.word	0x40020444
 8003248:	40020400 	.word	0x40020400
 800324c:	40020000 	.word	0x40020000

08003250 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800325e:	b2db      	uxtb	r3, r3
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr

0800326a <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800326a:	b480      	push	{r7}
 800326c:	b085      	sub	sp, #20
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	607a      	str	r2, [r7, #4]
 8003276:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003280:	2101      	movs	r1, #1
 8003282:	fa01 f202 	lsl.w	r2, r1, r2
 8003286:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b10      	cmp	r3, #16
 8003296:	d108      	bne.n	80032aa <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032a8:	e007      	b.n	80032ba <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	60da      	str	r2, [r3, #12]
}
 80032ba:	bf00      	nop
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr

080032c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b08b      	sub	sp, #44	; 0x2c
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032ce:	2300      	movs	r3, #0
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80032d2:	2300      	movs	r3, #0
 80032d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032d6:	e179      	b.n	80035cc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80032d8:	2201      	movs	r2, #1
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69fa      	ldr	r2, [r7, #28]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	f040 8168 	bne.w	80035c6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4a96      	ldr	r2, [pc, #600]	; (8003554 <HAL_GPIO_Init+0x290>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d05e      	beq.n	80033be <HAL_GPIO_Init+0xfa>
 8003300:	4a94      	ldr	r2, [pc, #592]	; (8003554 <HAL_GPIO_Init+0x290>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d875      	bhi.n	80033f2 <HAL_GPIO_Init+0x12e>
 8003306:	4a94      	ldr	r2, [pc, #592]	; (8003558 <HAL_GPIO_Init+0x294>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d058      	beq.n	80033be <HAL_GPIO_Init+0xfa>
 800330c:	4a92      	ldr	r2, [pc, #584]	; (8003558 <HAL_GPIO_Init+0x294>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d86f      	bhi.n	80033f2 <HAL_GPIO_Init+0x12e>
 8003312:	4a92      	ldr	r2, [pc, #584]	; (800355c <HAL_GPIO_Init+0x298>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d052      	beq.n	80033be <HAL_GPIO_Init+0xfa>
 8003318:	4a90      	ldr	r2, [pc, #576]	; (800355c <HAL_GPIO_Init+0x298>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d869      	bhi.n	80033f2 <HAL_GPIO_Init+0x12e>
 800331e:	4a90      	ldr	r2, [pc, #576]	; (8003560 <HAL_GPIO_Init+0x29c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d04c      	beq.n	80033be <HAL_GPIO_Init+0xfa>
 8003324:	4a8e      	ldr	r2, [pc, #568]	; (8003560 <HAL_GPIO_Init+0x29c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d863      	bhi.n	80033f2 <HAL_GPIO_Init+0x12e>
 800332a:	4a8e      	ldr	r2, [pc, #568]	; (8003564 <HAL_GPIO_Init+0x2a0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d046      	beq.n	80033be <HAL_GPIO_Init+0xfa>
 8003330:	4a8c      	ldr	r2, [pc, #560]	; (8003564 <HAL_GPIO_Init+0x2a0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d85d      	bhi.n	80033f2 <HAL_GPIO_Init+0x12e>
 8003336:	2b12      	cmp	r3, #18
 8003338:	d82a      	bhi.n	8003390 <HAL_GPIO_Init+0xcc>
 800333a:	2b12      	cmp	r3, #18
 800333c:	d859      	bhi.n	80033f2 <HAL_GPIO_Init+0x12e>
 800333e:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <HAL_GPIO_Init+0x80>)
 8003340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003344:	080033bf 	.word	0x080033bf
 8003348:	08003399 	.word	0x08003399
 800334c:	080033ab 	.word	0x080033ab
 8003350:	080033ed 	.word	0x080033ed
 8003354:	080033f3 	.word	0x080033f3
 8003358:	080033f3 	.word	0x080033f3
 800335c:	080033f3 	.word	0x080033f3
 8003360:	080033f3 	.word	0x080033f3
 8003364:	080033f3 	.word	0x080033f3
 8003368:	080033f3 	.word	0x080033f3
 800336c:	080033f3 	.word	0x080033f3
 8003370:	080033f3 	.word	0x080033f3
 8003374:	080033f3 	.word	0x080033f3
 8003378:	080033f3 	.word	0x080033f3
 800337c:	080033f3 	.word	0x080033f3
 8003380:	080033f3 	.word	0x080033f3
 8003384:	080033f3 	.word	0x080033f3
 8003388:	080033a1 	.word	0x080033a1
 800338c:	080033b5 	.word	0x080033b5
 8003390:	4a75      	ldr	r2, [pc, #468]	; (8003568 <HAL_GPIO_Init+0x2a4>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d013      	beq.n	80033be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003396:	e02c      	b.n	80033f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	623b      	str	r3, [r7, #32]
          break;
 800339e:	e029      	b.n	80033f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	3304      	adds	r3, #4
 80033a6:	623b      	str	r3, [r7, #32]
          break;
 80033a8:	e024      	b.n	80033f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	3308      	adds	r3, #8
 80033b0:	623b      	str	r3, [r7, #32]
          break;
 80033b2:	e01f      	b.n	80033f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	330c      	adds	r3, #12
 80033ba:	623b      	str	r3, [r7, #32]
          break;
 80033bc:	e01a      	b.n	80033f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d102      	bne.n	80033cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033c6:	2304      	movs	r3, #4
 80033c8:	623b      	str	r3, [r7, #32]
          break;
 80033ca:	e013      	b.n	80033f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d105      	bne.n	80033e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033d4:	2308      	movs	r3, #8
 80033d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69fa      	ldr	r2, [r7, #28]
 80033dc:	611a      	str	r2, [r3, #16]
          break;
 80033de:	e009      	b.n	80033f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033e0:	2308      	movs	r3, #8
 80033e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	615a      	str	r2, [r3, #20]
          break;
 80033ea:	e003      	b.n	80033f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80033ec:	2300      	movs	r3, #0
 80033ee:	623b      	str	r3, [r7, #32]
          break;
 80033f0:	e000      	b.n	80033f4 <HAL_GPIO_Init+0x130>
          break;
 80033f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	2bff      	cmp	r3, #255	; 0xff
 80033f8:	d801      	bhi.n	80033fe <HAL_GPIO_Init+0x13a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	e001      	b.n	8003402 <HAL_GPIO_Init+0x13e>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3304      	adds	r3, #4
 8003402:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	2bff      	cmp	r3, #255	; 0xff
 8003408:	d802      	bhi.n	8003410 <HAL_GPIO_Init+0x14c>
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	e002      	b.n	8003416 <HAL_GPIO_Init+0x152>
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	3b08      	subs	r3, #8
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	210f      	movs	r1, #15
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	fa01 f303 	lsl.w	r3, r1, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	401a      	ands	r2, r3
 8003428:	6a39      	ldr	r1, [r7, #32]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	fa01 f303 	lsl.w	r3, r1, r3
 8003430:	431a      	orrs	r2, r3
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 80c1 	beq.w	80035c6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003444:	4b49      	ldr	r3, [pc, #292]	; (800356c <HAL_GPIO_Init+0x2a8>)
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	4a48      	ldr	r2, [pc, #288]	; (800356c <HAL_GPIO_Init+0x2a8>)
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	6193      	str	r3, [r2, #24]
 8003450:	4b46      	ldr	r3, [pc, #280]	; (800356c <HAL_GPIO_Init+0x2a8>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800345c:	4a44      	ldr	r2, [pc, #272]	; (8003570 <HAL_GPIO_Init+0x2ac>)
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	3302      	adds	r3, #2
 8003464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003468:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	220f      	movs	r2, #15
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4013      	ands	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a3c      	ldr	r2, [pc, #240]	; (8003574 <HAL_GPIO_Init+0x2b0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d01f      	beq.n	80034c8 <HAL_GPIO_Init+0x204>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a3b      	ldr	r2, [pc, #236]	; (8003578 <HAL_GPIO_Init+0x2b4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d019      	beq.n	80034c4 <HAL_GPIO_Init+0x200>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a3a      	ldr	r2, [pc, #232]	; (800357c <HAL_GPIO_Init+0x2b8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d013      	beq.n	80034c0 <HAL_GPIO_Init+0x1fc>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a39      	ldr	r2, [pc, #228]	; (8003580 <HAL_GPIO_Init+0x2bc>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d00d      	beq.n	80034bc <HAL_GPIO_Init+0x1f8>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a38      	ldr	r2, [pc, #224]	; (8003584 <HAL_GPIO_Init+0x2c0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d007      	beq.n	80034b8 <HAL_GPIO_Init+0x1f4>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a37      	ldr	r2, [pc, #220]	; (8003588 <HAL_GPIO_Init+0x2c4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d101      	bne.n	80034b4 <HAL_GPIO_Init+0x1f0>
 80034b0:	2305      	movs	r3, #5
 80034b2:	e00a      	b.n	80034ca <HAL_GPIO_Init+0x206>
 80034b4:	2306      	movs	r3, #6
 80034b6:	e008      	b.n	80034ca <HAL_GPIO_Init+0x206>
 80034b8:	2304      	movs	r3, #4
 80034ba:	e006      	b.n	80034ca <HAL_GPIO_Init+0x206>
 80034bc:	2303      	movs	r3, #3
 80034be:	e004      	b.n	80034ca <HAL_GPIO_Init+0x206>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e002      	b.n	80034ca <HAL_GPIO_Init+0x206>
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <HAL_GPIO_Init+0x206>
 80034c8:	2300      	movs	r3, #0
 80034ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034cc:	f002 0203 	and.w	r2, r2, #3
 80034d0:	0092      	lsls	r2, r2, #2
 80034d2:	4093      	lsls	r3, r2
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80034da:	4925      	ldr	r1, [pc, #148]	; (8003570 <HAL_GPIO_Init+0x2ac>)
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	089b      	lsrs	r3, r3, #2
 80034e0:	3302      	adds	r3, #2
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d006      	beq.n	8003502 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80034f4:	4b25      	ldr	r3, [pc, #148]	; (800358c <HAL_GPIO_Init+0x2c8>)
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	4924      	ldr	r1, [pc, #144]	; (800358c <HAL_GPIO_Init+0x2c8>)
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	608b      	str	r3, [r1, #8]
 8003500:	e006      	b.n	8003510 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003502:	4b22      	ldr	r3, [pc, #136]	; (800358c <HAL_GPIO_Init+0x2c8>)
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	43db      	mvns	r3, r3
 800350a:	4920      	ldr	r1, [pc, #128]	; (800358c <HAL_GPIO_Init+0x2c8>)
 800350c:	4013      	ands	r3, r2
 800350e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d006      	beq.n	800352a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800351c:	4b1b      	ldr	r3, [pc, #108]	; (800358c <HAL_GPIO_Init+0x2c8>)
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	491a      	ldr	r1, [pc, #104]	; (800358c <HAL_GPIO_Init+0x2c8>)
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	4313      	orrs	r3, r2
 8003526:	60cb      	str	r3, [r1, #12]
 8003528:	e006      	b.n	8003538 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800352a:	4b18      	ldr	r3, [pc, #96]	; (800358c <HAL_GPIO_Init+0x2c8>)
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	43db      	mvns	r3, r3
 8003532:	4916      	ldr	r1, [pc, #88]	; (800358c <HAL_GPIO_Init+0x2c8>)
 8003534:	4013      	ands	r3, r2
 8003536:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d025      	beq.n	8003590 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003544:	4b11      	ldr	r3, [pc, #68]	; (800358c <HAL_GPIO_Init+0x2c8>)
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	4910      	ldr	r1, [pc, #64]	; (800358c <HAL_GPIO_Init+0x2c8>)
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	4313      	orrs	r3, r2
 800354e:	604b      	str	r3, [r1, #4]
 8003550:	e025      	b.n	800359e <HAL_GPIO_Init+0x2da>
 8003552:	bf00      	nop
 8003554:	10320000 	.word	0x10320000
 8003558:	10310000 	.word	0x10310000
 800355c:	10220000 	.word	0x10220000
 8003560:	10210000 	.word	0x10210000
 8003564:	10120000 	.word	0x10120000
 8003568:	10110000 	.word	0x10110000
 800356c:	40021000 	.word	0x40021000
 8003570:	40010000 	.word	0x40010000
 8003574:	40010800 	.word	0x40010800
 8003578:	40010c00 	.word	0x40010c00
 800357c:	40011000 	.word	0x40011000
 8003580:	40011400 	.word	0x40011400
 8003584:	40011800 	.word	0x40011800
 8003588:	40011c00 	.word	0x40011c00
 800358c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003590:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <HAL_GPIO_Init+0x324>)
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	43db      	mvns	r3, r3
 8003598:	4913      	ldr	r1, [pc, #76]	; (80035e8 <HAL_GPIO_Init+0x324>)
 800359a:	4013      	ands	r3, r2
 800359c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d006      	beq.n	80035b8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80035aa:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <HAL_GPIO_Init+0x324>)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	490e      	ldr	r1, [pc, #56]	; (80035e8 <HAL_GPIO_Init+0x324>)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]
 80035b6:	e006      	b.n	80035c6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_GPIO_Init+0x324>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	43db      	mvns	r3, r3
 80035c0:	4909      	ldr	r1, [pc, #36]	; (80035e8 <HAL_GPIO_Init+0x324>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	3301      	adds	r3, #1
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	fa22 f303 	lsr.w	r3, r2, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f47f ae7e 	bne.w	80032d8 <HAL_GPIO_Init+0x14>
  }
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	372c      	adds	r7, #44	; 0x2c
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr
 80035e8:	40010400 	.word	0x40010400

080035ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	887b      	ldrh	r3, [r7, #2]
 80035fe:	4013      	ands	r3, r2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
 8003608:	e001      	b.n	800360e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800360a:	2300      	movs	r3, #0
 800360c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800360e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr

0800361a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	460b      	mov	r3, r1
 8003624:	807b      	strh	r3, [r7, #2]
 8003626:	4613      	mov	r3, r2
 8003628:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800362a:	787b      	ldrb	r3, [r7, #1]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003630:	887a      	ldrh	r2, [r7, #2]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003636:	e003      	b.n	8003640 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003638:	887b      	ldrh	r3, [r7, #2]
 800363a:	041a      	lsls	r2, r3, #16
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	611a      	str	r2, [r3, #16]
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr

0800364a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	460b      	mov	r3, r1
 8003654:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800365c:	887a      	ldrh	r2, [r7, #2]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4013      	ands	r3, r2
 8003662:	041a      	lsls	r2, r3, #16
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	43d9      	mvns	r1, r3
 8003668:	887b      	ldrh	r3, [r7, #2]
 800366a:	400b      	ands	r3, r1
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	611a      	str	r2, [r3, #16]
}
 8003672:	bf00      	nop
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr

0800367c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e12b      	b.n	80038e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d106      	bne.n	80036a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fd fd40 	bl	8001128 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2224      	movs	r2, #36	; 0x24
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0201 	bic.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036e0:	f004 fcfa 	bl	80080d8 <HAL_RCC_GetPCLK1Freq>
 80036e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	4a81      	ldr	r2, [pc, #516]	; (80038f0 <HAL_I2C_Init+0x274>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d807      	bhi.n	8003700 <HAL_I2C_Init+0x84>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4a80      	ldr	r2, [pc, #512]	; (80038f4 <HAL_I2C_Init+0x278>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	bf94      	ite	ls
 80036f8:	2301      	movls	r3, #1
 80036fa:	2300      	movhi	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	e006      	b.n	800370e <HAL_I2C_Init+0x92>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a7d      	ldr	r2, [pc, #500]	; (80038f8 <HAL_I2C_Init+0x27c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	bf94      	ite	ls
 8003708:	2301      	movls	r3, #1
 800370a:	2300      	movhi	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e0e7      	b.n	80038e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4a78      	ldr	r2, [pc, #480]	; (80038fc <HAL_I2C_Init+0x280>)
 800371a:	fba2 2303 	umull	r2, r3, r2, r3
 800371e:	0c9b      	lsrs	r3, r3, #18
 8003720:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	430a      	orrs	r2, r1
 8003734:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	4a6a      	ldr	r2, [pc, #424]	; (80038f0 <HAL_I2C_Init+0x274>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d802      	bhi.n	8003750 <HAL_I2C_Init+0xd4>
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	3301      	adds	r3, #1
 800374e:	e009      	b.n	8003764 <HAL_I2C_Init+0xe8>
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003756:	fb02 f303 	mul.w	r3, r2, r3
 800375a:	4a69      	ldr	r2, [pc, #420]	; (8003900 <HAL_I2C_Init+0x284>)
 800375c:	fba2 2303 	umull	r2, r3, r2, r3
 8003760:	099b      	lsrs	r3, r3, #6
 8003762:	3301      	adds	r3, #1
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	430b      	orrs	r3, r1
 800376a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003776:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	495c      	ldr	r1, [pc, #368]	; (80038f0 <HAL_I2C_Init+0x274>)
 8003780:	428b      	cmp	r3, r1
 8003782:	d819      	bhi.n	80037b8 <HAL_I2C_Init+0x13c>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	1e59      	subs	r1, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003792:	1c59      	adds	r1, r3, #1
 8003794:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003798:	400b      	ands	r3, r1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_I2C_Init+0x138>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1e59      	subs	r1, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80037ac:	3301      	adds	r3, #1
 80037ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b2:	e051      	b.n	8003858 <HAL_I2C_Init+0x1dc>
 80037b4:	2304      	movs	r3, #4
 80037b6:	e04f      	b.n	8003858 <HAL_I2C_Init+0x1dc>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d111      	bne.n	80037e4 <HAL_I2C_Init+0x168>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	1e58      	subs	r0, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6859      	ldr	r1, [r3, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	440b      	add	r3, r1
 80037ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80037d2:	3301      	adds	r3, #1
 80037d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d8:	2b00      	cmp	r3, #0
 80037da:	bf0c      	ite	eq
 80037dc:	2301      	moveq	r3, #1
 80037de:	2300      	movne	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	e012      	b.n	800380a <HAL_I2C_Init+0x18e>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	1e58      	subs	r0, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6859      	ldr	r1, [r3, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	0099      	lsls	r1, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037fa:	3301      	adds	r3, #1
 80037fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003800:	2b00      	cmp	r3, #0
 8003802:	bf0c      	ite	eq
 8003804:	2301      	moveq	r3, #1
 8003806:	2300      	movne	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_I2C_Init+0x196>
 800380e:	2301      	movs	r3, #1
 8003810:	e022      	b.n	8003858 <HAL_I2C_Init+0x1dc>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10e      	bne.n	8003838 <HAL_I2C_Init+0x1bc>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1e58      	subs	r0, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6859      	ldr	r1, [r3, #4]
 8003822:	460b      	mov	r3, r1
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	440b      	add	r3, r1
 8003828:	fbb0 f3f3 	udiv	r3, r0, r3
 800382c:	3301      	adds	r3, #1
 800382e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003836:	e00f      	b.n	8003858 <HAL_I2C_Init+0x1dc>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1e58      	subs	r0, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6859      	ldr	r1, [r3, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	0099      	lsls	r1, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	fbb0 f3f3 	udiv	r3, r0, r3
 800384e:	3301      	adds	r3, #1
 8003850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003854:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	6809      	ldr	r1, [r1, #0]
 800385c:	4313      	orrs	r3, r2
 800385e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69da      	ldr	r2, [r3, #28]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003886:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6911      	ldr	r1, [r2, #16]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	68d2      	ldr	r2, [r2, #12]
 8003892:	4311      	orrs	r1, r2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	430b      	orrs	r3, r1
 800389a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	695a      	ldr	r2, [r3, #20]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	000186a0 	.word	0x000186a0
 80038f4:	001e847f 	.word	0x001e847f
 80038f8:	003d08ff 	.word	0x003d08ff
 80038fc:	431bde83 	.word	0x431bde83
 8003900:	10624dd3 	.word	0x10624dd3

08003904 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003916:	2b80      	cmp	r3, #128	; 0x80
 8003918:	d103      	bne.n	8003922 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2200      	movs	r2, #0
 8003920:	611a      	str	r2, [r3, #16]
  }
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr

0800392c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	4608      	mov	r0, r1
 8003936:	4611      	mov	r1, r2
 8003938:	461a      	mov	r2, r3
 800393a:	4603      	mov	r3, r0
 800393c:	817b      	strh	r3, [r7, #10]
 800393e:	460b      	mov	r3, r1
 8003940:	813b      	strh	r3, [r7, #8]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003946:	f7fe fd09 	bl	800235c <HAL_GetTick>
 800394a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b20      	cmp	r3, #32
 8003956:	f040 80d9 	bne.w	8003b0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	2319      	movs	r3, #25
 8003960:	2201      	movs	r2, #1
 8003962:	496d      	ldr	r1, [pc, #436]	; (8003b18 <HAL_I2C_Mem_Write+0x1ec>)
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f002 f859 	bl	8005a1c <I2C_WaitOnFlagUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003970:	2302      	movs	r3, #2
 8003972:	e0cc      	b.n	8003b0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_I2C_Mem_Write+0x56>
 800397e:	2302      	movs	r3, #2
 8003980:	e0c5      	b.n	8003b0e <HAL_I2C_Mem_Write+0x1e2>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b01      	cmp	r3, #1
 8003996:	d007      	beq.n	80039a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2221      	movs	r2, #33	; 0x21
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2240      	movs	r2, #64	; 0x40
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a3a      	ldr	r2, [r7, #32]
 80039d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4a4d      	ldr	r2, [pc, #308]	; (8003b1c <HAL_I2C_Mem_Write+0x1f0>)
 80039e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039ea:	88f8      	ldrh	r0, [r7, #6]
 80039ec:	893a      	ldrh	r2, [r7, #8]
 80039ee:	8979      	ldrh	r1, [r7, #10]
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	9301      	str	r3, [sp, #4]
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	4603      	mov	r3, r0
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f001 fcdc 	bl	80053b8 <I2C_RequestMemoryWrite>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d052      	beq.n	8003aac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e081      	b.n	8003b0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f002 f91e 	bl	8005c50 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00d      	beq.n	8003a36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d107      	bne.n	8003a32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e06b      	b.n	8003b0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	781a      	ldrb	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d11b      	bne.n	8003aac <HAL_I2C_Mem_Write+0x180>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d017      	beq.n	8003aac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	781a      	ldrb	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1aa      	bne.n	8003a0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f002 f911 	bl	8005ce0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00d      	beq.n	8003ae0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d107      	bne.n	8003adc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ada:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e016      	b.n	8003b0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	e000      	b.n	8003b0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b0c:	2302      	movs	r3, #2
  }
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	00100002 	.word	0x00100002
 8003b1c:	ffff0000 	.word	0xffff0000

08003b20 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08c      	sub	sp, #48	; 0x30
 8003b24:	af02      	add	r7, sp, #8
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	4608      	mov	r0, r1
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4603      	mov	r3, r0
 8003b30:	817b      	strh	r3, [r7, #10]
 8003b32:	460b      	mov	r3, r1
 8003b34:	813b      	strh	r3, [r7, #8]
 8003b36:	4613      	mov	r3, r2
 8003b38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b3a:	f7fe fc0f 	bl	800235c <HAL_GetTick>
 8003b3e:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b20      	cmp	r3, #32
 8003b4e:	f040 8168 	bne.w	8003e22 <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b52:	4b98      	ldr	r3, [pc, #608]	; (8003db4 <HAL_I2C_Mem_Read_DMA+0x294>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	08db      	lsrs	r3, r3, #3
 8003b58:	4a97      	ldr	r2, [pc, #604]	; (8003db8 <HAL_I2C_Mem_Read_DMA+0x298>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	0a1a      	lsrs	r2, r3, #8
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	009a      	lsls	r2, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d112      	bne.n	8003b9e <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2220      	movs	r2, #32
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f043 0220 	orr.w	r2, r3, #32
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	e142      	b.n	8003e24 <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d0df      	beq.n	8003b6c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_I2C_Mem_Read_DMA+0x9a>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e134      	b.n	8003e24 <HAL_I2C_Mem_Read_DMA+0x304>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d007      	beq.n	8003be0 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2222      	movs	r2, #34	; 0x22
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2240      	movs	r2, #64	; 0x40
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4a67      	ldr	r2, [pc, #412]	; (8003dbc <HAL_I2C_Mem_Read_DMA+0x29c>)
 8003c20:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003c22:	897a      	ldrh	r2, [r7, #10]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003c28:	893a      	ldrh	r2, [r7, #8]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003c2e:	88fa      	ldrh	r2, [r7, #6]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f000 80c2 	beq.w	8003dc8 <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d024      	beq.n	8003c96 <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c50:	4a5b      	ldr	r2, [pc, #364]	; (8003dc0 <HAL_I2C_Mem_Read_DMA+0x2a0>)
 8003c52:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c58:	4a5a      	ldr	r2, [pc, #360]	; (8003dc4 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 8003c5a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c60:	2200      	movs	r2, #0
 8003c62:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	2200      	movs	r2, #0
 8003c6a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3310      	adds	r3, #16
 8003c76:	4619      	mov	r1, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c82:	f7fe ff41 	bl	8002b08 <HAL_DMA_Start_IT>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003c8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d17b      	bne.n	8003d8c <HAL_I2C_Mem_Read_DMA+0x26c>
 8003c94:	e013      	b.n	8003cbe <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e0b2      	b.n	8003e24 <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003cbe:	88f8      	ldrh	r0, [r7, #6]
 8003cc0:	893a      	ldrh	r2, [r7, #8]
 8003cc2:	8979      	ldrh	r1, [r7, #10]
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	2323      	movs	r3, #35	; 0x23
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	4603      	mov	r3, r0
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f001 fc08 	bl	80054e4 <I2C_RequestMemoryRead>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d023      	beq.n	8003d22 <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fe ff72 	bl	8002bc8 <HAL_DMA_Abort_IT>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cee:	2200      	movs	r2, #0
 8003cf0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d00:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0201 	bic.w	r2, r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e080      	b.n	8003e24 <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d108      	bne.n	8003d3c <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	e007      	b.n	8003d4c <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d4a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61bb      	str	r3, [r7, #24]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	61bb      	str	r3, [r7, #24]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	61bb      	str	r3, [r7, #24]
 8003d60:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d78:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d88:	605a      	str	r2, [r3, #4]
 8003d8a:	e048      	b.n	8003e1e <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	f043 0210 	orr.w	r2, r3, #16
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e037      	b.n	8003e24 <HAL_I2C_Mem_Read_DMA+0x304>
 8003db4:	20000048 	.word	0x20000048
 8003db8:	14f8b589 	.word	0x14f8b589
 8003dbc:	ffff0000 	.word	0xffff0000
 8003dc0:	080056b5 	.word	0x080056b5
 8003dc4:	0800585f 	.word	0x0800585f
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003dc8:	88f8      	ldrh	r0, [r7, #6]
 8003dca:	893a      	ldrh	r2, [r7, #8]
 8003dcc:	8979      	ldrh	r1, [r7, #10]
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	9301      	str	r3, [sp, #4]
 8003dd2:	2323      	movs	r3, #35	; 0x23
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f001 fb83 	bl	80054e4 <I2C_RequestMemoryRead>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e01d      	b.n	8003e24 <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e0c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	e000      	b.n	8003e24 <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 8003e22:	2302      	movs	r3, #2
  }
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3728      	adds	r7, #40	; 0x28
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b088      	sub	sp, #32
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e44:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e4c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e54:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	2b10      	cmp	r3, #16
 8003e5a:	d003      	beq.n	8003e64 <HAL_I2C_EV_IRQHandler+0x38>
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
 8003e5e:	2b40      	cmp	r3, #64	; 0x40
 8003e60:	f040 80c1 	bne.w	8003fe6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10d      	bne.n	8003e9a <HAL_I2C_EV_IRQHandler+0x6e>
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003e84:	d003      	beq.n	8003e8e <HAL_I2C_EV_IRQHandler+0x62>
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003e8c:	d101      	bne.n	8003e92 <HAL_I2C_EV_IRQHandler+0x66>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <HAL_I2C_EV_IRQHandler+0x68>
 8003e92:	2300      	movs	r3, #0
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	f000 8132 	beq.w	80040fe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00c      	beq.n	8003ebe <HAL_I2C_EV_IRQHandler+0x92>
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	0a5b      	lsrs	r3, r3, #9
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d006      	beq.n	8003ebe <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f001 ffbd 	bl	8005e30 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fccd 	bl	8004856 <I2C_Master_SB>
 8003ebc:	e092      	b.n	8003fe4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	08db      	lsrs	r3, r3, #3
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d009      	beq.n	8003ede <HAL_I2C_EV_IRQHandler+0xb2>
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	0a5b      	lsrs	r3, r3, #9
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fd42 	bl	8004960 <I2C_Master_ADD10>
 8003edc:	e082      	b.n	8003fe4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	085b      	lsrs	r3, r3, #1
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d009      	beq.n	8003efe <HAL_I2C_EV_IRQHandler+0xd2>
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	0a5b      	lsrs	r3, r3, #9
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fd5b 	bl	80049b2 <I2C_Master_ADDR>
 8003efc:	e072      	b.n	8003fe4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	089b      	lsrs	r3, r3, #2
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d03b      	beq.n	8003f82 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f18:	f000 80f3 	beq.w	8004102 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	09db      	lsrs	r3, r3, #7
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00f      	beq.n	8003f48 <HAL_I2C_EV_IRQHandler+0x11c>
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	0a9b      	lsrs	r3, r3, #10
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d009      	beq.n	8003f48 <HAL_I2C_EV_IRQHandler+0x11c>
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	089b      	lsrs	r3, r3, #2
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d103      	bne.n	8003f48 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f939 	bl	80041b8 <I2C_MasterTransmit_TXE>
 8003f46:	e04d      	b.n	8003fe4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	089b      	lsrs	r3, r3, #2
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f000 80d6 	beq.w	8004102 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	0a5b      	lsrs	r3, r3, #9
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 80cf 	beq.w	8004102 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003f64:	7bbb      	ldrb	r3, [r7, #14]
 8003f66:	2b21      	cmp	r3, #33	; 0x21
 8003f68:	d103      	bne.n	8003f72 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f9c0 	bl	80042f0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f70:	e0c7      	b.n	8004102 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
 8003f74:	2b40      	cmp	r3, #64	; 0x40
 8003f76:	f040 80c4 	bne.w	8004102 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fa2e 	bl	80043dc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f80:	e0bf      	b.n	8004102 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f90:	f000 80b7 	beq.w	8004102 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	099b      	lsrs	r3, r3, #6
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00f      	beq.n	8003fc0 <HAL_I2C_EV_IRQHandler+0x194>
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	0a9b      	lsrs	r3, r3, #10
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d009      	beq.n	8003fc0 <HAL_I2C_EV_IRQHandler+0x194>
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	089b      	lsrs	r3, r3, #2
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d103      	bne.n	8003fc0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 faa7 	bl	800450c <I2C_MasterReceive_RXNE>
 8003fbe:	e011      	b.n	8003fe4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	089b      	lsrs	r3, r3, #2
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 809a 	beq.w	8004102 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	0a5b      	lsrs	r3, r3, #9
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 8093 	beq.w	8004102 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 fb50 	bl	8004682 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fe2:	e08e      	b.n	8004102 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003fe4:	e08d      	b.n	8004102 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d004      	beq.n	8003ff8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	e007      	b.n	8004008 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	085b      	lsrs	r3, r3, #1
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d012      	beq.n	800403a <HAL_I2C_EV_IRQHandler+0x20e>
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	0a5b      	lsrs	r3, r3, #9
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00c      	beq.n	800403a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004030:	69b9      	ldr	r1, [r7, #24]
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 ff14 	bl	8004e60 <I2C_Slave_ADDR>
 8004038:	e066      	b.n	8004108 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	091b      	lsrs	r3, r3, #4
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <HAL_I2C_EV_IRQHandler+0x22e>
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	0a5b      	lsrs	r3, r3, #9
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 ff4e 	bl	8004ef4 <I2C_Slave_STOPF>
 8004058:	e056      	b.n	8004108 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800405a:	7bbb      	ldrb	r3, [r7, #14]
 800405c:	2b21      	cmp	r3, #33	; 0x21
 800405e:	d002      	beq.n	8004066 <HAL_I2C_EV_IRQHandler+0x23a>
 8004060:	7bbb      	ldrb	r3, [r7, #14]
 8004062:	2b29      	cmp	r3, #41	; 0x29
 8004064:	d125      	bne.n	80040b2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	09db      	lsrs	r3, r3, #7
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00f      	beq.n	8004092 <HAL_I2C_EV_IRQHandler+0x266>
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	0a9b      	lsrs	r3, r3, #10
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <HAL_I2C_EV_IRQHandler+0x266>
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	089b      	lsrs	r3, r3, #2
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d103      	bne.n	8004092 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fe2c 	bl	8004ce8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004090:	e039      	b.n	8004106 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	089b      	lsrs	r3, r3, #2
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d033      	beq.n	8004106 <HAL_I2C_EV_IRQHandler+0x2da>
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	0a5b      	lsrs	r3, r3, #9
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d02d      	beq.n	8004106 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 fe59 	bl	8004d62 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040b0:	e029      	b.n	8004106 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	099b      	lsrs	r3, r3, #6
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00f      	beq.n	80040de <HAL_I2C_EV_IRQHandler+0x2b2>
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	0a9b      	lsrs	r3, r3, #10
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <HAL_I2C_EV_IRQHandler+0x2b2>
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	089b      	lsrs	r3, r3, #2
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d103      	bne.n	80040de <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fe63 	bl	8004da2 <I2C_SlaveReceive_RXNE>
 80040dc:	e014      	b.n	8004108 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	089b      	lsrs	r3, r3, #2
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00e      	beq.n	8004108 <HAL_I2C_EV_IRQHandler+0x2dc>
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	0a5b      	lsrs	r3, r3, #9
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d008      	beq.n	8004108 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 fe91 	bl	8004e1e <I2C_SlaveReceive_BTF>
 80040fc:	e004      	b.n	8004108 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80040fe:	bf00      	nop
 8004100:	e002      	b.n	8004108 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004102:	bf00      	nop
 8004104:	e000      	b.n	8004108 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004106:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004108:	3720      	adds	r7, #32
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr

08004132 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr

08004144 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr

08004156 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	460b      	mov	r3, r1
 8004160:	70fb      	strb	r3, [r7, #3]
 8004162:	4613      	mov	r3, r2
 8004164:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr

08004170 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr

080041a6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d150      	bne.n	8004280 <I2C_MasterTransmit_TXE+0xc8>
 80041de:	7bfb      	ldrb	r3, [r7, #15]
 80041e0:	2b21      	cmp	r3, #33	; 0x21
 80041e2:	d14d      	bne.n	8004280 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d01d      	beq.n	8004226 <I2C_MasterTransmit_TXE+0x6e>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	d01a      	beq.n	8004226 <I2C_MasterTransmit_TXE+0x6e>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041f6:	d016      	beq.n	8004226 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004206:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2211      	movs	r2, #17
 800420c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff ff75 	bl	800410e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004224:	e060      	b.n	80042e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004234:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004244:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b40      	cmp	r3, #64	; 0x40
 800425e:	d107      	bne.n	8004270 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7fd f9bd 	bl	80015e8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800426e:	e03b      	b.n	80042e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff ff48 	bl	800410e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800427e:	e033      	b.n	80042e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	2b21      	cmp	r3, #33	; 0x21
 8004284:	d005      	beq.n	8004292 <I2C_MasterTransmit_TXE+0xda>
 8004286:	7bbb      	ldrb	r3, [r7, #14]
 8004288:	2b40      	cmp	r3, #64	; 0x40
 800428a:	d12d      	bne.n	80042e8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	2b22      	cmp	r3, #34	; 0x22
 8004290:	d12a      	bne.n	80042e8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004296:	b29b      	uxth	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d108      	bne.n	80042ae <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042aa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80042ac:	e01c      	b.n	80042e8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b40      	cmp	r3, #64	; 0x40
 80042b8:	d103      	bne.n	80042c2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f88e 	bl	80043dc <I2C_MemoryTransmit_TXE_BTF>
}
 80042c0:	e012      	b.n	80042e8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	781a      	ldrb	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042e6:	e7ff      	b.n	80042e8 <I2C_MasterTransmit_TXE+0x130>
 80042e8:	bf00      	nop
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b21      	cmp	r3, #33	; 0x21
 8004308:	d164      	bne.n	80043d4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430e:	b29b      	uxth	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d012      	beq.n	800433a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	781a      	ldrb	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004338:	e04c      	b.n	80043d4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b08      	cmp	r3, #8
 800433e:	d01d      	beq.n	800437c <I2C_MasterTransmit_BTF+0x8c>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b20      	cmp	r3, #32
 8004344:	d01a      	beq.n	800437c <I2C_MasterTransmit_BTF+0x8c>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800434c:	d016      	beq.n	800437c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800435c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2211      	movs	r2, #17
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff feca 	bl	800410e <HAL_I2C_MasterTxCpltCallback>
}
 800437a:	e02b      	b.n	80043d4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800438a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b40      	cmp	r3, #64	; 0x40
 80043b4:	d107      	bne.n	80043c6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7fd f912 	bl	80015e8 <HAL_I2C_MemTxCpltCallback>
}
 80043c4:	e006      	b.n	80043d4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7ff fe9d 	bl	800410e <HAL_I2C_MasterTxCpltCallback>
}
 80043d4:	bf00      	nop
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d11d      	bne.n	8004430 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d10b      	bne.n	8004414 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004400:	b2da      	uxtb	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440c:	1c9a      	adds	r2, r3, #2
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004412:	e077      	b.n	8004504 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004418:	b29b      	uxth	r3, r3
 800441a:	121b      	asrs	r3, r3, #8
 800441c:	b2da      	uxtb	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800442e:	e069      	b.n	8004504 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004434:	2b01      	cmp	r3, #1
 8004436:	d10b      	bne.n	8004450 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800443c:	b2da      	uxtb	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800444e:	e059      	b.n	8004504 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004454:	2b02      	cmp	r3, #2
 8004456:	d152      	bne.n	80044fe <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	2b22      	cmp	r3, #34	; 0x22
 800445c:	d10d      	bne.n	800447a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800446c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004478:	e044      	b.n	8004504 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d015      	beq.n	80044b0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	2b21      	cmp	r3, #33	; 0x21
 8004488:	d112      	bne.n	80044b0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	781a      	ldrb	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80044ae:	e029      	b.n	8004504 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d124      	bne.n	8004504 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
 80044bc:	2b21      	cmp	r3, #33	; 0x21
 80044be:	d121      	bne.n	8004504 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044ce:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fd f876 	bl	80015e8 <HAL_I2C_MemTxCpltCallback>
}
 80044fc:	e002      	b.n	8004504 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7ff fa00 	bl	8003904 <I2C_Flush_DR>
}
 8004504:	bf00      	nop
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b22      	cmp	r3, #34	; 0x22
 800451e:	f040 80ac 	bne.w	800467a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004526:	b29b      	uxth	r3, r3
 8004528:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b03      	cmp	r3, #3
 800452e:	d921      	bls.n	8004574 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691a      	ldr	r2, [r3, #16]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454c:	b29b      	uxth	r3, r3
 800454e:	3b01      	subs	r3, #1
 8004550:	b29a      	uxth	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455a:	b29b      	uxth	r3, r3
 800455c:	2b03      	cmp	r3, #3
 800455e:	f040 808c 	bne.w	800467a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004570:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004572:	e082      	b.n	800467a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	2b02      	cmp	r3, #2
 800457a:	d075      	beq.n	8004668 <I2C_MasterReceive_RXNE+0x15c>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d002      	beq.n	8004588 <I2C_MasterReceive_RXNE+0x7c>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d16f      	bne.n	8004668 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f001 fbf1 	bl	8005d70 <I2C_WaitOnSTOPRequestThroughIT>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d142      	bne.n	800461a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045b2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b40      	cmp	r3, #64	; 0x40
 80045ec:	d10a      	bne.n	8004604 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff fdc0 	bl	8004182 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004602:	e03a      	b.n	800467a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2212      	movs	r2, #18
 8004610:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7ff fd84 	bl	8004120 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004618:	e02f      	b.n	800467a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004628:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff fd97 	bl	8004194 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004666:	e008      	b.n	800467a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004676:	605a      	str	r2, [r3, #4]
}
 8004678:	e7ff      	b.n	800467a <I2C_MasterReceive_RXNE+0x16e>
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b084      	sub	sp, #16
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b04      	cmp	r3, #4
 8004698:	d11b      	bne.n	80046d2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046a8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80046d0:	e0bd      	b.n	800484e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d129      	bne.n	8004730 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ea:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d00a      	beq.n	8004708 <I2C_MasterReceive_BTF+0x86>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d007      	beq.n	8004708 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004706:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	691a      	ldr	r2, [r3, #16]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	1c5a      	adds	r2, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004724:	b29b      	uxth	r3, r3
 8004726:	3b01      	subs	r3, #1
 8004728:	b29a      	uxth	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800472e:	e08e      	b.n	800484e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d176      	bne.n	8004828 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d002      	beq.n	8004746 <I2C_MasterReceive_BTF+0xc4>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b10      	cmp	r3, #16
 8004744:	d108      	bne.n	8004758 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	e019      	b.n	800478c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b04      	cmp	r3, #4
 800475c:	d002      	beq.n	8004764 <I2C_MasterReceive_BTF+0xe2>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b02      	cmp	r3, #2
 8004762:	d108      	bne.n	8004776 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	e00a      	b.n	800478c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b10      	cmp	r3, #16
 800477a:	d007      	beq.n	800478c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800478a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691a      	ldr	r2, [r3, #16]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	3b01      	subs	r3, #1
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	b2d2      	uxtb	r2, r2
 80047be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80047e6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b40      	cmp	r3, #64	; 0x40
 80047fa:	d10a      	bne.n	8004812 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7ff fcb9 	bl	8004182 <HAL_I2C_MemRxCpltCallback>
}
 8004810:	e01d      	b.n	800484e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2212      	movs	r2, #18
 800481e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff fc7d 	bl	8004120 <HAL_I2C_MasterRxCpltCallback>
}
 8004826:	e012      	b.n	800484e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	691a      	ldr	r2, [r3, #16]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004844:	b29b      	uxth	r3, r3
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800484e:	bf00      	nop
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b40      	cmp	r3, #64	; 0x40
 8004868:	d117      	bne.n	800489a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800486e:	2b00      	cmp	r3, #0
 8004870:	d109      	bne.n	8004886 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004876:	b2db      	uxtb	r3, r3
 8004878:	461a      	mov	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004882:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004884:	e067      	b.n	8004956 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	b2db      	uxtb	r3, r3
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	b2da      	uxtb	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	611a      	str	r2, [r3, #16]
}
 8004898:	e05d      	b.n	8004956 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048a2:	d133      	bne.n	800490c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b21      	cmp	r3, #33	; 0x21
 80048ae:	d109      	bne.n	80048c4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	461a      	mov	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048c0:	611a      	str	r2, [r3, #16]
 80048c2:	e008      	b.n	80048d6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	f043 0301 	orr.w	r3, r3, #1
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d004      	beq.n	80048e8 <I2C_Master_SB+0x92>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d108      	bne.n	80048fa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d032      	beq.n	8004956 <I2C_Master_SB+0x100>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d02d      	beq.n	8004956 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004908:	605a      	str	r2, [r3, #4]
}
 800490a:	e024      	b.n	8004956 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10e      	bne.n	8004932 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004918:	b29b      	uxth	r3, r3
 800491a:	11db      	asrs	r3, r3, #7
 800491c:	b2db      	uxtb	r3, r3
 800491e:	f003 0306 	and.w	r3, r3, #6
 8004922:	b2db      	uxtb	r3, r3
 8004924:	f063 030f 	orn	r3, r3, #15
 8004928:	b2da      	uxtb	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	611a      	str	r2, [r3, #16]
}
 8004930:	e011      	b.n	8004956 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004936:	2b01      	cmp	r3, #1
 8004938:	d10d      	bne.n	8004956 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	b29b      	uxth	r3, r3
 8004940:	11db      	asrs	r3, r3, #7
 8004942:	b2db      	uxtb	r3, r3
 8004944:	f003 0306 	and.w	r3, r3, #6
 8004948:	b2db      	uxtb	r3, r3
 800494a:	f063 030e 	orn	r3, r3, #14
 800494e:	b2da      	uxtb	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	611a      	str	r2, [r3, #16]
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	bc80      	pop	{r7}
 800495e:	4770      	bx	lr

08004960 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496c:	b2da      	uxtb	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004978:	2b00      	cmp	r3, #0
 800497a:	d004      	beq.n	8004986 <I2C_Master_ADD10+0x26>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004982:	2b00      	cmp	r3, #0
 8004984:	d108      	bne.n	8004998 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00c      	beq.n	80049a8 <I2C_Master_ADD10+0x48>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004994:	2b00      	cmp	r3, #0
 8004996:	d007      	beq.n	80049a8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049a6:	605a      	str	r2, [r3, #4]
  }
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr

080049b2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b091      	sub	sp, #68	; 0x44
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b22      	cmp	r3, #34	; 0x22
 80049da:	f040 8174 	bne.w	8004cc6 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10f      	bne.n	8004a06 <I2C_Master_ADDR+0x54>
 80049e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80049ea:	2b40      	cmp	r3, #64	; 0x40
 80049ec:	d10b      	bne.n	8004a06 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ee:	2300      	movs	r3, #0
 80049f0:	633b      	str	r3, [r7, #48]	; 0x30
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	633b      	str	r3, [r7, #48]	; 0x30
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	633b      	str	r3, [r7, #48]	; 0x30
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	e16b      	b.n	8004cde <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d11d      	bne.n	8004a4a <I2C_Master_ADDR+0x98>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a16:	d118      	bne.n	8004a4a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a18:	2300      	movs	r3, #0
 8004a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a3c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	651a      	str	r2, [r3, #80]	; 0x50
 8004a48:	e149      	b.n	8004cde <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d113      	bne.n	8004a7c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a54:	2300      	movs	r3, #0
 8004a56:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	e120      	b.n	8004cbe <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	f040 808a 	bne.w	8004b9c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a8e:	d137      	bne.n	8004b00 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a9e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aae:	d113      	bne.n	8004ad8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004abe:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	627b      	str	r3, [r7, #36]	; 0x24
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	e0f2      	b.n	8004cbe <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad8:	2300      	movs	r3, #0
 8004ada:	623b      	str	r3, [r7, #32]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	623b      	str	r3, [r7, #32]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	623b      	str	r3, [r7, #32]
 8004aec:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	e0de      	b.n	8004cbe <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b02:	2b08      	cmp	r3, #8
 8004b04:	d02e      	beq.n	8004b64 <I2C_Master_ADDR+0x1b2>
 8004b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b08:	2b20      	cmp	r3, #32
 8004b0a:	d02b      	beq.n	8004b64 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b0e:	2b12      	cmp	r3, #18
 8004b10:	d102      	bne.n	8004b18 <I2C_Master_ADDR+0x166>
 8004b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d125      	bne.n	8004b64 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d00e      	beq.n	8004b3c <I2C_Master_ADDR+0x18a>
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d00b      	beq.n	8004b3c <I2C_Master_ADDR+0x18a>
 8004b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b26:	2b10      	cmp	r3, #16
 8004b28:	d008      	beq.n	8004b3c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	e007      	b.n	8004b4c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b4a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	61fb      	str	r3, [r7, #28]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	61fb      	str	r3, [r7, #28]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	61fb      	str	r3, [r7, #28]
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	e0ac      	b.n	8004cbe <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b72:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b74:	2300      	movs	r3, #0
 8004b76:	61bb      	str	r3, [r7, #24]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	61bb      	str	r3, [r7, #24]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	61bb      	str	r3, [r7, #24]
 8004b88:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	e090      	b.n	8004cbe <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d158      	bne.n	8004c58 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d021      	beq.n	8004bf0 <I2C_Master_ADDR+0x23e>
 8004bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d01e      	beq.n	8004bf0 <I2C_Master_ADDR+0x23e>
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb4:	2b10      	cmp	r3, #16
 8004bb6:	d01b      	beq.n	8004bf0 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bc6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	e012      	b.n	8004c16 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bfe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c00:	2300      	movs	r3, #0
 8004c02:	613b      	str	r3, [r7, #16]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	613b      	str	r3, [r7, #16]
 8004c14:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c24:	d14b      	bne.n	8004cbe <I2C_Master_ADDR+0x30c>
 8004c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c2c:	d00b      	beq.n	8004c46 <I2C_Master_ADDR+0x294>
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d008      	beq.n	8004c46 <I2C_Master_ADDR+0x294>
 8004c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d005      	beq.n	8004c46 <I2C_Master_ADDR+0x294>
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3c:	2b10      	cmp	r3, #16
 8004c3e:	d002      	beq.n	8004c46 <I2C_Master_ADDR+0x294>
 8004c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c42:	2b20      	cmp	r3, #32
 8004c44:	d13b      	bne.n	8004cbe <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c54:	605a      	str	r2, [r3, #4]
 8004c56:	e032      	b.n	8004cbe <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c66:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c76:	d117      	bne.n	8004ca8 <I2C_Master_ADDR+0x2f6>
 8004c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c7e:	d00b      	beq.n	8004c98 <I2C_Master_ADDR+0x2e6>
 8004c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d008      	beq.n	8004c98 <I2C_Master_ADDR+0x2e6>
 8004c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d005      	beq.n	8004c98 <I2C_Master_ADDR+0x2e6>
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8e:	2b10      	cmp	r3, #16
 8004c90:	d002      	beq.n	8004c98 <I2C_Master_ADDR+0x2e6>
 8004c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d107      	bne.n	8004ca8 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ca6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004cc4:	e00b      	b.n	8004cde <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60bb      	str	r3, [r7, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	60bb      	str	r3, [r7, #8]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	60bb      	str	r3, [r7, #8]
 8004cda:	68bb      	ldr	r3, [r7, #8]
}
 8004cdc:	e7ff      	b.n	8004cde <I2C_Master_ADDR+0x32c>
 8004cde:	bf00      	nop
 8004ce0:	3744      	adds	r7, #68	; 0x44
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr

08004ce8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d02b      	beq.n	8004d5a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	781a      	ldrb	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d114      	bne.n	8004d5a <I2C_SlaveTransmit_TXE+0x72>
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
 8004d32:	2b29      	cmp	r3, #41	; 0x29
 8004d34:	d111      	bne.n	8004d5a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d44:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2221      	movs	r2, #33	; 0x21
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2228      	movs	r2, #40	; 0x28
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff f9ec 	bl	8004132 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004d5a:	bf00      	nop
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d011      	beq.n	8004d98 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	781a      	ldrb	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bc80      	pop	{r7}
 8004da0:	4770      	bx	lr

08004da2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d02c      	beq.n	8004e16 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691a      	ldr	r2, [r3, #16]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d114      	bne.n	8004e16 <I2C_SlaveReceive_RXNE+0x74>
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	2b2a      	cmp	r3, #42	; 0x2a
 8004df0:	d111      	bne.n	8004e16 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e00:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2222      	movs	r2, #34	; 0x22
 8004e06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2228      	movs	r2, #40	; 0x28
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff f997 	bl	8004144 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004e16:	bf00      	nop
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d012      	beq.n	8004e56 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691a      	ldr	r2, [r3, #16]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr

08004e60 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e7a:	2b28      	cmp	r3, #40	; 0x28
 8004e7c:	d127      	bne.n	8004ece <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685a      	ldr	r2, [r3, #4]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e8c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	089b      	lsrs	r3, r3, #2
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	09db      	lsrs	r3, r3, #7
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d103      	bne.n	8004eb2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	81bb      	strh	r3, [r7, #12]
 8004eb0:	e002      	b.n	8004eb8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004ec0:	89ba      	ldrh	r2, [r7, #12]
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7ff f945 	bl	8004156 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004ecc:	e00e      	b.n	8004eec <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60bb      	str	r3, [r7, #8]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	60bb      	str	r3, [r7, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	60bb      	str	r3, [r7, #8]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004eec:	bf00      	nop
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f02:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f12:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004f14:	2300      	movs	r3, #0
 8004f16:	60bb      	str	r3, [r7, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	60bb      	str	r3, [r7, #8]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f40:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f50:	d172      	bne.n	8005038 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
 8004f54:	2b22      	cmp	r3, #34	; 0x22
 8004f56:	d002      	beq.n	8004f5e <I2C_Slave_STOPF+0x6a>
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f5c:	d135      	bne.n	8004fca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d005      	beq.n	8004f82 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	f043 0204 	orr.w	r2, r3, #4
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f90:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fe f95a 	bl	8003250 <HAL_DMA_GetState>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d049      	beq.n	8005036 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa6:	4a69      	ldr	r2, [pc, #420]	; (800514c <I2C_Slave_STOPF+0x258>)
 8004fa8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fd fe0a 	bl	8002bc8 <HAL_DMA_Abort_IT>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d03d      	beq.n	8005036 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fc8:	e035      	b.n	8005036 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d005      	beq.n	8004fee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	f043 0204 	orr.w	r2, r3, #4
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ffc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005002:	4618      	mov	r0, r3
 8005004:	f7fe f924 	bl	8003250 <HAL_DMA_GetState>
 8005008:	4603      	mov	r3, r0
 800500a:	2b01      	cmp	r3, #1
 800500c:	d014      	beq.n	8005038 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005012:	4a4e      	ldr	r2, [pc, #312]	; (800514c <I2C_Slave_STOPF+0x258>)
 8005014:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501a:	4618      	mov	r0, r3
 800501c:	f7fd fdd4 	bl	8002bc8 <HAL_DMA_Abort_IT>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d008      	beq.n	8005038 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005030:	4610      	mov	r0, r2
 8005032:	4798      	blx	r3
 8005034:	e000      	b.n	8005038 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005036:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503c:	b29b      	uxth	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d03e      	beq.n	80050c0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b04      	cmp	r3, #4
 800504e:	d112      	bne.n	8005076 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691a      	ldr	r2, [r3, #16]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005080:	2b40      	cmp	r3, #64	; 0x40
 8005082:	d112      	bne.n	80050aa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691a      	ldr	r2, [r3, #16]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d005      	beq.n	80050c0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b8:	f043 0204 	orr.w	r2, r3, #4
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f843 	bl	8005154 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80050ce:	e039      	b.n	8005144 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
 80050d2:	2b2a      	cmp	r3, #42	; 0x2a
 80050d4:	d109      	bne.n	80050ea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2228      	movs	r2, #40	; 0x28
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7ff f82d 	bl	8004144 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b28      	cmp	r3, #40	; 0x28
 80050f4:	d111      	bne.n	800511a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a15      	ldr	r2, [pc, #84]	; (8005150 <I2C_Slave_STOPF+0x25c>)
 80050fa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7ff f82c 	bl	8004170 <HAL_I2C_ListenCpltCallback>
}
 8005118:	e014      	b.n	8005144 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	2b22      	cmp	r3, #34	; 0x22
 8005120:	d002      	beq.n	8005128 <I2C_Slave_STOPF+0x234>
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	2b22      	cmp	r3, #34	; 0x22
 8005126:	d10d      	bne.n	8005144 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7ff f800 	bl	8004144 <HAL_I2C_SlaveRxCpltCallback>
}
 8005144:	bf00      	nop
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	080058cd 	.word	0x080058cd
 8005150:	ffff0000 	.word	0xffff0000

08005154 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005162:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800516a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800516c:	7bbb      	ldrb	r3, [r7, #14]
 800516e:	2b10      	cmp	r3, #16
 8005170:	d002      	beq.n	8005178 <I2C_ITError+0x24>
 8005172:	7bbb      	ldrb	r3, [r7, #14]
 8005174:	2b40      	cmp	r3, #64	; 0x40
 8005176:	d10a      	bne.n	800518e <I2C_ITError+0x3a>
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	2b22      	cmp	r3, #34	; 0x22
 800517c:	d107      	bne.n	800518e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800518c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800518e:	7bfb      	ldrb	r3, [r7, #15]
 8005190:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005194:	2b28      	cmp	r3, #40	; 0x28
 8005196:	d107      	bne.n	80051a8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2228      	movs	r2, #40	; 0x28
 80051a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80051a6:	e015      	b.n	80051d4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051b6:	d00a      	beq.n	80051ce <I2C_ITError+0x7a>
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
 80051ba:	2b60      	cmp	r3, #96	; 0x60
 80051bc:	d007      	beq.n	80051ce <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051e2:	d162      	bne.n	80052aa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051f2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d020      	beq.n	8005244 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005206:	4a6a      	ldr	r2, [pc, #424]	; (80053b0 <I2C_ITError+0x25c>)
 8005208:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520e:	4618      	mov	r0, r3
 8005210:	f7fd fcda 	bl	8002bc8 <HAL_DMA_Abort_IT>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 8089 	beq.w	800532e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0201 	bic.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800523e:	4610      	mov	r0, r2
 8005240:	4798      	blx	r3
 8005242:	e074      	b.n	800532e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005248:	4a59      	ldr	r2, [pc, #356]	; (80053b0 <I2C_ITError+0x25c>)
 800524a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	4618      	mov	r0, r3
 8005252:	f7fd fcb9 	bl	8002bc8 <HAL_DMA_Abort_IT>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d068      	beq.n	800532e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005266:	2b40      	cmp	r3, #64	; 0x40
 8005268:	d10b      	bne.n	8005282 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0201 	bic.w	r2, r2, #1
 8005290:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2220      	movs	r2, #32
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052a4:	4610      	mov	r0, r2
 80052a6:	4798      	blx	r3
 80052a8:	e041      	b.n	800532e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b60      	cmp	r3, #96	; 0x60
 80052b4:	d125      	bne.n	8005302 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ce:	2b40      	cmp	r3, #64	; 0x40
 80052d0:	d10b      	bne.n	80052ea <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	691a      	ldr	r2, [r3, #16]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0201 	bic.w	r2, r2, #1
 80052f8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fe ff53 	bl	80041a6 <HAL_I2C_AbortCpltCallback>
 8005300:	e015      	b.n	800532e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530c:	2b40      	cmp	r3, #64	; 0x40
 800530e:	d10b      	bne.n	8005328 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691a      	ldr	r2, [r3, #16]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7fe ff33 	bl	8004194 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10e      	bne.n	800535c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005344:	2b00      	cmp	r3, #0
 8005346:	d109      	bne.n	800535c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800534e:	2b00      	cmp	r3, #0
 8005350:	d104      	bne.n	800535c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800536a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005372:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b04      	cmp	r3, #4
 800537e:	d113      	bne.n	80053a8 <I2C_ITError+0x254>
 8005380:	7bfb      	ldrb	r3, [r7, #15]
 8005382:	2b28      	cmp	r3, #40	; 0x28
 8005384:	d110      	bne.n	80053a8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a0a      	ldr	r2, [pc, #40]	; (80053b4 <I2C_ITError+0x260>)
 800538a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2220      	movs	r2, #32
 8005396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7fe fee4 	bl	8004170 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053a8:	bf00      	nop
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	080058cd 	.word	0x080058cd
 80053b4:	ffff0000 	.word	0xffff0000

080053b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af02      	add	r7, sp, #8
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	4608      	mov	r0, r1
 80053c2:	4611      	mov	r1, r2
 80053c4:	461a      	mov	r2, r3
 80053c6:	4603      	mov	r3, r0
 80053c8:	817b      	strh	r3, [r7, #10]
 80053ca:	460b      	mov	r3, r1
 80053cc:	813b      	strh	r3, [r7, #8]
 80053ce:	4613      	mov	r3, r2
 80053d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f000 fb14 	bl	8005a1c <I2C_WaitOnFlagUntilTimeout>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00d      	beq.n	8005416 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005408:	d103      	bne.n	8005412 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005410:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e05f      	b.n	80054d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005416:	897b      	ldrh	r3, [r7, #10]
 8005418:	b2db      	uxtb	r3, r3
 800541a:	461a      	mov	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005424:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	6a3a      	ldr	r2, [r7, #32]
 800542a:	492d      	ldr	r1, [pc, #180]	; (80054e0 <I2C_RequestMemoryWrite+0x128>)
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 fb6f 	bl	8005b10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e04c      	b.n	80054d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800543c:	2300      	movs	r3, #0
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	617b      	str	r3, [r7, #20]
 8005450:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005454:	6a39      	ldr	r1, [r7, #32]
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 fbfa 	bl	8005c50 <I2C_WaitOnTXEFlagUntilTimeout>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00d      	beq.n	800547e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	2b04      	cmp	r3, #4
 8005468:	d107      	bne.n	800547a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005478:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e02b      	b.n	80054d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800547e:	88fb      	ldrh	r3, [r7, #6]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d105      	bne.n	8005490 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005484:	893b      	ldrh	r3, [r7, #8]
 8005486:	b2da      	uxtb	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	611a      	str	r2, [r3, #16]
 800548e:	e021      	b.n	80054d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005490:	893b      	ldrh	r3, [r7, #8]
 8005492:	0a1b      	lsrs	r3, r3, #8
 8005494:	b29b      	uxth	r3, r3
 8005496:	b2da      	uxtb	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800549e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a0:	6a39      	ldr	r1, [r7, #32]
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 fbd4 	bl	8005c50 <I2C_WaitOnTXEFlagUntilTimeout>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00d      	beq.n	80054ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d107      	bne.n	80054c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e005      	b.n	80054d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054ca:	893b      	ldrh	r3, [r7, #8]
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	00010002 	.word	0x00010002

080054e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b088      	sub	sp, #32
 80054e8:	af02      	add	r7, sp, #8
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	4608      	mov	r0, r1
 80054ee:	4611      	mov	r1, r2
 80054f0:	461a      	mov	r2, r3
 80054f2:	4603      	mov	r3, r0
 80054f4:	817b      	strh	r3, [r7, #10]
 80054f6:	460b      	mov	r3, r1
 80054f8:	813b      	strh	r3, [r7, #8]
 80054fa:	4613      	mov	r3, r2
 80054fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800550c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800551c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	9300      	str	r3, [sp, #0]
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	2200      	movs	r2, #0
 8005526:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 fa76 	bl	8005a1c <I2C_WaitOnFlagUntilTimeout>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00d      	beq.n	8005552 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005544:	d103      	bne.n	800554e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800554c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e0aa      	b.n	80056a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005552:	897b      	ldrh	r3, [r7, #10]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	461a      	mov	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005560:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005564:	6a3a      	ldr	r2, [r7, #32]
 8005566:	4952      	ldr	r1, [pc, #328]	; (80056b0 <I2C_RequestMemoryRead+0x1cc>)
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 fad1 	bl	8005b10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e097      	b.n	80056a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005578:	2300      	movs	r3, #0
 800557a:	617b      	str	r3, [r7, #20]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800558e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005590:	6a39      	ldr	r1, [r7, #32]
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 fb5c 	bl	8005c50 <I2C_WaitOnTXEFlagUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00d      	beq.n	80055ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d107      	bne.n	80055b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e076      	b.n	80056a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d105      	bne.n	80055cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055c0:	893b      	ldrh	r3, [r7, #8]
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	611a      	str	r2, [r3, #16]
 80055ca:	e021      	b.n	8005610 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055cc:	893b      	ldrh	r3, [r7, #8]
 80055ce:	0a1b      	lsrs	r3, r3, #8
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055dc:	6a39      	ldr	r1, [r7, #32]
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f000 fb36 	bl	8005c50 <I2C_WaitOnTXEFlagUntilTimeout>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00d      	beq.n	8005606 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d107      	bne.n	8005602 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005600:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e050      	b.n	80056a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005606:	893b      	ldrh	r3, [r7, #8]
 8005608:	b2da      	uxtb	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005612:	6a39      	ldr	r1, [r7, #32]
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 fb1b 	bl	8005c50 <I2C_WaitOnTXEFlagUntilTimeout>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00d      	beq.n	800563c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005624:	2b04      	cmp	r3, #4
 8005626:	d107      	bne.n	8005638 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005636:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e035      	b.n	80056a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800564a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	2200      	movs	r2, #0
 8005654:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 f9df 	bl	8005a1c <I2C_WaitOnFlagUntilTimeout>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00d      	beq.n	8005680 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005672:	d103      	bne.n	800567c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800567a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e013      	b.n	80056a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005680:	897b      	ldrh	r3, [r7, #10]
 8005682:	b2db      	uxtb	r3, r3
 8005684:	f043 0301 	orr.w	r3, r3, #1
 8005688:	b2da      	uxtb	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	6a3a      	ldr	r2, [r7, #32]
 8005694:	4906      	ldr	r1, [pc, #24]	; (80056b0 <I2C_RequestMemoryRead+0x1cc>)
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 fa3a 	bl	8005b10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d001      	beq.n	80056a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	00010002 	.word	0x00010002

080056b4 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056d0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80056e6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f4:	2200      	movs	r2, #0
 80056f6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005704:	2200      	movs	r2, #0
 8005706:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005708:	7cfb      	ldrb	r3, [r7, #19]
 800570a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800570e:	2b21      	cmp	r3, #33	; 0x21
 8005710:	d007      	beq.n	8005722 <I2C_DMAXferCplt+0x6e>
 8005712:	7cfb      	ldrb	r3, [r7, #19]
 8005714:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005718:	2b22      	cmp	r3, #34	; 0x22
 800571a:	d131      	bne.n	8005780 <I2C_DMAXferCplt+0xcc>
 800571c:	7cbb      	ldrb	r3, [r7, #18]
 800571e:	2b20      	cmp	r3, #32
 8005720:	d12e      	bne.n	8005780 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005730:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2200      	movs	r2, #0
 8005736:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005738:	7cfb      	ldrb	r3, [r7, #19]
 800573a:	2b29      	cmp	r3, #41	; 0x29
 800573c:	d10a      	bne.n	8005754 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2221      	movs	r2, #33	; 0x21
 8005742:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	2228      	movs	r2, #40	; 0x28
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800574c:	6978      	ldr	r0, [r7, #20]
 800574e:	f7fe fcf0 	bl	8004132 <HAL_I2C_SlaveTxCpltCallback>
 8005752:	e00c      	b.n	800576e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005754:	7cfb      	ldrb	r3, [r7, #19]
 8005756:	2b2a      	cmp	r3, #42	; 0x2a
 8005758:	d109      	bne.n	800576e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	2222      	movs	r2, #34	; 0x22
 800575e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	2228      	movs	r2, #40	; 0x28
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005768:	6978      	ldr	r0, [r7, #20]
 800576a:	f7fe fceb 	bl	8004144 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800577c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800577e:	e06a      	b.n	8005856 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d064      	beq.n	8005856 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b01      	cmp	r3, #1
 8005794:	d107      	bne.n	80057a6 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057a4:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80057b4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057bc:	d009      	beq.n	80057d2 <I2C_DMAXferCplt+0x11e>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d006      	beq.n	80057d2 <I2C_DMAXferCplt+0x11e>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80057ca:	d002      	beq.n	80057d2 <I2C_DMAXferCplt+0x11e>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2b20      	cmp	r3, #32
 80057d0:	d107      	bne.n	80057e2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057f0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005800:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2200      	movs	r2, #0
 8005806:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	d003      	beq.n	8005818 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005810:	6978      	ldr	r0, [r7, #20]
 8005812:	f7fe fcbf 	bl	8004194 <HAL_I2C_ErrorCallback>
}
 8005816:	e01e      	b.n	8005856 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b40      	cmp	r3, #64	; 0x40
 800582a:	d10a      	bne.n	8005842 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	2200      	movs	r2, #0
 8005838:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800583a:	6978      	ldr	r0, [r7, #20]
 800583c:	f7fe fca1 	bl	8004182 <HAL_I2C_MemRxCpltCallback>
}
 8005840:	e009      	b.n	8005856 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2212      	movs	r2, #18
 800584e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005850:	6978      	ldr	r0, [r7, #20]
 8005852:	f7fe fc65 	bl	8004120 <HAL_I2C_MasterRxCpltCallback>
}
 8005856:	bf00      	nop
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b084      	sub	sp, #16
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005878:	2200      	movs	r2, #0
 800587a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005888:	2200      	movs	r2, #0
 800588a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800589a:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	f043 0210 	orr.w	r2, r3, #16
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f7fe fc68 	bl	8004194 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80058c4:	bf00      	nop
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80058e6:	4b4b      	ldr	r3, [pc, #300]	; (8005a14 <I2C_DMAAbort+0x148>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	08db      	lsrs	r3, r3, #3
 80058ec:	4a4a      	ldr	r2, [pc, #296]	; (8005a18 <I2C_DMAAbort+0x14c>)
 80058ee:	fba2 2303 	umull	r2, r3, r2, r3
 80058f2:	0a1a      	lsrs	r2, r3, #8
 80058f4:	4613      	mov	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	00da      	lsls	r2, r3, #3
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d106      	bne.n	8005914 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	f043 0220 	orr.w	r2, r3, #32
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005912:	e00a      	b.n	800592a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	3b01      	subs	r3, #1
 8005918:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005928:	d0ea      	beq.n	8005900 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005936:	2200      	movs	r2, #0
 8005938:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	2200      	movs	r2, #0
 8005948:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005958:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	2200      	movs	r2, #0
 800595e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596c:	2200      	movs	r2, #0
 800596e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597c:	2200      	movs	r2, #0
 800597e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0201 	bic.w	r2, r2, #1
 800598e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b60      	cmp	r3, #96	; 0x60
 800599a:	d10e      	bne.n	80059ba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	2200      	movs	r2, #0
 80059b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80059b2:	6978      	ldr	r0, [r7, #20]
 80059b4:	f7fe fbf7 	bl	80041a6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80059b8:	e027      	b.n	8005a0a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80059ba:	7cfb      	ldrb	r3, [r7, #19]
 80059bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80059c0:	2b28      	cmp	r3, #40	; 0x28
 80059c2:	d117      	bne.n	80059f4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	2200      	movs	r2, #0
 80059e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2228      	movs	r2, #40	; 0x28
 80059ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80059f2:	e007      	b.n	8005a04 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005a04:	6978      	ldr	r0, [r7, #20]
 8005a06:	f7fe fbc5 	bl	8004194 <HAL_I2C_ErrorCallback>
}
 8005a0a:	bf00      	nop
 8005a0c:	3718      	adds	r7, #24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20000048 	.word	0x20000048
 8005a18:	14f8b589 	.word	0x14f8b589

08005a1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a2c:	e048      	b.n	8005ac0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a34:	d044      	beq.n	8005ac0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a36:	f7fc fc91 	bl	800235c <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d302      	bcc.n	8005a4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d139      	bne.n	8005ac0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	0c1b      	lsrs	r3, r3, #16
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d10d      	bne.n	8005a72 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	43da      	mvns	r2, r3
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	4013      	ands	r3, r2
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	bf0c      	ite	eq
 8005a68:	2301      	moveq	r3, #1
 8005a6a:	2300      	movne	r3, #0
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	461a      	mov	r2, r3
 8005a70:	e00c      	b.n	8005a8c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	43da      	mvns	r2, r3
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	bf0c      	ite	eq
 8005a84:	2301      	moveq	r3, #1
 8005a86:	2300      	movne	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	79fb      	ldrb	r3, [r7, #7]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d116      	bne.n	8005ac0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aac:	f043 0220 	orr.w	r2, r3, #32
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e023      	b.n	8005b08 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	0c1b      	lsrs	r3, r3, #16
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d10d      	bne.n	8005ae6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	43da      	mvns	r2, r3
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	bf0c      	ite	eq
 8005adc:	2301      	moveq	r3, #1
 8005ade:	2300      	movne	r3, #0
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	e00c      	b.n	8005b00 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	43da      	mvns	r2, r3
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	4013      	ands	r3, r2
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	bf0c      	ite	eq
 8005af8:	2301      	moveq	r3, #1
 8005afa:	2300      	movne	r3, #0
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	461a      	mov	r2, r3
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d093      	beq.n	8005a2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b1e:	e071      	b.n	8005c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b2e:	d123      	bne.n	8005b78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b3e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b64:	f043 0204 	orr.w	r2, r3, #4
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e067      	b.n	8005c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7e:	d041      	beq.n	8005c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b80:	f7fc fbec 	bl	800235c <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d302      	bcc.n	8005b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d136      	bne.n	8005c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	0c1b      	lsrs	r3, r3, #16
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d10c      	bne.n	8005bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	43da      	mvns	r2, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4013      	ands	r3, r2
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	bf14      	ite	ne
 8005bb2:	2301      	movne	r3, #1
 8005bb4:	2300      	moveq	r3, #0
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	e00b      	b.n	8005bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	43da      	mvns	r2, r3
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	bf14      	ite	ne
 8005bcc:	2301      	movne	r3, #1
 8005bce:	2300      	moveq	r3, #0
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d016      	beq.n	8005c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	f043 0220 	orr.w	r2, r3, #32
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e021      	b.n	8005c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	0c1b      	lsrs	r3, r3, #16
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d10c      	bne.n	8005c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	695b      	ldr	r3, [r3, #20]
 8005c14:	43da      	mvns	r2, r3
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	bf14      	ite	ne
 8005c20:	2301      	movne	r3, #1
 8005c22:	2300      	moveq	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	e00b      	b.n	8005c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	43da      	mvns	r2, r3
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4013      	ands	r3, r2
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	bf14      	ite	ne
 8005c3a:	2301      	movne	r3, #1
 8005c3c:	2300      	moveq	r3, #0
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f47f af6d 	bne.w	8005b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c5c:	e034      	b.n	8005cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f000 f8b8 	bl	8005dd4 <I2C_IsAcknowledgeFailed>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e034      	b.n	8005cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c74:	d028      	beq.n	8005cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c76:	f7fc fb71 	bl	800235c <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d302      	bcc.n	8005c8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d11d      	bne.n	8005cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c96:	2b80      	cmp	r3, #128	; 0x80
 8005c98:	d016      	beq.n	8005cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb4:	f043 0220 	orr.w	r2, r3, #32
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e007      	b.n	8005cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd2:	2b80      	cmp	r3, #128	; 0x80
 8005cd4:	d1c3      	bne.n	8005c5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005cec:	e034      	b.n	8005d58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 f870 	bl	8005dd4 <I2C_IsAcknowledgeFailed>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e034      	b.n	8005d68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d04:	d028      	beq.n	8005d58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d06:	f7fc fb29 	bl	800235c <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d302      	bcc.n	8005d1c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d11d      	bne.n	8005d58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	f003 0304 	and.w	r3, r3, #4
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d016      	beq.n	8005d58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2220      	movs	r2, #32
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d44:	f043 0220 	orr.w	r2, r3, #32
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e007      	b.n	8005d68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	f003 0304 	and.w	r3, r3, #4
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d1c3      	bne.n	8005cee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d7c:	4b13      	ldr	r3, [pc, #76]	; (8005dcc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	08db      	lsrs	r3, r3, #3
 8005d82:	4a13      	ldr	r2, [pc, #76]	; (8005dd0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005d84:	fba2 2303 	umull	r2, r3, r2, r3
 8005d88:	0a1a      	lsrs	r2, r3, #8
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3b01      	subs	r3, #1
 8005d96:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d107      	bne.n	8005dae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da2:	f043 0220 	orr.w	r2, r3, #32
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e008      	b.n	8005dc0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dbc:	d0e9      	beq.n	8005d92 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bc80      	pop	{r7}
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	20000048 	.word	0x20000048
 8005dd0:	14f8b589 	.word	0x14f8b589

08005dd4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dea:	d11b      	bne.n	8005e24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005df4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e10:	f043 0204 	orr.w	r2, r3, #4
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e000      	b.n	8005e26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bc80      	pop	{r7}
 8005e2e:	4770      	bx	lr

08005e30 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005e40:	d103      	bne.n	8005e4a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005e48:	e007      	b.n	8005e5a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005e52:	d102      	bne.n	8005e5a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2208      	movs	r2, #8
 8005e58:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bc80      	pop	{r7}
 8005e62:	4770      	bx	lr

08005e64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e66:	b08b      	sub	sp, #44	; 0x2c
 8005e68:	af06      	add	r7, sp, #24
 8005e6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e0f1      	b.n	800605a <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d106      	bne.n	8005e90 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f007 fb4c 	bl	800d528 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2203      	movs	r2, #3
 8005e94:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f003 fa51 	bl	8009344 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	687e      	ldr	r6, [r7, #4]
 8005eaa:	466d      	mov	r5, sp
 8005eac:	f106 0410 	add.w	r4, r6, #16
 8005eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	602b      	str	r3, [r5, #0]
 8005eb8:	1d33      	adds	r3, r6, #4
 8005eba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ebc:	6838      	ldr	r0, [r7, #0]
 8005ebe:	f003 fa1b 	bl	80092f8 <USB_CoreInit>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e0c2      	b.n	800605a <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2100      	movs	r1, #0
 8005eda:	4618      	mov	r0, r3
 8005edc:	f003 fa4c 	bl	8009378 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	73fb      	strb	r3, [r7, #15]
 8005ee4:	e040      	b.n	8005f68 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
 8005ee8:	6879      	ldr	r1, [r7, #4]
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	4613      	mov	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	440b      	add	r3, r1
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	2201      	movs	r2, #1
 8005efa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	6879      	ldr	r1, [r7, #4]
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	4613      	mov	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	440b      	add	r3, r1
 8005f0c:	7bfa      	ldrb	r2, [r7, #15]
 8005f0e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
 8005f12:	6879      	ldr	r1, [r7, #4]
 8005f14:	1c5a      	adds	r2, r3, #1
 8005f16:	4613      	mov	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	440b      	add	r3, r1
 8005f20:	3303      	adds	r3, #3
 8005f22:	2200      	movs	r2, #0
 8005f24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005f26:	7bfa      	ldrb	r2, [r7, #15]
 8005f28:	6879      	ldr	r1, [r7, #4]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	00db      	lsls	r3, r3, #3
 8005f32:	440b      	add	r3, r1
 8005f34:	3338      	adds	r3, #56	; 0x38
 8005f36:	2200      	movs	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005f3a:	7bfa      	ldrb	r2, [r7, #15]
 8005f3c:	6879      	ldr	r1, [r7, #4]
 8005f3e:	4613      	mov	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	00db      	lsls	r3, r3, #3
 8005f46:	440b      	add	r3, r1
 8005f48:	333c      	adds	r3, #60	; 0x3c
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005f4e:	7bfa      	ldrb	r2, [r7, #15]
 8005f50:	6879      	ldr	r1, [r7, #4]
 8005f52:	4613      	mov	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4413      	add	r3, r2
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	440b      	add	r3, r1
 8005f5c:	3340      	adds	r3, #64	; 0x40
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	3301      	adds	r3, #1
 8005f66:	73fb      	strb	r3, [r7, #15]
 8005f68:	7bfa      	ldrb	r2, [r7, #15]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d3b9      	bcc.n	8005ee6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f72:	2300      	movs	r3, #0
 8005f74:	73fb      	strb	r3, [r7, #15]
 8005f76:	e044      	b.n	8006002 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005f78:	7bfa      	ldrb	r2, [r7, #15]
 8005f7a:	6879      	ldr	r1, [r7, #4]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	440b      	add	r3, r1
 8005f86:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005f8e:	7bfa      	ldrb	r2, [r7, #15]
 8005f90:	6879      	ldr	r1, [r7, #4]
 8005f92:	4613      	mov	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	440b      	add	r3, r1
 8005f9c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005fa0:	7bfa      	ldrb	r2, [r7, #15]
 8005fa2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005fa4:	7bfa      	ldrb	r2, [r7, #15]
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	440b      	add	r3, r1
 8005fb2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005fba:	7bfa      	ldrb	r2, [r7, #15]
 8005fbc:	6879      	ldr	r1, [r7, #4]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	00db      	lsls	r3, r3, #3
 8005fc6:	440b      	add	r3, r1
 8005fc8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005fd0:	7bfa      	ldrb	r2, [r7, #15]
 8005fd2:	6879      	ldr	r1, [r7, #4]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	440b      	add	r3, r1
 8005fde:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005fe6:	7bfa      	ldrb	r2, [r7, #15]
 8005fe8:	6879      	ldr	r1, [r7, #4]
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	440b      	add	r3, r1
 8005ff4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
 8005ffe:	3301      	adds	r3, #1
 8006000:	73fb      	strb	r3, [r7, #15]
 8006002:	7bfa      	ldrb	r2, [r7, #15]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	429a      	cmp	r2, r3
 800600a:	d3b5      	bcc.n	8005f78 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	603b      	str	r3, [r7, #0]
 8006012:	687e      	ldr	r6, [r7, #4]
 8006014:	466d      	mov	r5, sp
 8006016:	f106 0410 	add.w	r4, r6, #16
 800601a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800601c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	602b      	str	r3, [r5, #0]
 8006022:	1d33      	adds	r3, r6, #4
 8006024:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006026:	6838      	ldr	r0, [r7, #0]
 8006028:	f003 f9b2 	bl	8009390 <USB_DevInit>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d005      	beq.n	800603e <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2202      	movs	r2, #2
 8006036:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e00d      	b.n	800605a <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4618      	mov	r0, r3
 8006054:	f005 fc33 	bl	800b8be <USB_DevDisconnect>

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006062 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b082      	sub	sp, #8
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_PCD_Start+0x16>
 8006074:	2302      	movs	r3, #2
 8006076:	e016      	b.n	80060a6 <HAL_PCD_Start+0x44>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4618      	mov	r0, r3
 8006086:	f003 f947 	bl	8009318 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800608a:	2101      	movs	r1, #1
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f007 fcb6 	bl	800d9fe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4618      	mov	r0, r3
 8006098:	f005 fc07 	bl	800b8aa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b088      	sub	sp, #32
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f005 fc09 	bl	800b8d2 <USB_ReadInterrupts>
 80060c0:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 fb1b 	bl	8006708 <PCD_EP_ISR_Handler>

    return;
 80060d2:	e119      	b.n	8006308 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d013      	beq.n	8006106 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060f0:	b292      	uxth	r2, r2
 80060f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f007 fa89 	bl	800d60e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80060fc:	2100      	movs	r1, #0
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f905 	bl	800630e <HAL_PCD_SetAddress>

    return;
 8006104:	e100      	b.n	8006308 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00c      	beq.n	800612a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006118:	b29a      	uxth	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006122:	b292      	uxth	r2, r2
 8006124:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006128:	e0ee      	b.n	8006308 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00c      	beq.n	800614e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800613c:	b29a      	uxth	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006146:	b292      	uxth	r2, r2
 8006148:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800614c:	e0dc      	b.n	8006308 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d027      	beq.n	80061a8 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006160:	b29a      	uxth	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0204 	bic.w	r2, r2, #4
 800616a:	b292      	uxth	r2, r2
 800616c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006178:	b29a      	uxth	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0208 	bic.w	r2, r2, #8
 8006182:	b292      	uxth	r2, r2
 8006184:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f007 fa79 	bl	800d680 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006196:	b29a      	uxth	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061a0:	b292      	uxth	r2, r2
 80061a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80061a6:	e0af      	b.n	8006308 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 8083 	beq.w	80062ba <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80061b4:	2300      	movs	r3, #0
 80061b6:	77fb      	strb	r3, [r7, #31]
 80061b8:	e010      	b.n	80061dc <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	7ffb      	ldrb	r3, [r7, #31]
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	441a      	add	r2, r3
 80061c6:	7ffb      	ldrb	r3, [r7, #31]
 80061c8:	8812      	ldrh	r2, [r2, #0]
 80061ca:	b292      	uxth	r2, r2
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	3320      	adds	r3, #32
 80061d0:	443b      	add	r3, r7
 80061d2:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80061d6:	7ffb      	ldrb	r3, [r7, #31]
 80061d8:	3301      	adds	r3, #1
 80061da:	77fb      	strb	r3, [r7, #31]
 80061dc:	7ffb      	ldrb	r3, [r7, #31]
 80061de:	2b07      	cmp	r3, #7
 80061e0:	d9eb      	bls.n	80061ba <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f042 0201 	orr.w	r2, r2, #1
 80061f4:	b292      	uxth	r2, r2
 80061f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006202:	b29a      	uxth	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0201 	bic.w	r2, r2, #1
 800620c:	b292      	uxth	r2, r2
 800620e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8006212:	bf00      	nop
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800621c:	b29b      	uxth	r3, r3
 800621e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0f6      	beq.n	8006214 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800622e:	b29a      	uxth	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006238:	b292      	uxth	r2, r2
 800623a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800623e:	2300      	movs	r3, #0
 8006240:	77fb      	strb	r3, [r7, #31]
 8006242:	e00f      	b.n	8006264 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8006244:	7ffb      	ldrb	r3, [r7, #31]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6812      	ldr	r2, [r2, #0]
 800624a:	4611      	mov	r1, r2
 800624c:	7ffa      	ldrb	r2, [r7, #31]
 800624e:	0092      	lsls	r2, r2, #2
 8006250:	440a      	add	r2, r1
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	3320      	adds	r3, #32
 8006256:	443b      	add	r3, r7
 8006258:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800625c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800625e:	7ffb      	ldrb	r3, [r7, #31]
 8006260:	3301      	adds	r3, #1
 8006262:	77fb      	strb	r3, [r7, #31]
 8006264:	7ffb      	ldrb	r3, [r7, #31]
 8006266:	2b07      	cmp	r3, #7
 8006268:	d9ec      	bls.n	8006244 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006272:	b29a      	uxth	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f042 0208 	orr.w	r2, r2, #8
 800627c:	b292      	uxth	r2, r2
 800627e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800628a:	b29a      	uxth	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006294:	b292      	uxth	r2, r2
 8006296:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f042 0204 	orr.w	r2, r2, #4
 80062ac:	b292      	uxth	r2, r2
 80062ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f007 f9ca 	bl	800d64c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80062b8:	e026      	b.n	8006308 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00f      	beq.n	80062e4 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80062d6:	b292      	uxth	r2, r2
 80062d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f007 f988 	bl	800d5f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80062e2:	e011      	b.n	8006308 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00c      	beq.n	8006308 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006300:	b292      	uxth	r2, r2
 8006302:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006306:	bf00      	nop
  }
}
 8006308:	3720      	adds	r7, #32
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b082      	sub	sp, #8
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	460b      	mov	r3, r1
 8006318:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006320:	2b01      	cmp	r3, #1
 8006322:	d101      	bne.n	8006328 <HAL_PCD_SetAddress+0x1a>
 8006324:	2302      	movs	r3, #2
 8006326:	e013      	b.n	8006350 <HAL_PCD_SetAddress+0x42>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	78fa      	ldrb	r2, [r7, #3]
 8006334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	78fa      	ldrb	r2, [r7, #3]
 800633e:	4611      	mov	r1, r2
 8006340:	4618      	mov	r0, r3
 8006342:	f005 fa9f 	bl	800b884 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	4608      	mov	r0, r1
 8006362:	4611      	mov	r1, r2
 8006364:	461a      	mov	r2, r3
 8006366:	4603      	mov	r3, r0
 8006368:	70fb      	strb	r3, [r7, #3]
 800636a:	460b      	mov	r3, r1
 800636c:	803b      	strh	r3, [r7, #0]
 800636e:	4613      	mov	r3, r2
 8006370:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006376:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800637a:	2b00      	cmp	r3, #0
 800637c:	da0e      	bge.n	800639c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800637e:	78fb      	ldrb	r3, [r7, #3]
 8006380:	f003 0307 	and.w	r3, r3, #7
 8006384:	1c5a      	adds	r2, r3, #1
 8006386:	4613      	mov	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	00db      	lsls	r3, r3, #3
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	4413      	add	r3, r2
 8006392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2201      	movs	r2, #1
 8006398:	705a      	strb	r2, [r3, #1]
 800639a:	e00e      	b.n	80063ba <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800639c:	78fb      	ldrb	r3, [r7, #3]
 800639e:	f003 0207 	and.w	r2, r3, #7
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	4413      	add	r3, r2
 80063b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80063ba:	78fb      	ldrb	r3, [r7, #3]
 80063bc:	f003 0307 	and.w	r3, r3, #7
 80063c0:	b2da      	uxtb	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80063c6:	883a      	ldrh	r2, [r7, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	78ba      	ldrb	r2, [r7, #2]
 80063d0:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80063d2:	78bb      	ldrb	r3, [r7, #2]
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d102      	bne.n	80063de <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_PCD_EP_Open+0x94>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e00e      	b.n	800640a <HAL_PCD_EP_Open+0xb2>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68f9      	ldr	r1, [r7, #12]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f002 ffe8 	bl	80093d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8006408:	7afb      	ldrb	r3, [r7, #11]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b084      	sub	sp, #16
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	460b      	mov	r3, r1
 800641c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800641e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006422:	2b00      	cmp	r3, #0
 8006424:	da0e      	bge.n	8006444 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006426:	78fb      	ldrb	r3, [r7, #3]
 8006428:	f003 0307 	and.w	r3, r3, #7
 800642c:	1c5a      	adds	r2, r3, #1
 800642e:	4613      	mov	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	4413      	add	r3, r2
 800643a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2201      	movs	r2, #1
 8006440:	705a      	strb	r2, [r3, #1]
 8006442:	e00e      	b.n	8006462 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	f003 0207 	and.w	r2, r3, #7
 800644a:	4613      	mov	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	00db      	lsls	r3, r3, #3
 8006452:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	4413      	add	r3, r2
 800645a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006462:	78fb      	ldrb	r3, [r7, #3]
 8006464:	f003 0307 	and.w	r3, r3, #7
 8006468:	b2da      	uxtb	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_PCD_EP_Close+0x6a>
 8006478:	2302      	movs	r3, #2
 800647a:	e00e      	b.n	800649a <HAL_PCD_EP_Close+0x88>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68f9      	ldr	r1, [r7, #12]
 800648a:	4618      	mov	r0, r3
 800648c:	f003 fb60 	bl	8009b50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b086      	sub	sp, #24
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	60f8      	str	r0, [r7, #12]
 80064aa:	607a      	str	r2, [r7, #4]
 80064ac:	603b      	str	r3, [r7, #0]
 80064ae:	460b      	mov	r3, r1
 80064b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064b2:	7afb      	ldrb	r3, [r7, #11]
 80064b4:	f003 0207 	and.w	r2, r3, #7
 80064b8:	4613      	mov	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	00db      	lsls	r3, r3, #3
 80064c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4413      	add	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2200      	movs	r2, #0
 80064da:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2200      	movs	r2, #0
 80064e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064e2:	7afb      	ldrb	r3, [r7, #11]
 80064e4:	f003 0307 	and.w	r3, r3, #7
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6979      	ldr	r1, [r7, #20]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f003 fd17 	bl	8009f28 <USB_EPStartXfer>

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	460b      	mov	r3, r1
 800650e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	f003 0207 	and.w	r2, r3, #7
 8006516:	6879      	ldr	r1, [r7, #4]
 8006518:	4613      	mov	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	00db      	lsls	r3, r3, #3
 8006520:	440b      	add	r3, r1
 8006522:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006526:	681b      	ldr	r3, [r3, #0]
}
 8006528:	4618      	mov	r0, r3
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	bc80      	pop	{r7}
 8006530:	4770      	bx	lr

08006532 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b086      	sub	sp, #24
 8006536:	af00      	add	r7, sp, #0
 8006538:	60f8      	str	r0, [r7, #12]
 800653a:	607a      	str	r2, [r7, #4]
 800653c:	603b      	str	r3, [r7, #0]
 800653e:	460b      	mov	r3, r1
 8006540:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006542:	7afb      	ldrb	r3, [r7, #11]
 8006544:	f003 0307 	and.w	r3, r3, #7
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	4613      	mov	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	00db      	lsls	r3, r3, #3
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	4413      	add	r3, r2
 8006556:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2200      	movs	r2, #0
 8006576:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	2201      	movs	r2, #1
 800657c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800657e:	7afb      	ldrb	r3, [r7, #11]
 8006580:	f003 0307 	and.w	r3, r3, #7
 8006584:	b2da      	uxtb	r2, r3
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6979      	ldr	r1, [r7, #20]
 8006590:	4618      	mov	r0, r3
 8006592:	f003 fcc9 	bl	8009f28 <USB_EPStartXfer>

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3718      	adds	r7, #24
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80065ac:	78fb      	ldrb	r3, [r7, #3]
 80065ae:	f003 0207 	and.w	r2, r3, #7
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d901      	bls.n	80065be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e04c      	b.n	8006658 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80065be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	da0e      	bge.n	80065e4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065c6:	78fb      	ldrb	r3, [r7, #3]
 80065c8:	f003 0307 	and.w	r3, r3, #7
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	00db      	lsls	r3, r3, #3
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	4413      	add	r3, r2
 80065da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2201      	movs	r2, #1
 80065e0:	705a      	strb	r2, [r3, #1]
 80065e2:	e00c      	b.n	80065fe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80065e4:	78fa      	ldrb	r2, [r7, #3]
 80065e6:	4613      	mov	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	00db      	lsls	r3, r3, #3
 80065ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	4413      	add	r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2201      	movs	r2, #1
 8006602:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006604:	78fb      	ldrb	r3, [r7, #3]
 8006606:	f003 0307 	and.w	r3, r3, #7
 800660a:	b2da      	uxtb	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006616:	2b01      	cmp	r3, #1
 8006618:	d101      	bne.n	800661e <HAL_PCD_EP_SetStall+0x7e>
 800661a:	2302      	movs	r3, #2
 800661c:	e01c      	b.n	8006658 <HAL_PCD_EP_SetStall+0xb8>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68f9      	ldr	r1, [r7, #12]
 800662c:	4618      	mov	r0, r3
 800662e:	f005 f82c 	bl	800b68a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006632:	78fb      	ldrb	r3, [r7, #3]
 8006634:	f003 0307 	and.w	r3, r3, #7
 8006638:	2b00      	cmp	r3, #0
 800663a:	d108      	bne.n	800664e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006646:	4619      	mov	r1, r3
 8006648:	4610      	mov	r0, r2
 800664a:	f005 f951 	bl	800b8f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800666c:	78fb      	ldrb	r3, [r7, #3]
 800666e:	f003 020f 	and.w	r2, r3, #15
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	429a      	cmp	r2, r3
 8006678:	d901      	bls.n	800667e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e040      	b.n	8006700 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800667e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006682:	2b00      	cmp	r3, #0
 8006684:	da0e      	bge.n	80066a4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006686:	78fb      	ldrb	r3, [r7, #3]
 8006688:	f003 0307 	and.w	r3, r3, #7
 800668c:	1c5a      	adds	r2, r3, #1
 800668e:	4613      	mov	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	00db      	lsls	r3, r3, #3
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	4413      	add	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2201      	movs	r2, #1
 80066a0:	705a      	strb	r2, [r3, #1]
 80066a2:	e00e      	b.n	80066c2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	f003 0207 	and.w	r2, r3, #7
 80066aa:	4613      	mov	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	00db      	lsls	r3, r3, #3
 80066b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	4413      	add	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	f003 0307 	and.w	r3, r3, #7
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d101      	bne.n	80066e2 <HAL_PCD_EP_ClrStall+0x82>
 80066de:	2302      	movs	r3, #2
 80066e0:	e00e      	b.n	8006700 <HAL_PCD_EP_ClrStall+0xa0>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68f9      	ldr	r1, [r7, #12]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f005 f81a 	bl	800b72a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b096      	sub	sp, #88	; 0x58
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006710:	e3bf      	b.n	8006e92 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800671a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800671e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006722:	b2db      	uxtb	r3, r3
 8006724:	f003 030f 	and.w	r3, r3, #15
 8006728:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800672c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006730:	2b00      	cmp	r3, #0
 8006732:	f040 8179 	bne.w	8006a28 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006736:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800673a:	f003 0310 	and.w	r3, r3, #16
 800673e:	2b00      	cmp	r3, #0
 8006740:	d152      	bne.n	80067e8 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	b29b      	uxth	r3, r3
 800674a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800674e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006752:	81fb      	strh	r3, [r7, #14]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	89fb      	ldrh	r3, [r7, #14]
 800675a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800675e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006762:	b29b      	uxth	r3, r3
 8006764:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3328      	adds	r3, #40	; 0x28
 800676a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006774:	b29b      	uxth	r3, r3
 8006776:	461a      	mov	r2, r3
 8006778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	00db      	lsls	r3, r3, #3
 800677e:	4413      	add	r3, r2
 8006780:	3302      	adds	r3, #2
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	6812      	ldr	r2, [r2, #0]
 8006788:	4413      	add	r3, r2
 800678a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006796:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800679a:	695a      	ldr	r2, [r3, #20]
 800679c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	441a      	add	r2, r3
 80067a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067a4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80067a6:	2100      	movs	r1, #0
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f006 ff08 	bl	800d5be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 836b 	beq.w	8006e92 <PCD_EP_ISR_Handler+0x78a>
 80067bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f040 8366 	bne.w	8006e92 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	b292      	uxth	r2, r2
 80067da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80067e6:	e354      	b.n	8006e92 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80067ee:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80067fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80067fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006802:	2b00      	cmp	r3, #0
 8006804:	d034      	beq.n	8006870 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800680e:	b29b      	uxth	r3, r3
 8006810:	461a      	mov	r2, r3
 8006812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	4413      	add	r3, r2
 800681a:	3306      	adds	r3, #6
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	6812      	ldr	r2, [r2, #0]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800682e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006830:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6818      	ldr	r0, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800683c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800683e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006842:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006844:	b29b      	uxth	r3, r3
 8006846:	f005 f8a3 	bl	800b990 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	b29a      	uxth	r2, r3
 8006852:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006856:	4013      	ands	r3, r2
 8006858:	823b      	strh	r3, [r7, #16]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	8a3a      	ldrh	r2, [r7, #16]
 8006860:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006864:	b292      	uxth	r2, r2
 8006866:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f006 fe7b 	bl	800d564 <HAL_PCD_SetupStageCallback>
 800686e:	e310      	b.n	8006e92 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006870:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006874:	2b00      	cmp	r3, #0
 8006876:	f280 830c 	bge.w	8006e92 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	b29a      	uxth	r2, r3
 8006882:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006886:	4013      	ands	r3, r2
 8006888:	83fb      	strh	r3, [r7, #30]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	8bfa      	ldrh	r2, [r7, #30]
 8006890:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006894:	b292      	uxth	r2, r2
 8006896:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	461a      	mov	r2, r3
 80068a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	00db      	lsls	r3, r3, #3
 80068aa:	4413      	add	r3, r2
 80068ac:	3306      	adds	r3, #6
 80068ae:	005b      	lsls	r3, r3, #1
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	6812      	ldr	r2, [r2, #0]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80068c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068c2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80068c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d019      	beq.n	8006900 <PCD_EP_ISR_Handler+0x1f8>
 80068cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d015      	beq.n	8006900 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6818      	ldr	r0, [r3, #0]
 80068d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068da:	6959      	ldr	r1, [r3, #20]
 80068dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068de:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80068e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068e2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	f005 f853 	bl	800b990 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80068ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068ec:	695a      	ldr	r2, [r3, #20]
 80068ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	441a      	add	r2, r3
 80068f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068f6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80068f8:	2100      	movs	r1, #0
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f006 fe44 	bl	800d588 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800690a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800690e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006912:	2b00      	cmp	r3, #0
 8006914:	f040 82bd 	bne.w	8006e92 <PCD_EP_ISR_Handler+0x78a>
 8006918:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800691c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006920:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006924:	f000 82b5 	beq.w	8006e92 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	61bb      	str	r3, [r7, #24]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006936:	b29b      	uxth	r3, r3
 8006938:	461a      	mov	r2, r3
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	4413      	add	r3, r2
 800693e:	61bb      	str	r3, [r7, #24]
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	b29b      	uxth	r3, r3
 800694e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006952:	b29a      	uxth	r2, r3
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	801a      	strh	r2, [r3, #0]
 8006958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	2b3e      	cmp	r3, #62	; 0x3e
 800695e:	d91d      	bls.n	800699c <PCD_EP_ISR_Handler+0x294>
 8006960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	095b      	lsrs	r3, r3, #5
 8006966:	647b      	str	r3, [r7, #68]	; 0x44
 8006968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	f003 031f 	and.w	r3, r3, #31
 8006970:	2b00      	cmp	r3, #0
 8006972:	d102      	bne.n	800697a <PCD_EP_ISR_Handler+0x272>
 8006974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006976:	3b01      	subs	r3, #1
 8006978:	647b      	str	r3, [r7, #68]	; 0x44
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	b29a      	uxth	r2, r3
 8006980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006982:	b29b      	uxth	r3, r3
 8006984:	029b      	lsls	r3, r3, #10
 8006986:	b29b      	uxth	r3, r3
 8006988:	4313      	orrs	r3, r2
 800698a:	b29b      	uxth	r3, r3
 800698c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006994:	b29a      	uxth	r2, r3
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	801a      	strh	r2, [r3, #0]
 800699a:	e026      	b.n	80069ea <PCD_EP_ISR_Handler+0x2e2>
 800699c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10a      	bne.n	80069ba <PCD_EP_ISR_Handler+0x2b2>
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	801a      	strh	r2, [r3, #0]
 80069b8:	e017      	b.n	80069ea <PCD_EP_ISR_Handler+0x2e2>
 80069ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	085b      	lsrs	r3, r3, #1
 80069c0:	647b      	str	r3, [r7, #68]	; 0x44
 80069c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d002      	beq.n	80069d4 <PCD_EP_ISR_Handler+0x2cc>
 80069ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069d0:	3301      	adds	r3, #1
 80069d2:	647b      	str	r3, [r7, #68]	; 0x44
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	b29a      	uxth	r2, r3
 80069da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069dc:	b29b      	uxth	r3, r3
 80069de:	029b      	lsls	r3, r3, #10
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	4313      	orrs	r3, r2
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fa:	827b      	strh	r3, [r7, #18]
 80069fc:	8a7b      	ldrh	r3, [r7, #18]
 80069fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a02:	827b      	strh	r3, [r7, #18]
 8006a04:	8a7b      	ldrh	r3, [r7, #18]
 8006a06:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a0a:	827b      	strh	r3, [r7, #18]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	8a7b      	ldrh	r3, [r7, #18]
 8006a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	8013      	strh	r3, [r2, #0]
 8006a26:	e234      	b.n	8006e92 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	881b      	ldrh	r3, [r3, #0]
 8006a38:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006a3c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f280 80fc 	bge.w	8006c3e <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006a74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a78:	b292      	uxth	r2, r2
 8006a7a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006a7c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8006a80:	4613      	mov	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	4413      	add	r3, r2
 8006a90:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a94:	7b1b      	ldrb	r3, [r3, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d125      	bne.n	8006ae6 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	00db      	lsls	r3, r3, #3
 8006aac:	4413      	add	r3, r2
 8006aae:	3306      	adds	r3, #6
 8006ab0:	005b      	lsls	r3, r3, #1
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	6812      	ldr	r2, [r2, #0]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ac2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8006ac6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 8092 	beq.w	8006bf4 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6818      	ldr	r0, [r3, #0]
 8006ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ad6:	6959      	ldr	r1, [r3, #20]
 8006ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ada:	88da      	ldrh	r2, [r3, #6]
 8006adc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006ae0:	f004 ff56 	bl	800b990 <USB_ReadPMA>
 8006ae4:	e086      	b.n	8006bf4 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ae8:	78db      	ldrb	r3, [r3, #3]
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d10a      	bne.n	8006b04 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006aee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006af2:	461a      	mov	r2, r3
 8006af4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f9d9 	bl	8006eae <HAL_PCD_EP_DB_Receive>
 8006afc:	4603      	mov	r3, r0
 8006afe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006b02:	e077      	b.n	8006bf4 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	441a      	add	r2, r3
 8006b30:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d024      	beq.n	8006bac <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	00db      	lsls	r3, r3, #3
 8006b74:	4413      	add	r3, r2
 8006b76:	3302      	adds	r3, #2
 8006b78:	005b      	lsls	r3, r3, #1
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	6812      	ldr	r2, [r2, #0]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b84:	881b      	ldrh	r3, [r3, #0]
 8006b86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b8a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8006b8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d02e      	beq.n	8006bf4 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6818      	ldr	r0, [r3, #0]
 8006b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b9c:	6959      	ldr	r1, [r3, #20]
 8006b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ba0:	891a      	ldrh	r2, [r3, #8]
 8006ba2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006ba6:	f004 fef3 	bl	800b990 <USB_ReadPMA>
 8006baa:	e023      	b.n	8006bf4 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	00db      	lsls	r3, r3, #3
 8006bbe:	4413      	add	r3, r2
 8006bc0:	3306      	adds	r3, #6
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	6812      	ldr	r2, [r2, #0]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bd4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8006bd8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d009      	beq.n	8006bf4 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6818      	ldr	r0, [r3, #0]
 8006be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006be6:	6959      	ldr	r1, [r3, #20]
 8006be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bea:	895a      	ldrh	r2, [r3, #10]
 8006bec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006bf0:	f004 fece 	bl	800b990 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bf6:	69da      	ldr	r2, [r3, #28]
 8006bf8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006bfc:	441a      	add	r2, r3
 8006bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c00:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c04:	695a      	ldr	r2, [r3, #20]
 8006c06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006c0a:	441a      	add	r2, r3
 8006c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c0e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c12:	699b      	ldr	r3, [r3, #24]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <PCD_EP_ISR_Handler+0x51c>
 8006c18:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8006c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d206      	bcs.n	8006c32 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f006 fcac 	bl	800d588 <HAL_PCD_DataOutStageCallback>
 8006c30:	e005      	b.n	8006c3e <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f003 f975 	bl	8009f28 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006c3e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f000 8123 	beq.w	8006e92 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8006c4c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006c50:	1c5a      	adds	r2, r3, #1
 8006c52:	4613      	mov	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	461a      	mov	r2, r3
 8006c66:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	461a      	mov	r2, r3
 8006c84:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	441a      	add	r2, r3
 8006c8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c9e:	78db      	ldrb	r3, [r3, #3]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	f040 80a2 	bne.w	8006dea <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8006ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ca8:	2200      	movs	r2, #0
 8006caa:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cae:	7b1b      	ldrb	r3, [r3, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 8093 	beq.w	8006ddc <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006cb6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d046      	beq.n	8006d50 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cc4:	785b      	ldrb	r3, [r3, #1]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d126      	bne.n	8006d18 <PCD_EP_ISR_Handler+0x610>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	461a      	mov	r2, r3
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	4413      	add	r3, r2
 8006ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	011a      	lsls	r2, r3, #4
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	4413      	add	r3, r2
 8006cec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cf0:	623b      	str	r3, [r7, #32]
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	6a3b      	ldr	r3, [r7, #32]
 8006d00:	801a      	strh	r2, [r3, #0]
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	801a      	strh	r2, [r3, #0]
 8006d16:	e061      	b.n	8006ddc <PCD_EP_ISR_Handler+0x6d4>
 8006d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d1a:	785b      	ldrb	r3, [r3, #1]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d15d      	bne.n	8006ddc <PCD_EP_ISR_Handler+0x6d4>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	461a      	mov	r2, r3
 8006d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d34:	4413      	add	r3, r2
 8006d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	011a      	lsls	r2, r3, #4
 8006d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d40:	4413      	add	r3, r2
 8006d42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	801a      	strh	r2, [r3, #0]
 8006d4e:	e045      	b.n	8006ddc <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d58:	785b      	ldrb	r3, [r3, #1]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d126      	bne.n	8006dac <PCD_EP_ISR_Handler+0x6a4>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	637b      	str	r3, [r7, #52]	; 0x34
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	461a      	mov	r2, r3
 8006d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d72:	4413      	add	r3, r2
 8006d74:	637b      	str	r3, [r7, #52]	; 0x34
 8006d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	011a      	lsls	r2, r3, #4
 8006d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d7e:	4413      	add	r3, r2
 8006d80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d84:	633b      	str	r3, [r7, #48]	; 0x30
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d94:	801a      	strh	r2, [r3, #0]
 8006d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006da0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da8:	801a      	strh	r2, [r3, #0]
 8006daa:	e017      	b.n	8006ddc <PCD_EP_ISR_Handler+0x6d4>
 8006dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dae:	785b      	ldrb	r3, [r3, #1]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d113      	bne.n	8006ddc <PCD_EP_ISR_Handler+0x6d4>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc2:	4413      	add	r3, r2
 8006dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	011a      	lsls	r2, r3, #4
 8006dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dce:	4413      	add	r3, r2
 8006dd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd8:	2200      	movs	r2, #0
 8006dda:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	4619      	mov	r1, r3
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f006 fbeb 	bl	800d5be <HAL_PCD_DataInStageCallback>
 8006de8:	e053      	b.n	8006e92 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006dea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d146      	bne.n	8006e84 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	461a      	mov	r2, r3
 8006e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	00db      	lsls	r3, r3, #3
 8006e08:	4413      	add	r3, r2
 8006e0a:	3302      	adds	r3, #2
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	6812      	ldr	r2, [r2, #0]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e18:	881b      	ldrh	r3, [r3, #0]
 8006e1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e1e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e24:	699a      	ldr	r2, [r3, #24]
 8006e26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d907      	bls.n	8006e3e <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8006e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e30:	699a      	ldr	r2, [r3, #24]
 8006e32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006e36:	1ad2      	subs	r2, r2, r3
 8006e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e3a:	619a      	str	r2, [r3, #24]
 8006e3c:	e002      	b.n	8006e44 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8006e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e40:	2200      	movs	r2, #0
 8006e42:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d106      	bne.n	8006e5a <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f006 fbb3 	bl	800d5be <HAL_PCD_DataInStageCallback>
 8006e58:	e01b      	b.n	8006e92 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e5c:	695a      	ldr	r2, [r3, #20]
 8006e5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006e62:	441a      	add	r2, r3
 8006e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e66:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e6a:	69da      	ldr	r2, [r3, #28]
 8006e6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006e70:	441a      	add	r2, r3
 8006e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e74:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f003 f853 	bl	8009f28 <USB_EPStartXfer>
 8006e82:	e006      	b.n	8006e92 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006e84:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006e88:	461a      	mov	r2, r3
 8006e8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f91b 	bl	80070c8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	b21b      	sxth	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f6ff ac37 	blt.w	8006712 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3758      	adds	r7, #88	; 0x58
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b088      	sub	sp, #32
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	60f8      	str	r0, [r7, #12]
 8006eb6:	60b9      	str	r1, [r7, #8]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006ebc:	88fb      	ldrh	r3, [r7, #6]
 8006ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d07e      	beq.n	8006fc4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	00db      	lsls	r3, r3, #3
 8006ed8:	4413      	add	r3, r2
 8006eda:	3302      	adds	r3, #2
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	6812      	ldr	r2, [r2, #0]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006eee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	699a      	ldr	r2, [r3, #24]
 8006ef4:	8b7b      	ldrh	r3, [r7, #26]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d306      	bcc.n	8006f08 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	699a      	ldr	r2, [r3, #24]
 8006efe:	8b7b      	ldrh	r3, [r7, #26]
 8006f00:	1ad2      	subs	r2, r2, r3
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	619a      	str	r2, [r3, #24]
 8006f06:	e002      	b.n	8006f0e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d123      	bne.n	8006f5e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f30:	833b      	strh	r3, [r7, #24]
 8006f32:	8b3b      	ldrh	r3, [r7, #24]
 8006f34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f38:	833b      	strh	r3, [r7, #24]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	441a      	add	r2, r3
 8006f48:	8b3b      	ldrh	r3, [r7, #24]
 8006f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006f5e:	88fb      	ldrh	r3, [r7, #6]
 8006f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d01f      	beq.n	8006fa8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f82:	82fb      	strh	r3, [r7, #22]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	461a      	mov	r2, r3
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	441a      	add	r2, r3
 8006f92:	8afb      	ldrh	r3, [r7, #22]
 8006f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fa0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006fa8:	8b7b      	ldrh	r3, [r7, #26]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f000 8087 	beq.w	80070be <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6818      	ldr	r0, [r3, #0]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	6959      	ldr	r1, [r3, #20]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	891a      	ldrh	r2, [r3, #8]
 8006fbc:	8b7b      	ldrh	r3, [r7, #26]
 8006fbe:	f004 fce7 	bl	800b990 <USB_ReadPMA>
 8006fc2:	e07c      	b.n	80070be <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	461a      	mov	r2, r3
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	00db      	lsls	r3, r3, #3
 8006fd6:	4413      	add	r3, r2
 8006fd8:	3306      	adds	r3, #6
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	6812      	ldr	r2, [r2, #0]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	699a      	ldr	r2, [r3, #24]
 8006ff2:	8b7b      	ldrh	r3, [r7, #26]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d306      	bcc.n	8007006 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	699a      	ldr	r2, [r3, #24]
 8006ffc:	8b7b      	ldrh	r3, [r7, #26]
 8006ffe:	1ad2      	subs	r2, r2, r3
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	619a      	str	r2, [r3, #24]
 8007004:	e002      	b.n	800700c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2200      	movs	r2, #0
 800700a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d123      	bne.n	800705c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	461a      	mov	r2, r3
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4413      	add	r3, r2
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	b29b      	uxth	r3, r3
 8007026:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800702a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800702e:	83fb      	strh	r3, [r7, #30]
 8007030:	8bfb      	ldrh	r3, [r7, #30]
 8007032:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007036:	83fb      	strh	r3, [r7, #30]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	461a      	mov	r2, r3
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	441a      	add	r2, r3
 8007046:	8bfb      	ldrh	r3, [r7, #30]
 8007048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800704c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007058:	b29b      	uxth	r3, r3
 800705a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800705c:	88fb      	ldrh	r3, [r7, #6]
 800705e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007062:	2b00      	cmp	r3, #0
 8007064:	d11f      	bne.n	80070a6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	b29b      	uxth	r3, r3
 8007078:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800707c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007080:	83bb      	strh	r3, [r7, #28]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	461a      	mov	r2, r3
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	441a      	add	r2, r3
 8007090:	8bbb      	ldrh	r3, [r7, #28]
 8007092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800709a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800709e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80070a6:	8b7b      	ldrh	r3, [r7, #26]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d008      	beq.n	80070be <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6818      	ldr	r0, [r3, #0]
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	6959      	ldr	r1, [r3, #20]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	895a      	ldrh	r2, [r3, #10]
 80070b8:	8b7b      	ldrh	r3, [r7, #26]
 80070ba:	f004 fc69 	bl	800b990 <USB_ReadPMA>
    }
  }

  return count;
 80070be:	8b7b      	ldrh	r3, [r7, #26]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3720      	adds	r7, #32
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b0a4      	sub	sp, #144	; 0x90
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	4613      	mov	r3, r2
 80070d4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80070d6:	88fb      	ldrh	r3, [r7, #6]
 80070d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 81dd 	beq.w	800749c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	461a      	mov	r2, r3
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	00db      	lsls	r3, r3, #3
 80070f4:	4413      	add	r3, r2
 80070f6:	3302      	adds	r3, #2
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	6812      	ldr	r2, [r2, #0]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800710a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	699a      	ldr	r2, [r3, #24]
 8007112:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007116:	429a      	cmp	r2, r3
 8007118:	d907      	bls.n	800712a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	699a      	ldr	r2, [r3, #24]
 800711e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007122:	1ad2      	subs	r2, r2, r3
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	619a      	str	r2, [r3, #24]
 8007128:	e002      	b.n	8007130 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	2200      	movs	r2, #0
 800712e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	2b00      	cmp	r3, #0
 8007136:	f040 80b9 	bne.w	80072ac <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	785b      	ldrb	r3, [r3, #1]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d126      	bne.n	8007190 <HAL_PCD_EP_DB_Transmit+0xc8>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007150:	b29b      	uxth	r3, r3
 8007152:	461a      	mov	r2, r3
 8007154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007156:	4413      	add	r3, r2
 8007158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	011a      	lsls	r2, r3, #4
 8007160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007162:	4413      	add	r3, r2
 8007164:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007168:	62bb      	str	r3, [r7, #40]	; 0x28
 800716a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	b29b      	uxth	r3, r3
 8007170:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007174:	b29a      	uxth	r2, r3
 8007176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007178:	801a      	strh	r2, [r3, #0]
 800717a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717c:	881b      	ldrh	r3, [r3, #0]
 800717e:	b29b      	uxth	r3, r3
 8007180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007188:	b29a      	uxth	r2, r3
 800718a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718c:	801a      	strh	r2, [r3, #0]
 800718e:	e01a      	b.n	80071c6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	785b      	ldrb	r3, [r3, #1]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d116      	bne.n	80071c6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	637b      	str	r3, [r7, #52]	; 0x34
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	461a      	mov	r2, r3
 80071aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ac:	4413      	add	r3, r2
 80071ae:	637b      	str	r3, [r7, #52]	; 0x34
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	011a      	lsls	r2, r3, #4
 80071b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b8:	4413      	add	r3, r2
 80071ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80071be:	633b      	str	r3, [r7, #48]	; 0x30
 80071c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c2:	2200      	movs	r2, #0
 80071c4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	627b      	str	r3, [r7, #36]	; 0x24
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	785b      	ldrb	r3, [r3, #1]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d126      	bne.n	8007222 <HAL_PCD_EP_DB_Transmit+0x15a>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	61fb      	str	r3, [r7, #28]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	461a      	mov	r2, r3
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	4413      	add	r3, r2
 80071ea:	61fb      	str	r3, [r7, #28]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	011a      	lsls	r2, r3, #4
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	4413      	add	r3, r2
 80071f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80071fa:	61bb      	str	r3, [r7, #24]
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	b29b      	uxth	r3, r3
 8007202:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007206:	b29a      	uxth	r2, r3
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	801a      	strh	r2, [r3, #0]
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	b29b      	uxth	r3, r3
 8007212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800721a:	b29a      	uxth	r2, r3
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	801a      	strh	r2, [r3, #0]
 8007220:	e017      	b.n	8007252 <HAL_PCD_EP_DB_Transmit+0x18a>
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	785b      	ldrb	r3, [r3, #1]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d113      	bne.n	8007252 <HAL_PCD_EP_DB_Transmit+0x18a>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007232:	b29b      	uxth	r3, r3
 8007234:	461a      	mov	r2, r3
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007238:	4413      	add	r3, r2
 800723a:	627b      	str	r3, [r7, #36]	; 0x24
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	011a      	lsls	r2, r3, #4
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	4413      	add	r3, r2
 8007246:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800724a:	623b      	str	r3, [r7, #32]
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	2200      	movs	r2, #0
 8007250:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	4619      	mov	r1, r3
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f006 f9b0 	bl	800d5be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800725e:	88fb      	ldrh	r3, [r7, #6]
 8007260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007264:	2b00      	cmp	r3, #0
 8007266:	f000 82fc 	beq.w	8007862 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	461a      	mov	r2, r3
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	b29b      	uxth	r3, r3
 800727c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007284:	82fb      	strh	r3, [r7, #22]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	461a      	mov	r2, r3
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	441a      	add	r2, r3
 8007294:	8afb      	ldrh	r3, [r7, #22]
 8007296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800729a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800729e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	8013      	strh	r3, [r2, #0]
 80072aa:	e2da      	b.n	8007862 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80072ac:	88fb      	ldrh	r3, [r7, #6]
 80072ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d021      	beq.n	80072fa <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	461a      	mov	r2, r3
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4413      	add	r3, r2
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	461a      	mov	r2, r3
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	441a      	add	r2, r3
 80072e2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80072e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007300:	2b01      	cmp	r3, #1
 8007302:	f040 82ae 	bne.w	8007862 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	695a      	ldr	r2, [r3, #20]
 800730a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800730e:	441a      	add	r2, r3
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	69da      	ldr	r2, [r3, #28]
 8007318:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800731c:	441a      	add	r2, r3
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	6a1a      	ldr	r2, [r3, #32]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	429a      	cmp	r2, r3
 800732c:	d30b      	bcc.n	8007346 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	6a1a      	ldr	r2, [r3, #32]
 800733a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800733e:	1ad2      	subs	r2, r2, r3
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	621a      	str	r2, [r3, #32]
 8007344:	e017      	b.n	8007376 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d108      	bne.n	8007360 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800734e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007352:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800735e:	e00a      	b.n	8007376 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	2200      	movs	r2, #0
 8007374:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	785b      	ldrb	r3, [r3, #1]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d165      	bne.n	800744a <HAL_PCD_EP_DB_Transmit+0x382>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800738c:	b29b      	uxth	r3, r3
 800738e:	461a      	mov	r2, r3
 8007390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007392:	4413      	add	r3, r2
 8007394:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	011a      	lsls	r2, r3, #4
 800739c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800739e:	4413      	add	r3, r2
 80073a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80073a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80073a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a8:	881b      	ldrh	r3, [r3, #0]
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b4:	801a      	strh	r2, [r3, #0]
 80073b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073ba:	2b3e      	cmp	r3, #62	; 0x3e
 80073bc:	d91d      	bls.n	80073fa <HAL_PCD_EP_DB_Transmit+0x332>
 80073be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073c2:	095b      	lsrs	r3, r3, #5
 80073c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80073c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073ca:	f003 031f 	and.w	r3, r3, #31
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d102      	bne.n	80073d8 <HAL_PCD_EP_DB_Transmit+0x310>
 80073d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073d4:	3b01      	subs	r3, #1
 80073d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80073d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	b29a      	uxth	r2, r3
 80073de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	029b      	lsls	r3, r3, #10
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	4313      	orrs	r3, r2
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f6:	801a      	strh	r2, [r3, #0]
 80073f8:	e044      	b.n	8007484 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80073fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10a      	bne.n	8007418 <HAL_PCD_EP_DB_Transmit+0x350>
 8007402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	b29b      	uxth	r3, r3
 8007408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800740c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007410:	b29a      	uxth	r2, r3
 8007412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007414:	801a      	strh	r2, [r3, #0]
 8007416:	e035      	b.n	8007484 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8007418:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800741c:	085b      	lsrs	r3, r3, #1
 800741e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007420:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <HAL_PCD_EP_DB_Transmit+0x36a>
 800742c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800742e:	3301      	adds	r3, #1
 8007430:	64bb      	str	r3, [r7, #72]	; 0x48
 8007432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	b29a      	uxth	r2, r3
 8007438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800743a:	b29b      	uxth	r3, r3
 800743c:	029b      	lsls	r3, r3, #10
 800743e:	b29b      	uxth	r3, r3
 8007440:	4313      	orrs	r3, r2
 8007442:	b29a      	uxth	r2, r3
 8007444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007446:	801a      	strh	r2, [r3, #0]
 8007448:	e01c      	b.n	8007484 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	785b      	ldrb	r3, [r3, #1]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d118      	bne.n	8007484 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	647b      	str	r3, [r7, #68]	; 0x44
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007460:	b29b      	uxth	r3, r3
 8007462:	461a      	mov	r2, r3
 8007464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007466:	4413      	add	r3, r2
 8007468:	647b      	str	r3, [r7, #68]	; 0x44
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	011a      	lsls	r2, r3, #4
 8007470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007472:	4413      	add	r3, r2
 8007474:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007478:	643b      	str	r3, [r7, #64]	; 0x40
 800747a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800747e:	b29a      	uxth	r2, r3
 8007480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007482:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6818      	ldr	r0, [r3, #0]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	6959      	ldr	r1, [r3, #20]
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	891a      	ldrh	r2, [r3, #8]
 8007490:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007494:	b29b      	uxth	r3, r3
 8007496:	f004 fa36 	bl	800b906 <USB_WritePMA>
 800749a:	e1e2      	b.n	8007862 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	461a      	mov	r2, r3
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	00db      	lsls	r3, r3, #3
 80074ae:	4413      	add	r3, r2
 80074b0:	3306      	adds	r3, #6
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	6812      	ldr	r2, [r2, #0]
 80074b8:	4413      	add	r3, r2
 80074ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074c4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	699a      	ldr	r2, [r3, #24]
 80074cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d307      	bcc.n	80074e4 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	699a      	ldr	r2, [r3, #24]
 80074d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80074dc:	1ad2      	subs	r2, r2, r3
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	619a      	str	r2, [r3, #24]
 80074e2:	e002      	b.n	80074ea <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2200      	movs	r2, #0
 80074e8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f040 80c0 	bne.w	8007674 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	785b      	ldrb	r3, [r3, #1]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d126      	bne.n	800754a <HAL_PCD_EP_DB_Transmit+0x482>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800750a:	b29b      	uxth	r3, r3
 800750c:	461a      	mov	r2, r3
 800750e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007510:	4413      	add	r3, r2
 8007512:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	011a      	lsls	r2, r3, #4
 800751a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800751c:	4413      	add	r3, r2
 800751e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007522:	67bb      	str	r3, [r7, #120]	; 0x78
 8007524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	b29b      	uxth	r3, r3
 800752a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800752e:	b29a      	uxth	r2, r3
 8007530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007532:	801a      	strh	r2, [r3, #0]
 8007534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	b29b      	uxth	r3, r3
 800753a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800753e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007542:	b29a      	uxth	r2, r3
 8007544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007546:	801a      	strh	r2, [r3, #0]
 8007548:	e01a      	b.n	8007580 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	785b      	ldrb	r3, [r3, #1]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d116      	bne.n	8007580 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	667b      	str	r3, [r7, #100]	; 0x64
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007560:	b29b      	uxth	r3, r3
 8007562:	461a      	mov	r2, r3
 8007564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007566:	4413      	add	r3, r2
 8007568:	667b      	str	r3, [r7, #100]	; 0x64
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	011a      	lsls	r2, r3, #4
 8007570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007572:	4413      	add	r3, r2
 8007574:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007578:	663b      	str	r3, [r7, #96]	; 0x60
 800757a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800757c:	2200      	movs	r2, #0
 800757e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	677b      	str	r3, [r7, #116]	; 0x74
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	785b      	ldrb	r3, [r3, #1]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d12b      	bne.n	80075e6 <HAL_PCD_EP_DB_Transmit+0x51e>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800759c:	b29b      	uxth	r3, r3
 800759e:	461a      	mov	r2, r3
 80075a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075a2:	4413      	add	r3, r2
 80075a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	011a      	lsls	r2, r3, #4
 80075ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ae:	4413      	add	r3, r2
 80075b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075bc:	881b      	ldrh	r3, [r3, #0]
 80075be:	b29b      	uxth	r3, r3
 80075c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075ca:	801a      	strh	r2, [r3, #0]
 80075cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075d0:	881b      	ldrh	r3, [r3, #0]
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075dc:	b29a      	uxth	r2, r3
 80075de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80075e2:	801a      	strh	r2, [r3, #0]
 80075e4:	e017      	b.n	8007616 <HAL_PCD_EP_DB_Transmit+0x54e>
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	785b      	ldrb	r3, [r3, #1]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d113      	bne.n	8007616 <HAL_PCD_EP_DB_Transmit+0x54e>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	461a      	mov	r2, r3
 80075fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075fc:	4413      	add	r3, r2
 80075fe:	677b      	str	r3, [r7, #116]	; 0x74
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	011a      	lsls	r2, r3, #4
 8007606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007608:	4413      	add	r3, r2
 800760a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800760e:	673b      	str	r3, [r7, #112]	; 0x70
 8007610:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007612:	2200      	movs	r2, #0
 8007614:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	4619      	mov	r1, r3
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f005 ffce 	bl	800d5be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007622:	88fb      	ldrh	r3, [r7, #6]
 8007624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007628:	2b00      	cmp	r3, #0
 800762a:	f040 811a 	bne.w	8007862 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	461a      	mov	r2, r3
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	4413      	add	r3, r2
 800763c:	881b      	ldrh	r3, [r3, #0]
 800763e:	b29b      	uxth	r3, r3
 8007640:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007648:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	461a      	mov	r2, r3
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	441a      	add	r2, r3
 800765a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800765e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800766a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800766e:	b29b      	uxth	r3, r3
 8007670:	8013      	strh	r3, [r2, #0]
 8007672:	e0f6      	b.n	8007862 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007674:	88fb      	ldrh	r3, [r7, #6]
 8007676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d121      	bne.n	80076c2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	461a      	mov	r2, r3
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4413      	add	r3, r2
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	b29b      	uxth	r3, r3
 8007690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007698:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	461a      	mov	r2, r3
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	441a      	add	r2, r3
 80076aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80076ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076be:	b29b      	uxth	r3, r3
 80076c0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	f040 80ca 	bne.w	8007862 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	695a      	ldr	r2, [r3, #20]
 80076d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80076d6:	441a      	add	r2, r3
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	69da      	ldr	r2, [r3, #28]
 80076e0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80076e4:	441a      	add	r2, r3
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	6a1a      	ldr	r2, [r3, #32]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d30b      	bcc.n	800770e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	6a1a      	ldr	r2, [r3, #32]
 8007702:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007706:	1ad2      	subs	r2, r2, r3
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	621a      	str	r2, [r3, #32]
 800770c:	e017      	b.n	800773e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d108      	bne.n	8007728 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8007716:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800771a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007726:	e00a      	b.n	800773e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	6a1b      	ldr	r3, [r3, #32]
 800772c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	2200      	movs	r2, #0
 8007734:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	657b      	str	r3, [r7, #84]	; 0x54
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	785b      	ldrb	r3, [r3, #1]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d165      	bne.n	8007818 <HAL_PCD_EP_DB_Transmit+0x750>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800775a:	b29b      	uxth	r3, r3
 800775c:	461a      	mov	r2, r3
 800775e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007760:	4413      	add	r3, r2
 8007762:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	011a      	lsls	r2, r3, #4
 800776a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800776c:	4413      	add	r3, r2
 800776e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007772:	65bb      	str	r3, [r7, #88]	; 0x58
 8007774:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007776:	881b      	ldrh	r3, [r3, #0]
 8007778:	b29b      	uxth	r3, r3
 800777a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800777e:	b29a      	uxth	r2, r3
 8007780:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007782:	801a      	strh	r2, [r3, #0]
 8007784:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007788:	2b3e      	cmp	r3, #62	; 0x3e
 800778a:	d91d      	bls.n	80077c8 <HAL_PCD_EP_DB_Transmit+0x700>
 800778c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007790:	095b      	lsrs	r3, r3, #5
 8007792:	66bb      	str	r3, [r7, #104]	; 0x68
 8007794:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007798:	f003 031f 	and.w	r3, r3, #31
 800779c:	2b00      	cmp	r3, #0
 800779e:	d102      	bne.n	80077a6 <HAL_PCD_EP_DB_Transmit+0x6de>
 80077a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077a2:	3b01      	subs	r3, #1
 80077a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80077a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077a8:	881b      	ldrh	r3, [r3, #0]
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	029b      	lsls	r3, r3, #10
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	4313      	orrs	r3, r2
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077c4:	801a      	strh	r2, [r3, #0]
 80077c6:	e041      	b.n	800784c <HAL_PCD_EP_DB_Transmit+0x784>
 80077c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10a      	bne.n	80077e6 <HAL_PCD_EP_DB_Transmit+0x71e>
 80077d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077de:	b29a      	uxth	r2, r3
 80077e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077e2:	801a      	strh	r2, [r3, #0]
 80077e4:	e032      	b.n	800784c <HAL_PCD_EP_DB_Transmit+0x784>
 80077e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077ea:	085b      	lsrs	r3, r3, #1
 80077ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80077ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <HAL_PCD_EP_DB_Transmit+0x738>
 80077fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077fc:	3301      	adds	r3, #1
 80077fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007800:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007802:	881b      	ldrh	r3, [r3, #0]
 8007804:	b29a      	uxth	r2, r3
 8007806:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007808:	b29b      	uxth	r3, r3
 800780a:	029b      	lsls	r3, r3, #10
 800780c:	b29b      	uxth	r3, r3
 800780e:	4313      	orrs	r3, r2
 8007810:	b29a      	uxth	r2, r3
 8007812:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007814:	801a      	strh	r2, [r3, #0]
 8007816:	e019      	b.n	800784c <HAL_PCD_EP_DB_Transmit+0x784>
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	785b      	ldrb	r3, [r3, #1]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d115      	bne.n	800784c <HAL_PCD_EP_DB_Transmit+0x784>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007828:	b29b      	uxth	r3, r3
 800782a:	461a      	mov	r2, r3
 800782c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800782e:	4413      	add	r3, r2
 8007830:	657b      	str	r3, [r7, #84]	; 0x54
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	011a      	lsls	r2, r3, #4
 8007838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800783a:	4413      	add	r3, r2
 800783c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007840:	653b      	str	r3, [r7, #80]	; 0x50
 8007842:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007846:	b29a      	uxth	r2, r3
 8007848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800784a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6818      	ldr	r0, [r3, #0]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	6959      	ldr	r1, [r3, #20]
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	895a      	ldrh	r2, [r3, #10]
 8007858:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800785c:	b29b      	uxth	r3, r3
 800785e:	f004 f852 	bl	800b906 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	b29b      	uxth	r3, r3
 8007874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800787c:	82bb      	strh	r3, [r7, #20]
 800787e:	8abb      	ldrh	r3, [r7, #20]
 8007880:	f083 0310 	eor.w	r3, r3, #16
 8007884:	82bb      	strh	r3, [r7, #20]
 8007886:	8abb      	ldrh	r3, [r7, #20]
 8007888:	f083 0320 	eor.w	r3, r3, #32
 800788c:	82bb      	strh	r3, [r7, #20]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	441a      	add	r2, r3
 800789c:	8abb      	ldrh	r3, [r7, #20]
 800789e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3790      	adds	r7, #144	; 0x90
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80078bc:	b480      	push	{r7}
 80078be:	b087      	sub	sp, #28
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	607b      	str	r3, [r7, #4]
 80078c6:	460b      	mov	r3, r1
 80078c8:	817b      	strh	r3, [r7, #10]
 80078ca:	4613      	mov	r3, r2
 80078cc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80078ce:	897b      	ldrh	r3, [r7, #10]
 80078d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00b      	beq.n	80078f2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078da:	897b      	ldrh	r3, [r7, #10]
 80078dc:	f003 0307 	and.w	r3, r3, #7
 80078e0:	1c5a      	adds	r2, r3, #1
 80078e2:	4613      	mov	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	00db      	lsls	r3, r3, #3
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	4413      	add	r3, r2
 80078ee:	617b      	str	r3, [r7, #20]
 80078f0:	e009      	b.n	8007906 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80078f2:	897a      	ldrh	r2, [r7, #10]
 80078f4:	4613      	mov	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	4413      	add	r3, r2
 8007904:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007906:	893b      	ldrh	r3, [r7, #8]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d107      	bne.n	800791c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	2200      	movs	r2, #0
 8007910:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	b29a      	uxth	r2, r3
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	80da      	strh	r2, [r3, #6]
 800791a:	e00b      	b.n	8007934 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	2201      	movs	r2, #1
 8007920:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	b29a      	uxth	r2, r3
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	0c1b      	lsrs	r3, r3, #16
 800792e:	b29a      	uxth	r2, r3
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	371c      	adds	r7, #28
 800793a:	46bd      	mov	sp, r7
 800793c:	bc80      	pop	{r7}
 800793e:	4770      	bx	lr

08007940 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d101      	bne.n	8007952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e272      	b.n	8007e38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	2b00      	cmp	r3, #0
 800795c:	f000 8087 	beq.w	8007a6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007960:	4b92      	ldr	r3, [pc, #584]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f003 030c 	and.w	r3, r3, #12
 8007968:	2b04      	cmp	r3, #4
 800796a:	d00c      	beq.n	8007986 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800796c:	4b8f      	ldr	r3, [pc, #572]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f003 030c 	and.w	r3, r3, #12
 8007974:	2b08      	cmp	r3, #8
 8007976:	d112      	bne.n	800799e <HAL_RCC_OscConfig+0x5e>
 8007978:	4b8c      	ldr	r3, [pc, #560]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007984:	d10b      	bne.n	800799e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007986:	4b89      	ldr	r3, [pc, #548]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d06c      	beq.n	8007a6c <HAL_RCC_OscConfig+0x12c>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d168      	bne.n	8007a6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e24c      	b.n	8007e38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079a6:	d106      	bne.n	80079b6 <HAL_RCC_OscConfig+0x76>
 80079a8:	4b80      	ldr	r3, [pc, #512]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a7f      	ldr	r2, [pc, #508]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 80079ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079b2:	6013      	str	r3, [r2, #0]
 80079b4:	e02e      	b.n	8007a14 <HAL_RCC_OscConfig+0xd4>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10c      	bne.n	80079d8 <HAL_RCC_OscConfig+0x98>
 80079be:	4b7b      	ldr	r3, [pc, #492]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a7a      	ldr	r2, [pc, #488]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 80079c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079c8:	6013      	str	r3, [r2, #0]
 80079ca:	4b78      	ldr	r3, [pc, #480]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a77      	ldr	r2, [pc, #476]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 80079d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079d4:	6013      	str	r3, [r2, #0]
 80079d6:	e01d      	b.n	8007a14 <HAL_RCC_OscConfig+0xd4>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079e0:	d10c      	bne.n	80079fc <HAL_RCC_OscConfig+0xbc>
 80079e2:	4b72      	ldr	r3, [pc, #456]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a71      	ldr	r2, [pc, #452]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 80079e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079ec:	6013      	str	r3, [r2, #0]
 80079ee:	4b6f      	ldr	r3, [pc, #444]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a6e      	ldr	r2, [pc, #440]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 80079f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079f8:	6013      	str	r3, [r2, #0]
 80079fa:	e00b      	b.n	8007a14 <HAL_RCC_OscConfig+0xd4>
 80079fc:	4b6b      	ldr	r3, [pc, #428]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a6a      	ldr	r2, [pc, #424]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 8007a02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a06:	6013      	str	r3, [r2, #0]
 8007a08:	4b68      	ldr	r3, [pc, #416]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a67      	ldr	r2, [pc, #412]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 8007a0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d013      	beq.n	8007a44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a1c:	f7fa fc9e 	bl	800235c <HAL_GetTick>
 8007a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a22:	e008      	b.n	8007a36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a24:	f7fa fc9a 	bl	800235c <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	2b64      	cmp	r3, #100	; 0x64
 8007a30:	d901      	bls.n	8007a36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e200      	b.n	8007e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a36:	4b5d      	ldr	r3, [pc, #372]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d0f0      	beq.n	8007a24 <HAL_RCC_OscConfig+0xe4>
 8007a42:	e014      	b.n	8007a6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a44:	f7fa fc8a 	bl	800235c <HAL_GetTick>
 8007a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a4a:	e008      	b.n	8007a5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a4c:	f7fa fc86 	bl	800235c <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	2b64      	cmp	r3, #100	; 0x64
 8007a58:	d901      	bls.n	8007a5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e1ec      	b.n	8007e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a5e:	4b53      	ldr	r3, [pc, #332]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1f0      	bne.n	8007a4c <HAL_RCC_OscConfig+0x10c>
 8007a6a:	e000      	b.n	8007a6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0302 	and.w	r3, r3, #2
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d063      	beq.n	8007b42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a7a:	4b4c      	ldr	r3, [pc, #304]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	f003 030c 	and.w	r3, r3, #12
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00b      	beq.n	8007a9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007a86:	4b49      	ldr	r3, [pc, #292]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	f003 030c 	and.w	r3, r3, #12
 8007a8e:	2b08      	cmp	r3, #8
 8007a90:	d11c      	bne.n	8007acc <HAL_RCC_OscConfig+0x18c>
 8007a92:	4b46      	ldr	r3, [pc, #280]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d116      	bne.n	8007acc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a9e:	4b43      	ldr	r3, [pc, #268]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0302 	and.w	r3, r3, #2
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d005      	beq.n	8007ab6 <HAL_RCC_OscConfig+0x176>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d001      	beq.n	8007ab6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e1c0      	b.n	8007e38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ab6:	4b3d      	ldr	r3, [pc, #244]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	00db      	lsls	r3, r3, #3
 8007ac4:	4939      	ldr	r1, [pc, #228]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007aca:	e03a      	b.n	8007b42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d020      	beq.n	8007b16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ad4:	4b36      	ldr	r3, [pc, #216]	; (8007bb0 <HAL_RCC_OscConfig+0x270>)
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ada:	f7fa fc3f 	bl	800235c <HAL_GetTick>
 8007ade:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ae0:	e008      	b.n	8007af4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ae2:	f7fa fc3b 	bl	800235c <HAL_GetTick>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d901      	bls.n	8007af4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007af0:	2303      	movs	r3, #3
 8007af2:	e1a1      	b.n	8007e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007af4:	4b2d      	ldr	r3, [pc, #180]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0302 	and.w	r3, r3, #2
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d0f0      	beq.n	8007ae2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b00:	4b2a      	ldr	r3, [pc, #168]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	00db      	lsls	r3, r3, #3
 8007b0e:	4927      	ldr	r1, [pc, #156]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 8007b10:	4313      	orrs	r3, r2
 8007b12:	600b      	str	r3, [r1, #0]
 8007b14:	e015      	b.n	8007b42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b16:	4b26      	ldr	r3, [pc, #152]	; (8007bb0 <HAL_RCC_OscConfig+0x270>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b1c:	f7fa fc1e 	bl	800235c <HAL_GetTick>
 8007b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b22:	e008      	b.n	8007b36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b24:	f7fa fc1a 	bl	800235c <HAL_GetTick>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d901      	bls.n	8007b36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e180      	b.n	8007e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b36:	4b1d      	ldr	r3, [pc, #116]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0302 	and.w	r3, r3, #2
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1f0      	bne.n	8007b24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0308 	and.w	r3, r3, #8
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d03a      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d019      	beq.n	8007b8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b56:	4b17      	ldr	r3, [pc, #92]	; (8007bb4 <HAL_RCC_OscConfig+0x274>)
 8007b58:	2201      	movs	r2, #1
 8007b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b5c:	f7fa fbfe 	bl	800235c <HAL_GetTick>
 8007b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b62:	e008      	b.n	8007b76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b64:	f7fa fbfa 	bl	800235c <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d901      	bls.n	8007b76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e160      	b.n	8007e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b76:	4b0d      	ldr	r3, [pc, #52]	; (8007bac <HAL_RCC_OscConfig+0x26c>)
 8007b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7a:	f003 0302 	and.w	r3, r3, #2
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d0f0      	beq.n	8007b64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007b82:	2001      	movs	r0, #1
 8007b84:	f000 fad0 	bl	8008128 <RCC_Delay>
 8007b88:	e01c      	b.n	8007bc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b8a:	4b0a      	ldr	r3, [pc, #40]	; (8007bb4 <HAL_RCC_OscConfig+0x274>)
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b90:	f7fa fbe4 	bl	800235c <HAL_GetTick>
 8007b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b96:	e00f      	b.n	8007bb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b98:	f7fa fbe0 	bl	800235c <HAL_GetTick>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d908      	bls.n	8007bb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e146      	b.n	8007e38 <HAL_RCC_OscConfig+0x4f8>
 8007baa:	bf00      	nop
 8007bac:	40021000 	.word	0x40021000
 8007bb0:	42420000 	.word	0x42420000
 8007bb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bb8:	4b92      	ldr	r3, [pc, #584]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	f003 0302 	and.w	r3, r3, #2
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e9      	bne.n	8007b98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0304 	and.w	r3, r3, #4
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f000 80a6 	beq.w	8007d1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bd6:	4b8b      	ldr	r3, [pc, #556]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007bd8:	69db      	ldr	r3, [r3, #28]
 8007bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10d      	bne.n	8007bfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007be2:	4b88      	ldr	r3, [pc, #544]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007be4:	69db      	ldr	r3, [r3, #28]
 8007be6:	4a87      	ldr	r2, [pc, #540]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bec:	61d3      	str	r3, [r2, #28]
 8007bee:	4b85      	ldr	r3, [pc, #532]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bf6:	60bb      	str	r3, [r7, #8]
 8007bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bfe:	4b82      	ldr	r3, [pc, #520]	; (8007e08 <HAL_RCC_OscConfig+0x4c8>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d118      	bne.n	8007c3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c0a:	4b7f      	ldr	r3, [pc, #508]	; (8007e08 <HAL_RCC_OscConfig+0x4c8>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a7e      	ldr	r2, [pc, #504]	; (8007e08 <HAL_RCC_OscConfig+0x4c8>)
 8007c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c16:	f7fa fba1 	bl	800235c <HAL_GetTick>
 8007c1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c1c:	e008      	b.n	8007c30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c1e:	f7fa fb9d 	bl	800235c <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	2b64      	cmp	r3, #100	; 0x64
 8007c2a:	d901      	bls.n	8007c30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e103      	b.n	8007e38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c30:	4b75      	ldr	r3, [pc, #468]	; (8007e08 <HAL_RCC_OscConfig+0x4c8>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d0f0      	beq.n	8007c1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d106      	bne.n	8007c52 <HAL_RCC_OscConfig+0x312>
 8007c44:	4b6f      	ldr	r3, [pc, #444]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007c46:	6a1b      	ldr	r3, [r3, #32]
 8007c48:	4a6e      	ldr	r2, [pc, #440]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007c4a:	f043 0301 	orr.w	r3, r3, #1
 8007c4e:	6213      	str	r3, [r2, #32]
 8007c50:	e02d      	b.n	8007cae <HAL_RCC_OscConfig+0x36e>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10c      	bne.n	8007c74 <HAL_RCC_OscConfig+0x334>
 8007c5a:	4b6a      	ldr	r3, [pc, #424]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	4a69      	ldr	r2, [pc, #420]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007c60:	f023 0301 	bic.w	r3, r3, #1
 8007c64:	6213      	str	r3, [r2, #32]
 8007c66:	4b67      	ldr	r3, [pc, #412]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007c68:	6a1b      	ldr	r3, [r3, #32]
 8007c6a:	4a66      	ldr	r2, [pc, #408]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007c6c:	f023 0304 	bic.w	r3, r3, #4
 8007c70:	6213      	str	r3, [r2, #32]
 8007c72:	e01c      	b.n	8007cae <HAL_RCC_OscConfig+0x36e>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	2b05      	cmp	r3, #5
 8007c7a:	d10c      	bne.n	8007c96 <HAL_RCC_OscConfig+0x356>
 8007c7c:	4b61      	ldr	r3, [pc, #388]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
 8007c80:	4a60      	ldr	r2, [pc, #384]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007c82:	f043 0304 	orr.w	r3, r3, #4
 8007c86:	6213      	str	r3, [r2, #32]
 8007c88:	4b5e      	ldr	r3, [pc, #376]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007c8a:	6a1b      	ldr	r3, [r3, #32]
 8007c8c:	4a5d      	ldr	r2, [pc, #372]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007c8e:	f043 0301 	orr.w	r3, r3, #1
 8007c92:	6213      	str	r3, [r2, #32]
 8007c94:	e00b      	b.n	8007cae <HAL_RCC_OscConfig+0x36e>
 8007c96:	4b5b      	ldr	r3, [pc, #364]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	4a5a      	ldr	r2, [pc, #360]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007c9c:	f023 0301 	bic.w	r3, r3, #1
 8007ca0:	6213      	str	r3, [r2, #32]
 8007ca2:	4b58      	ldr	r3, [pc, #352]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	4a57      	ldr	r2, [pc, #348]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007ca8:	f023 0304 	bic.w	r3, r3, #4
 8007cac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d015      	beq.n	8007ce2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cb6:	f7fa fb51 	bl	800235c <HAL_GetTick>
 8007cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cbc:	e00a      	b.n	8007cd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cbe:	f7fa fb4d 	bl	800235c <HAL_GetTick>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d901      	bls.n	8007cd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e0b1      	b.n	8007e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cd4:	4b4b      	ldr	r3, [pc, #300]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007cd6:	6a1b      	ldr	r3, [r3, #32]
 8007cd8:	f003 0302 	and.w	r3, r3, #2
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d0ee      	beq.n	8007cbe <HAL_RCC_OscConfig+0x37e>
 8007ce0:	e014      	b.n	8007d0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ce2:	f7fa fb3b 	bl	800235c <HAL_GetTick>
 8007ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ce8:	e00a      	b.n	8007d00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cea:	f7fa fb37 	bl	800235c <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d901      	bls.n	8007d00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e09b      	b.n	8007e38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d00:	4b40      	ldr	r3, [pc, #256]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007d02:	6a1b      	ldr	r3, [r3, #32]
 8007d04:	f003 0302 	and.w	r3, r3, #2
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1ee      	bne.n	8007cea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007d0c:	7dfb      	ldrb	r3, [r7, #23]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d105      	bne.n	8007d1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d12:	4b3c      	ldr	r3, [pc, #240]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	4a3b      	ldr	r2, [pc, #236]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	69db      	ldr	r3, [r3, #28]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 8087 	beq.w	8007e36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d28:	4b36      	ldr	r3, [pc, #216]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	f003 030c 	and.w	r3, r3, #12
 8007d30:	2b08      	cmp	r3, #8
 8007d32:	d061      	beq.n	8007df8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d146      	bne.n	8007dca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d3c:	4b33      	ldr	r3, [pc, #204]	; (8007e0c <HAL_RCC_OscConfig+0x4cc>)
 8007d3e:	2200      	movs	r2, #0
 8007d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d42:	f7fa fb0b 	bl	800235c <HAL_GetTick>
 8007d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d48:	e008      	b.n	8007d5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d4a:	f7fa fb07 	bl	800235c <HAL_GetTick>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d901      	bls.n	8007d5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e06d      	b.n	8007e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d5c:	4b29      	ldr	r3, [pc, #164]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1f0      	bne.n	8007d4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a1b      	ldr	r3, [r3, #32]
 8007d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d70:	d108      	bne.n	8007d84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007d72:	4b24      	ldr	r3, [pc, #144]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	4921      	ldr	r1, [pc, #132]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007d80:	4313      	orrs	r3, r2
 8007d82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d84:	4b1f      	ldr	r3, [pc, #124]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a19      	ldr	r1, [r3, #32]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d94:	430b      	orrs	r3, r1
 8007d96:	491b      	ldr	r1, [pc, #108]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d9c:	4b1b      	ldr	r3, [pc, #108]	; (8007e0c <HAL_RCC_OscConfig+0x4cc>)
 8007d9e:	2201      	movs	r2, #1
 8007da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007da2:	f7fa fadb 	bl	800235c <HAL_GetTick>
 8007da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007da8:	e008      	b.n	8007dbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007daa:	f7fa fad7 	bl	800235c <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d901      	bls.n	8007dbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e03d      	b.n	8007e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007dbc:	4b11      	ldr	r3, [pc, #68]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d0f0      	beq.n	8007daa <HAL_RCC_OscConfig+0x46a>
 8007dc8:	e035      	b.n	8007e36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dca:	4b10      	ldr	r3, [pc, #64]	; (8007e0c <HAL_RCC_OscConfig+0x4cc>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dd0:	f7fa fac4 	bl	800235c <HAL_GetTick>
 8007dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007dd6:	e008      	b.n	8007dea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dd8:	f7fa fac0 	bl	800235c <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d901      	bls.n	8007dea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e026      	b.n	8007e38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007dea:	4b06      	ldr	r3, [pc, #24]	; (8007e04 <HAL_RCC_OscConfig+0x4c4>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1f0      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x498>
 8007df6:	e01e      	b.n	8007e36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	69db      	ldr	r3, [r3, #28]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d107      	bne.n	8007e10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e019      	b.n	8007e38 <HAL_RCC_OscConfig+0x4f8>
 8007e04:	40021000 	.word	0x40021000
 8007e08:	40007000 	.word	0x40007000
 8007e0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007e10:	4b0b      	ldr	r3, [pc, #44]	; (8007e40 <HAL_RCC_OscConfig+0x500>)
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d106      	bne.n	8007e32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d001      	beq.n	8007e36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e000      	b.n	8007e38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	40021000 	.word	0x40021000

08007e44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d101      	bne.n	8007e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e0d0      	b.n	8007ffa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e58:	4b6a      	ldr	r3, [pc, #424]	; (8008004 <HAL_RCC_ClockConfig+0x1c0>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0307 	and.w	r3, r3, #7
 8007e60:	683a      	ldr	r2, [r7, #0]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d910      	bls.n	8007e88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e66:	4b67      	ldr	r3, [pc, #412]	; (8008004 <HAL_RCC_ClockConfig+0x1c0>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f023 0207 	bic.w	r2, r3, #7
 8007e6e:	4965      	ldr	r1, [pc, #404]	; (8008004 <HAL_RCC_ClockConfig+0x1c0>)
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e76:	4b63      	ldr	r3, [pc, #396]	; (8008004 <HAL_RCC_ClockConfig+0x1c0>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0307 	and.w	r3, r3, #7
 8007e7e:	683a      	ldr	r2, [r7, #0]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d001      	beq.n	8007e88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e0b8      	b.n	8007ffa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0302 	and.w	r3, r3, #2
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d020      	beq.n	8007ed6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 0304 	and.w	r3, r3, #4
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d005      	beq.n	8007eac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ea0:	4b59      	ldr	r3, [pc, #356]	; (8008008 <HAL_RCC_ClockConfig+0x1c4>)
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	4a58      	ldr	r2, [pc, #352]	; (8008008 <HAL_RCC_ClockConfig+0x1c4>)
 8007ea6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007eaa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 0308 	and.w	r3, r3, #8
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d005      	beq.n	8007ec4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007eb8:	4b53      	ldr	r3, [pc, #332]	; (8008008 <HAL_RCC_ClockConfig+0x1c4>)
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	4a52      	ldr	r2, [pc, #328]	; (8008008 <HAL_RCC_ClockConfig+0x1c4>)
 8007ebe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007ec2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ec4:	4b50      	ldr	r3, [pc, #320]	; (8008008 <HAL_RCC_ClockConfig+0x1c4>)
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	494d      	ldr	r1, [pc, #308]	; (8008008 <HAL_RCC_ClockConfig+0x1c4>)
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 0301 	and.w	r3, r3, #1
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d040      	beq.n	8007f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d107      	bne.n	8007efa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007eea:	4b47      	ldr	r3, [pc, #284]	; (8008008 <HAL_RCC_ClockConfig+0x1c4>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d115      	bne.n	8007f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e07f      	b.n	8007ffa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d107      	bne.n	8007f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f02:	4b41      	ldr	r3, [pc, #260]	; (8008008 <HAL_RCC_ClockConfig+0x1c4>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d109      	bne.n	8007f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e073      	b.n	8007ffa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f12:	4b3d      	ldr	r3, [pc, #244]	; (8008008 <HAL_RCC_ClockConfig+0x1c4>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0302 	and.w	r3, r3, #2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e06b      	b.n	8007ffa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f22:	4b39      	ldr	r3, [pc, #228]	; (8008008 <HAL_RCC_ClockConfig+0x1c4>)
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f023 0203 	bic.w	r2, r3, #3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	4936      	ldr	r1, [pc, #216]	; (8008008 <HAL_RCC_ClockConfig+0x1c4>)
 8007f30:	4313      	orrs	r3, r2
 8007f32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f34:	f7fa fa12 	bl	800235c <HAL_GetTick>
 8007f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f3a:	e00a      	b.n	8007f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f3c:	f7fa fa0e 	bl	800235c <HAL_GetTick>
 8007f40:	4602      	mov	r2, r0
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d901      	bls.n	8007f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e053      	b.n	8007ffa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f52:	4b2d      	ldr	r3, [pc, #180]	; (8008008 <HAL_RCC_ClockConfig+0x1c4>)
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	f003 020c 	and.w	r2, r3, #12
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d1eb      	bne.n	8007f3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f64:	4b27      	ldr	r3, [pc, #156]	; (8008004 <HAL_RCC_ClockConfig+0x1c0>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0307 	and.w	r3, r3, #7
 8007f6c:	683a      	ldr	r2, [r7, #0]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d210      	bcs.n	8007f94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f72:	4b24      	ldr	r3, [pc, #144]	; (8008004 <HAL_RCC_ClockConfig+0x1c0>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f023 0207 	bic.w	r2, r3, #7
 8007f7a:	4922      	ldr	r1, [pc, #136]	; (8008004 <HAL_RCC_ClockConfig+0x1c0>)
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f82:	4b20      	ldr	r3, [pc, #128]	; (8008004 <HAL_RCC_ClockConfig+0x1c0>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 0307 	and.w	r3, r3, #7
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d001      	beq.n	8007f94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e032      	b.n	8007ffa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 0304 	and.w	r3, r3, #4
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d008      	beq.n	8007fb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fa0:	4b19      	ldr	r3, [pc, #100]	; (8008008 <HAL_RCC_ClockConfig+0x1c4>)
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	4916      	ldr	r1, [pc, #88]	; (8008008 <HAL_RCC_ClockConfig+0x1c4>)
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 0308 	and.w	r3, r3, #8
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d009      	beq.n	8007fd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007fbe:	4b12      	ldr	r3, [pc, #72]	; (8008008 <HAL_RCC_ClockConfig+0x1c4>)
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	00db      	lsls	r3, r3, #3
 8007fcc:	490e      	ldr	r1, [pc, #56]	; (8008008 <HAL_RCC_ClockConfig+0x1c4>)
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007fd2:	f000 f821 	bl	8008018 <HAL_RCC_GetSysClockFreq>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	4b0b      	ldr	r3, [pc, #44]	; (8008008 <HAL_RCC_ClockConfig+0x1c4>)
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	091b      	lsrs	r3, r3, #4
 8007fde:	f003 030f 	and.w	r3, r3, #15
 8007fe2:	490a      	ldr	r1, [pc, #40]	; (800800c <HAL_RCC_ClockConfig+0x1c8>)
 8007fe4:	5ccb      	ldrb	r3, [r1, r3]
 8007fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8007fea:	4a09      	ldr	r2, [pc, #36]	; (8008010 <HAL_RCC_ClockConfig+0x1cc>)
 8007fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007fee:	4b09      	ldr	r3, [pc, #36]	; (8008014 <HAL_RCC_ClockConfig+0x1d0>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fa f970 	bl	80022d8 <HAL_InitTick>

  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	40022000 	.word	0x40022000
 8008008:	40021000 	.word	0x40021000
 800800c:	0800ed00 	.word	0x0800ed00
 8008010:	20000048 	.word	0x20000048
 8008014:	2000004c 	.word	0x2000004c

08008018 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008018:	b480      	push	{r7}
 800801a:	b087      	sub	sp, #28
 800801c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800801e:	2300      	movs	r3, #0
 8008020:	60fb      	str	r3, [r7, #12]
 8008022:	2300      	movs	r3, #0
 8008024:	60bb      	str	r3, [r7, #8]
 8008026:	2300      	movs	r3, #0
 8008028:	617b      	str	r3, [r7, #20]
 800802a:	2300      	movs	r3, #0
 800802c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800802e:	2300      	movs	r3, #0
 8008030:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008032:	4b1e      	ldr	r3, [pc, #120]	; (80080ac <HAL_RCC_GetSysClockFreq+0x94>)
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f003 030c 	and.w	r3, r3, #12
 800803e:	2b04      	cmp	r3, #4
 8008040:	d002      	beq.n	8008048 <HAL_RCC_GetSysClockFreq+0x30>
 8008042:	2b08      	cmp	r3, #8
 8008044:	d003      	beq.n	800804e <HAL_RCC_GetSysClockFreq+0x36>
 8008046:	e027      	b.n	8008098 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008048:	4b19      	ldr	r3, [pc, #100]	; (80080b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800804a:	613b      	str	r3, [r7, #16]
      break;
 800804c:	e027      	b.n	800809e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	0c9b      	lsrs	r3, r3, #18
 8008052:	f003 030f 	and.w	r3, r3, #15
 8008056:	4a17      	ldr	r2, [pc, #92]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8008058:	5cd3      	ldrb	r3, [r2, r3]
 800805a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008062:	2b00      	cmp	r3, #0
 8008064:	d010      	beq.n	8008088 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008066:	4b11      	ldr	r3, [pc, #68]	; (80080ac <HAL_RCC_GetSysClockFreq+0x94>)
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	0c5b      	lsrs	r3, r3, #17
 800806c:	f003 0301 	and.w	r3, r3, #1
 8008070:	4a11      	ldr	r2, [pc, #68]	; (80080b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008072:	5cd3      	ldrb	r3, [r2, r3]
 8008074:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a0d      	ldr	r2, [pc, #52]	; (80080b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800807a:	fb03 f202 	mul.w	r2, r3, r2
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	fbb2 f3f3 	udiv	r3, r2, r3
 8008084:	617b      	str	r3, [r7, #20]
 8008086:	e004      	b.n	8008092 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a0c      	ldr	r2, [pc, #48]	; (80080bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800808c:	fb02 f303 	mul.w	r3, r2, r3
 8008090:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	613b      	str	r3, [r7, #16]
      break;
 8008096:	e002      	b.n	800809e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008098:	4b09      	ldr	r3, [pc, #36]	; (80080c0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800809a:	613b      	str	r3, [r7, #16]
      break;
 800809c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800809e:	693b      	ldr	r3, [r7, #16]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	371c      	adds	r7, #28
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bc80      	pop	{r7}
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	40021000 	.word	0x40021000
 80080b0:	00b71b00 	.word	0x00b71b00
 80080b4:	0800ed18 	.word	0x0800ed18
 80080b8:	0800ed28 	.word	0x0800ed28
 80080bc:	003d0900 	.word	0x003d0900
 80080c0:	007a1200 	.word	0x007a1200

080080c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080c4:	b480      	push	{r7}
 80080c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80080c8:	4b02      	ldr	r3, [pc, #8]	; (80080d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80080ca:	681b      	ldr	r3, [r3, #0]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bc80      	pop	{r7}
 80080d2:	4770      	bx	lr
 80080d4:	20000048 	.word	0x20000048

080080d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80080dc:	f7ff fff2 	bl	80080c4 <HAL_RCC_GetHCLKFreq>
 80080e0:	4602      	mov	r2, r0
 80080e2:	4b05      	ldr	r3, [pc, #20]	; (80080f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	0a1b      	lsrs	r3, r3, #8
 80080e8:	f003 0307 	and.w	r3, r3, #7
 80080ec:	4903      	ldr	r1, [pc, #12]	; (80080fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80080ee:	5ccb      	ldrb	r3, [r1, r3]
 80080f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	40021000 	.word	0x40021000
 80080fc:	0800ed10 	.word	0x0800ed10

08008100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008104:	f7ff ffde 	bl	80080c4 <HAL_RCC_GetHCLKFreq>
 8008108:	4602      	mov	r2, r0
 800810a:	4b05      	ldr	r3, [pc, #20]	; (8008120 <HAL_RCC_GetPCLK2Freq+0x20>)
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	0adb      	lsrs	r3, r3, #11
 8008110:	f003 0307 	and.w	r3, r3, #7
 8008114:	4903      	ldr	r1, [pc, #12]	; (8008124 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008116:	5ccb      	ldrb	r3, [r1, r3]
 8008118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800811c:	4618      	mov	r0, r3
 800811e:	bd80      	pop	{r7, pc}
 8008120:	40021000 	.word	0x40021000
 8008124:	0800ed10 	.word	0x0800ed10

08008128 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008130:	4b0a      	ldr	r3, [pc, #40]	; (800815c <RCC_Delay+0x34>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a0a      	ldr	r2, [pc, #40]	; (8008160 <RCC_Delay+0x38>)
 8008136:	fba2 2303 	umull	r2, r3, r2, r3
 800813a:	0a5b      	lsrs	r3, r3, #9
 800813c:	687a      	ldr	r2, [r7, #4]
 800813e:	fb02 f303 	mul.w	r3, r2, r3
 8008142:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008144:	bf00      	nop
  }
  while (Delay --);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	1e5a      	subs	r2, r3, #1
 800814a:	60fa      	str	r2, [r7, #12]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1f9      	bne.n	8008144 <RCC_Delay+0x1c>
}
 8008150:	bf00      	nop
 8008152:	bf00      	nop
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	bc80      	pop	{r7}
 800815a:	4770      	bx	lr
 800815c:	20000048 	.word	0x20000048
 8008160:	10624dd3 	.word	0x10624dd3

08008164 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	613b      	str	r3, [r7, #16]
 8008170:	2300      	movs	r3, #0
 8008172:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	2b00      	cmp	r3, #0
 800817e:	d07d      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8008180:	2300      	movs	r3, #0
 8008182:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008184:	4b4f      	ldr	r3, [pc, #316]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008186:	69db      	ldr	r3, [r3, #28]
 8008188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d10d      	bne.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008190:	4b4c      	ldr	r3, [pc, #304]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008192:	69db      	ldr	r3, [r3, #28]
 8008194:	4a4b      	ldr	r2, [pc, #300]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800819a:	61d3      	str	r3, [r2, #28]
 800819c:	4b49      	ldr	r3, [pc, #292]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800819e:	69db      	ldr	r3, [r3, #28]
 80081a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081a4:	60bb      	str	r3, [r7, #8]
 80081a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081a8:	2301      	movs	r3, #1
 80081aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081ac:	4b46      	ldr	r3, [pc, #280]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d118      	bne.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081b8:	4b43      	ldr	r3, [pc, #268]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a42      	ldr	r2, [pc, #264]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80081be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081c4:	f7fa f8ca 	bl	800235c <HAL_GetTick>
 80081c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081ca:	e008      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081cc:	f7fa f8c6 	bl	800235c <HAL_GetTick>
 80081d0:	4602      	mov	r2, r0
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	2b64      	cmp	r3, #100	; 0x64
 80081d8:	d901      	bls.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	e06d      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081de:	4b3a      	ldr	r3, [pc, #232]	; (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d0f0      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80081ea:	4b36      	ldr	r3, [pc, #216]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80081ec:	6a1b      	ldr	r3, [r3, #32]
 80081ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d02e      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	429a      	cmp	r2, r3
 8008206:	d027      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008208:	4b2e      	ldr	r3, [pc, #184]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800820a:	6a1b      	ldr	r3, [r3, #32]
 800820c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008210:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008212:	4b2e      	ldr	r3, [pc, #184]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008214:	2201      	movs	r2, #1
 8008216:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008218:	4b2c      	ldr	r3, [pc, #176]	; (80082cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800821a:	2200      	movs	r2, #0
 800821c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800821e:	4a29      	ldr	r2, [pc, #164]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d014      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800822e:	f7fa f895 	bl	800235c <HAL_GetTick>
 8008232:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008234:	e00a      	b.n	800824c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008236:	f7fa f891 	bl	800235c <HAL_GetTick>
 800823a:	4602      	mov	r2, r0
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	f241 3288 	movw	r2, #5000	; 0x1388
 8008244:	4293      	cmp	r3, r2
 8008246:	d901      	bls.n	800824c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008248:	2303      	movs	r3, #3
 800824a:	e036      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800824c:	4b1d      	ldr	r3, [pc, #116]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800824e:	6a1b      	ldr	r3, [r3, #32]
 8008250:	f003 0302 	and.w	r3, r3, #2
 8008254:	2b00      	cmp	r3, #0
 8008256:	d0ee      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008258:	4b1a      	ldr	r3, [pc, #104]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800825a:	6a1b      	ldr	r3, [r3, #32]
 800825c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	4917      	ldr	r1, [pc, #92]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008266:	4313      	orrs	r3, r2
 8008268:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800826a:	7dfb      	ldrb	r3, [r7, #23]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d105      	bne.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008270:	4b14      	ldr	r3, [pc, #80]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008272:	69db      	ldr	r3, [r3, #28]
 8008274:	4a13      	ldr	r2, [pc, #76]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008276:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800827a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 0302 	and.w	r3, r3, #2
 8008284:	2b00      	cmp	r3, #0
 8008286:	d008      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008288:	4b0e      	ldr	r3, [pc, #56]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	490b      	ldr	r1, [pc, #44]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008296:	4313      	orrs	r3, r2
 8008298:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0310 	and.w	r3, r3, #16
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d008      	beq.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082a6:	4b07      	ldr	r3, [pc, #28]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	4904      	ldr	r1, [pc, #16]	; (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082b4:	4313      	orrs	r3, r2
 80082b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	40021000 	.word	0x40021000
 80082c8:	40007000 	.word	0x40007000
 80082cc:	42420440 	.word	0x42420440

080082d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d101      	bne.n	80082e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e041      	b.n	8008366 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d106      	bne.n	80082fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7f9 fdd6 	bl	8001ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2202      	movs	r2, #2
 8008300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	3304      	adds	r3, #4
 800830c:	4619      	mov	r1, r3
 800830e:	4610      	mov	r0, r2
 8008310:	f000 fa10 	bl	8008734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3708      	adds	r7, #8
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b082      	sub	sp, #8
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d101      	bne.n	8008380 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e041      	b.n	8008404 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b00      	cmp	r3, #0
 800838a:	d106      	bne.n	800839a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f839 	bl	800840c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2202      	movs	r2, #2
 800839e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	3304      	adds	r3, #4
 80083aa:	4619      	mov	r1, r3
 80083ac:	4610      	mov	r0, r2
 80083ae:	f000 f9c1 	bl	8008734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2201      	movs	r2, #1
 80083be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2201      	movs	r2, #1
 80083ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2201      	movs	r2, #1
 80083d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	bc80      	pop	{r7}
 800841c:	4770      	bx	lr
	...

08008420 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008436:	2b01      	cmp	r3, #1
 8008438:	d101      	bne.n	800843e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800843a:	2302      	movs	r3, #2
 800843c:	e0ae      	b.n	800859c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2b0c      	cmp	r3, #12
 800844a:	f200 809f 	bhi.w	800858c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800844e:	a201      	add	r2, pc, #4	; (adr r2, 8008454 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008454:	08008489 	.word	0x08008489
 8008458:	0800858d 	.word	0x0800858d
 800845c:	0800858d 	.word	0x0800858d
 8008460:	0800858d 	.word	0x0800858d
 8008464:	080084c9 	.word	0x080084c9
 8008468:	0800858d 	.word	0x0800858d
 800846c:	0800858d 	.word	0x0800858d
 8008470:	0800858d 	.word	0x0800858d
 8008474:	0800850b 	.word	0x0800850b
 8008478:	0800858d 	.word	0x0800858d
 800847c:	0800858d 	.word	0x0800858d
 8008480:	0800858d 	.word	0x0800858d
 8008484:	0800854b 	.word	0x0800854b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68b9      	ldr	r1, [r7, #8]
 800848e:	4618      	mov	r0, r3
 8008490:	f000 f9ca 	bl	8008828 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	699a      	ldr	r2, [r3, #24]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f042 0208 	orr.w	r2, r2, #8
 80084a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	699a      	ldr	r2, [r3, #24]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f022 0204 	bic.w	r2, r2, #4
 80084b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6999      	ldr	r1, [r3, #24]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	691a      	ldr	r2, [r3, #16]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	430a      	orrs	r2, r1
 80084c4:	619a      	str	r2, [r3, #24]
      break;
 80084c6:	e064      	b.n	8008592 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68b9      	ldr	r1, [r7, #8]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f000 fa1a 	bl	8008908 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	699a      	ldr	r2, [r3, #24]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	699a      	ldr	r2, [r3, #24]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6999      	ldr	r1, [r3, #24]
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	021a      	lsls	r2, r3, #8
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	430a      	orrs	r2, r1
 8008506:	619a      	str	r2, [r3, #24]
      break;
 8008508:	e043      	b.n	8008592 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68b9      	ldr	r1, [r7, #8]
 8008510:	4618      	mov	r0, r3
 8008512:	f000 fa6d 	bl	80089f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	69da      	ldr	r2, [r3, #28]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f042 0208 	orr.w	r2, r2, #8
 8008524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	69da      	ldr	r2, [r3, #28]
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f022 0204 	bic.w	r2, r2, #4
 8008534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	69d9      	ldr	r1, [r3, #28]
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	691a      	ldr	r2, [r3, #16]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	430a      	orrs	r2, r1
 8008546:	61da      	str	r2, [r3, #28]
      break;
 8008548:	e023      	b.n	8008592 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68b9      	ldr	r1, [r7, #8]
 8008550:	4618      	mov	r0, r3
 8008552:	f000 fac1 	bl	8008ad8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	69da      	ldr	r2, [r3, #28]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	69da      	ldr	r2, [r3, #28]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	69d9      	ldr	r1, [r3, #28]
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	021a      	lsls	r2, r3, #8
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	430a      	orrs	r2, r1
 8008588:	61da      	str	r2, [r3, #28]
      break;
 800858a:	e002      	b.n	8008592 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	75fb      	strb	r3, [r7, #23]
      break;
 8008590:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800859a:	7dfb      	ldrb	r3, [r7, #23]
}
 800859c:	4618      	mov	r0, r3
 800859e:	3718      	adds	r7, #24
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d101      	bne.n	80085c0 <HAL_TIM_ConfigClockSource+0x1c>
 80085bc:	2302      	movs	r3, #2
 80085be:	e0b4      	b.n	800872a <HAL_TIM_ConfigClockSource+0x186>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2202      	movs	r2, #2
 80085cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80085de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085f8:	d03e      	beq.n	8008678 <HAL_TIM_ConfigClockSource+0xd4>
 80085fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085fe:	f200 8087 	bhi.w	8008710 <HAL_TIM_ConfigClockSource+0x16c>
 8008602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008606:	f000 8086 	beq.w	8008716 <HAL_TIM_ConfigClockSource+0x172>
 800860a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800860e:	d87f      	bhi.n	8008710 <HAL_TIM_ConfigClockSource+0x16c>
 8008610:	2b70      	cmp	r3, #112	; 0x70
 8008612:	d01a      	beq.n	800864a <HAL_TIM_ConfigClockSource+0xa6>
 8008614:	2b70      	cmp	r3, #112	; 0x70
 8008616:	d87b      	bhi.n	8008710 <HAL_TIM_ConfigClockSource+0x16c>
 8008618:	2b60      	cmp	r3, #96	; 0x60
 800861a:	d050      	beq.n	80086be <HAL_TIM_ConfigClockSource+0x11a>
 800861c:	2b60      	cmp	r3, #96	; 0x60
 800861e:	d877      	bhi.n	8008710 <HAL_TIM_ConfigClockSource+0x16c>
 8008620:	2b50      	cmp	r3, #80	; 0x50
 8008622:	d03c      	beq.n	800869e <HAL_TIM_ConfigClockSource+0xfa>
 8008624:	2b50      	cmp	r3, #80	; 0x50
 8008626:	d873      	bhi.n	8008710 <HAL_TIM_ConfigClockSource+0x16c>
 8008628:	2b40      	cmp	r3, #64	; 0x40
 800862a:	d058      	beq.n	80086de <HAL_TIM_ConfigClockSource+0x13a>
 800862c:	2b40      	cmp	r3, #64	; 0x40
 800862e:	d86f      	bhi.n	8008710 <HAL_TIM_ConfigClockSource+0x16c>
 8008630:	2b30      	cmp	r3, #48	; 0x30
 8008632:	d064      	beq.n	80086fe <HAL_TIM_ConfigClockSource+0x15a>
 8008634:	2b30      	cmp	r3, #48	; 0x30
 8008636:	d86b      	bhi.n	8008710 <HAL_TIM_ConfigClockSource+0x16c>
 8008638:	2b20      	cmp	r3, #32
 800863a:	d060      	beq.n	80086fe <HAL_TIM_ConfigClockSource+0x15a>
 800863c:	2b20      	cmp	r3, #32
 800863e:	d867      	bhi.n	8008710 <HAL_TIM_ConfigClockSource+0x16c>
 8008640:	2b00      	cmp	r3, #0
 8008642:	d05c      	beq.n	80086fe <HAL_TIM_ConfigClockSource+0x15a>
 8008644:	2b10      	cmp	r3, #16
 8008646:	d05a      	beq.n	80086fe <HAL_TIM_ConfigClockSource+0x15a>
 8008648:	e062      	b.n	8008710 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6818      	ldr	r0, [r3, #0]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	6899      	ldr	r1, [r3, #8]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	685a      	ldr	r2, [r3, #4]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	f000 fb08 	bl	8008c6e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800866c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	609a      	str	r2, [r3, #8]
      break;
 8008676:	e04f      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6818      	ldr	r0, [r3, #0]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	6899      	ldr	r1, [r3, #8]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	685a      	ldr	r2, [r3, #4]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	f000 faf1 	bl	8008c6e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	689a      	ldr	r2, [r3, #8]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800869a:	609a      	str	r2, [r3, #8]
      break;
 800869c:	e03c      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6818      	ldr	r0, [r3, #0]
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	6859      	ldr	r1, [r3, #4]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	461a      	mov	r2, r3
 80086ac:	f000 fa68 	bl	8008b80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2150      	movs	r1, #80	; 0x50
 80086b6:	4618      	mov	r0, r3
 80086b8:	f000 fabf 	bl	8008c3a <TIM_ITRx_SetConfig>
      break;
 80086bc:	e02c      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6818      	ldr	r0, [r3, #0]
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	6859      	ldr	r1, [r3, #4]
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	461a      	mov	r2, r3
 80086cc:	f000 fa86 	bl	8008bdc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2160      	movs	r1, #96	; 0x60
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 faaf 	bl	8008c3a <TIM_ITRx_SetConfig>
      break;
 80086dc:	e01c      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6818      	ldr	r0, [r3, #0]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	6859      	ldr	r1, [r3, #4]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	461a      	mov	r2, r3
 80086ec:	f000 fa48 	bl	8008b80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2140      	movs	r1, #64	; 0x40
 80086f6:	4618      	mov	r0, r3
 80086f8:	f000 fa9f 	bl	8008c3a <TIM_ITRx_SetConfig>
      break;
 80086fc:	e00c      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4619      	mov	r1, r3
 8008708:	4610      	mov	r0, r2
 800870a:	f000 fa96 	bl	8008c3a <TIM_ITRx_SetConfig>
      break;
 800870e:	e003      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	73fb      	strb	r3, [r7, #15]
      break;
 8008714:	e000      	b.n	8008718 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008716:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008728:	7bfb      	ldrb	r3, [r7, #15]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
	...

08008734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a33      	ldr	r2, [pc, #204]	; (8008814 <TIM_Base_SetConfig+0xe0>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d013      	beq.n	8008774 <TIM_Base_SetConfig+0x40>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a32      	ldr	r2, [pc, #200]	; (8008818 <TIM_Base_SetConfig+0xe4>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d00f      	beq.n	8008774 <TIM_Base_SetConfig+0x40>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800875a:	d00b      	beq.n	8008774 <TIM_Base_SetConfig+0x40>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a2f      	ldr	r2, [pc, #188]	; (800881c <TIM_Base_SetConfig+0xe8>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d007      	beq.n	8008774 <TIM_Base_SetConfig+0x40>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a2e      	ldr	r2, [pc, #184]	; (8008820 <TIM_Base_SetConfig+0xec>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d003      	beq.n	8008774 <TIM_Base_SetConfig+0x40>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a2d      	ldr	r2, [pc, #180]	; (8008824 <TIM_Base_SetConfig+0xf0>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d108      	bne.n	8008786 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800877a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	4313      	orrs	r3, r2
 8008784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a22      	ldr	r2, [pc, #136]	; (8008814 <TIM_Base_SetConfig+0xe0>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d013      	beq.n	80087b6 <TIM_Base_SetConfig+0x82>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a21      	ldr	r2, [pc, #132]	; (8008818 <TIM_Base_SetConfig+0xe4>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d00f      	beq.n	80087b6 <TIM_Base_SetConfig+0x82>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800879c:	d00b      	beq.n	80087b6 <TIM_Base_SetConfig+0x82>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a1e      	ldr	r2, [pc, #120]	; (800881c <TIM_Base_SetConfig+0xe8>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d007      	beq.n	80087b6 <TIM_Base_SetConfig+0x82>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a1d      	ldr	r2, [pc, #116]	; (8008820 <TIM_Base_SetConfig+0xec>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d003      	beq.n	80087b6 <TIM_Base_SetConfig+0x82>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a1c      	ldr	r2, [pc, #112]	; (8008824 <TIM_Base_SetConfig+0xf0>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d108      	bne.n	80087c8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	689a      	ldr	r2, [r3, #8]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a09      	ldr	r2, [pc, #36]	; (8008814 <TIM_Base_SetConfig+0xe0>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d003      	beq.n	80087fc <TIM_Base_SetConfig+0xc8>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a08      	ldr	r2, [pc, #32]	; (8008818 <TIM_Base_SetConfig+0xe4>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d103      	bne.n	8008804 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	691a      	ldr	r2, [r3, #16]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	615a      	str	r2, [r3, #20]
}
 800880a:	bf00      	nop
 800880c:	3714      	adds	r7, #20
 800880e:	46bd      	mov	sp, r7
 8008810:	bc80      	pop	{r7}
 8008812:	4770      	bx	lr
 8008814:	40012c00 	.word	0x40012c00
 8008818:	40013400 	.word	0x40013400
 800881c:	40000400 	.word	0x40000400
 8008820:	40000800 	.word	0x40000800
 8008824:	40000c00 	.word	0x40000c00

08008828 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008828:	b480      	push	{r7}
 800882a:	b087      	sub	sp, #28
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6a1b      	ldr	r3, [r3, #32]
 800883c:	f023 0201 	bic.w	r2, r3, #1
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f023 0303 	bic.w	r3, r3, #3
 800885e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	4313      	orrs	r3, r2
 8008868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f023 0302 	bic.w	r3, r3, #2
 8008870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	4313      	orrs	r3, r2
 800887a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a20      	ldr	r2, [pc, #128]	; (8008900 <TIM_OC1_SetConfig+0xd8>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d003      	beq.n	800888c <TIM_OC1_SetConfig+0x64>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a1f      	ldr	r2, [pc, #124]	; (8008904 <TIM_OC1_SetConfig+0xdc>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d10c      	bne.n	80088a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	f023 0308 	bic.w	r3, r3, #8
 8008892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	4313      	orrs	r3, r2
 800889c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f023 0304 	bic.w	r3, r3, #4
 80088a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a15      	ldr	r2, [pc, #84]	; (8008900 <TIM_OC1_SetConfig+0xd8>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d003      	beq.n	80088b6 <TIM_OC1_SetConfig+0x8e>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a14      	ldr	r2, [pc, #80]	; (8008904 <TIM_OC1_SetConfig+0xdc>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d111      	bne.n	80088da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	693a      	ldr	r2, [r7, #16]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	699b      	ldr	r3, [r3, #24]
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	693a      	ldr	r2, [r7, #16]
 80088de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	685a      	ldr	r2, [r3, #4]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	621a      	str	r2, [r3, #32]
}
 80088f4:	bf00      	nop
 80088f6:	371c      	adds	r7, #28
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bc80      	pop	{r7}
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	40012c00 	.word	0x40012c00
 8008904:	40013400 	.word	0x40013400

08008908 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008908:	b480      	push	{r7}
 800890a:	b087      	sub	sp, #28
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a1b      	ldr	r3, [r3, #32]
 8008916:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a1b      	ldr	r3, [r3, #32]
 800891c:	f023 0210 	bic.w	r2, r3, #16
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800893e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	021b      	lsls	r3, r3, #8
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	4313      	orrs	r3, r2
 800894a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	f023 0320 	bic.w	r3, r3, #32
 8008952:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	011b      	lsls	r3, r3, #4
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	4313      	orrs	r3, r2
 800895e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4a21      	ldr	r2, [pc, #132]	; (80089e8 <TIM_OC2_SetConfig+0xe0>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d003      	beq.n	8008970 <TIM_OC2_SetConfig+0x68>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a20      	ldr	r2, [pc, #128]	; (80089ec <TIM_OC2_SetConfig+0xe4>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d10d      	bne.n	800898c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	011b      	lsls	r3, r3, #4
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	4313      	orrs	r3, r2
 8008982:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800898a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a16      	ldr	r2, [pc, #88]	; (80089e8 <TIM_OC2_SetConfig+0xe0>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d003      	beq.n	800899c <TIM_OC2_SetConfig+0x94>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a15      	ldr	r2, [pc, #84]	; (80089ec <TIM_OC2_SetConfig+0xe4>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d113      	bne.n	80089c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	695b      	ldr	r3, [r3, #20]
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	693a      	ldr	r2, [r7, #16]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	693a      	ldr	r2, [r7, #16]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	693a      	ldr	r2, [r7, #16]
 80089c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	685a      	ldr	r2, [r3, #4]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	621a      	str	r2, [r3, #32]
}
 80089de:	bf00      	nop
 80089e0:	371c      	adds	r7, #28
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bc80      	pop	{r7}
 80089e6:	4770      	bx	lr
 80089e8:	40012c00 	.word	0x40012c00
 80089ec:	40013400 	.word	0x40013400

080089f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b087      	sub	sp, #28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a1b      	ldr	r3, [r3, #32]
 8008a04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f023 0303 	bic.w	r3, r3, #3
 8008a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	021b      	lsls	r3, r3, #8
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a21      	ldr	r2, [pc, #132]	; (8008ad0 <TIM_OC3_SetConfig+0xe0>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d003      	beq.n	8008a56 <TIM_OC3_SetConfig+0x66>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a20      	ldr	r2, [pc, #128]	; (8008ad4 <TIM_OC3_SetConfig+0xe4>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d10d      	bne.n	8008a72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	021b      	lsls	r3, r3, #8
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a16      	ldr	r2, [pc, #88]	; (8008ad0 <TIM_OC3_SetConfig+0xe0>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d003      	beq.n	8008a82 <TIM_OC3_SetConfig+0x92>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	4a15      	ldr	r2, [pc, #84]	; (8008ad4 <TIM_OC3_SetConfig+0xe4>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d113      	bne.n	8008aaa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	011b      	lsls	r3, r3, #4
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	011b      	lsls	r3, r3, #4
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	693a      	ldr	r2, [r7, #16]
 8008aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	685a      	ldr	r2, [r3, #4]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	697a      	ldr	r2, [r7, #20]
 8008ac2:	621a      	str	r2, [r3, #32]
}
 8008ac4:	bf00      	nop
 8008ac6:	371c      	adds	r7, #28
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bc80      	pop	{r7}
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	40012c00 	.word	0x40012c00
 8008ad4:	40013400 	.word	0x40013400

08008ad8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b087      	sub	sp, #28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a1b      	ldr	r3, [r3, #32]
 8008aec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	69db      	ldr	r3, [r3, #28]
 8008afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	021b      	lsls	r3, r3, #8
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	031b      	lsls	r3, r3, #12
 8008b2a:	693a      	ldr	r2, [r7, #16]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a11      	ldr	r2, [pc, #68]	; (8008b78 <TIM_OC4_SetConfig+0xa0>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d003      	beq.n	8008b40 <TIM_OC4_SetConfig+0x68>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a10      	ldr	r2, [pc, #64]	; (8008b7c <TIM_OC4_SetConfig+0xa4>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d109      	bne.n	8008b54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	695b      	ldr	r3, [r3, #20]
 8008b4c:	019b      	lsls	r3, r3, #6
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	685a      	ldr	r2, [r3, #4]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	693a      	ldr	r2, [r7, #16]
 8008b6c:	621a      	str	r2, [r3, #32]
}
 8008b6e:	bf00      	nop
 8008b70:	371c      	adds	r7, #28
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bc80      	pop	{r7}
 8008b76:	4770      	bx	lr
 8008b78:	40012c00 	.word	0x40012c00
 8008b7c:	40013400 	.word	0x40013400

08008b80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b087      	sub	sp, #28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6a1b      	ldr	r3, [r3, #32]
 8008b90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	f023 0201 	bic.w	r2, r3, #1
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008baa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	011b      	lsls	r3, r3, #4
 8008bb0:	693a      	ldr	r2, [r7, #16]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	f023 030a 	bic.w	r3, r3, #10
 8008bbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bbe:	697a      	ldr	r2, [r7, #20]
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	693a      	ldr	r2, [r7, #16]
 8008bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	621a      	str	r2, [r3, #32]
}
 8008bd2:	bf00      	nop
 8008bd4:	371c      	adds	r7, #28
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bc80      	pop	{r7}
 8008bda:	4770      	bx	lr

08008bdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b087      	sub	sp, #28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6a1b      	ldr	r3, [r3, #32]
 8008bec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6a1b      	ldr	r3, [r3, #32]
 8008bf2:	f023 0210 	bic.w	r2, r3, #16
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	031b      	lsls	r3, r3, #12
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c18:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	011b      	lsls	r3, r3, #4
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	693a      	ldr	r2, [r7, #16]
 8008c28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	621a      	str	r2, [r3, #32]
}
 8008c30:	bf00      	nop
 8008c32:	371c      	adds	r7, #28
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bc80      	pop	{r7}
 8008c38:	4770      	bx	lr

08008c3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b085      	sub	sp, #20
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
 8008c42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c52:	683a      	ldr	r2, [r7, #0]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	f043 0307 	orr.w	r3, r3, #7
 8008c5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	609a      	str	r2, [r3, #8]
}
 8008c64:	bf00      	nop
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bc80      	pop	{r7}
 8008c6c:	4770      	bx	lr

08008c6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c6e:	b480      	push	{r7}
 8008c70:	b087      	sub	sp, #28
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	60f8      	str	r0, [r7, #12]
 8008c76:	60b9      	str	r1, [r7, #8]
 8008c78:	607a      	str	r2, [r7, #4]
 8008c7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	021a      	lsls	r2, r3, #8
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	431a      	orrs	r2, r3
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	697a      	ldr	r2, [r7, #20]
 8008ca0:	609a      	str	r2, [r3, #8]
}
 8008ca2:	bf00      	nop
 8008ca4:	371c      	adds	r7, #28
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bc80      	pop	{r7}
 8008caa:	4770      	bx	lr

08008cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d101      	bne.n	8008cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	e050      	b.n	8008d66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2202      	movs	r2, #2
 8008cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a1b      	ldr	r2, [pc, #108]	; (8008d70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d018      	beq.n	8008d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a19      	ldr	r2, [pc, #100]	; (8008d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d013      	beq.n	8008d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d1a:	d00e      	beq.n	8008d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a15      	ldr	r2, [pc, #84]	; (8008d78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d009      	beq.n	8008d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a14      	ldr	r2, [pc, #80]	; (8008d7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d004      	beq.n	8008d3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a12      	ldr	r2, [pc, #72]	; (8008d80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d10c      	bne.n	8008d54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68ba      	ldr	r2, [r7, #8]
 8008d52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bc80      	pop	{r7}
 8008d6e:	4770      	bx	lr
 8008d70:	40012c00 	.word	0x40012c00
 8008d74:	40013400 	.word	0x40013400
 8008d78:	40000400 	.word	0x40000400
 8008d7c:	40000800 	.word	0x40000800
 8008d80:	40000c00 	.word	0x40000c00

08008d84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d101      	bne.n	8008d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e042      	b.n	8008e1c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d106      	bne.n	8008db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f7f9 f9a4 	bl	80020f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2224      	movs	r2, #36	; 0x24
 8008db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68da      	ldr	r2, [r3, #12]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008dc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fa07 	bl	80091dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	691a      	ldr	r2, [r3, #16]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	695a      	ldr	r2, [r3, #20]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008dec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68da      	ldr	r2, [r3, #12]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008dfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2220      	movs	r2, #32
 8008e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2220      	movs	r2, #32
 8008e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d101      	bne.n	8008e36 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e04a      	b.n	8008ecc <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d106      	bne.n	8008e50 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f7f9 f954 	bl	80020f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2224      	movs	r2, #36	; 0x24
 8008e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68da      	ldr	r2, [r3, #12]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 f9b7 	bl	80091dc <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	691a      	ldr	r2, [r3, #16]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	695a      	ldr	r2, [r3, #20]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8008e8c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	695a      	ldr	r2, [r3, #20]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f042 0208 	orr.w	r2, r2, #8
 8008e9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	68da      	ldr	r2, [r3, #12]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008eac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2220      	movs	r2, #32
 8008eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2220      	movs	r2, #32
 8008ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b08a      	sub	sp, #40	; 0x28
 8008ed8:	af02      	add	r7, sp, #8
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	603b      	str	r3, [r7, #0]
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	2b20      	cmp	r3, #32
 8008ef2:	d16d      	bne.n	8008fd0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d002      	beq.n	8008f00 <HAL_UART_Transmit+0x2c>
 8008efa:	88fb      	ldrh	r3, [r7, #6]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d101      	bne.n	8008f04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e066      	b.n	8008fd2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2221      	movs	r2, #33	; 0x21
 8008f0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f12:	f7f9 fa23 	bl	800235c <HAL_GetTick>
 8008f16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	88fa      	ldrh	r2, [r7, #6]
 8008f1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	88fa      	ldrh	r2, [r7, #6]
 8008f22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f2c:	d108      	bne.n	8008f40 <HAL_UART_Transmit+0x6c>
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d104      	bne.n	8008f40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008f36:	2300      	movs	r3, #0
 8008f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	61bb      	str	r3, [r7, #24]
 8008f3e:	e003      	b.n	8008f48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f44:	2300      	movs	r3, #0
 8008f46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008f48:	e02a      	b.n	8008fa0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	2200      	movs	r2, #0
 8008f52:	2180      	movs	r1, #128	; 0x80
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f000 f8d2 	bl	80090fe <UART_WaitOnFlagUntilTimeout>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d001      	beq.n	8008f64 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8008f60:	2303      	movs	r3, #3
 8008f62:	e036      	b.n	8008fd2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10b      	bne.n	8008f82 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	881b      	ldrh	r3, [r3, #0]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	3302      	adds	r3, #2
 8008f7e:	61bb      	str	r3, [r7, #24]
 8008f80:	e007      	b.n	8008f92 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	781a      	ldrb	r2, [r3, #0]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1cf      	bne.n	8008f4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	2140      	movs	r1, #64	; 0x40
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f000 f8a2 	bl	80090fe <UART_WaitOnFlagUntilTimeout>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d001      	beq.n	8008fc4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	e006      	b.n	8008fd2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2220      	movs	r2, #32
 8008fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	e000      	b.n	8008fd2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008fd0:	2302      	movs	r3, #2
  }
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3720      	adds	r7, #32
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b08a      	sub	sp, #40	; 0x28
 8008fde:	af02      	add	r7, sp, #8
 8008fe0:	60f8      	str	r0, [r7, #12]
 8008fe2:	60b9      	str	r1, [r7, #8]
 8008fe4:	603b      	str	r3, [r7, #0]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008fea:	2300      	movs	r3, #0
 8008fec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	2b20      	cmp	r3, #32
 8008ff8:	d17c      	bne.n	80090f4 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d002      	beq.n	8009006 <HAL_UART_Receive+0x2c>
 8009000:	88fb      	ldrh	r3, [r7, #6]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d101      	bne.n	800900a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e075      	b.n	80090f6 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2200      	movs	r2, #0
 800900e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2222      	movs	r2, #34	; 0x22
 8009014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800901e:	f7f9 f99d 	bl	800235c <HAL_GetTick>
 8009022:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	88fa      	ldrh	r2, [r7, #6]
 8009028:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	88fa      	ldrh	r2, [r7, #6]
 800902e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009038:	d108      	bne.n	800904c <HAL_UART_Receive+0x72>
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d104      	bne.n	800904c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8009042:	2300      	movs	r3, #0
 8009044:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	61bb      	str	r3, [r7, #24]
 800904a:	e003      	b.n	8009054 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009050:	2300      	movs	r3, #0
 8009052:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009054:	e043      	b.n	80090de <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	2200      	movs	r2, #0
 800905e:	2120      	movs	r1, #32
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f000 f84c 	bl	80090fe <UART_WaitOnFlagUntilTimeout>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d001      	beq.n	8009070 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800906c:	2303      	movs	r3, #3
 800906e:	e042      	b.n	80090f6 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10c      	bne.n	8009090 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	b29b      	uxth	r3, r3
 800907e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009082:	b29a      	uxth	r2, r3
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	3302      	adds	r3, #2
 800908c:	61bb      	str	r3, [r7, #24]
 800908e:	e01f      	b.n	80090d0 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009098:	d007      	beq.n	80090aa <HAL_UART_Receive+0xd0>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10a      	bne.n	80090b8 <HAL_UART_Receive+0xde>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d106      	bne.n	80090b8 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	b2da      	uxtb	r2, r3
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	701a      	strb	r2, [r3, #0]
 80090b6:	e008      	b.n	80090ca <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	3301      	adds	r3, #1
 80090ce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	3b01      	subs	r3, #1
 80090d8:	b29a      	uxth	r2, r3
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d1b6      	bne.n	8009056 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2220      	movs	r2, #32
 80090ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80090f0:	2300      	movs	r3, #0
 80090f2:	e000      	b.n	80090f6 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80090f4:	2302      	movs	r3, #2
  }
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3720      	adds	r7, #32
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b090      	sub	sp, #64	; 0x40
 8009102:	af00      	add	r7, sp, #0
 8009104:	60f8      	str	r0, [r7, #12]
 8009106:	60b9      	str	r1, [r7, #8]
 8009108:	603b      	str	r3, [r7, #0]
 800910a:	4613      	mov	r3, r2
 800910c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800910e:	e050      	b.n	80091b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009116:	d04c      	beq.n	80091b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800911a:	2b00      	cmp	r3, #0
 800911c:	d007      	beq.n	800912e <UART_WaitOnFlagUntilTimeout+0x30>
 800911e:	f7f9 f91d 	bl	800235c <HAL_GetTick>
 8009122:	4602      	mov	r2, r0
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800912a:	429a      	cmp	r2, r3
 800912c:	d241      	bcs.n	80091b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	330c      	adds	r3, #12
 8009134:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009138:	e853 3f00 	ldrex	r3, [r3]
 800913c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800913e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009140:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	330c      	adds	r3, #12
 800914c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800914e:	637a      	str	r2, [r7, #52]	; 0x34
 8009150:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009152:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009154:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009156:	e841 2300 	strex	r3, r2, [r1]
 800915a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800915c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1e5      	bne.n	800912e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	3314      	adds	r3, #20
 8009168:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	e853 3f00 	ldrex	r3, [r3]
 8009170:	613b      	str	r3, [r7, #16]
   return(result);
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	f023 0301 	bic.w	r3, r3, #1
 8009178:	63bb      	str	r3, [r7, #56]	; 0x38
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	3314      	adds	r3, #20
 8009180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009182:	623a      	str	r2, [r7, #32]
 8009184:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009186:	69f9      	ldr	r1, [r7, #28]
 8009188:	6a3a      	ldr	r2, [r7, #32]
 800918a:	e841 2300 	strex	r3, r2, [r1]
 800918e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1e5      	bne.n	8009162 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2220      	movs	r2, #32
 800919a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2220      	movs	r2, #32
 80091a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80091ae:	2303      	movs	r3, #3
 80091b0:	e00f      	b.n	80091d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	4013      	ands	r3, r2
 80091bc:	68ba      	ldr	r2, [r7, #8]
 80091be:	429a      	cmp	r2, r3
 80091c0:	bf0c      	ite	eq
 80091c2:	2301      	moveq	r3, #1
 80091c4:	2300      	movne	r3, #0
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	461a      	mov	r2, r3
 80091ca:	79fb      	ldrb	r3, [r7, #7]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d09f      	beq.n	8009110 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3740      	adds	r7, #64	; 0x40
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
	...

080091dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	68da      	ldr	r2, [r3, #12]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	430a      	orrs	r2, r1
 80091f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	689a      	ldr	r2, [r3, #8]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	431a      	orrs	r2, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	695b      	ldr	r3, [r3, #20]
 8009208:	4313      	orrs	r3, r2
 800920a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009216:	f023 030c 	bic.w	r3, r3, #12
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	6812      	ldr	r2, [r2, #0]
 800921e:	68b9      	ldr	r1, [r7, #8]
 8009220:	430b      	orrs	r3, r1
 8009222:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	695b      	ldr	r3, [r3, #20]
 800922a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	699a      	ldr	r2, [r3, #24]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	430a      	orrs	r2, r1
 8009238:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a2c      	ldr	r2, [pc, #176]	; (80092f0 <UART_SetConfig+0x114>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d103      	bne.n	800924c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009244:	f7fe ff5c 	bl	8008100 <HAL_RCC_GetPCLK2Freq>
 8009248:	60f8      	str	r0, [r7, #12]
 800924a:	e002      	b.n	8009252 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800924c:	f7fe ff44 	bl	80080d8 <HAL_RCC_GetPCLK1Freq>
 8009250:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	4613      	mov	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4413      	add	r3, r2
 800925a:	009a      	lsls	r2, r3, #2
 800925c:	441a      	add	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	fbb2 f3f3 	udiv	r3, r2, r3
 8009268:	4a22      	ldr	r2, [pc, #136]	; (80092f4 <UART_SetConfig+0x118>)
 800926a:	fba2 2303 	umull	r2, r3, r2, r3
 800926e:	095b      	lsrs	r3, r3, #5
 8009270:	0119      	lsls	r1, r3, #4
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	4613      	mov	r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	4413      	add	r3, r2
 800927a:	009a      	lsls	r2, r3, #2
 800927c:	441a      	add	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	fbb2 f2f3 	udiv	r2, r2, r3
 8009288:	4b1a      	ldr	r3, [pc, #104]	; (80092f4 <UART_SetConfig+0x118>)
 800928a:	fba3 0302 	umull	r0, r3, r3, r2
 800928e:	095b      	lsrs	r3, r3, #5
 8009290:	2064      	movs	r0, #100	; 0x64
 8009292:	fb00 f303 	mul.w	r3, r0, r3
 8009296:	1ad3      	subs	r3, r2, r3
 8009298:	011b      	lsls	r3, r3, #4
 800929a:	3332      	adds	r3, #50	; 0x32
 800929c:	4a15      	ldr	r2, [pc, #84]	; (80092f4 <UART_SetConfig+0x118>)
 800929e:	fba2 2303 	umull	r2, r3, r2, r3
 80092a2:	095b      	lsrs	r3, r3, #5
 80092a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092a8:	4419      	add	r1, r3
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	4613      	mov	r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	4413      	add	r3, r2
 80092b2:	009a      	lsls	r2, r3, #2
 80092b4:	441a      	add	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80092c0:	4b0c      	ldr	r3, [pc, #48]	; (80092f4 <UART_SetConfig+0x118>)
 80092c2:	fba3 0302 	umull	r0, r3, r3, r2
 80092c6:	095b      	lsrs	r3, r3, #5
 80092c8:	2064      	movs	r0, #100	; 0x64
 80092ca:	fb00 f303 	mul.w	r3, r0, r3
 80092ce:	1ad3      	subs	r3, r2, r3
 80092d0:	011b      	lsls	r3, r3, #4
 80092d2:	3332      	adds	r3, #50	; 0x32
 80092d4:	4a07      	ldr	r2, [pc, #28]	; (80092f4 <UART_SetConfig+0x118>)
 80092d6:	fba2 2303 	umull	r2, r3, r2, r3
 80092da:	095b      	lsrs	r3, r3, #5
 80092dc:	f003 020f 	and.w	r2, r3, #15
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	440a      	add	r2, r1
 80092e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80092e8:	bf00      	nop
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	40013800 	.word	0x40013800
 80092f4:	51eb851f 	.word	0x51eb851f

080092f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80092f8:	b084      	sub	sp, #16
 80092fa:	b480      	push	{r7}
 80092fc:	b083      	sub	sp, #12
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
 8009302:	f107 0014 	add.w	r0, r7, #20
 8009306:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	bc80      	pop	{r7}
 8009314:	b004      	add	sp, #16
 8009316:	4770      	bx	lr

08009318 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009328:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800932c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	b29a      	uxth	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	bc80      	pop	{r7}
 8009342:	4770      	bx	lr

08009344 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800934c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009350:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009358:	b29a      	uxth	r2, r3
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	b29b      	uxth	r3, r3
 800935e:	43db      	mvns	r3, r3
 8009360:	b29b      	uxth	r3, r3
 8009362:	4013      	ands	r3, r2
 8009364:	b29a      	uxth	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3714      	adds	r7, #20
 8009372:	46bd      	mov	sp, r7
 8009374:	bc80      	pop	{r7}
 8009376:	4770      	bx	lr

08009378 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	370c      	adds	r7, #12
 800938a:	46bd      	mov	sp, r7
 800938c:	bc80      	pop	{r7}
 800938e:	4770      	bx	lr

08009390 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009390:	b084      	sub	sp, #16
 8009392:	b480      	push	{r7}
 8009394:	b083      	sub	sp, #12
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
 800939a:	f107 0014 	add.w	r0, r7, #20
 800939e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2201      	movs	r2, #1
 80093a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bc80      	pop	{r7}
 80093cc:	b004      	add	sp, #16
 80093ce:	4770      	bx	lr

080093d0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b09d      	sub	sp, #116	; 0x74
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	4413      	add	r3, r2
 80093ea:	881b      	ldrh	r3, [r3, #0]
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80093f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093f6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	78db      	ldrb	r3, [r3, #3]
 80093fe:	2b03      	cmp	r3, #3
 8009400:	d81f      	bhi.n	8009442 <USB_ActivateEndpoint+0x72>
 8009402:	a201      	add	r2, pc, #4	; (adr r2, 8009408 <USB_ActivateEndpoint+0x38>)
 8009404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009408:	08009419 	.word	0x08009419
 800940c:	08009435 	.word	0x08009435
 8009410:	0800944b 	.word	0x0800944b
 8009414:	08009427 	.word	0x08009427
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009418:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800941c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009420:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009424:	e012      	b.n	800944c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009426:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800942a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800942e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009432:	e00b      	b.n	800944c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009434:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009438:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800943c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009440:	e004      	b.n	800944c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009448:	e000      	b.n	800944c <USB_ActivateEndpoint+0x7c>
      break;
 800944a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	441a      	add	r2, r3
 8009456:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800945a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800945e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800946a:	b29b      	uxth	r3, r3
 800946c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	009b      	lsls	r3, r3, #2
 8009476:	4413      	add	r3, r2
 8009478:	881b      	ldrh	r3, [r3, #0]
 800947a:	b29b      	uxth	r3, r3
 800947c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009484:	b29a      	uxth	r2, r3
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	b29b      	uxth	r3, r3
 800948c:	4313      	orrs	r3, r2
 800948e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	441a      	add	r2, r3
 800949c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80094a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	7b1b      	ldrb	r3, [r3, #12]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f040 8178 	bne.w	80097ae <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	785b      	ldrb	r3, [r3, #1]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f000 8084 	beq.w	80095d0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	61bb      	str	r3, [r7, #24]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	461a      	mov	r2, r3
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	4413      	add	r3, r2
 80094da:	61bb      	str	r3, [r7, #24]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	011a      	lsls	r2, r3, #4
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	4413      	add	r3, r2
 80094e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094ea:	617b      	str	r3, [r7, #20]
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	88db      	ldrh	r3, [r3, #6]
 80094f0:	085b      	lsrs	r3, r3, #1
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	005b      	lsls	r3, r3, #1
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	4413      	add	r3, r2
 8009506:	881b      	ldrh	r3, [r3, #0]
 8009508:	827b      	strh	r3, [r7, #18]
 800950a:	8a7b      	ldrh	r3, [r7, #18]
 800950c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009510:	2b00      	cmp	r3, #0
 8009512:	d01b      	beq.n	800954c <USB_ActivateEndpoint+0x17c>
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4413      	add	r3, r2
 800951e:	881b      	ldrh	r3, [r3, #0]
 8009520:	b29b      	uxth	r3, r3
 8009522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800952a:	823b      	strh	r3, [r7, #16]
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	441a      	add	r2, r3
 8009536:	8a3b      	ldrh	r3, [r7, #16]
 8009538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800953c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009544:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009548:	b29b      	uxth	r3, r3
 800954a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	78db      	ldrb	r3, [r3, #3]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d020      	beq.n	8009596 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	4413      	add	r3, r2
 800955e:	881b      	ldrh	r3, [r3, #0]
 8009560:	b29b      	uxth	r3, r3
 8009562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800956a:	81bb      	strh	r3, [r7, #12]
 800956c:	89bb      	ldrh	r3, [r7, #12]
 800956e:	f083 0320 	eor.w	r3, r3, #32
 8009572:	81bb      	strh	r3, [r7, #12]
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	441a      	add	r2, r3
 800957e:	89bb      	ldrh	r3, [r7, #12]
 8009580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800958c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009590:	b29b      	uxth	r3, r3
 8009592:	8013      	strh	r3, [r2, #0]
 8009594:	e2d5      	b.n	8009b42 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	4413      	add	r3, r2
 80095a0:	881b      	ldrh	r3, [r3, #0]
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095ac:	81fb      	strh	r3, [r7, #14]
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	441a      	add	r2, r3
 80095b8:	89fb      	ldrh	r3, [r7, #14]
 80095ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	8013      	strh	r3, [r2, #0]
 80095ce:	e2b8      	b.n	8009b42 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	633b      	str	r3, [r7, #48]	; 0x30
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095da:	b29b      	uxth	r3, r3
 80095dc:	461a      	mov	r2, r3
 80095de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e0:	4413      	add	r3, r2
 80095e2:	633b      	str	r3, [r7, #48]	; 0x30
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	011a      	lsls	r2, r3, #4
 80095ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ec:	4413      	add	r3, r2
 80095ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80095f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	88db      	ldrh	r3, [r3, #6]
 80095f8:	085b      	lsrs	r3, r3, #1
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	005b      	lsls	r3, r3, #1
 80095fe:	b29a      	uxth	r2, r3
 8009600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009602:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	62bb      	str	r3, [r7, #40]	; 0x28
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800960e:	b29b      	uxth	r3, r3
 8009610:	461a      	mov	r2, r3
 8009612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009614:	4413      	add	r3, r2
 8009616:	62bb      	str	r3, [r7, #40]	; 0x28
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	011a      	lsls	r2, r3, #4
 800961e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009620:	4413      	add	r3, r2
 8009622:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009626:	627b      	str	r3, [r7, #36]	; 0x24
 8009628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962a:	881b      	ldrh	r3, [r3, #0]
 800962c:	b29b      	uxth	r3, r3
 800962e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009632:	b29a      	uxth	r2, r3
 8009634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009636:	801a      	strh	r2, [r3, #0]
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	2b3e      	cmp	r3, #62	; 0x3e
 800963e:	d91d      	bls.n	800967c <USB_ActivateEndpoint+0x2ac>
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	095b      	lsrs	r3, r3, #5
 8009646:	66bb      	str	r3, [r7, #104]	; 0x68
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	f003 031f 	and.w	r3, r3, #31
 8009650:	2b00      	cmp	r3, #0
 8009652:	d102      	bne.n	800965a <USB_ActivateEndpoint+0x28a>
 8009654:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009656:	3b01      	subs	r3, #1
 8009658:	66bb      	str	r3, [r7, #104]	; 0x68
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965c:	881b      	ldrh	r3, [r3, #0]
 800965e:	b29a      	uxth	r2, r3
 8009660:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009662:	b29b      	uxth	r3, r3
 8009664:	029b      	lsls	r3, r3, #10
 8009666:	b29b      	uxth	r3, r3
 8009668:	4313      	orrs	r3, r2
 800966a:	b29b      	uxth	r3, r3
 800966c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009674:	b29a      	uxth	r2, r3
 8009676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009678:	801a      	strh	r2, [r3, #0]
 800967a:	e026      	b.n	80096ca <USB_ActivateEndpoint+0x2fa>
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	691b      	ldr	r3, [r3, #16]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10a      	bne.n	800969a <USB_ActivateEndpoint+0x2ca>
 8009684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009686:	881b      	ldrh	r3, [r3, #0]
 8009688:	b29b      	uxth	r3, r3
 800968a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800968e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009692:	b29a      	uxth	r2, r3
 8009694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009696:	801a      	strh	r2, [r3, #0]
 8009698:	e017      	b.n	80096ca <USB_ActivateEndpoint+0x2fa>
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	691b      	ldr	r3, [r3, #16]
 800969e:	085b      	lsrs	r3, r3, #1
 80096a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	f003 0301 	and.w	r3, r3, #1
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d002      	beq.n	80096b4 <USB_ActivateEndpoint+0x2e4>
 80096ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096b0:	3301      	adds	r3, #1
 80096b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80096b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b6:	881b      	ldrh	r3, [r3, #0]
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096bc:	b29b      	uxth	r3, r3
 80096be:	029b      	lsls	r3, r3, #10
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	4313      	orrs	r3, r2
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4413      	add	r3, r2
 80096d4:	881b      	ldrh	r3, [r3, #0]
 80096d6:	847b      	strh	r3, [r7, #34]	; 0x22
 80096d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80096da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d01b      	beq.n	800971a <USB_ActivateEndpoint+0x34a>
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	4413      	add	r3, r2
 80096ec:	881b      	ldrh	r3, [r3, #0]
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096f8:	843b      	strh	r3, [r7, #32]
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	441a      	add	r2, r3
 8009704:	8c3b      	ldrh	r3, [r7, #32]
 8009706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800970a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800970e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009716:	b29b      	uxth	r3, r3
 8009718:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d124      	bne.n	800976c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4413      	add	r3, r2
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	b29b      	uxth	r3, r3
 8009730:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009738:	83bb      	strh	r3, [r7, #28]
 800973a:	8bbb      	ldrh	r3, [r7, #28]
 800973c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009740:	83bb      	strh	r3, [r7, #28]
 8009742:	8bbb      	ldrh	r3, [r7, #28]
 8009744:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009748:	83bb      	strh	r3, [r7, #28]
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	441a      	add	r2, r3
 8009754:	8bbb      	ldrh	r3, [r7, #28]
 8009756:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800975a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800975e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009766:	b29b      	uxth	r3, r3
 8009768:	8013      	strh	r3, [r2, #0]
 800976a:	e1ea      	b.n	8009b42 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	4413      	add	r3, r2
 8009776:	881b      	ldrh	r3, [r3, #0]
 8009778:	b29b      	uxth	r3, r3
 800977a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800977e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009782:	83fb      	strh	r3, [r7, #30]
 8009784:	8bfb      	ldrh	r3, [r7, #30]
 8009786:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800978a:	83fb      	strh	r3, [r7, #30]
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	441a      	add	r2, r3
 8009796:	8bfb      	ldrh	r3, [r7, #30]
 8009798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800979c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	8013      	strh	r3, [r2, #0]
 80097ac:	e1c9      	b.n	8009b42 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	78db      	ldrb	r3, [r3, #3]
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d11e      	bne.n	80097f4 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	881b      	ldrh	r3, [r3, #0]
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097cc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	441a      	add	r2, r3
 80097da:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80097de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097e6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80097ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	8013      	strh	r3, [r2, #0]
 80097f2:	e01d      	b.n	8009830 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	881b      	ldrh	r3, [r3, #0]
 8009800:	b29b      	uxth	r3, r3
 8009802:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800980a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	441a      	add	r2, r3
 8009818:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800981c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800982c:	b29b      	uxth	r3, r3
 800982e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800983a:	b29b      	uxth	r3, r3
 800983c:	461a      	mov	r2, r3
 800983e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009840:	4413      	add	r3, r2
 8009842:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	011a      	lsls	r2, r3, #4
 800984a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800984c:	4413      	add	r3, r2
 800984e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009852:	65bb      	str	r3, [r7, #88]	; 0x58
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	891b      	ldrh	r3, [r3, #8]
 8009858:	085b      	lsrs	r3, r3, #1
 800985a:	b29b      	uxth	r3, r3
 800985c:	005b      	lsls	r3, r3, #1
 800985e:	b29a      	uxth	r2, r3
 8009860:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009862:	801a      	strh	r2, [r3, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	657b      	str	r3, [r7, #84]	; 0x54
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800986e:	b29b      	uxth	r3, r3
 8009870:	461a      	mov	r2, r3
 8009872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009874:	4413      	add	r3, r2
 8009876:	657b      	str	r3, [r7, #84]	; 0x54
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	011a      	lsls	r2, r3, #4
 800987e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009880:	4413      	add	r3, r2
 8009882:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009886:	653b      	str	r3, [r7, #80]	; 0x50
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	895b      	ldrh	r3, [r3, #10]
 800988c:	085b      	lsrs	r3, r3, #1
 800988e:	b29b      	uxth	r3, r3
 8009890:	005b      	lsls	r3, r3, #1
 8009892:	b29a      	uxth	r2, r3
 8009894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009896:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	785b      	ldrb	r3, [r3, #1]
 800989c:	2b00      	cmp	r3, #0
 800989e:	f040 8093 	bne.w	80099c8 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4413      	add	r3, r2
 80098ac:	881b      	ldrh	r3, [r3, #0]
 80098ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80098b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80098b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d01b      	beq.n	80098f6 <USB_ActivateEndpoint+0x526>
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	4413      	add	r3, r2
 80098c8:	881b      	ldrh	r3, [r3, #0]
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	441a      	add	r2, r3
 80098e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80098e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80098ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	881b      	ldrh	r3, [r3, #0]
 8009902:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009904:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800990a:	2b00      	cmp	r3, #0
 800990c:	d01b      	beq.n	8009946 <USB_ActivateEndpoint+0x576>
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	881b      	ldrh	r3, [r3, #0]
 800991a:	b29b      	uxth	r3, r3
 800991c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009924:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	441a      	add	r2, r3
 8009930:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800993a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800993e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009942:	b29b      	uxth	r3, r3
 8009944:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	b29b      	uxth	r3, r3
 8009954:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800995c:	873b      	strh	r3, [r7, #56]	; 0x38
 800995e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009960:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009964:	873b      	strh	r3, [r7, #56]	; 0x38
 8009966:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009968:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800996c:	873b      	strh	r3, [r7, #56]	; 0x38
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	441a      	add	r2, r3
 8009978:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800997a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800997e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800998a:	b29b      	uxth	r3, r3
 800998c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4413      	add	r3, r2
 8009998:	881b      	ldrh	r3, [r3, #0]
 800999a:	b29b      	uxth	r3, r3
 800999c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099a4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	441a      	add	r2, r3
 80099b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80099b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	8013      	strh	r3, [r2, #0]
 80099c6:	e0bc      	b.n	8009b42 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	4413      	add	r3, r2
 80099d2:	881b      	ldrh	r3, [r3, #0]
 80099d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80099d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80099dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d01d      	beq.n	8009a20 <USB_ActivateEndpoint+0x650>
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4413      	add	r3, r2
 80099ee:	881b      	ldrh	r3, [r3, #0]
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099fa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	441a      	add	r2, r3
 8009a08:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	4413      	add	r3, r2
 8009a2a:	881b      	ldrh	r3, [r3, #0]
 8009a2c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009a30:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d01d      	beq.n	8009a78 <USB_ActivateEndpoint+0x6a8>
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	4413      	add	r3, r2
 8009a46:	881b      	ldrh	r3, [r3, #0]
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a52:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	009b      	lsls	r3, r3, #2
 8009a5e:	441a      	add	r2, r3
 8009a60:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	78db      	ldrb	r3, [r3, #3]
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d024      	beq.n	8009aca <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	881b      	ldrh	r3, [r3, #0]
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a96:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009a9a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009a9e:	f083 0320 	eor.w	r3, r3, #32
 8009aa2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	441a      	add	r2, r3
 8009ab0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	8013      	strh	r3, [r2, #0]
 8009ac8:	e01d      	b.n	8009b06 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4413      	add	r3, r2
 8009ad4:	881b      	ldrh	r3, [r3, #0]
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ae0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	441a      	add	r2, r3
 8009aee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	4413      	add	r3, r2
 8009b10:	881b      	ldrh	r3, [r3, #0]
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b1c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	441a      	add	r2, r3
 8009b2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009b42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3774      	adds	r7, #116	; 0x74
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bc80      	pop	{r7}
 8009b4e:	4770      	bx	lr

08009b50 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b08d      	sub	sp, #52	; 0x34
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	7b1b      	ldrb	r3, [r3, #12]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f040 808e 	bne.w	8009c80 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	785b      	ldrb	r3, [r3, #1]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d044      	beq.n	8009bf6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	4413      	add	r3, r2
 8009b76:	881b      	ldrh	r3, [r3, #0]
 8009b78:	81bb      	strh	r3, [r7, #12]
 8009b7a:	89bb      	ldrh	r3, [r7, #12]
 8009b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d01b      	beq.n	8009bbc <USB_DeactivateEndpoint+0x6c>
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4413      	add	r3, r2
 8009b8e:	881b      	ldrh	r3, [r3, #0]
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b9a:	817b      	strh	r3, [r7, #10]
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	441a      	add	r2, r3
 8009ba6:	897b      	ldrh	r3, [r7, #10]
 8009ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009bbc:	687a      	ldr	r2, [r7, #4]
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4413      	add	r3, r2
 8009bc6:	881b      	ldrh	r3, [r3, #0]
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bd2:	813b      	strh	r3, [r7, #8]
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	441a      	add	r2, r3
 8009bde:	893b      	ldrh	r3, [r7, #8]
 8009be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	8013      	strh	r3, [r2, #0]
 8009bf4:	e192      	b.n	8009f1c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	4413      	add	r3, r2
 8009c00:	881b      	ldrh	r3, [r3, #0]
 8009c02:	827b      	strh	r3, [r7, #18]
 8009c04:	8a7b      	ldrh	r3, [r7, #18]
 8009c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d01b      	beq.n	8009c46 <USB_DeactivateEndpoint+0xf6>
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	4413      	add	r3, r2
 8009c18:	881b      	ldrh	r3, [r3, #0]
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c24:	823b      	strh	r3, [r7, #16]
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	441a      	add	r2, r3
 8009c30:	8a3b      	ldrh	r3, [r7, #16]
 8009c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	4413      	add	r3, r2
 8009c50:	881b      	ldrh	r3, [r3, #0]
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c5c:	81fb      	strh	r3, [r7, #14]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	441a      	add	r2, r3
 8009c68:	89fb      	ldrh	r3, [r7, #14]
 8009c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	8013      	strh	r3, [r2, #0]
 8009c7e:	e14d      	b.n	8009f1c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	785b      	ldrb	r3, [r3, #1]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f040 80a5 	bne.w	8009dd4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	881b      	ldrh	r3, [r3, #0]
 8009c96:	843b      	strh	r3, [r7, #32]
 8009c98:	8c3b      	ldrh	r3, [r7, #32]
 8009c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d01b      	beq.n	8009cda <USB_DeactivateEndpoint+0x18a>
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	4413      	add	r3, r2
 8009cac:	881b      	ldrh	r3, [r3, #0]
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cb8:	83fb      	strh	r3, [r7, #30]
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	441a      	add	r2, r3
 8009cc4:	8bfb      	ldrh	r3, [r7, #30]
 8009cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	4413      	add	r3, r2
 8009ce4:	881b      	ldrh	r3, [r3, #0]
 8009ce6:	83bb      	strh	r3, [r7, #28]
 8009ce8:	8bbb      	ldrh	r3, [r7, #28]
 8009cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d01b      	beq.n	8009d2a <USB_DeactivateEndpoint+0x1da>
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	4413      	add	r3, r2
 8009cfc:	881b      	ldrh	r3, [r3, #0]
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d08:	837b      	strh	r3, [r7, #26]
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	441a      	add	r2, r3
 8009d14:	8b7b      	ldrh	r3, [r7, #26]
 8009d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4413      	add	r3, r2
 8009d34:	881b      	ldrh	r3, [r3, #0]
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d40:	833b      	strh	r3, [r7, #24]
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	441a      	add	r2, r3
 8009d4c:	8b3b      	ldrh	r3, [r7, #24]
 8009d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	4413      	add	r3, r2
 8009d6c:	881b      	ldrh	r3, [r3, #0]
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d78:	82fb      	strh	r3, [r7, #22]
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	441a      	add	r2, r3
 8009d84:	8afb      	ldrh	r3, [r7, #22]
 8009d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	4413      	add	r3, r2
 8009da4:	881b      	ldrh	r3, [r3, #0]
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009db0:	82bb      	strh	r3, [r7, #20]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	441a      	add	r2, r3
 8009dbc:	8abb      	ldrh	r3, [r7, #20]
 8009dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	8013      	strh	r3, [r2, #0]
 8009dd2:	e0a3      	b.n	8009f1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	4413      	add	r3, r2
 8009dde:	881b      	ldrh	r3, [r3, #0]
 8009de0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009de2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d01b      	beq.n	8009e24 <USB_DeactivateEndpoint+0x2d4>
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	4413      	add	r3, r2
 8009df6:	881b      	ldrh	r3, [r3, #0]
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e02:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	441a      	add	r2, r3
 8009e0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009e10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4413      	add	r3, r2
 8009e2e:	881b      	ldrh	r3, [r3, #0]
 8009e30:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009e32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d01b      	beq.n	8009e74 <USB_DeactivateEndpoint+0x324>
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	4413      	add	r3, r2
 8009e46:	881b      	ldrh	r3, [r3, #0]
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e52:	853b      	strh	r3, [r7, #40]	; 0x28
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	441a      	add	r2, r3
 8009e5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	4413      	add	r3, r2
 8009e7e:	881b      	ldrh	r3, [r3, #0]
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e8a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	441a      	add	r2, r3
 8009e96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ea0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	4413      	add	r3, r2
 8009eb6:	881b      	ldrh	r3, [r3, #0]
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ec2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	441a      	add	r2, r3
 8009ece:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	881b      	ldrh	r3, [r3, #0]
 8009ef0:	b29b      	uxth	r3, r3
 8009ef2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009efa:	847b      	strh	r3, [r7, #34]	; 0x22
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	441a      	add	r2, r3
 8009f06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3734      	adds	r7, #52	; 0x34
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bc80      	pop	{r7}
 8009f26:	4770      	bx	lr

08009f28 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b0c2      	sub	sp, #264	; 0x108
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f36:	6018      	str	r0, [r3, #0]
 8009f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f40:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	785b      	ldrb	r3, [r3, #1]
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	f040 86b7 	bne.w	800acc2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	699a      	ldr	r2, [r3, #24]
 8009f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	691b      	ldr	r3, [r3, #16]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d908      	bls.n	8009f82 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009f80:	e007      	b.n	8009f92 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	7b1b      	ldrb	r3, [r3, #12]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d13a      	bne.n	800a018 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	6959      	ldr	r1, [r3, #20]
 8009fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	88da      	ldrh	r2, [r3, #6]
 8009fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009fc4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009fc8:	6800      	ldr	r0, [r0, #0]
 8009fca:	f001 fc9c 	bl	800b906 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	613b      	str	r3, [r7, #16]
 8009fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	461a      	mov	r2, r3
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	4413      	add	r3, r2
 8009ff0:	613b      	str	r3, [r7, #16]
 8009ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	011a      	lsls	r2, r3, #4
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	4413      	add	r3, r2
 800a004:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a008:	60fb      	str	r3, [r7, #12]
 800a00a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a00e:	b29a      	uxth	r2, r3
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	801a      	strh	r2, [r3, #0]
 800a014:	f000 be1f 	b.w	800ac56 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a01c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	78db      	ldrb	r3, [r3, #3]
 800a024:	2b02      	cmp	r3, #2
 800a026:	f040 8462 	bne.w	800a8ee <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a02a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a02e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	6a1a      	ldr	r2, [r3, #32]
 800a036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a03a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	691b      	ldr	r3, [r3, #16]
 800a042:	429a      	cmp	r2, r3
 800a044:	f240 83df 	bls.w	800a806 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a04c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4413      	add	r3, r2
 800a062:	881b      	ldrh	r3, [r3, #0]
 800a064:	b29b      	uxth	r3, r3
 800a066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a06a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a06e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a076:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	441a      	add	r2, r3
 800a08c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a098:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a09c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a0a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	6a1a      	ldr	r2, [r3, #32]
 800a0b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0b4:	1ad2      	subs	r2, r2, r3
 800a0b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a0c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4413      	add	r3, r2
 800a0dc:	881b      	ldrh	r3, [r3, #0]
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f000 81c7 	beq.w	800a478 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a0ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	633b      	str	r3, [r7, #48]	; 0x30
 800a0f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	785b      	ldrb	r3, [r3, #1]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d177      	bne.n	800a1f6 <USB_EPStartXfer+0x2ce>
 800a106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a10a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	62bb      	str	r3, [r7, #40]	; 0x28
 800a112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a116:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a120:	b29b      	uxth	r3, r3
 800a122:	461a      	mov	r2, r3
 800a124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a126:	4413      	add	r3, r2
 800a128:	62bb      	str	r3, [r7, #40]	; 0x28
 800a12a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a12e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	011a      	lsls	r2, r3, #4
 800a138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13a:	4413      	add	r3, r2
 800a13c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a140:	627b      	str	r3, [r7, #36]	; 0x24
 800a142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a144:	881b      	ldrh	r3, [r3, #0]
 800a146:	b29b      	uxth	r3, r3
 800a148:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a150:	801a      	strh	r2, [r3, #0]
 800a152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a156:	2b3e      	cmp	r3, #62	; 0x3e
 800a158:	d921      	bls.n	800a19e <USB_EPStartXfer+0x276>
 800a15a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a15e:	095b      	lsrs	r3, r3, #5
 800a160:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a168:	f003 031f 	and.w	r3, r3, #31
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d104      	bne.n	800a17a <USB_EPStartXfer+0x252>
 800a170:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a174:	3b01      	subs	r3, #1
 800a176:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17c:	881b      	ldrh	r3, [r3, #0]
 800a17e:	b29a      	uxth	r2, r3
 800a180:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a184:	b29b      	uxth	r3, r3
 800a186:	029b      	lsls	r3, r3, #10
 800a188:	b29b      	uxth	r3, r3
 800a18a:	4313      	orrs	r3, r2
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a196:	b29a      	uxth	r2, r3
 800a198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19a:	801a      	strh	r2, [r3, #0]
 800a19c:	e050      	b.n	800a240 <USB_EPStartXfer+0x318>
 800a19e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d10a      	bne.n	800a1bc <USB_EPStartXfer+0x294>
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a8:	881b      	ldrh	r3, [r3, #0]
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b8:	801a      	strh	r2, [r3, #0]
 800a1ba:	e041      	b.n	800a240 <USB_EPStartXfer+0x318>
 800a1bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1c0:	085b      	lsrs	r3, r3, #1
 800a1c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a1c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1ca:	f003 0301 	and.w	r3, r3, #1
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d004      	beq.n	800a1dc <USB_EPStartXfer+0x2b4>
 800a1d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1de:	881b      	ldrh	r3, [r3, #0]
 800a1e0:	b29a      	uxth	r2, r3
 800a1e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	029b      	lsls	r3, r3, #10
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	b29a      	uxth	r2, r3
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f2:	801a      	strh	r2, [r3, #0]
 800a1f4:	e024      	b.n	800a240 <USB_EPStartXfer+0x318>
 800a1f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	785b      	ldrb	r3, [r3, #1]
 800a202:	2b01      	cmp	r3, #1
 800a204:	d11c      	bne.n	800a240 <USB_EPStartXfer+0x318>
 800a206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a20a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a214:	b29b      	uxth	r3, r3
 800a216:	461a      	mov	r2, r3
 800a218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a21a:	4413      	add	r3, r2
 800a21c:	633b      	str	r3, [r7, #48]	; 0x30
 800a21e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	011a      	lsls	r2, r3, #4
 800a22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22e:	4413      	add	r3, r2
 800a230:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a234:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	895b      	ldrh	r3, [r3, #10]
 800a24c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	6959      	ldr	r1, [r3, #20]
 800a25c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a260:	b29b      	uxth	r3, r3
 800a262:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a266:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a26a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a26e:	6800      	ldr	r0, [r0, #0]
 800a270:	f001 fb49 	bl	800b906 <USB_WritePMA>
            ep->xfer_buff += len;
 800a274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	695a      	ldr	r2, [r3, #20]
 800a280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a284:	441a      	add	r2, r3
 800a286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a28a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	6a1a      	ldr	r2, [r3, #32]
 800a29e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d90f      	bls.n	800a2ce <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a2ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	6a1a      	ldr	r2, [r3, #32]
 800a2ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2be:	1ad2      	subs	r2, r2, r3
 800a2c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	621a      	str	r2, [r3, #32]
 800a2cc:	e00e      	b.n	800a2ec <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a2ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	6a1b      	ldr	r3, [r3, #32]
 800a2da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a2de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a2ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	785b      	ldrb	r3, [r3, #1]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d177      	bne.n	800a3ec <USB_EPStartXfer+0x4c4>
 800a2fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a300:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	61bb      	str	r3, [r7, #24]
 800a308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a30c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a316:	b29b      	uxth	r3, r3
 800a318:	461a      	mov	r2, r3
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	4413      	add	r3, r2
 800a31e:	61bb      	str	r3, [r7, #24]
 800a320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	011a      	lsls	r2, r3, #4
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	4413      	add	r3, r2
 800a332:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a336:	617b      	str	r3, [r7, #20]
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	881b      	ldrh	r3, [r3, #0]
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a342:	b29a      	uxth	r2, r3
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	801a      	strh	r2, [r3, #0]
 800a348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a34c:	2b3e      	cmp	r3, #62	; 0x3e
 800a34e:	d921      	bls.n	800a394 <USB_EPStartXfer+0x46c>
 800a350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a354:	095b      	lsrs	r3, r3, #5
 800a356:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a35e:	f003 031f 	and.w	r3, r3, #31
 800a362:	2b00      	cmp	r3, #0
 800a364:	d104      	bne.n	800a370 <USB_EPStartXfer+0x448>
 800a366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a36a:	3b01      	subs	r3, #1
 800a36c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	881b      	ldrh	r3, [r3, #0]
 800a374:	b29a      	uxth	r2, r3
 800a376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	029b      	lsls	r3, r3, #10
 800a37e:	b29b      	uxth	r3, r3
 800a380:	4313      	orrs	r3, r2
 800a382:	b29b      	uxth	r3, r3
 800a384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a38c:	b29a      	uxth	r2, r3
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	801a      	strh	r2, [r3, #0]
 800a392:	e056      	b.n	800a442 <USB_EPStartXfer+0x51a>
 800a394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d10a      	bne.n	800a3b2 <USB_EPStartXfer+0x48a>
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	881b      	ldrh	r3, [r3, #0]
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	801a      	strh	r2, [r3, #0]
 800a3b0:	e047      	b.n	800a442 <USB_EPStartXfer+0x51a>
 800a3b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3b6:	085b      	lsrs	r3, r3, #1
 800a3b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a3bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3c0:	f003 0301 	and.w	r3, r3, #1
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d004      	beq.n	800a3d2 <USB_EPStartXfer+0x4aa>
 800a3c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	881b      	ldrh	r3, [r3, #0]
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	029b      	lsls	r3, r3, #10
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	801a      	strh	r2, [r3, #0]
 800a3ea:	e02a      	b.n	800a442 <USB_EPStartXfer+0x51a>
 800a3ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	785b      	ldrb	r3, [r3, #1]
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d122      	bne.n	800a442 <USB_EPStartXfer+0x51a>
 800a3fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a400:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	623b      	str	r3, [r7, #32]
 800a408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a40c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a416:	b29b      	uxth	r3, r3
 800a418:	461a      	mov	r2, r3
 800a41a:	6a3b      	ldr	r3, [r7, #32]
 800a41c:	4413      	add	r3, r2
 800a41e:	623b      	str	r3, [r7, #32]
 800a420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	011a      	lsls	r2, r3, #4
 800a42e:	6a3b      	ldr	r3, [r7, #32]
 800a430:	4413      	add	r3, r2
 800a432:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a436:	61fb      	str	r3, [r7, #28]
 800a438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a43c:	b29a      	uxth	r2, r3
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	891b      	ldrh	r3, [r3, #8]
 800a44e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	6959      	ldr	r1, [r3, #20]
 800a45e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a462:	b29b      	uxth	r3, r3
 800a464:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a468:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a46c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a470:	6800      	ldr	r0, [r0, #0]
 800a472:	f001 fa48 	bl	800b906 <USB_WritePMA>
 800a476:	e3ee      	b.n	800ac56 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a47c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	785b      	ldrb	r3, [r3, #1]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d177      	bne.n	800a578 <USB_EPStartXfer+0x650>
 800a488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a48c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	64bb      	str	r3, [r7, #72]	; 0x48
 800a494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a498:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4a8:	4413      	add	r3, r2
 800a4aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	011a      	lsls	r2, r3, #4
 800a4ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4bc:	4413      	add	r3, r2
 800a4be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a4c2:	647b      	str	r3, [r7, #68]	; 0x44
 800a4c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4c6:	881b      	ldrh	r3, [r3, #0]
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4ce:	b29a      	uxth	r2, r3
 800a4d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4d2:	801a      	strh	r2, [r3, #0]
 800a4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4d8:	2b3e      	cmp	r3, #62	; 0x3e
 800a4da:	d921      	bls.n	800a520 <USB_EPStartXfer+0x5f8>
 800a4dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4e0:	095b      	lsrs	r3, r3, #5
 800a4e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a4e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4ea:	f003 031f 	and.w	r3, r3, #31
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d104      	bne.n	800a4fc <USB_EPStartXfer+0x5d4>
 800a4f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a4fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4fe:	881b      	ldrh	r3, [r3, #0]
 800a500:	b29a      	uxth	r2, r3
 800a502:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a506:	b29b      	uxth	r3, r3
 800a508:	029b      	lsls	r3, r3, #10
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	4313      	orrs	r3, r2
 800a50e:	b29b      	uxth	r3, r3
 800a510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a518:	b29a      	uxth	r2, r3
 800a51a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a51c:	801a      	strh	r2, [r3, #0]
 800a51e:	e056      	b.n	800a5ce <USB_EPStartXfer+0x6a6>
 800a520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a524:	2b00      	cmp	r3, #0
 800a526:	d10a      	bne.n	800a53e <USB_EPStartXfer+0x616>
 800a528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a52a:	881b      	ldrh	r3, [r3, #0]
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a532:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a536:	b29a      	uxth	r2, r3
 800a538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a53a:	801a      	strh	r2, [r3, #0]
 800a53c:	e047      	b.n	800a5ce <USB_EPStartXfer+0x6a6>
 800a53e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a542:	085b      	lsrs	r3, r3, #1
 800a544:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a54c:	f003 0301 	and.w	r3, r3, #1
 800a550:	2b00      	cmp	r3, #0
 800a552:	d004      	beq.n	800a55e <USB_EPStartXfer+0x636>
 800a554:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a558:	3301      	adds	r3, #1
 800a55a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a55e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a560:	881b      	ldrh	r3, [r3, #0]
 800a562:	b29a      	uxth	r2, r3
 800a564:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a568:	b29b      	uxth	r3, r3
 800a56a:	029b      	lsls	r3, r3, #10
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	4313      	orrs	r3, r2
 800a570:	b29a      	uxth	r2, r3
 800a572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a574:	801a      	strh	r2, [r3, #0]
 800a576:	e02a      	b.n	800a5ce <USB_EPStartXfer+0x6a6>
 800a578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a57c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	785b      	ldrb	r3, [r3, #1]
 800a584:	2b01      	cmp	r3, #1
 800a586:	d122      	bne.n	800a5ce <USB_EPStartXfer+0x6a6>
 800a588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a58c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	653b      	str	r3, [r7, #80]	; 0x50
 800a594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a598:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5a8:	4413      	add	r3, r2
 800a5aa:	653b      	str	r3, [r7, #80]	; 0x50
 800a5ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	011a      	lsls	r2, r3, #4
 800a5ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5bc:	4413      	add	r3, r2
 800a5be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a5c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a5ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	891b      	ldrh	r3, [r3, #8]
 800a5da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a5de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	6959      	ldr	r1, [r3, #20]
 800a5ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a5f4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a5f8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a5fc:	6800      	ldr	r0, [r0, #0]
 800a5fe:	f001 f982 	bl	800b906 <USB_WritePMA>
            ep->xfer_buff += len;
 800a602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	695a      	ldr	r2, [r3, #20]
 800a60e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a612:	441a      	add	r2, r3
 800a614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a618:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	6a1a      	ldr	r2, [r3, #32]
 800a62c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d90f      	bls.n	800a65c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a63c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	6a1a      	ldr	r2, [r3, #32]
 800a648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a64c:	1ad2      	subs	r2, r2, r3
 800a64e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a652:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	621a      	str	r2, [r3, #32]
 800a65a:	e00e      	b.n	800a67a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800a65c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	6a1b      	ldr	r3, [r3, #32]
 800a668:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a66c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	2200      	movs	r2, #0
 800a678:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a67a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a67e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	643b      	str	r3, [r7, #64]	; 0x40
 800a686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a68a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	785b      	ldrb	r3, [r3, #1]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d177      	bne.n	800a786 <USB_EPStartXfer+0x85e>
 800a696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a69a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b6:	4413      	add	r3, r2
 800a6b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	011a      	lsls	r2, r3, #4
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ca:	4413      	add	r3, r2
 800a6cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a6d0:	637b      	str	r3, [r7, #52]	; 0x34
 800a6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d4:	881b      	ldrh	r3, [r3, #0]
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e0:	801a      	strh	r2, [r3, #0]
 800a6e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6e6:	2b3e      	cmp	r3, #62	; 0x3e
 800a6e8:	d921      	bls.n	800a72e <USB_EPStartXfer+0x806>
 800a6ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ee:	095b      	lsrs	r3, r3, #5
 800a6f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a6f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6f8:	f003 031f 	and.w	r3, r3, #31
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d104      	bne.n	800a70a <USB_EPStartXfer+0x7e2>
 800a700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a704:	3b01      	subs	r3, #1
 800a706:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a70c:	881b      	ldrh	r3, [r3, #0]
 800a70e:	b29a      	uxth	r2, r3
 800a710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a714:	b29b      	uxth	r3, r3
 800a716:	029b      	lsls	r3, r3, #10
 800a718:	b29b      	uxth	r3, r3
 800a71a:	4313      	orrs	r3, r2
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a726:	b29a      	uxth	r2, r3
 800a728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a72a:	801a      	strh	r2, [r3, #0]
 800a72c:	e050      	b.n	800a7d0 <USB_EPStartXfer+0x8a8>
 800a72e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a732:	2b00      	cmp	r3, #0
 800a734:	d10a      	bne.n	800a74c <USB_EPStartXfer+0x824>
 800a736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a738:	881b      	ldrh	r3, [r3, #0]
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a740:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a744:	b29a      	uxth	r2, r3
 800a746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a748:	801a      	strh	r2, [r3, #0]
 800a74a:	e041      	b.n	800a7d0 <USB_EPStartXfer+0x8a8>
 800a74c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a750:	085b      	lsrs	r3, r3, #1
 800a752:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a75a:	f003 0301 	and.w	r3, r3, #1
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d004      	beq.n	800a76c <USB_EPStartXfer+0x844>
 800a762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a766:	3301      	adds	r3, #1
 800a768:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a76c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a76e:	881b      	ldrh	r3, [r3, #0]
 800a770:	b29a      	uxth	r2, r3
 800a772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a776:	b29b      	uxth	r3, r3
 800a778:	029b      	lsls	r3, r3, #10
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	4313      	orrs	r3, r2
 800a77e:	b29a      	uxth	r2, r3
 800a780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a782:	801a      	strh	r2, [r3, #0]
 800a784:	e024      	b.n	800a7d0 <USB_EPStartXfer+0x8a8>
 800a786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a78a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	785b      	ldrb	r3, [r3, #1]
 800a792:	2b01      	cmp	r3, #1
 800a794:	d11c      	bne.n	800a7d0 <USB_EPStartXfer+0x8a8>
 800a796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a79a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7aa:	4413      	add	r3, r2
 800a7ac:	643b      	str	r3, [r7, #64]	; 0x40
 800a7ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	011a      	lsls	r2, r3, #4
 800a7bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7be:	4413      	add	r3, r2
 800a7c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ca:	b29a      	uxth	r2, r3
 800a7cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a7d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	895b      	ldrh	r3, [r3, #10]
 800a7dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a7e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	6959      	ldr	r1, [r3, #20]
 800a7ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a7f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a7fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a7fe:	6800      	ldr	r0, [r0, #0]
 800a800:	f001 f881 	bl	800b906 <USB_WritePMA>
 800a804:	e227      	b.n	800ac56 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a80a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	6a1b      	ldr	r3, [r3, #32]
 800a812:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a81a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	4413      	add	r3, r2
 800a830:	881b      	ldrh	r3, [r3, #0]
 800a832:	b29b      	uxth	r3, r3
 800a834:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a83c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a844:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a84e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	441a      	add	r2, r3
 800a85a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a85e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a862:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a86a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a86e:	b29b      	uxth	r3, r3
 800a870:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a876:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a87e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a882:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	461a      	mov	r2, r3
 800a890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a892:	4413      	add	r3, r2
 800a894:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a89a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	011a      	lsls	r2, r3, #4
 800a8a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a8a6:	4413      	add	r3, r2
 800a8a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a8ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800a8ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b2:	b29a      	uxth	r2, r3
 800a8b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a8b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a8b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	891b      	ldrh	r3, [r3, #8]
 800a8c4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a8c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	6959      	ldr	r1, [r3, #20]
 800a8d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a8de:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a8e2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a8e6:	6800      	ldr	r0, [r0, #0]
 800a8e8:	f001 f80d 	bl	800b906 <USB_WritePMA>
 800a8ec:	e1b3      	b.n	800ac56 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a8ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	6a1a      	ldr	r2, [r3, #32]
 800a8fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8fe:	1ad2      	subs	r2, r2, r3
 800a900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a90c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a910:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a91a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	4413      	add	r3, r2
 800a926:	881b      	ldrh	r3, [r3, #0]
 800a928:	b29b      	uxth	r3, r3
 800a92a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a92e:	2b00      	cmp	r3, #0
 800a930:	f000 80c6 	beq.w	800aac0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a938:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	673b      	str	r3, [r7, #112]	; 0x70
 800a940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	785b      	ldrb	r3, [r3, #1]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d177      	bne.n	800aa40 <USB_EPStartXfer+0xb18>
 800a950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a954:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a95c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a960:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	461a      	mov	r2, r3
 800a96e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a970:	4413      	add	r3, r2
 800a972:	66bb      	str	r3, [r7, #104]	; 0x68
 800a974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	011a      	lsls	r2, r3, #4
 800a982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a984:	4413      	add	r3, r2
 800a986:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a98a:	667b      	str	r3, [r7, #100]	; 0x64
 800a98c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a98e:	881b      	ldrh	r3, [r3, #0]
 800a990:	b29b      	uxth	r3, r3
 800a992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a996:	b29a      	uxth	r2, r3
 800a998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a99a:	801a      	strh	r2, [r3, #0]
 800a99c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9a0:	2b3e      	cmp	r3, #62	; 0x3e
 800a9a2:	d921      	bls.n	800a9e8 <USB_EPStartXfer+0xac0>
 800a9a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9a8:	095b      	lsrs	r3, r3, #5
 800a9aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a9ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b2:	f003 031f 	and.w	r3, r3, #31
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d104      	bne.n	800a9c4 <USB_EPStartXfer+0xa9c>
 800a9ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a9c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9c6:	881b      	ldrh	r3, [r3, #0]
 800a9c8:	b29a      	uxth	r2, r3
 800a9ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	029b      	lsls	r3, r3, #10
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9e0:	b29a      	uxth	r2, r3
 800a9e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9e4:	801a      	strh	r2, [r3, #0]
 800a9e6:	e050      	b.n	800aa8a <USB_EPStartXfer+0xb62>
 800a9e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d10a      	bne.n	800aa06 <USB_EPStartXfer+0xade>
 800a9f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9f2:	881b      	ldrh	r3, [r3, #0]
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9fe:	b29a      	uxth	r2, r3
 800aa00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa02:	801a      	strh	r2, [r3, #0]
 800aa04:	e041      	b.n	800aa8a <USB_EPStartXfer+0xb62>
 800aa06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa0a:	085b      	lsrs	r3, r3, #1
 800aa0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aa10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa14:	f003 0301 	and.w	r3, r3, #1
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d004      	beq.n	800aa26 <USB_EPStartXfer+0xafe>
 800aa1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800aa20:	3301      	adds	r3, #1
 800aa22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aa26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa28:	881b      	ldrh	r3, [r3, #0]
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	029b      	lsls	r3, r3, #10
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	4313      	orrs	r3, r2
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa3c:	801a      	strh	r2, [r3, #0]
 800aa3e:	e024      	b.n	800aa8a <USB_EPStartXfer+0xb62>
 800aa40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	785b      	ldrb	r3, [r3, #1]
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d11c      	bne.n	800aa8a <USB_EPStartXfer+0xb62>
 800aa50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	461a      	mov	r2, r3
 800aa62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa64:	4413      	add	r3, r2
 800aa66:	673b      	str	r3, [r7, #112]	; 0x70
 800aa68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	011a      	lsls	r2, r3, #4
 800aa76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa78:	4413      	add	r3, r2
 800aa7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800aa7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa84:	b29a      	uxth	r2, r3
 800aa86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa88:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800aa8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	895b      	ldrh	r3, [r3, #10]
 800aa96:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800aa9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	6959      	ldr	r1, [r3, #20]
 800aaa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aab0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aab4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aab8:	6800      	ldr	r0, [r0, #0]
 800aaba:	f000 ff24 	bl	800b906 <USB_WritePMA>
 800aabe:	e0ca      	b.n	800ac56 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	785b      	ldrb	r3, [r3, #1]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d177      	bne.n	800abc0 <USB_EPStartXfer+0xc98>
 800aad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aad4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aadc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aae0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	461a      	mov	r2, r3
 800aaee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aaf0:	4413      	add	r3, r2
 800aaf2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aaf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	011a      	lsls	r2, r3, #4
 800ab02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ab04:	4413      	add	r3, r2
 800ab06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ab0a:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab0e:	881b      	ldrh	r3, [r3, #0]
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab16:	b29a      	uxth	r2, r3
 800ab18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab1a:	801a      	strh	r2, [r3, #0]
 800ab1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab20:	2b3e      	cmp	r3, #62	; 0x3e
 800ab22:	d921      	bls.n	800ab68 <USB_EPStartXfer+0xc40>
 800ab24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab28:	095b      	lsrs	r3, r3, #5
 800ab2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ab2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab32:	f003 031f 	and.w	r3, r3, #31
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d104      	bne.n	800ab44 <USB_EPStartXfer+0xc1c>
 800ab3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ab44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab46:	881b      	ldrh	r3, [r3, #0]
 800ab48:	b29a      	uxth	r2, r3
 800ab4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	029b      	lsls	r3, r3, #10
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	4313      	orrs	r3, r2
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab60:	b29a      	uxth	r2, r3
 800ab62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab64:	801a      	strh	r2, [r3, #0]
 800ab66:	e05c      	b.n	800ac22 <USB_EPStartXfer+0xcfa>
 800ab68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d10a      	bne.n	800ab86 <USB_EPStartXfer+0xc5e>
 800ab70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab72:	881b      	ldrh	r3, [r3, #0]
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab7e:	b29a      	uxth	r2, r3
 800ab80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab82:	801a      	strh	r2, [r3, #0]
 800ab84:	e04d      	b.n	800ac22 <USB_EPStartXfer+0xcfa>
 800ab86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab8a:	085b      	lsrs	r3, r3, #1
 800ab8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ab90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab94:	f003 0301 	and.w	r3, r3, #1
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d004      	beq.n	800aba6 <USB_EPStartXfer+0xc7e>
 800ab9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800aba0:	3301      	adds	r3, #1
 800aba2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aba6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aba8:	881b      	ldrh	r3, [r3, #0]
 800abaa:	b29a      	uxth	r2, r3
 800abac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	029b      	lsls	r3, r3, #10
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	4313      	orrs	r3, r2
 800abb8:	b29a      	uxth	r2, r3
 800abba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abbc:	801a      	strh	r2, [r3, #0]
 800abbe:	e030      	b.n	800ac22 <USB_EPStartXfer+0xcfa>
 800abc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	785b      	ldrb	r3, [r3, #1]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d128      	bne.n	800ac22 <USB_EPStartXfer+0xcfa>
 800abd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800abde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abe2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abec:	b29b      	uxth	r3, r3
 800abee:	461a      	mov	r2, r3
 800abf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800abf4:	4413      	add	r3, r2
 800abf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800abfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	011a      	lsls	r2, r3, #4
 800ac08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ac0c:	4413      	add	r3, r2
 800ac0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ac12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ac16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac1a:	b29a      	uxth	r2, r3
 800ac1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ac20:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ac22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	891b      	ldrh	r3, [r3, #8]
 800ac2e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	6959      	ldr	r1, [r3, #20]
 800ac3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ac48:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ac4c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ac50:	6800      	ldr	r0, [r0, #0]
 800ac52:	f000 fe58 	bl	800b906 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ac56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	4413      	add	r3, r2
 800ac70:	881b      	ldrh	r3, [r3, #0]
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac7c:	817b      	strh	r3, [r7, #10]
 800ac7e:	897b      	ldrh	r3, [r7, #10]
 800ac80:	f083 0310 	eor.w	r3, r3, #16
 800ac84:	817b      	strh	r3, [r7, #10]
 800ac86:	897b      	ldrh	r3, [r7, #10]
 800ac88:	f083 0320 	eor.w	r3, r3, #32
 800ac8c:	817b      	strh	r3, [r7, #10]
 800ac8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac96:	681a      	ldr	r2, [r3, #0]
 800ac98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	441a      	add	r2, r3
 800aca8:	897b      	ldrh	r3, [r7, #10]
 800acaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acba:	b29b      	uxth	r3, r3
 800acbc:	8013      	strh	r3, [r2, #0]
 800acbe:	f000 bcde 	b.w	800b67e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800acc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	7b1b      	ldrb	r3, [r3, #12]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	f040 80bb 	bne.w	800ae4a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800acd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	699a      	ldr	r2, [r3, #24]
 800ace0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ace4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	691b      	ldr	r3, [r3, #16]
 800acec:	429a      	cmp	r2, r3
 800acee:	d917      	bls.n	800ad20 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800acf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800ad00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	699a      	ldr	r2, [r3, #24]
 800ad0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad10:	1ad2      	subs	r2, r2, r3
 800ad12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	619a      	str	r2, [r3, #24]
 800ad1e:	e00e      	b.n	800ad3e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800ad20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	699b      	ldr	r3, [r3, #24]
 800ad2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800ad30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ad3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ad4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad62:	4413      	add	r3, r2
 800ad64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ad68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	011a      	lsls	r2, r3, #4
 800ad76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad7a:	4413      	add	r3, r2
 800ad7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ad80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ad84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad88:	881b      	ldrh	r3, [r3, #0]
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad90:	b29a      	uxth	r2, r3
 800ad92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad96:	801a      	strh	r2, [r3, #0]
 800ad98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad9c:	2b3e      	cmp	r3, #62	; 0x3e
 800ad9e:	d924      	bls.n	800adea <USB_EPStartXfer+0xec2>
 800ada0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ada4:	095b      	lsrs	r3, r3, #5
 800ada6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800adaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adae:	f003 031f 	and.w	r3, r3, #31
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d104      	bne.n	800adc0 <USB_EPStartXfer+0xe98>
 800adb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800adba:	3b01      	subs	r3, #1
 800adbc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800adc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adc4:	881b      	ldrh	r3, [r3, #0]
 800adc6:	b29a      	uxth	r2, r3
 800adc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800adcc:	b29b      	uxth	r3, r3
 800adce:	029b      	lsls	r3, r3, #10
 800add0:	b29b      	uxth	r3, r3
 800add2:	4313      	orrs	r3, r2
 800add4:	b29b      	uxth	r3, r3
 800add6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adde:	b29a      	uxth	r2, r3
 800ade0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ade4:	801a      	strh	r2, [r3, #0]
 800ade6:	f000 bc10 	b.w	800b60a <USB_EPStartXfer+0x16e2>
 800adea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d10c      	bne.n	800ae0c <USB_EPStartXfer+0xee4>
 800adf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adf6:	881b      	ldrh	r3, [r3, #0]
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae08:	801a      	strh	r2, [r3, #0]
 800ae0a:	e3fe      	b.n	800b60a <USB_EPStartXfer+0x16e2>
 800ae0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae10:	085b      	lsrs	r3, r3, #1
 800ae12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ae16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae1a:	f003 0301 	and.w	r3, r3, #1
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d004      	beq.n	800ae2c <USB_EPStartXfer+0xf04>
 800ae22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ae26:	3301      	adds	r3, #1
 800ae28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ae2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae30:	881b      	ldrh	r3, [r3, #0]
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	029b      	lsls	r3, r3, #10
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	b29a      	uxth	r2, r3
 800ae42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae46:	801a      	strh	r2, [r3, #0]
 800ae48:	e3df      	b.n	800b60a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ae4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	78db      	ldrb	r3, [r3, #3]
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	f040 8218 	bne.w	800b28c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ae5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	785b      	ldrb	r3, [r3, #1]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f040 809d 	bne.w	800afa8 <USB_EPStartXfer+0x1080>
 800ae6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ae7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae8a:	b29b      	uxth	r3, r3
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ae92:	4413      	add	r3, r2
 800ae94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ae98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	011a      	lsls	r2, r3, #4
 800aea6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aeaa:	4413      	add	r3, r2
 800aeac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aeb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aeb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aeb8:	881b      	ldrh	r3, [r3, #0]
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aec0:	b29a      	uxth	r2, r3
 800aec2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aec6:	801a      	strh	r2, [r3, #0]
 800aec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	2b3e      	cmp	r3, #62	; 0x3e
 800aed6:	d92b      	bls.n	800af30 <USB_EPStartXfer+0x1008>
 800aed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aedc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	691b      	ldr	r3, [r3, #16]
 800aee4:	095b      	lsrs	r3, r3, #5
 800aee6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aeea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	f003 031f 	and.w	r3, r3, #31
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d104      	bne.n	800af08 <USB_EPStartXfer+0xfe0>
 800aefe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af02:	3b01      	subs	r3, #1
 800af04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800af0c:	881b      	ldrh	r3, [r3, #0]
 800af0e:	b29a      	uxth	r2, r3
 800af10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af14:	b29b      	uxth	r3, r3
 800af16:	029b      	lsls	r3, r3, #10
 800af18:	b29b      	uxth	r3, r3
 800af1a:	4313      	orrs	r3, r2
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af26:	b29a      	uxth	r2, r3
 800af28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800af2c:	801a      	strh	r2, [r3, #0]
 800af2e:	e070      	b.n	800b012 <USB_EPStartXfer+0x10ea>
 800af30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	691b      	ldr	r3, [r3, #16]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d10c      	bne.n	800af5a <USB_EPStartXfer+0x1032>
 800af40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800af44:	881b      	ldrh	r3, [r3, #0]
 800af46:	b29b      	uxth	r3, r3
 800af48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af50:	b29a      	uxth	r2, r3
 800af52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800af56:	801a      	strh	r2, [r3, #0]
 800af58:	e05b      	b.n	800b012 <USB_EPStartXfer+0x10ea>
 800af5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	085b      	lsrs	r3, r3, #1
 800af68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	f003 0301 	and.w	r3, r3, #1
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d004      	beq.n	800af8a <USB_EPStartXfer+0x1062>
 800af80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af84:	3301      	adds	r3, #1
 800af86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800af8e:	881b      	ldrh	r3, [r3, #0]
 800af90:	b29a      	uxth	r2, r3
 800af92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af96:	b29b      	uxth	r3, r3
 800af98:	029b      	lsls	r3, r3, #10
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	4313      	orrs	r3, r2
 800af9e:	b29a      	uxth	r2, r3
 800afa0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800afa4:	801a      	strh	r2, [r3, #0]
 800afa6:	e034      	b.n	800b012 <USB_EPStartXfer+0x10ea>
 800afa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	785b      	ldrb	r3, [r3, #1]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d12c      	bne.n	800b012 <USB_EPStartXfer+0x10ea>
 800afb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800afc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	461a      	mov	r2, r3
 800afd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800afdc:	4413      	add	r3, r2
 800afde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800afe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	011a      	lsls	r2, r3, #4
 800aff0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aff4:	4413      	add	r3, r2
 800aff6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800affa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800affe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	691b      	ldr	r3, [r3, #16]
 800b00a:	b29a      	uxth	r2, r3
 800b00c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b010:	801a      	strh	r2, [r3, #0]
 800b012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b016:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	785b      	ldrb	r3, [r3, #1]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	f040 809d 	bne.w	800b16c <USB_EPStartXfer+0x1244>
 800b032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b036:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b044:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b04e:	b29b      	uxth	r3, r3
 800b050:	461a      	mov	r2, r3
 800b052:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b056:	4413      	add	r3, r2
 800b058:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b05c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	011a      	lsls	r2, r3, #4
 800b06a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b06e:	4413      	add	r3, r2
 800b070:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b074:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b078:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b07c:	881b      	ldrh	r3, [r3, #0]
 800b07e:	b29b      	uxth	r3, r3
 800b080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b084:	b29a      	uxth	r2, r3
 800b086:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b08a:	801a      	strh	r2, [r3, #0]
 800b08c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	691b      	ldr	r3, [r3, #16]
 800b098:	2b3e      	cmp	r3, #62	; 0x3e
 800b09a:	d92b      	bls.n	800b0f4 <USB_EPStartXfer+0x11cc>
 800b09c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	691b      	ldr	r3, [r3, #16]
 800b0a8:	095b      	lsrs	r3, r3, #5
 800b0aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b0ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	691b      	ldr	r3, [r3, #16]
 800b0ba:	f003 031f 	and.w	r3, r3, #31
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d104      	bne.n	800b0cc <USB_EPStartXfer+0x11a4>
 800b0c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0c6:	3b01      	subs	r3, #1
 800b0c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b0cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0d0:	881b      	ldrh	r3, [r3, #0]
 800b0d2:	b29a      	uxth	r2, r3
 800b0d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	029b      	lsls	r3, r3, #10
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0f0:	801a      	strh	r2, [r3, #0]
 800b0f2:	e069      	b.n	800b1c8 <USB_EPStartXfer+0x12a0>
 800b0f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d10c      	bne.n	800b11e <USB_EPStartXfer+0x11f6>
 800b104:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b108:	881b      	ldrh	r3, [r3, #0]
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b114:	b29a      	uxth	r2, r3
 800b116:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b11a:	801a      	strh	r2, [r3, #0]
 800b11c:	e054      	b.n	800b1c8 <USB_EPStartXfer+0x12a0>
 800b11e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	691b      	ldr	r3, [r3, #16]
 800b12a:	085b      	lsrs	r3, r3, #1
 800b12c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	691b      	ldr	r3, [r3, #16]
 800b13c:	f003 0301 	and.w	r3, r3, #1
 800b140:	2b00      	cmp	r3, #0
 800b142:	d004      	beq.n	800b14e <USB_EPStartXfer+0x1226>
 800b144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b148:	3301      	adds	r3, #1
 800b14a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b14e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b152:	881b      	ldrh	r3, [r3, #0]
 800b154:	b29a      	uxth	r2, r3
 800b156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b15a:	b29b      	uxth	r3, r3
 800b15c:	029b      	lsls	r3, r3, #10
 800b15e:	b29b      	uxth	r3, r3
 800b160:	4313      	orrs	r3, r2
 800b162:	b29a      	uxth	r2, r3
 800b164:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b168:	801a      	strh	r2, [r3, #0]
 800b16a:	e02d      	b.n	800b1c8 <USB_EPStartXfer+0x12a0>
 800b16c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	785b      	ldrb	r3, [r3, #1]
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d125      	bne.n	800b1c8 <USB_EPStartXfer+0x12a0>
 800b17c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b180:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	461a      	mov	r2, r3
 800b18e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b192:	4413      	add	r3, r2
 800b194:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b19c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	011a      	lsls	r2, r3, #4
 800b1a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b1aa:	4413      	add	r3, r2
 800b1ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b1b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b1b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	691b      	ldr	r3, [r3, #16]
 800b1c0:	b29a      	uxth	r2, r3
 800b1c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b1c6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b1c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	69db      	ldr	r3, [r3, #28]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f000 8218 	beq.w	800b60a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b1da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1e2:	681a      	ldr	r2, [r3, #0]
 800b1e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	4413      	add	r3, r2
 800b1f4:	881b      	ldrh	r3, [r3, #0]
 800b1f6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b1fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b1fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b202:	2b00      	cmp	r3, #0
 800b204:	d005      	beq.n	800b212 <USB_EPStartXfer+0x12ea>
 800b206:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b20a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d10d      	bne.n	800b22e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b212:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f040 81f5 	bne.w	800b60a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b220:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f040 81ee 	bne.w	800b60a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b22e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b232:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b23c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	4413      	add	r3, r2
 800b248:	881b      	ldrh	r3, [r3, #0]
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b254:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b25c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	441a      	add	r2, r3
 800b272:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b276:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b27a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b27e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b282:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b286:	b29b      	uxth	r3, r3
 800b288:	8013      	strh	r3, [r2, #0]
 800b28a:	e1be      	b.n	800b60a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b28c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	78db      	ldrb	r3, [r3, #3]
 800b298:	2b01      	cmp	r3, #1
 800b29a:	f040 81b4 	bne.w	800b606 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b29e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	699a      	ldr	r2, [r3, #24]
 800b2aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d917      	bls.n	800b2ea <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b2ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	691b      	ldr	r3, [r3, #16]
 800b2c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b2ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	699a      	ldr	r2, [r3, #24]
 800b2d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2da:	1ad2      	subs	r2, r2, r3
 800b2dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	619a      	str	r2, [r3, #24]
 800b2e8:	e00e      	b.n	800b308 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b2ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	699b      	ldr	r3, [r3, #24]
 800b2f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b2fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2200      	movs	r2, #0
 800b306:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b30c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	785b      	ldrb	r3, [r3, #1]
 800b314:	2b00      	cmp	r3, #0
 800b316:	f040 8085 	bne.w	800b424 <USB_EPStartXfer+0x14fc>
 800b31a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b31e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b32c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b336:	b29b      	uxth	r3, r3
 800b338:	461a      	mov	r2, r3
 800b33a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b33e:	4413      	add	r3, r2
 800b340:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	011a      	lsls	r2, r3, #4
 800b352:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b356:	4413      	add	r3, r2
 800b358:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b35c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b360:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b364:	881b      	ldrh	r3, [r3, #0]
 800b366:	b29b      	uxth	r3, r3
 800b368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b36c:	b29a      	uxth	r2, r3
 800b36e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b372:	801a      	strh	r2, [r3, #0]
 800b374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b378:	2b3e      	cmp	r3, #62	; 0x3e
 800b37a:	d923      	bls.n	800b3c4 <USB_EPStartXfer+0x149c>
 800b37c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b380:	095b      	lsrs	r3, r3, #5
 800b382:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b38a:	f003 031f 	and.w	r3, r3, #31
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d104      	bne.n	800b39c <USB_EPStartXfer+0x1474>
 800b392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b396:	3b01      	subs	r3, #1
 800b398:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b39c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3a0:	881b      	ldrh	r3, [r3, #0]
 800b3a2:	b29a      	uxth	r2, r3
 800b3a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	029b      	lsls	r3, r3, #10
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3ba:	b29a      	uxth	r2, r3
 800b3bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3c0:	801a      	strh	r2, [r3, #0]
 800b3c2:	e060      	b.n	800b486 <USB_EPStartXfer+0x155e>
 800b3c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10c      	bne.n	800b3e6 <USB_EPStartXfer+0x14be>
 800b3cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3d0:	881b      	ldrh	r3, [r3, #0]
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3dc:	b29a      	uxth	r2, r3
 800b3de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3e2:	801a      	strh	r2, [r3, #0]
 800b3e4:	e04f      	b.n	800b486 <USB_EPStartXfer+0x155e>
 800b3e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ea:	085b      	lsrs	r3, r3, #1
 800b3ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b3f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3f4:	f003 0301 	and.w	r3, r3, #1
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d004      	beq.n	800b406 <USB_EPStartXfer+0x14de>
 800b3fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b400:	3301      	adds	r3, #1
 800b402:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b406:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b40a:	881b      	ldrh	r3, [r3, #0]
 800b40c:	b29a      	uxth	r2, r3
 800b40e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b412:	b29b      	uxth	r3, r3
 800b414:	029b      	lsls	r3, r3, #10
 800b416:	b29b      	uxth	r3, r3
 800b418:	4313      	orrs	r3, r2
 800b41a:	b29a      	uxth	r2, r3
 800b41c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b420:	801a      	strh	r2, [r3, #0]
 800b422:	e030      	b.n	800b486 <USB_EPStartXfer+0x155e>
 800b424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	785b      	ldrb	r3, [r3, #1]
 800b430:	2b01      	cmp	r3, #1
 800b432:	d128      	bne.n	800b486 <USB_EPStartXfer+0x155e>
 800b434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b438:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b446:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b450:	b29b      	uxth	r3, r3
 800b452:	461a      	mov	r2, r3
 800b454:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b458:	4413      	add	r3, r2
 800b45a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b45e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	011a      	lsls	r2, r3, #4
 800b46c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b470:	4413      	add	r3, r2
 800b472:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b476:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b47a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b47e:	b29a      	uxth	r2, r3
 800b480:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b484:	801a      	strh	r2, [r3, #0]
 800b486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b48a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	785b      	ldrb	r3, [r3, #1]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	f040 8085 	bne.w	800b5b0 <USB_EPStartXfer+0x1688>
 800b4a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b4b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b4ca:	4413      	add	r3, r2
 800b4cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b4d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	011a      	lsls	r2, r3, #4
 800b4de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b4e2:	4413      	add	r3, r2
 800b4e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b4e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b4ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b4f0:	881b      	ldrh	r3, [r3, #0]
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b4f8:	b29a      	uxth	r2, r3
 800b4fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b4fe:	801a      	strh	r2, [r3, #0]
 800b500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b504:	2b3e      	cmp	r3, #62	; 0x3e
 800b506:	d923      	bls.n	800b550 <USB_EPStartXfer+0x1628>
 800b508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b50c:	095b      	lsrs	r3, r3, #5
 800b50e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b516:	f003 031f 	and.w	r3, r3, #31
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d104      	bne.n	800b528 <USB_EPStartXfer+0x1600>
 800b51e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b522:	3b01      	subs	r3, #1
 800b524:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b528:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b52c:	881b      	ldrh	r3, [r3, #0]
 800b52e:	b29a      	uxth	r2, r3
 800b530:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b534:	b29b      	uxth	r3, r3
 800b536:	029b      	lsls	r3, r3, #10
 800b538:	b29b      	uxth	r3, r3
 800b53a:	4313      	orrs	r3, r2
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b546:	b29a      	uxth	r2, r3
 800b548:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b54c:	801a      	strh	r2, [r3, #0]
 800b54e:	e05c      	b.n	800b60a <USB_EPStartXfer+0x16e2>
 800b550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b554:	2b00      	cmp	r3, #0
 800b556:	d10c      	bne.n	800b572 <USB_EPStartXfer+0x164a>
 800b558:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b55c:	881b      	ldrh	r3, [r3, #0]
 800b55e:	b29b      	uxth	r3, r3
 800b560:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b564:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b568:	b29a      	uxth	r2, r3
 800b56a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b56e:	801a      	strh	r2, [r3, #0]
 800b570:	e04b      	b.n	800b60a <USB_EPStartXfer+0x16e2>
 800b572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b576:	085b      	lsrs	r3, r3, #1
 800b578:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b580:	f003 0301 	and.w	r3, r3, #1
 800b584:	2b00      	cmp	r3, #0
 800b586:	d004      	beq.n	800b592 <USB_EPStartXfer+0x166a>
 800b588:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b58c:	3301      	adds	r3, #1
 800b58e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b592:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b596:	881b      	ldrh	r3, [r3, #0]
 800b598:	b29a      	uxth	r2, r3
 800b59a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	029b      	lsls	r3, r3, #10
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	b29a      	uxth	r2, r3
 800b5a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b5ac:	801a      	strh	r2, [r3, #0]
 800b5ae:	e02c      	b.n	800b60a <USB_EPStartXfer+0x16e2>
 800b5b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	785b      	ldrb	r3, [r3, #1]
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d124      	bne.n	800b60a <USB_EPStartXfer+0x16e2>
 800b5c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b5d6:	4413      	add	r3, r2
 800b5d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b5dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	011a      	lsls	r2, r3, #4
 800b5ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b5ee:	4413      	add	r3, r2
 800b5f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b5f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b5f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5fc:	b29a      	uxth	r2, r3
 800b5fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b602:	801a      	strh	r2, [r3, #0]
 800b604:	e001      	b.n	800b60a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b606:	2301      	movs	r3, #1
 800b608:	e03a      	b.n	800b680 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b60a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b60e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b612:	681a      	ldr	r2, [r3, #0]
 800b614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b618:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	009b      	lsls	r3, r3, #2
 800b622:	4413      	add	r3, r2
 800b624:	881b      	ldrh	r3, [r3, #0]
 800b626:	b29b      	uxth	r3, r3
 800b628:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b62c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b630:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b634:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b638:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b63c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b640:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b644:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b648:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b64c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b654:	681a      	ldr	r2, [r3, #0]
 800b656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b65a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	441a      	add	r2, r3
 800b666:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b66a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b66e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b67e:	2300      	movs	r3, #0
}
 800b680:	4618      	mov	r0, r3
 800b682:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b68a:	b480      	push	{r7}
 800b68c:	b085      	sub	sp, #20
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
 800b692:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	785b      	ldrb	r3, [r3, #1]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d020      	beq.n	800b6de <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	009b      	lsls	r3, r3, #2
 800b6a4:	4413      	add	r3, r2
 800b6a6:	881b      	ldrh	r3, [r3, #0]
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6b2:	81bb      	strh	r3, [r7, #12]
 800b6b4:	89bb      	ldrh	r3, [r7, #12]
 800b6b6:	f083 0310 	eor.w	r3, r3, #16
 800b6ba:	81bb      	strh	r3, [r7, #12]
 800b6bc:	687a      	ldr	r2, [r7, #4]
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	441a      	add	r2, r3
 800b6c6:	89bb      	ldrh	r3, [r7, #12]
 800b6c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	8013      	strh	r3, [r2, #0]
 800b6dc:	e01f      	b.n	800b71e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	4413      	add	r3, r2
 800b6e8:	881b      	ldrh	r3, [r3, #0]
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b6f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6f4:	81fb      	strh	r3, [r7, #14]
 800b6f6:	89fb      	ldrh	r3, [r7, #14]
 800b6f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b6fc:	81fb      	strh	r3, [r7, #14]
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	009b      	lsls	r3, r3, #2
 800b706:	441a      	add	r2, r3
 800b708:	89fb      	ldrh	r3, [r7, #14]
 800b70a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b70e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b71e:	2300      	movs	r3, #0
}
 800b720:	4618      	mov	r0, r3
 800b722:	3714      	adds	r7, #20
 800b724:	46bd      	mov	sp, r7
 800b726:	bc80      	pop	{r7}
 800b728:	4770      	bx	lr

0800b72a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b72a:	b480      	push	{r7}
 800b72c:	b087      	sub	sp, #28
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
 800b732:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	7b1b      	ldrb	r3, [r3, #12]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	f040 809d 	bne.w	800b878 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	785b      	ldrb	r3, [r3, #1]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d04c      	beq.n	800b7e0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b746:	687a      	ldr	r2, [r7, #4]
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	4413      	add	r3, r2
 800b750:	881b      	ldrh	r3, [r3, #0]
 800b752:	823b      	strh	r3, [r7, #16]
 800b754:	8a3b      	ldrh	r3, [r7, #16]
 800b756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d01b      	beq.n	800b796 <USB_EPClearStall+0x6c>
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	4413      	add	r3, r2
 800b768:	881b      	ldrh	r3, [r3, #0]
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b774:	81fb      	strh	r3, [r7, #14]
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	441a      	add	r2, r3
 800b780:	89fb      	ldrh	r3, [r7, #14]
 800b782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b78a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b78e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b792:	b29b      	uxth	r3, r3
 800b794:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	78db      	ldrb	r3, [r3, #3]
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d06c      	beq.n	800b878 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b79e:	687a      	ldr	r2, [r7, #4]
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	4413      	add	r3, r2
 800b7a8:	881b      	ldrh	r3, [r3, #0]
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7b4:	81bb      	strh	r3, [r7, #12]
 800b7b6:	89bb      	ldrh	r3, [r7, #12]
 800b7b8:	f083 0320 	eor.w	r3, r3, #32
 800b7bc:	81bb      	strh	r3, [r7, #12]
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	441a      	add	r2, r3
 800b7c8:	89bb      	ldrh	r3, [r7, #12]
 800b7ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	8013      	strh	r3, [r2, #0]
 800b7de:	e04b      	b.n	800b878 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	4413      	add	r3, r2
 800b7ea:	881b      	ldrh	r3, [r3, #0]
 800b7ec:	82fb      	strh	r3, [r7, #22]
 800b7ee:	8afb      	ldrh	r3, [r7, #22]
 800b7f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d01b      	beq.n	800b830 <USB_EPClearStall+0x106>
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	4413      	add	r3, r2
 800b802:	881b      	ldrh	r3, [r3, #0]
 800b804:	b29b      	uxth	r3, r3
 800b806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b80a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b80e:	82bb      	strh	r3, [r7, #20]
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	441a      	add	r2, r3
 800b81a:	8abb      	ldrh	r3, [r7, #20]
 800b81c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b824:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	4413      	add	r3, r2
 800b83a:	881b      	ldrh	r3, [r3, #0]
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b846:	827b      	strh	r3, [r7, #18]
 800b848:	8a7b      	ldrh	r3, [r7, #18]
 800b84a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b84e:	827b      	strh	r3, [r7, #18]
 800b850:	8a7b      	ldrh	r3, [r7, #18]
 800b852:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b856:	827b      	strh	r3, [r7, #18]
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	009b      	lsls	r3, r3, #2
 800b860:	441a      	add	r2, r3
 800b862:	8a7b      	ldrh	r3, [r7, #18]
 800b864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b86c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b874:	b29b      	uxth	r3, r3
 800b876:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b878:	2300      	movs	r3, #0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	371c      	adds	r7, #28
 800b87e:	46bd      	mov	sp, r7
 800b880:	bc80      	pop	{r7}
 800b882:	4770      	bx	lr

0800b884 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	460b      	mov	r3, r1
 800b88e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b890:	78fb      	ldrb	r3, [r7, #3]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d103      	bne.n	800b89e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2280      	movs	r2, #128	; 0x80
 800b89a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b89e:	2300      	movs	r3, #0
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	370c      	adds	r7, #12
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bc80      	pop	{r7}
 800b8a8:	4770      	bx	lr

0800b8aa <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b8aa:	b480      	push	{r7}
 800b8ac:	b083      	sub	sp, #12
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	370c      	adds	r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bc80      	pop	{r7}
 800b8bc:	4770      	bx	lr

0800b8be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800b8be:	b480      	push	{r7}
 800b8c0:	b083      	sub	sp, #12
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b8c6:	2300      	movs	r3, #0
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	370c      	adds	r7, #12
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bc80      	pop	{r7}
 800b8d0:	4770      	bx	lr

0800b8d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b8d2:	b480      	push	{r7}
 800b8d4:	b085      	sub	sp, #20
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3714      	adds	r7, #20
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bc80      	pop	{r7}
 800b8ee:	4770      	bx	lr

0800b8f0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b083      	sub	sp, #12
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b8fa:	2300      	movs	r3, #0
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	370c      	adds	r7, #12
 800b900:	46bd      	mov	sp, r7
 800b902:	bc80      	pop	{r7}
 800b904:	4770      	bx	lr

0800b906 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b906:	b480      	push	{r7}
 800b908:	b08b      	sub	sp, #44	; 0x2c
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	60f8      	str	r0, [r7, #12]
 800b90e:	60b9      	str	r1, [r7, #8]
 800b910:	4611      	mov	r1, r2
 800b912:	461a      	mov	r2, r3
 800b914:	460b      	mov	r3, r1
 800b916:	80fb      	strh	r3, [r7, #6]
 800b918:	4613      	mov	r3, r2
 800b91a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b91c:	88bb      	ldrh	r3, [r7, #4]
 800b91e:	3301      	adds	r3, #1
 800b920:	085b      	lsrs	r3, r3, #1
 800b922:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b92c:	88fb      	ldrh	r3, [r7, #6]
 800b92e:	005a      	lsls	r2, r3, #1
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	4413      	add	r3, r2
 800b934:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b938:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b93a:	69bb      	ldr	r3, [r7, #24]
 800b93c:	627b      	str	r3, [r7, #36]	; 0x24
 800b93e:	e01e      	b.n	800b97e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b946:	69fb      	ldr	r3, [r7, #28]
 800b948:	3301      	adds	r3, #1
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	021b      	lsls	r3, r3, #8
 800b94e:	b21a      	sxth	r2, r3
 800b950:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b954:	4313      	orrs	r3, r2
 800b956:	b21b      	sxth	r3, r3
 800b958:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b95a:	6a3b      	ldr	r3, [r7, #32]
 800b95c:	8a7a      	ldrh	r2, [r7, #18]
 800b95e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b960:	6a3b      	ldr	r3, [r7, #32]
 800b962:	3302      	adds	r3, #2
 800b964:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b966:	6a3b      	ldr	r3, [r7, #32]
 800b968:	3302      	adds	r3, #2
 800b96a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	3301      	adds	r3, #1
 800b970:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	3301      	adds	r3, #1
 800b976:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97a:	3b01      	subs	r3, #1
 800b97c:	627b      	str	r3, [r7, #36]	; 0x24
 800b97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b980:	2b00      	cmp	r3, #0
 800b982:	d1dd      	bne.n	800b940 <USB_WritePMA+0x3a>
  }
}
 800b984:	bf00      	nop
 800b986:	bf00      	nop
 800b988:	372c      	adds	r7, #44	; 0x2c
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bc80      	pop	{r7}
 800b98e:	4770      	bx	lr

0800b990 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b990:	b480      	push	{r7}
 800b992:	b08b      	sub	sp, #44	; 0x2c
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	4611      	mov	r1, r2
 800b99c:	461a      	mov	r2, r3
 800b99e:	460b      	mov	r3, r1
 800b9a0:	80fb      	strh	r3, [r7, #6]
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b9a6:	88bb      	ldrh	r3, [r7, #4]
 800b9a8:	085b      	lsrs	r3, r3, #1
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b9b6:	88fb      	ldrh	r3, [r7, #6]
 800b9b8:	005a      	lsls	r2, r3, #1
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	4413      	add	r3, r2
 800b9be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9c2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	627b      	str	r3, [r7, #36]	; 0x24
 800b9c8:	e01b      	b.n	800ba02 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b9ca:	6a3b      	ldr	r3, [r7, #32]
 800b9cc:	881b      	ldrh	r3, [r3, #0]
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b9d2:	6a3b      	ldr	r3, [r7, #32]
 800b9d4:	3302      	adds	r3, #2
 800b9d6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	b2da      	uxtb	r2, r3
 800b9dc:	69fb      	ldr	r3, [r7, #28]
 800b9de:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	0a1b      	lsrs	r3, r3, #8
 800b9ea:	b2da      	uxtb	r2, r3
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b9f0:	69fb      	ldr	r3, [r7, #28]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b9f6:	6a3b      	ldr	r3, [r7, #32]
 800b9f8:	3302      	adds	r3, #2
 800b9fa:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800b9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fe:	3b01      	subs	r3, #1
 800ba00:	627b      	str	r3, [r7, #36]	; 0x24
 800ba02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d1e0      	bne.n	800b9ca <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ba08:	88bb      	ldrh	r3, [r7, #4]
 800ba0a:	f003 0301 	and.w	r3, r3, #1
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d007      	beq.n	800ba24 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800ba14:	6a3b      	ldr	r3, [r7, #32]
 800ba16:	881b      	ldrh	r3, [r3, #0]
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	b2da      	uxtb	r2, r3
 800ba20:	69fb      	ldr	r3, [r7, #28]
 800ba22:	701a      	strb	r2, [r3, #0]
  }
}
 800ba24:	bf00      	nop
 800ba26:	372c      	adds	r7, #44	; 0x2c
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bc80      	pop	{r7}
 800ba2c:	4770      	bx	lr

0800ba2e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b084      	sub	sp, #16
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
 800ba36:	460b      	mov	r3, r1
 800ba38:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	7c1b      	ldrb	r3, [r3, #16]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d115      	bne.n	800ba72 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ba46:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba4a:	2202      	movs	r2, #2
 800ba4c:	2181      	movs	r1, #129	; 0x81
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f001 fe99 	bl	800d786 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2201      	movs	r2, #1
 800ba58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ba5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba5e:	2202      	movs	r2, #2
 800ba60:	2101      	movs	r1, #1
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	f001 fe8f 	bl	800d786 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800ba70:	e012      	b.n	800ba98 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ba72:	2340      	movs	r3, #64	; 0x40
 800ba74:	2202      	movs	r2, #2
 800ba76:	2181      	movs	r1, #129	; 0x81
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f001 fe84 	bl	800d786 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2201      	movs	r2, #1
 800ba82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ba84:	2340      	movs	r3, #64	; 0x40
 800ba86:	2202      	movs	r2, #2
 800ba88:	2101      	movs	r1, #1
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f001 fe7b 	bl	800d786 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2201      	movs	r2, #1
 800ba94:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ba98:	2308      	movs	r3, #8
 800ba9a:	2203      	movs	r2, #3
 800ba9c:	2182      	movs	r1, #130	; 0x82
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f001 fe71 	bl	800d786 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2201      	movs	r2, #1
 800baa8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800baaa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800baae:	f001 ff91 	bl	800d9d4 <USBD_static_malloc>
 800bab2:	4602      	mov	r2, r0
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d102      	bne.n	800baca <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800bac4:	2301      	movs	r3, #1
 800bac6:	73fb      	strb	r3, [r7, #15]
 800bac8:	e026      	b.n	800bb18 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bad0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	2200      	movs	r2, #0
 800bae0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	2200      	movs	r2, #0
 800bae8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	7c1b      	ldrb	r3, [r3, #16]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d109      	bne.n	800bb08 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bafa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bafe:	2101      	movs	r1, #1
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f001 ff31 	bl	800d968 <USBD_LL_PrepareReceive>
 800bb06:	e007      	b.n	800bb18 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bb0e:	2340      	movs	r3, #64	; 0x40
 800bb10:	2101      	movs	r1, #1
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f001 ff28 	bl	800d968 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3710      	adds	r7, #16
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}

0800bb22 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb22:	b580      	push	{r7, lr}
 800bb24:	b084      	sub	sp, #16
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bb32:	2181      	movs	r1, #129	; 0x81
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f001 fe4c 	bl	800d7d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bb40:	2101      	movs	r1, #1
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f001 fe45 	bl	800d7d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bb50:	2182      	movs	r1, #130	; 0x82
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f001 fe3d 	bl	800d7d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d00e      	beq.n	800bb86 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f001 ff37 	bl	800d9ec <USBD_static_free>
    pdev->pClassData = NULL;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2200      	movs	r2, #0
 800bb82:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800bb86:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3710      	adds	r7, #16
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b086      	sub	sp, #24
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bba0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800bba2:	2300      	movs	r3, #0
 800bba4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800bba6:	2300      	movs	r3, #0
 800bba8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d039      	beq.n	800bc2e <USBD_CDC_Setup+0x9e>
 800bbba:	2b20      	cmp	r3, #32
 800bbbc:	d17f      	bne.n	800bcbe <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	88db      	ldrh	r3, [r3, #6]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d029      	beq.n	800bc1a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	b25b      	sxtb	r3, r3
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	da11      	bge.n	800bbf4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	683a      	ldr	r2, [r7, #0]
 800bbda:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800bbdc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bbde:	683a      	ldr	r2, [r7, #0]
 800bbe0:	88d2      	ldrh	r2, [r2, #6]
 800bbe2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bbe4:	6939      	ldr	r1, [r7, #16]
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	88db      	ldrh	r3, [r3, #6]
 800bbea:	461a      	mov	r2, r3
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f001 fa0a 	bl	800d006 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800bbf2:	e06b      	b.n	800bccc <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	785a      	ldrb	r2, [r3, #1]
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	88db      	ldrh	r3, [r3, #6]
 800bc02:	b2da      	uxtb	r2, r3
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800bc0a:	6939      	ldr	r1, [r7, #16]
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	88db      	ldrh	r3, [r3, #6]
 800bc10:	461a      	mov	r2, r3
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f001 fa25 	bl	800d062 <USBD_CtlPrepareRx>
      break;
 800bc18:	e058      	b.n	800bccc <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc20:	689b      	ldr	r3, [r3, #8]
 800bc22:	683a      	ldr	r2, [r7, #0]
 800bc24:	7850      	ldrb	r0, [r2, #1]
 800bc26:	2200      	movs	r2, #0
 800bc28:	6839      	ldr	r1, [r7, #0]
 800bc2a:	4798      	blx	r3
      break;
 800bc2c:	e04e      	b.n	800bccc <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	785b      	ldrb	r3, [r3, #1]
 800bc32:	2b0b      	cmp	r3, #11
 800bc34:	d02e      	beq.n	800bc94 <USBD_CDC_Setup+0x104>
 800bc36:	2b0b      	cmp	r3, #11
 800bc38:	dc38      	bgt.n	800bcac <USBD_CDC_Setup+0x11c>
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d002      	beq.n	800bc44 <USBD_CDC_Setup+0xb4>
 800bc3e:	2b0a      	cmp	r3, #10
 800bc40:	d014      	beq.n	800bc6c <USBD_CDC_Setup+0xdc>
 800bc42:	e033      	b.n	800bcac <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc4a:	2b03      	cmp	r3, #3
 800bc4c:	d107      	bne.n	800bc5e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800bc4e:	f107 030c 	add.w	r3, r7, #12
 800bc52:	2202      	movs	r2, #2
 800bc54:	4619      	mov	r1, r3
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f001 f9d5 	bl	800d006 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc5c:	e02e      	b.n	800bcbc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800bc5e:	6839      	ldr	r1, [r7, #0]
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f001 f966 	bl	800cf32 <USBD_CtlError>
            ret = USBD_FAIL;
 800bc66:	2302      	movs	r3, #2
 800bc68:	75fb      	strb	r3, [r7, #23]
          break;
 800bc6a:	e027      	b.n	800bcbc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc72:	2b03      	cmp	r3, #3
 800bc74:	d107      	bne.n	800bc86 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800bc76:	f107 030f 	add.w	r3, r7, #15
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f001 f9c1 	bl	800d006 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc84:	e01a      	b.n	800bcbc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800bc86:	6839      	ldr	r1, [r7, #0]
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f001 f952 	bl	800cf32 <USBD_CtlError>
            ret = USBD_FAIL;
 800bc8e:	2302      	movs	r3, #2
 800bc90:	75fb      	strb	r3, [r7, #23]
          break;
 800bc92:	e013      	b.n	800bcbc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc9a:	2b03      	cmp	r3, #3
 800bc9c:	d00d      	beq.n	800bcba <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800bc9e:	6839      	ldr	r1, [r7, #0]
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f001 f946 	bl	800cf32 <USBD_CtlError>
            ret = USBD_FAIL;
 800bca6:	2302      	movs	r3, #2
 800bca8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bcaa:	e006      	b.n	800bcba <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800bcac:	6839      	ldr	r1, [r7, #0]
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f001 f93f 	bl	800cf32 <USBD_CtlError>
          ret = USBD_FAIL;
 800bcb4:	2302      	movs	r3, #2
 800bcb6:	75fb      	strb	r3, [r7, #23]
          break;
 800bcb8:	e000      	b.n	800bcbc <USBD_CDC_Setup+0x12c>
          break;
 800bcba:	bf00      	nop
      }
      break;
 800bcbc:	e006      	b.n	800bccc <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800bcbe:	6839      	ldr	r1, [r7, #0]
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f001 f936 	bl	800cf32 <USBD_CtlError>
      ret = USBD_FAIL;
 800bcc6:	2302      	movs	r3, #2
 800bcc8:	75fb      	strb	r3, [r7, #23]
      break;
 800bcca:	bf00      	nop
  }

  return ret;
 800bccc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3718      	adds	r7, #24
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}

0800bcd6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b084      	sub	sp, #16
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
 800bcde:	460b      	mov	r3, r1
 800bce0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bce8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcf0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d03a      	beq.n	800bd72 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bcfc:	78fa      	ldrb	r2, [r7, #3]
 800bcfe:	6879      	ldr	r1, [r7, #4]
 800bd00:	4613      	mov	r3, r2
 800bd02:	009b      	lsls	r3, r3, #2
 800bd04:	4413      	add	r3, r2
 800bd06:	009b      	lsls	r3, r3, #2
 800bd08:	440b      	add	r3, r1
 800bd0a:	331c      	adds	r3, #28
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d029      	beq.n	800bd66 <USBD_CDC_DataIn+0x90>
 800bd12:	78fa      	ldrb	r2, [r7, #3]
 800bd14:	6879      	ldr	r1, [r7, #4]
 800bd16:	4613      	mov	r3, r2
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	4413      	add	r3, r2
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	440b      	add	r3, r1
 800bd20:	331c      	adds	r3, #28
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	78f9      	ldrb	r1, [r7, #3]
 800bd26:	68b8      	ldr	r0, [r7, #8]
 800bd28:	460b      	mov	r3, r1
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	440b      	add	r3, r1
 800bd2e:	00db      	lsls	r3, r3, #3
 800bd30:	4403      	add	r3, r0
 800bd32:	3338      	adds	r3, #56	; 0x38
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	fbb2 f1f3 	udiv	r1, r2, r3
 800bd3a:	fb01 f303 	mul.w	r3, r1, r3
 800bd3e:	1ad3      	subs	r3, r2, r3
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d110      	bne.n	800bd66 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800bd44:	78fa      	ldrb	r2, [r7, #3]
 800bd46:	6879      	ldr	r1, [r7, #4]
 800bd48:	4613      	mov	r3, r2
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	4413      	add	r3, r2
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	440b      	add	r3, r1
 800bd52:	331c      	adds	r3, #28
 800bd54:	2200      	movs	r2, #0
 800bd56:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bd58:	78f9      	ldrb	r1, [r7, #3]
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f001 fddf 	bl	800d922 <USBD_LL_Transmit>
 800bd64:	e003      	b.n	800bd6e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	e000      	b.n	800bd74 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800bd72:	2302      	movs	r3, #2
  }
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3710      	adds	r7, #16
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	460b      	mov	r3, r1
 800bd86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd8e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bd90:	78fb      	ldrb	r3, [r7, #3]
 800bd92:	4619      	mov	r1, r3
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f001 fe0a 	bl	800d9ae <USBD_LL_GetRxDataSize>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d00d      	beq.n	800bdc8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdb2:	68db      	ldr	r3, [r3, #12]
 800bdb4:	68fa      	ldr	r2, [r7, #12]
 800bdb6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bdba:	68fa      	ldr	r2, [r7, #12]
 800bdbc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bdc0:	4611      	mov	r1, r2
 800bdc2:	4798      	blx	r3

    return USBD_OK;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	e000      	b.n	800bdca <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800bdc8:	2302      	movs	r3, #2
  }
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}

0800bdd2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bdd2:	b580      	push	{r7, lr}
 800bdd4:	b084      	sub	sp, #16
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bde0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d015      	beq.n	800be18 <USBD_CDC_EP0_RxReady+0x46>
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bdf2:	2bff      	cmp	r3, #255	; 0xff
 800bdf4:	d010      	beq.n	800be18 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bdfc:	689b      	ldr	r3, [r3, #8]
 800bdfe:	68fa      	ldr	r2, [r7, #12]
 800be00:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800be04:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800be06:	68fa      	ldr	r2, [r7, #12]
 800be08:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800be0c:	b292      	uxth	r2, r2
 800be0e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	22ff      	movs	r2, #255	; 0xff
 800be14:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800be18:	2300      	movs	r3, #0
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3710      	adds	r7, #16
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
	...

0800be24 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2243      	movs	r2, #67	; 0x43
 800be30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800be32:	4b03      	ldr	r3, [pc, #12]	; (800be40 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800be34:	4618      	mov	r0, r3
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	bc80      	pop	{r7}
 800be3c:	4770      	bx	lr
 800be3e:	bf00      	nop
 800be40:	200000dc 	.word	0x200000dc

0800be44 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800be44:	b480      	push	{r7}
 800be46:	b083      	sub	sp, #12
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2243      	movs	r2, #67	; 0x43
 800be50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800be52:	4b03      	ldr	r3, [pc, #12]	; (800be60 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800be54:	4618      	mov	r0, r3
 800be56:	370c      	adds	r7, #12
 800be58:	46bd      	mov	sp, r7
 800be5a:	bc80      	pop	{r7}
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	20000098 	.word	0x20000098

0800be64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800be64:	b480      	push	{r7}
 800be66:	b083      	sub	sp, #12
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2243      	movs	r2, #67	; 0x43
 800be70:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800be72:	4b03      	ldr	r3, [pc, #12]	; (800be80 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800be74:	4618      	mov	r0, r3
 800be76:	370c      	adds	r7, #12
 800be78:	46bd      	mov	sp, r7
 800be7a:	bc80      	pop	{r7}
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	20000120 	.word	0x20000120

0800be84 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	220a      	movs	r2, #10
 800be90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800be92:	4b03      	ldr	r3, [pc, #12]	; (800bea0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800be94:	4618      	mov	r0, r3
 800be96:	370c      	adds	r7, #12
 800be98:	46bd      	mov	sp, r7
 800be9a:	bc80      	pop	{r7}
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop
 800bea0:	20000054 	.word	0x20000054

0800bea4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b085      	sub	sp, #20
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800beae:	2302      	movs	r3, #2
 800beb0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d005      	beq.n	800bec4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800bec0:	2300      	movs	r3, #0
 800bec2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bec4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3714      	adds	r7, #20
 800beca:	46bd      	mov	sp, r7
 800becc:	bc80      	pop	{r7}
 800bece:	4770      	bx	lr

0800bed0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b087      	sub	sp, #28
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	60f8      	str	r0, [r7, #12]
 800bed8:	60b9      	str	r1, [r7, #8]
 800beda:	4613      	mov	r3, r2
 800bedc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bee4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	68ba      	ldr	r2, [r7, #8]
 800beea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800beee:	88fa      	ldrh	r2, [r7, #6]
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800bef6:	2300      	movs	r3, #0
}
 800bef8:	4618      	mov	r0, r3
 800befa:	371c      	adds	r7, #28
 800befc:	46bd      	mov	sp, r7
 800befe:	bc80      	pop	{r7}
 800bf00:	4770      	bx	lr

0800bf02 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800bf02:	b480      	push	{r7}
 800bf04:	b085      	sub	sp, #20
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
 800bf0a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf12:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	683a      	ldr	r2, [r7, #0]
 800bf18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800bf1c:	2300      	movs	r3, #0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3714      	adds	r7, #20
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bc80      	pop	{r7}
 800bf26:	4770      	bx	lr

0800bf28 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d01c      	beq.n	800bf7c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d115      	bne.n	800bf78 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2201      	movs	r2, #1
 800bf50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	2181      	movs	r1, #129	; 0x81
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f001 fcd7 	bl	800d922 <USBD_LL_Transmit>

      return USBD_OK;
 800bf74:	2300      	movs	r3, #0
 800bf76:	e002      	b.n	800bf7e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e000      	b.n	800bf7e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800bf7c:	2302      	movs	r3, #2
  }
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b084      	sub	sp, #16
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf94:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d017      	beq.n	800bfd0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	7c1b      	ldrb	r3, [r3, #16]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d109      	bne.n	800bfbc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bfae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bfb2:	2101      	movs	r1, #1
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f001 fcd7 	bl	800d968 <USBD_LL_PrepareReceive>
 800bfba:	e007      	b.n	800bfcc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bfc2:	2340      	movs	r3, #64	; 0x40
 800bfc4:	2101      	movs	r1, #1
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f001 fcce 	bl	800d968 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	e000      	b.n	800bfd2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800bfd0:	2302      	movs	r3, #2
  }
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b084      	sub	sp, #16
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	60f8      	str	r0, [r7, #12]
 800bfe2:	60b9      	str	r1, [r7, #8]
 800bfe4:	4613      	mov	r3, r2
 800bfe6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d101      	bne.n	800bff2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bfee:	2302      	movs	r3, #2
 800bff0:	e01a      	b.n	800c028 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d003      	beq.n	800c004 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2200      	movs	r2, #0
 800c000:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d003      	beq.n	800c012 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	68ba      	ldr	r2, [r7, #8]
 800c00e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2201      	movs	r2, #1
 800c016:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	79fa      	ldrb	r2, [r7, #7]
 800c01e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c020:	68f8      	ldr	r0, [r7, #12]
 800c022:	f001 fb3b 	bl	800d69c <USBD_LL_Init>

  return USBD_OK;
 800c026:	2300      	movs	r3, #0
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3710      	adds	r7, #16
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c030:	b480      	push	{r7}
 800c032:	b085      	sub	sp, #20
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800c03a:	2300      	movs	r3, #0
 800c03c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d006      	beq.n	800c052 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	683a      	ldr	r2, [r7, #0]
 800c048:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800c04c:	2300      	movs	r3, #0
 800c04e:	73fb      	strb	r3, [r7, #15]
 800c050:	e001      	b.n	800c056 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c052:	2302      	movs	r3, #2
 800c054:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c056:	7bfb      	ldrb	r3, [r7, #15]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3714      	adds	r7, #20
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bc80      	pop	{r7}
 800c060:	4770      	bx	lr

0800c062 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c062:	b580      	push	{r7, lr}
 800c064:	b082      	sub	sp, #8
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f001 fb70 	bl	800d750 <USBD_LL_Start>

  return USBD_OK;
 800c070:	2300      	movs	r3, #0
}
 800c072:	4618      	mov	r0, r3
 800c074:	3708      	adds	r7, #8
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}

0800c07a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c07a:	b480      	push	{r7}
 800c07c:	b083      	sub	sp, #12
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c082:	2300      	movs	r3, #0
}
 800c084:	4618      	mov	r0, r3
 800c086:	370c      	adds	r7, #12
 800c088:	46bd      	mov	sp, r7
 800c08a:	bc80      	pop	{r7}
 800c08c:	4770      	bx	lr

0800c08e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c08e:	b580      	push	{r7, lr}
 800c090:	b084      	sub	sp, #16
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
 800c096:	460b      	mov	r3, r1
 800c098:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c09a:	2302      	movs	r3, #2
 800c09c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d00c      	beq.n	800c0c2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	78fa      	ldrb	r2, [r7, #3]
 800c0b2:	4611      	mov	r1, r2
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	4798      	blx	r3
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d101      	bne.n	800c0c2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3710      	adds	r7, #16
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	78fa      	ldrb	r2, [r7, #3]
 800c0e2:	4611      	mov	r1, r2
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	4798      	blx	r3

  return USBD_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3708      	adds	r7, #8
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}

0800c0f2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c0f2:	b580      	push	{r7, lr}
 800c0f4:	b082      	sub	sp, #8
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
 800c0fa:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c102:	6839      	ldr	r1, [r7, #0]
 800c104:	4618      	mov	r0, r3
 800c106:	f000 fed8 	bl	800ceba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2201      	movs	r2, #1
 800c10e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c118:	461a      	mov	r2, r3
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c126:	f003 031f 	and.w	r3, r3, #31
 800c12a:	2b02      	cmp	r3, #2
 800c12c:	d016      	beq.n	800c15c <USBD_LL_SetupStage+0x6a>
 800c12e:	2b02      	cmp	r3, #2
 800c130:	d81c      	bhi.n	800c16c <USBD_LL_SetupStage+0x7a>
 800c132:	2b00      	cmp	r3, #0
 800c134:	d002      	beq.n	800c13c <USBD_LL_SetupStage+0x4a>
 800c136:	2b01      	cmp	r3, #1
 800c138:	d008      	beq.n	800c14c <USBD_LL_SetupStage+0x5a>
 800c13a:	e017      	b.n	800c16c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c142:	4619      	mov	r1, r3
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 f9cb 	bl	800c4e0 <USBD_StdDevReq>
      break;
 800c14a:	e01a      	b.n	800c182 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c152:	4619      	mov	r1, r3
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 fa2d 	bl	800c5b4 <USBD_StdItfReq>
      break;
 800c15a:	e012      	b.n	800c182 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800c162:	4619      	mov	r1, r3
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 fa6d 	bl	800c644 <USBD_StdEPReq>
      break;
 800c16a:	e00a      	b.n	800c182 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c172:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c176:	b2db      	uxtb	r3, r3
 800c178:	4619      	mov	r1, r3
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f001 fb48 	bl	800d810 <USBD_LL_StallEP>
      break;
 800c180:	bf00      	nop
  }

  return USBD_OK;
 800c182:	2300      	movs	r3, #0
}
 800c184:	4618      	mov	r0, r3
 800c186:	3708      	adds	r7, #8
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b086      	sub	sp, #24
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	460b      	mov	r3, r1
 800c196:	607a      	str	r2, [r7, #4]
 800c198:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c19a:	7afb      	ldrb	r3, [r7, #11]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d14b      	bne.n	800c238 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c1a6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c1ae:	2b03      	cmp	r3, #3
 800c1b0:	d134      	bne.n	800c21c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	68da      	ldr	r2, [r3, #12]
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	691b      	ldr	r3, [r3, #16]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d919      	bls.n	800c1f2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	68da      	ldr	r2, [r3, #12]
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	691b      	ldr	r3, [r3, #16]
 800c1c6:	1ad2      	subs	r2, r2, r3
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	68da      	ldr	r2, [r3, #12]
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d203      	bcs.n	800c1e0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	e002      	b.n	800c1e6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800c1e4:	b29b      	uxth	r3, r3
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	6879      	ldr	r1, [r7, #4]
 800c1ea:	68f8      	ldr	r0, [r7, #12]
 800c1ec:	f000 ff57 	bl	800d09e <USBD_CtlContinueRx>
 800c1f0:	e038      	b.n	800c264 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1f8:	691b      	ldr	r3, [r3, #16]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d00a      	beq.n	800c214 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800c204:	2b03      	cmp	r3, #3
 800c206:	d105      	bne.n	800c214 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c20e:	691b      	ldr	r3, [r3, #16]
 800c210:	68f8      	ldr	r0, [r7, #12]
 800c212:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800c214:	68f8      	ldr	r0, [r7, #12]
 800c216:	f000 ff54 	bl	800d0c2 <USBD_CtlSendStatus>
 800c21a:	e023      	b.n	800c264 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c222:	2b05      	cmp	r3, #5
 800c224:	d11e      	bne.n	800c264 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2200      	movs	r2, #0
 800c22a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800c22e:	2100      	movs	r1, #0
 800c230:	68f8      	ldr	r0, [r7, #12]
 800c232:	f001 faed 	bl	800d810 <USBD_LL_StallEP>
 800c236:	e015      	b.n	800c264 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c23e:	699b      	ldr	r3, [r3, #24]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d00d      	beq.n	800c260 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800c24a:	2b03      	cmp	r3, #3
 800c24c:	d108      	bne.n	800c260 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c254:	699b      	ldr	r3, [r3, #24]
 800c256:	7afa      	ldrb	r2, [r7, #11]
 800c258:	4611      	mov	r1, r2
 800c25a:	68f8      	ldr	r0, [r7, #12]
 800c25c:	4798      	blx	r3
 800c25e:	e001      	b.n	800c264 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c260:	2302      	movs	r3, #2
 800c262:	e000      	b.n	800c266 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800c264:	2300      	movs	r3, #0
}
 800c266:	4618      	mov	r0, r3
 800c268:	3718      	adds	r7, #24
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b086      	sub	sp, #24
 800c272:	af00      	add	r7, sp, #0
 800c274:	60f8      	str	r0, [r7, #12]
 800c276:	460b      	mov	r3, r1
 800c278:	607a      	str	r2, [r7, #4]
 800c27a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800c27c:	7afb      	ldrb	r3, [r7, #11]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d17f      	bne.n	800c382 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	3314      	adds	r3, #20
 800c286:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c28e:	2b02      	cmp	r3, #2
 800c290:	d15c      	bne.n	800c34c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	68da      	ldr	r2, [r3, #12]
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	691b      	ldr	r3, [r3, #16]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d915      	bls.n	800c2ca <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	68da      	ldr	r2, [r3, #12]
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	691b      	ldr	r3, [r3, #16]
 800c2a6:	1ad2      	subs	r2, r2, r3
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	6879      	ldr	r1, [r7, #4]
 800c2b6:	68f8      	ldr	r0, [r7, #12]
 800c2b8:	f000 fec1 	bl	800d03e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c2bc:	2300      	movs	r3, #0
 800c2be:	2200      	movs	r2, #0
 800c2c0:	2100      	movs	r1, #0
 800c2c2:	68f8      	ldr	r0, [r7, #12]
 800c2c4:	f001 fb50 	bl	800d968 <USBD_LL_PrepareReceive>
 800c2c8:	e04e      	b.n	800c368 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	689b      	ldr	r3, [r3, #8]
 800c2ce:	697a      	ldr	r2, [r7, #20]
 800c2d0:	6912      	ldr	r2, [r2, #16]
 800c2d2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c2d6:	fb01 f202 	mul.w	r2, r1, r2
 800c2da:	1a9b      	subs	r3, r3, r2
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d11c      	bne.n	800c31a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	689a      	ldr	r2, [r3, #8]
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d316      	bcc.n	800c31a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	689a      	ldr	r2, [r3, #8]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d20f      	bcs.n	800c31a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	2100      	movs	r1, #0
 800c2fe:	68f8      	ldr	r0, [r7, #12]
 800c300:	f000 fe9d 	bl	800d03e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2200      	movs	r2, #0
 800c308:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c30c:	2300      	movs	r3, #0
 800c30e:	2200      	movs	r2, #0
 800c310:	2100      	movs	r1, #0
 800c312:	68f8      	ldr	r0, [r7, #12]
 800c314:	f001 fb28 	bl	800d968 <USBD_LL_PrepareReceive>
 800c318:	e026      	b.n	800c368 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d00a      	beq.n	800c33c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800c32c:	2b03      	cmp	r3, #3
 800c32e:	d105      	bne.n	800c33c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c336:	68db      	ldr	r3, [r3, #12]
 800c338:	68f8      	ldr	r0, [r7, #12]
 800c33a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800c33c:	2180      	movs	r1, #128	; 0x80
 800c33e:	68f8      	ldr	r0, [r7, #12]
 800c340:	f001 fa66 	bl	800d810 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800c344:	68f8      	ldr	r0, [r7, #12]
 800c346:	f000 fecf 	bl	800d0e8 <USBD_CtlReceiveStatus>
 800c34a:	e00d      	b.n	800c368 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c352:	2b04      	cmp	r3, #4
 800c354:	d004      	beq.n	800c360 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d103      	bne.n	800c368 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800c360:	2180      	movs	r1, #128	; 0x80
 800c362:	68f8      	ldr	r0, [r7, #12]
 800c364:	f001 fa54 	bl	800d810 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d11d      	bne.n	800c3ae <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800c372:	68f8      	ldr	r0, [r7, #12]
 800c374:	f7ff fe81 	bl	800c07a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2200      	movs	r2, #0
 800c37c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c380:	e015      	b.n	800c3ae <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c388:	695b      	ldr	r3, [r3, #20]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00d      	beq.n	800c3aa <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800c394:	2b03      	cmp	r3, #3
 800c396:	d108      	bne.n	800c3aa <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c39e:	695b      	ldr	r3, [r3, #20]
 800c3a0:	7afa      	ldrb	r2, [r7, #11]
 800c3a2:	4611      	mov	r1, r2
 800c3a4:	68f8      	ldr	r0, [r7, #12]
 800c3a6:	4798      	blx	r3
 800c3a8:	e001      	b.n	800c3ae <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800c3aa:	2302      	movs	r3, #2
 800c3ac:	e000      	b.n	800c3b0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800c3ae:	2300      	movs	r3, #0
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3718      	adds	r7, #24
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c3c0:	2340      	movs	r3, #64	; 0x40
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	2100      	movs	r1, #0
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f001 f9dd 	bl	800d786 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2240      	movs	r2, #64	; 0x40
 800c3d8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c3dc:	2340      	movs	r3, #64	; 0x40
 800c3de:	2200      	movs	r2, #0
 800c3e0:	2180      	movs	r1, #128	; 0x80
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f001 f9cf 	bl	800d786 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2240      	movs	r2, #64	; 0x40
 800c3f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2200      	movs	r2, #0
 800c408:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2200      	movs	r2, #0
 800c40e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d009      	beq.n	800c430 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	6852      	ldr	r2, [r2, #4]
 800c428:	b2d2      	uxtb	r2, r2
 800c42a:	4611      	mov	r1, r2
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	4798      	blx	r3
  }

  return USBD_OK;
 800c430:	2300      	movs	r3, #0
}
 800c432:	4618      	mov	r0, r3
 800c434:	3708      	adds	r7, #8
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c43a:	b480      	push	{r7}
 800c43c:	b083      	sub	sp, #12
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
 800c442:	460b      	mov	r3, r1
 800c444:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	78fa      	ldrb	r2, [r7, #3]
 800c44a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c44c:	2300      	movs	r3, #0
}
 800c44e:	4618      	mov	r0, r3
 800c450:	370c      	adds	r7, #12
 800c452:	46bd      	mov	sp, r7
 800c454:	bc80      	pop	{r7}
 800c456:	4770      	bx	lr

0800c458 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c458:	b480      	push	{r7}
 800c45a:	b083      	sub	sp, #12
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2204      	movs	r2, #4
 800c470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c474:	2300      	movs	r3, #0
}
 800c476:	4618      	mov	r0, r3
 800c478:	370c      	adds	r7, #12
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bc80      	pop	{r7}
 800c47e:	4770      	bx	lr

0800c480 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c48e:	2b04      	cmp	r3, #4
 800c490:	d105      	bne.n	800c49e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c49e:	2300      	movs	r3, #0
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	370c      	adds	r7, #12
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bc80      	pop	{r7}
 800c4a8:	4770      	bx	lr

0800c4aa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b082      	sub	sp, #8
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4b8:	2b03      	cmp	r3, #3
 800c4ba:	d10b      	bne.n	800c4d4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4c2:	69db      	ldr	r3, [r3, #28]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d005      	beq.n	800c4d4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ce:	69db      	ldr	r3, [r3, #28]
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3708      	adds	r7, #8
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
	...

0800c4e0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c4f6:	2b40      	cmp	r3, #64	; 0x40
 800c4f8:	d005      	beq.n	800c506 <USBD_StdDevReq+0x26>
 800c4fa:	2b40      	cmp	r3, #64	; 0x40
 800c4fc:	d84f      	bhi.n	800c59e <USBD_StdDevReq+0xbe>
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d009      	beq.n	800c516 <USBD_StdDevReq+0x36>
 800c502:	2b20      	cmp	r3, #32
 800c504:	d14b      	bne.n	800c59e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	6839      	ldr	r1, [r7, #0]
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	4798      	blx	r3
      break;
 800c514:	e048      	b.n	800c5a8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	785b      	ldrb	r3, [r3, #1]
 800c51a:	2b09      	cmp	r3, #9
 800c51c:	d839      	bhi.n	800c592 <USBD_StdDevReq+0xb2>
 800c51e:	a201      	add	r2, pc, #4	; (adr r2, 800c524 <USBD_StdDevReq+0x44>)
 800c520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c524:	0800c575 	.word	0x0800c575
 800c528:	0800c589 	.word	0x0800c589
 800c52c:	0800c593 	.word	0x0800c593
 800c530:	0800c57f 	.word	0x0800c57f
 800c534:	0800c593 	.word	0x0800c593
 800c538:	0800c557 	.word	0x0800c557
 800c53c:	0800c54d 	.word	0x0800c54d
 800c540:	0800c593 	.word	0x0800c593
 800c544:	0800c56b 	.word	0x0800c56b
 800c548:	0800c561 	.word	0x0800c561
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c54c:	6839      	ldr	r1, [r7, #0]
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 f9dc 	bl	800c90c <USBD_GetDescriptor>
          break;
 800c554:	e022      	b.n	800c59c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c556:	6839      	ldr	r1, [r7, #0]
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 fb3f 	bl	800cbdc <USBD_SetAddress>
          break;
 800c55e:	e01d      	b.n	800c59c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800c560:	6839      	ldr	r1, [r7, #0]
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f000 fb7e 	bl	800cc64 <USBD_SetConfig>
          break;
 800c568:	e018      	b.n	800c59c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c56a:	6839      	ldr	r1, [r7, #0]
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 fc07 	bl	800cd80 <USBD_GetConfig>
          break;
 800c572:	e013      	b.n	800c59c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c574:	6839      	ldr	r1, [r7, #0]
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 fc37 	bl	800cdea <USBD_GetStatus>
          break;
 800c57c:	e00e      	b.n	800c59c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c57e:	6839      	ldr	r1, [r7, #0]
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 fc65 	bl	800ce50 <USBD_SetFeature>
          break;
 800c586:	e009      	b.n	800c59c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c588:	6839      	ldr	r1, [r7, #0]
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 fc74 	bl	800ce78 <USBD_ClrFeature>
          break;
 800c590:	e004      	b.n	800c59c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800c592:	6839      	ldr	r1, [r7, #0]
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 fccc 	bl	800cf32 <USBD_CtlError>
          break;
 800c59a:	bf00      	nop
      }
      break;
 800c59c:	e004      	b.n	800c5a8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800c59e:	6839      	ldr	r1, [r7, #0]
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 fcc6 	bl	800cf32 <USBD_CtlError>
      break;
 800c5a6:	bf00      	nop
  }

  return ret;
 800c5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3710      	adds	r7, #16
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop

0800c5b4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c5ca:	2b40      	cmp	r3, #64	; 0x40
 800c5cc:	d005      	beq.n	800c5da <USBD_StdItfReq+0x26>
 800c5ce:	2b40      	cmp	r3, #64	; 0x40
 800c5d0:	d82e      	bhi.n	800c630 <USBD_StdItfReq+0x7c>
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d001      	beq.n	800c5da <USBD_StdItfReq+0x26>
 800c5d6:	2b20      	cmp	r3, #32
 800c5d8:	d12a      	bne.n	800c630 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5e0:	3b01      	subs	r3, #1
 800c5e2:	2b02      	cmp	r3, #2
 800c5e4:	d81d      	bhi.n	800c622 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	889b      	ldrh	r3, [r3, #4]
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d813      	bhi.n	800c618 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5f6:	689b      	ldr	r3, [r3, #8]
 800c5f8:	6839      	ldr	r1, [r7, #0]
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	4798      	blx	r3
 800c5fe:	4603      	mov	r3, r0
 800c600:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	88db      	ldrh	r3, [r3, #6]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d110      	bne.n	800c62c <USBD_StdItfReq+0x78>
 800c60a:	7bfb      	ldrb	r3, [r7, #15]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d10d      	bne.n	800c62c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f000 fd56 	bl	800d0c2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c616:	e009      	b.n	800c62c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800c618:	6839      	ldr	r1, [r7, #0]
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 fc89 	bl	800cf32 <USBD_CtlError>
          break;
 800c620:	e004      	b.n	800c62c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800c622:	6839      	ldr	r1, [r7, #0]
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f000 fc84 	bl	800cf32 <USBD_CtlError>
          break;
 800c62a:	e000      	b.n	800c62e <USBD_StdItfReq+0x7a>
          break;
 800c62c:	bf00      	nop
      }
      break;
 800c62e:	e004      	b.n	800c63a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800c630:	6839      	ldr	r1, [r7, #0]
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 fc7d 	bl	800cf32 <USBD_CtlError>
      break;
 800c638:	bf00      	nop
  }

  return USBD_OK;
 800c63a:	2300      	movs	r3, #0
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3710      	adds	r7, #16
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c64e:	2300      	movs	r3, #0
 800c650:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	889b      	ldrh	r3, [r3, #4]
 800c656:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c660:	2b40      	cmp	r3, #64	; 0x40
 800c662:	d007      	beq.n	800c674 <USBD_StdEPReq+0x30>
 800c664:	2b40      	cmp	r3, #64	; 0x40
 800c666:	f200 8146 	bhi.w	800c8f6 <USBD_StdEPReq+0x2b2>
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00a      	beq.n	800c684 <USBD_StdEPReq+0x40>
 800c66e:	2b20      	cmp	r3, #32
 800c670:	f040 8141 	bne.w	800c8f6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	6839      	ldr	r1, [r7, #0]
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	4798      	blx	r3
      break;
 800c682:	e13d      	b.n	800c900 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c68c:	2b20      	cmp	r3, #32
 800c68e:	d10a      	bne.n	800c6a6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	6839      	ldr	r1, [r7, #0]
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	4798      	blx	r3
 800c69e:	4603      	mov	r3, r0
 800c6a0:	73fb      	strb	r3, [r7, #15]

        return ret;
 800c6a2:	7bfb      	ldrb	r3, [r7, #15]
 800c6a4:	e12d      	b.n	800c902 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	785b      	ldrb	r3, [r3, #1]
 800c6aa:	2b03      	cmp	r3, #3
 800c6ac:	d007      	beq.n	800c6be <USBD_StdEPReq+0x7a>
 800c6ae:	2b03      	cmp	r3, #3
 800c6b0:	f300 811b 	bgt.w	800c8ea <USBD_StdEPReq+0x2a6>
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d072      	beq.n	800c79e <USBD_StdEPReq+0x15a>
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d03a      	beq.n	800c732 <USBD_StdEPReq+0xee>
 800c6bc:	e115      	b.n	800c8ea <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6c4:	2b02      	cmp	r3, #2
 800c6c6:	d002      	beq.n	800c6ce <USBD_StdEPReq+0x8a>
 800c6c8:	2b03      	cmp	r3, #3
 800c6ca:	d015      	beq.n	800c6f8 <USBD_StdEPReq+0xb4>
 800c6cc:	e02b      	b.n	800c726 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c6ce:	7bbb      	ldrb	r3, [r7, #14]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d00c      	beq.n	800c6ee <USBD_StdEPReq+0xaa>
 800c6d4:	7bbb      	ldrb	r3, [r7, #14]
 800c6d6:	2b80      	cmp	r3, #128	; 0x80
 800c6d8:	d009      	beq.n	800c6ee <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c6da:	7bbb      	ldrb	r3, [r7, #14]
 800c6dc:	4619      	mov	r1, r3
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f001 f896 	bl	800d810 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c6e4:	2180      	movs	r1, #128	; 0x80
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f001 f892 	bl	800d810 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c6ec:	e020      	b.n	800c730 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800c6ee:	6839      	ldr	r1, [r7, #0]
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 fc1e 	bl	800cf32 <USBD_CtlError>
              break;
 800c6f6:	e01b      	b.n	800c730 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	885b      	ldrh	r3, [r3, #2]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d10e      	bne.n	800c71e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800c700:	7bbb      	ldrb	r3, [r7, #14]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d00b      	beq.n	800c71e <USBD_StdEPReq+0xda>
 800c706:	7bbb      	ldrb	r3, [r7, #14]
 800c708:	2b80      	cmp	r3, #128	; 0x80
 800c70a:	d008      	beq.n	800c71e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	88db      	ldrh	r3, [r3, #6]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d104      	bne.n	800c71e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c714:	7bbb      	ldrb	r3, [r7, #14]
 800c716:	4619      	mov	r1, r3
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f001 f879 	bl	800d810 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 fccf 	bl	800d0c2 <USBD_CtlSendStatus>

              break;
 800c724:	e004      	b.n	800c730 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800c726:	6839      	ldr	r1, [r7, #0]
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 fc02 	bl	800cf32 <USBD_CtlError>
              break;
 800c72e:	bf00      	nop
          }
          break;
 800c730:	e0e0      	b.n	800c8f4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c738:	2b02      	cmp	r3, #2
 800c73a:	d002      	beq.n	800c742 <USBD_StdEPReq+0xfe>
 800c73c:	2b03      	cmp	r3, #3
 800c73e:	d015      	beq.n	800c76c <USBD_StdEPReq+0x128>
 800c740:	e026      	b.n	800c790 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c742:	7bbb      	ldrb	r3, [r7, #14]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d00c      	beq.n	800c762 <USBD_StdEPReq+0x11e>
 800c748:	7bbb      	ldrb	r3, [r7, #14]
 800c74a:	2b80      	cmp	r3, #128	; 0x80
 800c74c:	d009      	beq.n	800c762 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c74e:	7bbb      	ldrb	r3, [r7, #14]
 800c750:	4619      	mov	r1, r3
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f001 f85c 	bl	800d810 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c758:	2180      	movs	r1, #128	; 0x80
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f001 f858 	bl	800d810 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c760:	e01c      	b.n	800c79c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800c762:	6839      	ldr	r1, [r7, #0]
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f000 fbe4 	bl	800cf32 <USBD_CtlError>
              break;
 800c76a:	e017      	b.n	800c79c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	885b      	ldrh	r3, [r3, #2]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d112      	bne.n	800c79a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c774:	7bbb      	ldrb	r3, [r7, #14]
 800c776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d004      	beq.n	800c788 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c77e:	7bbb      	ldrb	r3, [r7, #14]
 800c780:	4619      	mov	r1, r3
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f001 f863 	bl	800d84e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 fc9a 	bl	800d0c2 <USBD_CtlSendStatus>
              }
              break;
 800c78e:	e004      	b.n	800c79a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c790:	6839      	ldr	r1, [r7, #0]
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 fbcd 	bl	800cf32 <USBD_CtlError>
              break;
 800c798:	e000      	b.n	800c79c <USBD_StdEPReq+0x158>
              break;
 800c79a:	bf00      	nop
          }
          break;
 800c79c:	e0aa      	b.n	800c8f4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7a4:	2b02      	cmp	r3, #2
 800c7a6:	d002      	beq.n	800c7ae <USBD_StdEPReq+0x16a>
 800c7a8:	2b03      	cmp	r3, #3
 800c7aa:	d032      	beq.n	800c812 <USBD_StdEPReq+0x1ce>
 800c7ac:	e097      	b.n	800c8de <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c7ae:	7bbb      	ldrb	r3, [r7, #14]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d007      	beq.n	800c7c4 <USBD_StdEPReq+0x180>
 800c7b4:	7bbb      	ldrb	r3, [r7, #14]
 800c7b6:	2b80      	cmp	r3, #128	; 0x80
 800c7b8:	d004      	beq.n	800c7c4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c7ba:	6839      	ldr	r1, [r7, #0]
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 fbb8 	bl	800cf32 <USBD_CtlError>
                break;
 800c7c2:	e091      	b.n	800c8e8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	da0b      	bge.n	800c7e4 <USBD_StdEPReq+0x1a0>
 800c7cc:	7bbb      	ldrb	r3, [r7, #14]
 800c7ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	4413      	add	r3, r2
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	3310      	adds	r3, #16
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	4413      	add	r3, r2
 800c7e0:	3304      	adds	r3, #4
 800c7e2:	e00b      	b.n	800c7fc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c7e4:	7bbb      	ldrb	r3, [r7, #14]
 800c7e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7ea:	4613      	mov	r3, r2
 800c7ec:	009b      	lsls	r3, r3, #2
 800c7ee:	4413      	add	r3, r2
 800c7f0:	009b      	lsls	r3, r3, #2
 800c7f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	4413      	add	r3, r2
 800c7fa:	3304      	adds	r3, #4
 800c7fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	2200      	movs	r2, #0
 800c802:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	2202      	movs	r2, #2
 800c808:	4619      	mov	r1, r3
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f000 fbfb 	bl	800d006 <USBD_CtlSendData>
              break;
 800c810:	e06a      	b.n	800c8e8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c812:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c816:	2b00      	cmp	r3, #0
 800c818:	da11      	bge.n	800c83e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c81a:	7bbb      	ldrb	r3, [r7, #14]
 800c81c:	f003 020f 	and.w	r2, r3, #15
 800c820:	6879      	ldr	r1, [r7, #4]
 800c822:	4613      	mov	r3, r2
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	4413      	add	r3, r2
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	440b      	add	r3, r1
 800c82c:	3318      	adds	r3, #24
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d117      	bne.n	800c864 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c834:	6839      	ldr	r1, [r7, #0]
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 fb7b 	bl	800cf32 <USBD_CtlError>
                  break;
 800c83c:	e054      	b.n	800c8e8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c83e:	7bbb      	ldrb	r3, [r7, #14]
 800c840:	f003 020f 	and.w	r2, r3, #15
 800c844:	6879      	ldr	r1, [r7, #4]
 800c846:	4613      	mov	r3, r2
 800c848:	009b      	lsls	r3, r3, #2
 800c84a:	4413      	add	r3, r2
 800c84c:	009b      	lsls	r3, r3, #2
 800c84e:	440b      	add	r3, r1
 800c850:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d104      	bne.n	800c864 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c85a:	6839      	ldr	r1, [r7, #0]
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 fb68 	bl	800cf32 <USBD_CtlError>
                  break;
 800c862:	e041      	b.n	800c8e8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c864:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	da0b      	bge.n	800c884 <USBD_StdEPReq+0x240>
 800c86c:	7bbb      	ldrb	r3, [r7, #14]
 800c86e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c872:	4613      	mov	r3, r2
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	4413      	add	r3, r2
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	3310      	adds	r3, #16
 800c87c:	687a      	ldr	r2, [r7, #4]
 800c87e:	4413      	add	r3, r2
 800c880:	3304      	adds	r3, #4
 800c882:	e00b      	b.n	800c89c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c884:	7bbb      	ldrb	r3, [r7, #14]
 800c886:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c88a:	4613      	mov	r3, r2
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	4413      	add	r3, r2
 800c890:	009b      	lsls	r3, r3, #2
 800c892:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	4413      	add	r3, r2
 800c89a:	3304      	adds	r3, #4
 800c89c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c89e:	7bbb      	ldrb	r3, [r7, #14]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d002      	beq.n	800c8aa <USBD_StdEPReq+0x266>
 800c8a4:	7bbb      	ldrb	r3, [r7, #14]
 800c8a6:	2b80      	cmp	r3, #128	; 0x80
 800c8a8:	d103      	bne.n	800c8b2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	601a      	str	r2, [r3, #0]
 800c8b0:	e00e      	b.n	800c8d0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c8b2:	7bbb      	ldrb	r3, [r7, #14]
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 ffe8 	bl	800d88c <USBD_LL_IsStallEP>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d003      	beq.n	800c8ca <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	601a      	str	r2, [r3, #0]
 800c8c8:	e002      	b.n	800c8d0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	2202      	movs	r2, #2
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 fb95 	bl	800d006 <USBD_CtlSendData>
              break;
 800c8dc:	e004      	b.n	800c8e8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800c8de:	6839      	ldr	r1, [r7, #0]
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 fb26 	bl	800cf32 <USBD_CtlError>
              break;
 800c8e6:	bf00      	nop
          }
          break;
 800c8e8:	e004      	b.n	800c8f4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800c8ea:	6839      	ldr	r1, [r7, #0]
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 fb20 	bl	800cf32 <USBD_CtlError>
          break;
 800c8f2:	bf00      	nop
      }
      break;
 800c8f4:	e004      	b.n	800c900 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800c8f6:	6839      	ldr	r1, [r7, #0]
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 fb1a 	bl	800cf32 <USBD_CtlError>
      break;
 800c8fe:	bf00      	nop
  }

  return ret;
 800c900:	7bfb      	ldrb	r3, [r7, #15]
}
 800c902:	4618      	mov	r0, r3
 800c904:	3710      	adds	r7, #16
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}
	...

0800c90c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c916:	2300      	movs	r3, #0
 800c918:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c91a:	2300      	movs	r3, #0
 800c91c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c91e:	2300      	movs	r3, #0
 800c920:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	885b      	ldrh	r3, [r3, #2]
 800c926:	0a1b      	lsrs	r3, r3, #8
 800c928:	b29b      	uxth	r3, r3
 800c92a:	3b01      	subs	r3, #1
 800c92c:	2b06      	cmp	r3, #6
 800c92e:	f200 8128 	bhi.w	800cb82 <USBD_GetDescriptor+0x276>
 800c932:	a201      	add	r2, pc, #4	; (adr r2, 800c938 <USBD_GetDescriptor+0x2c>)
 800c934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c938:	0800c955 	.word	0x0800c955
 800c93c:	0800c96d 	.word	0x0800c96d
 800c940:	0800c9ad 	.word	0x0800c9ad
 800c944:	0800cb83 	.word	0x0800cb83
 800c948:	0800cb83 	.word	0x0800cb83
 800c94c:	0800cb23 	.word	0x0800cb23
 800c950:	0800cb4f 	.word	0x0800cb4f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	7c12      	ldrb	r2, [r2, #16]
 800c960:	f107 0108 	add.w	r1, r7, #8
 800c964:	4610      	mov	r0, r2
 800c966:	4798      	blx	r3
 800c968:	60f8      	str	r0, [r7, #12]
      break;
 800c96a:	e112      	b.n	800cb92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	7c1b      	ldrb	r3, [r3, #16]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d10d      	bne.n	800c990 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c97c:	f107 0208 	add.w	r2, r7, #8
 800c980:	4610      	mov	r0, r2
 800c982:	4798      	blx	r3
 800c984:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	3301      	adds	r3, #1
 800c98a:	2202      	movs	r2, #2
 800c98c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c98e:	e100      	b.n	800cb92 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c998:	f107 0208 	add.w	r2, r7, #8
 800c99c:	4610      	mov	r0, r2
 800c99e:	4798      	blx	r3
 800c9a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	2202      	movs	r2, #2
 800c9a8:	701a      	strb	r2, [r3, #0]
      break;
 800c9aa:	e0f2      	b.n	800cb92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	885b      	ldrh	r3, [r3, #2]
 800c9b0:	b2db      	uxtb	r3, r3
 800c9b2:	2b05      	cmp	r3, #5
 800c9b4:	f200 80ac 	bhi.w	800cb10 <USBD_GetDescriptor+0x204>
 800c9b8:	a201      	add	r2, pc, #4	; (adr r2, 800c9c0 <USBD_GetDescriptor+0xb4>)
 800c9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9be:	bf00      	nop
 800c9c0:	0800c9d9 	.word	0x0800c9d9
 800c9c4:	0800ca0d 	.word	0x0800ca0d
 800c9c8:	0800ca41 	.word	0x0800ca41
 800c9cc:	0800ca75 	.word	0x0800ca75
 800c9d0:	0800caa9 	.word	0x0800caa9
 800c9d4:	0800cadd 	.word	0x0800cadd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d00b      	beq.n	800c9fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	7c12      	ldrb	r2, [r2, #16]
 800c9f0:	f107 0108 	add.w	r1, r7, #8
 800c9f4:	4610      	mov	r0, r2
 800c9f6:	4798      	blx	r3
 800c9f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c9fa:	e091      	b.n	800cb20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c9fc:	6839      	ldr	r1, [r7, #0]
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 fa97 	bl	800cf32 <USBD_CtlError>
            err++;
 800ca04:	7afb      	ldrb	r3, [r7, #11]
 800ca06:	3301      	adds	r3, #1
 800ca08:	72fb      	strb	r3, [r7, #11]
          break;
 800ca0a:	e089      	b.n	800cb20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d00b      	beq.n	800ca30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ca1e:	689b      	ldr	r3, [r3, #8]
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	7c12      	ldrb	r2, [r2, #16]
 800ca24:	f107 0108 	add.w	r1, r7, #8
 800ca28:	4610      	mov	r0, r2
 800ca2a:	4798      	blx	r3
 800ca2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca2e:	e077      	b.n	800cb20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca30:	6839      	ldr	r1, [r7, #0]
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 fa7d 	bl	800cf32 <USBD_CtlError>
            err++;
 800ca38:	7afb      	ldrb	r3, [r7, #11]
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	72fb      	strb	r3, [r7, #11]
          break;
 800ca3e:	e06f      	b.n	800cb20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ca46:	68db      	ldr	r3, [r3, #12]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d00b      	beq.n	800ca64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	7c12      	ldrb	r2, [r2, #16]
 800ca58:	f107 0108 	add.w	r1, r7, #8
 800ca5c:	4610      	mov	r0, r2
 800ca5e:	4798      	blx	r3
 800ca60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca62:	e05d      	b.n	800cb20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca64:	6839      	ldr	r1, [r7, #0]
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f000 fa63 	bl	800cf32 <USBD_CtlError>
            err++;
 800ca6c:	7afb      	ldrb	r3, [r7, #11]
 800ca6e:	3301      	adds	r3, #1
 800ca70:	72fb      	strb	r3, [r7, #11]
          break;
 800ca72:	e055      	b.n	800cb20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ca7a:	691b      	ldr	r3, [r3, #16]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d00b      	beq.n	800ca98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ca86:	691b      	ldr	r3, [r3, #16]
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	7c12      	ldrb	r2, [r2, #16]
 800ca8c:	f107 0108 	add.w	r1, r7, #8
 800ca90:	4610      	mov	r0, r2
 800ca92:	4798      	blx	r3
 800ca94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca96:	e043      	b.n	800cb20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ca98:	6839      	ldr	r1, [r7, #0]
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f000 fa49 	bl	800cf32 <USBD_CtlError>
            err++;
 800caa0:	7afb      	ldrb	r3, [r7, #11]
 800caa2:	3301      	adds	r3, #1
 800caa4:	72fb      	strb	r3, [r7, #11]
          break;
 800caa6:	e03b      	b.n	800cb20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800caae:	695b      	ldr	r3, [r3, #20]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d00b      	beq.n	800cacc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800caba:	695b      	ldr	r3, [r3, #20]
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	7c12      	ldrb	r2, [r2, #16]
 800cac0:	f107 0108 	add.w	r1, r7, #8
 800cac4:	4610      	mov	r0, r2
 800cac6:	4798      	blx	r3
 800cac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800caca:	e029      	b.n	800cb20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cacc:	6839      	ldr	r1, [r7, #0]
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 fa2f 	bl	800cf32 <USBD_CtlError>
            err++;
 800cad4:	7afb      	ldrb	r3, [r7, #11]
 800cad6:	3301      	adds	r3, #1
 800cad8:	72fb      	strb	r3, [r7, #11]
          break;
 800cada:	e021      	b.n	800cb20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800cae2:	699b      	ldr	r3, [r3, #24]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d00b      	beq.n	800cb00 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800caee:	699b      	ldr	r3, [r3, #24]
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	7c12      	ldrb	r2, [r2, #16]
 800caf4:	f107 0108 	add.w	r1, r7, #8
 800caf8:	4610      	mov	r0, r2
 800cafa:	4798      	blx	r3
 800cafc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cafe:	e00f      	b.n	800cb20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cb00:	6839      	ldr	r1, [r7, #0]
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 fa15 	bl	800cf32 <USBD_CtlError>
            err++;
 800cb08:	7afb      	ldrb	r3, [r7, #11]
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	72fb      	strb	r3, [r7, #11]
          break;
 800cb0e:	e007      	b.n	800cb20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800cb10:	6839      	ldr	r1, [r7, #0]
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 fa0d 	bl	800cf32 <USBD_CtlError>
          err++;
 800cb18:	7afb      	ldrb	r3, [r7, #11]
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800cb1e:	e038      	b.n	800cb92 <USBD_GetDescriptor+0x286>
 800cb20:	e037      	b.n	800cb92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	7c1b      	ldrb	r3, [r3, #16]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d109      	bne.n	800cb3e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb32:	f107 0208 	add.w	r2, r7, #8
 800cb36:	4610      	mov	r0, r2
 800cb38:	4798      	blx	r3
 800cb3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb3c:	e029      	b.n	800cb92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cb3e:	6839      	ldr	r1, [r7, #0]
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f000 f9f6 	bl	800cf32 <USBD_CtlError>
        err++;
 800cb46:	7afb      	ldrb	r3, [r7, #11]
 800cb48:	3301      	adds	r3, #1
 800cb4a:	72fb      	strb	r3, [r7, #11]
      break;
 800cb4c:	e021      	b.n	800cb92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	7c1b      	ldrb	r3, [r3, #16]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d10d      	bne.n	800cb72 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cb5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb5e:	f107 0208 	add.w	r2, r7, #8
 800cb62:	4610      	mov	r0, r2
 800cb64:	4798      	blx	r3
 800cb66:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	2207      	movs	r2, #7
 800cb6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb70:	e00f      	b.n	800cb92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cb72:	6839      	ldr	r1, [r7, #0]
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f000 f9dc 	bl	800cf32 <USBD_CtlError>
        err++;
 800cb7a:	7afb      	ldrb	r3, [r7, #11]
 800cb7c:	3301      	adds	r3, #1
 800cb7e:	72fb      	strb	r3, [r7, #11]
      break;
 800cb80:	e007      	b.n	800cb92 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cb82:	6839      	ldr	r1, [r7, #0]
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f000 f9d4 	bl	800cf32 <USBD_CtlError>
      err++;
 800cb8a:	7afb      	ldrb	r3, [r7, #11]
 800cb8c:	3301      	adds	r3, #1
 800cb8e:	72fb      	strb	r3, [r7, #11]
      break;
 800cb90:	bf00      	nop
  }

  if (err != 0U)
 800cb92:	7afb      	ldrb	r3, [r7, #11]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d11c      	bne.n	800cbd2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800cb98:	893b      	ldrh	r3, [r7, #8]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d011      	beq.n	800cbc2 <USBD_GetDescriptor+0x2b6>
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	88db      	ldrh	r3, [r3, #6]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d00d      	beq.n	800cbc2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	88da      	ldrh	r2, [r3, #6]
 800cbaa:	893b      	ldrh	r3, [r7, #8]
 800cbac:	4293      	cmp	r3, r2
 800cbae:	bf28      	it	cs
 800cbb0:	4613      	movcs	r3, r2
 800cbb2:	b29b      	uxth	r3, r3
 800cbb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cbb6:	893b      	ldrh	r3, [r7, #8]
 800cbb8:	461a      	mov	r2, r3
 800cbba:	68f9      	ldr	r1, [r7, #12]
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 fa22 	bl	800d006 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	88db      	ldrh	r3, [r3, #6]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d104      	bne.n	800cbd4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f000 fa79 	bl	800d0c2 <USBD_CtlSendStatus>
 800cbd0:	e000      	b.n	800cbd4 <USBD_GetDescriptor+0x2c8>
    return;
 800cbd2:	bf00      	nop
    }
  }
}
 800cbd4:	3710      	adds	r7, #16
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop

0800cbdc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b084      	sub	sp, #16
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	889b      	ldrh	r3, [r3, #4]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d130      	bne.n	800cc50 <USBD_SetAddress+0x74>
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	88db      	ldrh	r3, [r3, #6]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d12c      	bne.n	800cc50 <USBD_SetAddress+0x74>
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	885b      	ldrh	r3, [r3, #2]
 800cbfa:	2b7f      	cmp	r3, #127	; 0x7f
 800cbfc:	d828      	bhi.n	800cc50 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	885b      	ldrh	r3, [r3, #2]
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc10:	2b03      	cmp	r3, #3
 800cc12:	d104      	bne.n	800cc1e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800cc14:	6839      	ldr	r1, [r7, #0]
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 f98b 	bl	800cf32 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc1c:	e01d      	b.n	800cc5a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	7bfa      	ldrb	r2, [r7, #15]
 800cc22:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cc26:	7bfb      	ldrb	r3, [r7, #15]
 800cc28:	4619      	mov	r1, r3
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f000 fe5a 	bl	800d8e4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f000 fa46 	bl	800d0c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cc36:	7bfb      	ldrb	r3, [r7, #15]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d004      	beq.n	800cc46 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2202      	movs	r2, #2
 800cc40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc44:	e009      	b.n	800cc5a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2201      	movs	r2, #1
 800cc4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc4e:	e004      	b.n	800cc5a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cc50:	6839      	ldr	r1, [r7, #0]
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f000 f96d 	bl	800cf32 <USBD_CtlError>
  }
}
 800cc58:	bf00      	nop
 800cc5a:	bf00      	nop
 800cc5c:	3710      	adds	r7, #16
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
	...

0800cc64 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	885b      	ldrh	r3, [r3, #2]
 800cc72:	b2da      	uxtb	r2, r3
 800cc74:	4b41      	ldr	r3, [pc, #260]	; (800cd7c <USBD_SetConfig+0x118>)
 800cc76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cc78:	4b40      	ldr	r3, [pc, #256]	; (800cd7c <USBD_SetConfig+0x118>)
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d904      	bls.n	800cc8a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800cc80:	6839      	ldr	r1, [r7, #0]
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 f955 	bl	800cf32 <USBD_CtlError>
 800cc88:	e075      	b.n	800cd76 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc90:	2b02      	cmp	r3, #2
 800cc92:	d002      	beq.n	800cc9a <USBD_SetConfig+0x36>
 800cc94:	2b03      	cmp	r3, #3
 800cc96:	d023      	beq.n	800cce0 <USBD_SetConfig+0x7c>
 800cc98:	e062      	b.n	800cd60 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800cc9a:	4b38      	ldr	r3, [pc, #224]	; (800cd7c <USBD_SetConfig+0x118>)
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d01a      	beq.n	800ccd8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800cca2:	4b36      	ldr	r3, [pc, #216]	; (800cd7c <USBD_SetConfig+0x118>)
 800cca4:	781b      	ldrb	r3, [r3, #0]
 800cca6:	461a      	mov	r2, r3
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2203      	movs	r2, #3
 800ccb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ccb4:	4b31      	ldr	r3, [pc, #196]	; (800cd7c <USBD_SetConfig+0x118>)
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	4619      	mov	r1, r3
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f7ff f9e7 	bl	800c08e <USBD_SetClassConfig>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	2b02      	cmp	r3, #2
 800ccc4:	d104      	bne.n	800ccd0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800ccc6:	6839      	ldr	r1, [r7, #0]
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f000 f932 	bl	800cf32 <USBD_CtlError>
            return;
 800ccce:	e052      	b.n	800cd76 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f000 f9f6 	bl	800d0c2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800ccd6:	e04e      	b.n	800cd76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 f9f2 	bl	800d0c2 <USBD_CtlSendStatus>
        break;
 800ccde:	e04a      	b.n	800cd76 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800cce0:	4b26      	ldr	r3, [pc, #152]	; (800cd7c <USBD_SetConfig+0x118>)
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d112      	bne.n	800cd0e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2202      	movs	r2, #2
 800ccec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800ccf0:	4b22      	ldr	r3, [pc, #136]	; (800cd7c <USBD_SetConfig+0x118>)
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800ccfa:	4b20      	ldr	r3, [pc, #128]	; (800cd7c <USBD_SetConfig+0x118>)
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	4619      	mov	r1, r3
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f7ff f9e3 	bl	800c0cc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f000 f9db 	bl	800d0c2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800cd0c:	e033      	b.n	800cd76 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800cd0e:	4b1b      	ldr	r3, [pc, #108]	; (800cd7c <USBD_SetConfig+0x118>)
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	461a      	mov	r2, r3
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d01d      	beq.n	800cd58 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	4619      	mov	r1, r3
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f7ff f9d1 	bl	800c0cc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800cd2a:	4b14      	ldr	r3, [pc, #80]	; (800cd7c <USBD_SetConfig+0x118>)
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	461a      	mov	r2, r3
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800cd34:	4b11      	ldr	r3, [pc, #68]	; (800cd7c <USBD_SetConfig+0x118>)
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	4619      	mov	r1, r3
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f7ff f9a7 	bl	800c08e <USBD_SetClassConfig>
 800cd40:	4603      	mov	r3, r0
 800cd42:	2b02      	cmp	r3, #2
 800cd44:	d104      	bne.n	800cd50 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800cd46:	6839      	ldr	r1, [r7, #0]
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f000 f8f2 	bl	800cf32 <USBD_CtlError>
            return;
 800cd4e:	e012      	b.n	800cd76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f000 f9b6 	bl	800d0c2 <USBD_CtlSendStatus>
        break;
 800cd56:	e00e      	b.n	800cd76 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800cd58:	6878      	ldr	r0, [r7, #4]
 800cd5a:	f000 f9b2 	bl	800d0c2 <USBD_CtlSendStatus>
        break;
 800cd5e:	e00a      	b.n	800cd76 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800cd60:	6839      	ldr	r1, [r7, #0]
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 f8e5 	bl	800cf32 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800cd68:	4b04      	ldr	r3, [pc, #16]	; (800cd7c <USBD_SetConfig+0x118>)
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f7ff f9ac 	bl	800c0cc <USBD_ClrClassConfig>
        break;
 800cd74:	bf00      	nop
    }
  }
}
 800cd76:	3708      	adds	r7, #8
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}
 800cd7c:	20000f84 	.word	0x20000f84

0800cd80 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b082      	sub	sp, #8
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	88db      	ldrh	r3, [r3, #6]
 800cd8e:	2b01      	cmp	r3, #1
 800cd90:	d004      	beq.n	800cd9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cd92:	6839      	ldr	r1, [r7, #0]
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f000 f8cc 	bl	800cf32 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cd9a:	e022      	b.n	800cde2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cda2:	2b02      	cmp	r3, #2
 800cda4:	dc02      	bgt.n	800cdac <USBD_GetConfig+0x2c>
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	dc03      	bgt.n	800cdb2 <USBD_GetConfig+0x32>
 800cdaa:	e015      	b.n	800cdd8 <USBD_GetConfig+0x58>
 800cdac:	2b03      	cmp	r3, #3
 800cdae:	d00b      	beq.n	800cdc8 <USBD_GetConfig+0x48>
 800cdb0:	e012      	b.n	800cdd8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	3308      	adds	r3, #8
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f000 f920 	bl	800d006 <USBD_CtlSendData>
        break;
 800cdc6:	e00c      	b.n	800cde2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	3304      	adds	r3, #4
 800cdcc:	2201      	movs	r2, #1
 800cdce:	4619      	mov	r1, r3
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f000 f918 	bl	800d006 <USBD_CtlSendData>
        break;
 800cdd6:	e004      	b.n	800cde2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800cdd8:	6839      	ldr	r1, [r7, #0]
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f000 f8a9 	bl	800cf32 <USBD_CtlError>
        break;
 800cde0:	bf00      	nop
}
 800cde2:	bf00      	nop
 800cde4:	3708      	adds	r7, #8
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}

0800cdea <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdea:	b580      	push	{r7, lr}
 800cdec:	b082      	sub	sp, #8
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
 800cdf2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdfa:	3b01      	subs	r3, #1
 800cdfc:	2b02      	cmp	r3, #2
 800cdfe:	d81e      	bhi.n	800ce3e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	88db      	ldrh	r3, [r3, #6]
 800ce04:	2b02      	cmp	r3, #2
 800ce06:	d004      	beq.n	800ce12 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800ce08:	6839      	ldr	r1, [r7, #0]
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 f891 	bl	800cf32 <USBD_CtlError>
        break;
 800ce10:	e01a      	b.n	800ce48 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2201      	movs	r2, #1
 800ce16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d005      	beq.n	800ce2e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	68db      	ldr	r3, [r3, #12]
 800ce26:	f043 0202 	orr.w	r2, r3, #2
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	330c      	adds	r3, #12
 800ce32:	2202      	movs	r2, #2
 800ce34:	4619      	mov	r1, r3
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f000 f8e5 	bl	800d006 <USBD_CtlSendData>
      break;
 800ce3c:	e004      	b.n	800ce48 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ce3e:	6839      	ldr	r1, [r7, #0]
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f000 f876 	bl	800cf32 <USBD_CtlError>
      break;
 800ce46:	bf00      	nop
  }
}
 800ce48:	bf00      	nop
 800ce4a:	3708      	adds	r7, #8
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	885b      	ldrh	r3, [r3, #2]
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	d106      	bne.n	800ce70 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2201      	movs	r2, #1
 800ce66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f000 f929 	bl	800d0c2 <USBD_CtlSendStatus>
  }
}
 800ce70:	bf00      	nop
 800ce72:	3708      	adds	r7, #8
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce88:	3b01      	subs	r3, #1
 800ce8a:	2b02      	cmp	r3, #2
 800ce8c:	d80b      	bhi.n	800cea6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	885b      	ldrh	r3, [r3, #2]
 800ce92:	2b01      	cmp	r3, #1
 800ce94:	d10c      	bne.n	800ceb0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f000 f90f 	bl	800d0c2 <USBD_CtlSendStatus>
      }
      break;
 800cea4:	e004      	b.n	800ceb0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800cea6:	6839      	ldr	r1, [r7, #0]
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f000 f842 	bl	800cf32 <USBD_CtlError>
      break;
 800ceae:	e000      	b.n	800ceb2 <USBD_ClrFeature+0x3a>
      break;
 800ceb0:	bf00      	nop
  }
}
 800ceb2:	bf00      	nop
 800ceb4:	3708      	adds	r7, #8
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}

0800ceba <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ceba:	b480      	push	{r7}
 800cebc:	b083      	sub	sp, #12
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
 800cec2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	781a      	ldrb	r2, [r3, #0]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	785a      	ldrb	r2, [r3, #1]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	3302      	adds	r3, #2
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	b29a      	uxth	r2, r3
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	3303      	adds	r3, #3
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	b29b      	uxth	r3, r3
 800cee4:	021b      	lsls	r3, r3, #8
 800cee6:	b29b      	uxth	r3, r3
 800cee8:	4413      	add	r3, r2
 800ceea:	b29a      	uxth	r2, r3
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	3304      	adds	r3, #4
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	b29a      	uxth	r2, r3
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	3305      	adds	r3, #5
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	021b      	lsls	r3, r3, #8
 800cf02:	b29b      	uxth	r3, r3
 800cf04:	4413      	add	r3, r2
 800cf06:	b29a      	uxth	r2, r3
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	3306      	adds	r3, #6
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	b29a      	uxth	r2, r3
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	3307      	adds	r3, #7
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	b29b      	uxth	r3, r3
 800cf1c:	021b      	lsls	r3, r3, #8
 800cf1e:	b29b      	uxth	r3, r3
 800cf20:	4413      	add	r3, r2
 800cf22:	b29a      	uxth	r2, r3
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	80da      	strh	r2, [r3, #6]

}
 800cf28:	bf00      	nop
 800cf2a:	370c      	adds	r7, #12
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bc80      	pop	{r7}
 800cf30:	4770      	bx	lr

0800cf32 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800cf32:	b580      	push	{r7, lr}
 800cf34:	b082      	sub	sp, #8
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	6078      	str	r0, [r7, #4]
 800cf3a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800cf3c:	2180      	movs	r1, #128	; 0x80
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f000 fc66 	bl	800d810 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800cf44:	2100      	movs	r1, #0
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 fc62 	bl	800d810 <USBD_LL_StallEP>
}
 800cf4c:	bf00      	nop
 800cf4e:	3708      	adds	r7, #8
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b086      	sub	sp, #24
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cf60:	2300      	movs	r3, #0
 800cf62:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d032      	beq.n	800cfd0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800cf6a:	68f8      	ldr	r0, [r7, #12]
 800cf6c:	f000 f834 	bl	800cfd8 <USBD_GetLen>
 800cf70:	4603      	mov	r3, r0
 800cf72:	3301      	adds	r3, #1
 800cf74:	b29b      	uxth	r3, r3
 800cf76:	005b      	lsls	r3, r3, #1
 800cf78:	b29a      	uxth	r2, r3
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800cf7e:	7dfb      	ldrb	r3, [r7, #23]
 800cf80:	1c5a      	adds	r2, r3, #1
 800cf82:	75fa      	strb	r2, [r7, #23]
 800cf84:	461a      	mov	r2, r3
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	4413      	add	r3, r2
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	7812      	ldrb	r2, [r2, #0]
 800cf8e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800cf90:	7dfb      	ldrb	r3, [r7, #23]
 800cf92:	1c5a      	adds	r2, r3, #1
 800cf94:	75fa      	strb	r2, [r7, #23]
 800cf96:	461a      	mov	r2, r3
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	4413      	add	r3, r2
 800cf9c:	2203      	movs	r2, #3
 800cf9e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800cfa0:	e012      	b.n	800cfc8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	1c5a      	adds	r2, r3, #1
 800cfa6:	60fa      	str	r2, [r7, #12]
 800cfa8:	7dfa      	ldrb	r2, [r7, #23]
 800cfaa:	1c51      	adds	r1, r2, #1
 800cfac:	75f9      	strb	r1, [r7, #23]
 800cfae:	4611      	mov	r1, r2
 800cfb0:	68ba      	ldr	r2, [r7, #8]
 800cfb2:	440a      	add	r2, r1
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800cfb8:	7dfb      	ldrb	r3, [r7, #23]
 800cfba:	1c5a      	adds	r2, r3, #1
 800cfbc:	75fa      	strb	r2, [r7, #23]
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	4413      	add	r3, r2
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d1e8      	bne.n	800cfa2 <USBD_GetString+0x4e>
    }
  }
}
 800cfd0:	bf00      	nop
 800cfd2:	3718      	adds	r7, #24
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800cfe4:	e005      	b.n	800cff2 <USBD_GetLen+0x1a>
  {
    len++;
 800cfe6:	7bfb      	ldrb	r3, [r7, #15]
 800cfe8:	3301      	adds	r3, #1
 800cfea:	73fb      	strb	r3, [r7, #15]
    buf++;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	3301      	adds	r3, #1
 800cff0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d1f5      	bne.n	800cfe6 <USBD_GetLen+0xe>
  }

  return len;
 800cffa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3714      	adds	r7, #20
 800d000:	46bd      	mov	sp, r7
 800d002:	bc80      	pop	{r7}
 800d004:	4770      	bx	lr

0800d006 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800d006:	b580      	push	{r7, lr}
 800d008:	b084      	sub	sp, #16
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	60f8      	str	r0, [r7, #12]
 800d00e:	60b9      	str	r1, [r7, #8]
 800d010:	4613      	mov	r3, r2
 800d012:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2202      	movs	r2, #2
 800d018:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d01c:	88fa      	ldrh	r2, [r7, #6]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d022:	88fa      	ldrh	r2, [r7, #6]
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d028:	88fb      	ldrh	r3, [r7, #6]
 800d02a:	68ba      	ldr	r2, [r7, #8]
 800d02c:	2100      	movs	r1, #0
 800d02e:	68f8      	ldr	r0, [r7, #12]
 800d030:	f000 fc77 	bl	800d922 <USBD_LL_Transmit>

  return USBD_OK;
 800d034:	2300      	movs	r3, #0
}
 800d036:	4618      	mov	r0, r3
 800d038:	3710      	adds	r7, #16
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800d03e:	b580      	push	{r7, lr}
 800d040:	b084      	sub	sp, #16
 800d042:	af00      	add	r7, sp, #0
 800d044:	60f8      	str	r0, [r7, #12]
 800d046:	60b9      	str	r1, [r7, #8]
 800d048:	4613      	mov	r3, r2
 800d04a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d04c:	88fb      	ldrh	r3, [r7, #6]
 800d04e:	68ba      	ldr	r2, [r7, #8]
 800d050:	2100      	movs	r1, #0
 800d052:	68f8      	ldr	r0, [r7, #12]
 800d054:	f000 fc65 	bl	800d922 <USBD_LL_Transmit>

  return USBD_OK;
 800d058:	2300      	movs	r3, #0
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}

0800d062 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800d062:	b580      	push	{r7, lr}
 800d064:	b084      	sub	sp, #16
 800d066:	af00      	add	r7, sp, #0
 800d068:	60f8      	str	r0, [r7, #12]
 800d06a:	60b9      	str	r1, [r7, #8]
 800d06c:	4613      	mov	r3, r2
 800d06e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	2203      	movs	r2, #3
 800d074:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d078:	88fa      	ldrh	r2, [r7, #6]
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800d080:	88fa      	ldrh	r2, [r7, #6]
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d088:	88fb      	ldrh	r3, [r7, #6]
 800d08a:	68ba      	ldr	r2, [r7, #8]
 800d08c:	2100      	movs	r1, #0
 800d08e:	68f8      	ldr	r0, [r7, #12]
 800d090:	f000 fc6a 	bl	800d968 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d094:	2300      	movs	r3, #0
}
 800d096:	4618      	mov	r0, r3
 800d098:	3710      	adds	r7, #16
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}

0800d09e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800d09e:	b580      	push	{r7, lr}
 800d0a0:	b084      	sub	sp, #16
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	60f8      	str	r0, [r7, #12]
 800d0a6:	60b9      	str	r1, [r7, #8]
 800d0a8:	4613      	mov	r3, r2
 800d0aa:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d0ac:	88fb      	ldrh	r3, [r7, #6]
 800d0ae:	68ba      	ldr	r2, [r7, #8]
 800d0b0:	2100      	movs	r1, #0
 800d0b2:	68f8      	ldr	r0, [r7, #12]
 800d0b4:	f000 fc58 	bl	800d968 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d0b8:	2300      	movs	r3, #0
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3710      	adds	r7, #16
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}

0800d0c2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d0c2:	b580      	push	{r7, lr}
 800d0c4:	b082      	sub	sp, #8
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2204      	movs	r2, #4
 800d0ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	2100      	movs	r1, #0
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f000 fc22 	bl	800d922 <USBD_LL_Transmit>

  return USBD_OK;
 800d0de:	2300      	movs	r3, #0
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3708      	adds	r7, #8
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2205      	movs	r2, #5
 800d0f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	2100      	movs	r1, #0
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f000 fc32 	bl	800d968 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3708      	adds	r7, #8
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
	...

0800d110 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d114:	2200      	movs	r2, #0
 800d116:	4912      	ldr	r1, [pc, #72]	; (800d160 <MX_USB_DEVICE_Init+0x50>)
 800d118:	4812      	ldr	r0, [pc, #72]	; (800d164 <MX_USB_DEVICE_Init+0x54>)
 800d11a:	f7fe ff5e 	bl	800bfda <USBD_Init>
 800d11e:	4603      	mov	r3, r0
 800d120:	2b00      	cmp	r3, #0
 800d122:	d001      	beq.n	800d128 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d124:	f7f4 fb18 	bl	8001758 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d128:	490f      	ldr	r1, [pc, #60]	; (800d168 <MX_USB_DEVICE_Init+0x58>)
 800d12a:	480e      	ldr	r0, [pc, #56]	; (800d164 <MX_USB_DEVICE_Init+0x54>)
 800d12c:	f7fe ff80 	bl	800c030 <USBD_RegisterClass>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	d001      	beq.n	800d13a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d136:	f7f4 fb0f 	bl	8001758 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d13a:	490c      	ldr	r1, [pc, #48]	; (800d16c <MX_USB_DEVICE_Init+0x5c>)
 800d13c:	4809      	ldr	r0, [pc, #36]	; (800d164 <MX_USB_DEVICE_Init+0x54>)
 800d13e:	f7fe feb1 	bl	800bea4 <USBD_CDC_RegisterInterface>
 800d142:	4603      	mov	r3, r0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d001      	beq.n	800d14c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d148:	f7f4 fb06 	bl	8001758 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d14c:	4805      	ldr	r0, [pc, #20]	; (800d164 <MX_USB_DEVICE_Init+0x54>)
 800d14e:	f7fe ff88 	bl	800c062 <USBD_Start>
 800d152:	4603      	mov	r3, r0
 800d154:	2b00      	cmp	r3, #0
 800d156:	d001      	beq.n	800d15c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d158:	f7f4 fafe 	bl	8001758 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d15c:	bf00      	nop
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	2000017c 	.word	0x2000017c
 800d164:	20000f88 	.word	0x20000f88
 800d168:	20000060 	.word	0x20000060
 800d16c:	20000164 	.word	0x20000164

0800d170 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d174:	2200      	movs	r2, #0
 800d176:	4905      	ldr	r1, [pc, #20]	; (800d18c <CDC_Init_FS+0x1c>)
 800d178:	4805      	ldr	r0, [pc, #20]	; (800d190 <CDC_Init_FS+0x20>)
 800d17a:	f7fe fea9 	bl	800bed0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d17e:	4905      	ldr	r1, [pc, #20]	; (800d194 <CDC_Init_FS+0x24>)
 800d180:	4803      	ldr	r0, [pc, #12]	; (800d190 <CDC_Init_FS+0x20>)
 800d182:	f7fe febe 	bl	800bf02 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d186:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d188:	4618      	mov	r0, r3
 800d18a:	bd80      	pop	{r7, pc}
 800d18c:	2000164c 	.word	0x2000164c
 800d190:	20000f88 	.word	0x20000f88
 800d194:	2000124c 	.word	0x2000124c

0800d198 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d198:	b480      	push	{r7}
 800d19a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d19c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bc80      	pop	{r7}
 800d1a4:	4770      	bx	lr
	...

0800d1a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	6039      	str	r1, [r7, #0]
 800d1b2:	71fb      	strb	r3, [r7, #7]
 800d1b4:	4613      	mov	r3, r2
 800d1b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d1b8:	79fb      	ldrb	r3, [r7, #7]
 800d1ba:	2b23      	cmp	r3, #35	; 0x23
 800d1bc:	d85c      	bhi.n	800d278 <CDC_Control_FS+0xd0>
 800d1be:	a201      	add	r2, pc, #4	; (adr r2, 800d1c4 <CDC_Control_FS+0x1c>)
 800d1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1c4:	0800d279 	.word	0x0800d279
 800d1c8:	0800d279 	.word	0x0800d279
 800d1cc:	0800d279 	.word	0x0800d279
 800d1d0:	0800d279 	.word	0x0800d279
 800d1d4:	0800d279 	.word	0x0800d279
 800d1d8:	0800d279 	.word	0x0800d279
 800d1dc:	0800d279 	.word	0x0800d279
 800d1e0:	0800d279 	.word	0x0800d279
 800d1e4:	0800d279 	.word	0x0800d279
 800d1e8:	0800d279 	.word	0x0800d279
 800d1ec:	0800d279 	.word	0x0800d279
 800d1f0:	0800d279 	.word	0x0800d279
 800d1f4:	0800d279 	.word	0x0800d279
 800d1f8:	0800d279 	.word	0x0800d279
 800d1fc:	0800d279 	.word	0x0800d279
 800d200:	0800d279 	.word	0x0800d279
 800d204:	0800d279 	.word	0x0800d279
 800d208:	0800d279 	.word	0x0800d279
 800d20c:	0800d279 	.word	0x0800d279
 800d210:	0800d279 	.word	0x0800d279
 800d214:	0800d279 	.word	0x0800d279
 800d218:	0800d279 	.word	0x0800d279
 800d21c:	0800d279 	.word	0x0800d279
 800d220:	0800d279 	.word	0x0800d279
 800d224:	0800d279 	.word	0x0800d279
 800d228:	0800d279 	.word	0x0800d279
 800d22c:	0800d279 	.word	0x0800d279
 800d230:	0800d279 	.word	0x0800d279
 800d234:	0800d279 	.word	0x0800d279
 800d238:	0800d279 	.word	0x0800d279
 800d23c:	0800d279 	.word	0x0800d279
 800d240:	0800d279 	.word	0x0800d279
 800d244:	0800d255 	.word	0x0800d255
 800d248:	0800d267 	.word	0x0800d267
 800d24c:	0800d279 	.word	0x0800d279
 800d250:	0800d279 	.word	0x0800d279
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit
                    = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };
    case CDC_SET_LINE_CODING:
        	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800d254:	4b0c      	ldr	r3, [pc, #48]	; (800d288 <CDC_Control_FS+0xe0>)
 800d256:	683a      	ldr	r2, [r7, #0]
 800d258:	6810      	ldr	r0, [r2, #0]
 800d25a:	6018      	str	r0, [r3, #0]
 800d25c:	8891      	ldrh	r1, [r2, #4]
 800d25e:	7992      	ldrb	r2, [r2, #6]
 800d260:	8099      	strh	r1, [r3, #4]
 800d262:	719a      	strb	r2, [r3, #6]
    break;
 800d264:	e009      	b.n	800d27a <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
        	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	4a07      	ldr	r2, [pc, #28]	; (800d288 <CDC_Control_FS+0xe0>)
 800d26a:	6810      	ldr	r0, [r2, #0]
 800d26c:	6018      	str	r0, [r3, #0]
 800d26e:	8891      	ldrh	r1, [r2, #4]
 800d270:	7992      	ldrb	r2, [r2, #6]
 800d272:	8099      	strh	r1, [r3, #4]
 800d274:	719a      	strb	r2, [r3, #6]
    break;
 800d276:	e000      	b.n	800d27a <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d278:	bf00      	nop
  }

  return (USBD_OK);
 800d27a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	370c      	adds	r7, #12
 800d280:	46bd      	mov	sp, r7
 800d282:	bc80      	pop	{r7}
 800d284:	4770      	bx	lr
 800d286:	bf00      	nop
 800d288:	20000174 	.word	0x20000174

0800d28c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d296:	6879      	ldr	r1, [r7, #4]
 800d298:	4808      	ldr	r0, [pc, #32]	; (800d2bc <CDC_Receive_FS+0x30>)
 800d29a:	f7fe fe32 	bl	800bf02 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d29e:	4807      	ldr	r0, [pc, #28]	; (800d2bc <CDC_Receive_FS+0x30>)
 800d2a0:	f7fe fe71 	bl	800bf86 <USBD_CDC_ReceivePacket>
  CDC_ReveiveCallback(Buf, Len[0]); // My callback function
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f7f4 f9a9 	bl	8001604 <CDC_ReveiveCallback>

  return (USBD_OK);
 800d2b2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3708      	adds	r7, #8
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	20000f88 	.word	0x20000f88

0800d2c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d2d0:	4b0d      	ldr	r3, [pc, #52]	; (800d308 <CDC_Transmit_FS+0x48>)
 800d2d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d001      	beq.n	800d2e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	e00b      	b.n	800d2fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d2e6:	887b      	ldrh	r3, [r7, #2]
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	6879      	ldr	r1, [r7, #4]
 800d2ec:	4806      	ldr	r0, [pc, #24]	; (800d308 <CDC_Transmit_FS+0x48>)
 800d2ee:	f7fe fdef 	bl	800bed0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d2f2:	4805      	ldr	r0, [pc, #20]	; (800d308 <CDC_Transmit_FS+0x48>)
 800d2f4:	f7fe fe18 	bl	800bf28 <USBD_CDC_TransmitPacket>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d2fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3710      	adds	r7, #16
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	20000f88 	.word	0x20000f88

0800d30c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
 800d312:	4603      	mov	r3, r0
 800d314:	6039      	str	r1, [r7, #0]
 800d316:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	2212      	movs	r2, #18
 800d31c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d31e:	4b03      	ldr	r3, [pc, #12]	; (800d32c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d320:	4618      	mov	r0, r3
 800d322:	370c      	adds	r7, #12
 800d324:	46bd      	mov	sp, r7
 800d326:	bc80      	pop	{r7}
 800d328:	4770      	bx	lr
 800d32a:	bf00      	nop
 800d32c:	20000198 	.word	0x20000198

0800d330 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d330:	b480      	push	{r7}
 800d332:	b083      	sub	sp, #12
 800d334:	af00      	add	r7, sp, #0
 800d336:	4603      	mov	r3, r0
 800d338:	6039      	str	r1, [r7, #0]
 800d33a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	2204      	movs	r2, #4
 800d340:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d342:	4b03      	ldr	r3, [pc, #12]	; (800d350 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d344:	4618      	mov	r0, r3
 800d346:	370c      	adds	r7, #12
 800d348:	46bd      	mov	sp, r7
 800d34a:	bc80      	pop	{r7}
 800d34c:	4770      	bx	lr
 800d34e:	bf00      	nop
 800d350:	200001ac 	.word	0x200001ac

0800d354 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b082      	sub	sp, #8
 800d358:	af00      	add	r7, sp, #0
 800d35a:	4603      	mov	r3, r0
 800d35c:	6039      	str	r1, [r7, #0]
 800d35e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d360:	79fb      	ldrb	r3, [r7, #7]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d105      	bne.n	800d372 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d366:	683a      	ldr	r2, [r7, #0]
 800d368:	4907      	ldr	r1, [pc, #28]	; (800d388 <USBD_FS_ProductStrDescriptor+0x34>)
 800d36a:	4808      	ldr	r0, [pc, #32]	; (800d38c <USBD_FS_ProductStrDescriptor+0x38>)
 800d36c:	f7ff fdf2 	bl	800cf54 <USBD_GetString>
 800d370:	e004      	b.n	800d37c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d372:	683a      	ldr	r2, [r7, #0]
 800d374:	4904      	ldr	r1, [pc, #16]	; (800d388 <USBD_FS_ProductStrDescriptor+0x34>)
 800d376:	4805      	ldr	r0, [pc, #20]	; (800d38c <USBD_FS_ProductStrDescriptor+0x38>)
 800d378:	f7ff fdec 	bl	800cf54 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d37c:	4b02      	ldr	r3, [pc, #8]	; (800d388 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3708      	adds	r7, #8
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	20001a4c 	.word	0x20001a4c
 800d38c:	0800ecc0 	.word	0x0800ecc0

0800d390 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b082      	sub	sp, #8
 800d394:	af00      	add	r7, sp, #0
 800d396:	4603      	mov	r3, r0
 800d398:	6039      	str	r1, [r7, #0]
 800d39a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d39c:	683a      	ldr	r2, [r7, #0]
 800d39e:	4904      	ldr	r1, [pc, #16]	; (800d3b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d3a0:	4804      	ldr	r0, [pc, #16]	; (800d3b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d3a2:	f7ff fdd7 	bl	800cf54 <USBD_GetString>
  return USBD_StrDesc;
 800d3a6:	4b02      	ldr	r3, [pc, #8]	; (800d3b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3708      	adds	r7, #8
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	20001a4c 	.word	0x20001a4c
 800d3b4:	0800ecd8 	.word	0x0800ecd8

0800d3b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	4603      	mov	r3, r0
 800d3c0:	6039      	str	r1, [r7, #0]
 800d3c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	221a      	movs	r2, #26
 800d3c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d3ca:	f000 f843 	bl	800d454 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d3ce:	4b02      	ldr	r3, [pc, #8]	; (800d3d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3708      	adds	r7, #8
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	200001b0 	.word	0x200001b0

0800d3dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	6039      	str	r1, [r7, #0]
 800d3e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d3e8:	79fb      	ldrb	r3, [r7, #7]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d105      	bne.n	800d3fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d3ee:	683a      	ldr	r2, [r7, #0]
 800d3f0:	4907      	ldr	r1, [pc, #28]	; (800d410 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d3f2:	4808      	ldr	r0, [pc, #32]	; (800d414 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d3f4:	f7ff fdae 	bl	800cf54 <USBD_GetString>
 800d3f8:	e004      	b.n	800d404 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d3fa:	683a      	ldr	r2, [r7, #0]
 800d3fc:	4904      	ldr	r1, [pc, #16]	; (800d410 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d3fe:	4805      	ldr	r0, [pc, #20]	; (800d414 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d400:	f7ff fda8 	bl	800cf54 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d404:	4b02      	ldr	r3, [pc, #8]	; (800d410 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d406:	4618      	mov	r0, r3
 800d408:	3708      	adds	r7, #8
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	20001a4c 	.word	0x20001a4c
 800d414:	0800ece4 	.word	0x0800ece4

0800d418 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	4603      	mov	r3, r0
 800d420:	6039      	str	r1, [r7, #0]
 800d422:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d424:	79fb      	ldrb	r3, [r7, #7]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d105      	bne.n	800d436 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d42a:	683a      	ldr	r2, [r7, #0]
 800d42c:	4907      	ldr	r1, [pc, #28]	; (800d44c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d42e:	4808      	ldr	r0, [pc, #32]	; (800d450 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d430:	f7ff fd90 	bl	800cf54 <USBD_GetString>
 800d434:	e004      	b.n	800d440 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d436:	683a      	ldr	r2, [r7, #0]
 800d438:	4904      	ldr	r1, [pc, #16]	; (800d44c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d43a:	4805      	ldr	r0, [pc, #20]	; (800d450 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d43c:	f7ff fd8a 	bl	800cf54 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d440:	4b02      	ldr	r3, [pc, #8]	; (800d44c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d442:	4618      	mov	r0, r3
 800d444:	3708      	adds	r7, #8
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
 800d44a:	bf00      	nop
 800d44c:	20001a4c 	.word	0x20001a4c
 800d450:	0800ecf0 	.word	0x0800ecf0

0800d454 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d45a:	4b0f      	ldr	r3, [pc, #60]	; (800d498 <Get_SerialNum+0x44>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d460:	4b0e      	ldr	r3, [pc, #56]	; (800d49c <Get_SerialNum+0x48>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d466:	4b0e      	ldr	r3, [pc, #56]	; (800d4a0 <Get_SerialNum+0x4c>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d46c:	68fa      	ldr	r2, [r7, #12]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	4413      	add	r3, r2
 800d472:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d009      	beq.n	800d48e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d47a:	2208      	movs	r2, #8
 800d47c:	4909      	ldr	r1, [pc, #36]	; (800d4a4 <Get_SerialNum+0x50>)
 800d47e:	68f8      	ldr	r0, [r7, #12]
 800d480:	f000 f814 	bl	800d4ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d484:	2204      	movs	r2, #4
 800d486:	4908      	ldr	r1, [pc, #32]	; (800d4a8 <Get_SerialNum+0x54>)
 800d488:	68b8      	ldr	r0, [r7, #8]
 800d48a:	f000 f80f 	bl	800d4ac <IntToUnicode>
  }
}
 800d48e:	bf00      	nop
 800d490:	3710      	adds	r7, #16
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	bf00      	nop
 800d498:	1ffff7e8 	.word	0x1ffff7e8
 800d49c:	1ffff7ec 	.word	0x1ffff7ec
 800d4a0:	1ffff7f0 	.word	0x1ffff7f0
 800d4a4:	200001b2 	.word	0x200001b2
 800d4a8:	200001c2 	.word	0x200001c2

0800d4ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b087      	sub	sp, #28
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	60f8      	str	r0, [r7, #12]
 800d4b4:	60b9      	str	r1, [r7, #8]
 800d4b6:	4613      	mov	r3, r2
 800d4b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d4be:	2300      	movs	r3, #0
 800d4c0:	75fb      	strb	r3, [r7, #23]
 800d4c2:	e027      	b.n	800d514 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	0f1b      	lsrs	r3, r3, #28
 800d4c8:	2b09      	cmp	r3, #9
 800d4ca:	d80b      	bhi.n	800d4e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	0f1b      	lsrs	r3, r3, #28
 800d4d0:	b2da      	uxtb	r2, r3
 800d4d2:	7dfb      	ldrb	r3, [r7, #23]
 800d4d4:	005b      	lsls	r3, r3, #1
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	440b      	add	r3, r1
 800d4dc:	3230      	adds	r2, #48	; 0x30
 800d4de:	b2d2      	uxtb	r2, r2
 800d4e0:	701a      	strb	r2, [r3, #0]
 800d4e2:	e00a      	b.n	800d4fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	0f1b      	lsrs	r3, r3, #28
 800d4e8:	b2da      	uxtb	r2, r3
 800d4ea:	7dfb      	ldrb	r3, [r7, #23]
 800d4ec:	005b      	lsls	r3, r3, #1
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	440b      	add	r3, r1
 800d4f4:	3237      	adds	r2, #55	; 0x37
 800d4f6:	b2d2      	uxtb	r2, r2
 800d4f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	011b      	lsls	r3, r3, #4
 800d4fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d500:	7dfb      	ldrb	r3, [r7, #23]
 800d502:	005b      	lsls	r3, r3, #1
 800d504:	3301      	adds	r3, #1
 800d506:	68ba      	ldr	r2, [r7, #8]
 800d508:	4413      	add	r3, r2
 800d50a:	2200      	movs	r2, #0
 800d50c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d50e:	7dfb      	ldrb	r3, [r7, #23]
 800d510:	3301      	adds	r3, #1
 800d512:	75fb      	strb	r3, [r7, #23]
 800d514:	7dfa      	ldrb	r2, [r7, #23]
 800d516:	79fb      	ldrb	r3, [r7, #7]
 800d518:	429a      	cmp	r2, r3
 800d51a:	d3d3      	bcc.n	800d4c4 <IntToUnicode+0x18>
  }
}
 800d51c:	bf00      	nop
 800d51e:	bf00      	nop
 800d520:	371c      	adds	r7, #28
 800d522:	46bd      	mov	sp, r7
 800d524:	bc80      	pop	{r7}
 800d526:	4770      	bx	lr

0800d528 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d528:	b480      	push	{r7}
 800d52a:	b085      	sub	sp, #20
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	4a09      	ldr	r2, [pc, #36]	; (800d55c <HAL_PCD_MspInit+0x34>)
 800d536:	4293      	cmp	r3, r2
 800d538:	d10b      	bne.n	800d552 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d53a:	4b09      	ldr	r3, [pc, #36]	; (800d560 <HAL_PCD_MspInit+0x38>)
 800d53c:	69db      	ldr	r3, [r3, #28]
 800d53e:	4a08      	ldr	r2, [pc, #32]	; (800d560 <HAL_PCD_MspInit+0x38>)
 800d540:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d544:	61d3      	str	r3, [r2, #28]
 800d546:	4b06      	ldr	r3, [pc, #24]	; (800d560 <HAL_PCD_MspInit+0x38>)
 800d548:	69db      	ldr	r3, [r3, #28]
 800d54a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d54e:	60fb      	str	r3, [r7, #12]
 800d550:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d552:	bf00      	nop
 800d554:	3714      	adds	r7, #20
 800d556:	46bd      	mov	sp, r7
 800d558:	bc80      	pop	{r7}
 800d55a:	4770      	bx	lr
 800d55c:	40005c00 	.word	0x40005c00
 800d560:	40021000 	.word	0x40021000

0800d564 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d578:	4619      	mov	r1, r3
 800d57a:	4610      	mov	r0, r2
 800d57c:	f7fe fdb9 	bl	800c0f2 <USBD_LL_SetupStage>
}
 800d580:	bf00      	nop
 800d582:	3708      	adds	r7, #8
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	460b      	mov	r3, r1
 800d592:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800d59a:	78fa      	ldrb	r2, [r7, #3]
 800d59c:	6879      	ldr	r1, [r7, #4]
 800d59e:	4613      	mov	r3, r2
 800d5a0:	009b      	lsls	r3, r3, #2
 800d5a2:	4413      	add	r3, r2
 800d5a4:	00db      	lsls	r3, r3, #3
 800d5a6:	440b      	add	r3, r1
 800d5a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d5ac:	681a      	ldr	r2, [r3, #0]
 800d5ae:	78fb      	ldrb	r3, [r7, #3]
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	f7fe fdeb 	bl	800c18c <USBD_LL_DataOutStage>
}
 800d5b6:	bf00      	nop
 800d5b8:	3708      	adds	r7, #8
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}

0800d5be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5be:	b580      	push	{r7, lr}
 800d5c0:	b082      	sub	sp, #8
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
 800d5c6:	460b      	mov	r3, r1
 800d5c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800d5d0:	78fa      	ldrb	r2, [r7, #3]
 800d5d2:	6879      	ldr	r1, [r7, #4]
 800d5d4:	4613      	mov	r3, r2
 800d5d6:	009b      	lsls	r3, r3, #2
 800d5d8:	4413      	add	r3, r2
 800d5da:	00db      	lsls	r3, r3, #3
 800d5dc:	440b      	add	r3, r1
 800d5de:	333c      	adds	r3, #60	; 0x3c
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	78fb      	ldrb	r3, [r7, #3]
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	f7fe fe42 	bl	800c26e <USBD_LL_DataInStage>
}
 800d5ea:	bf00      	nop
 800d5ec:	3708      	adds	r7, #8
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}

0800d5f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5f2:	b580      	push	{r7, lr}
 800d5f4:	b082      	sub	sp, #8
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800d600:	4618      	mov	r0, r3
 800d602:	f7fe ff52 	bl	800c4aa <USBD_LL_SOF>
}
 800d606:	bf00      	nop
 800d608:	3708      	adds	r7, #8
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}

0800d60e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d60e:	b580      	push	{r7, lr}
 800d610:	b084      	sub	sp, #16
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d616:	2301      	movs	r3, #1
 800d618:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	689b      	ldr	r3, [r3, #8]
 800d61e:	2b02      	cmp	r3, #2
 800d620:	d001      	beq.n	800d626 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d622:	f7f4 f899 	bl	8001758 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800d62c:	7bfa      	ldrb	r2, [r7, #15]
 800d62e:	4611      	mov	r1, r2
 800d630:	4618      	mov	r0, r3
 800d632:	f7fe ff02 	bl	800c43a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7fe febb 	bl	800c3b8 <USBD_LL_Reset>
}
 800d642:	bf00      	nop
 800d644:	3710      	adds	r7, #16
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
	...

0800d64c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7fe fefc 	bl	800c458 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	699b      	ldr	r3, [r3, #24]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d005      	beq.n	800d674 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d668:	4b04      	ldr	r3, [pc, #16]	; (800d67c <HAL_PCD_SuspendCallback+0x30>)
 800d66a:	691b      	ldr	r3, [r3, #16]
 800d66c:	4a03      	ldr	r2, [pc, #12]	; (800d67c <HAL_PCD_SuspendCallback+0x30>)
 800d66e:	f043 0306 	orr.w	r3, r3, #6
 800d672:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d674:	bf00      	nop
 800d676:	3708      	adds	r7, #8
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	e000ed00 	.word	0xe000ed00

0800d680 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b082      	sub	sp, #8
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800d68e:	4618      	mov	r0, r3
 800d690:	f7fe fef6 	bl	800c480 <USBD_LL_Resume>
}
 800d694:	bf00      	nop
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d6a4:	4a28      	ldr	r2, [pc, #160]	; (800d748 <USBD_LL_Init+0xac>)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	4a26      	ldr	r2, [pc, #152]	; (800d748 <USBD_LL_Init+0xac>)
 800d6b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800d6b4:	4b24      	ldr	r3, [pc, #144]	; (800d748 <USBD_LL_Init+0xac>)
 800d6b6:	4a25      	ldr	r2, [pc, #148]	; (800d74c <USBD_LL_Init+0xb0>)
 800d6b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d6ba:	4b23      	ldr	r3, [pc, #140]	; (800d748 <USBD_LL_Init+0xac>)
 800d6bc:	2208      	movs	r2, #8
 800d6be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d6c0:	4b21      	ldr	r3, [pc, #132]	; (800d748 <USBD_LL_Init+0xac>)
 800d6c2:	2202      	movs	r2, #2
 800d6c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d6c6:	4b20      	ldr	r3, [pc, #128]	; (800d748 <USBD_LL_Init+0xac>)
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d6cc:	4b1e      	ldr	r3, [pc, #120]	; (800d748 <USBD_LL_Init+0xac>)
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d6d2:	4b1d      	ldr	r3, [pc, #116]	; (800d748 <USBD_LL_Init+0xac>)
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d6d8:	481b      	ldr	r0, [pc, #108]	; (800d748 <USBD_LL_Init+0xac>)
 800d6da:	f7f8 fbc3 	bl	8005e64 <HAL_PCD_Init>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d001      	beq.n	800d6e8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800d6e4:	f7f4 f838 	bl	8001758 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d6ee:	2318      	movs	r3, #24
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	2100      	movs	r1, #0
 800d6f4:	f7fa f8e2 	bl	80078bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d6fe:	2358      	movs	r3, #88	; 0x58
 800d700:	2200      	movs	r2, #0
 800d702:	2180      	movs	r1, #128	; 0x80
 800d704:	f7fa f8da 	bl	80078bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d70e:	23c0      	movs	r3, #192	; 0xc0
 800d710:	2200      	movs	r2, #0
 800d712:	2181      	movs	r1, #129	; 0x81
 800d714:	f7fa f8d2 	bl	80078bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d71e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d722:	2200      	movs	r2, #0
 800d724:	2101      	movs	r1, #1
 800d726:	f7fa f8c9 	bl	80078bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d730:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d734:	2200      	movs	r2, #0
 800d736:	2182      	movs	r1, #130	; 0x82
 800d738:	f7fa f8c0 	bl	80078bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d73c:	2300      	movs	r3, #0
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3708      	adds	r7, #8
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	20001c4c 	.word	0x20001c4c
 800d74c:	40005c00 	.word	0x40005c00

0800d750 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d758:	2300      	movs	r3, #0
 800d75a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d75c:	2300      	movs	r3, #0
 800d75e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d766:	4618      	mov	r0, r3
 800d768:	f7f8 fc7b 	bl	8006062 <HAL_PCD_Start>
 800d76c:	4603      	mov	r3, r0
 800d76e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d770:	7bfb      	ldrb	r3, [r7, #15]
 800d772:	4618      	mov	r0, r3
 800d774:	f000 f94e 	bl	800da14 <USBD_Get_USB_Status>
 800d778:	4603      	mov	r3, r0
 800d77a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d77c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3710      	adds	r7, #16
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}

0800d786 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d786:	b580      	push	{r7, lr}
 800d788:	b084      	sub	sp, #16
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
 800d78e:	4608      	mov	r0, r1
 800d790:	4611      	mov	r1, r2
 800d792:	461a      	mov	r2, r3
 800d794:	4603      	mov	r3, r0
 800d796:	70fb      	strb	r3, [r7, #3]
 800d798:	460b      	mov	r3, r1
 800d79a:	70bb      	strb	r3, [r7, #2]
 800d79c:	4613      	mov	r3, r2
 800d79e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d7ae:	78bb      	ldrb	r3, [r7, #2]
 800d7b0:	883a      	ldrh	r2, [r7, #0]
 800d7b2:	78f9      	ldrb	r1, [r7, #3]
 800d7b4:	f7f8 fdd0 	bl	8006358 <HAL_PCD_EP_Open>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7bc:	7bfb      	ldrb	r3, [r7, #15]
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f000 f928 	bl	800da14 <USBD_Get_USB_Status>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}

0800d7d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7d2:	b580      	push	{r7, lr}
 800d7d4:	b084      	sub	sp, #16
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
 800d7da:	460b      	mov	r3, r1
 800d7dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7ec:	78fa      	ldrb	r2, [r7, #3]
 800d7ee:	4611      	mov	r1, r2
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f7f8 fe0e 	bl	8006412 <HAL_PCD_EP_Close>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7fa:	7bfb      	ldrb	r3, [r7, #15]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f000 f909 	bl	800da14 <USBD_Get_USB_Status>
 800d802:	4603      	mov	r3, r0
 800d804:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d806:	7bbb      	ldrb	r3, [r7, #14]
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3710      	adds	r7, #16
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}

0800d810 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b084      	sub	sp, #16
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	460b      	mov	r3, r1
 800d81a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d81c:	2300      	movs	r3, #0
 800d81e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d820:	2300      	movs	r3, #0
 800d822:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d82a:	78fa      	ldrb	r2, [r7, #3]
 800d82c:	4611      	mov	r1, r2
 800d82e:	4618      	mov	r0, r3
 800d830:	f7f8 feb6 	bl	80065a0 <HAL_PCD_EP_SetStall>
 800d834:	4603      	mov	r3, r0
 800d836:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d838:	7bfb      	ldrb	r3, [r7, #15]
 800d83a:	4618      	mov	r0, r3
 800d83c:	f000 f8ea 	bl	800da14 <USBD_Get_USB_Status>
 800d840:	4603      	mov	r3, r0
 800d842:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d844:	7bbb      	ldrb	r3, [r7, #14]
}
 800d846:	4618      	mov	r0, r3
 800d848:	3710      	adds	r7, #16
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}

0800d84e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d84e:	b580      	push	{r7, lr}
 800d850:	b084      	sub	sp, #16
 800d852:	af00      	add	r7, sp, #0
 800d854:	6078      	str	r0, [r7, #4]
 800d856:	460b      	mov	r3, r1
 800d858:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d85a:	2300      	movs	r3, #0
 800d85c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d85e:	2300      	movs	r3, #0
 800d860:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d868:	78fa      	ldrb	r2, [r7, #3]
 800d86a:	4611      	mov	r1, r2
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7f8 fef7 	bl	8006660 <HAL_PCD_EP_ClrStall>
 800d872:	4603      	mov	r3, r0
 800d874:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d876:	7bfb      	ldrb	r3, [r7, #15]
 800d878:	4618      	mov	r0, r3
 800d87a:	f000 f8cb 	bl	800da14 <USBD_Get_USB_Status>
 800d87e:	4603      	mov	r3, r0
 800d880:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d882:	7bbb      	ldrb	r3, [r7, #14]
}
 800d884:	4618      	mov	r0, r3
 800d886:	3710      	adds	r7, #16
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b085      	sub	sp, #20
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	460b      	mov	r3, r1
 800d896:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d89e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d8a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	da0c      	bge.n	800d8c2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d8a8:	78fb      	ldrb	r3, [r7, #3]
 800d8aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8ae:	68f9      	ldr	r1, [r7, #12]
 800d8b0:	1c5a      	adds	r2, r3, #1
 800d8b2:	4613      	mov	r3, r2
 800d8b4:	009b      	lsls	r3, r3, #2
 800d8b6:	4413      	add	r3, r2
 800d8b8:	00db      	lsls	r3, r3, #3
 800d8ba:	440b      	add	r3, r1
 800d8bc:	3302      	adds	r3, #2
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	e00b      	b.n	800d8da <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d8c2:	78fb      	ldrb	r3, [r7, #3]
 800d8c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d8c8:	68f9      	ldr	r1, [r7, #12]
 800d8ca:	4613      	mov	r3, r2
 800d8cc:	009b      	lsls	r3, r3, #2
 800d8ce:	4413      	add	r3, r2
 800d8d0:	00db      	lsls	r3, r3, #3
 800d8d2:	440b      	add	r3, r1
 800d8d4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d8d8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3714      	adds	r7, #20
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bc80      	pop	{r7}
 800d8e2:	4770      	bx	lr

0800d8e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b084      	sub	sp, #16
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d8fe:	78fa      	ldrb	r2, [r7, #3]
 800d900:	4611      	mov	r1, r2
 800d902:	4618      	mov	r0, r3
 800d904:	f7f8 fd03 	bl	800630e <HAL_PCD_SetAddress>
 800d908:	4603      	mov	r3, r0
 800d90a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d90c:	7bfb      	ldrb	r3, [r7, #15]
 800d90e:	4618      	mov	r0, r3
 800d910:	f000 f880 	bl	800da14 <USBD_Get_USB_Status>
 800d914:	4603      	mov	r3, r0
 800d916:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d918:	7bbb      	ldrb	r3, [r7, #14]
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3710      	adds	r7, #16
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}

0800d922 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d922:	b580      	push	{r7, lr}
 800d924:	b086      	sub	sp, #24
 800d926:	af00      	add	r7, sp, #0
 800d928:	60f8      	str	r0, [r7, #12]
 800d92a:	607a      	str	r2, [r7, #4]
 800d92c:	461a      	mov	r2, r3
 800d92e:	460b      	mov	r3, r1
 800d930:	72fb      	strb	r3, [r7, #11]
 800d932:	4613      	mov	r3, r2
 800d934:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d936:	2300      	movs	r3, #0
 800d938:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d93a:	2300      	movs	r3, #0
 800d93c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d944:	893b      	ldrh	r3, [r7, #8]
 800d946:	7af9      	ldrb	r1, [r7, #11]
 800d948:	687a      	ldr	r2, [r7, #4]
 800d94a:	f7f8 fdf2 	bl	8006532 <HAL_PCD_EP_Transmit>
 800d94e:	4603      	mov	r3, r0
 800d950:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d952:	7dfb      	ldrb	r3, [r7, #23]
 800d954:	4618      	mov	r0, r3
 800d956:	f000 f85d 	bl	800da14 <USBD_Get_USB_Status>
 800d95a:	4603      	mov	r3, r0
 800d95c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d95e:	7dbb      	ldrb	r3, [r7, #22]
}
 800d960:	4618      	mov	r0, r3
 800d962:	3718      	adds	r7, #24
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}

0800d968 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b086      	sub	sp, #24
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	607a      	str	r2, [r7, #4]
 800d972:	461a      	mov	r2, r3
 800d974:	460b      	mov	r3, r1
 800d976:	72fb      	strb	r3, [r7, #11]
 800d978:	4613      	mov	r3, r2
 800d97a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d97c:	2300      	movs	r3, #0
 800d97e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d980:	2300      	movs	r3, #0
 800d982:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d98a:	893b      	ldrh	r3, [r7, #8]
 800d98c:	7af9      	ldrb	r1, [r7, #11]
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	f7f8 fd87 	bl	80064a2 <HAL_PCD_EP_Receive>
 800d994:	4603      	mov	r3, r0
 800d996:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d998:	7dfb      	ldrb	r3, [r7, #23]
 800d99a:	4618      	mov	r0, r3
 800d99c:	f000 f83a 	bl	800da14 <USBD_Get_USB_Status>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d9a4:	7dbb      	ldrb	r3, [r7, #22]
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3718      	adds	r7, #24
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bd80      	pop	{r7, pc}

0800d9ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9ae:	b580      	push	{r7, lr}
 800d9b0:	b082      	sub	sp, #8
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	6078      	str	r0, [r7, #4]
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d9c0:	78fa      	ldrb	r2, [r7, #3]
 800d9c2:	4611      	mov	r1, r2
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7f8 fd9d 	bl	8006504 <HAL_PCD_EP_GetRxCount>
 800d9ca:	4603      	mov	r3, r0
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3708      	adds	r7, #8
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b083      	sub	sp, #12
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d9dc:	4b02      	ldr	r3, [pc, #8]	; (800d9e8 <USBD_static_malloc+0x14>)
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	370c      	adds	r7, #12
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bc80      	pop	{r7}
 800d9e6:	4770      	bx	lr
 800d9e8:	20001f3c 	.word	0x20001f3c

0800d9ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b083      	sub	sp, #12
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]

}
 800d9f4:	bf00      	nop
 800d9f6:	370c      	adds	r7, #12
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bc80      	pop	{r7}
 800d9fc:	4770      	bx	lr

0800d9fe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9fe:	b480      	push	{r7}
 800da00:	b083      	sub	sp, #12
 800da02:	af00      	add	r7, sp, #0
 800da04:	6078      	str	r0, [r7, #4]
 800da06:	460b      	mov	r3, r1
 800da08:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800da0a:	bf00      	nop
 800da0c:	370c      	adds	r7, #12
 800da0e:	46bd      	mov	sp, r7
 800da10:	bc80      	pop	{r7}
 800da12:	4770      	bx	lr

0800da14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800da14:	b480      	push	{r7}
 800da16:	b085      	sub	sp, #20
 800da18:	af00      	add	r7, sp, #0
 800da1a:	4603      	mov	r3, r0
 800da1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da1e:	2300      	movs	r3, #0
 800da20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800da22:	79fb      	ldrb	r3, [r7, #7]
 800da24:	2b03      	cmp	r3, #3
 800da26:	d817      	bhi.n	800da58 <USBD_Get_USB_Status+0x44>
 800da28:	a201      	add	r2, pc, #4	; (adr r2, 800da30 <USBD_Get_USB_Status+0x1c>)
 800da2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da2e:	bf00      	nop
 800da30:	0800da41 	.word	0x0800da41
 800da34:	0800da47 	.word	0x0800da47
 800da38:	0800da4d 	.word	0x0800da4d
 800da3c:	0800da53 	.word	0x0800da53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800da40:	2300      	movs	r3, #0
 800da42:	73fb      	strb	r3, [r7, #15]
    break;
 800da44:	e00b      	b.n	800da5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800da46:	2302      	movs	r3, #2
 800da48:	73fb      	strb	r3, [r7, #15]
    break;
 800da4a:	e008      	b.n	800da5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800da4c:	2301      	movs	r3, #1
 800da4e:	73fb      	strb	r3, [r7, #15]
    break;
 800da50:	e005      	b.n	800da5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800da52:	2302      	movs	r3, #2
 800da54:	73fb      	strb	r3, [r7, #15]
    break;
 800da56:	e002      	b.n	800da5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800da58:	2302      	movs	r3, #2
 800da5a:	73fb      	strb	r3, [r7, #15]
    break;
 800da5c:	bf00      	nop
  }
  return usb_status;
 800da5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800da60:	4618      	mov	r0, r3
 800da62:	3714      	adds	r7, #20
 800da64:	46bd      	mov	sp, r7
 800da66:	bc80      	pop	{r7}
 800da68:	4770      	bx	lr
 800da6a:	bf00      	nop

0800da6c <atoi>:
 800da6c:	220a      	movs	r2, #10
 800da6e:	2100      	movs	r1, #0
 800da70:	f000 b90a 	b.w	800dc88 <strtol>

0800da74 <__errno>:
 800da74:	4b01      	ldr	r3, [pc, #4]	; (800da7c <__errno+0x8>)
 800da76:	6818      	ldr	r0, [r3, #0]
 800da78:	4770      	bx	lr
 800da7a:	bf00      	nop
 800da7c:	200001cc 	.word	0x200001cc

0800da80 <__libc_init_array>:
 800da80:	b570      	push	{r4, r5, r6, lr}
 800da82:	2600      	movs	r6, #0
 800da84:	4d0c      	ldr	r5, [pc, #48]	; (800dab8 <__libc_init_array+0x38>)
 800da86:	4c0d      	ldr	r4, [pc, #52]	; (800dabc <__libc_init_array+0x3c>)
 800da88:	1b64      	subs	r4, r4, r5
 800da8a:	10a4      	asrs	r4, r4, #2
 800da8c:	42a6      	cmp	r6, r4
 800da8e:	d109      	bne.n	800daa4 <__libc_init_array+0x24>
 800da90:	f001 f904 	bl	800ec9c <_init>
 800da94:	2600      	movs	r6, #0
 800da96:	4d0a      	ldr	r5, [pc, #40]	; (800dac0 <__libc_init_array+0x40>)
 800da98:	4c0a      	ldr	r4, [pc, #40]	; (800dac4 <__libc_init_array+0x44>)
 800da9a:	1b64      	subs	r4, r4, r5
 800da9c:	10a4      	asrs	r4, r4, #2
 800da9e:	42a6      	cmp	r6, r4
 800daa0:	d105      	bne.n	800daae <__libc_init_array+0x2e>
 800daa2:	bd70      	pop	{r4, r5, r6, pc}
 800daa4:	f855 3b04 	ldr.w	r3, [r5], #4
 800daa8:	4798      	blx	r3
 800daaa:	3601      	adds	r6, #1
 800daac:	e7ee      	b.n	800da8c <__libc_init_array+0xc>
 800daae:	f855 3b04 	ldr.w	r3, [r5], #4
 800dab2:	4798      	blx	r3
 800dab4:	3601      	adds	r6, #1
 800dab6:	e7f2      	b.n	800da9e <__libc_init_array+0x1e>
 800dab8:	0800ef74 	.word	0x0800ef74
 800dabc:	0800ef74 	.word	0x0800ef74
 800dac0:	0800ef74 	.word	0x0800ef74
 800dac4:	0800ef78 	.word	0x0800ef78

0800dac8 <memset>:
 800dac8:	4603      	mov	r3, r0
 800daca:	4402      	add	r2, r0
 800dacc:	4293      	cmp	r3, r2
 800dace:	d100      	bne.n	800dad2 <memset+0xa>
 800dad0:	4770      	bx	lr
 800dad2:	f803 1b01 	strb.w	r1, [r3], #1
 800dad6:	e7f9      	b.n	800dacc <memset+0x4>

0800dad8 <strtok>:
 800dad8:	4b16      	ldr	r3, [pc, #88]	; (800db34 <strtok+0x5c>)
 800dada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dade:	681f      	ldr	r7, [r3, #0]
 800dae0:	4605      	mov	r5, r0
 800dae2:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800dae4:	460e      	mov	r6, r1
 800dae6:	b9ec      	cbnz	r4, 800db24 <strtok+0x4c>
 800dae8:	2050      	movs	r0, #80	; 0x50
 800daea:	f000 f907 	bl	800dcfc <malloc>
 800daee:	4602      	mov	r2, r0
 800daf0:	65b8      	str	r0, [r7, #88]	; 0x58
 800daf2:	b920      	cbnz	r0, 800dafe <strtok+0x26>
 800daf4:	2157      	movs	r1, #87	; 0x57
 800daf6:	4b10      	ldr	r3, [pc, #64]	; (800db38 <strtok+0x60>)
 800daf8:	4810      	ldr	r0, [pc, #64]	; (800db3c <strtok+0x64>)
 800dafa:	f000 f8cf 	bl	800dc9c <__assert_func>
 800dafe:	e9c0 4400 	strd	r4, r4, [r0]
 800db02:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800db06:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800db0a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800db0e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800db12:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800db16:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800db1a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800db1e:	6184      	str	r4, [r0, #24]
 800db20:	7704      	strb	r4, [r0, #28]
 800db22:	6244      	str	r4, [r0, #36]	; 0x24
 800db24:	4631      	mov	r1, r6
 800db26:	4628      	mov	r0, r5
 800db28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800db2a:	2301      	movs	r3, #1
 800db2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db30:	f000 b806 	b.w	800db40 <__strtok_r>
 800db34:	200001cc 	.word	0x200001cc
 800db38:	0800ed30 	.word	0x0800ed30
 800db3c:	0800ed47 	.word	0x0800ed47

0800db40 <__strtok_r>:
 800db40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db42:	b908      	cbnz	r0, 800db48 <__strtok_r+0x8>
 800db44:	6810      	ldr	r0, [r2, #0]
 800db46:	b188      	cbz	r0, 800db6c <__strtok_r+0x2c>
 800db48:	4604      	mov	r4, r0
 800db4a:	460f      	mov	r7, r1
 800db4c:	4620      	mov	r0, r4
 800db4e:	f814 5b01 	ldrb.w	r5, [r4], #1
 800db52:	f817 6b01 	ldrb.w	r6, [r7], #1
 800db56:	b91e      	cbnz	r6, 800db60 <__strtok_r+0x20>
 800db58:	b965      	cbnz	r5, 800db74 <__strtok_r+0x34>
 800db5a:	4628      	mov	r0, r5
 800db5c:	6015      	str	r5, [r2, #0]
 800db5e:	e005      	b.n	800db6c <__strtok_r+0x2c>
 800db60:	42b5      	cmp	r5, r6
 800db62:	d1f6      	bne.n	800db52 <__strtok_r+0x12>
 800db64:	2b00      	cmp	r3, #0
 800db66:	d1f0      	bne.n	800db4a <__strtok_r+0xa>
 800db68:	6014      	str	r4, [r2, #0]
 800db6a:	7003      	strb	r3, [r0, #0]
 800db6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db6e:	461c      	mov	r4, r3
 800db70:	e00c      	b.n	800db8c <__strtok_r+0x4c>
 800db72:	b915      	cbnz	r5, 800db7a <__strtok_r+0x3a>
 800db74:	460e      	mov	r6, r1
 800db76:	f814 3b01 	ldrb.w	r3, [r4], #1
 800db7a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800db7e:	42ab      	cmp	r3, r5
 800db80:	d1f7      	bne.n	800db72 <__strtok_r+0x32>
 800db82:	2b00      	cmp	r3, #0
 800db84:	d0f3      	beq.n	800db6e <__strtok_r+0x2e>
 800db86:	2300      	movs	r3, #0
 800db88:	f804 3c01 	strb.w	r3, [r4, #-1]
 800db8c:	6014      	str	r4, [r2, #0]
 800db8e:	e7ed      	b.n	800db6c <__strtok_r+0x2c>

0800db90 <_strtol_l.constprop.0>:
 800db90:	2b01      	cmp	r3, #1
 800db92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db96:	4680      	mov	r8, r0
 800db98:	d001      	beq.n	800db9e <_strtol_l.constprop.0+0xe>
 800db9a:	2b24      	cmp	r3, #36	; 0x24
 800db9c:	d906      	bls.n	800dbac <_strtol_l.constprop.0+0x1c>
 800db9e:	f7ff ff69 	bl	800da74 <__errno>
 800dba2:	2316      	movs	r3, #22
 800dba4:	6003      	str	r3, [r0, #0]
 800dba6:	2000      	movs	r0, #0
 800dba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbac:	460d      	mov	r5, r1
 800dbae:	4f35      	ldr	r7, [pc, #212]	; (800dc84 <_strtol_l.constprop.0+0xf4>)
 800dbb0:	4628      	mov	r0, r5
 800dbb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dbb6:	5de6      	ldrb	r6, [r4, r7]
 800dbb8:	f016 0608 	ands.w	r6, r6, #8
 800dbbc:	d1f8      	bne.n	800dbb0 <_strtol_l.constprop.0+0x20>
 800dbbe:	2c2d      	cmp	r4, #45	; 0x2d
 800dbc0:	d12f      	bne.n	800dc22 <_strtol_l.constprop.0+0x92>
 800dbc2:	2601      	movs	r6, #1
 800dbc4:	782c      	ldrb	r4, [r5, #0]
 800dbc6:	1c85      	adds	r5, r0, #2
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d057      	beq.n	800dc7c <_strtol_l.constprop.0+0xec>
 800dbcc:	2b10      	cmp	r3, #16
 800dbce:	d109      	bne.n	800dbe4 <_strtol_l.constprop.0+0x54>
 800dbd0:	2c30      	cmp	r4, #48	; 0x30
 800dbd2:	d107      	bne.n	800dbe4 <_strtol_l.constprop.0+0x54>
 800dbd4:	7828      	ldrb	r0, [r5, #0]
 800dbd6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800dbda:	2858      	cmp	r0, #88	; 0x58
 800dbdc:	d149      	bne.n	800dc72 <_strtol_l.constprop.0+0xe2>
 800dbde:	2310      	movs	r3, #16
 800dbe0:	786c      	ldrb	r4, [r5, #1]
 800dbe2:	3502      	adds	r5, #2
 800dbe4:	2700      	movs	r7, #0
 800dbe6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800dbea:	f10e 3eff 	add.w	lr, lr, #4294967295
 800dbee:	fbbe f9f3 	udiv	r9, lr, r3
 800dbf2:	4638      	mov	r0, r7
 800dbf4:	fb03 ea19 	mls	sl, r3, r9, lr
 800dbf8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800dbfc:	f1bc 0f09 	cmp.w	ip, #9
 800dc00:	d814      	bhi.n	800dc2c <_strtol_l.constprop.0+0x9c>
 800dc02:	4664      	mov	r4, ip
 800dc04:	42a3      	cmp	r3, r4
 800dc06:	dd22      	ble.n	800dc4e <_strtol_l.constprop.0+0xbe>
 800dc08:	2f00      	cmp	r7, #0
 800dc0a:	db1d      	blt.n	800dc48 <_strtol_l.constprop.0+0xb8>
 800dc0c:	4581      	cmp	r9, r0
 800dc0e:	d31b      	bcc.n	800dc48 <_strtol_l.constprop.0+0xb8>
 800dc10:	d101      	bne.n	800dc16 <_strtol_l.constprop.0+0x86>
 800dc12:	45a2      	cmp	sl, r4
 800dc14:	db18      	blt.n	800dc48 <_strtol_l.constprop.0+0xb8>
 800dc16:	2701      	movs	r7, #1
 800dc18:	fb00 4003 	mla	r0, r0, r3, r4
 800dc1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc20:	e7ea      	b.n	800dbf8 <_strtol_l.constprop.0+0x68>
 800dc22:	2c2b      	cmp	r4, #43	; 0x2b
 800dc24:	bf04      	itt	eq
 800dc26:	782c      	ldrbeq	r4, [r5, #0]
 800dc28:	1c85      	addeq	r5, r0, #2
 800dc2a:	e7cd      	b.n	800dbc8 <_strtol_l.constprop.0+0x38>
 800dc2c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dc30:	f1bc 0f19 	cmp.w	ip, #25
 800dc34:	d801      	bhi.n	800dc3a <_strtol_l.constprop.0+0xaa>
 800dc36:	3c37      	subs	r4, #55	; 0x37
 800dc38:	e7e4      	b.n	800dc04 <_strtol_l.constprop.0+0x74>
 800dc3a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dc3e:	f1bc 0f19 	cmp.w	ip, #25
 800dc42:	d804      	bhi.n	800dc4e <_strtol_l.constprop.0+0xbe>
 800dc44:	3c57      	subs	r4, #87	; 0x57
 800dc46:	e7dd      	b.n	800dc04 <_strtol_l.constprop.0+0x74>
 800dc48:	f04f 37ff 	mov.w	r7, #4294967295
 800dc4c:	e7e6      	b.n	800dc1c <_strtol_l.constprop.0+0x8c>
 800dc4e:	2f00      	cmp	r7, #0
 800dc50:	da07      	bge.n	800dc62 <_strtol_l.constprop.0+0xd2>
 800dc52:	2322      	movs	r3, #34	; 0x22
 800dc54:	4670      	mov	r0, lr
 800dc56:	f8c8 3000 	str.w	r3, [r8]
 800dc5a:	2a00      	cmp	r2, #0
 800dc5c:	d0a4      	beq.n	800dba8 <_strtol_l.constprop.0+0x18>
 800dc5e:	1e69      	subs	r1, r5, #1
 800dc60:	e005      	b.n	800dc6e <_strtol_l.constprop.0+0xde>
 800dc62:	b106      	cbz	r6, 800dc66 <_strtol_l.constprop.0+0xd6>
 800dc64:	4240      	negs	r0, r0
 800dc66:	2a00      	cmp	r2, #0
 800dc68:	d09e      	beq.n	800dba8 <_strtol_l.constprop.0+0x18>
 800dc6a:	2f00      	cmp	r7, #0
 800dc6c:	d1f7      	bne.n	800dc5e <_strtol_l.constprop.0+0xce>
 800dc6e:	6011      	str	r1, [r2, #0]
 800dc70:	e79a      	b.n	800dba8 <_strtol_l.constprop.0+0x18>
 800dc72:	2430      	movs	r4, #48	; 0x30
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d1b5      	bne.n	800dbe4 <_strtol_l.constprop.0+0x54>
 800dc78:	2308      	movs	r3, #8
 800dc7a:	e7b3      	b.n	800dbe4 <_strtol_l.constprop.0+0x54>
 800dc7c:	2c30      	cmp	r4, #48	; 0x30
 800dc7e:	d0a9      	beq.n	800dbd4 <_strtol_l.constprop.0+0x44>
 800dc80:	230a      	movs	r3, #10
 800dc82:	e7af      	b.n	800dbe4 <_strtol_l.constprop.0+0x54>
 800dc84:	0800ede1 	.word	0x0800ede1

0800dc88 <strtol>:
 800dc88:	4613      	mov	r3, r2
 800dc8a:	460a      	mov	r2, r1
 800dc8c:	4601      	mov	r1, r0
 800dc8e:	4802      	ldr	r0, [pc, #8]	; (800dc98 <strtol+0x10>)
 800dc90:	6800      	ldr	r0, [r0, #0]
 800dc92:	f7ff bf7d 	b.w	800db90 <_strtol_l.constprop.0>
 800dc96:	bf00      	nop
 800dc98:	200001cc 	.word	0x200001cc

0800dc9c <__assert_func>:
 800dc9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc9e:	4614      	mov	r4, r2
 800dca0:	461a      	mov	r2, r3
 800dca2:	4b09      	ldr	r3, [pc, #36]	; (800dcc8 <__assert_func+0x2c>)
 800dca4:	4605      	mov	r5, r0
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	68d8      	ldr	r0, [r3, #12]
 800dcaa:	b14c      	cbz	r4, 800dcc0 <__assert_func+0x24>
 800dcac:	4b07      	ldr	r3, [pc, #28]	; (800dccc <__assert_func+0x30>)
 800dcae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dcb2:	9100      	str	r1, [sp, #0]
 800dcb4:	462b      	mov	r3, r5
 800dcb6:	4906      	ldr	r1, [pc, #24]	; (800dcd0 <__assert_func+0x34>)
 800dcb8:	f000 f80e 	bl	800dcd8 <fiprintf>
 800dcbc:	f000 fcc0 	bl	800e640 <abort>
 800dcc0:	4b04      	ldr	r3, [pc, #16]	; (800dcd4 <__assert_func+0x38>)
 800dcc2:	461c      	mov	r4, r3
 800dcc4:	e7f3      	b.n	800dcae <__assert_func+0x12>
 800dcc6:	bf00      	nop
 800dcc8:	200001cc 	.word	0x200001cc
 800dccc:	0800eda4 	.word	0x0800eda4
 800dcd0:	0800edb1 	.word	0x0800edb1
 800dcd4:	0800eddf 	.word	0x0800eddf

0800dcd8 <fiprintf>:
 800dcd8:	b40e      	push	{r1, r2, r3}
 800dcda:	b503      	push	{r0, r1, lr}
 800dcdc:	4601      	mov	r1, r0
 800dcde:	ab03      	add	r3, sp, #12
 800dce0:	4805      	ldr	r0, [pc, #20]	; (800dcf8 <fiprintf+0x20>)
 800dce2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dce6:	6800      	ldr	r0, [r0, #0]
 800dce8:	9301      	str	r3, [sp, #4]
 800dcea:	f000 f913 	bl	800df14 <_vfiprintf_r>
 800dcee:	b002      	add	sp, #8
 800dcf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcf4:	b003      	add	sp, #12
 800dcf6:	4770      	bx	lr
 800dcf8:	200001cc 	.word	0x200001cc

0800dcfc <malloc>:
 800dcfc:	4b02      	ldr	r3, [pc, #8]	; (800dd08 <malloc+0xc>)
 800dcfe:	4601      	mov	r1, r0
 800dd00:	6818      	ldr	r0, [r3, #0]
 800dd02:	f000 b86b 	b.w	800dddc <_malloc_r>
 800dd06:	bf00      	nop
 800dd08:	200001cc 	.word	0x200001cc

0800dd0c <_free_r>:
 800dd0c:	b538      	push	{r3, r4, r5, lr}
 800dd0e:	4605      	mov	r5, r0
 800dd10:	2900      	cmp	r1, #0
 800dd12:	d040      	beq.n	800dd96 <_free_r+0x8a>
 800dd14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd18:	1f0c      	subs	r4, r1, #4
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	bfb8      	it	lt
 800dd1e:	18e4      	addlt	r4, r4, r3
 800dd20:	f000 fec0 	bl	800eaa4 <__malloc_lock>
 800dd24:	4a1c      	ldr	r2, [pc, #112]	; (800dd98 <_free_r+0x8c>)
 800dd26:	6813      	ldr	r3, [r2, #0]
 800dd28:	b933      	cbnz	r3, 800dd38 <_free_r+0x2c>
 800dd2a:	6063      	str	r3, [r4, #4]
 800dd2c:	6014      	str	r4, [r2, #0]
 800dd2e:	4628      	mov	r0, r5
 800dd30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd34:	f000 bebc 	b.w	800eab0 <__malloc_unlock>
 800dd38:	42a3      	cmp	r3, r4
 800dd3a:	d908      	bls.n	800dd4e <_free_r+0x42>
 800dd3c:	6820      	ldr	r0, [r4, #0]
 800dd3e:	1821      	adds	r1, r4, r0
 800dd40:	428b      	cmp	r3, r1
 800dd42:	bf01      	itttt	eq
 800dd44:	6819      	ldreq	r1, [r3, #0]
 800dd46:	685b      	ldreq	r3, [r3, #4]
 800dd48:	1809      	addeq	r1, r1, r0
 800dd4a:	6021      	streq	r1, [r4, #0]
 800dd4c:	e7ed      	b.n	800dd2a <_free_r+0x1e>
 800dd4e:	461a      	mov	r2, r3
 800dd50:	685b      	ldr	r3, [r3, #4]
 800dd52:	b10b      	cbz	r3, 800dd58 <_free_r+0x4c>
 800dd54:	42a3      	cmp	r3, r4
 800dd56:	d9fa      	bls.n	800dd4e <_free_r+0x42>
 800dd58:	6811      	ldr	r1, [r2, #0]
 800dd5a:	1850      	adds	r0, r2, r1
 800dd5c:	42a0      	cmp	r0, r4
 800dd5e:	d10b      	bne.n	800dd78 <_free_r+0x6c>
 800dd60:	6820      	ldr	r0, [r4, #0]
 800dd62:	4401      	add	r1, r0
 800dd64:	1850      	adds	r0, r2, r1
 800dd66:	4283      	cmp	r3, r0
 800dd68:	6011      	str	r1, [r2, #0]
 800dd6a:	d1e0      	bne.n	800dd2e <_free_r+0x22>
 800dd6c:	6818      	ldr	r0, [r3, #0]
 800dd6e:	685b      	ldr	r3, [r3, #4]
 800dd70:	4401      	add	r1, r0
 800dd72:	6011      	str	r1, [r2, #0]
 800dd74:	6053      	str	r3, [r2, #4]
 800dd76:	e7da      	b.n	800dd2e <_free_r+0x22>
 800dd78:	d902      	bls.n	800dd80 <_free_r+0x74>
 800dd7a:	230c      	movs	r3, #12
 800dd7c:	602b      	str	r3, [r5, #0]
 800dd7e:	e7d6      	b.n	800dd2e <_free_r+0x22>
 800dd80:	6820      	ldr	r0, [r4, #0]
 800dd82:	1821      	adds	r1, r4, r0
 800dd84:	428b      	cmp	r3, r1
 800dd86:	bf01      	itttt	eq
 800dd88:	6819      	ldreq	r1, [r3, #0]
 800dd8a:	685b      	ldreq	r3, [r3, #4]
 800dd8c:	1809      	addeq	r1, r1, r0
 800dd8e:	6021      	streq	r1, [r4, #0]
 800dd90:	6063      	str	r3, [r4, #4]
 800dd92:	6054      	str	r4, [r2, #4]
 800dd94:	e7cb      	b.n	800dd2e <_free_r+0x22>
 800dd96:	bd38      	pop	{r3, r4, r5, pc}
 800dd98:	2000215c 	.word	0x2000215c

0800dd9c <sbrk_aligned>:
 800dd9c:	b570      	push	{r4, r5, r6, lr}
 800dd9e:	4e0e      	ldr	r6, [pc, #56]	; (800ddd8 <sbrk_aligned+0x3c>)
 800dda0:	460c      	mov	r4, r1
 800dda2:	6831      	ldr	r1, [r6, #0]
 800dda4:	4605      	mov	r5, r0
 800dda6:	b911      	cbnz	r1, 800ddae <sbrk_aligned+0x12>
 800dda8:	f000 fb7a 	bl	800e4a0 <_sbrk_r>
 800ddac:	6030      	str	r0, [r6, #0]
 800ddae:	4621      	mov	r1, r4
 800ddb0:	4628      	mov	r0, r5
 800ddb2:	f000 fb75 	bl	800e4a0 <_sbrk_r>
 800ddb6:	1c43      	adds	r3, r0, #1
 800ddb8:	d00a      	beq.n	800ddd0 <sbrk_aligned+0x34>
 800ddba:	1cc4      	adds	r4, r0, #3
 800ddbc:	f024 0403 	bic.w	r4, r4, #3
 800ddc0:	42a0      	cmp	r0, r4
 800ddc2:	d007      	beq.n	800ddd4 <sbrk_aligned+0x38>
 800ddc4:	1a21      	subs	r1, r4, r0
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	f000 fb6a 	bl	800e4a0 <_sbrk_r>
 800ddcc:	3001      	adds	r0, #1
 800ddce:	d101      	bne.n	800ddd4 <sbrk_aligned+0x38>
 800ddd0:	f04f 34ff 	mov.w	r4, #4294967295
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	bd70      	pop	{r4, r5, r6, pc}
 800ddd8:	20002160 	.word	0x20002160

0800dddc <_malloc_r>:
 800dddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dde0:	1ccd      	adds	r5, r1, #3
 800dde2:	f025 0503 	bic.w	r5, r5, #3
 800dde6:	3508      	adds	r5, #8
 800dde8:	2d0c      	cmp	r5, #12
 800ddea:	bf38      	it	cc
 800ddec:	250c      	movcc	r5, #12
 800ddee:	2d00      	cmp	r5, #0
 800ddf0:	4607      	mov	r7, r0
 800ddf2:	db01      	blt.n	800ddf8 <_malloc_r+0x1c>
 800ddf4:	42a9      	cmp	r1, r5
 800ddf6:	d905      	bls.n	800de04 <_malloc_r+0x28>
 800ddf8:	230c      	movs	r3, #12
 800ddfa:	2600      	movs	r6, #0
 800ddfc:	603b      	str	r3, [r7, #0]
 800ddfe:	4630      	mov	r0, r6
 800de00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de04:	4e2e      	ldr	r6, [pc, #184]	; (800dec0 <_malloc_r+0xe4>)
 800de06:	f000 fe4d 	bl	800eaa4 <__malloc_lock>
 800de0a:	6833      	ldr	r3, [r6, #0]
 800de0c:	461c      	mov	r4, r3
 800de0e:	bb34      	cbnz	r4, 800de5e <_malloc_r+0x82>
 800de10:	4629      	mov	r1, r5
 800de12:	4638      	mov	r0, r7
 800de14:	f7ff ffc2 	bl	800dd9c <sbrk_aligned>
 800de18:	1c43      	adds	r3, r0, #1
 800de1a:	4604      	mov	r4, r0
 800de1c:	d14d      	bne.n	800deba <_malloc_r+0xde>
 800de1e:	6834      	ldr	r4, [r6, #0]
 800de20:	4626      	mov	r6, r4
 800de22:	2e00      	cmp	r6, #0
 800de24:	d140      	bne.n	800dea8 <_malloc_r+0xcc>
 800de26:	6823      	ldr	r3, [r4, #0]
 800de28:	4631      	mov	r1, r6
 800de2a:	4638      	mov	r0, r7
 800de2c:	eb04 0803 	add.w	r8, r4, r3
 800de30:	f000 fb36 	bl	800e4a0 <_sbrk_r>
 800de34:	4580      	cmp	r8, r0
 800de36:	d13a      	bne.n	800deae <_malloc_r+0xd2>
 800de38:	6821      	ldr	r1, [r4, #0]
 800de3a:	3503      	adds	r5, #3
 800de3c:	1a6d      	subs	r5, r5, r1
 800de3e:	f025 0503 	bic.w	r5, r5, #3
 800de42:	3508      	adds	r5, #8
 800de44:	2d0c      	cmp	r5, #12
 800de46:	bf38      	it	cc
 800de48:	250c      	movcc	r5, #12
 800de4a:	4638      	mov	r0, r7
 800de4c:	4629      	mov	r1, r5
 800de4e:	f7ff ffa5 	bl	800dd9c <sbrk_aligned>
 800de52:	3001      	adds	r0, #1
 800de54:	d02b      	beq.n	800deae <_malloc_r+0xd2>
 800de56:	6823      	ldr	r3, [r4, #0]
 800de58:	442b      	add	r3, r5
 800de5a:	6023      	str	r3, [r4, #0]
 800de5c:	e00e      	b.n	800de7c <_malloc_r+0xa0>
 800de5e:	6822      	ldr	r2, [r4, #0]
 800de60:	1b52      	subs	r2, r2, r5
 800de62:	d41e      	bmi.n	800dea2 <_malloc_r+0xc6>
 800de64:	2a0b      	cmp	r2, #11
 800de66:	d916      	bls.n	800de96 <_malloc_r+0xba>
 800de68:	1961      	adds	r1, r4, r5
 800de6a:	42a3      	cmp	r3, r4
 800de6c:	6025      	str	r5, [r4, #0]
 800de6e:	bf18      	it	ne
 800de70:	6059      	strne	r1, [r3, #4]
 800de72:	6863      	ldr	r3, [r4, #4]
 800de74:	bf08      	it	eq
 800de76:	6031      	streq	r1, [r6, #0]
 800de78:	5162      	str	r2, [r4, r5]
 800de7a:	604b      	str	r3, [r1, #4]
 800de7c:	4638      	mov	r0, r7
 800de7e:	f104 060b 	add.w	r6, r4, #11
 800de82:	f000 fe15 	bl	800eab0 <__malloc_unlock>
 800de86:	f026 0607 	bic.w	r6, r6, #7
 800de8a:	1d23      	adds	r3, r4, #4
 800de8c:	1af2      	subs	r2, r6, r3
 800de8e:	d0b6      	beq.n	800ddfe <_malloc_r+0x22>
 800de90:	1b9b      	subs	r3, r3, r6
 800de92:	50a3      	str	r3, [r4, r2]
 800de94:	e7b3      	b.n	800ddfe <_malloc_r+0x22>
 800de96:	6862      	ldr	r2, [r4, #4]
 800de98:	42a3      	cmp	r3, r4
 800de9a:	bf0c      	ite	eq
 800de9c:	6032      	streq	r2, [r6, #0]
 800de9e:	605a      	strne	r2, [r3, #4]
 800dea0:	e7ec      	b.n	800de7c <_malloc_r+0xa0>
 800dea2:	4623      	mov	r3, r4
 800dea4:	6864      	ldr	r4, [r4, #4]
 800dea6:	e7b2      	b.n	800de0e <_malloc_r+0x32>
 800dea8:	4634      	mov	r4, r6
 800deaa:	6876      	ldr	r6, [r6, #4]
 800deac:	e7b9      	b.n	800de22 <_malloc_r+0x46>
 800deae:	230c      	movs	r3, #12
 800deb0:	4638      	mov	r0, r7
 800deb2:	603b      	str	r3, [r7, #0]
 800deb4:	f000 fdfc 	bl	800eab0 <__malloc_unlock>
 800deb8:	e7a1      	b.n	800ddfe <_malloc_r+0x22>
 800deba:	6025      	str	r5, [r4, #0]
 800debc:	e7de      	b.n	800de7c <_malloc_r+0xa0>
 800debe:	bf00      	nop
 800dec0:	2000215c 	.word	0x2000215c

0800dec4 <__sfputc_r>:
 800dec4:	6893      	ldr	r3, [r2, #8]
 800dec6:	b410      	push	{r4}
 800dec8:	3b01      	subs	r3, #1
 800deca:	2b00      	cmp	r3, #0
 800decc:	6093      	str	r3, [r2, #8]
 800dece:	da07      	bge.n	800dee0 <__sfputc_r+0x1c>
 800ded0:	6994      	ldr	r4, [r2, #24]
 800ded2:	42a3      	cmp	r3, r4
 800ded4:	db01      	blt.n	800deda <__sfputc_r+0x16>
 800ded6:	290a      	cmp	r1, #10
 800ded8:	d102      	bne.n	800dee0 <__sfputc_r+0x1c>
 800deda:	bc10      	pop	{r4}
 800dedc:	f000 baf0 	b.w	800e4c0 <__swbuf_r>
 800dee0:	6813      	ldr	r3, [r2, #0]
 800dee2:	1c58      	adds	r0, r3, #1
 800dee4:	6010      	str	r0, [r2, #0]
 800dee6:	7019      	strb	r1, [r3, #0]
 800dee8:	4608      	mov	r0, r1
 800deea:	bc10      	pop	{r4}
 800deec:	4770      	bx	lr

0800deee <__sfputs_r>:
 800deee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800def0:	4606      	mov	r6, r0
 800def2:	460f      	mov	r7, r1
 800def4:	4614      	mov	r4, r2
 800def6:	18d5      	adds	r5, r2, r3
 800def8:	42ac      	cmp	r4, r5
 800defa:	d101      	bne.n	800df00 <__sfputs_r+0x12>
 800defc:	2000      	movs	r0, #0
 800defe:	e007      	b.n	800df10 <__sfputs_r+0x22>
 800df00:	463a      	mov	r2, r7
 800df02:	4630      	mov	r0, r6
 800df04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df08:	f7ff ffdc 	bl	800dec4 <__sfputc_r>
 800df0c:	1c43      	adds	r3, r0, #1
 800df0e:	d1f3      	bne.n	800def8 <__sfputs_r+0xa>
 800df10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df14 <_vfiprintf_r>:
 800df14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df18:	460d      	mov	r5, r1
 800df1a:	4614      	mov	r4, r2
 800df1c:	4698      	mov	r8, r3
 800df1e:	4606      	mov	r6, r0
 800df20:	b09d      	sub	sp, #116	; 0x74
 800df22:	b118      	cbz	r0, 800df2c <_vfiprintf_r+0x18>
 800df24:	6983      	ldr	r3, [r0, #24]
 800df26:	b90b      	cbnz	r3, 800df2c <_vfiprintf_r+0x18>
 800df28:	f000 fca8 	bl	800e87c <__sinit>
 800df2c:	4b89      	ldr	r3, [pc, #548]	; (800e154 <_vfiprintf_r+0x240>)
 800df2e:	429d      	cmp	r5, r3
 800df30:	d11b      	bne.n	800df6a <_vfiprintf_r+0x56>
 800df32:	6875      	ldr	r5, [r6, #4]
 800df34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df36:	07d9      	lsls	r1, r3, #31
 800df38:	d405      	bmi.n	800df46 <_vfiprintf_r+0x32>
 800df3a:	89ab      	ldrh	r3, [r5, #12]
 800df3c:	059a      	lsls	r2, r3, #22
 800df3e:	d402      	bmi.n	800df46 <_vfiprintf_r+0x32>
 800df40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df42:	f000 fd39 	bl	800e9b8 <__retarget_lock_acquire_recursive>
 800df46:	89ab      	ldrh	r3, [r5, #12]
 800df48:	071b      	lsls	r3, r3, #28
 800df4a:	d501      	bpl.n	800df50 <_vfiprintf_r+0x3c>
 800df4c:	692b      	ldr	r3, [r5, #16]
 800df4e:	b9eb      	cbnz	r3, 800df8c <_vfiprintf_r+0x78>
 800df50:	4629      	mov	r1, r5
 800df52:	4630      	mov	r0, r6
 800df54:	f000 fb06 	bl	800e564 <__swsetup_r>
 800df58:	b1c0      	cbz	r0, 800df8c <_vfiprintf_r+0x78>
 800df5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df5c:	07dc      	lsls	r4, r3, #31
 800df5e:	d50e      	bpl.n	800df7e <_vfiprintf_r+0x6a>
 800df60:	f04f 30ff 	mov.w	r0, #4294967295
 800df64:	b01d      	add	sp, #116	; 0x74
 800df66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df6a:	4b7b      	ldr	r3, [pc, #492]	; (800e158 <_vfiprintf_r+0x244>)
 800df6c:	429d      	cmp	r5, r3
 800df6e:	d101      	bne.n	800df74 <_vfiprintf_r+0x60>
 800df70:	68b5      	ldr	r5, [r6, #8]
 800df72:	e7df      	b.n	800df34 <_vfiprintf_r+0x20>
 800df74:	4b79      	ldr	r3, [pc, #484]	; (800e15c <_vfiprintf_r+0x248>)
 800df76:	429d      	cmp	r5, r3
 800df78:	bf08      	it	eq
 800df7a:	68f5      	ldreq	r5, [r6, #12]
 800df7c:	e7da      	b.n	800df34 <_vfiprintf_r+0x20>
 800df7e:	89ab      	ldrh	r3, [r5, #12]
 800df80:	0598      	lsls	r0, r3, #22
 800df82:	d4ed      	bmi.n	800df60 <_vfiprintf_r+0x4c>
 800df84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df86:	f000 fd18 	bl	800e9ba <__retarget_lock_release_recursive>
 800df8a:	e7e9      	b.n	800df60 <_vfiprintf_r+0x4c>
 800df8c:	2300      	movs	r3, #0
 800df8e:	9309      	str	r3, [sp, #36]	; 0x24
 800df90:	2320      	movs	r3, #32
 800df92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df96:	2330      	movs	r3, #48	; 0x30
 800df98:	f04f 0901 	mov.w	r9, #1
 800df9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfa0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e160 <_vfiprintf_r+0x24c>
 800dfa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dfa8:	4623      	mov	r3, r4
 800dfaa:	469a      	mov	sl, r3
 800dfac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfb0:	b10a      	cbz	r2, 800dfb6 <_vfiprintf_r+0xa2>
 800dfb2:	2a25      	cmp	r2, #37	; 0x25
 800dfb4:	d1f9      	bne.n	800dfaa <_vfiprintf_r+0x96>
 800dfb6:	ebba 0b04 	subs.w	fp, sl, r4
 800dfba:	d00b      	beq.n	800dfd4 <_vfiprintf_r+0xc0>
 800dfbc:	465b      	mov	r3, fp
 800dfbe:	4622      	mov	r2, r4
 800dfc0:	4629      	mov	r1, r5
 800dfc2:	4630      	mov	r0, r6
 800dfc4:	f7ff ff93 	bl	800deee <__sfputs_r>
 800dfc8:	3001      	adds	r0, #1
 800dfca:	f000 80aa 	beq.w	800e122 <_vfiprintf_r+0x20e>
 800dfce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfd0:	445a      	add	r2, fp
 800dfd2:	9209      	str	r2, [sp, #36]	; 0x24
 800dfd4:	f89a 3000 	ldrb.w	r3, [sl]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	f000 80a2 	beq.w	800e122 <_vfiprintf_r+0x20e>
 800dfde:	2300      	movs	r3, #0
 800dfe0:	f04f 32ff 	mov.w	r2, #4294967295
 800dfe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfe8:	f10a 0a01 	add.w	sl, sl, #1
 800dfec:	9304      	str	r3, [sp, #16]
 800dfee:	9307      	str	r3, [sp, #28]
 800dff0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dff4:	931a      	str	r3, [sp, #104]	; 0x68
 800dff6:	4654      	mov	r4, sl
 800dff8:	2205      	movs	r2, #5
 800dffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dffe:	4858      	ldr	r0, [pc, #352]	; (800e160 <_vfiprintf_r+0x24c>)
 800e000:	f000 fd42 	bl	800ea88 <memchr>
 800e004:	9a04      	ldr	r2, [sp, #16]
 800e006:	b9d8      	cbnz	r0, 800e040 <_vfiprintf_r+0x12c>
 800e008:	06d1      	lsls	r1, r2, #27
 800e00a:	bf44      	itt	mi
 800e00c:	2320      	movmi	r3, #32
 800e00e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e012:	0713      	lsls	r3, r2, #28
 800e014:	bf44      	itt	mi
 800e016:	232b      	movmi	r3, #43	; 0x2b
 800e018:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e01c:	f89a 3000 	ldrb.w	r3, [sl]
 800e020:	2b2a      	cmp	r3, #42	; 0x2a
 800e022:	d015      	beq.n	800e050 <_vfiprintf_r+0x13c>
 800e024:	4654      	mov	r4, sl
 800e026:	2000      	movs	r0, #0
 800e028:	f04f 0c0a 	mov.w	ip, #10
 800e02c:	9a07      	ldr	r2, [sp, #28]
 800e02e:	4621      	mov	r1, r4
 800e030:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e034:	3b30      	subs	r3, #48	; 0x30
 800e036:	2b09      	cmp	r3, #9
 800e038:	d94e      	bls.n	800e0d8 <_vfiprintf_r+0x1c4>
 800e03a:	b1b0      	cbz	r0, 800e06a <_vfiprintf_r+0x156>
 800e03c:	9207      	str	r2, [sp, #28]
 800e03e:	e014      	b.n	800e06a <_vfiprintf_r+0x156>
 800e040:	eba0 0308 	sub.w	r3, r0, r8
 800e044:	fa09 f303 	lsl.w	r3, r9, r3
 800e048:	4313      	orrs	r3, r2
 800e04a:	46a2      	mov	sl, r4
 800e04c:	9304      	str	r3, [sp, #16]
 800e04e:	e7d2      	b.n	800dff6 <_vfiprintf_r+0xe2>
 800e050:	9b03      	ldr	r3, [sp, #12]
 800e052:	1d19      	adds	r1, r3, #4
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	9103      	str	r1, [sp, #12]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	bfbb      	ittet	lt
 800e05c:	425b      	neglt	r3, r3
 800e05e:	f042 0202 	orrlt.w	r2, r2, #2
 800e062:	9307      	strge	r3, [sp, #28]
 800e064:	9307      	strlt	r3, [sp, #28]
 800e066:	bfb8      	it	lt
 800e068:	9204      	strlt	r2, [sp, #16]
 800e06a:	7823      	ldrb	r3, [r4, #0]
 800e06c:	2b2e      	cmp	r3, #46	; 0x2e
 800e06e:	d10c      	bne.n	800e08a <_vfiprintf_r+0x176>
 800e070:	7863      	ldrb	r3, [r4, #1]
 800e072:	2b2a      	cmp	r3, #42	; 0x2a
 800e074:	d135      	bne.n	800e0e2 <_vfiprintf_r+0x1ce>
 800e076:	9b03      	ldr	r3, [sp, #12]
 800e078:	3402      	adds	r4, #2
 800e07a:	1d1a      	adds	r2, r3, #4
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	9203      	str	r2, [sp, #12]
 800e080:	2b00      	cmp	r3, #0
 800e082:	bfb8      	it	lt
 800e084:	f04f 33ff 	movlt.w	r3, #4294967295
 800e088:	9305      	str	r3, [sp, #20]
 800e08a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800e164 <_vfiprintf_r+0x250>
 800e08e:	2203      	movs	r2, #3
 800e090:	4650      	mov	r0, sl
 800e092:	7821      	ldrb	r1, [r4, #0]
 800e094:	f000 fcf8 	bl	800ea88 <memchr>
 800e098:	b140      	cbz	r0, 800e0ac <_vfiprintf_r+0x198>
 800e09a:	2340      	movs	r3, #64	; 0x40
 800e09c:	eba0 000a 	sub.w	r0, r0, sl
 800e0a0:	fa03 f000 	lsl.w	r0, r3, r0
 800e0a4:	9b04      	ldr	r3, [sp, #16]
 800e0a6:	3401      	adds	r4, #1
 800e0a8:	4303      	orrs	r3, r0
 800e0aa:	9304      	str	r3, [sp, #16]
 800e0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0b0:	2206      	movs	r2, #6
 800e0b2:	482d      	ldr	r0, [pc, #180]	; (800e168 <_vfiprintf_r+0x254>)
 800e0b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e0b8:	f000 fce6 	bl	800ea88 <memchr>
 800e0bc:	2800      	cmp	r0, #0
 800e0be:	d03f      	beq.n	800e140 <_vfiprintf_r+0x22c>
 800e0c0:	4b2a      	ldr	r3, [pc, #168]	; (800e16c <_vfiprintf_r+0x258>)
 800e0c2:	bb1b      	cbnz	r3, 800e10c <_vfiprintf_r+0x1f8>
 800e0c4:	9b03      	ldr	r3, [sp, #12]
 800e0c6:	3307      	adds	r3, #7
 800e0c8:	f023 0307 	bic.w	r3, r3, #7
 800e0cc:	3308      	adds	r3, #8
 800e0ce:	9303      	str	r3, [sp, #12]
 800e0d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0d2:	443b      	add	r3, r7
 800e0d4:	9309      	str	r3, [sp, #36]	; 0x24
 800e0d6:	e767      	b.n	800dfa8 <_vfiprintf_r+0x94>
 800e0d8:	460c      	mov	r4, r1
 800e0da:	2001      	movs	r0, #1
 800e0dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0e0:	e7a5      	b.n	800e02e <_vfiprintf_r+0x11a>
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	f04f 0c0a 	mov.w	ip, #10
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	3401      	adds	r4, #1
 800e0ec:	9305      	str	r3, [sp, #20]
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0f4:	3a30      	subs	r2, #48	; 0x30
 800e0f6:	2a09      	cmp	r2, #9
 800e0f8:	d903      	bls.n	800e102 <_vfiprintf_r+0x1ee>
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d0c5      	beq.n	800e08a <_vfiprintf_r+0x176>
 800e0fe:	9105      	str	r1, [sp, #20]
 800e100:	e7c3      	b.n	800e08a <_vfiprintf_r+0x176>
 800e102:	4604      	mov	r4, r0
 800e104:	2301      	movs	r3, #1
 800e106:	fb0c 2101 	mla	r1, ip, r1, r2
 800e10a:	e7f0      	b.n	800e0ee <_vfiprintf_r+0x1da>
 800e10c:	ab03      	add	r3, sp, #12
 800e10e:	9300      	str	r3, [sp, #0]
 800e110:	462a      	mov	r2, r5
 800e112:	4630      	mov	r0, r6
 800e114:	4b16      	ldr	r3, [pc, #88]	; (800e170 <_vfiprintf_r+0x25c>)
 800e116:	a904      	add	r1, sp, #16
 800e118:	f3af 8000 	nop.w
 800e11c:	4607      	mov	r7, r0
 800e11e:	1c78      	adds	r0, r7, #1
 800e120:	d1d6      	bne.n	800e0d0 <_vfiprintf_r+0x1bc>
 800e122:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e124:	07d9      	lsls	r1, r3, #31
 800e126:	d405      	bmi.n	800e134 <_vfiprintf_r+0x220>
 800e128:	89ab      	ldrh	r3, [r5, #12]
 800e12a:	059a      	lsls	r2, r3, #22
 800e12c:	d402      	bmi.n	800e134 <_vfiprintf_r+0x220>
 800e12e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e130:	f000 fc43 	bl	800e9ba <__retarget_lock_release_recursive>
 800e134:	89ab      	ldrh	r3, [r5, #12]
 800e136:	065b      	lsls	r3, r3, #25
 800e138:	f53f af12 	bmi.w	800df60 <_vfiprintf_r+0x4c>
 800e13c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e13e:	e711      	b.n	800df64 <_vfiprintf_r+0x50>
 800e140:	ab03      	add	r3, sp, #12
 800e142:	9300      	str	r3, [sp, #0]
 800e144:	462a      	mov	r2, r5
 800e146:	4630      	mov	r0, r6
 800e148:	4b09      	ldr	r3, [pc, #36]	; (800e170 <_vfiprintf_r+0x25c>)
 800e14a:	a904      	add	r1, sp, #16
 800e14c:	f000 f882 	bl	800e254 <_printf_i>
 800e150:	e7e4      	b.n	800e11c <_vfiprintf_r+0x208>
 800e152:	bf00      	nop
 800e154:	0800ef34 	.word	0x0800ef34
 800e158:	0800ef54 	.word	0x0800ef54
 800e15c:	0800ef14 	.word	0x0800ef14
 800e160:	0800eee1 	.word	0x0800eee1
 800e164:	0800eee7 	.word	0x0800eee7
 800e168:	0800eeeb 	.word	0x0800eeeb
 800e16c:	00000000 	.word	0x00000000
 800e170:	0800deef 	.word	0x0800deef

0800e174 <_printf_common>:
 800e174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e178:	4616      	mov	r6, r2
 800e17a:	4699      	mov	r9, r3
 800e17c:	688a      	ldr	r2, [r1, #8]
 800e17e:	690b      	ldr	r3, [r1, #16]
 800e180:	4607      	mov	r7, r0
 800e182:	4293      	cmp	r3, r2
 800e184:	bfb8      	it	lt
 800e186:	4613      	movlt	r3, r2
 800e188:	6033      	str	r3, [r6, #0]
 800e18a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e18e:	460c      	mov	r4, r1
 800e190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e194:	b10a      	cbz	r2, 800e19a <_printf_common+0x26>
 800e196:	3301      	adds	r3, #1
 800e198:	6033      	str	r3, [r6, #0]
 800e19a:	6823      	ldr	r3, [r4, #0]
 800e19c:	0699      	lsls	r1, r3, #26
 800e19e:	bf42      	ittt	mi
 800e1a0:	6833      	ldrmi	r3, [r6, #0]
 800e1a2:	3302      	addmi	r3, #2
 800e1a4:	6033      	strmi	r3, [r6, #0]
 800e1a6:	6825      	ldr	r5, [r4, #0]
 800e1a8:	f015 0506 	ands.w	r5, r5, #6
 800e1ac:	d106      	bne.n	800e1bc <_printf_common+0x48>
 800e1ae:	f104 0a19 	add.w	sl, r4, #25
 800e1b2:	68e3      	ldr	r3, [r4, #12]
 800e1b4:	6832      	ldr	r2, [r6, #0]
 800e1b6:	1a9b      	subs	r3, r3, r2
 800e1b8:	42ab      	cmp	r3, r5
 800e1ba:	dc28      	bgt.n	800e20e <_printf_common+0x9a>
 800e1bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e1c0:	1e13      	subs	r3, r2, #0
 800e1c2:	6822      	ldr	r2, [r4, #0]
 800e1c4:	bf18      	it	ne
 800e1c6:	2301      	movne	r3, #1
 800e1c8:	0692      	lsls	r2, r2, #26
 800e1ca:	d42d      	bmi.n	800e228 <_printf_common+0xb4>
 800e1cc:	4649      	mov	r1, r9
 800e1ce:	4638      	mov	r0, r7
 800e1d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e1d4:	47c0      	blx	r8
 800e1d6:	3001      	adds	r0, #1
 800e1d8:	d020      	beq.n	800e21c <_printf_common+0xa8>
 800e1da:	6823      	ldr	r3, [r4, #0]
 800e1dc:	68e5      	ldr	r5, [r4, #12]
 800e1de:	f003 0306 	and.w	r3, r3, #6
 800e1e2:	2b04      	cmp	r3, #4
 800e1e4:	bf18      	it	ne
 800e1e6:	2500      	movne	r5, #0
 800e1e8:	6832      	ldr	r2, [r6, #0]
 800e1ea:	f04f 0600 	mov.w	r6, #0
 800e1ee:	68a3      	ldr	r3, [r4, #8]
 800e1f0:	bf08      	it	eq
 800e1f2:	1aad      	subeq	r5, r5, r2
 800e1f4:	6922      	ldr	r2, [r4, #16]
 800e1f6:	bf08      	it	eq
 800e1f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e1fc:	4293      	cmp	r3, r2
 800e1fe:	bfc4      	itt	gt
 800e200:	1a9b      	subgt	r3, r3, r2
 800e202:	18ed      	addgt	r5, r5, r3
 800e204:	341a      	adds	r4, #26
 800e206:	42b5      	cmp	r5, r6
 800e208:	d11a      	bne.n	800e240 <_printf_common+0xcc>
 800e20a:	2000      	movs	r0, #0
 800e20c:	e008      	b.n	800e220 <_printf_common+0xac>
 800e20e:	2301      	movs	r3, #1
 800e210:	4652      	mov	r2, sl
 800e212:	4649      	mov	r1, r9
 800e214:	4638      	mov	r0, r7
 800e216:	47c0      	blx	r8
 800e218:	3001      	adds	r0, #1
 800e21a:	d103      	bne.n	800e224 <_printf_common+0xb0>
 800e21c:	f04f 30ff 	mov.w	r0, #4294967295
 800e220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e224:	3501      	adds	r5, #1
 800e226:	e7c4      	b.n	800e1b2 <_printf_common+0x3e>
 800e228:	2030      	movs	r0, #48	; 0x30
 800e22a:	18e1      	adds	r1, r4, r3
 800e22c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e230:	1c5a      	adds	r2, r3, #1
 800e232:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e236:	4422      	add	r2, r4
 800e238:	3302      	adds	r3, #2
 800e23a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e23e:	e7c5      	b.n	800e1cc <_printf_common+0x58>
 800e240:	2301      	movs	r3, #1
 800e242:	4622      	mov	r2, r4
 800e244:	4649      	mov	r1, r9
 800e246:	4638      	mov	r0, r7
 800e248:	47c0      	blx	r8
 800e24a:	3001      	adds	r0, #1
 800e24c:	d0e6      	beq.n	800e21c <_printf_common+0xa8>
 800e24e:	3601      	adds	r6, #1
 800e250:	e7d9      	b.n	800e206 <_printf_common+0x92>
	...

0800e254 <_printf_i>:
 800e254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e258:	7e0f      	ldrb	r7, [r1, #24]
 800e25a:	4691      	mov	r9, r2
 800e25c:	2f78      	cmp	r7, #120	; 0x78
 800e25e:	4680      	mov	r8, r0
 800e260:	460c      	mov	r4, r1
 800e262:	469a      	mov	sl, r3
 800e264:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e266:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e26a:	d807      	bhi.n	800e27c <_printf_i+0x28>
 800e26c:	2f62      	cmp	r7, #98	; 0x62
 800e26e:	d80a      	bhi.n	800e286 <_printf_i+0x32>
 800e270:	2f00      	cmp	r7, #0
 800e272:	f000 80d9 	beq.w	800e428 <_printf_i+0x1d4>
 800e276:	2f58      	cmp	r7, #88	; 0x58
 800e278:	f000 80a4 	beq.w	800e3c4 <_printf_i+0x170>
 800e27c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e280:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e284:	e03a      	b.n	800e2fc <_printf_i+0xa8>
 800e286:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e28a:	2b15      	cmp	r3, #21
 800e28c:	d8f6      	bhi.n	800e27c <_printf_i+0x28>
 800e28e:	a101      	add	r1, pc, #4	; (adr r1, 800e294 <_printf_i+0x40>)
 800e290:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e294:	0800e2ed 	.word	0x0800e2ed
 800e298:	0800e301 	.word	0x0800e301
 800e29c:	0800e27d 	.word	0x0800e27d
 800e2a0:	0800e27d 	.word	0x0800e27d
 800e2a4:	0800e27d 	.word	0x0800e27d
 800e2a8:	0800e27d 	.word	0x0800e27d
 800e2ac:	0800e301 	.word	0x0800e301
 800e2b0:	0800e27d 	.word	0x0800e27d
 800e2b4:	0800e27d 	.word	0x0800e27d
 800e2b8:	0800e27d 	.word	0x0800e27d
 800e2bc:	0800e27d 	.word	0x0800e27d
 800e2c0:	0800e40f 	.word	0x0800e40f
 800e2c4:	0800e331 	.word	0x0800e331
 800e2c8:	0800e3f1 	.word	0x0800e3f1
 800e2cc:	0800e27d 	.word	0x0800e27d
 800e2d0:	0800e27d 	.word	0x0800e27d
 800e2d4:	0800e431 	.word	0x0800e431
 800e2d8:	0800e27d 	.word	0x0800e27d
 800e2dc:	0800e331 	.word	0x0800e331
 800e2e0:	0800e27d 	.word	0x0800e27d
 800e2e4:	0800e27d 	.word	0x0800e27d
 800e2e8:	0800e3f9 	.word	0x0800e3f9
 800e2ec:	682b      	ldr	r3, [r5, #0]
 800e2ee:	1d1a      	adds	r2, r3, #4
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	602a      	str	r2, [r5, #0]
 800e2f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e2f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	e0a4      	b.n	800e44a <_printf_i+0x1f6>
 800e300:	6820      	ldr	r0, [r4, #0]
 800e302:	6829      	ldr	r1, [r5, #0]
 800e304:	0606      	lsls	r6, r0, #24
 800e306:	f101 0304 	add.w	r3, r1, #4
 800e30a:	d50a      	bpl.n	800e322 <_printf_i+0xce>
 800e30c:	680e      	ldr	r6, [r1, #0]
 800e30e:	602b      	str	r3, [r5, #0]
 800e310:	2e00      	cmp	r6, #0
 800e312:	da03      	bge.n	800e31c <_printf_i+0xc8>
 800e314:	232d      	movs	r3, #45	; 0x2d
 800e316:	4276      	negs	r6, r6
 800e318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e31c:	230a      	movs	r3, #10
 800e31e:	485e      	ldr	r0, [pc, #376]	; (800e498 <_printf_i+0x244>)
 800e320:	e019      	b.n	800e356 <_printf_i+0x102>
 800e322:	680e      	ldr	r6, [r1, #0]
 800e324:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e328:	602b      	str	r3, [r5, #0]
 800e32a:	bf18      	it	ne
 800e32c:	b236      	sxthne	r6, r6
 800e32e:	e7ef      	b.n	800e310 <_printf_i+0xbc>
 800e330:	682b      	ldr	r3, [r5, #0]
 800e332:	6820      	ldr	r0, [r4, #0]
 800e334:	1d19      	adds	r1, r3, #4
 800e336:	6029      	str	r1, [r5, #0]
 800e338:	0601      	lsls	r1, r0, #24
 800e33a:	d501      	bpl.n	800e340 <_printf_i+0xec>
 800e33c:	681e      	ldr	r6, [r3, #0]
 800e33e:	e002      	b.n	800e346 <_printf_i+0xf2>
 800e340:	0646      	lsls	r6, r0, #25
 800e342:	d5fb      	bpl.n	800e33c <_printf_i+0xe8>
 800e344:	881e      	ldrh	r6, [r3, #0]
 800e346:	2f6f      	cmp	r7, #111	; 0x6f
 800e348:	bf0c      	ite	eq
 800e34a:	2308      	moveq	r3, #8
 800e34c:	230a      	movne	r3, #10
 800e34e:	4852      	ldr	r0, [pc, #328]	; (800e498 <_printf_i+0x244>)
 800e350:	2100      	movs	r1, #0
 800e352:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e356:	6865      	ldr	r5, [r4, #4]
 800e358:	2d00      	cmp	r5, #0
 800e35a:	bfa8      	it	ge
 800e35c:	6821      	ldrge	r1, [r4, #0]
 800e35e:	60a5      	str	r5, [r4, #8]
 800e360:	bfa4      	itt	ge
 800e362:	f021 0104 	bicge.w	r1, r1, #4
 800e366:	6021      	strge	r1, [r4, #0]
 800e368:	b90e      	cbnz	r6, 800e36e <_printf_i+0x11a>
 800e36a:	2d00      	cmp	r5, #0
 800e36c:	d04d      	beq.n	800e40a <_printf_i+0x1b6>
 800e36e:	4615      	mov	r5, r2
 800e370:	fbb6 f1f3 	udiv	r1, r6, r3
 800e374:	fb03 6711 	mls	r7, r3, r1, r6
 800e378:	5dc7      	ldrb	r7, [r0, r7]
 800e37a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e37e:	4637      	mov	r7, r6
 800e380:	42bb      	cmp	r3, r7
 800e382:	460e      	mov	r6, r1
 800e384:	d9f4      	bls.n	800e370 <_printf_i+0x11c>
 800e386:	2b08      	cmp	r3, #8
 800e388:	d10b      	bne.n	800e3a2 <_printf_i+0x14e>
 800e38a:	6823      	ldr	r3, [r4, #0]
 800e38c:	07de      	lsls	r6, r3, #31
 800e38e:	d508      	bpl.n	800e3a2 <_printf_i+0x14e>
 800e390:	6923      	ldr	r3, [r4, #16]
 800e392:	6861      	ldr	r1, [r4, #4]
 800e394:	4299      	cmp	r1, r3
 800e396:	bfde      	ittt	le
 800e398:	2330      	movle	r3, #48	; 0x30
 800e39a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e39e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e3a2:	1b52      	subs	r2, r2, r5
 800e3a4:	6122      	str	r2, [r4, #16]
 800e3a6:	464b      	mov	r3, r9
 800e3a8:	4621      	mov	r1, r4
 800e3aa:	4640      	mov	r0, r8
 800e3ac:	f8cd a000 	str.w	sl, [sp]
 800e3b0:	aa03      	add	r2, sp, #12
 800e3b2:	f7ff fedf 	bl	800e174 <_printf_common>
 800e3b6:	3001      	adds	r0, #1
 800e3b8:	d14c      	bne.n	800e454 <_printf_i+0x200>
 800e3ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e3be:	b004      	add	sp, #16
 800e3c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3c4:	4834      	ldr	r0, [pc, #208]	; (800e498 <_printf_i+0x244>)
 800e3c6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e3ca:	6829      	ldr	r1, [r5, #0]
 800e3cc:	6823      	ldr	r3, [r4, #0]
 800e3ce:	f851 6b04 	ldr.w	r6, [r1], #4
 800e3d2:	6029      	str	r1, [r5, #0]
 800e3d4:	061d      	lsls	r5, r3, #24
 800e3d6:	d514      	bpl.n	800e402 <_printf_i+0x1ae>
 800e3d8:	07df      	lsls	r7, r3, #31
 800e3da:	bf44      	itt	mi
 800e3dc:	f043 0320 	orrmi.w	r3, r3, #32
 800e3e0:	6023      	strmi	r3, [r4, #0]
 800e3e2:	b91e      	cbnz	r6, 800e3ec <_printf_i+0x198>
 800e3e4:	6823      	ldr	r3, [r4, #0]
 800e3e6:	f023 0320 	bic.w	r3, r3, #32
 800e3ea:	6023      	str	r3, [r4, #0]
 800e3ec:	2310      	movs	r3, #16
 800e3ee:	e7af      	b.n	800e350 <_printf_i+0xfc>
 800e3f0:	6823      	ldr	r3, [r4, #0]
 800e3f2:	f043 0320 	orr.w	r3, r3, #32
 800e3f6:	6023      	str	r3, [r4, #0]
 800e3f8:	2378      	movs	r3, #120	; 0x78
 800e3fa:	4828      	ldr	r0, [pc, #160]	; (800e49c <_printf_i+0x248>)
 800e3fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e400:	e7e3      	b.n	800e3ca <_printf_i+0x176>
 800e402:	0659      	lsls	r1, r3, #25
 800e404:	bf48      	it	mi
 800e406:	b2b6      	uxthmi	r6, r6
 800e408:	e7e6      	b.n	800e3d8 <_printf_i+0x184>
 800e40a:	4615      	mov	r5, r2
 800e40c:	e7bb      	b.n	800e386 <_printf_i+0x132>
 800e40e:	682b      	ldr	r3, [r5, #0]
 800e410:	6826      	ldr	r6, [r4, #0]
 800e412:	1d18      	adds	r0, r3, #4
 800e414:	6961      	ldr	r1, [r4, #20]
 800e416:	6028      	str	r0, [r5, #0]
 800e418:	0635      	lsls	r5, r6, #24
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	d501      	bpl.n	800e422 <_printf_i+0x1ce>
 800e41e:	6019      	str	r1, [r3, #0]
 800e420:	e002      	b.n	800e428 <_printf_i+0x1d4>
 800e422:	0670      	lsls	r0, r6, #25
 800e424:	d5fb      	bpl.n	800e41e <_printf_i+0x1ca>
 800e426:	8019      	strh	r1, [r3, #0]
 800e428:	2300      	movs	r3, #0
 800e42a:	4615      	mov	r5, r2
 800e42c:	6123      	str	r3, [r4, #16]
 800e42e:	e7ba      	b.n	800e3a6 <_printf_i+0x152>
 800e430:	682b      	ldr	r3, [r5, #0]
 800e432:	2100      	movs	r1, #0
 800e434:	1d1a      	adds	r2, r3, #4
 800e436:	602a      	str	r2, [r5, #0]
 800e438:	681d      	ldr	r5, [r3, #0]
 800e43a:	6862      	ldr	r2, [r4, #4]
 800e43c:	4628      	mov	r0, r5
 800e43e:	f000 fb23 	bl	800ea88 <memchr>
 800e442:	b108      	cbz	r0, 800e448 <_printf_i+0x1f4>
 800e444:	1b40      	subs	r0, r0, r5
 800e446:	6060      	str	r0, [r4, #4]
 800e448:	6863      	ldr	r3, [r4, #4]
 800e44a:	6123      	str	r3, [r4, #16]
 800e44c:	2300      	movs	r3, #0
 800e44e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e452:	e7a8      	b.n	800e3a6 <_printf_i+0x152>
 800e454:	462a      	mov	r2, r5
 800e456:	4649      	mov	r1, r9
 800e458:	4640      	mov	r0, r8
 800e45a:	6923      	ldr	r3, [r4, #16]
 800e45c:	47d0      	blx	sl
 800e45e:	3001      	adds	r0, #1
 800e460:	d0ab      	beq.n	800e3ba <_printf_i+0x166>
 800e462:	6823      	ldr	r3, [r4, #0]
 800e464:	079b      	lsls	r3, r3, #30
 800e466:	d413      	bmi.n	800e490 <_printf_i+0x23c>
 800e468:	68e0      	ldr	r0, [r4, #12]
 800e46a:	9b03      	ldr	r3, [sp, #12]
 800e46c:	4298      	cmp	r0, r3
 800e46e:	bfb8      	it	lt
 800e470:	4618      	movlt	r0, r3
 800e472:	e7a4      	b.n	800e3be <_printf_i+0x16a>
 800e474:	2301      	movs	r3, #1
 800e476:	4632      	mov	r2, r6
 800e478:	4649      	mov	r1, r9
 800e47a:	4640      	mov	r0, r8
 800e47c:	47d0      	blx	sl
 800e47e:	3001      	adds	r0, #1
 800e480:	d09b      	beq.n	800e3ba <_printf_i+0x166>
 800e482:	3501      	adds	r5, #1
 800e484:	68e3      	ldr	r3, [r4, #12]
 800e486:	9903      	ldr	r1, [sp, #12]
 800e488:	1a5b      	subs	r3, r3, r1
 800e48a:	42ab      	cmp	r3, r5
 800e48c:	dcf2      	bgt.n	800e474 <_printf_i+0x220>
 800e48e:	e7eb      	b.n	800e468 <_printf_i+0x214>
 800e490:	2500      	movs	r5, #0
 800e492:	f104 0619 	add.w	r6, r4, #25
 800e496:	e7f5      	b.n	800e484 <_printf_i+0x230>
 800e498:	0800eef2 	.word	0x0800eef2
 800e49c:	0800ef03 	.word	0x0800ef03

0800e4a0 <_sbrk_r>:
 800e4a0:	b538      	push	{r3, r4, r5, lr}
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	4d05      	ldr	r5, [pc, #20]	; (800e4bc <_sbrk_r+0x1c>)
 800e4a6:	4604      	mov	r4, r0
 800e4a8:	4608      	mov	r0, r1
 800e4aa:	602b      	str	r3, [r5, #0]
 800e4ac:	f7f3 fbb2 	bl	8001c14 <_sbrk>
 800e4b0:	1c43      	adds	r3, r0, #1
 800e4b2:	d102      	bne.n	800e4ba <_sbrk_r+0x1a>
 800e4b4:	682b      	ldr	r3, [r5, #0]
 800e4b6:	b103      	cbz	r3, 800e4ba <_sbrk_r+0x1a>
 800e4b8:	6023      	str	r3, [r4, #0]
 800e4ba:	bd38      	pop	{r3, r4, r5, pc}
 800e4bc:	20002168 	.word	0x20002168

0800e4c0 <__swbuf_r>:
 800e4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4c2:	460e      	mov	r6, r1
 800e4c4:	4614      	mov	r4, r2
 800e4c6:	4605      	mov	r5, r0
 800e4c8:	b118      	cbz	r0, 800e4d2 <__swbuf_r+0x12>
 800e4ca:	6983      	ldr	r3, [r0, #24]
 800e4cc:	b90b      	cbnz	r3, 800e4d2 <__swbuf_r+0x12>
 800e4ce:	f000 f9d5 	bl	800e87c <__sinit>
 800e4d2:	4b21      	ldr	r3, [pc, #132]	; (800e558 <__swbuf_r+0x98>)
 800e4d4:	429c      	cmp	r4, r3
 800e4d6:	d12b      	bne.n	800e530 <__swbuf_r+0x70>
 800e4d8:	686c      	ldr	r4, [r5, #4]
 800e4da:	69a3      	ldr	r3, [r4, #24]
 800e4dc:	60a3      	str	r3, [r4, #8]
 800e4de:	89a3      	ldrh	r3, [r4, #12]
 800e4e0:	071a      	lsls	r2, r3, #28
 800e4e2:	d52f      	bpl.n	800e544 <__swbuf_r+0x84>
 800e4e4:	6923      	ldr	r3, [r4, #16]
 800e4e6:	b36b      	cbz	r3, 800e544 <__swbuf_r+0x84>
 800e4e8:	6923      	ldr	r3, [r4, #16]
 800e4ea:	6820      	ldr	r0, [r4, #0]
 800e4ec:	b2f6      	uxtb	r6, r6
 800e4ee:	1ac0      	subs	r0, r0, r3
 800e4f0:	6963      	ldr	r3, [r4, #20]
 800e4f2:	4637      	mov	r7, r6
 800e4f4:	4283      	cmp	r3, r0
 800e4f6:	dc04      	bgt.n	800e502 <__swbuf_r+0x42>
 800e4f8:	4621      	mov	r1, r4
 800e4fa:	4628      	mov	r0, r5
 800e4fc:	f000 f92a 	bl	800e754 <_fflush_r>
 800e500:	bb30      	cbnz	r0, 800e550 <__swbuf_r+0x90>
 800e502:	68a3      	ldr	r3, [r4, #8]
 800e504:	3001      	adds	r0, #1
 800e506:	3b01      	subs	r3, #1
 800e508:	60a3      	str	r3, [r4, #8]
 800e50a:	6823      	ldr	r3, [r4, #0]
 800e50c:	1c5a      	adds	r2, r3, #1
 800e50e:	6022      	str	r2, [r4, #0]
 800e510:	701e      	strb	r6, [r3, #0]
 800e512:	6963      	ldr	r3, [r4, #20]
 800e514:	4283      	cmp	r3, r0
 800e516:	d004      	beq.n	800e522 <__swbuf_r+0x62>
 800e518:	89a3      	ldrh	r3, [r4, #12]
 800e51a:	07db      	lsls	r3, r3, #31
 800e51c:	d506      	bpl.n	800e52c <__swbuf_r+0x6c>
 800e51e:	2e0a      	cmp	r6, #10
 800e520:	d104      	bne.n	800e52c <__swbuf_r+0x6c>
 800e522:	4621      	mov	r1, r4
 800e524:	4628      	mov	r0, r5
 800e526:	f000 f915 	bl	800e754 <_fflush_r>
 800e52a:	b988      	cbnz	r0, 800e550 <__swbuf_r+0x90>
 800e52c:	4638      	mov	r0, r7
 800e52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e530:	4b0a      	ldr	r3, [pc, #40]	; (800e55c <__swbuf_r+0x9c>)
 800e532:	429c      	cmp	r4, r3
 800e534:	d101      	bne.n	800e53a <__swbuf_r+0x7a>
 800e536:	68ac      	ldr	r4, [r5, #8]
 800e538:	e7cf      	b.n	800e4da <__swbuf_r+0x1a>
 800e53a:	4b09      	ldr	r3, [pc, #36]	; (800e560 <__swbuf_r+0xa0>)
 800e53c:	429c      	cmp	r4, r3
 800e53e:	bf08      	it	eq
 800e540:	68ec      	ldreq	r4, [r5, #12]
 800e542:	e7ca      	b.n	800e4da <__swbuf_r+0x1a>
 800e544:	4621      	mov	r1, r4
 800e546:	4628      	mov	r0, r5
 800e548:	f000 f80c 	bl	800e564 <__swsetup_r>
 800e54c:	2800      	cmp	r0, #0
 800e54e:	d0cb      	beq.n	800e4e8 <__swbuf_r+0x28>
 800e550:	f04f 37ff 	mov.w	r7, #4294967295
 800e554:	e7ea      	b.n	800e52c <__swbuf_r+0x6c>
 800e556:	bf00      	nop
 800e558:	0800ef34 	.word	0x0800ef34
 800e55c:	0800ef54 	.word	0x0800ef54
 800e560:	0800ef14 	.word	0x0800ef14

0800e564 <__swsetup_r>:
 800e564:	4b32      	ldr	r3, [pc, #200]	; (800e630 <__swsetup_r+0xcc>)
 800e566:	b570      	push	{r4, r5, r6, lr}
 800e568:	681d      	ldr	r5, [r3, #0]
 800e56a:	4606      	mov	r6, r0
 800e56c:	460c      	mov	r4, r1
 800e56e:	b125      	cbz	r5, 800e57a <__swsetup_r+0x16>
 800e570:	69ab      	ldr	r3, [r5, #24]
 800e572:	b913      	cbnz	r3, 800e57a <__swsetup_r+0x16>
 800e574:	4628      	mov	r0, r5
 800e576:	f000 f981 	bl	800e87c <__sinit>
 800e57a:	4b2e      	ldr	r3, [pc, #184]	; (800e634 <__swsetup_r+0xd0>)
 800e57c:	429c      	cmp	r4, r3
 800e57e:	d10f      	bne.n	800e5a0 <__swsetup_r+0x3c>
 800e580:	686c      	ldr	r4, [r5, #4]
 800e582:	89a3      	ldrh	r3, [r4, #12]
 800e584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e588:	0719      	lsls	r1, r3, #28
 800e58a:	d42c      	bmi.n	800e5e6 <__swsetup_r+0x82>
 800e58c:	06dd      	lsls	r5, r3, #27
 800e58e:	d411      	bmi.n	800e5b4 <__swsetup_r+0x50>
 800e590:	2309      	movs	r3, #9
 800e592:	6033      	str	r3, [r6, #0]
 800e594:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e598:	f04f 30ff 	mov.w	r0, #4294967295
 800e59c:	81a3      	strh	r3, [r4, #12]
 800e59e:	e03e      	b.n	800e61e <__swsetup_r+0xba>
 800e5a0:	4b25      	ldr	r3, [pc, #148]	; (800e638 <__swsetup_r+0xd4>)
 800e5a2:	429c      	cmp	r4, r3
 800e5a4:	d101      	bne.n	800e5aa <__swsetup_r+0x46>
 800e5a6:	68ac      	ldr	r4, [r5, #8]
 800e5a8:	e7eb      	b.n	800e582 <__swsetup_r+0x1e>
 800e5aa:	4b24      	ldr	r3, [pc, #144]	; (800e63c <__swsetup_r+0xd8>)
 800e5ac:	429c      	cmp	r4, r3
 800e5ae:	bf08      	it	eq
 800e5b0:	68ec      	ldreq	r4, [r5, #12]
 800e5b2:	e7e6      	b.n	800e582 <__swsetup_r+0x1e>
 800e5b4:	0758      	lsls	r0, r3, #29
 800e5b6:	d512      	bpl.n	800e5de <__swsetup_r+0x7a>
 800e5b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e5ba:	b141      	cbz	r1, 800e5ce <__swsetup_r+0x6a>
 800e5bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e5c0:	4299      	cmp	r1, r3
 800e5c2:	d002      	beq.n	800e5ca <__swsetup_r+0x66>
 800e5c4:	4630      	mov	r0, r6
 800e5c6:	f7ff fba1 	bl	800dd0c <_free_r>
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	6363      	str	r3, [r4, #52]	; 0x34
 800e5ce:	89a3      	ldrh	r3, [r4, #12]
 800e5d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e5d4:	81a3      	strh	r3, [r4, #12]
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	6063      	str	r3, [r4, #4]
 800e5da:	6923      	ldr	r3, [r4, #16]
 800e5dc:	6023      	str	r3, [r4, #0]
 800e5de:	89a3      	ldrh	r3, [r4, #12]
 800e5e0:	f043 0308 	orr.w	r3, r3, #8
 800e5e4:	81a3      	strh	r3, [r4, #12]
 800e5e6:	6923      	ldr	r3, [r4, #16]
 800e5e8:	b94b      	cbnz	r3, 800e5fe <__swsetup_r+0x9a>
 800e5ea:	89a3      	ldrh	r3, [r4, #12]
 800e5ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e5f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5f4:	d003      	beq.n	800e5fe <__swsetup_r+0x9a>
 800e5f6:	4621      	mov	r1, r4
 800e5f8:	4630      	mov	r0, r6
 800e5fa:	f000 fa05 	bl	800ea08 <__smakebuf_r>
 800e5fe:	89a0      	ldrh	r0, [r4, #12]
 800e600:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e604:	f010 0301 	ands.w	r3, r0, #1
 800e608:	d00a      	beq.n	800e620 <__swsetup_r+0xbc>
 800e60a:	2300      	movs	r3, #0
 800e60c:	60a3      	str	r3, [r4, #8]
 800e60e:	6963      	ldr	r3, [r4, #20]
 800e610:	425b      	negs	r3, r3
 800e612:	61a3      	str	r3, [r4, #24]
 800e614:	6923      	ldr	r3, [r4, #16]
 800e616:	b943      	cbnz	r3, 800e62a <__swsetup_r+0xc6>
 800e618:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e61c:	d1ba      	bne.n	800e594 <__swsetup_r+0x30>
 800e61e:	bd70      	pop	{r4, r5, r6, pc}
 800e620:	0781      	lsls	r1, r0, #30
 800e622:	bf58      	it	pl
 800e624:	6963      	ldrpl	r3, [r4, #20]
 800e626:	60a3      	str	r3, [r4, #8]
 800e628:	e7f4      	b.n	800e614 <__swsetup_r+0xb0>
 800e62a:	2000      	movs	r0, #0
 800e62c:	e7f7      	b.n	800e61e <__swsetup_r+0xba>
 800e62e:	bf00      	nop
 800e630:	200001cc 	.word	0x200001cc
 800e634:	0800ef34 	.word	0x0800ef34
 800e638:	0800ef54 	.word	0x0800ef54
 800e63c:	0800ef14 	.word	0x0800ef14

0800e640 <abort>:
 800e640:	2006      	movs	r0, #6
 800e642:	b508      	push	{r3, lr}
 800e644:	f000 fa62 	bl	800eb0c <raise>
 800e648:	2001      	movs	r0, #1
 800e64a:	f7f3 fa70 	bl	8001b2e <_exit>
	...

0800e650 <__sflush_r>:
 800e650:	898a      	ldrh	r2, [r1, #12]
 800e652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e654:	4605      	mov	r5, r0
 800e656:	0710      	lsls	r0, r2, #28
 800e658:	460c      	mov	r4, r1
 800e65a:	d457      	bmi.n	800e70c <__sflush_r+0xbc>
 800e65c:	684b      	ldr	r3, [r1, #4]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	dc04      	bgt.n	800e66c <__sflush_r+0x1c>
 800e662:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e664:	2b00      	cmp	r3, #0
 800e666:	dc01      	bgt.n	800e66c <__sflush_r+0x1c>
 800e668:	2000      	movs	r0, #0
 800e66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e66c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e66e:	2e00      	cmp	r6, #0
 800e670:	d0fa      	beq.n	800e668 <__sflush_r+0x18>
 800e672:	2300      	movs	r3, #0
 800e674:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e678:	682f      	ldr	r7, [r5, #0]
 800e67a:	602b      	str	r3, [r5, #0]
 800e67c:	d032      	beq.n	800e6e4 <__sflush_r+0x94>
 800e67e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e680:	89a3      	ldrh	r3, [r4, #12]
 800e682:	075a      	lsls	r2, r3, #29
 800e684:	d505      	bpl.n	800e692 <__sflush_r+0x42>
 800e686:	6863      	ldr	r3, [r4, #4]
 800e688:	1ac0      	subs	r0, r0, r3
 800e68a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e68c:	b10b      	cbz	r3, 800e692 <__sflush_r+0x42>
 800e68e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e690:	1ac0      	subs	r0, r0, r3
 800e692:	2300      	movs	r3, #0
 800e694:	4602      	mov	r2, r0
 800e696:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e698:	4628      	mov	r0, r5
 800e69a:	6a21      	ldr	r1, [r4, #32]
 800e69c:	47b0      	blx	r6
 800e69e:	1c43      	adds	r3, r0, #1
 800e6a0:	89a3      	ldrh	r3, [r4, #12]
 800e6a2:	d106      	bne.n	800e6b2 <__sflush_r+0x62>
 800e6a4:	6829      	ldr	r1, [r5, #0]
 800e6a6:	291d      	cmp	r1, #29
 800e6a8:	d82c      	bhi.n	800e704 <__sflush_r+0xb4>
 800e6aa:	4a29      	ldr	r2, [pc, #164]	; (800e750 <__sflush_r+0x100>)
 800e6ac:	40ca      	lsrs	r2, r1
 800e6ae:	07d6      	lsls	r6, r2, #31
 800e6b0:	d528      	bpl.n	800e704 <__sflush_r+0xb4>
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	6062      	str	r2, [r4, #4]
 800e6b6:	6922      	ldr	r2, [r4, #16]
 800e6b8:	04d9      	lsls	r1, r3, #19
 800e6ba:	6022      	str	r2, [r4, #0]
 800e6bc:	d504      	bpl.n	800e6c8 <__sflush_r+0x78>
 800e6be:	1c42      	adds	r2, r0, #1
 800e6c0:	d101      	bne.n	800e6c6 <__sflush_r+0x76>
 800e6c2:	682b      	ldr	r3, [r5, #0]
 800e6c4:	b903      	cbnz	r3, 800e6c8 <__sflush_r+0x78>
 800e6c6:	6560      	str	r0, [r4, #84]	; 0x54
 800e6c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6ca:	602f      	str	r7, [r5, #0]
 800e6cc:	2900      	cmp	r1, #0
 800e6ce:	d0cb      	beq.n	800e668 <__sflush_r+0x18>
 800e6d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6d4:	4299      	cmp	r1, r3
 800e6d6:	d002      	beq.n	800e6de <__sflush_r+0x8e>
 800e6d8:	4628      	mov	r0, r5
 800e6da:	f7ff fb17 	bl	800dd0c <_free_r>
 800e6de:	2000      	movs	r0, #0
 800e6e0:	6360      	str	r0, [r4, #52]	; 0x34
 800e6e2:	e7c2      	b.n	800e66a <__sflush_r+0x1a>
 800e6e4:	6a21      	ldr	r1, [r4, #32]
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	4628      	mov	r0, r5
 800e6ea:	47b0      	blx	r6
 800e6ec:	1c41      	adds	r1, r0, #1
 800e6ee:	d1c7      	bne.n	800e680 <__sflush_r+0x30>
 800e6f0:	682b      	ldr	r3, [r5, #0]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d0c4      	beq.n	800e680 <__sflush_r+0x30>
 800e6f6:	2b1d      	cmp	r3, #29
 800e6f8:	d001      	beq.n	800e6fe <__sflush_r+0xae>
 800e6fa:	2b16      	cmp	r3, #22
 800e6fc:	d101      	bne.n	800e702 <__sflush_r+0xb2>
 800e6fe:	602f      	str	r7, [r5, #0]
 800e700:	e7b2      	b.n	800e668 <__sflush_r+0x18>
 800e702:	89a3      	ldrh	r3, [r4, #12]
 800e704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e708:	81a3      	strh	r3, [r4, #12]
 800e70a:	e7ae      	b.n	800e66a <__sflush_r+0x1a>
 800e70c:	690f      	ldr	r7, [r1, #16]
 800e70e:	2f00      	cmp	r7, #0
 800e710:	d0aa      	beq.n	800e668 <__sflush_r+0x18>
 800e712:	0793      	lsls	r3, r2, #30
 800e714:	bf18      	it	ne
 800e716:	2300      	movne	r3, #0
 800e718:	680e      	ldr	r6, [r1, #0]
 800e71a:	bf08      	it	eq
 800e71c:	694b      	ldreq	r3, [r1, #20]
 800e71e:	1bf6      	subs	r6, r6, r7
 800e720:	600f      	str	r7, [r1, #0]
 800e722:	608b      	str	r3, [r1, #8]
 800e724:	2e00      	cmp	r6, #0
 800e726:	dd9f      	ble.n	800e668 <__sflush_r+0x18>
 800e728:	4633      	mov	r3, r6
 800e72a:	463a      	mov	r2, r7
 800e72c:	4628      	mov	r0, r5
 800e72e:	6a21      	ldr	r1, [r4, #32]
 800e730:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800e734:	47e0      	blx	ip
 800e736:	2800      	cmp	r0, #0
 800e738:	dc06      	bgt.n	800e748 <__sflush_r+0xf8>
 800e73a:	89a3      	ldrh	r3, [r4, #12]
 800e73c:	f04f 30ff 	mov.w	r0, #4294967295
 800e740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e744:	81a3      	strh	r3, [r4, #12]
 800e746:	e790      	b.n	800e66a <__sflush_r+0x1a>
 800e748:	4407      	add	r7, r0
 800e74a:	1a36      	subs	r6, r6, r0
 800e74c:	e7ea      	b.n	800e724 <__sflush_r+0xd4>
 800e74e:	bf00      	nop
 800e750:	20400001 	.word	0x20400001

0800e754 <_fflush_r>:
 800e754:	b538      	push	{r3, r4, r5, lr}
 800e756:	690b      	ldr	r3, [r1, #16]
 800e758:	4605      	mov	r5, r0
 800e75a:	460c      	mov	r4, r1
 800e75c:	b913      	cbnz	r3, 800e764 <_fflush_r+0x10>
 800e75e:	2500      	movs	r5, #0
 800e760:	4628      	mov	r0, r5
 800e762:	bd38      	pop	{r3, r4, r5, pc}
 800e764:	b118      	cbz	r0, 800e76e <_fflush_r+0x1a>
 800e766:	6983      	ldr	r3, [r0, #24]
 800e768:	b90b      	cbnz	r3, 800e76e <_fflush_r+0x1a>
 800e76a:	f000 f887 	bl	800e87c <__sinit>
 800e76e:	4b14      	ldr	r3, [pc, #80]	; (800e7c0 <_fflush_r+0x6c>)
 800e770:	429c      	cmp	r4, r3
 800e772:	d11b      	bne.n	800e7ac <_fflush_r+0x58>
 800e774:	686c      	ldr	r4, [r5, #4]
 800e776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d0ef      	beq.n	800e75e <_fflush_r+0xa>
 800e77e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e780:	07d0      	lsls	r0, r2, #31
 800e782:	d404      	bmi.n	800e78e <_fflush_r+0x3a>
 800e784:	0599      	lsls	r1, r3, #22
 800e786:	d402      	bmi.n	800e78e <_fflush_r+0x3a>
 800e788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e78a:	f000 f915 	bl	800e9b8 <__retarget_lock_acquire_recursive>
 800e78e:	4628      	mov	r0, r5
 800e790:	4621      	mov	r1, r4
 800e792:	f7ff ff5d 	bl	800e650 <__sflush_r>
 800e796:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e798:	4605      	mov	r5, r0
 800e79a:	07da      	lsls	r2, r3, #31
 800e79c:	d4e0      	bmi.n	800e760 <_fflush_r+0xc>
 800e79e:	89a3      	ldrh	r3, [r4, #12]
 800e7a0:	059b      	lsls	r3, r3, #22
 800e7a2:	d4dd      	bmi.n	800e760 <_fflush_r+0xc>
 800e7a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7a6:	f000 f908 	bl	800e9ba <__retarget_lock_release_recursive>
 800e7aa:	e7d9      	b.n	800e760 <_fflush_r+0xc>
 800e7ac:	4b05      	ldr	r3, [pc, #20]	; (800e7c4 <_fflush_r+0x70>)
 800e7ae:	429c      	cmp	r4, r3
 800e7b0:	d101      	bne.n	800e7b6 <_fflush_r+0x62>
 800e7b2:	68ac      	ldr	r4, [r5, #8]
 800e7b4:	e7df      	b.n	800e776 <_fflush_r+0x22>
 800e7b6:	4b04      	ldr	r3, [pc, #16]	; (800e7c8 <_fflush_r+0x74>)
 800e7b8:	429c      	cmp	r4, r3
 800e7ba:	bf08      	it	eq
 800e7bc:	68ec      	ldreq	r4, [r5, #12]
 800e7be:	e7da      	b.n	800e776 <_fflush_r+0x22>
 800e7c0:	0800ef34 	.word	0x0800ef34
 800e7c4:	0800ef54 	.word	0x0800ef54
 800e7c8:	0800ef14 	.word	0x0800ef14

0800e7cc <std>:
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	b510      	push	{r4, lr}
 800e7d0:	4604      	mov	r4, r0
 800e7d2:	e9c0 3300 	strd	r3, r3, [r0]
 800e7d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e7da:	6083      	str	r3, [r0, #8]
 800e7dc:	8181      	strh	r1, [r0, #12]
 800e7de:	6643      	str	r3, [r0, #100]	; 0x64
 800e7e0:	81c2      	strh	r2, [r0, #14]
 800e7e2:	6183      	str	r3, [r0, #24]
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	2208      	movs	r2, #8
 800e7e8:	305c      	adds	r0, #92	; 0x5c
 800e7ea:	f7ff f96d 	bl	800dac8 <memset>
 800e7ee:	4b05      	ldr	r3, [pc, #20]	; (800e804 <std+0x38>)
 800e7f0:	6224      	str	r4, [r4, #32]
 800e7f2:	6263      	str	r3, [r4, #36]	; 0x24
 800e7f4:	4b04      	ldr	r3, [pc, #16]	; (800e808 <std+0x3c>)
 800e7f6:	62a3      	str	r3, [r4, #40]	; 0x28
 800e7f8:	4b04      	ldr	r3, [pc, #16]	; (800e80c <std+0x40>)
 800e7fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e7fc:	4b04      	ldr	r3, [pc, #16]	; (800e810 <std+0x44>)
 800e7fe:	6323      	str	r3, [r4, #48]	; 0x30
 800e800:	bd10      	pop	{r4, pc}
 800e802:	bf00      	nop
 800e804:	0800eb45 	.word	0x0800eb45
 800e808:	0800eb67 	.word	0x0800eb67
 800e80c:	0800eb9f 	.word	0x0800eb9f
 800e810:	0800ebc3 	.word	0x0800ebc3

0800e814 <_cleanup_r>:
 800e814:	4901      	ldr	r1, [pc, #4]	; (800e81c <_cleanup_r+0x8>)
 800e816:	f000 b8af 	b.w	800e978 <_fwalk_reent>
 800e81a:	bf00      	nop
 800e81c:	0800e755 	.word	0x0800e755

0800e820 <__sfmoreglue>:
 800e820:	2268      	movs	r2, #104	; 0x68
 800e822:	b570      	push	{r4, r5, r6, lr}
 800e824:	1e4d      	subs	r5, r1, #1
 800e826:	4355      	muls	r5, r2
 800e828:	460e      	mov	r6, r1
 800e82a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e82e:	f7ff fad5 	bl	800dddc <_malloc_r>
 800e832:	4604      	mov	r4, r0
 800e834:	b140      	cbz	r0, 800e848 <__sfmoreglue+0x28>
 800e836:	2100      	movs	r1, #0
 800e838:	e9c0 1600 	strd	r1, r6, [r0]
 800e83c:	300c      	adds	r0, #12
 800e83e:	60a0      	str	r0, [r4, #8]
 800e840:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e844:	f7ff f940 	bl	800dac8 <memset>
 800e848:	4620      	mov	r0, r4
 800e84a:	bd70      	pop	{r4, r5, r6, pc}

0800e84c <__sfp_lock_acquire>:
 800e84c:	4801      	ldr	r0, [pc, #4]	; (800e854 <__sfp_lock_acquire+0x8>)
 800e84e:	f000 b8b3 	b.w	800e9b8 <__retarget_lock_acquire_recursive>
 800e852:	bf00      	nop
 800e854:	20002165 	.word	0x20002165

0800e858 <__sfp_lock_release>:
 800e858:	4801      	ldr	r0, [pc, #4]	; (800e860 <__sfp_lock_release+0x8>)
 800e85a:	f000 b8ae 	b.w	800e9ba <__retarget_lock_release_recursive>
 800e85e:	bf00      	nop
 800e860:	20002165 	.word	0x20002165

0800e864 <__sinit_lock_acquire>:
 800e864:	4801      	ldr	r0, [pc, #4]	; (800e86c <__sinit_lock_acquire+0x8>)
 800e866:	f000 b8a7 	b.w	800e9b8 <__retarget_lock_acquire_recursive>
 800e86a:	bf00      	nop
 800e86c:	20002166 	.word	0x20002166

0800e870 <__sinit_lock_release>:
 800e870:	4801      	ldr	r0, [pc, #4]	; (800e878 <__sinit_lock_release+0x8>)
 800e872:	f000 b8a2 	b.w	800e9ba <__retarget_lock_release_recursive>
 800e876:	bf00      	nop
 800e878:	20002166 	.word	0x20002166

0800e87c <__sinit>:
 800e87c:	b510      	push	{r4, lr}
 800e87e:	4604      	mov	r4, r0
 800e880:	f7ff fff0 	bl	800e864 <__sinit_lock_acquire>
 800e884:	69a3      	ldr	r3, [r4, #24]
 800e886:	b11b      	cbz	r3, 800e890 <__sinit+0x14>
 800e888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e88c:	f7ff bff0 	b.w	800e870 <__sinit_lock_release>
 800e890:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e894:	6523      	str	r3, [r4, #80]	; 0x50
 800e896:	4b13      	ldr	r3, [pc, #76]	; (800e8e4 <__sinit+0x68>)
 800e898:	4a13      	ldr	r2, [pc, #76]	; (800e8e8 <__sinit+0x6c>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e89e:	42a3      	cmp	r3, r4
 800e8a0:	bf08      	it	eq
 800e8a2:	2301      	moveq	r3, #1
 800e8a4:	4620      	mov	r0, r4
 800e8a6:	bf08      	it	eq
 800e8a8:	61a3      	streq	r3, [r4, #24]
 800e8aa:	f000 f81f 	bl	800e8ec <__sfp>
 800e8ae:	6060      	str	r0, [r4, #4]
 800e8b0:	4620      	mov	r0, r4
 800e8b2:	f000 f81b 	bl	800e8ec <__sfp>
 800e8b6:	60a0      	str	r0, [r4, #8]
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	f000 f817 	bl	800e8ec <__sfp>
 800e8be:	2200      	movs	r2, #0
 800e8c0:	2104      	movs	r1, #4
 800e8c2:	60e0      	str	r0, [r4, #12]
 800e8c4:	6860      	ldr	r0, [r4, #4]
 800e8c6:	f7ff ff81 	bl	800e7cc <std>
 800e8ca:	2201      	movs	r2, #1
 800e8cc:	2109      	movs	r1, #9
 800e8ce:	68a0      	ldr	r0, [r4, #8]
 800e8d0:	f7ff ff7c 	bl	800e7cc <std>
 800e8d4:	2202      	movs	r2, #2
 800e8d6:	2112      	movs	r1, #18
 800e8d8:	68e0      	ldr	r0, [r4, #12]
 800e8da:	f7ff ff77 	bl	800e7cc <std>
 800e8de:	2301      	movs	r3, #1
 800e8e0:	61a3      	str	r3, [r4, #24]
 800e8e2:	e7d1      	b.n	800e888 <__sinit+0xc>
 800e8e4:	0800ed2c 	.word	0x0800ed2c
 800e8e8:	0800e815 	.word	0x0800e815

0800e8ec <__sfp>:
 800e8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ee:	4607      	mov	r7, r0
 800e8f0:	f7ff ffac 	bl	800e84c <__sfp_lock_acquire>
 800e8f4:	4b1e      	ldr	r3, [pc, #120]	; (800e970 <__sfp+0x84>)
 800e8f6:	681e      	ldr	r6, [r3, #0]
 800e8f8:	69b3      	ldr	r3, [r6, #24]
 800e8fa:	b913      	cbnz	r3, 800e902 <__sfp+0x16>
 800e8fc:	4630      	mov	r0, r6
 800e8fe:	f7ff ffbd 	bl	800e87c <__sinit>
 800e902:	3648      	adds	r6, #72	; 0x48
 800e904:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e908:	3b01      	subs	r3, #1
 800e90a:	d503      	bpl.n	800e914 <__sfp+0x28>
 800e90c:	6833      	ldr	r3, [r6, #0]
 800e90e:	b30b      	cbz	r3, 800e954 <__sfp+0x68>
 800e910:	6836      	ldr	r6, [r6, #0]
 800e912:	e7f7      	b.n	800e904 <__sfp+0x18>
 800e914:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e918:	b9d5      	cbnz	r5, 800e950 <__sfp+0x64>
 800e91a:	4b16      	ldr	r3, [pc, #88]	; (800e974 <__sfp+0x88>)
 800e91c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e920:	60e3      	str	r3, [r4, #12]
 800e922:	6665      	str	r5, [r4, #100]	; 0x64
 800e924:	f000 f847 	bl	800e9b6 <__retarget_lock_init_recursive>
 800e928:	f7ff ff96 	bl	800e858 <__sfp_lock_release>
 800e92c:	2208      	movs	r2, #8
 800e92e:	4629      	mov	r1, r5
 800e930:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e934:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e938:	6025      	str	r5, [r4, #0]
 800e93a:	61a5      	str	r5, [r4, #24]
 800e93c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e940:	f7ff f8c2 	bl	800dac8 <memset>
 800e944:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e948:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e94c:	4620      	mov	r0, r4
 800e94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e950:	3468      	adds	r4, #104	; 0x68
 800e952:	e7d9      	b.n	800e908 <__sfp+0x1c>
 800e954:	2104      	movs	r1, #4
 800e956:	4638      	mov	r0, r7
 800e958:	f7ff ff62 	bl	800e820 <__sfmoreglue>
 800e95c:	4604      	mov	r4, r0
 800e95e:	6030      	str	r0, [r6, #0]
 800e960:	2800      	cmp	r0, #0
 800e962:	d1d5      	bne.n	800e910 <__sfp+0x24>
 800e964:	f7ff ff78 	bl	800e858 <__sfp_lock_release>
 800e968:	230c      	movs	r3, #12
 800e96a:	603b      	str	r3, [r7, #0]
 800e96c:	e7ee      	b.n	800e94c <__sfp+0x60>
 800e96e:	bf00      	nop
 800e970:	0800ed2c 	.word	0x0800ed2c
 800e974:	ffff0001 	.word	0xffff0001

0800e978 <_fwalk_reent>:
 800e978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e97c:	4606      	mov	r6, r0
 800e97e:	4688      	mov	r8, r1
 800e980:	2700      	movs	r7, #0
 800e982:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e986:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e98a:	f1b9 0901 	subs.w	r9, r9, #1
 800e98e:	d505      	bpl.n	800e99c <_fwalk_reent+0x24>
 800e990:	6824      	ldr	r4, [r4, #0]
 800e992:	2c00      	cmp	r4, #0
 800e994:	d1f7      	bne.n	800e986 <_fwalk_reent+0xe>
 800e996:	4638      	mov	r0, r7
 800e998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e99c:	89ab      	ldrh	r3, [r5, #12]
 800e99e:	2b01      	cmp	r3, #1
 800e9a0:	d907      	bls.n	800e9b2 <_fwalk_reent+0x3a>
 800e9a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e9a6:	3301      	adds	r3, #1
 800e9a8:	d003      	beq.n	800e9b2 <_fwalk_reent+0x3a>
 800e9aa:	4629      	mov	r1, r5
 800e9ac:	4630      	mov	r0, r6
 800e9ae:	47c0      	blx	r8
 800e9b0:	4307      	orrs	r7, r0
 800e9b2:	3568      	adds	r5, #104	; 0x68
 800e9b4:	e7e9      	b.n	800e98a <_fwalk_reent+0x12>

0800e9b6 <__retarget_lock_init_recursive>:
 800e9b6:	4770      	bx	lr

0800e9b8 <__retarget_lock_acquire_recursive>:
 800e9b8:	4770      	bx	lr

0800e9ba <__retarget_lock_release_recursive>:
 800e9ba:	4770      	bx	lr

0800e9bc <__swhatbuf_r>:
 800e9bc:	b570      	push	{r4, r5, r6, lr}
 800e9be:	460e      	mov	r6, r1
 800e9c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9c4:	4614      	mov	r4, r2
 800e9c6:	2900      	cmp	r1, #0
 800e9c8:	461d      	mov	r5, r3
 800e9ca:	b096      	sub	sp, #88	; 0x58
 800e9cc:	da08      	bge.n	800e9e0 <__swhatbuf_r+0x24>
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e9d4:	602a      	str	r2, [r5, #0]
 800e9d6:	061a      	lsls	r2, r3, #24
 800e9d8:	d410      	bmi.n	800e9fc <__swhatbuf_r+0x40>
 800e9da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9de:	e00e      	b.n	800e9fe <__swhatbuf_r+0x42>
 800e9e0:	466a      	mov	r2, sp
 800e9e2:	f000 f915 	bl	800ec10 <_fstat_r>
 800e9e6:	2800      	cmp	r0, #0
 800e9e8:	dbf1      	blt.n	800e9ce <__swhatbuf_r+0x12>
 800e9ea:	9a01      	ldr	r2, [sp, #4]
 800e9ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e9f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e9f4:	425a      	negs	r2, r3
 800e9f6:	415a      	adcs	r2, r3
 800e9f8:	602a      	str	r2, [r5, #0]
 800e9fa:	e7ee      	b.n	800e9da <__swhatbuf_r+0x1e>
 800e9fc:	2340      	movs	r3, #64	; 0x40
 800e9fe:	2000      	movs	r0, #0
 800ea00:	6023      	str	r3, [r4, #0]
 800ea02:	b016      	add	sp, #88	; 0x58
 800ea04:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ea08 <__smakebuf_r>:
 800ea08:	898b      	ldrh	r3, [r1, #12]
 800ea0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ea0c:	079d      	lsls	r5, r3, #30
 800ea0e:	4606      	mov	r6, r0
 800ea10:	460c      	mov	r4, r1
 800ea12:	d507      	bpl.n	800ea24 <__smakebuf_r+0x1c>
 800ea14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ea18:	6023      	str	r3, [r4, #0]
 800ea1a:	6123      	str	r3, [r4, #16]
 800ea1c:	2301      	movs	r3, #1
 800ea1e:	6163      	str	r3, [r4, #20]
 800ea20:	b002      	add	sp, #8
 800ea22:	bd70      	pop	{r4, r5, r6, pc}
 800ea24:	466a      	mov	r2, sp
 800ea26:	ab01      	add	r3, sp, #4
 800ea28:	f7ff ffc8 	bl	800e9bc <__swhatbuf_r>
 800ea2c:	9900      	ldr	r1, [sp, #0]
 800ea2e:	4605      	mov	r5, r0
 800ea30:	4630      	mov	r0, r6
 800ea32:	f7ff f9d3 	bl	800dddc <_malloc_r>
 800ea36:	b948      	cbnz	r0, 800ea4c <__smakebuf_r+0x44>
 800ea38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea3c:	059a      	lsls	r2, r3, #22
 800ea3e:	d4ef      	bmi.n	800ea20 <__smakebuf_r+0x18>
 800ea40:	f023 0303 	bic.w	r3, r3, #3
 800ea44:	f043 0302 	orr.w	r3, r3, #2
 800ea48:	81a3      	strh	r3, [r4, #12]
 800ea4a:	e7e3      	b.n	800ea14 <__smakebuf_r+0xc>
 800ea4c:	4b0d      	ldr	r3, [pc, #52]	; (800ea84 <__smakebuf_r+0x7c>)
 800ea4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ea50:	89a3      	ldrh	r3, [r4, #12]
 800ea52:	6020      	str	r0, [r4, #0]
 800ea54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea58:	81a3      	strh	r3, [r4, #12]
 800ea5a:	9b00      	ldr	r3, [sp, #0]
 800ea5c:	6120      	str	r0, [r4, #16]
 800ea5e:	6163      	str	r3, [r4, #20]
 800ea60:	9b01      	ldr	r3, [sp, #4]
 800ea62:	b15b      	cbz	r3, 800ea7c <__smakebuf_r+0x74>
 800ea64:	4630      	mov	r0, r6
 800ea66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea6a:	f000 f8e3 	bl	800ec34 <_isatty_r>
 800ea6e:	b128      	cbz	r0, 800ea7c <__smakebuf_r+0x74>
 800ea70:	89a3      	ldrh	r3, [r4, #12]
 800ea72:	f023 0303 	bic.w	r3, r3, #3
 800ea76:	f043 0301 	orr.w	r3, r3, #1
 800ea7a:	81a3      	strh	r3, [r4, #12]
 800ea7c:	89a0      	ldrh	r0, [r4, #12]
 800ea7e:	4305      	orrs	r5, r0
 800ea80:	81a5      	strh	r5, [r4, #12]
 800ea82:	e7cd      	b.n	800ea20 <__smakebuf_r+0x18>
 800ea84:	0800e815 	.word	0x0800e815

0800ea88 <memchr>:
 800ea88:	4603      	mov	r3, r0
 800ea8a:	b510      	push	{r4, lr}
 800ea8c:	b2c9      	uxtb	r1, r1
 800ea8e:	4402      	add	r2, r0
 800ea90:	4293      	cmp	r3, r2
 800ea92:	4618      	mov	r0, r3
 800ea94:	d101      	bne.n	800ea9a <memchr+0x12>
 800ea96:	2000      	movs	r0, #0
 800ea98:	e003      	b.n	800eaa2 <memchr+0x1a>
 800ea9a:	7804      	ldrb	r4, [r0, #0]
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	428c      	cmp	r4, r1
 800eaa0:	d1f6      	bne.n	800ea90 <memchr+0x8>
 800eaa2:	bd10      	pop	{r4, pc}

0800eaa4 <__malloc_lock>:
 800eaa4:	4801      	ldr	r0, [pc, #4]	; (800eaac <__malloc_lock+0x8>)
 800eaa6:	f7ff bf87 	b.w	800e9b8 <__retarget_lock_acquire_recursive>
 800eaaa:	bf00      	nop
 800eaac:	20002164 	.word	0x20002164

0800eab0 <__malloc_unlock>:
 800eab0:	4801      	ldr	r0, [pc, #4]	; (800eab8 <__malloc_unlock+0x8>)
 800eab2:	f7ff bf82 	b.w	800e9ba <__retarget_lock_release_recursive>
 800eab6:	bf00      	nop
 800eab8:	20002164 	.word	0x20002164

0800eabc <_raise_r>:
 800eabc:	291f      	cmp	r1, #31
 800eabe:	b538      	push	{r3, r4, r5, lr}
 800eac0:	4604      	mov	r4, r0
 800eac2:	460d      	mov	r5, r1
 800eac4:	d904      	bls.n	800ead0 <_raise_r+0x14>
 800eac6:	2316      	movs	r3, #22
 800eac8:	6003      	str	r3, [r0, #0]
 800eaca:	f04f 30ff 	mov.w	r0, #4294967295
 800eace:	bd38      	pop	{r3, r4, r5, pc}
 800ead0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ead2:	b112      	cbz	r2, 800eada <_raise_r+0x1e>
 800ead4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ead8:	b94b      	cbnz	r3, 800eaee <_raise_r+0x32>
 800eada:	4620      	mov	r0, r4
 800eadc:	f000 f830 	bl	800eb40 <_getpid_r>
 800eae0:	462a      	mov	r2, r5
 800eae2:	4601      	mov	r1, r0
 800eae4:	4620      	mov	r0, r4
 800eae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eaea:	f000 b817 	b.w	800eb1c <_kill_r>
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	d00a      	beq.n	800eb08 <_raise_r+0x4c>
 800eaf2:	1c59      	adds	r1, r3, #1
 800eaf4:	d103      	bne.n	800eafe <_raise_r+0x42>
 800eaf6:	2316      	movs	r3, #22
 800eaf8:	6003      	str	r3, [r0, #0]
 800eafa:	2001      	movs	r0, #1
 800eafc:	e7e7      	b.n	800eace <_raise_r+0x12>
 800eafe:	2400      	movs	r4, #0
 800eb00:	4628      	mov	r0, r5
 800eb02:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eb06:	4798      	blx	r3
 800eb08:	2000      	movs	r0, #0
 800eb0a:	e7e0      	b.n	800eace <_raise_r+0x12>

0800eb0c <raise>:
 800eb0c:	4b02      	ldr	r3, [pc, #8]	; (800eb18 <raise+0xc>)
 800eb0e:	4601      	mov	r1, r0
 800eb10:	6818      	ldr	r0, [r3, #0]
 800eb12:	f7ff bfd3 	b.w	800eabc <_raise_r>
 800eb16:	bf00      	nop
 800eb18:	200001cc 	.word	0x200001cc

0800eb1c <_kill_r>:
 800eb1c:	b538      	push	{r3, r4, r5, lr}
 800eb1e:	2300      	movs	r3, #0
 800eb20:	4d06      	ldr	r5, [pc, #24]	; (800eb3c <_kill_r+0x20>)
 800eb22:	4604      	mov	r4, r0
 800eb24:	4608      	mov	r0, r1
 800eb26:	4611      	mov	r1, r2
 800eb28:	602b      	str	r3, [r5, #0]
 800eb2a:	f7f2 fff0 	bl	8001b0e <_kill>
 800eb2e:	1c43      	adds	r3, r0, #1
 800eb30:	d102      	bne.n	800eb38 <_kill_r+0x1c>
 800eb32:	682b      	ldr	r3, [r5, #0]
 800eb34:	b103      	cbz	r3, 800eb38 <_kill_r+0x1c>
 800eb36:	6023      	str	r3, [r4, #0]
 800eb38:	bd38      	pop	{r3, r4, r5, pc}
 800eb3a:	bf00      	nop
 800eb3c:	20002168 	.word	0x20002168

0800eb40 <_getpid_r>:
 800eb40:	f7f2 bfde 	b.w	8001b00 <_getpid>

0800eb44 <__sread>:
 800eb44:	b510      	push	{r4, lr}
 800eb46:	460c      	mov	r4, r1
 800eb48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb4c:	f000 f894 	bl	800ec78 <_read_r>
 800eb50:	2800      	cmp	r0, #0
 800eb52:	bfab      	itete	ge
 800eb54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eb56:	89a3      	ldrhlt	r3, [r4, #12]
 800eb58:	181b      	addge	r3, r3, r0
 800eb5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eb5e:	bfac      	ite	ge
 800eb60:	6563      	strge	r3, [r4, #84]	; 0x54
 800eb62:	81a3      	strhlt	r3, [r4, #12]
 800eb64:	bd10      	pop	{r4, pc}

0800eb66 <__swrite>:
 800eb66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb6a:	461f      	mov	r7, r3
 800eb6c:	898b      	ldrh	r3, [r1, #12]
 800eb6e:	4605      	mov	r5, r0
 800eb70:	05db      	lsls	r3, r3, #23
 800eb72:	460c      	mov	r4, r1
 800eb74:	4616      	mov	r6, r2
 800eb76:	d505      	bpl.n	800eb84 <__swrite+0x1e>
 800eb78:	2302      	movs	r3, #2
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb80:	f000 f868 	bl	800ec54 <_lseek_r>
 800eb84:	89a3      	ldrh	r3, [r4, #12]
 800eb86:	4632      	mov	r2, r6
 800eb88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb8c:	81a3      	strh	r3, [r4, #12]
 800eb8e:	4628      	mov	r0, r5
 800eb90:	463b      	mov	r3, r7
 800eb92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb9a:	f000 b817 	b.w	800ebcc <_write_r>

0800eb9e <__sseek>:
 800eb9e:	b510      	push	{r4, lr}
 800eba0:	460c      	mov	r4, r1
 800eba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eba6:	f000 f855 	bl	800ec54 <_lseek_r>
 800ebaa:	1c43      	adds	r3, r0, #1
 800ebac:	89a3      	ldrh	r3, [r4, #12]
 800ebae:	bf15      	itete	ne
 800ebb0:	6560      	strne	r0, [r4, #84]	; 0x54
 800ebb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ebb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ebba:	81a3      	strheq	r3, [r4, #12]
 800ebbc:	bf18      	it	ne
 800ebbe:	81a3      	strhne	r3, [r4, #12]
 800ebc0:	bd10      	pop	{r4, pc}

0800ebc2 <__sclose>:
 800ebc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebc6:	f000 b813 	b.w	800ebf0 <_close_r>
	...

0800ebcc <_write_r>:
 800ebcc:	b538      	push	{r3, r4, r5, lr}
 800ebce:	4604      	mov	r4, r0
 800ebd0:	4608      	mov	r0, r1
 800ebd2:	4611      	mov	r1, r2
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	4d05      	ldr	r5, [pc, #20]	; (800ebec <_write_r+0x20>)
 800ebd8:	602a      	str	r2, [r5, #0]
 800ebda:	461a      	mov	r2, r3
 800ebdc:	f7f2 ffce 	bl	8001b7c <_write>
 800ebe0:	1c43      	adds	r3, r0, #1
 800ebe2:	d102      	bne.n	800ebea <_write_r+0x1e>
 800ebe4:	682b      	ldr	r3, [r5, #0]
 800ebe6:	b103      	cbz	r3, 800ebea <_write_r+0x1e>
 800ebe8:	6023      	str	r3, [r4, #0]
 800ebea:	bd38      	pop	{r3, r4, r5, pc}
 800ebec:	20002168 	.word	0x20002168

0800ebf0 <_close_r>:
 800ebf0:	b538      	push	{r3, r4, r5, lr}
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	4d05      	ldr	r5, [pc, #20]	; (800ec0c <_close_r+0x1c>)
 800ebf6:	4604      	mov	r4, r0
 800ebf8:	4608      	mov	r0, r1
 800ebfa:	602b      	str	r3, [r5, #0]
 800ebfc:	f7f2 ffda 	bl	8001bb4 <_close>
 800ec00:	1c43      	adds	r3, r0, #1
 800ec02:	d102      	bne.n	800ec0a <_close_r+0x1a>
 800ec04:	682b      	ldr	r3, [r5, #0]
 800ec06:	b103      	cbz	r3, 800ec0a <_close_r+0x1a>
 800ec08:	6023      	str	r3, [r4, #0]
 800ec0a:	bd38      	pop	{r3, r4, r5, pc}
 800ec0c:	20002168 	.word	0x20002168

0800ec10 <_fstat_r>:
 800ec10:	b538      	push	{r3, r4, r5, lr}
 800ec12:	2300      	movs	r3, #0
 800ec14:	4d06      	ldr	r5, [pc, #24]	; (800ec30 <_fstat_r+0x20>)
 800ec16:	4604      	mov	r4, r0
 800ec18:	4608      	mov	r0, r1
 800ec1a:	4611      	mov	r1, r2
 800ec1c:	602b      	str	r3, [r5, #0]
 800ec1e:	f7f2 ffd4 	bl	8001bca <_fstat>
 800ec22:	1c43      	adds	r3, r0, #1
 800ec24:	d102      	bne.n	800ec2c <_fstat_r+0x1c>
 800ec26:	682b      	ldr	r3, [r5, #0]
 800ec28:	b103      	cbz	r3, 800ec2c <_fstat_r+0x1c>
 800ec2a:	6023      	str	r3, [r4, #0]
 800ec2c:	bd38      	pop	{r3, r4, r5, pc}
 800ec2e:	bf00      	nop
 800ec30:	20002168 	.word	0x20002168

0800ec34 <_isatty_r>:
 800ec34:	b538      	push	{r3, r4, r5, lr}
 800ec36:	2300      	movs	r3, #0
 800ec38:	4d05      	ldr	r5, [pc, #20]	; (800ec50 <_isatty_r+0x1c>)
 800ec3a:	4604      	mov	r4, r0
 800ec3c:	4608      	mov	r0, r1
 800ec3e:	602b      	str	r3, [r5, #0]
 800ec40:	f7f2 ffd2 	bl	8001be8 <_isatty>
 800ec44:	1c43      	adds	r3, r0, #1
 800ec46:	d102      	bne.n	800ec4e <_isatty_r+0x1a>
 800ec48:	682b      	ldr	r3, [r5, #0]
 800ec4a:	b103      	cbz	r3, 800ec4e <_isatty_r+0x1a>
 800ec4c:	6023      	str	r3, [r4, #0]
 800ec4e:	bd38      	pop	{r3, r4, r5, pc}
 800ec50:	20002168 	.word	0x20002168

0800ec54 <_lseek_r>:
 800ec54:	b538      	push	{r3, r4, r5, lr}
 800ec56:	4604      	mov	r4, r0
 800ec58:	4608      	mov	r0, r1
 800ec5a:	4611      	mov	r1, r2
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	4d05      	ldr	r5, [pc, #20]	; (800ec74 <_lseek_r+0x20>)
 800ec60:	602a      	str	r2, [r5, #0]
 800ec62:	461a      	mov	r2, r3
 800ec64:	f7f2 ffca 	bl	8001bfc <_lseek>
 800ec68:	1c43      	adds	r3, r0, #1
 800ec6a:	d102      	bne.n	800ec72 <_lseek_r+0x1e>
 800ec6c:	682b      	ldr	r3, [r5, #0]
 800ec6e:	b103      	cbz	r3, 800ec72 <_lseek_r+0x1e>
 800ec70:	6023      	str	r3, [r4, #0]
 800ec72:	bd38      	pop	{r3, r4, r5, pc}
 800ec74:	20002168 	.word	0x20002168

0800ec78 <_read_r>:
 800ec78:	b538      	push	{r3, r4, r5, lr}
 800ec7a:	4604      	mov	r4, r0
 800ec7c:	4608      	mov	r0, r1
 800ec7e:	4611      	mov	r1, r2
 800ec80:	2200      	movs	r2, #0
 800ec82:	4d05      	ldr	r5, [pc, #20]	; (800ec98 <_read_r+0x20>)
 800ec84:	602a      	str	r2, [r5, #0]
 800ec86:	461a      	mov	r2, r3
 800ec88:	f7f2 ff5b 	bl	8001b42 <_read>
 800ec8c:	1c43      	adds	r3, r0, #1
 800ec8e:	d102      	bne.n	800ec96 <_read_r+0x1e>
 800ec90:	682b      	ldr	r3, [r5, #0]
 800ec92:	b103      	cbz	r3, 800ec96 <_read_r+0x1e>
 800ec94:	6023      	str	r3, [r4, #0]
 800ec96:	bd38      	pop	{r3, r4, r5, pc}
 800ec98:	20002168 	.word	0x20002168

0800ec9c <_init>:
 800ec9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec9e:	bf00      	nop
 800eca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eca2:	bc08      	pop	{r3}
 800eca4:	469e      	mov	lr, r3
 800eca6:	4770      	bx	lr

0800eca8 <_fini>:
 800eca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecaa:	bf00      	nop
 800ecac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecae:	bc08      	pop	{r3}
 800ecb0:	469e      	mov	lr, r3
 800ecb2:	4770      	bx	lr
