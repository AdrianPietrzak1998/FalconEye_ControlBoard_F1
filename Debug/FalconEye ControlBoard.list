
FalconEye ControlBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016598  080081e8  080081e8  000081e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  0801e780  0801e780  0001e780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801efd0  0801efd0  000209e4  2**0
                  CONTENTS
  4 .ARM          00000000  0801efd0  0801efd0  000209e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801efd0  0801efd0  000209e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801efd0  0801efd0  0001efd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801efd4  0801efd4  0001efd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009e4  20000000  0801efd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003204  200009e4  0801f9bc  000209e4  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  20003be8  0801f9bc  00023be8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a0d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023d2b  00000000  00000000  00020a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006470  00000000  00000000  0004477b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f30  00000000  00000000  0004abf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017d8  00000000  00000000  0004cb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021bf5  00000000  00000000  0004e2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002be8e  00000000  00000000  0006feed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aa2de  00000000  00000000  0009bd7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009010  00000000  00000000  0014605c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0014f06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080081e8 <__do_global_dtors_aux>:
 80081e8:	b510      	push	{r4, lr}
 80081ea:	4c05      	ldr	r4, [pc, #20]	; (8008200 <__do_global_dtors_aux+0x18>)
 80081ec:	7823      	ldrb	r3, [r4, #0]
 80081ee:	b933      	cbnz	r3, 80081fe <__do_global_dtors_aux+0x16>
 80081f0:	4b04      	ldr	r3, [pc, #16]	; (8008204 <__do_global_dtors_aux+0x1c>)
 80081f2:	b113      	cbz	r3, 80081fa <__do_global_dtors_aux+0x12>
 80081f4:	4804      	ldr	r0, [pc, #16]	; (8008208 <__do_global_dtors_aux+0x20>)
 80081f6:	f3af 8000 	nop.w
 80081fa:	2301      	movs	r3, #1
 80081fc:	7023      	strb	r3, [r4, #0]
 80081fe:	bd10      	pop	{r4, pc}
 8008200:	200009e4 	.word	0x200009e4
 8008204:	00000000 	.word	0x00000000
 8008208:	0801e768 	.word	0x0801e768

0800820c <frame_dummy>:
 800820c:	b508      	push	{r3, lr}
 800820e:	4b03      	ldr	r3, [pc, #12]	; (800821c <frame_dummy+0x10>)
 8008210:	b11b      	cbz	r3, 800821a <frame_dummy+0xe>
 8008212:	4903      	ldr	r1, [pc, #12]	; (8008220 <frame_dummy+0x14>)
 8008214:	4803      	ldr	r0, [pc, #12]	; (8008224 <frame_dummy+0x18>)
 8008216:	f3af 8000 	nop.w
 800821a:	bd08      	pop	{r3, pc}
 800821c:	00000000 	.word	0x00000000
 8008220:	200009e8 	.word	0x200009e8
 8008224:	0801e768 	.word	0x0801e768

08008228 <strlen>:
 8008228:	4603      	mov	r3, r0
 800822a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800822e:	2a00      	cmp	r2, #0
 8008230:	d1fb      	bne.n	800822a <strlen+0x2>
 8008232:	1a18      	subs	r0, r3, r0
 8008234:	3801      	subs	r0, #1
 8008236:	4770      	bx	lr

08008238 <__aeabi_drsub>:
 8008238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800823c:	e002      	b.n	8008244 <__adddf3>
 800823e:	bf00      	nop

08008240 <__aeabi_dsub>:
 8008240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08008244 <__adddf3>:
 8008244:	b530      	push	{r4, r5, lr}
 8008246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800824a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800824e:	ea94 0f05 	teq	r4, r5
 8008252:	bf08      	it	eq
 8008254:	ea90 0f02 	teqeq	r0, r2
 8008258:	bf1f      	itttt	ne
 800825a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800825e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8008262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8008266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800826a:	f000 80e2 	beq.w	8008432 <__adddf3+0x1ee>
 800826e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8008272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8008276:	bfb8      	it	lt
 8008278:	426d      	neglt	r5, r5
 800827a:	dd0c      	ble.n	8008296 <__adddf3+0x52>
 800827c:	442c      	add	r4, r5
 800827e:	ea80 0202 	eor.w	r2, r0, r2
 8008282:	ea81 0303 	eor.w	r3, r1, r3
 8008286:	ea82 0000 	eor.w	r0, r2, r0
 800828a:	ea83 0101 	eor.w	r1, r3, r1
 800828e:	ea80 0202 	eor.w	r2, r0, r2
 8008292:	ea81 0303 	eor.w	r3, r1, r3
 8008296:	2d36      	cmp	r5, #54	; 0x36
 8008298:	bf88      	it	hi
 800829a:	bd30      	pophi	{r4, r5, pc}
 800829c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80082a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80082a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80082a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80082ac:	d002      	beq.n	80082b4 <__adddf3+0x70>
 80082ae:	4240      	negs	r0, r0
 80082b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80082b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80082b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80082bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80082c0:	d002      	beq.n	80082c8 <__adddf3+0x84>
 80082c2:	4252      	negs	r2, r2
 80082c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80082c8:	ea94 0f05 	teq	r4, r5
 80082cc:	f000 80a7 	beq.w	800841e <__adddf3+0x1da>
 80082d0:	f1a4 0401 	sub.w	r4, r4, #1
 80082d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80082d8:	db0d      	blt.n	80082f6 <__adddf3+0xb2>
 80082da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80082de:	fa22 f205 	lsr.w	r2, r2, r5
 80082e2:	1880      	adds	r0, r0, r2
 80082e4:	f141 0100 	adc.w	r1, r1, #0
 80082e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80082ec:	1880      	adds	r0, r0, r2
 80082ee:	fa43 f305 	asr.w	r3, r3, r5
 80082f2:	4159      	adcs	r1, r3
 80082f4:	e00e      	b.n	8008314 <__adddf3+0xd0>
 80082f6:	f1a5 0520 	sub.w	r5, r5, #32
 80082fa:	f10e 0e20 	add.w	lr, lr, #32
 80082fe:	2a01      	cmp	r2, #1
 8008300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008304:	bf28      	it	cs
 8008306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800830a:	fa43 f305 	asr.w	r3, r3, r5
 800830e:	18c0      	adds	r0, r0, r3
 8008310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008318:	d507      	bpl.n	800832a <__adddf3+0xe6>
 800831a:	f04f 0e00 	mov.w	lr, #0
 800831e:	f1dc 0c00 	rsbs	ip, ip, #0
 8008322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8008326:	eb6e 0101 	sbc.w	r1, lr, r1
 800832a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800832e:	d31b      	bcc.n	8008368 <__adddf3+0x124>
 8008330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008334:	d30c      	bcc.n	8008350 <__adddf3+0x10c>
 8008336:	0849      	lsrs	r1, r1, #1
 8008338:	ea5f 0030 	movs.w	r0, r0, rrx
 800833c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8008340:	f104 0401 	add.w	r4, r4, #1
 8008344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800834c:	f080 809a 	bcs.w	8008484 <__adddf3+0x240>
 8008350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008354:	bf08      	it	eq
 8008356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800835a:	f150 0000 	adcs.w	r0, r0, #0
 800835e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008362:	ea41 0105 	orr.w	r1, r1, r5
 8008366:	bd30      	pop	{r4, r5, pc}
 8008368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800836c:	4140      	adcs	r0, r0
 800836e:	eb41 0101 	adc.w	r1, r1, r1
 8008372:	3c01      	subs	r4, #1
 8008374:	bf28      	it	cs
 8008376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800837a:	d2e9      	bcs.n	8008350 <__adddf3+0x10c>
 800837c:	f091 0f00 	teq	r1, #0
 8008380:	bf04      	itt	eq
 8008382:	4601      	moveq	r1, r0
 8008384:	2000      	moveq	r0, #0
 8008386:	fab1 f381 	clz	r3, r1
 800838a:	bf08      	it	eq
 800838c:	3320      	addeq	r3, #32
 800838e:	f1a3 030b 	sub.w	r3, r3, #11
 8008392:	f1b3 0220 	subs.w	r2, r3, #32
 8008396:	da0c      	bge.n	80083b2 <__adddf3+0x16e>
 8008398:	320c      	adds	r2, #12
 800839a:	dd08      	ble.n	80083ae <__adddf3+0x16a>
 800839c:	f102 0c14 	add.w	ip, r2, #20
 80083a0:	f1c2 020c 	rsb	r2, r2, #12
 80083a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80083a8:	fa21 f102 	lsr.w	r1, r1, r2
 80083ac:	e00c      	b.n	80083c8 <__adddf3+0x184>
 80083ae:	f102 0214 	add.w	r2, r2, #20
 80083b2:	bfd8      	it	le
 80083b4:	f1c2 0c20 	rsble	ip, r2, #32
 80083b8:	fa01 f102 	lsl.w	r1, r1, r2
 80083bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80083c0:	bfdc      	itt	le
 80083c2:	ea41 010c 	orrle.w	r1, r1, ip
 80083c6:	4090      	lslle	r0, r2
 80083c8:	1ae4      	subs	r4, r4, r3
 80083ca:	bfa2      	ittt	ge
 80083cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80083d0:	4329      	orrge	r1, r5
 80083d2:	bd30      	popge	{r4, r5, pc}
 80083d4:	ea6f 0404 	mvn.w	r4, r4
 80083d8:	3c1f      	subs	r4, #31
 80083da:	da1c      	bge.n	8008416 <__adddf3+0x1d2>
 80083dc:	340c      	adds	r4, #12
 80083de:	dc0e      	bgt.n	80083fe <__adddf3+0x1ba>
 80083e0:	f104 0414 	add.w	r4, r4, #20
 80083e4:	f1c4 0220 	rsb	r2, r4, #32
 80083e8:	fa20 f004 	lsr.w	r0, r0, r4
 80083ec:	fa01 f302 	lsl.w	r3, r1, r2
 80083f0:	ea40 0003 	orr.w	r0, r0, r3
 80083f4:	fa21 f304 	lsr.w	r3, r1, r4
 80083f8:	ea45 0103 	orr.w	r1, r5, r3
 80083fc:	bd30      	pop	{r4, r5, pc}
 80083fe:	f1c4 040c 	rsb	r4, r4, #12
 8008402:	f1c4 0220 	rsb	r2, r4, #32
 8008406:	fa20 f002 	lsr.w	r0, r0, r2
 800840a:	fa01 f304 	lsl.w	r3, r1, r4
 800840e:	ea40 0003 	orr.w	r0, r0, r3
 8008412:	4629      	mov	r1, r5
 8008414:	bd30      	pop	{r4, r5, pc}
 8008416:	fa21 f004 	lsr.w	r0, r1, r4
 800841a:	4629      	mov	r1, r5
 800841c:	bd30      	pop	{r4, r5, pc}
 800841e:	f094 0f00 	teq	r4, #0
 8008422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8008426:	bf06      	itte	eq
 8008428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800842c:	3401      	addeq	r4, #1
 800842e:	3d01      	subne	r5, #1
 8008430:	e74e      	b.n	80082d0 <__adddf3+0x8c>
 8008432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008436:	bf18      	it	ne
 8008438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800843c:	d029      	beq.n	8008492 <__adddf3+0x24e>
 800843e:	ea94 0f05 	teq	r4, r5
 8008442:	bf08      	it	eq
 8008444:	ea90 0f02 	teqeq	r0, r2
 8008448:	d005      	beq.n	8008456 <__adddf3+0x212>
 800844a:	ea54 0c00 	orrs.w	ip, r4, r0
 800844e:	bf04      	itt	eq
 8008450:	4619      	moveq	r1, r3
 8008452:	4610      	moveq	r0, r2
 8008454:	bd30      	pop	{r4, r5, pc}
 8008456:	ea91 0f03 	teq	r1, r3
 800845a:	bf1e      	ittt	ne
 800845c:	2100      	movne	r1, #0
 800845e:	2000      	movne	r0, #0
 8008460:	bd30      	popne	{r4, r5, pc}
 8008462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8008466:	d105      	bne.n	8008474 <__adddf3+0x230>
 8008468:	0040      	lsls	r0, r0, #1
 800846a:	4149      	adcs	r1, r1
 800846c:	bf28      	it	cs
 800846e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8008472:	bd30      	pop	{r4, r5, pc}
 8008474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008478:	bf3c      	itt	cc
 800847a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800847e:	bd30      	popcc	{r4, r5, pc}
 8008480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800848c:	f04f 0000 	mov.w	r0, #0
 8008490:	bd30      	pop	{r4, r5, pc}
 8008492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008496:	bf1a      	itte	ne
 8008498:	4619      	movne	r1, r3
 800849a:	4610      	movne	r0, r2
 800849c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80084a0:	bf1c      	itt	ne
 80084a2:	460b      	movne	r3, r1
 80084a4:	4602      	movne	r2, r0
 80084a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80084aa:	bf06      	itte	eq
 80084ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80084b0:	ea91 0f03 	teqeq	r1, r3
 80084b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80084b8:	bd30      	pop	{r4, r5, pc}
 80084ba:	bf00      	nop

080084bc <__aeabi_ui2d>:
 80084bc:	f090 0f00 	teq	r0, #0
 80084c0:	bf04      	itt	eq
 80084c2:	2100      	moveq	r1, #0
 80084c4:	4770      	bxeq	lr
 80084c6:	b530      	push	{r4, r5, lr}
 80084c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80084cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80084d0:	f04f 0500 	mov.w	r5, #0
 80084d4:	f04f 0100 	mov.w	r1, #0
 80084d8:	e750      	b.n	800837c <__adddf3+0x138>
 80084da:	bf00      	nop

080084dc <__aeabi_i2d>:
 80084dc:	f090 0f00 	teq	r0, #0
 80084e0:	bf04      	itt	eq
 80084e2:	2100      	moveq	r1, #0
 80084e4:	4770      	bxeq	lr
 80084e6:	b530      	push	{r4, r5, lr}
 80084e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80084ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80084f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80084f4:	bf48      	it	mi
 80084f6:	4240      	negmi	r0, r0
 80084f8:	f04f 0100 	mov.w	r1, #0
 80084fc:	e73e      	b.n	800837c <__adddf3+0x138>
 80084fe:	bf00      	nop

08008500 <__aeabi_f2d>:
 8008500:	0042      	lsls	r2, r0, #1
 8008502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8008506:	ea4f 0131 	mov.w	r1, r1, rrx
 800850a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800850e:	bf1f      	itttt	ne
 8008510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8008514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800851c:	4770      	bxne	lr
 800851e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8008522:	bf08      	it	eq
 8008524:	4770      	bxeq	lr
 8008526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800852a:	bf04      	itt	eq
 800852c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8008530:	4770      	bxeq	lr
 8008532:	b530      	push	{r4, r5, lr}
 8008534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8008538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800853c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008540:	e71c      	b.n	800837c <__adddf3+0x138>
 8008542:	bf00      	nop

08008544 <__aeabi_ul2d>:
 8008544:	ea50 0201 	orrs.w	r2, r0, r1
 8008548:	bf08      	it	eq
 800854a:	4770      	bxeq	lr
 800854c:	b530      	push	{r4, r5, lr}
 800854e:	f04f 0500 	mov.w	r5, #0
 8008552:	e00a      	b.n	800856a <__aeabi_l2d+0x16>

08008554 <__aeabi_l2d>:
 8008554:	ea50 0201 	orrs.w	r2, r0, r1
 8008558:	bf08      	it	eq
 800855a:	4770      	bxeq	lr
 800855c:	b530      	push	{r4, r5, lr}
 800855e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8008562:	d502      	bpl.n	800856a <__aeabi_l2d+0x16>
 8008564:	4240      	negs	r0, r0
 8008566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800856a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800856e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8008576:	f43f aed8 	beq.w	800832a <__adddf3+0xe6>
 800857a:	f04f 0203 	mov.w	r2, #3
 800857e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008582:	bf18      	it	ne
 8008584:	3203      	addne	r2, #3
 8008586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800858a:	bf18      	it	ne
 800858c:	3203      	addne	r2, #3
 800858e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8008592:	f1c2 0320 	rsb	r3, r2, #32
 8008596:	fa00 fc03 	lsl.w	ip, r0, r3
 800859a:	fa20 f002 	lsr.w	r0, r0, r2
 800859e:	fa01 fe03 	lsl.w	lr, r1, r3
 80085a2:	ea40 000e 	orr.w	r0, r0, lr
 80085a6:	fa21 f102 	lsr.w	r1, r1, r2
 80085aa:	4414      	add	r4, r2
 80085ac:	e6bd      	b.n	800832a <__adddf3+0xe6>
 80085ae:	bf00      	nop

080085b0 <__aeabi_dmul>:
 80085b0:	b570      	push	{r4, r5, r6, lr}
 80085b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80085b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80085ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80085be:	bf1d      	ittte	ne
 80085c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80085c4:	ea94 0f0c 	teqne	r4, ip
 80085c8:	ea95 0f0c 	teqne	r5, ip
 80085cc:	f000 f8de 	bleq	800878c <__aeabi_dmul+0x1dc>
 80085d0:	442c      	add	r4, r5
 80085d2:	ea81 0603 	eor.w	r6, r1, r3
 80085d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80085da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80085de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80085e2:	bf18      	it	ne
 80085e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80085e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80085ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085f0:	d038      	beq.n	8008664 <__aeabi_dmul+0xb4>
 80085f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80085f6:	f04f 0500 	mov.w	r5, #0
 80085fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80085fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8008602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8008606:	f04f 0600 	mov.w	r6, #0
 800860a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800860e:	f09c 0f00 	teq	ip, #0
 8008612:	bf18      	it	ne
 8008614:	f04e 0e01 	orrne.w	lr, lr, #1
 8008618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800861c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008624:	d204      	bcs.n	8008630 <__aeabi_dmul+0x80>
 8008626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800862a:	416d      	adcs	r5, r5
 800862c:	eb46 0606 	adc.w	r6, r6, r6
 8008630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8008638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800863c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8008640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8008644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008648:	bf88      	it	hi
 800864a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800864e:	d81e      	bhi.n	800868e <__aeabi_dmul+0xde>
 8008650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8008654:	bf08      	it	eq
 8008656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800865a:	f150 0000 	adcs.w	r0, r0, #0
 800865e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008662:	bd70      	pop	{r4, r5, r6, pc}
 8008664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008668:	ea46 0101 	orr.w	r1, r6, r1
 800866c:	ea40 0002 	orr.w	r0, r0, r2
 8008670:	ea81 0103 	eor.w	r1, r1, r3
 8008674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008678:	bfc2      	ittt	gt
 800867a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800867e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008682:	bd70      	popgt	{r4, r5, r6, pc}
 8008684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008688:	f04f 0e00 	mov.w	lr, #0
 800868c:	3c01      	subs	r4, #1
 800868e:	f300 80ab 	bgt.w	80087e8 <__aeabi_dmul+0x238>
 8008692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8008696:	bfde      	ittt	le
 8008698:	2000      	movle	r0, #0
 800869a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800869e:	bd70      	pople	{r4, r5, r6, pc}
 80086a0:	f1c4 0400 	rsb	r4, r4, #0
 80086a4:	3c20      	subs	r4, #32
 80086a6:	da35      	bge.n	8008714 <__aeabi_dmul+0x164>
 80086a8:	340c      	adds	r4, #12
 80086aa:	dc1b      	bgt.n	80086e4 <__aeabi_dmul+0x134>
 80086ac:	f104 0414 	add.w	r4, r4, #20
 80086b0:	f1c4 0520 	rsb	r5, r4, #32
 80086b4:	fa00 f305 	lsl.w	r3, r0, r5
 80086b8:	fa20 f004 	lsr.w	r0, r0, r4
 80086bc:	fa01 f205 	lsl.w	r2, r1, r5
 80086c0:	ea40 0002 	orr.w	r0, r0, r2
 80086c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80086c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80086cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80086d0:	fa21 f604 	lsr.w	r6, r1, r4
 80086d4:	eb42 0106 	adc.w	r1, r2, r6
 80086d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80086dc:	bf08      	it	eq
 80086de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80086e2:	bd70      	pop	{r4, r5, r6, pc}
 80086e4:	f1c4 040c 	rsb	r4, r4, #12
 80086e8:	f1c4 0520 	rsb	r5, r4, #32
 80086ec:	fa00 f304 	lsl.w	r3, r0, r4
 80086f0:	fa20 f005 	lsr.w	r0, r0, r5
 80086f4:	fa01 f204 	lsl.w	r2, r1, r4
 80086f8:	ea40 0002 	orr.w	r0, r0, r2
 80086fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008704:	f141 0100 	adc.w	r1, r1, #0
 8008708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800870c:	bf08      	it	eq
 800870e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008712:	bd70      	pop	{r4, r5, r6, pc}
 8008714:	f1c4 0520 	rsb	r5, r4, #32
 8008718:	fa00 f205 	lsl.w	r2, r0, r5
 800871c:	ea4e 0e02 	orr.w	lr, lr, r2
 8008720:	fa20 f304 	lsr.w	r3, r0, r4
 8008724:	fa01 f205 	lsl.w	r2, r1, r5
 8008728:	ea43 0302 	orr.w	r3, r3, r2
 800872c:	fa21 f004 	lsr.w	r0, r1, r4
 8008730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008734:	fa21 f204 	lsr.w	r2, r1, r4
 8008738:	ea20 0002 	bic.w	r0, r0, r2
 800873c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8008740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008744:	bf08      	it	eq
 8008746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800874a:	bd70      	pop	{r4, r5, r6, pc}
 800874c:	f094 0f00 	teq	r4, #0
 8008750:	d10f      	bne.n	8008772 <__aeabi_dmul+0x1c2>
 8008752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8008756:	0040      	lsls	r0, r0, #1
 8008758:	eb41 0101 	adc.w	r1, r1, r1
 800875c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008760:	bf08      	it	eq
 8008762:	3c01      	subeq	r4, #1
 8008764:	d0f7      	beq.n	8008756 <__aeabi_dmul+0x1a6>
 8008766:	ea41 0106 	orr.w	r1, r1, r6
 800876a:	f095 0f00 	teq	r5, #0
 800876e:	bf18      	it	ne
 8008770:	4770      	bxne	lr
 8008772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8008776:	0052      	lsls	r2, r2, #1
 8008778:	eb43 0303 	adc.w	r3, r3, r3
 800877c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008780:	bf08      	it	eq
 8008782:	3d01      	subeq	r5, #1
 8008784:	d0f7      	beq.n	8008776 <__aeabi_dmul+0x1c6>
 8008786:	ea43 0306 	orr.w	r3, r3, r6
 800878a:	4770      	bx	lr
 800878c:	ea94 0f0c 	teq	r4, ip
 8008790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008794:	bf18      	it	ne
 8008796:	ea95 0f0c 	teqne	r5, ip
 800879a:	d00c      	beq.n	80087b6 <__aeabi_dmul+0x206>
 800879c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80087a0:	bf18      	it	ne
 80087a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80087a6:	d1d1      	bne.n	800874c <__aeabi_dmul+0x19c>
 80087a8:	ea81 0103 	eor.w	r1, r1, r3
 80087ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80087b0:	f04f 0000 	mov.w	r0, #0
 80087b4:	bd70      	pop	{r4, r5, r6, pc}
 80087b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80087ba:	bf06      	itte	eq
 80087bc:	4610      	moveq	r0, r2
 80087be:	4619      	moveq	r1, r3
 80087c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80087c4:	d019      	beq.n	80087fa <__aeabi_dmul+0x24a>
 80087c6:	ea94 0f0c 	teq	r4, ip
 80087ca:	d102      	bne.n	80087d2 <__aeabi_dmul+0x222>
 80087cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80087d0:	d113      	bne.n	80087fa <__aeabi_dmul+0x24a>
 80087d2:	ea95 0f0c 	teq	r5, ip
 80087d6:	d105      	bne.n	80087e4 <__aeabi_dmul+0x234>
 80087d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80087dc:	bf1c      	itt	ne
 80087de:	4610      	movne	r0, r2
 80087e0:	4619      	movne	r1, r3
 80087e2:	d10a      	bne.n	80087fa <__aeabi_dmul+0x24a>
 80087e4:	ea81 0103 	eor.w	r1, r1, r3
 80087e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80087ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80087f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80087f4:	f04f 0000 	mov.w	r0, #0
 80087f8:	bd70      	pop	{r4, r5, r6, pc}
 80087fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80087fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8008802:	bd70      	pop	{r4, r5, r6, pc}

08008804 <__aeabi_ddiv>:
 8008804:	b570      	push	{r4, r5, r6, lr}
 8008806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800880a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800880e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008812:	bf1d      	ittte	ne
 8008814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008818:	ea94 0f0c 	teqne	r4, ip
 800881c:	ea95 0f0c 	teqne	r5, ip
 8008820:	f000 f8a7 	bleq	8008972 <__aeabi_ddiv+0x16e>
 8008824:	eba4 0405 	sub.w	r4, r4, r5
 8008828:	ea81 0e03 	eor.w	lr, r1, r3
 800882c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008834:	f000 8088 	beq.w	8008948 <__aeabi_ddiv+0x144>
 8008838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800883c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8008840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8008844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800884c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8008854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800885c:	429d      	cmp	r5, r3
 800885e:	bf08      	it	eq
 8008860:	4296      	cmpeq	r6, r2
 8008862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8008866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800886a:	d202      	bcs.n	8008872 <__aeabi_ddiv+0x6e>
 800886c:	085b      	lsrs	r3, r3, #1
 800886e:	ea4f 0232 	mov.w	r2, r2, rrx
 8008872:	1ab6      	subs	r6, r6, r2
 8008874:	eb65 0503 	sbc.w	r5, r5, r3
 8008878:	085b      	lsrs	r3, r3, #1
 800887a:	ea4f 0232 	mov.w	r2, r2, rrx
 800887e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8008886:	ebb6 0e02 	subs.w	lr, r6, r2
 800888a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800888e:	bf22      	ittt	cs
 8008890:	1ab6      	subcs	r6, r6, r2
 8008892:	4675      	movcs	r5, lr
 8008894:	ea40 000c 	orrcs.w	r0, r0, ip
 8008898:	085b      	lsrs	r3, r3, #1
 800889a:	ea4f 0232 	mov.w	r2, r2, rrx
 800889e:	ebb6 0e02 	subs.w	lr, r6, r2
 80088a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80088a6:	bf22      	ittt	cs
 80088a8:	1ab6      	subcs	r6, r6, r2
 80088aa:	4675      	movcs	r5, lr
 80088ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80088b0:	085b      	lsrs	r3, r3, #1
 80088b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80088b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80088ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80088be:	bf22      	ittt	cs
 80088c0:	1ab6      	subcs	r6, r6, r2
 80088c2:	4675      	movcs	r5, lr
 80088c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80088c8:	085b      	lsrs	r3, r3, #1
 80088ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80088ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80088d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80088d6:	bf22      	ittt	cs
 80088d8:	1ab6      	subcs	r6, r6, r2
 80088da:	4675      	movcs	r5, lr
 80088dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80088e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80088e4:	d018      	beq.n	8008918 <__aeabi_ddiv+0x114>
 80088e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80088ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80088ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80088f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80088f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80088fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80088fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008902:	d1c0      	bne.n	8008886 <__aeabi_ddiv+0x82>
 8008904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008908:	d10b      	bne.n	8008922 <__aeabi_ddiv+0x11e>
 800890a:	ea41 0100 	orr.w	r1, r1, r0
 800890e:	f04f 0000 	mov.w	r0, #0
 8008912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8008916:	e7b6      	b.n	8008886 <__aeabi_ddiv+0x82>
 8008918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800891c:	bf04      	itt	eq
 800891e:	4301      	orreq	r1, r0
 8008920:	2000      	moveq	r0, #0
 8008922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008926:	bf88      	it	hi
 8008928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800892c:	f63f aeaf 	bhi.w	800868e <__aeabi_dmul+0xde>
 8008930:	ebb5 0c03 	subs.w	ip, r5, r3
 8008934:	bf04      	itt	eq
 8008936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800893a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800893e:	f150 0000 	adcs.w	r0, r0, #0
 8008942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8008946:	bd70      	pop	{r4, r5, r6, pc}
 8008948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800894c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8008954:	bfc2      	ittt	gt
 8008956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800895a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800895e:	bd70      	popgt	{r4, r5, r6, pc}
 8008960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008964:	f04f 0e00 	mov.w	lr, #0
 8008968:	3c01      	subs	r4, #1
 800896a:	e690      	b.n	800868e <__aeabi_dmul+0xde>
 800896c:	ea45 0e06 	orr.w	lr, r5, r6
 8008970:	e68d      	b.n	800868e <__aeabi_dmul+0xde>
 8008972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8008976:	ea94 0f0c 	teq	r4, ip
 800897a:	bf08      	it	eq
 800897c:	ea95 0f0c 	teqeq	r5, ip
 8008980:	f43f af3b 	beq.w	80087fa <__aeabi_dmul+0x24a>
 8008984:	ea94 0f0c 	teq	r4, ip
 8008988:	d10a      	bne.n	80089a0 <__aeabi_ddiv+0x19c>
 800898a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800898e:	f47f af34 	bne.w	80087fa <__aeabi_dmul+0x24a>
 8008992:	ea95 0f0c 	teq	r5, ip
 8008996:	f47f af25 	bne.w	80087e4 <__aeabi_dmul+0x234>
 800899a:	4610      	mov	r0, r2
 800899c:	4619      	mov	r1, r3
 800899e:	e72c      	b.n	80087fa <__aeabi_dmul+0x24a>
 80089a0:	ea95 0f0c 	teq	r5, ip
 80089a4:	d106      	bne.n	80089b4 <__aeabi_ddiv+0x1b0>
 80089a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80089aa:	f43f aefd 	beq.w	80087a8 <__aeabi_dmul+0x1f8>
 80089ae:	4610      	mov	r0, r2
 80089b0:	4619      	mov	r1, r3
 80089b2:	e722      	b.n	80087fa <__aeabi_dmul+0x24a>
 80089b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80089b8:	bf18      	it	ne
 80089ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80089be:	f47f aec5 	bne.w	800874c <__aeabi_dmul+0x19c>
 80089c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80089c6:	f47f af0d 	bne.w	80087e4 <__aeabi_dmul+0x234>
 80089ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80089ce:	f47f aeeb 	bne.w	80087a8 <__aeabi_dmul+0x1f8>
 80089d2:	e712      	b.n	80087fa <__aeabi_dmul+0x24a>

080089d4 <__gedf2>:
 80089d4:	f04f 3cff 	mov.w	ip, #4294967295
 80089d8:	e006      	b.n	80089e8 <__cmpdf2+0x4>
 80089da:	bf00      	nop

080089dc <__ledf2>:
 80089dc:	f04f 0c01 	mov.w	ip, #1
 80089e0:	e002      	b.n	80089e8 <__cmpdf2+0x4>
 80089e2:	bf00      	nop

080089e4 <__cmpdf2>:
 80089e4:	f04f 0c01 	mov.w	ip, #1
 80089e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80089ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089f8:	bf18      	it	ne
 80089fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80089fe:	d01b      	beq.n	8008a38 <__cmpdf2+0x54>
 8008a00:	b001      	add	sp, #4
 8008a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8008a06:	bf0c      	ite	eq
 8008a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008a0c:	ea91 0f03 	teqne	r1, r3
 8008a10:	bf02      	ittt	eq
 8008a12:	ea90 0f02 	teqeq	r0, r2
 8008a16:	2000      	moveq	r0, #0
 8008a18:	4770      	bxeq	lr
 8008a1a:	f110 0f00 	cmn.w	r0, #0
 8008a1e:	ea91 0f03 	teq	r1, r3
 8008a22:	bf58      	it	pl
 8008a24:	4299      	cmppl	r1, r3
 8008a26:	bf08      	it	eq
 8008a28:	4290      	cmpeq	r0, r2
 8008a2a:	bf2c      	ite	cs
 8008a2c:	17d8      	asrcs	r0, r3, #31
 8008a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008a32:	f040 0001 	orr.w	r0, r0, #1
 8008a36:	4770      	bx	lr
 8008a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a40:	d102      	bne.n	8008a48 <__cmpdf2+0x64>
 8008a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008a46:	d107      	bne.n	8008a58 <__cmpdf2+0x74>
 8008a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008a50:	d1d6      	bne.n	8008a00 <__cmpdf2+0x1c>
 8008a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008a56:	d0d3      	beq.n	8008a00 <__cmpdf2+0x1c>
 8008a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop

08008a60 <__aeabi_cdrcmple>:
 8008a60:	4684      	mov	ip, r0
 8008a62:	4610      	mov	r0, r2
 8008a64:	4662      	mov	r2, ip
 8008a66:	468c      	mov	ip, r1
 8008a68:	4619      	mov	r1, r3
 8008a6a:	4663      	mov	r3, ip
 8008a6c:	e000      	b.n	8008a70 <__aeabi_cdcmpeq>
 8008a6e:	bf00      	nop

08008a70 <__aeabi_cdcmpeq>:
 8008a70:	b501      	push	{r0, lr}
 8008a72:	f7ff ffb7 	bl	80089e4 <__cmpdf2>
 8008a76:	2800      	cmp	r0, #0
 8008a78:	bf48      	it	mi
 8008a7a:	f110 0f00 	cmnmi.w	r0, #0
 8008a7e:	bd01      	pop	{r0, pc}

08008a80 <__aeabi_dcmpeq>:
 8008a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008a84:	f7ff fff4 	bl	8008a70 <__aeabi_cdcmpeq>
 8008a88:	bf0c      	ite	eq
 8008a8a:	2001      	moveq	r0, #1
 8008a8c:	2000      	movne	r0, #0
 8008a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008a92:	bf00      	nop

08008a94 <__aeabi_dcmplt>:
 8008a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008a98:	f7ff ffea 	bl	8008a70 <__aeabi_cdcmpeq>
 8008a9c:	bf34      	ite	cc
 8008a9e:	2001      	movcc	r0, #1
 8008aa0:	2000      	movcs	r0, #0
 8008aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8008aa6:	bf00      	nop

08008aa8 <__aeabi_dcmple>:
 8008aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008aac:	f7ff ffe0 	bl	8008a70 <__aeabi_cdcmpeq>
 8008ab0:	bf94      	ite	ls
 8008ab2:	2001      	movls	r0, #1
 8008ab4:	2000      	movhi	r0, #0
 8008ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8008aba:	bf00      	nop

08008abc <__aeabi_dcmpge>:
 8008abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008ac0:	f7ff ffce 	bl	8008a60 <__aeabi_cdrcmple>
 8008ac4:	bf94      	ite	ls
 8008ac6:	2001      	movls	r0, #1
 8008ac8:	2000      	movhi	r0, #0
 8008aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8008ace:	bf00      	nop

08008ad0 <__aeabi_dcmpgt>:
 8008ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008ad4:	f7ff ffc4 	bl	8008a60 <__aeabi_cdrcmple>
 8008ad8:	bf34      	ite	cc
 8008ada:	2001      	movcc	r0, #1
 8008adc:	2000      	movcs	r0, #0
 8008ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8008ae2:	bf00      	nop

08008ae4 <__aeabi_dcmpun>:
 8008ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008aec:	d102      	bne.n	8008af4 <__aeabi_dcmpun+0x10>
 8008aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8008af2:	d10a      	bne.n	8008b0a <__aeabi_dcmpun+0x26>
 8008af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008afc:	d102      	bne.n	8008b04 <__aeabi_dcmpun+0x20>
 8008afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8008b02:	d102      	bne.n	8008b0a <__aeabi_dcmpun+0x26>
 8008b04:	f04f 0000 	mov.w	r0, #0
 8008b08:	4770      	bx	lr
 8008b0a:	f04f 0001 	mov.w	r0, #1
 8008b0e:	4770      	bx	lr

08008b10 <__aeabi_d2iz>:
 8008b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008b18:	d215      	bcs.n	8008b46 <__aeabi_d2iz+0x36>
 8008b1a:	d511      	bpl.n	8008b40 <__aeabi_d2iz+0x30>
 8008b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8008b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8008b24:	d912      	bls.n	8008b4c <__aeabi_d2iz+0x3c>
 8008b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8008b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008b36:	fa23 f002 	lsr.w	r0, r3, r2
 8008b3a:	bf18      	it	ne
 8008b3c:	4240      	negne	r0, r0
 8008b3e:	4770      	bx	lr
 8008b40:	f04f 0000 	mov.w	r0, #0
 8008b44:	4770      	bx	lr
 8008b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008b4a:	d105      	bne.n	8008b58 <__aeabi_d2iz+0x48>
 8008b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008b50:	bf08      	it	eq
 8008b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008b56:	4770      	bx	lr
 8008b58:	f04f 0000 	mov.w	r0, #0
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop

08008b60 <__aeabi_frsub>:
 8008b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8008b64:	e002      	b.n	8008b6c <__addsf3>
 8008b66:	bf00      	nop

08008b68 <__aeabi_fsub>:
 8008b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08008b6c <__addsf3>:
 8008b6c:	0042      	lsls	r2, r0, #1
 8008b6e:	bf1f      	itttt	ne
 8008b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8008b74:	ea92 0f03 	teqne	r2, r3
 8008b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8008b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8008b80:	d06a      	beq.n	8008c58 <__addsf3+0xec>
 8008b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8008b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8008b8a:	bfc1      	itttt	gt
 8008b8c:	18d2      	addgt	r2, r2, r3
 8008b8e:	4041      	eorgt	r1, r0
 8008b90:	4048      	eorgt	r0, r1
 8008b92:	4041      	eorgt	r1, r0
 8008b94:	bfb8      	it	lt
 8008b96:	425b      	neglt	r3, r3
 8008b98:	2b19      	cmp	r3, #25
 8008b9a:	bf88      	it	hi
 8008b9c:	4770      	bxhi	lr
 8008b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8008ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8008baa:	bf18      	it	ne
 8008bac:	4240      	negne	r0, r0
 8008bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8008bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8008bba:	bf18      	it	ne
 8008bbc:	4249      	negne	r1, r1
 8008bbe:	ea92 0f03 	teq	r2, r3
 8008bc2:	d03f      	beq.n	8008c44 <__addsf3+0xd8>
 8008bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8008bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8008bcc:	eb10 000c 	adds.w	r0, r0, ip
 8008bd0:	f1c3 0320 	rsb	r3, r3, #32
 8008bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8008bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8008bdc:	d502      	bpl.n	8008be4 <__addsf3+0x78>
 8008bde:	4249      	negs	r1, r1
 8008be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8008be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8008be8:	d313      	bcc.n	8008c12 <__addsf3+0xa6>
 8008bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8008bee:	d306      	bcc.n	8008bfe <__addsf3+0x92>
 8008bf0:	0840      	lsrs	r0, r0, #1
 8008bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8008bf6:	f102 0201 	add.w	r2, r2, #1
 8008bfa:	2afe      	cmp	r2, #254	; 0xfe
 8008bfc:	d251      	bcs.n	8008ca2 <__addsf3+0x136>
 8008bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8008c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8008c06:	bf08      	it	eq
 8008c08:	f020 0001 	biceq.w	r0, r0, #1
 8008c0c:	ea40 0003 	orr.w	r0, r0, r3
 8008c10:	4770      	bx	lr
 8008c12:	0049      	lsls	r1, r1, #1
 8008c14:	eb40 0000 	adc.w	r0, r0, r0
 8008c18:	3a01      	subs	r2, #1
 8008c1a:	bf28      	it	cs
 8008c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8008c20:	d2ed      	bcs.n	8008bfe <__addsf3+0x92>
 8008c22:	fab0 fc80 	clz	ip, r0
 8008c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8008c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8008c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8008c32:	bfaa      	itet	ge
 8008c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8008c38:	4252      	neglt	r2, r2
 8008c3a:	4318      	orrge	r0, r3
 8008c3c:	bfbc      	itt	lt
 8008c3e:	40d0      	lsrlt	r0, r2
 8008c40:	4318      	orrlt	r0, r3
 8008c42:	4770      	bx	lr
 8008c44:	f092 0f00 	teq	r2, #0
 8008c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8008c4c:	bf06      	itte	eq
 8008c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8008c52:	3201      	addeq	r2, #1
 8008c54:	3b01      	subne	r3, #1
 8008c56:	e7b5      	b.n	8008bc4 <__addsf3+0x58>
 8008c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8008c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8008c60:	bf18      	it	ne
 8008c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8008c66:	d021      	beq.n	8008cac <__addsf3+0x140>
 8008c68:	ea92 0f03 	teq	r2, r3
 8008c6c:	d004      	beq.n	8008c78 <__addsf3+0x10c>
 8008c6e:	f092 0f00 	teq	r2, #0
 8008c72:	bf08      	it	eq
 8008c74:	4608      	moveq	r0, r1
 8008c76:	4770      	bx	lr
 8008c78:	ea90 0f01 	teq	r0, r1
 8008c7c:	bf1c      	itt	ne
 8008c7e:	2000      	movne	r0, #0
 8008c80:	4770      	bxne	lr
 8008c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8008c86:	d104      	bne.n	8008c92 <__addsf3+0x126>
 8008c88:	0040      	lsls	r0, r0, #1
 8008c8a:	bf28      	it	cs
 8008c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8008c90:	4770      	bx	lr
 8008c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8008c96:	bf3c      	itt	cc
 8008c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8008c9c:	4770      	bxcc	lr
 8008c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8008ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8008ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008caa:	4770      	bx	lr
 8008cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8008cb0:	bf16      	itet	ne
 8008cb2:	4608      	movne	r0, r1
 8008cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8008cb8:	4601      	movne	r1, r0
 8008cba:	0242      	lsls	r2, r0, #9
 8008cbc:	bf06      	itte	eq
 8008cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8008cc2:	ea90 0f01 	teqeq	r0, r1
 8008cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8008cca:	4770      	bx	lr

08008ccc <__aeabi_ui2f>:
 8008ccc:	f04f 0300 	mov.w	r3, #0
 8008cd0:	e004      	b.n	8008cdc <__aeabi_i2f+0x8>
 8008cd2:	bf00      	nop

08008cd4 <__aeabi_i2f>:
 8008cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8008cd8:	bf48      	it	mi
 8008cda:	4240      	negmi	r0, r0
 8008cdc:	ea5f 0c00 	movs.w	ip, r0
 8008ce0:	bf08      	it	eq
 8008ce2:	4770      	bxeq	lr
 8008ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8008ce8:	4601      	mov	r1, r0
 8008cea:	f04f 0000 	mov.w	r0, #0
 8008cee:	e01c      	b.n	8008d2a <__aeabi_l2f+0x2a>

08008cf0 <__aeabi_ul2f>:
 8008cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8008cf4:	bf08      	it	eq
 8008cf6:	4770      	bxeq	lr
 8008cf8:	f04f 0300 	mov.w	r3, #0
 8008cfc:	e00a      	b.n	8008d14 <__aeabi_l2f+0x14>
 8008cfe:	bf00      	nop

08008d00 <__aeabi_l2f>:
 8008d00:	ea50 0201 	orrs.w	r2, r0, r1
 8008d04:	bf08      	it	eq
 8008d06:	4770      	bxeq	lr
 8008d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8008d0c:	d502      	bpl.n	8008d14 <__aeabi_l2f+0x14>
 8008d0e:	4240      	negs	r0, r0
 8008d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008d14:	ea5f 0c01 	movs.w	ip, r1
 8008d18:	bf02      	ittt	eq
 8008d1a:	4684      	moveq	ip, r0
 8008d1c:	4601      	moveq	r1, r0
 8008d1e:	2000      	moveq	r0, #0
 8008d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8008d24:	bf08      	it	eq
 8008d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8008d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8008d2e:	fabc f28c 	clz	r2, ip
 8008d32:	3a08      	subs	r2, #8
 8008d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8008d38:	db10      	blt.n	8008d5c <__aeabi_l2f+0x5c>
 8008d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8008d3e:	4463      	add	r3, ip
 8008d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8008d44:	f1c2 0220 	rsb	r2, r2, #32
 8008d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8008d50:	eb43 0002 	adc.w	r0, r3, r2
 8008d54:	bf08      	it	eq
 8008d56:	f020 0001 	biceq.w	r0, r0, #1
 8008d5a:	4770      	bx	lr
 8008d5c:	f102 0220 	add.w	r2, r2, #32
 8008d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8008d64:	f1c2 0220 	rsb	r2, r2, #32
 8008d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8008d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8008d70:	eb43 0002 	adc.w	r0, r3, r2
 8008d74:	bf08      	it	eq
 8008d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8008d7a:	4770      	bx	lr

08008d7c <__aeabi_fmul>:
 8008d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8008d84:	bf1e      	ittt	ne
 8008d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8008d8a:	ea92 0f0c 	teqne	r2, ip
 8008d8e:	ea93 0f0c 	teqne	r3, ip
 8008d92:	d06f      	beq.n	8008e74 <__aeabi_fmul+0xf8>
 8008d94:	441a      	add	r2, r3
 8008d96:	ea80 0c01 	eor.w	ip, r0, r1
 8008d9a:	0240      	lsls	r0, r0, #9
 8008d9c:	bf18      	it	ne
 8008d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8008da2:	d01e      	beq.n	8008de2 <__aeabi_fmul+0x66>
 8008da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8008dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8008db0:	fba0 3101 	umull	r3, r1, r0, r1
 8008db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8008db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8008dbc:	bf3e      	ittt	cc
 8008dbe:	0049      	lslcc	r1, r1, #1
 8008dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8008dc4:	005b      	lslcc	r3, r3, #1
 8008dc6:	ea40 0001 	orr.w	r0, r0, r1
 8008dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8008dce:	2afd      	cmp	r2, #253	; 0xfd
 8008dd0:	d81d      	bhi.n	8008e0e <__aeabi_fmul+0x92>
 8008dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8008dda:	bf08      	it	eq
 8008ddc:	f020 0001 	biceq.w	r0, r0, #1
 8008de0:	4770      	bx	lr
 8008de2:	f090 0f00 	teq	r0, #0
 8008de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8008dea:	bf08      	it	eq
 8008dec:	0249      	lsleq	r1, r1, #9
 8008dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8008df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8008df6:	3a7f      	subs	r2, #127	; 0x7f
 8008df8:	bfc2      	ittt	gt
 8008dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8008dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8008e02:	4770      	bxgt	lr
 8008e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008e08:	f04f 0300 	mov.w	r3, #0
 8008e0c:	3a01      	subs	r2, #1
 8008e0e:	dc5d      	bgt.n	8008ecc <__aeabi_fmul+0x150>
 8008e10:	f112 0f19 	cmn.w	r2, #25
 8008e14:	bfdc      	itt	le
 8008e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8008e1a:	4770      	bxle	lr
 8008e1c:	f1c2 0200 	rsb	r2, r2, #0
 8008e20:	0041      	lsls	r1, r0, #1
 8008e22:	fa21 f102 	lsr.w	r1, r1, r2
 8008e26:	f1c2 0220 	rsb	r2, r2, #32
 8008e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8008e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8008e32:	f140 0000 	adc.w	r0, r0, #0
 8008e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8008e3a:	bf08      	it	eq
 8008e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8008e40:	4770      	bx	lr
 8008e42:	f092 0f00 	teq	r2, #0
 8008e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8008e4a:	bf02      	ittt	eq
 8008e4c:	0040      	lsleq	r0, r0, #1
 8008e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8008e52:	3a01      	subeq	r2, #1
 8008e54:	d0f9      	beq.n	8008e4a <__aeabi_fmul+0xce>
 8008e56:	ea40 000c 	orr.w	r0, r0, ip
 8008e5a:	f093 0f00 	teq	r3, #0
 8008e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008e62:	bf02      	ittt	eq
 8008e64:	0049      	lsleq	r1, r1, #1
 8008e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8008e6a:	3b01      	subeq	r3, #1
 8008e6c:	d0f9      	beq.n	8008e62 <__aeabi_fmul+0xe6>
 8008e6e:	ea41 010c 	orr.w	r1, r1, ip
 8008e72:	e78f      	b.n	8008d94 <__aeabi_fmul+0x18>
 8008e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8008e78:	ea92 0f0c 	teq	r2, ip
 8008e7c:	bf18      	it	ne
 8008e7e:	ea93 0f0c 	teqne	r3, ip
 8008e82:	d00a      	beq.n	8008e9a <__aeabi_fmul+0x11e>
 8008e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8008e88:	bf18      	it	ne
 8008e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8008e8e:	d1d8      	bne.n	8008e42 <__aeabi_fmul+0xc6>
 8008e90:	ea80 0001 	eor.w	r0, r0, r1
 8008e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008e98:	4770      	bx	lr
 8008e9a:	f090 0f00 	teq	r0, #0
 8008e9e:	bf17      	itett	ne
 8008ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8008ea4:	4608      	moveq	r0, r1
 8008ea6:	f091 0f00 	teqne	r1, #0
 8008eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8008eae:	d014      	beq.n	8008eda <__aeabi_fmul+0x15e>
 8008eb0:	ea92 0f0c 	teq	r2, ip
 8008eb4:	d101      	bne.n	8008eba <__aeabi_fmul+0x13e>
 8008eb6:	0242      	lsls	r2, r0, #9
 8008eb8:	d10f      	bne.n	8008eda <__aeabi_fmul+0x15e>
 8008eba:	ea93 0f0c 	teq	r3, ip
 8008ebe:	d103      	bne.n	8008ec8 <__aeabi_fmul+0x14c>
 8008ec0:	024b      	lsls	r3, r1, #9
 8008ec2:	bf18      	it	ne
 8008ec4:	4608      	movne	r0, r1
 8008ec6:	d108      	bne.n	8008eda <__aeabi_fmul+0x15e>
 8008ec8:	ea80 0001 	eor.w	r0, r0, r1
 8008ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ed8:	4770      	bx	lr
 8008eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8008ee2:	4770      	bx	lr

08008ee4 <__aeabi_fdiv>:
 8008ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8008eec:	bf1e      	ittt	ne
 8008eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8008ef2:	ea92 0f0c 	teqne	r2, ip
 8008ef6:	ea93 0f0c 	teqne	r3, ip
 8008efa:	d069      	beq.n	8008fd0 <__aeabi_fdiv+0xec>
 8008efc:	eba2 0203 	sub.w	r2, r2, r3
 8008f00:	ea80 0c01 	eor.w	ip, r0, r1
 8008f04:	0249      	lsls	r1, r1, #9
 8008f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8008f0a:	d037      	beq.n	8008f7c <__aeabi_fdiv+0x98>
 8008f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8008f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8008f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8008f1c:	428b      	cmp	r3, r1
 8008f1e:	bf38      	it	cc
 8008f20:	005b      	lslcc	r3, r3, #1
 8008f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8008f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8008f2a:	428b      	cmp	r3, r1
 8008f2c:	bf24      	itt	cs
 8008f2e:	1a5b      	subcs	r3, r3, r1
 8008f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8008f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8008f38:	bf24      	itt	cs
 8008f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8008f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8008f46:	bf24      	itt	cs
 8008f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8008f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8008f54:	bf24      	itt	cs
 8008f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8008f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008f5e:	011b      	lsls	r3, r3, #4
 8008f60:	bf18      	it	ne
 8008f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8008f66:	d1e0      	bne.n	8008f2a <__aeabi_fdiv+0x46>
 8008f68:	2afd      	cmp	r2, #253	; 0xfd
 8008f6a:	f63f af50 	bhi.w	8008e0e <__aeabi_fmul+0x92>
 8008f6e:	428b      	cmp	r3, r1
 8008f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8008f74:	bf08      	it	eq
 8008f76:	f020 0001 	biceq.w	r0, r0, #1
 8008f7a:	4770      	bx	lr
 8008f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8008f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8008f84:	327f      	adds	r2, #127	; 0x7f
 8008f86:	bfc2      	ittt	gt
 8008f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8008f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8008f90:	4770      	bxgt	lr
 8008f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008f96:	f04f 0300 	mov.w	r3, #0
 8008f9a:	3a01      	subs	r2, #1
 8008f9c:	e737      	b.n	8008e0e <__aeabi_fmul+0x92>
 8008f9e:	f092 0f00 	teq	r2, #0
 8008fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8008fa6:	bf02      	ittt	eq
 8008fa8:	0040      	lsleq	r0, r0, #1
 8008faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8008fae:	3a01      	subeq	r2, #1
 8008fb0:	d0f9      	beq.n	8008fa6 <__aeabi_fdiv+0xc2>
 8008fb2:	ea40 000c 	orr.w	r0, r0, ip
 8008fb6:	f093 0f00 	teq	r3, #0
 8008fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008fbe:	bf02      	ittt	eq
 8008fc0:	0049      	lsleq	r1, r1, #1
 8008fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8008fc6:	3b01      	subeq	r3, #1
 8008fc8:	d0f9      	beq.n	8008fbe <__aeabi_fdiv+0xda>
 8008fca:	ea41 010c 	orr.w	r1, r1, ip
 8008fce:	e795      	b.n	8008efc <__aeabi_fdiv+0x18>
 8008fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8008fd4:	ea92 0f0c 	teq	r2, ip
 8008fd8:	d108      	bne.n	8008fec <__aeabi_fdiv+0x108>
 8008fda:	0242      	lsls	r2, r0, #9
 8008fdc:	f47f af7d 	bne.w	8008eda <__aeabi_fmul+0x15e>
 8008fe0:	ea93 0f0c 	teq	r3, ip
 8008fe4:	f47f af70 	bne.w	8008ec8 <__aeabi_fmul+0x14c>
 8008fe8:	4608      	mov	r0, r1
 8008fea:	e776      	b.n	8008eda <__aeabi_fmul+0x15e>
 8008fec:	ea93 0f0c 	teq	r3, ip
 8008ff0:	d104      	bne.n	8008ffc <__aeabi_fdiv+0x118>
 8008ff2:	024b      	lsls	r3, r1, #9
 8008ff4:	f43f af4c 	beq.w	8008e90 <__aeabi_fmul+0x114>
 8008ff8:	4608      	mov	r0, r1
 8008ffa:	e76e      	b.n	8008eda <__aeabi_fmul+0x15e>
 8008ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8009000:	bf18      	it	ne
 8009002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8009006:	d1ca      	bne.n	8008f9e <__aeabi_fdiv+0xba>
 8009008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800900c:	f47f af5c 	bne.w	8008ec8 <__aeabi_fmul+0x14c>
 8009010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8009014:	f47f af3c 	bne.w	8008e90 <__aeabi_fmul+0x114>
 8009018:	e75f      	b.n	8008eda <__aeabi_fmul+0x15e>
 800901a:	bf00      	nop

0800901c <set_baudrate>:
#include "usart.h"



static void set_baudrate(uint32_t baudrate)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
	  huart3.Instance = USART3;
 8009024:	4b11      	ldr	r3, [pc, #68]	; (800906c <set_baudrate+0x50>)
 8009026:	4a12      	ldr	r2, [pc, #72]	; (8009070 <set_baudrate+0x54>)
 8009028:	601a      	str	r2, [r3, #0]
	  huart3.Init.BaudRate = baudrate;
 800902a:	4a10      	ldr	r2, [pc, #64]	; (800906c <set_baudrate+0x50>)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6053      	str	r3, [r2, #4]
	  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009030:	4b0e      	ldr	r3, [pc, #56]	; (800906c <set_baudrate+0x50>)
 8009032:	2200      	movs	r2, #0
 8009034:	609a      	str	r2, [r3, #8]
	  huart3.Init.StopBits = UART_STOPBITS_1;
 8009036:	4b0d      	ldr	r3, [pc, #52]	; (800906c <set_baudrate+0x50>)
 8009038:	2200      	movs	r2, #0
 800903a:	60da      	str	r2, [r3, #12]
	  huart3.Init.Parity = UART_PARITY_NONE;
 800903c:	4b0b      	ldr	r3, [pc, #44]	; (800906c <set_baudrate+0x50>)
 800903e:	2200      	movs	r2, #0
 8009040:	611a      	str	r2, [r3, #16]
	  huart3.Init.Mode = UART_MODE_TX_RX;
 8009042:	4b0a      	ldr	r3, [pc, #40]	; (800906c <set_baudrate+0x50>)
 8009044:	220c      	movs	r2, #12
 8009046:	615a      	str	r2, [r3, #20]
	  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009048:	4b08      	ldr	r3, [pc, #32]	; (800906c <set_baudrate+0x50>)
 800904a:	2200      	movs	r2, #0
 800904c:	619a      	str	r2, [r3, #24]
	  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800904e:	4b07      	ldr	r3, [pc, #28]	; (800906c <set_baudrate+0x50>)
 8009050:	2200      	movs	r2, #0
 8009052:	61da      	str	r2, [r3, #28]
	  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8009054:	4805      	ldr	r0, [pc, #20]	; (800906c <set_baudrate+0x50>)
 8009056:	f00d fd25 	bl	8016aa4 <HAL_HalfDuplex_Init>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d001      	beq.n	8009064 <set_baudrate+0x48>
	  {
	    Error_Handler();
 8009060:	f003 fc4a 	bl	800c8f8 <Error_Handler>
	  }
}
 8009064:	bf00      	nop
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	20002878 	.word	0x20002878
 8009070:	40004800 	.word	0x40004800

08009074 <wire_reset>:


HAL_StatusTypeDef wire_reset(void)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
	uint8_t data_out = 0xF0;
 800907a:	23f0      	movs	r3, #240	; 0xf0
 800907c:	71fb      	strb	r3, [r7, #7]
	uint8_t data_in = 0;
 800907e:	2300      	movs	r3, #0
 8009080:	71bb      	strb	r3, [r7, #6]

	set_baudrate(9600);
 8009082:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8009086:	f7ff ffc9 	bl	800901c <set_baudrate>
	HAL_UART_Transmit(&UART, &data_out, 1, 100);
 800908a:	1df9      	adds	r1, r7, #7
 800908c:	2364      	movs	r3, #100	; 0x64
 800908e:	2201      	movs	r2, #1
 8009090:	480b      	ldr	r0, [pc, #44]	; (80090c0 <wire_reset+0x4c>)
 8009092:	f00d fd91 	bl	8016bb8 <HAL_UART_Transmit>
	HAL_UART_Receive(&UART, &data_in, 1, 100);
 8009096:	1db9      	adds	r1, r7, #6
 8009098:	2364      	movs	r3, #100	; 0x64
 800909a:	2201      	movs	r2, #1
 800909c:	4808      	ldr	r0, [pc, #32]	; (80090c0 <wire_reset+0x4c>)
 800909e:	f00d fe0e 	bl	8016cbe <HAL_UART_Receive>
	set_baudrate(115200);
 80090a2:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80090a6:	f7ff ffb9 	bl	800901c <set_baudrate>

	if (data_in != 0xF0)
 80090aa:	79bb      	ldrb	r3, [r7, #6]
 80090ac:	2bf0      	cmp	r3, #240	; 0xf0
 80090ae:	d001      	beq.n	80090b4 <wire_reset+0x40>
		return HAL_OK;
 80090b0:	2300      	movs	r3, #0
 80090b2:	e000      	b.n	80090b6 <wire_reset+0x42>
	else
		return HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	20002878 	.word	0x20002878

080090c4 <read_bit>:

static int read_bit(void)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
	uint8_t data_out = 0xff;
 80090ca:	23ff      	movs	r3, #255	; 0xff
 80090cc:	71fb      	strb	r3, [r7, #7]
	uint8_t data_in = 0x0;
 80090ce:	2300      	movs	r3, #0
 80090d0:	71bb      	strb	r3, [r7, #6]
	data_in = 0x0;
 80090d2:	2300      	movs	r3, #0
 80090d4:	71bb      	strb	r3, [r7, #6]
	if(USARTn -> SR & (1<<5))
 80090d6:	4b0e      	ldr	r3, [pc, #56]	; (8009110 <read_bit+0x4c>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 0320 	and.w	r3, r3, #32
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d001      	beq.n	80090e6 <read_bit+0x22>
	{
		USARTn -> DR;
 80090e2:	4b0b      	ldr	r3, [pc, #44]	; (8009110 <read_bit+0x4c>)
 80090e4:	685b      	ldr	r3, [r3, #4]
	}
	HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 80090e6:	1df9      	adds	r1, r7, #7
 80090e8:	f04f 33ff 	mov.w	r3, #4294967295
 80090ec:	2201      	movs	r2, #1
 80090ee:	4809      	ldr	r0, [pc, #36]	; (8009114 <read_bit+0x50>)
 80090f0:	f00d fd62 	bl	8016bb8 <HAL_UART_Transmit>
	HAL_UART_Receive(&UART, &data_in, 1, HAL_MAX_DELAY);
 80090f4:	1db9      	adds	r1, r7, #6
 80090f6:	f04f 33ff 	mov.w	r3, #4294967295
 80090fa:	2201      	movs	r2, #1
 80090fc:	4805      	ldr	r0, [pc, #20]	; (8009114 <read_bit+0x50>)
 80090fe:	f00d fdde 	bl	8016cbe <HAL_UART_Receive>

	return data_in & 0x01;
 8009102:	79bb      	ldrb	r3, [r7, #6]
 8009104:	f003 0301 	and.w	r3, r3, #1
}
 8009108:	4618      	mov	r0, r3
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	40004800 	.word	0x40004800
 8009114:	20002878 	.word	0x20002878

08009118 <wire_read>:

uint8_t wire_read(void)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++)
 8009122:	2300      	movs	r3, #0
 8009124:	603b      	str	r3, [r7, #0]
 8009126:	e00e      	b.n	8009146 <wire_read+0x2e>
  {
    value >>= 1;
 8009128:	79fb      	ldrb	r3, [r7, #7]
 800912a:	085b      	lsrs	r3, r3, #1
 800912c:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 800912e:	f7ff ffc9 	bl	80090c4 <read_bit>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d003      	beq.n	8009140 <wire_read+0x28>
      value |= 0x80;
 8009138:	79fb      	ldrb	r3, [r7, #7]
 800913a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800913e:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++)
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	3301      	adds	r3, #1
 8009144:	603b      	str	r3, [r7, #0]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	2b07      	cmp	r3, #7
 800914a:	dded      	ble.n	8009128 <wire_read+0x10>
  }
  return value;
 800914c:	79fb      	ldrb	r3, [r7, #7]
}
 800914e:	4618      	mov	r0, r3
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
	...

08009158 <write_bit>:

static void write_bit(int value)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  if (value)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00a      	beq.n	800917c <write_bit+0x24>
  {
    uint8_t data_out = 0xff;
 8009166:	23ff      	movs	r3, #255	; 0xff
 8009168:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 800916a:	f107 010f 	add.w	r1, r7, #15
 800916e:	f04f 33ff 	mov.w	r3, #4294967295
 8009172:	2201      	movs	r2, #1
 8009174:	4808      	ldr	r0, [pc, #32]	; (8009198 <write_bit+0x40>)
 8009176:	f00d fd1f 	bl	8016bb8 <HAL_UART_Transmit>
  else
  {
    uint8_t data_out = 0x0;
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
  }
}
 800917a:	e009      	b.n	8009190 <write_bit+0x38>
    uint8_t data_out = 0x0;
 800917c:	2300      	movs	r3, #0
 800917e:	73bb      	strb	r3, [r7, #14]
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8009180:	f107 010e 	add.w	r1, r7, #14
 8009184:	f04f 33ff 	mov.w	r3, #4294967295
 8009188:	2201      	movs	r2, #1
 800918a:	4803      	ldr	r0, [pc, #12]	; (8009198 <write_bit+0x40>)
 800918c:	f00d fd14 	bl	8016bb8 <HAL_UART_Transmit>
}
 8009190:	bf00      	nop
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	20002878 	.word	0x20002878

0800919c <wire_write>:

void wire_write(uint8_t byte)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	4603      	mov	r3, r0
 80091a4:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 80091a6:	2300      	movs	r3, #0
 80091a8:	60fb      	str	r3, [r7, #12]
 80091aa:	e00b      	b.n	80091c4 <wire_write+0x28>
    write_bit(byte & 0x01);
 80091ac:	79fb      	ldrb	r3, [r7, #7]
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7ff ffd0 	bl	8009158 <write_bit>
    byte >>= 1;
 80091b8:	79fb      	ldrb	r3, [r7, #7]
 80091ba:	085b      	lsrs	r3, r3, #1
 80091bc:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	3301      	adds	r3, #1
 80091c2:	60fb      	str	r3, [r7, #12]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2b07      	cmp	r3, #7
 80091c8:	ddf0      	ble.n	80091ac <wire_write+0x10>
  }
}
 80091ca:	bf00      	nop
 80091cc:	bf00      	nop
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	4603      	mov	r3, r0
 80091dc:	460a      	mov	r2, r1
 80091de:	71fb      	strb	r3, [r7, #7]
 80091e0:	4613      	mov	r3, r2
 80091e2:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 80091e4:	2300      	movs	r3, #0
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	e016      	b.n	8009218 <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 80091ea:	79fa      	ldrb	r2, [r7, #7]
 80091ec:	79bb      	ldrb	r3, [r7, #6]
 80091ee:	4053      	eors	r3, r2
 80091f0:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 80091f2:	79fb      	ldrb	r3, [r7, #7]
 80091f4:	085b      	lsrs	r3, r3, #1
 80091f6:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 80091f8:	7afb      	ldrb	r3, [r7, #11]
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d004      	beq.n	800920c <byte_crc+0x38>
      crc ^= 0x8c;
 8009202:	79fb      	ldrb	r3, [r7, #7]
 8009204:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8009208:	43db      	mvns	r3, r3
 800920a:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 800920c:	79bb      	ldrb	r3, [r7, #6]
 800920e:	085b      	lsrs	r3, r3, #1
 8009210:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	3301      	adds	r3, #1
 8009216:	60fb      	str	r3, [r7, #12]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2b07      	cmp	r3, #7
 800921c:	dde5      	ble.n	80091ea <byte_crc+0x16>
  }
  return crc;
 800921e:	79fb      	ldrb	r3, [r7, #7]
}
 8009220:	4618      	mov	r0, r3
 8009222:	3714      	adds	r7, #20
 8009224:	46bd      	mov	sp, r7
 8009226:	bc80      	pop	{r7}
 8009228:	4770      	bx	lr

0800922a <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b084      	sub	sp, #16
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 8009234:	2300      	movs	r3, #0
 8009236:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8009238:	2300      	movs	r3, #0
 800923a:	60fb      	str	r3, [r7, #12]
 800923c:	e00d      	b.n	800925a <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	4413      	add	r3, r2
 8009244:	781a      	ldrb	r2, [r3, #0]
 8009246:	7afb      	ldrb	r3, [r7, #11]
 8009248:	4611      	mov	r1, r2
 800924a:	4618      	mov	r0, r3
 800924c:	f7ff ffc2 	bl	80091d4 <byte_crc>
 8009250:	4603      	mov	r3, r0
 8009252:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	3301      	adds	r3, #1
 8009258:	60fb      	str	r3, [r7, #12]
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	429a      	cmp	r2, r3
 8009260:	dbed      	blt.n	800923e <wire_crc+0x14>

    return crc;
 8009262:	7afb      	ldrb	r3, [r7, #11]
}
 8009264:	4618      	mov	r0, r3
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <EepromInit>:
extern TIM_HandleTypeDef htim4;

uint32_t OldTickReadEeprom;

void EepromInit(m24cxx_t *dev)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
	m24cxxFullReadWoDma(dev, EepromMirror.EepromBufferMirror);
 8009274:	490e      	ldr	r1, [pc, #56]	; (80092b0 <EepromInit+0x44>)
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fe02 	bl	8009e80 <m24cxxFullReadWoDma>
	for(uint16_t i = 0; i<dev->memsize; i++ )
 800927c:	2300      	movs	r3, #0
 800927e:	81fb      	strh	r3, [r7, #14]
 8009280:	e00b      	b.n	800929a <EepromInit+0x2e>
	{
		EepromMirror.EpromBuffer[i] = EepromMirror.EepromBufferMirror[i];
 8009282:	89fa      	ldrh	r2, [r7, #14]
 8009284:	89fb      	ldrh	r3, [r7, #14]
 8009286:	490a      	ldr	r1, [pc, #40]	; (80092b0 <EepromInit+0x44>)
 8009288:	5c89      	ldrb	r1, [r1, r2]
 800928a:	4a09      	ldr	r2, [pc, #36]	; (80092b0 <EepromInit+0x44>)
 800928c:	4413      	add	r3, r2
 800928e:	460a      	mov	r2, r1
 8009290:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
	for(uint16_t i = 0; i<dev->memsize; i++ )
 8009294:	89fb      	ldrh	r3, [r7, #14]
 8009296:	3301      	adds	r3, #1
 8009298:	81fb      	strh	r3, [r7, #14]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	891b      	ldrh	r3, [r3, #8]
 800929e:	89fa      	ldrh	r2, [r7, #14]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d3ee      	bcc.n	8009282 <EepromInit+0x16>
	}
}
 80092a4:	bf00      	nop
 80092a6:	bf00      	nop
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	20000a00 	.word	0x20000a00

080092b4 <EepromRecovery>:

void EepromRecovery(void)
{
 80092b4:	b480      	push	{r7}
 80092b6:	af00      	add	r7, sp, #0
	GPIOE -> ODR = EepromMirror.EepromGpioOut;
 80092b8:	4b21      	ldr	r3, [pc, #132]	; (8009340 <EepromRecovery+0x8c>)
 80092ba:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 80092be:	4b21      	ldr	r3, [pc, #132]	; (8009344 <EepromRecovery+0x90>)
 80092c0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, EepromMirror.EepromPwm1);
 80092c2:	4b1f      	ldr	r3, [pc, #124]	; (8009340 <EepromRecovery+0x8c>)
 80092c4:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 80092c8:	4b1f      	ldr	r3, [pc, #124]	; (8009348 <EepromRecovery+0x94>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, EepromMirror.EepromPwm2);
 80092ce:	4b1c      	ldr	r3, [pc, #112]	; (8009340 <EepromRecovery+0x8c>)
 80092d0:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 80092d4:	4b1c      	ldr	r3, [pc, #112]	; (8009348 <EepromRecovery+0x94>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, EepromMirror.EepromPwm3);
 80092da:	4b19      	ldr	r3, [pc, #100]	; (8009340 <EepromRecovery+0x8c>)
 80092dc:	f8b3 2106 	ldrh.w	r2, [r3, #262]	; 0x106
 80092e0:	4b19      	ldr	r3, [pc, #100]	; (8009348 <EepromRecovery+0x94>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, EepromMirror.EepromPwm4);
 80092e6:	4b16      	ldr	r3, [pc, #88]	; (8009340 <EepromRecovery+0x8c>)
 80092e8:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
 80092ec:	4b16      	ldr	r3, [pc, #88]	; (8009348 <EepromRecovery+0x94>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	641a      	str	r2, [r3, #64]	; 0x40
	Logo.Mode = EepromMirror.EepromLogoMode;
 80092f2:	4b13      	ldr	r3, [pc, #76]	; (8009340 <EepromRecovery+0x8c>)
 80092f4:	f993 210a 	ldrsb.w	r2, [r3, #266]	; 0x10a
 80092f8:	4b14      	ldr	r3, [pc, #80]	; (800934c <EepromRecovery+0x98>)
 80092fa:	701a      	strb	r2, [r3, #0]
	Logo.PwmMax = EepromMirror.EepromLogoPwmMax;
 80092fc:	4b10      	ldr	r3, [pc, #64]	; (8009340 <EepromRecovery+0x8c>)
 80092fe:	f8b3 210c 	ldrh.w	r2, [r3, #268]	; 0x10c
 8009302:	4b12      	ldr	r3, [pc, #72]	; (800934c <EepromRecovery+0x98>)
 8009304:	805a      	strh	r2, [r3, #2]
	Logo.DimmerSpeed = EepromMirror.EepromLogoDimmingSpeed;
 8009306:	4b0e      	ldr	r3, [pc, #56]	; (8009340 <EepromRecovery+0x8c>)
 8009308:	f8b3 210e 	ldrh.w	r2, [r3, #270]	; 0x10e
 800930c:	4b0f      	ldr	r3, [pc, #60]	; (800934c <EepromRecovery+0x98>)
 800930e:	821a      	strh	r2, [r3, #16]
	Light.Mode = EepromMirror.EepromLightMode;
 8009310:	4b0b      	ldr	r3, [pc, #44]	; (8009340 <EepromRecovery+0x8c>)
 8009312:	f993 2110 	ldrsb.w	r2, [r3, #272]	; 0x110
 8009316:	4b0e      	ldr	r3, [pc, #56]	; (8009350 <EepromRecovery+0x9c>)
 8009318:	701a      	strb	r2, [r3, #0]
	Light.PwmMax = EepromMirror.EepromLightPwmMax;
 800931a:	4b09      	ldr	r3, [pc, #36]	; (8009340 <EepromRecovery+0x8c>)
 800931c:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 8009320:	4b0b      	ldr	r3, [pc, #44]	; (8009350 <EepromRecovery+0x9c>)
 8009322:	805a      	strh	r2, [r3, #2]
	Light.DimmerSpeed = EepromMirror.EepromLightDimmingSpeed;
 8009324:	4b06      	ldr	r3, [pc, #24]	; (8009340 <EepromRecovery+0x8c>)
 8009326:	f8b3 2114 	ldrh.w	r2, [r3, #276]	; 0x114
 800932a:	4b09      	ldr	r3, [pc, #36]	; (8009350 <EepromRecovery+0x9c>)
 800932c:	821a      	strh	r2, [r3, #16]
	htim4.Init.Prescaler = EepromMirror.EepromPwmFreqPrescaler;
 800932e:	4b04      	ldr	r3, [pc, #16]	; (8009340 <EepromRecovery+0x8c>)
 8009330:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009334:	4a04      	ldr	r2, [pc, #16]	; (8009348 <EepromRecovery+0x94>)
 8009336:	6053      	str	r3, [r2, #4]

}
 8009338:	bf00      	nop
 800933a:	46bd      	mov	sp, r7
 800933c:	bc80      	pop	{r7}
 800933e:	4770      	bx	lr
 8009340:	20000a00 	.word	0x20000a00
 8009344:	40011800 	.word	0x40011800
 8009348:	20002758 	.word	0x20002758
 800934c:	20001e7c 	.word	0x20001e7c
 8009350:	20001e90 	.word	0x20001e90

08009354 <EepromVarAssig>:

static void EepromVarAssig(void)
{
 8009354:	b480      	push	{r7}
 8009356:	af00      	add	r7, sp, #0
	EepromMirror.EepromGpioOut = GPIOE -> ODR;
 8009358:	4b25      	ldr	r3, [pc, #148]	; (80093f0 <EepromVarAssig+0x9c>)
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	b29a      	uxth	r2, r3
 800935e:	4b25      	ldr	r3, [pc, #148]	; (80093f4 <EepromVarAssig+0xa0>)
 8009360:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	EepromMirror.EepromPwm1 = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 8009364:	4b24      	ldr	r3, [pc, #144]	; (80093f8 <EepromVarAssig+0xa4>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800936a:	b29a      	uxth	r2, r3
 800936c:	4b21      	ldr	r3, [pc, #132]	; (80093f4 <EepromVarAssig+0xa0>)
 800936e:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	EepromMirror.EepromPwm2 = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_2);
 8009372:	4b21      	ldr	r3, [pc, #132]	; (80093f8 <EepromVarAssig+0xa4>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009378:	b29a      	uxth	r2, r3
 800937a:	4b1e      	ldr	r3, [pc, #120]	; (80093f4 <EepromVarAssig+0xa0>)
 800937c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	EepromMirror.EepromPwm3 = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_3);
 8009380:	4b1d      	ldr	r3, [pc, #116]	; (80093f8 <EepromVarAssig+0xa4>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009386:	b29a      	uxth	r2, r3
 8009388:	4b1a      	ldr	r3, [pc, #104]	; (80093f4 <EepromVarAssig+0xa0>)
 800938a:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
	EepromMirror.EepromPwm4 = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_4);
 800938e:	4b1a      	ldr	r3, [pc, #104]	; (80093f8 <EepromVarAssig+0xa4>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009394:	b29a      	uxth	r2, r3
 8009396:	4b17      	ldr	r3, [pc, #92]	; (80093f4 <EepromVarAssig+0xa0>)
 8009398:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
	EepromMirror.EepromLogoMode = Logo.Mode;
 800939c:	4b17      	ldr	r3, [pc, #92]	; (80093fc <EepromVarAssig+0xa8>)
 800939e:	f993 2000 	ldrsb.w	r2, [r3]
 80093a2:	4b14      	ldr	r3, [pc, #80]	; (80093f4 <EepromVarAssig+0xa0>)
 80093a4:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	EepromMirror.EepromLogoPwmMax = Logo.PwmMax;
 80093a8:	4b14      	ldr	r3, [pc, #80]	; (80093fc <EepromVarAssig+0xa8>)
 80093aa:	885a      	ldrh	r2, [r3, #2]
 80093ac:	4b11      	ldr	r3, [pc, #68]	; (80093f4 <EepromVarAssig+0xa0>)
 80093ae:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	EepromMirror.EepromLogoDimmingSpeed = Logo.DimmerSpeed;
 80093b2:	4b12      	ldr	r3, [pc, #72]	; (80093fc <EepromVarAssig+0xa8>)
 80093b4:	8a1a      	ldrh	r2, [r3, #16]
 80093b6:	4b0f      	ldr	r3, [pc, #60]	; (80093f4 <EepromVarAssig+0xa0>)
 80093b8:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
	EepromMirror.EepromLightMode = Light.Mode;
 80093bc:	4b10      	ldr	r3, [pc, #64]	; (8009400 <EepromVarAssig+0xac>)
 80093be:	f993 2000 	ldrsb.w	r2, [r3]
 80093c2:	4b0c      	ldr	r3, [pc, #48]	; (80093f4 <EepromVarAssig+0xa0>)
 80093c4:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	EepromMirror.EepromLightPwmMax = Light.PwmMax;
 80093c8:	4b0d      	ldr	r3, [pc, #52]	; (8009400 <EepromVarAssig+0xac>)
 80093ca:	885a      	ldrh	r2, [r3, #2]
 80093cc:	4b09      	ldr	r3, [pc, #36]	; (80093f4 <EepromVarAssig+0xa0>)
 80093ce:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
	EepromMirror.EepromLightDimmingSpeed = Light.DimmerSpeed;
 80093d2:	4b0b      	ldr	r3, [pc, #44]	; (8009400 <EepromVarAssig+0xac>)
 80093d4:	8a1a      	ldrh	r2, [r3, #16]
 80093d6:	4b07      	ldr	r3, [pc, #28]	; (80093f4 <EepromVarAssig+0xa0>)
 80093d8:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
	EepromMirror.EepromPwmFreqPrescaler = htim4.Init.Prescaler;
 80093dc:	4b06      	ldr	r3, [pc, #24]	; (80093f8 <EepromVarAssig+0xa4>)
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	4a04      	ldr	r2, [pc, #16]	; (80093f4 <EepromVarAssig+0xa0>)
 80093e2:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118

}
 80093e6:	bf00      	nop
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bc80      	pop	{r7}
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	40011800 	.word	0x40011800
 80093f4:	20000a00 	.word	0x20000a00
 80093f8:	20002758 	.word	0x20002758
 80093fc:	20001e7c 	.word	0x20001e7c
 8009400:	20001e90 	.word	0x20001e90

08009404 <EepromBackup>:

void EepromBackup(m24cxx_t *dev)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
	if(HAL_GetTick() - dev->OldTickWriteEeprom > M24_WRITE_TIME)
 800940c:	f005 f9ce 	bl	800e7ac <HAL_GetTick>
 8009410:	4602      	mov	r2, r0
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	695b      	ldr	r3, [r3, #20]
 8009416:	1ad3      	subs	r3, r2, r3
 8009418:	2b14      	cmp	r3, #20
 800941a:	d92c      	bls.n	8009476 <EepromBackup+0x72>
	{
		EepromVarAssig();
 800941c:	f7ff ff9a 	bl	8009354 <EepromVarAssig>

		for(uint16_t i = 0; i<dev->memsize; i++)
 8009420:	2300      	movs	r3, #0
 8009422:	81fb      	strh	r3, [r7, #14]
 8009424:	e022      	b.n	800946c <EepromBackup+0x68>
		{
			if(EepromMirror.EepromBufferMirror[i] != EepromMirror.EpromBuffer[i])
 8009426:	89fb      	ldrh	r3, [r7, #14]
 8009428:	4a15      	ldr	r2, [pc, #84]	; (8009480 <EepromBackup+0x7c>)
 800942a:	5cd2      	ldrb	r2, [r2, r3]
 800942c:	89fb      	ldrh	r3, [r7, #14]
 800942e:	4914      	ldr	r1, [pc, #80]	; (8009480 <EepromBackup+0x7c>)
 8009430:	440b      	add	r3, r1
 8009432:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8009436:	429a      	cmp	r2, r3
 8009438:	d015      	beq.n	8009466 <EepromBackup+0x62>
			{
				m24cxxWrite8Bit(dev, i, &EepromMirror.EpromBuffer[i]);
 800943a:	89fb      	ldrh	r3, [r7, #14]
 800943c:	b2d9      	uxtb	r1, r3
 800943e:	89fb      	ldrh	r3, [r7, #14]
 8009440:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009444:	4a0e      	ldr	r2, [pc, #56]	; (8009480 <EepromBackup+0x7c>)
 8009446:	4413      	add	r3, r2
 8009448:	461a      	mov	r2, r3
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 fc92 	bl	8009d74 <m24cxxWrite8Bit>
//				EepromMirror.EepromBufferMirror[i] = EepromMirror.EpromBuffer[i];
				m24cxxRead8Bit(dev, i, &EepromMirror.EepromBufferMirror[i]);
 8009450:	89fb      	ldrh	r3, [r7, #14]
 8009452:	b2d9      	uxtb	r1, r3
 8009454:	89fb      	ldrh	r3, [r7, #14]
 8009456:	4a0a      	ldr	r2, [pc, #40]	; (8009480 <EepromBackup+0x7c>)
 8009458:	4413      	add	r3, r2
 800945a:	461a      	mov	r2, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fc49 	bl	8009cf4 <m24cxxRead8Bit>
				break;
 8009462:	bf00      	nop
			}
		}
	}
}
 8009464:	e007      	b.n	8009476 <EepromBackup+0x72>
		for(uint16_t i = 0; i<dev->memsize; i++)
 8009466:	89fb      	ldrh	r3, [r7, #14]
 8009468:	3301      	adds	r3, #1
 800946a:	81fb      	strh	r3, [r7, #14]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	891b      	ldrh	r3, [r3, #8]
 8009470:	89fa      	ldrh	r2, [r7, #14]
 8009472:	429a      	cmp	r2, r3
 8009474:	d3d7      	bcc.n	8009426 <EepromBackup+0x22>
}
 8009476:	bf00      	nop
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	20000a00 	.word	0x20000a00

08009484 <EepromRefresh>:

void EepromRefresh(m24cxx_t *dev)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
	m24cxxFullRead(dev, EepromMirror.EepromBufferMirror);
 800948c:	4903      	ldr	r1, [pc, #12]	; (800949c <EepromRefresh+0x18>)
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 fcc0 	bl	8009e14 <m24cxxFullRead>
}
 8009494:	bf00      	nop
 8009496:	3708      	adds	r7, #8
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	20000a00 	.word	0x20000a00

080094a0 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
	font = font_t;
 80094a8:	4a03      	ldr	r2, [pc, #12]	; (80094b8 <GFX_SetFont+0x18>)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6013      	str	r3, [r2, #0]
}
 80094ae:	bf00      	nop
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bc80      	pop	{r7}
 80094b6:	4770      	bx	lr
 80094b8:	20000c00 	.word	0x20000c00

080094bc <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	4603      	mov	r3, r0
 80094c4:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 80094c6:	79fb      	ldrb	r3, [r7, #7]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d002      	beq.n	80094d2 <GFX_SetFontSize+0x16>
		size = size_t;
 80094cc:	4a03      	ldr	r2, [pc, #12]	; (80094dc <GFX_SetFontSize+0x20>)
 80094ce:	79fb      	ldrb	r3, [r7, #7]
 80094d0:	7013      	strb	r3, [r2, #0]
}
 80094d2:	bf00      	nop
 80094d4:	370c      	adds	r7, #12
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bc80      	pop	{r7}
 80094da:	4770      	bx	lr
 80094dc:	20000000 	.word	0x20000000

080094e0 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 80094e0:	b590      	push	{r4, r7, lr}
 80094e2:	b089      	sub	sp, #36	; 0x24
 80094e4:	af02      	add	r7, sp, #8
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	4611      	mov	r1, r2
 80094ec:	461a      	mov	r2, r3
 80094ee:	460b      	mov	r3, r1
 80094f0:	71fb      	strb	r3, [r7, #7]
 80094f2:	4613      	mov	r3, r2
 80094f4:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 80094f6:	79fb      	ldrb	r3, [r7, #7]
 80094f8:	2b7e      	cmp	r3, #126	; 0x7e
 80094fa:	f200 80a3 	bhi.w	8009644 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80094fe:	2300      	movs	r3, #0
 8009500:	75fb      	strb	r3, [r7, #23]
 8009502:	e096      	b.n	8009632 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8009504:	4b51      	ldr	r3, [pc, #324]	; (800964c <GFX_DrawChar+0x16c>)
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	79fb      	ldrb	r3, [r7, #7]
 800950a:	3b20      	subs	r3, #32
 800950c:	494f      	ldr	r1, [pc, #316]	; (800964c <GFX_DrawChar+0x16c>)
 800950e:	6809      	ldr	r1, [r1, #0]
 8009510:	3101      	adds	r1, #1
 8009512:	7809      	ldrb	r1, [r1, #0]
 8009514:	fb03 f101 	mul.w	r1, r3, r1
 8009518:	7dfb      	ldrb	r3, [r7, #23]
 800951a:	440b      	add	r3, r1
 800951c:	3302      	adds	r3, #2
 800951e:	4413      	add	r3, r2
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8009524:	2300      	movs	r3, #0
 8009526:	757b      	strb	r3, [r7, #21]
 8009528:	e078      	b.n	800961c <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 800952a:	7dbb      	ldrb	r3, [r7, #22]
 800952c:	f003 0301 	and.w	r3, r3, #1
 8009530:	2b00      	cmp	r3, #0
 8009532:	d032      	beq.n	800959a <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8009534:	4b46      	ldr	r3, [pc, #280]	; (8009650 <GFX_DrawChar+0x170>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d113      	bne.n	8009564 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 800953c:	7dfb      	ldrb	r3, [r7, #23]
 800953e:	b29a      	uxth	r2, r3
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	b29b      	uxth	r3, r3
 8009544:	4413      	add	r3, r2
 8009546:	b29b      	uxth	r3, r3
 8009548:	b218      	sxth	r0, r3
 800954a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800954e:	b29a      	uxth	r2, r3
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	b29b      	uxth	r3, r3
 8009554:	4413      	add	r3, r2
 8009556:	b29b      	uxth	r3, r3
 8009558:	b21b      	sxth	r3, r3
 800955a:	79ba      	ldrb	r2, [r7, #6]
 800955c:	4619      	mov	r1, r3
 800955e:	f004 f9db 	bl	800d918 <SSD1306_DrawPixel>
 8009562:	e052      	b.n	800960a <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8009564:	7dfb      	ldrb	r3, [r7, #23]
 8009566:	4a3a      	ldr	r2, [pc, #232]	; (8009650 <GFX_DrawChar+0x170>)
 8009568:	7812      	ldrb	r2, [r2, #0]
 800956a:	fb03 f202 	mul.w	r2, r3, r2
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	18d0      	adds	r0, r2, r3
 8009572:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8009576:	4a36      	ldr	r2, [pc, #216]	; (8009650 <GFX_DrawChar+0x170>)
 8009578:	7812      	ldrb	r2, [r2, #0]
 800957a:	fb03 f202 	mul.w	r2, r3, r2
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	18d1      	adds	r1, r2, r3
 8009582:	4b33      	ldr	r3, [pc, #204]	; (8009650 <GFX_DrawChar+0x170>)
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	b29a      	uxth	r2, r3
 8009588:	4b31      	ldr	r3, [pc, #196]	; (8009650 <GFX_DrawChar+0x170>)
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	b29c      	uxth	r4, r3
 800958e:	79bb      	ldrb	r3, [r7, #6]
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	4623      	mov	r3, r4
 8009594:	f000 f9a3 	bl	80098de <GFX_DrawFillRectangle>
 8009598:	e037      	b.n	800960a <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 800959a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d133      	bne.n	800960a <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 80095a2:	4b2b      	ldr	r3, [pc, #172]	; (8009650 <GFX_DrawChar+0x170>)
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d114      	bne.n	80095d4 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 80095aa:	7dfb      	ldrb	r3, [r7, #23]
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	4413      	add	r3, r2
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	b218      	sxth	r0, r3
 80095b8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80095bc:	b29a      	uxth	r2, r3
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	4413      	add	r3, r2
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	b21b      	sxth	r3, r3
 80095c8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80095cc:	4619      	mov	r1, r3
 80095ce:	f004 f9a3 	bl	800d918 <SSD1306_DrawPixel>
 80095d2:	e01a      	b.n	800960a <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 80095d4:	7dfb      	ldrb	r3, [r7, #23]
 80095d6:	4a1e      	ldr	r2, [pc, #120]	; (8009650 <GFX_DrawChar+0x170>)
 80095d8:	7812      	ldrb	r2, [r2, #0]
 80095da:	fb03 f202 	mul.w	r2, r3, r2
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	18d0      	adds	r0, r2, r3
 80095e2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80095e6:	4a1a      	ldr	r2, [pc, #104]	; (8009650 <GFX_DrawChar+0x170>)
 80095e8:	7812      	ldrb	r2, [r2, #0]
 80095ea:	fb03 f202 	mul.w	r2, r3, r2
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	18d1      	adds	r1, r2, r3
 80095f2:	4b17      	ldr	r3, [pc, #92]	; (8009650 <GFX_DrawChar+0x170>)
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	4b15      	ldr	r3, [pc, #84]	; (8009650 <GFX_DrawChar+0x170>)
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	b29c      	uxth	r4, r3
 80095fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	4623      	mov	r3, r4
 8009606:	f000 f96a 	bl	80098de <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 800960a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800960e:	b2db      	uxtb	r3, r3
 8009610:	3301      	adds	r3, #1
 8009612:	b2db      	uxtb	r3, r3
 8009614:	757b      	strb	r3, [r7, #21]
 8009616:	7dbb      	ldrb	r3, [r7, #22]
 8009618:	085b      	lsrs	r3, r3, #1
 800961a:	75bb      	strb	r3, [r7, #22]
 800961c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8009620:	4a0a      	ldr	r2, [pc, #40]	; (800964c <GFX_DrawChar+0x16c>)
 8009622:	6812      	ldr	r2, [r2, #0]
 8009624:	7812      	ldrb	r2, [r2, #0]
 8009626:	4293      	cmp	r3, r2
 8009628:	f6ff af7f 	blt.w	800952a <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 800962c:	7dfb      	ldrb	r3, [r7, #23]
 800962e:	3301      	adds	r3, #1
 8009630:	75fb      	strb	r3, [r7, #23]
 8009632:	4b06      	ldr	r3, [pc, #24]	; (800964c <GFX_DrawChar+0x16c>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	3301      	adds	r3, #1
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	7dfa      	ldrb	r2, [r7, #23]
 800963c:	429a      	cmp	r2, r3
 800963e:	f4ff af61 	bcc.w	8009504 <GFX_DrawChar+0x24>
 8009642:	e000      	b.n	8009646 <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8009644:	bf00      	nop
            }
        }
    }
}
 8009646:	371c      	adds	r7, #28
 8009648:	46bd      	mov	sp, r7
 800964a:	bd90      	pop	{r4, r7, pc}
 800964c:	20000c00 	.word	0x20000c00
 8009650:	20000000 	.word	0x20000000

08009654 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b088      	sub	sp, #32
 8009658:	af02      	add	r7, sp, #8
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
 8009660:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 800966c:	e03e      	b.n	80096ec <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 800966e:	78f9      	ldrb	r1, [r7, #3]
 8009670:	7cfa      	ldrb	r2, [r7, #19]
 8009672:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	460b      	mov	r3, r1
 800967a:	68b9      	ldr	r1, [r7, #8]
 800967c:	6978      	ldr	r0, [r7, #20]
 800967e:	f7ff ff2f 	bl	80094e0 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8009682:	4b20      	ldr	r3, [pc, #128]	; (8009704 <GFX_DrawString+0xb0>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3301      	adds	r3, #1
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	461a      	mov	r2, r3
 800968c:	4b1e      	ldr	r3, [pc, #120]	; (8009708 <GFX_DrawString+0xb4>)
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	fb02 f303 	mul.w	r3, r2, r3
 8009694:	3301      	adds	r3, #1
 8009696:	697a      	ldr	r2, [r7, #20]
 8009698:	4413      	add	r3, r2
 800969a:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 800969c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d120      	bne.n	80096e6 <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 80096a4:	2300      	movs	r3, #0
 80096a6:	74bb      	strb	r3, [r7, #18]
 80096a8:	e012      	b.n	80096d0 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	3b01      	subs	r3, #1
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	b218      	sxth	r0, r3
 80096b4:	7cbb      	ldrb	r3, [r7, #18]
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	4413      	add	r3, r2
 80096be:	b29b      	uxth	r3, r3
 80096c0:	b21b      	sxth	r3, r3
 80096c2:	2200      	movs	r2, #0
 80096c4:	4619      	mov	r1, r3
 80096c6:	f004 f927 	bl	800d918 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 80096ca:	7cbb      	ldrb	r3, [r7, #18]
 80096cc:	3301      	adds	r3, #1
 80096ce:	74bb      	strb	r3, [r7, #18]
 80096d0:	7cba      	ldrb	r2, [r7, #18]
 80096d2:	4b0c      	ldr	r3, [pc, #48]	; (8009704 <GFX_DrawString+0xb0>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	4619      	mov	r1, r3
 80096da:	4b0b      	ldr	r3, [pc, #44]	; (8009708 <GFX_DrawString+0xb4>)
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	fb01 f303 	mul.w	r3, r1, r3
 80096e2:	429a      	cmp	r2, r3
 80096e4:	dbe1      	blt.n	80096aa <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	1c5a      	adds	r2, r3, #1
 80096f0:	607a      	str	r2, [r7, #4]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d1ba      	bne.n	800966e <GFX_DrawString+0x1a>
	}
}
 80096f8:	bf00      	nop
 80096fa:	bf00      	nop
 80096fc:	3718      	adds	r7, #24
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}
 8009702:	bf00      	nop
 8009704:	20000c00 	.word	0x20000c00
 8009708:	20000000 	.word	0x20000000

0800970c <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b08c      	sub	sp, #48	; 0x30
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	607a      	str	r2, [r7, #4]
 8009718:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800971a:	683a      	ldr	r2, [r7, #0]
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8009724:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8009728:	6879      	ldr	r1, [r7, #4]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	1acb      	subs	r3, r1, r3
 800972e:	2b00      	cmp	r3, #0
 8009730:	bfb8      	it	lt
 8009732:	425b      	neglt	r3, r3
 8009734:	429a      	cmp	r2, r3
 8009736:	bfcc      	ite	gt
 8009738:	2301      	movgt	r3, #1
 800973a:	2300      	movle	r3, #0
 800973c:	b2db      	uxtb	r3, r3
 800973e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8009740:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00b      	beq.n	8009760 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	627b      	str	r3, [r7, #36]	; 0x24
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	60fb      	str	r3, [r7, #12]
 8009750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009752:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	623b      	str	r3, [r7, #32]
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	607b      	str	r3, [r7, #4]
 800975c:	6a3b      	ldr	r3, [r7, #32]
 800975e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	429a      	cmp	r2, r3
 8009766:	dd0b      	ble.n	8009780 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	61fb      	str	r3, [r7, #28]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	60fb      	str	r3, [r7, #12]
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	61bb      	str	r3, [r7, #24]
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	60bb      	str	r3, [r7, #8]
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	b29a      	uxth	r2, r3
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	b29b      	uxth	r3, r3
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	b29b      	uxth	r3, r3
 800978c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	1ad3      	subs	r3, r2, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	bfb8      	it	lt
 8009798:	425b      	neglt	r3, r3
 800979a:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 800979c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80097a0:	0fda      	lsrs	r2, r3, #31
 80097a2:	4413      	add	r3, r2
 80097a4:	105b      	asrs	r3, r3, #1
 80097a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	da02      	bge.n	80097b6 <GFX_WriteLine+0xaa>
	        ystep = 1;
 80097b0:	2301      	movs	r3, #1
 80097b2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80097b4:	e030      	b.n	8009818 <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 80097b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80097ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80097bc:	e02c      	b.n	8009818 <GFX_WriteLine+0x10c>
	        if (steep) {
 80097be:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d009      	beq.n	80097da <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	b21b      	sxth	r3, r3
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	b211      	sxth	r1, r2
 80097ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80097d2:	4618      	mov	r0, r3
 80097d4:	f004 f8a0 	bl	800d918 <SSD1306_DrawPixel>
 80097d8:	e008      	b.n	80097ec <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	b21b      	sxth	r3, r3
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	b211      	sxth	r1, r2
 80097e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80097e6:	4618      	mov	r0, r3
 80097e8:	f004 f896 	bl	800d918 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 80097ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80097ee:	8abb      	ldrh	r3, [r7, #20]
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80097f6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	da09      	bge.n	8009812 <GFX_WriteLine+0x106>
	            y_start += ystep;
 80097fe:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8009802:	68ba      	ldr	r2, [r7, #8]
 8009804:	4413      	add	r3, r2
 8009806:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8009808:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800980a:	8afb      	ldrh	r3, [r7, #22]
 800980c:	4413      	add	r3, r2
 800980e:	b29b      	uxth	r3, r3
 8009810:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	3301      	adds	r3, #1
 8009816:	60fb      	str	r3, [r7, #12]
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	429a      	cmp	r2, r3
 800981e:	ddce      	ble.n	80097be <GFX_WriteLine+0xb2>
	        }
	    }
}
 8009820:	bf00      	nop
 8009822:	bf00      	nop
 8009824:	3730      	adds	r7, #48	; 0x30
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b086      	sub	sp, #24
 800982e:	af02      	add	r7, sp, #8
 8009830:	60f8      	str	r0, [r7, #12]
 8009832:	60b9      	str	r1, [r7, #8]
 8009834:	607a      	str	r2, [r7, #4]
 8009836:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8009838:	68ba      	ldr	r2, [r7, #8]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4413      	add	r3, r2
 800983e:	1e5a      	subs	r2, r3, #1
 8009840:	78fb      	ldrb	r3, [r7, #3]
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	4613      	mov	r3, r2
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	68b9      	ldr	r1, [r7, #8]
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f7ff ff5e 	bl	800970c <GFX_WriteLine>
}
 8009850:	bf00      	nop
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af02      	add	r7, sp, #8
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
 8009864:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4413      	add	r3, r2
 800986c:	1e5a      	subs	r2, r3, #1
 800986e:	78fb      	ldrb	r3, [r7, #3]
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	68b9      	ldr	r1, [r7, #8]
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f7ff ff48 	bl	800970c <GFX_WriteLine>
}
 800987c:	bf00      	nop
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <GFX_DrawRectangle>:
	    }
}
#endif
#if USING_RECTANGLE == 1
void GFX_DrawRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	4611      	mov	r1, r2
 8009890:	461a      	mov	r2, r3
 8009892:	460b      	mov	r3, r1
 8009894:	80fb      	strh	r3, [r7, #6]
 8009896:	4613      	mov	r3, r2
 8009898:	80bb      	strh	r3, [r7, #4]

    GFX_DrawFastHLine(x, y, w, color);
 800989a:	88fa      	ldrh	r2, [r7, #6]
 800989c:	7e3b      	ldrb	r3, [r7, #24]
 800989e:	68b9      	ldr	r1, [r7, #8]
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f7ff ffd9 	bl	8009858 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x, y+h-1, w, color);
 80098a6:	88ba      	ldrh	r2, [r7, #4]
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	4413      	add	r3, r2
 80098ac:	1e59      	subs	r1, r3, #1
 80098ae:	88fa      	ldrh	r2, [r7, #6]
 80098b0:	7e3b      	ldrb	r3, [r7, #24]
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f7ff ffd0 	bl	8009858 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x, y, h, color);
 80098b8:	88ba      	ldrh	r2, [r7, #4]
 80098ba:	7e3b      	ldrb	r3, [r7, #24]
 80098bc:	68b9      	ldr	r1, [r7, #8]
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f7ff ffb3 	bl	800982a <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y, h, color);
 80098c4:	88fa      	ldrh	r2, [r7, #6]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	4413      	add	r3, r2
 80098ca:	1e58      	subs	r0, r3, #1
 80098cc:	88ba      	ldrh	r2, [r7, #4]
 80098ce:	7e3b      	ldrb	r3, [r7, #24]
 80098d0:	68b9      	ldr	r1, [r7, #8]
 80098d2:	f7ff ffaa 	bl	800982a <GFX_DrawFastVLine>

}
 80098d6:	bf00      	nop
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <GFX_DrawFillRectangle>:
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b086      	sub	sp, #24
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	60f8      	str	r0, [r7, #12]
 80098e6:	60b9      	str	r1, [r7, #8]
 80098e8:	4611      	mov	r1, r2
 80098ea:	461a      	mov	r2, r3
 80098ec:	460b      	mov	r3, r1
 80098ee:	80fb      	strh	r3, [r7, #6]
 80098f0:	4613      	mov	r3, r2
 80098f2:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	617b      	str	r3, [r7, #20]
 80098f8:	e009      	b.n	800990e <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 80098fa:	88ba      	ldrh	r2, [r7, #4]
 80098fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009900:	68b9      	ldr	r1, [r7, #8]
 8009902:	6978      	ldr	r0, [r7, #20]
 8009904:	f7ff ff91 	bl	800982a <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	3301      	adds	r3, #1
 800990c:	617b      	str	r3, [r7, #20]
 800990e:	88fa      	ldrh	r2, [r7, #6]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	4413      	add	r3, r2
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	429a      	cmp	r2, r3
 8009918:	dbef      	blt.n	80098fa <GFX_DrawFillRectangle+0x1c>
    }

}
 800991a:	bf00      	nop
 800991c:	bf00      	nop
 800991e:	3718      	adds	r7, #24
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <GFX_DrawCircle>:
#endif
#if USING_CIRCLE == 1
void GFX_DrawCircle(int x0, int y0, uint16_t r, uint8_t color)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b088      	sub	sp, #32
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	4611      	mov	r1, r2
 8009930:	461a      	mov	r2, r3
 8009932:	460b      	mov	r3, r1
 8009934:	80fb      	strh	r3, [r7, #6]
 8009936:	4613      	mov	r3, r2
 8009938:	717b      	strb	r3, [r7, #5]
    int16_t f = 1 - r;
 800993a:	88fb      	ldrh	r3, [r7, #6]
 800993c:	f1c3 0301 	rsb	r3, r3, #1
 8009940:	b29b      	uxth	r3, r3
 8009942:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8009944:	2301      	movs	r3, #1
 8009946:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8009948:	88fb      	ldrh	r3, [r7, #6]
 800994a:	461a      	mov	r2, r3
 800994c:	03d2      	lsls	r2, r2, #15
 800994e:	1ad3      	subs	r3, r2, r3
 8009950:	005b      	lsls	r3, r3, #1
 8009952:	b29b      	uxth	r3, r3
 8009954:	837b      	strh	r3, [r7, #26]
    int16_t x = 0;
 8009956:	2300      	movs	r3, #0
 8009958:	833b      	strh	r3, [r7, #24]
    int16_t y = r;
 800995a:	88fb      	ldrh	r3, [r7, #6]
 800995c:	82fb      	strh	r3, [r7, #22]

    GFX_DrawPixel(x0  , y0+r, color);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	b218      	sxth	r0, r3
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	b29a      	uxth	r2, r3
 8009966:	88fb      	ldrh	r3, [r7, #6]
 8009968:	4413      	add	r3, r2
 800996a:	b29b      	uxth	r3, r3
 800996c:	b21b      	sxth	r3, r3
 800996e:	797a      	ldrb	r2, [r7, #5]
 8009970:	4619      	mov	r1, r3
 8009972:	f003 ffd1 	bl	800d918 <SSD1306_DrawPixel>
    GFX_DrawPixel(x0  , y0-r, color);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	b218      	sxth	r0, r3
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	b29a      	uxth	r2, r3
 800997e:	88fb      	ldrh	r3, [r7, #6]
 8009980:	1ad3      	subs	r3, r2, r3
 8009982:	b29b      	uxth	r3, r3
 8009984:	b21b      	sxth	r3, r3
 8009986:	797a      	ldrb	r2, [r7, #5]
 8009988:	4619      	mov	r1, r3
 800998a:	f003 ffc5 	bl	800d918 <SSD1306_DrawPixel>
    GFX_DrawPixel(x0+r, y0  , color);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	b29a      	uxth	r2, r3
 8009992:	88fb      	ldrh	r3, [r7, #6]
 8009994:	4413      	add	r3, r2
 8009996:	b29b      	uxth	r3, r3
 8009998:	b21b      	sxth	r3, r3
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	b211      	sxth	r1, r2
 800999e:	797a      	ldrb	r2, [r7, #5]
 80099a0:	4618      	mov	r0, r3
 80099a2:	f003 ffb9 	bl	800d918 <SSD1306_DrawPixel>
    GFX_DrawPixel(x0-r, y0  , color);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	b29a      	uxth	r2, r3
 80099aa:	88fb      	ldrh	r3, [r7, #6]
 80099ac:	1ad3      	subs	r3, r2, r3
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	b21b      	sxth	r3, r3
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	b211      	sxth	r1, r2
 80099b6:	797a      	ldrb	r2, [r7, #5]
 80099b8:	4618      	mov	r0, r3
 80099ba:	f003 ffad 	bl	800d918 <SSD1306_DrawPixel>

    while (x<y) {
 80099be:	e0a1      	b.n	8009b04 <GFX_DrawCircle+0x1e0>
        if (f >= 0) {
 80099c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	db0e      	blt.n	80099e6 <GFX_DrawCircle+0xc2>
            y--;
 80099c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	3b01      	subs	r3, #1
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80099d4:	8b7b      	ldrh	r3, [r7, #26]
 80099d6:	3302      	adds	r3, #2
 80099d8:	b29b      	uxth	r3, r3
 80099da:	837b      	strh	r3, [r7, #26]
            f += ddF_y;
 80099dc:	8bfa      	ldrh	r2, [r7, #30]
 80099de:	8b7b      	ldrh	r3, [r7, #26]
 80099e0:	4413      	add	r3, r2
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80099e6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	3301      	adds	r3, #1
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80099f2:	8bbb      	ldrh	r3, [r7, #28]
 80099f4:	3302      	adds	r3, #2
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	83bb      	strh	r3, [r7, #28]
        f += ddF_x;
 80099fa:	8bfa      	ldrh	r2, [r7, #30]
 80099fc:	8bbb      	ldrh	r3, [r7, #28]
 80099fe:	4413      	add	r3, r2
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	83fb      	strh	r3, [r7, #30]

        GFX_DrawPixel(x0 + x, y0 + y, color);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	8b3b      	ldrh	r3, [r7, #24]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	b218      	sxth	r0, r3
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	b29a      	uxth	r2, r3
 8009a14:	8afb      	ldrh	r3, [r7, #22]
 8009a16:	4413      	add	r3, r2
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	b21b      	sxth	r3, r3
 8009a1c:	797a      	ldrb	r2, [r7, #5]
 8009a1e:	4619      	mov	r1, r3
 8009a20:	f003 ff7a 	bl	800d918 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 - x, y0 + y, color);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	8b3b      	ldrh	r3, [r7, #24]
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	b218      	sxth	r0, r3
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	8afb      	ldrh	r3, [r7, #22]
 8009a36:	4413      	add	r3, r2
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	b21b      	sxth	r3, r3
 8009a3c:	797a      	ldrb	r2, [r7, #5]
 8009a3e:	4619      	mov	r1, r3
 8009a40:	f003 ff6a 	bl	800d918 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 + x, y0 - y, color);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	8b3b      	ldrh	r3, [r7, #24]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	b218      	sxth	r0, r3
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	b29a      	uxth	r2, r3
 8009a54:	8afb      	ldrh	r3, [r7, #22]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	b21b      	sxth	r3, r3
 8009a5c:	797a      	ldrb	r2, [r7, #5]
 8009a5e:	4619      	mov	r1, r3
 8009a60:	f003 ff5a 	bl	800d918 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 - x, y0 - y, color);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	8b3b      	ldrh	r3, [r7, #24]
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	b218      	sxth	r0, r3
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	8afb      	ldrh	r3, [r7, #22]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	b21b      	sxth	r3, r3
 8009a7c:	797a      	ldrb	r2, [r7, #5]
 8009a7e:	4619      	mov	r1, r3
 8009a80:	f003 ff4a 	bl	800d918 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 + y, y0 + x, color);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	8afb      	ldrh	r3, [r7, #22]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	b218      	sxth	r0, r3
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	b29a      	uxth	r2, r3
 8009a94:	8b3b      	ldrh	r3, [r7, #24]
 8009a96:	4413      	add	r3, r2
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	b21b      	sxth	r3, r3
 8009a9c:	797a      	ldrb	r2, [r7, #5]
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	f003 ff3a 	bl	800d918 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 - y, y0 + x, color);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	8afb      	ldrh	r3, [r7, #22]
 8009aaa:	1ad3      	subs	r3, r2, r3
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	b218      	sxth	r0, r3
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	8b3b      	ldrh	r3, [r7, #24]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	b21b      	sxth	r3, r3
 8009abc:	797a      	ldrb	r2, [r7, #5]
 8009abe:	4619      	mov	r1, r3
 8009ac0:	f003 ff2a 	bl	800d918 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 + y, y0 - x, color);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	8afb      	ldrh	r3, [r7, #22]
 8009aca:	4413      	add	r3, r2
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	b218      	sxth	r0, r3
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	8b3b      	ldrh	r3, [r7, #24]
 8009ad6:	1ad3      	subs	r3, r2, r3
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	b21b      	sxth	r3, r3
 8009adc:	797a      	ldrb	r2, [r7, #5]
 8009ade:	4619      	mov	r1, r3
 8009ae0:	f003 ff1a 	bl	800d918 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 - y, y0 - x, color);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	8afb      	ldrh	r3, [r7, #22]
 8009aea:	1ad3      	subs	r3, r2, r3
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	b218      	sxth	r0, r3
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	8b3b      	ldrh	r3, [r7, #24]
 8009af6:	1ad3      	subs	r3, r2, r3
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	b21b      	sxth	r3, r3
 8009afc:	797a      	ldrb	r2, [r7, #5]
 8009afe:	4619      	mov	r1, r3
 8009b00:	f003 ff0a 	bl	800d918 <SSD1306_DrawPixel>
    while (x<y) {
 8009b04:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8009b08:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	f6ff af57 	blt.w	80099c0 <GFX_DrawCircle+0x9c>
    }

}
 8009b12:	bf00      	nop
 8009b14:	bf00      	nop
 8009b16:	3720      	adds	r7, #32
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <GFX_DrawFillCircleHelper>:
    }
}
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, uint8_t color)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b088      	sub	sp, #32
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	4611      	mov	r1, r2
 8009b28:	461a      	mov	r2, r3
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	80fb      	strh	r3, [r7, #6]
 8009b2e:	4613      	mov	r3, r2
 8009b30:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8009b32:	88fb      	ldrh	r3, [r7, #6]
 8009b34:	f1c3 0301 	rsb	r3, r3, #1
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8009b40:	88fb      	ldrh	r3, [r7, #6]
 8009b42:	461a      	mov	r2, r3
 8009b44:	03d2      	lsls	r2, r2, #15
 8009b46:	1ad3      	subs	r3, r2, r3
 8009b48:	005b      	lsls	r3, r3, #1
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8009b52:	88fb      	ldrh	r3, [r7, #6]
 8009b54:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8009b56:	e077      	b.n	8009c48 <GFX_DrawFillCircleHelper+0x12c>
        if (f >= 0) {
 8009b58:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	db0e      	blt.n	8009b7e <GFX_DrawFillCircleHelper+0x62>
            y--;
 8009b60:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	3b01      	subs	r3, #1
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8009b6c:	8b7b      	ldrh	r3, [r7, #26]
 8009b6e:	3302      	adds	r3, #2
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8009b74:	8bfa      	ldrh	r2, [r7, #30]
 8009b76:	8b7b      	ldrh	r3, [r7, #26]
 8009b78:	4413      	add	r3, r2
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8009b7e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	3301      	adds	r3, #1
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8009b8a:	8bbb      	ldrh	r3, [r7, #28]
 8009b8c:	3302      	adds	r3, #2
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8009b92:	8bfa      	ldrh	r2, [r7, #30]
 8009b94:	8bbb      	ldrh	r3, [r7, #28]
 8009b96:	4413      	add	r3, r2
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8009b9c:	797b      	ldrb	r3, [r7, #5]
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d025      	beq.n	8009bf2 <GFX_DrawFillCircleHelper+0xd6>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 8009ba6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	18d0      	adds	r0, r2, r3
 8009bae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	1ad1      	subs	r1, r2, r3
 8009bb6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009bba:	005b      	lsls	r3, r3, #1
 8009bbc:	1c5a      	adds	r2, r3, #1
 8009bbe:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8009bc2:	441a      	add	r2, r3
 8009bc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009bc8:	f7ff fe2f 	bl	800982a <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8009bcc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	18d0      	adds	r0, r2, r3
 8009bd4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009bd8:	68ba      	ldr	r2, [r7, #8]
 8009bda:	1ad1      	subs	r1, r2, r3
 8009bdc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009be0:	005b      	lsls	r3, r3, #1
 8009be2:	1c5a      	adds	r2, r3, #1
 8009be4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8009be8:	441a      	add	r2, r3
 8009bea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009bee:	f7ff fe1c 	bl	800982a <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 8009bf2:	797b      	ldrb	r3, [r7, #5]
 8009bf4:	f003 0302 	and.w	r3, r3, #2
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d025      	beq.n	8009c48 <GFX_DrawFillCircleHelper+0x12c>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 8009bfc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	1ad0      	subs	r0, r2, r3
 8009c04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009c08:	68ba      	ldr	r2, [r7, #8]
 8009c0a:	1ad1      	subs	r1, r2, r3
 8009c0c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009c10:	005b      	lsls	r3, r3, #1
 8009c12:	1c5a      	adds	r2, r3, #1
 8009c14:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8009c18:	441a      	add	r2, r3
 8009c1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009c1e:	f7ff fe04 	bl	800982a <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8009c22:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009c26:	68fa      	ldr	r2, [r7, #12]
 8009c28:	1ad0      	subs	r0, r2, r3
 8009c2a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009c2e:	68ba      	ldr	r2, [r7, #8]
 8009c30:	1ad1      	subs	r1, r2, r3
 8009c32:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8009c36:	005b      	lsls	r3, r3, #1
 8009c38:	1c5a      	adds	r2, r3, #1
 8009c3a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8009c3e:	441a      	add	r2, r3
 8009c40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009c44:	f7ff fdf1 	bl	800982a <GFX_DrawFastVLine>
    while (x<y) {
 8009c48:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8009c4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	db81      	blt.n	8009b58 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 8009c54:	bf00      	nop
 8009c56:	bf00      	nop
 8009c58:	3720      	adds	r7, #32
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <GFX_DrawFillCircle>:
#endif
#if USING_FILL_CIRCLE == 1
void GFX_DrawFillCircle(int x0, int y0, uint16_t r, uint8_t color)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b086      	sub	sp, #24
 8009c62:	af02      	add	r7, sp, #8
 8009c64:	60f8      	str	r0, [r7, #12]
 8009c66:	60b9      	str	r1, [r7, #8]
 8009c68:	4611      	mov	r1, r2
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	80fb      	strh	r3, [r7, #6]
 8009c70:	4613      	mov	r3, r2
 8009c72:	717b      	strb	r3, [r7, #5]

	GFX_DrawFastVLine(x0, y0-r, 2*r+1, color);
 8009c74:	88fb      	ldrh	r3, [r7, #6]
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	1ad1      	subs	r1, r2, r3
 8009c7a:	88fb      	ldrh	r3, [r7, #6]
 8009c7c:	005b      	lsls	r3, r3, #1
 8009c7e:	1c5a      	adds	r2, r3, #1
 8009c80:	797b      	ldrb	r3, [r7, #5]
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f7ff fdd1 	bl	800982a <GFX_DrawFastVLine>
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
 8009c88:	88fa      	ldrh	r2, [r7, #6]
 8009c8a:	797b      	ldrb	r3, [r7, #5]
 8009c8c:	9301      	str	r3, [sp, #4]
 8009c8e:	2300      	movs	r3, #0
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	2303      	movs	r3, #3
 8009c94:	68b9      	ldr	r1, [r7, #8]
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	f7ff ff40 	bl	8009b1c <GFX_DrawFillCircleHelper>
}
 8009c9c:	bf00      	nop
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <m24cxxInit>:
#include "main.h"



void m24cxxInit(m24cxx_t *m24, I2C_HandleTypeDef *i2c, uint8_t addr, uint16_t memsize, GPIO_TypeDef *WcPort, uint16_t WcPin)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	4611      	mov	r1, r2
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	71fb      	strb	r3, [r7, #7]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	80bb      	strh	r3, [r7, #4]
	m24 -> addr    = addr<<1;
 8009cba:	79fb      	ldrb	r3, [r7, #7]
 8009cbc:	005b      	lsls	r3, r3, #1
 8009cbe:	b2da      	uxtb	r2, r3
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	701a      	strb	r2, [r3, #0]
	m24 -> i2c     = i2c;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	605a      	str	r2, [r3, #4]
	m24 -> memsize = memsize;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	88ba      	ldrh	r2, [r7, #4]
 8009cce:	811a      	strh	r2, [r3, #8]
	m24 -> WcPort  = WcPort;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	69ba      	ldr	r2, [r7, #24]
 8009cd4:	60da      	str	r2, [r3, #12]
	m24 -> WcPin   = WcPin;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	8bba      	ldrh	r2, [r7, #28]
 8009cda:	821a      	strh	r2, [r3, #16]
	HAL_GPIO_WritePin(m24->WcPort, m24->WcPin, SET);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	68d8      	ldr	r0, [r3, #12]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	8a1b      	ldrh	r3, [r3, #16]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	f006 fc1d 	bl	8010526 <HAL_GPIO_WritePin>
}
 8009cec:	bf00      	nop
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <m24cxxRead8Bit>:

HAL_StatusTypeDef m24cxxRead8Bit(m24cxx_t *m24, uint8_t DataAddr, uint8_t *Data)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b088      	sub	sp, #32
 8009cf8:	af02      	add	r7, sp, #8
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	607a      	str	r2, [r7, #4]
 8009d00:	72fb      	strb	r3, [r7, #11]
	int32_t i = 0;
 8009d02:	2300      	movs	r3, #0
 8009d04:	617b      	str	r3, [r7, #20]
	while((m24->i2c)->hdmarx->State != HAL_DMA_STATE_READY && i<=200000)
 8009d06:	e002      	b.n	8009d0e <m24cxxRead8Bit+0x1a>
	{
		i++;
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	617b      	str	r3, [r7, #20]
	while((m24->i2c)->hdmarx->State != HAL_DMA_STATE_READY && i<=200000)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d003      	beq.n	8009d26 <m24cxxRead8Bit+0x32>
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	4a12      	ldr	r2, [pc, #72]	; (8009d6c <m24cxxRead8Bit+0x78>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	ddf0      	ble.n	8009d08 <m24cxxRead8Bit+0x14>
	}
	if((m24->i2c)->hdmarx->State == HAL_DMA_STATE_READY)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d10f      	bne.n	8009d56 <m24cxxRead8Bit+0x62>
	{
	HAL_I2C_Mem_Read_DMA(m24 ->i2c, m24 -> addr, DataAddr, 1, Data, 1);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6858      	ldr	r0, [r3, #4]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	b299      	uxth	r1, r3
 8009d40:	7afb      	ldrb	r3, [r7, #11]
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	2301      	movs	r3, #1
 8009d46:	9301      	str	r3, [sp, #4]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	9300      	str	r3, [sp, #0]
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	f007 fa43 	bl	80111d8 <HAL_I2C_Mem_Read_DMA>
	return HAL_OK;
 8009d52:	2300      	movs	r3, #0
 8009d54:	e005      	b.n	8009d62 <m24cxxRead8Bit+0x6e>
	}
	else
	{
		ERROR_EEPROM;
 8009d56:	4a06      	ldr	r2, [pc, #24]	; (8009d70 <m24cxxRead8Bit+0x7c>)
 8009d58:	7813      	ldrb	r3, [r2, #0]
 8009d5a:	f043 0304 	orr.w	r3, r3, #4
 8009d5e:	7013      	strb	r3, [r2, #0]
		return HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
	}
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3718      	adds	r7, #24
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	00030d40 	.word	0x00030d40
 8009d70:	20001ea4 	.word	0x20001ea4

08009d74 <m24cxxWrite8Bit>:
{
	HAL_I2C_Mem_Read(m24 ->i2c, m24 -> addr, DataAddr, 1, Data, 1, 500);
}

HAL_StatusTypeDef m24cxxWrite8Bit(m24cxx_t *m24, uint8_t DataAddr, uint8_t *Data)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b088      	sub	sp, #32
 8009d78:	af02      	add	r7, sp, #8
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	607a      	str	r2, [r7, #4]
 8009d80:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(m24->WcPort, m24->WcPin, RESET);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	68d8      	ldr	r0, [r3, #12]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	8a1b      	ldrh	r3, [r3, #16]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	f006 fbca 	bl	8010526 <HAL_GPIO_WritePin>
	m24 -> WcIsZero = 1;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2201      	movs	r2, #1
 8009d96:	749a      	strb	r2, [r3, #18]
	int32_t i = 0;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	617b      	str	r3, [r7, #20]
	while((m24->i2c)->hdmatx->State != HAL_DMA_STATE_READY && i<=200000)
 8009d9c:	e002      	b.n	8009da4 <m24cxxWrite8Bit+0x30>
	{
		i++;
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	3301      	adds	r3, #1
 8009da2:	617b      	str	r3, [r7, #20]
	while((m24->i2c)->hdmatx->State != HAL_DMA_STATE_READY && i<=200000)
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	685b      	ldr	r3, [r3, #4]
 8009da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009daa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d003      	beq.n	8009dbc <m24cxxWrite8Bit+0x48>
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	4a15      	ldr	r2, [pc, #84]	; (8009e0c <m24cxxWrite8Bit+0x98>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	ddf0      	ble.n	8009d9e <m24cxxWrite8Bit+0x2a>
	}
	if((m24->i2c)->hdmatx->State == HAL_DMA_STATE_READY)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d114      	bne.n	8009df6 <m24cxxWrite8Bit+0x82>
	{
	HAL_I2C_Mem_Write_DMA(m24 -> i2c, m24 -> addr, DataAddr, 1, Data, 1);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6858      	ldr	r0, [r3, #4]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	b299      	uxth	r1, r3
 8009dd6:	7afb      	ldrb	r3, [r7, #11]
 8009dd8:	b29a      	uxth	r2, r3
 8009dda:	2301      	movs	r3, #1
 8009ddc:	9301      	str	r3, [sp, #4]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	9300      	str	r3, [sp, #0]
 8009de2:	2301      	movs	r3, #1
 8009de4:	f007 f8a2 	bl	8010f2c <HAL_I2C_Mem_Write_DMA>
	m24 -> OldTickWriteEeprom = HAL_GetTick();
 8009de8:	f004 fce0 	bl	800e7ac <HAL_GetTick>
 8009dec:	4602      	mov	r2, r0
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	615a      	str	r2, [r3, #20]
	return HAL_OK;
 8009df2:	2300      	movs	r3, #0
 8009df4:	e005      	b.n	8009e02 <m24cxxWrite8Bit+0x8e>
	}
	else
	{	ERROR_EEPROM;
 8009df6:	4a06      	ldr	r2, [pc, #24]	; (8009e10 <m24cxxWrite8Bit+0x9c>)
 8009df8:	7813      	ldrb	r3, [r2, #0]
 8009dfa:	f043 0304 	orr.w	r3, r3, #4
 8009dfe:	7013      	strb	r3, [r2, #0]
		return HAL_ERROR;
 8009e00:	2301      	movs	r3, #1
	}
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3718      	adds	r7, #24
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	00030d40 	.word	0x00030d40
 8009e10:	20001ea4 	.word	0x20001ea4

08009e14 <m24cxxFullRead>:
		return HAL_ERROR;
	}
}

uint8_t m24cxxFullRead(m24cxx_t *m24, uint8_t *Data)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b086      	sub	sp, #24
 8009e18:	af02      	add	r7, sp, #8
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
	int32_t i = 0;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60fb      	str	r3, [r7, #12]
	while((m24->i2c)->hdmarx->State != HAL_DMA_STATE_READY && i<=200000)
 8009e22:	e002      	b.n	8009e2a <m24cxxFullRead+0x16>
	{
		i++;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	3301      	adds	r3, #1
 8009e28:	60fb      	str	r3, [r7, #12]
	while((m24->i2c)->hdmarx->State != HAL_DMA_STATE_READY && i<=200000)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d003      	beq.n	8009e42 <m24cxxFullRead+0x2e>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	4a0f      	ldr	r2, [pc, #60]	; (8009e7c <m24cxxFullRead+0x68>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	ddf0      	ble.n	8009e24 <m24cxxFullRead+0x10>
	}
	if((m24->i2c)->hdmarx->State == HAL_DMA_STATE_READY)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d10f      	bne.n	8009e72 <m24cxxFullRead+0x5e>
	{
	HAL_I2C_Mem_Read_DMA(m24 -> i2c, m24 -> addr, 0x00, 1, Data, m24 -> memsize);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6858      	ldr	r0, [r3, #4]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	b299      	uxth	r1, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	891b      	ldrh	r3, [r3, #8]
 8009e60:	9301      	str	r3, [sp, #4]
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	2301      	movs	r3, #1
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f007 f9b5 	bl	80111d8 <HAL_I2C_Mem_Read_DMA>
	return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	e000      	b.n	8009e74 <m24cxxFullRead+0x60>
	}
	else
	{
		return HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
	}
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	00030d40 	.word	0x00030d40

08009e80 <m24cxxFullReadWoDma>:

void m24cxxFullReadWoDma(m24cxx_t *m24, uint8_t *Data)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b086      	sub	sp, #24
 8009e84:	af04      	add	r7, sp, #16
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Read(m24 -> i2c, m24 -> addr, 0x00, 1, Data, m24 -> memsize, 1000);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6858      	ldr	r0, [r3, #4]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	b299      	uxth	r1, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	891b      	ldrh	r3, [r3, #8]
 8009e98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e9c:	9202      	str	r2, [sp, #8]
 8009e9e:	9301      	str	r3, [sp, #4]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f006 fdd8 	bl	8010a5c <HAL_I2C_Mem_Read>
}
 8009eac:	bf00      	nop
 8009eae:	3708      	adds	r7, #8
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <m24cxxWcSetIt>:
		}
	HAL_GPIO_WritePin(m24->WcPort, m24->WcPin, SET);
}

void m24cxxWcSetIt(m24cxx_t *m24, I2C_HandleTypeDef *hi2c)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
	if(hi2c->Instance == m24->i2c->Instance && m24->WcIsZero == 1)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d10e      	bne.n	8009eea <m24cxxWcSetIt+0x36>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	7c9b      	ldrb	r3, [r3, #18]
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d10a      	bne.n	8009eea <m24cxxWcSetIt+0x36>
	{
		HAL_GPIO_WritePin(m24->WcPort, m24->WcPin, SET);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	68d8      	ldr	r0, [r3, #12]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	8a1b      	ldrh	r3, [r3, #16]
 8009edc:	2201      	movs	r2, #1
 8009ede:	4619      	mov	r1, r3
 8009ee0:	f006 fb21 	bl	8010526 <HAL_GPIO_WritePin>
		m24->WcIsZero = 0;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	749a      	strb	r2, [r3, #18]
	}
}
 8009eea:	bf00      	nop
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
	...

08009ef4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009efa:	1d3b      	adds	r3, r7, #4
 8009efc:	2200      	movs	r2, #0
 8009efe:	601a      	str	r2, [r3, #0]
 8009f00:	605a      	str	r2, [r3, #4]
 8009f02:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8009f04:	4b2e      	ldr	r3, [pc, #184]	; (8009fc0 <MX_ADC1_Init+0xcc>)
 8009f06:	4a2f      	ldr	r2, [pc, #188]	; (8009fc4 <MX_ADC1_Init+0xd0>)
 8009f08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8009f0a:	4b2d      	ldr	r3, [pc, #180]	; (8009fc0 <MX_ADC1_Init+0xcc>)
 8009f0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f10:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8009f12:	4b2b      	ldr	r3, [pc, #172]	; (8009fc0 <MX_ADC1_Init+0xcc>)
 8009f14:	2201      	movs	r2, #1
 8009f16:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8009f18:	4b29      	ldr	r3, [pc, #164]	; (8009fc0 <MX_ADC1_Init+0xcc>)
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009f1e:	4b28      	ldr	r3, [pc, #160]	; (8009fc0 <MX_ADC1_Init+0xcc>)
 8009f20:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8009f24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009f26:	4b26      	ldr	r3, [pc, #152]	; (8009fc0 <MX_ADC1_Init+0xcc>)
 8009f28:	2200      	movs	r2, #0
 8009f2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8009f2c:	4b24      	ldr	r3, [pc, #144]	; (8009fc0 <MX_ADC1_Init+0xcc>)
 8009f2e:	2204      	movs	r2, #4
 8009f30:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8009f32:	4823      	ldr	r0, [pc, #140]	; (8009fc0 <MX_ADC1_Init+0xcc>)
 8009f34:	f004 fc86 	bl	800e844 <HAL_ADC_Init>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8009f3e:	f002 fcdb 	bl	800c8f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8009f42:	2306      	movs	r3, #6
 8009f44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009f46:	2301      	movs	r3, #1
 8009f48:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8009f4a:	2307      	movs	r3, #7
 8009f4c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009f4e:	1d3b      	adds	r3, r7, #4
 8009f50:	4619      	mov	r1, r3
 8009f52:	481b      	ldr	r0, [pc, #108]	; (8009fc0 <MX_ADC1_Init+0xcc>)
 8009f54:	f005 f826 	bl	800efa4 <HAL_ADC_ConfigChannel>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d001      	beq.n	8009f62 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8009f5e:	f002 fccb 	bl	800c8f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8009f62:	2307      	movs	r3, #7
 8009f64:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8009f66:	2302      	movs	r3, #2
 8009f68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009f6a:	1d3b      	adds	r3, r7, #4
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	4814      	ldr	r0, [pc, #80]	; (8009fc0 <MX_ADC1_Init+0xcc>)
 8009f70:	f005 f818 	bl	800efa4 <HAL_ADC_ConfigChannel>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8009f7a:	f002 fcbd 	bl	800c8f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8009f7e:	2308      	movs	r3, #8
 8009f80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8009f82:	2303      	movs	r3, #3
 8009f84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009f86:	1d3b      	adds	r3, r7, #4
 8009f88:	4619      	mov	r1, r3
 8009f8a:	480d      	ldr	r0, [pc, #52]	; (8009fc0 <MX_ADC1_Init+0xcc>)
 8009f8c:	f005 f80a 	bl	800efa4 <HAL_ADC_ConfigChannel>
 8009f90:	4603      	mov	r3, r0
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d001      	beq.n	8009f9a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8009f96:	f002 fcaf 	bl	800c8f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8009f9a:	2310      	movs	r3, #16
 8009f9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8009f9e:	2304      	movs	r3, #4
 8009fa0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009fa2:	1d3b      	adds	r3, r7, #4
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	4806      	ldr	r0, [pc, #24]	; (8009fc0 <MX_ADC1_Init+0xcc>)
 8009fa8:	f004 fffc 	bl	800efa4 <HAL_ADC_ConfigChannel>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d001      	beq.n	8009fb6 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8009fb2:	f002 fca1 	bl	800c8f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8009fb6:	bf00      	nop
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	20000c04 	.word	0x20000c04
 8009fc4:	40012400 	.word	0x40012400

08009fc8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b08a      	sub	sp, #40	; 0x28
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fd0:	f107 0318 	add.w	r3, r7, #24
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	601a      	str	r2, [r3, #0]
 8009fd8:	605a      	str	r2, [r3, #4]
 8009fda:	609a      	str	r2, [r3, #8]
 8009fdc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a33      	ldr	r2, [pc, #204]	; (800a0b0 <HAL_ADC_MspInit+0xe8>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d15f      	bne.n	800a0a8 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009fe8:	4b32      	ldr	r3, [pc, #200]	; (800a0b4 <HAL_ADC_MspInit+0xec>)
 8009fea:	699b      	ldr	r3, [r3, #24]
 8009fec:	4a31      	ldr	r2, [pc, #196]	; (800a0b4 <HAL_ADC_MspInit+0xec>)
 8009fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ff2:	6193      	str	r3, [r2, #24]
 8009ff4:	4b2f      	ldr	r3, [pc, #188]	; (800a0b4 <HAL_ADC_MspInit+0xec>)
 8009ff6:	699b      	ldr	r3, [r3, #24]
 8009ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ffc:	617b      	str	r3, [r7, #20]
 8009ffe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a000:	4b2c      	ldr	r3, [pc, #176]	; (800a0b4 <HAL_ADC_MspInit+0xec>)
 800a002:	699b      	ldr	r3, [r3, #24]
 800a004:	4a2b      	ldr	r2, [pc, #172]	; (800a0b4 <HAL_ADC_MspInit+0xec>)
 800a006:	f043 0304 	orr.w	r3, r3, #4
 800a00a:	6193      	str	r3, [r2, #24]
 800a00c:	4b29      	ldr	r3, [pc, #164]	; (800a0b4 <HAL_ADC_MspInit+0xec>)
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	f003 0304 	and.w	r3, r3, #4
 800a014:	613b      	str	r3, [r7, #16]
 800a016:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a018:	4b26      	ldr	r3, [pc, #152]	; (800a0b4 <HAL_ADC_MspInit+0xec>)
 800a01a:	699b      	ldr	r3, [r3, #24]
 800a01c:	4a25      	ldr	r2, [pc, #148]	; (800a0b4 <HAL_ADC_MspInit+0xec>)
 800a01e:	f043 0308 	orr.w	r3, r3, #8
 800a022:	6193      	str	r3, [r2, #24]
 800a024:	4b23      	ldr	r3, [pc, #140]	; (800a0b4 <HAL_ADC_MspInit+0xec>)
 800a026:	699b      	ldr	r3, [r3, #24]
 800a028:	f003 0308 	and.w	r3, r3, #8
 800a02c:	60fb      	str	r3, [r7, #12]
 800a02e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a030:	23c0      	movs	r3, #192	; 0xc0
 800a032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a034:	2303      	movs	r3, #3
 800a036:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a038:	f107 0318 	add.w	r3, r7, #24
 800a03c:	4619      	mov	r1, r3
 800a03e:	481e      	ldr	r0, [pc, #120]	; (800a0b8 <HAL_ADC_MspInit+0xf0>)
 800a040:	f005 fffa 	bl	8010038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800a044:	2301      	movs	r3, #1
 800a046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a048:	2303      	movs	r3, #3
 800a04a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a04c:	f107 0318 	add.w	r3, r7, #24
 800a050:	4619      	mov	r1, r3
 800a052:	481a      	ldr	r0, [pc, #104]	; (800a0bc <HAL_ADC_MspInit+0xf4>)
 800a054:	f005 fff0 	bl	8010038 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800a058:	4b19      	ldr	r3, [pc, #100]	; (800a0c0 <HAL_ADC_MspInit+0xf8>)
 800a05a:	4a1a      	ldr	r2, [pc, #104]	; (800a0c4 <HAL_ADC_MspInit+0xfc>)
 800a05c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a05e:	4b18      	ldr	r3, [pc, #96]	; (800a0c0 <HAL_ADC_MspInit+0xf8>)
 800a060:	2200      	movs	r2, #0
 800a062:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800a064:	4b16      	ldr	r3, [pc, #88]	; (800a0c0 <HAL_ADC_MspInit+0xf8>)
 800a066:	2200      	movs	r2, #0
 800a068:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800a06a:	4b15      	ldr	r3, [pc, #84]	; (800a0c0 <HAL_ADC_MspInit+0xf8>)
 800a06c:	2280      	movs	r2, #128	; 0x80
 800a06e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a070:	4b13      	ldr	r3, [pc, #76]	; (800a0c0 <HAL_ADC_MspInit+0xf8>)
 800a072:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a076:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a078:	4b11      	ldr	r3, [pc, #68]	; (800a0c0 <HAL_ADC_MspInit+0xf8>)
 800a07a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a07e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800a080:	4b0f      	ldr	r3, [pc, #60]	; (800a0c0 <HAL_ADC_MspInit+0xf8>)
 800a082:	2220      	movs	r2, #32
 800a084:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800a086:	4b0e      	ldr	r3, [pc, #56]	; (800a0c0 <HAL_ADC_MspInit+0xf8>)
 800a088:	2200      	movs	r2, #0
 800a08a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800a08c:	480c      	ldr	r0, [pc, #48]	; (800a0c0 <HAL_ADC_MspInit+0xf8>)
 800a08e:	f005 facb 	bl	800f628 <HAL_DMA_Init>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 800a098:	f002 fc2e 	bl	800c8f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4a08      	ldr	r2, [pc, #32]	; (800a0c0 <HAL_ADC_MspInit+0xf8>)
 800a0a0:	621a      	str	r2, [r3, #32]
 800a0a2:	4a07      	ldr	r2, [pc, #28]	; (800a0c0 <HAL_ADC_MspInit+0xf8>)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800a0a8:	bf00      	nop
 800a0aa:	3728      	adds	r7, #40	; 0x28
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	40012400 	.word	0x40012400
 800a0b4:	40021000 	.word	0x40021000
 800a0b8:	40010800 	.word	0x40010800
 800a0bc:	40010c00 	.word	0x40010c00
 800a0c0:	20000c34 	.word	0x20000c34
 800a0c4:	40020008 	.word	0x40020008

0800a0c8 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a0e      	ldr	r2, [pc, #56]	; (800a110 <HAL_ADC_MspDeInit+0x48>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d115      	bne.n	800a106 <HAL_ADC_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 800a0da:	4b0e      	ldr	r3, [pc, #56]	; (800a114 <HAL_ADC_MspDeInit+0x4c>)
 800a0dc:	699b      	ldr	r3, [r3, #24]
 800a0de:	4a0d      	ldr	r2, [pc, #52]	; (800a114 <HAL_ADC_MspDeInit+0x4c>)
 800a0e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0e4:	6193      	str	r3, [r2, #24]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 800a0e6:	21c0      	movs	r1, #192	; 0xc0
 800a0e8:	480b      	ldr	r0, [pc, #44]	; (800a118 <HAL_ADC_MspDeInit+0x50>)
 800a0ea:	f006 f939 	bl	8010360 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0);
 800a0ee:	2101      	movs	r1, #1
 800a0f0:	480a      	ldr	r0, [pc, #40]	; (800a11c <HAL_ADC_MspDeInit+0x54>)
 800a0f2:	f006 f935 	bl	8010360 <HAL_GPIO_DeInit>

    /* ADC1 DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f005 fb0a 	bl	800f714 <HAL_DMA_DeInit>

    /* ADC1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(ADC1_2_IRQn);
 800a100:	2012      	movs	r0, #18
 800a102:	f005 fa76 	bl	800f5f2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
}
 800a106:	bf00      	nop
 800a108:	3708      	adds	r7, #8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	40012400 	.word	0x40012400
 800a114:	40021000 	.word	0x40021000
 800a118:	40010800 	.word	0x40010800
 800a11c:	40010c00 	.word	0x40010c00

0800a120 <ButtonInitKey>:
#include "main.h"
#include "button.h"

//Button init
void ButtonInitKey(button_t * Key, GPIO_TypeDef *GpioPort, uint16_t GpioPin, uint32_t TimerDebounce, uint32_t TimerLongPressed, uint32_t TimerRepeat)
{
 800a120:	b480      	push	{r7}
 800a122:	b085      	sub	sp, #20
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	603b      	str	r3, [r7, #0]
 800a12c:	4613      	mov	r3, r2
 800a12e:	80fb      	strh	r3, [r7, #6]
	Key->State = IDLE;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2200      	movs	r2, #0
 800a134:	701a      	strb	r2, [r3, #0]
	Key->GpioPort = GpioPort;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	605a      	str	r2, [r3, #4]
	Key->GpioPin = GpioPin;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	88fa      	ldrh	r2, [r7, #6]
 800a140:	811a      	strh	r2, [r3, #8]
	Key->TimerDebounce = TimerDebounce;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	683a      	ldr	r2, [r7, #0]
 800a146:	611a      	str	r2, [r3, #16]
	Key->TimerLongPressed = TimerLongPressed;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	69ba      	ldr	r2, [r7, #24]
 800a14c:	615a      	str	r2, [r3, #20]
	Key->TimerRepeat = TimerRepeat;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	69fa      	ldr	r2, [r7, #28]
 800a152:	619a      	str	r2, [r3, #24]
}
 800a154:	bf00      	nop
 800a156:	3714      	adds	r7, #20
 800a158:	46bd      	mov	sp, r7
 800a15a:	bc80      	pop	{r7}
 800a15c:	4770      	bx	lr

0800a15e <ButtonRegisterPressCallback>:
	Key->TimerRepeat = Miliseconds;
}

//Callbacks
void ButtonRegisterPressCallback(button_t *Key, void *Callback)
{
 800a15e:	b480      	push	{r7}
 800a160:	b083      	sub	sp, #12
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
 800a166:	6039      	str	r1, [r7, #0]
	Key->ButtonPressed = Callback;
 800a168:	683a      	ldr	r2, [r7, #0]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	61da      	str	r2, [r3, #28]
}
 800a16e:	bf00      	nop
 800a170:	370c      	adds	r7, #12
 800a172:	46bd      	mov	sp, r7
 800a174:	bc80      	pop	{r7}
 800a176:	4770      	bx	lr

0800a178 <ButtonRegisterRepeatCallback>:
{
	Key->ButtonLongPressed = Callback;
}

void ButtonRegisterRepeatCallback(button_t *Key, void *Callback)
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
	Key->ButtonRepeat = Callback;
 800a182:	683a      	ldr	r2, [r7, #0]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a188:	bf00      	nop
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bc80      	pop	{r7}
 800a190:	4770      	bx	lr

0800a192 <ButtonIdleRoutine>:
{
	Key->ButtonRelease = Callback;
}
//States routine
void ButtonIdleRoutine(button_t *Key)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b082      	sub	sp, #8
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_RESET)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	685a      	ldr	r2, [r3, #4]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	891b      	ldrh	r3, [r3, #8]
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	4610      	mov	r0, r2
 800a1a6:	f006 f9a7 	bl	80104f8 <HAL_GPIO_ReadPin>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d107      	bne.n	800a1c0 <ButtonIdleRoutine+0x2e>
	{
		Key->LastTick = HAL_GetTick();
 800a1b0:	f004 fafc 	bl	800e7ac <HAL_GetTick>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	60da      	str	r2, [r3, #12]
		Key->State = DEBOUNCE;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	701a      	strb	r2, [r3, #0]
	}
}
 800a1c0:	bf00      	nop
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <ButtonDebounceRoutine>:

void ButtonDebounceRoutine(button_t *Key)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - Key->LastTick) >= Key->TimerDebounce)
 800a1d0:	f004 faec 	bl	800e7ac <HAL_GetTick>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	1ad2      	subs	r2, r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d31d      	bcc.n	800a220 <ButtonDebounceRoutine+0x58>
	{
		if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_RESET)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	685a      	ldr	r2, [r3, #4]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	891b      	ldrh	r3, [r3, #8]
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	4610      	mov	r0, r2
 800a1f0:	f006 f982 	bl	80104f8 <HAL_GPIO_ReadPin>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d10f      	bne.n	800a21a <ButtonDebounceRoutine+0x52>
		{
			Key->State = PRESSED;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2202      	movs	r2, #2
 800a1fe:	701a      	strb	r2, [r3, #0]
			Key->LastTick = HAL_GetTick();
 800a200:	f004 fad4 	bl	800e7ac <HAL_GetTick>
 800a204:	4602      	mov	r2, r0
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	60da      	str	r2, [r3, #12]
			if(Key->ButtonPressed != NULL)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	69db      	ldr	r3, [r3, #28]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d006      	beq.n	800a220 <ButtonDebounceRoutine+0x58>
			{
				Key->ButtonPressed();
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	69db      	ldr	r3, [r3, #28]
 800a216:	4798      	blx	r3
		else
		{
			Key->State = IDLE;
		}
	}
}
 800a218:	e002      	b.n	800a220 <ButtonDebounceRoutine+0x58>
			Key->State = IDLE;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	701a      	strb	r2, [r3, #0]
}
 800a220:	bf00      	nop
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <ButtonPressedRoutine>:

void ButtonPressedRoutine(button_t *Key)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_SET)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685a      	ldr	r2, [r3, #4]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	891b      	ldrh	r3, [r3, #8]
 800a238:	4619      	mov	r1, r3
 800a23a:	4610      	mov	r0, r2
 800a23c:	f006 f95c 	bl	80104f8 <HAL_GPIO_ReadPin>
 800a240:	4603      	mov	r3, r0
 800a242:	2b01      	cmp	r3, #1
 800a244:	d103      	bne.n	800a24e <ButtonPressedRoutine+0x26>
	{
		Key->State = RELEASE;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2204      	movs	r2, #4
 800a24a:	701a      	strb	r2, [r3, #0]
		if(Key->ButtonLongPressed != NULL)
		{
			Key->ButtonLongPressed();
		}
	}
}
 800a24c:	e018      	b.n	800a280 <ButtonPressedRoutine+0x58>
	else if(HAL_GetTick() - Key->LastTick >= Key->TimerLongPressed)
 800a24e:	f004 faad 	bl	800e7ac <HAL_GetTick>
 800a252:	4602      	mov	r2, r0
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	1ad2      	subs	r2, r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	695b      	ldr	r3, [r3, #20]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d30e      	bcc.n	800a280 <ButtonPressedRoutine+0x58>
		Key->State = REPEAT;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2203      	movs	r2, #3
 800a266:	701a      	strb	r2, [r3, #0]
		Key->LastTick = HAL_GetTick();
 800a268:	f004 faa0 	bl	800e7ac <HAL_GetTick>
 800a26c:	4602      	mov	r2, r0
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	60da      	str	r2, [r3, #12]
		if(Key->ButtonLongPressed != NULL)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a1b      	ldr	r3, [r3, #32]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d002      	beq.n	800a280 <ButtonPressedRoutine+0x58>
			Key->ButtonLongPressed();
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	4798      	blx	r3
}
 800a280:	bf00      	nop
 800a282:	3708      	adds	r7, #8
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <ButtonRepeatRoutine>:

void ButtonRepeatRoutine(button_t *Key)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_SET)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	685a      	ldr	r2, [r3, #4]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	891b      	ldrh	r3, [r3, #8]
 800a298:	4619      	mov	r1, r3
 800a29a:	4610      	mov	r0, r2
 800a29c:	f006 f92c 	bl	80104f8 <HAL_GPIO_ReadPin>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d103      	bne.n	800a2ae <ButtonRepeatRoutine+0x26>
	{
		Key->State = RELEASE;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2204      	movs	r2, #4
 800a2aa:	701a      	strb	r2, [r3, #0]
		if(Key->ButtonRepeat != NULL)
		{
			Key->ButtonRepeat();
		}
	}
}
 800a2ac:	e015      	b.n	800a2da <ButtonRepeatRoutine+0x52>
	else if(HAL_GetTick() - Key->LastTick >= Key->TimerRepeat)
 800a2ae:	f004 fa7d 	bl	800e7ac <HAL_GetTick>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	1ad2      	subs	r2, r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	699b      	ldr	r3, [r3, #24]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d30b      	bcc.n	800a2da <ButtonRepeatRoutine+0x52>
		Key->LastTick = HAL_GetTick();
 800a2c2:	f004 fa73 	bl	800e7ac <HAL_GetTick>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	60da      	str	r2, [r3, #12]
		if(Key->ButtonRepeat != NULL)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d002      	beq.n	800a2da <ButtonRepeatRoutine+0x52>
			Key->ButtonRepeat();
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d8:	4798      	blx	r3
}
 800a2da:	bf00      	nop
 800a2dc:	3708      	adds	r7, #8
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <ButtonReleaseRoutine>:

void ButtonReleaseRoutine(button_t *Key)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b082      	sub	sp, #8
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
	if(Key->ButtonRelease != NULL)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d002      	beq.n	800a2f8 <ButtonReleaseRoutine+0x16>
	{
		Key->ButtonRelease();
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f6:	4798      	blx	r3
	}
	Key->State = IDLE;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	701a      	strb	r2, [r3, #0]
}
 800a2fe:	bf00      	nop
 800a300:	3708      	adds	r7, #8
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
	...

0800a308 <ButtonTask>:

//State machines
void ButtonTask(button_t *Key)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
	switch(Key->State)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	2b04      	cmp	r3, #4
 800a316:	d821      	bhi.n	800a35c <ButtonTask+0x54>
 800a318:	a201      	add	r2, pc, #4	; (adr r2, 800a320 <ButtonTask+0x18>)
 800a31a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a31e:	bf00      	nop
 800a320:	0800a335 	.word	0x0800a335
 800a324:	0800a33d 	.word	0x0800a33d
 800a328:	0800a345 	.word	0x0800a345
 800a32c:	0800a34d 	.word	0x0800a34d
 800a330:	0800a355 	.word	0x0800a355
	{
	case IDLE:
		ButtonIdleRoutine(Key);
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f7ff ff2c 	bl	800a192 <ButtonIdleRoutine>
		break;
 800a33a:	e00f      	b.n	800a35c <ButtonTask+0x54>

	case DEBOUNCE:
		ButtonDebounceRoutine(Key);
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f7ff ff43 	bl	800a1c8 <ButtonDebounceRoutine>
		break;
 800a342:	e00b      	b.n	800a35c <ButtonTask+0x54>

	case PRESSED:
		ButtonPressedRoutine(Key);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f7ff ff6f 	bl	800a228 <ButtonPressedRoutine>
		break;
 800a34a:	e007      	b.n	800a35c <ButtonTask+0x54>

	case REPEAT:
		ButtonRepeatRoutine(Key);
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f7ff ff9b 	bl	800a288 <ButtonRepeatRoutine>
		break;
 800a352:	e003      	b.n	800a35c <ButtonTask+0x54>

	case RELEASE:
		ButtonReleaseRoutine(Key);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f7ff ffc4 	bl	800a2e2 <ButtonReleaseRoutine>
		break;
 800a35a:	bf00      	nop
	}
}
 800a35c:	bf00      	nop
 800a35e:	3708      	adds	r7, #8
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_channel1
  */
void MX_DMA_Init(void)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a36a:	4b22      	ldr	r3, [pc, #136]	; (800a3f4 <MX_DMA_Init+0x90>)
 800a36c:	695b      	ldr	r3, [r3, #20]
 800a36e:	4a21      	ldr	r2, [pc, #132]	; (800a3f4 <MX_DMA_Init+0x90>)
 800a370:	f043 0301 	orr.w	r3, r3, #1
 800a374:	6153      	str	r3, [r2, #20]
 800a376:	4b1f      	ldr	r3, [pc, #124]	; (800a3f4 <MX_DMA_Init+0x90>)
 800a378:	695b      	ldr	r3, [r3, #20]
 800a37a:	f003 0301 	and.w	r3, r3, #1
 800a37e:	607b      	str	r3, [r7, #4]
 800a380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800a382:	4b1c      	ldr	r3, [pc, #112]	; (800a3f4 <MX_DMA_Init+0x90>)
 800a384:	695b      	ldr	r3, [r3, #20]
 800a386:	4a1b      	ldr	r2, [pc, #108]	; (800a3f4 <MX_DMA_Init+0x90>)
 800a388:	f043 0302 	orr.w	r3, r3, #2
 800a38c:	6153      	str	r3, [r2, #20]
 800a38e:	4b19      	ldr	r3, [pc, #100]	; (800a3f4 <MX_DMA_Init+0x90>)
 800a390:	695b      	ldr	r3, [r3, #20]
 800a392:	f003 0302 	and.w	r3, r3, #2
 800a396:	603b      	str	r3, [r7, #0]
 800a398:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_channel1 on DMA2_Channel1 */
  hdma_memtomem_dma2_channel1.Instance = DMA2_Channel1;
 800a39a:	4b17      	ldr	r3, [pc, #92]	; (800a3f8 <MX_DMA_Init+0x94>)
 800a39c:	4a17      	ldr	r2, [pc, #92]	; (800a3fc <MX_DMA_Init+0x98>)
 800a39e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800a3a0:	4b15      	ldr	r3, [pc, #84]	; (800a3f8 <MX_DMA_Init+0x94>)
 800a3a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a3a6:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 800a3a8:	4b13      	ldr	r3, [pc, #76]	; (800a3f8 <MX_DMA_Init+0x94>)
 800a3aa:	2240      	movs	r2, #64	; 0x40
 800a3ac:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_channel1.Init.MemInc = DMA_MINC_ENABLE;
 800a3ae:	4b12      	ldr	r3, [pc, #72]	; (800a3f8 <MX_DMA_Init+0x94>)
 800a3b0:	2280      	movs	r2, #128	; 0x80
 800a3b2:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a3b4:	4b10      	ldr	r3, [pc, #64]	; (800a3f8 <MX_DMA_Init+0x94>)
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a3ba:	4b0f      	ldr	r3, [pc, #60]	; (800a3f8 <MX_DMA_Init+0x94>)
 800a3bc:	2200      	movs	r2, #0
 800a3be:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_channel1.Init.Mode = DMA_NORMAL;
 800a3c0:	4b0d      	ldr	r3, [pc, #52]	; (800a3f8 <MX_DMA_Init+0x94>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_channel1.Init.Priority = DMA_PRIORITY_LOW;
 800a3c6:	4b0c      	ldr	r3, [pc, #48]	; (800a3f8 <MX_DMA_Init+0x94>)
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma2_channel1) != HAL_OK)
 800a3cc:	480a      	ldr	r0, [pc, #40]	; (800a3f8 <MX_DMA_Init+0x94>)
 800a3ce:	f005 f92b 	bl	800f628 <HAL_DMA_Init>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d001      	beq.n	800a3dc <MX_DMA_Init+0x78>
  {
    Error_Handler();
 800a3d8:	f002 fa8e 	bl	800c8f8 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800a3dc:	2200      	movs	r2, #0
 800a3de:	2100      	movs	r1, #0
 800a3e0:	200b      	movs	r0, #11
 800a3e2:	f005 f8dc 	bl	800f59e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800a3e6:	200b      	movs	r0, #11
 800a3e8:	f005 f8f5 	bl	800f5d6 <HAL_NVIC_EnableIRQ>

}
 800a3ec:	bf00      	nop
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	40021000 	.word	0x40021000
 800a3f8:	20000c78 	.word	0x20000c78
 800a3fc:	40020408 	.word	0x40020408

0800a400 <ds18b20_read_address>:
#define DS18B20_READ_SCRATCHPAD    0xBE



HAL_StatusTypeDef ds18b20_read_address(uint8_t* rom_code)
{
 800a400:	b590      	push	{r4, r7, lr}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t crc;

  if (wire_reset() != HAL_OK)
 800a408:	f7fe fe34 	bl	8009074 <wire_reset>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d001      	beq.n	800a416 <ds18b20_read_address+0x16>
    return HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	e021      	b.n	800a45a <ds18b20_read_address+0x5a>

  wire_write(DS18B20_READ_ROM);
 800a416:	2033      	movs	r0, #51	; 0x33
 800a418:	f7fe fec0 	bl	800919c <wire_write>

  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 800a41c:	2300      	movs	r3, #0
 800a41e:	60fb      	str	r3, [r7, #12]
 800a420:	e009      	b.n	800a436 <ds18b20_read_address+0x36>
    rom_code[i] = wire_read();
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	18d4      	adds	r4, r2, r3
 800a428:	f7fe fe76 	bl	8009118 <wire_read>
 800a42c:	4603      	mov	r3, r0
 800a42e:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	3301      	adds	r3, #1
 800a434:	60fb      	str	r3, [r7, #12]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2b07      	cmp	r3, #7
 800a43a:	ddf2      	ble.n	800a422 <ds18b20_read_address+0x22>

  crc = wire_crc(rom_code, DS18B20_ROM_CODE_SIZE - 1);
 800a43c:	2107      	movs	r1, #7
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f7fe fef3 	bl	800922a <wire_crc>
 800a444:	4603      	mov	r3, r0
 800a446:	72fb      	strb	r3, [r7, #11]
  if (rom_code[DS18B20_ROM_CODE_SIZE - 1] == crc)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	3307      	adds	r3, #7
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	7afa      	ldrb	r2, [r7, #11]
 800a450:	429a      	cmp	r2, r3
 800a452:	d101      	bne.n	800a458 <ds18b20_read_address+0x58>
    return HAL_OK;
 800a454:	2300      	movs	r3, #0
 800a456:	e000      	b.n	800a45a <ds18b20_read_address+0x5a>
  else
    return HAL_ERROR;
 800a458:	2301      	movs	r3, #1
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3714      	adds	r7, #20
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd90      	pop	{r4, r7, pc}

0800a462 <send_cmd>:

static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b084      	sub	sp, #16
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
 800a46a:	460b      	mov	r3, r1
 800a46c:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 800a46e:	f7fe fe01 	bl	8009074 <wire_reset>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d001      	beq.n	800a47c <send_cmd+0x1a>
    return HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	e01e      	b.n	800a4ba <send_cmd+0x58>

  if (!rom_code) {
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d103      	bne.n	800a48a <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 800a482:	20cc      	movs	r0, #204	; 0xcc
 800a484:	f7fe fe8a 	bl	800919c <wire_write>
 800a488:	e012      	b.n	800a4b0 <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 800a48a:	2055      	movs	r0, #85	; 0x55
 800a48c:	f7fe fe86 	bl	800919c <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 800a490:	2300      	movs	r3, #0
 800a492:	60fb      	str	r3, [r7, #12]
 800a494:	e009      	b.n	800a4aa <send_cmd+0x48>
      wire_write(rom_code[i]);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	4413      	add	r3, r2
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f7fe fe7c 	bl	800919c <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	60fb      	str	r3, [r7, #12]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2b07      	cmp	r3, #7
 800a4ae:	ddf2      	ble.n	800a496 <send_cmd+0x34>
  }
  wire_write(cmd);
 800a4b0:	78fb      	ldrb	r3, [r7, #3]
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7fe fe72 	bl	800919c <wire_write>
  return HAL_OK;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <ds18b20_start_measure>:

HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b082      	sub	sp, #8
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 800a4ca:	2144      	movs	r1, #68	; 0x44
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f7ff ffc8 	bl	800a462 <send_cmd>
 800a4d2:	4603      	mov	r3, r0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <ds18b20_read_scratchpad>:

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 800a4dc:	b590      	push	{r4, r7, lr}
 800a4de:	b085      	sub	sp, #20
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 800a4e6:	21be      	movs	r1, #190	; 0xbe
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f7ff ffba 	bl	800a462 <send_cmd>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d001      	beq.n	800a4f8 <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e01e      	b.n	800a536 <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	60fb      	str	r3, [r7, #12]
 800a4fc:	e009      	b.n	800a512 <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	683a      	ldr	r2, [r7, #0]
 800a502:	18d4      	adds	r4, r2, r3
 800a504:	f7fe fe08 	bl	8009118 <wire_read>
 800a508:	4603      	mov	r3, r0
 800a50a:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	3301      	adds	r3, #1
 800a510:	60fb      	str	r3, [r7, #12]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2b08      	cmp	r3, #8
 800a516:	ddf2      	ble.n	800a4fe <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 800a518:	2108      	movs	r1, #8
 800a51a:	6838      	ldr	r0, [r7, #0]
 800a51c:	f7fe fe85 	bl	800922a <wire_crc>
 800a520:	4603      	mov	r3, r0
 800a522:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	3308      	adds	r3, #8
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	7afa      	ldrb	r2, [r7, #11]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d101      	bne.n	800a534 <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 800a530:	2300      	movs	r3, #0
 800a532:	e000      	b.n	800a536 <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 800a534:	2301      	movs	r3, #1
}
 800a536:	4618      	mov	r0, r3
 800a538:	3714      	adds	r7, #20
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd90      	pop	{r4, r7, pc}

0800a53e <ds18b20_get_temp_wo_fp>:

  return temp / 16.0f;
}

uint32_t ds18b20_get_temp_wo_fp(const uint8_t* rom_code)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b086      	sub	sp, #24
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 800a546:	f107 030c 	add.w	r3, r7, #12
 800a54a:	4619      	mov	r1, r3
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f7ff ffc5 	bl	800a4dc <ds18b20_read_scratchpad>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d002      	beq.n	800a55e <ds18b20_get_temp_wo_fp+0x20>
    return 8500;
 800a558:	f242 1334 	movw	r3, #8500	; 0x2134
 800a55c:	e00b      	b.n	800a576 <ds18b20_get_temp_wo_fp+0x38>
 800a55e:	89bb      	ldrh	r3, [r7, #12]

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 800a560:	817b      	strh	r3, [r7, #10]

  return (temp * 100) / 16;
 800a562:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a566:	461a      	mov	r2, r3
 800a568:	2364      	movs	r3, #100	; 0x64
 800a56a:	fb02 f303 	mul.w	r3, r2, r3
 800a56e:	2b00      	cmp	r3, #0
 800a570:	da00      	bge.n	800a574 <ds18b20_get_temp_wo_fp+0x36>
 800a572:	330f      	adds	r3, #15
 800a574:	111b      	asrs	r3, r3, #4
}
 800a576:	4618      	mov	r0, r3
 800a578:	3718      	adds	r7, #24
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
	...

0800a580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b08c      	sub	sp, #48	; 0x30
 800a584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a586:	f107 0320 	add.w	r3, r7, #32
 800a58a:	2200      	movs	r2, #0
 800a58c:	601a      	str	r2, [r3, #0]
 800a58e:	605a      	str	r2, [r3, #4]
 800a590:	609a      	str	r2, [r3, #8]
 800a592:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a594:	4b72      	ldr	r3, [pc, #456]	; (800a760 <MX_GPIO_Init+0x1e0>)
 800a596:	699b      	ldr	r3, [r3, #24]
 800a598:	4a71      	ldr	r2, [pc, #452]	; (800a760 <MX_GPIO_Init+0x1e0>)
 800a59a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a59e:	6193      	str	r3, [r2, #24]
 800a5a0:	4b6f      	ldr	r3, [pc, #444]	; (800a760 <MX_GPIO_Init+0x1e0>)
 800a5a2:	699b      	ldr	r3, [r3, #24]
 800a5a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5a8:	61fb      	str	r3, [r7, #28]
 800a5aa:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a5ac:	4b6c      	ldr	r3, [pc, #432]	; (800a760 <MX_GPIO_Init+0x1e0>)
 800a5ae:	699b      	ldr	r3, [r3, #24]
 800a5b0:	4a6b      	ldr	r2, [pc, #428]	; (800a760 <MX_GPIO_Init+0x1e0>)
 800a5b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5b6:	6193      	str	r3, [r2, #24]
 800a5b8:	4b69      	ldr	r3, [pc, #420]	; (800a760 <MX_GPIO_Init+0x1e0>)
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5c0:	61bb      	str	r3, [r7, #24]
 800a5c2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a5c4:	4b66      	ldr	r3, [pc, #408]	; (800a760 <MX_GPIO_Init+0x1e0>)
 800a5c6:	699b      	ldr	r3, [r3, #24]
 800a5c8:	4a65      	ldr	r2, [pc, #404]	; (800a760 <MX_GPIO_Init+0x1e0>)
 800a5ca:	f043 0310 	orr.w	r3, r3, #16
 800a5ce:	6193      	str	r3, [r2, #24]
 800a5d0:	4b63      	ldr	r3, [pc, #396]	; (800a760 <MX_GPIO_Init+0x1e0>)
 800a5d2:	699b      	ldr	r3, [r3, #24]
 800a5d4:	f003 0310 	and.w	r3, r3, #16
 800a5d8:	617b      	str	r3, [r7, #20]
 800a5da:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5dc:	4b60      	ldr	r3, [pc, #384]	; (800a760 <MX_GPIO_Init+0x1e0>)
 800a5de:	699b      	ldr	r3, [r3, #24]
 800a5e0:	4a5f      	ldr	r2, [pc, #380]	; (800a760 <MX_GPIO_Init+0x1e0>)
 800a5e2:	f043 0304 	orr.w	r3, r3, #4
 800a5e6:	6193      	str	r3, [r2, #24]
 800a5e8:	4b5d      	ldr	r3, [pc, #372]	; (800a760 <MX_GPIO_Init+0x1e0>)
 800a5ea:	699b      	ldr	r3, [r3, #24]
 800a5ec:	f003 0304 	and.w	r3, r3, #4
 800a5f0:	613b      	str	r3, [r7, #16]
 800a5f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a5f4:	4b5a      	ldr	r3, [pc, #360]	; (800a760 <MX_GPIO_Init+0x1e0>)
 800a5f6:	699b      	ldr	r3, [r3, #24]
 800a5f8:	4a59      	ldr	r2, [pc, #356]	; (800a760 <MX_GPIO_Init+0x1e0>)
 800a5fa:	f043 0308 	orr.w	r3, r3, #8
 800a5fe:	6193      	str	r3, [r2, #24]
 800a600:	4b57      	ldr	r3, [pc, #348]	; (800a760 <MX_GPIO_Init+0x1e0>)
 800a602:	699b      	ldr	r3, [r3, #24]
 800a604:	f003 0308 	and.w	r3, r3, #8
 800a608:	60fb      	str	r3, [r7, #12]
 800a60a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a60c:	4b54      	ldr	r3, [pc, #336]	; (800a760 <MX_GPIO_Init+0x1e0>)
 800a60e:	699b      	ldr	r3, [r3, #24]
 800a610:	4a53      	ldr	r2, [pc, #332]	; (800a760 <MX_GPIO_Init+0x1e0>)
 800a612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a616:	6193      	str	r3, [r2, #24]
 800a618:	4b51      	ldr	r3, [pc, #324]	; (800a760 <MX_GPIO_Init+0x1e0>)
 800a61a:	699b      	ldr	r3, [r3, #24]
 800a61c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a620:	60bb      	str	r3, [r7, #8]
 800a622:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a624:	4b4e      	ldr	r3, [pc, #312]	; (800a760 <MX_GPIO_Init+0x1e0>)
 800a626:	699b      	ldr	r3, [r3, #24]
 800a628:	4a4d      	ldr	r2, [pc, #308]	; (800a760 <MX_GPIO_Init+0x1e0>)
 800a62a:	f043 0320 	orr.w	r3, r3, #32
 800a62e:	6193      	str	r3, [r2, #24]
 800a630:	4b4b      	ldr	r3, [pc, #300]	; (800a760 <MX_GPIO_Init+0x1e0>)
 800a632:	699b      	ldr	r3, [r3, #24]
 800a634:	f003 0320 	and.w	r3, r3, #32
 800a638:	607b      	str	r3, [r7, #4]
 800a63a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800a63c:	2200      	movs	r2, #0
 800a63e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a642:	4848      	ldr	r0, [pc, #288]	; (800a764 <MX_GPIO_Init+0x1e4>)
 800a644:	f005 ff6f 	bl	8010526 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, COMM_PC_LED_Pin|COMM_CAN_LED_Pin|COMM_CAN_CHECK_LED_Pin|COMM_UART_LED_Pin
 800a648:	2200      	movs	r2, #0
 800a64a:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800a64e:	4846      	ldr	r0, [pc, #280]	; (800a768 <MX_GPIO_Init+0x1e8>)
 800a650:	f005 ff69 	bl	8010526 <HAL_GPIO_WritePin>
                          |COMM_RS485_LED_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_TXE_GPIO_Port, RS485_TXE_Pin, GPIO_PIN_RESET);
 800a654:	2200      	movs	r2, #0
 800a656:	2110      	movs	r1, #16
 800a658:	4844      	ldr	r0, [pc, #272]	; (800a76c <MX_GPIO_Init+0x1ec>)
 800a65a:	f005 ff64 	bl	8010526 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WC_EEPROM_GPIO_Port, WC_EEPROM_Pin, GPIO_PIN_RESET);
 800a65e:	2200      	movs	r2, #0
 800a660:	2120      	movs	r1, #32
 800a662:	4843      	ldr	r0, [pc, #268]	; (800a770 <MX_GPIO_Init+0x1f0>)
 800a664:	f005 ff5f 	bl	8010526 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800a668:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a66c:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a66e:	2301      	movs	r3, #1
 800a670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a672:	2300      	movs	r3, #0
 800a674:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a676:	2302      	movs	r3, #2
 800a678:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a67a:	f107 0320 	add.w	r3, r7, #32
 800a67e:	4619      	mov	r1, r3
 800a680:	4838      	ldr	r0, [pc, #224]	; (800a764 <MX_GPIO_Init+0x1e4>)
 800a682:	f005 fcd9 	bl	8010038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a686:	2304      	movs	r3, #4
 800a688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a68a:	2300      	movs	r3, #0
 800a68c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a68e:	2301      	movs	r3, #1
 800a690:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a692:	f107 0320 	add.w	r3, r7, #32
 800a696:	4619      	mov	r1, r3
 800a698:	4833      	ldr	r0, [pc, #204]	; (800a768 <MX_GPIO_Init+0x1e8>)
 800a69a:	f005 fccd 	bl	8010038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin */
  GPIO_InitStruct.Pin = COMM_PC_LED_Pin|COMM_CAN_LED_Pin|COMM_CAN_CHECK_LED_Pin|COMM_UART_LED_Pin
 800a69e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800a6a2:	623b      	str	r3, [r7, #32]
                          |COMM_RS485_LED_Pin|ERROR_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6ac:	2302      	movs	r3, #2
 800a6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a6b0:	f107 0320 	add.w	r3, r7, #32
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	482c      	ldr	r0, [pc, #176]	; (800a768 <MX_GPIO_Init+0x1e8>)
 800a6b8:	f005 fcbe 	bl	8010038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = CHECK_WIRE_1_Pin|CHECK_WIRE_2_Pin|CHECK_WIRE_3_Pin|CHECK_WIRE_4_Pin
 800a6bc:	f240 330f 	movw	r3, #783	; 0x30f
 800a6c0:	623b      	str	r3, [r7, #32]
                          |BUTTON_DOWN_Pin|BUTTON_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a6ca:	f107 0320 	add.w	r3, r7, #32
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	4828      	ldr	r0, [pc, #160]	; (800a774 <MX_GPIO_Init+0x1f4>)
 800a6d2:	f005 fcb1 	bl	8010038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_OPEN_Pin;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SW_OPEN_GPIO_Port, &GPIO_InitStruct);
 800a6e2:	f107 0320 	add.w	r3, r7, #32
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	4820      	ldr	r0, [pc, #128]	; (800a76c <MX_GPIO_Init+0x1ec>)
 800a6ea:	f005 fca5 	bl	8010038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RS485_TXE_Pin;
 800a6ee:	2310      	movs	r3, #16
 800a6f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6fa:	2302      	movs	r3, #2
 800a6fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RS485_TXE_GPIO_Port, &GPIO_InitStruct);
 800a6fe:	f107 0320 	add.w	r3, r7, #32
 800a702:	4619      	mov	r1, r3
 800a704:	4819      	ldr	r0, [pc, #100]	; (800a76c <MX_GPIO_Init+0x1ec>)
 800a706:	f005 fc97 	bl	8010038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800a70a:	230f      	movs	r3, #15
 800a70c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a70e:	2300      	movs	r3, #0
 800a710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a712:	2300      	movs	r3, #0
 800a714:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a716:	f107 0320 	add.w	r3, r7, #32
 800a71a:	4619      	mov	r1, r3
 800a71c:	4816      	ldr	r0, [pc, #88]	; (800a778 <MX_GPIO_Init+0x1f8>)
 800a71e:	f005 fc8b 	bl	8010038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800a722:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800a726:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a728:	2300      	movs	r3, #0
 800a72a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a72c:	2301      	movs	r3, #1
 800a72e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a730:	f107 0320 	add.w	r3, r7, #32
 800a734:	4619      	mov	r1, r3
 800a736:	4810      	ldr	r0, [pc, #64]	; (800a778 <MX_GPIO_Init+0x1f8>)
 800a738:	f005 fc7e 	bl	8010038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WC_EEPROM_Pin;
 800a73c:	2320      	movs	r3, #32
 800a73e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a740:	2301      	movs	r3, #1
 800a742:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a744:	2300      	movs	r3, #0
 800a746:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a748:	2302      	movs	r3, #2
 800a74a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(WC_EEPROM_GPIO_Port, &GPIO_InitStruct);
 800a74c:	f107 0320 	add.w	r3, r7, #32
 800a750:	4619      	mov	r1, r3
 800a752:	4807      	ldr	r0, [pc, #28]	; (800a770 <MX_GPIO_Init+0x1f0>)
 800a754:	f005 fc70 	bl	8010038 <HAL_GPIO_Init>

}
 800a758:	bf00      	nop
 800a75a:	3730      	adds	r7, #48	; 0x30
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	40021000 	.word	0x40021000
 800a764:	40011800 	.word	0x40011800
 800a768:	40011c00 	.word	0x40011c00
 800a76c:	40010800 	.word	0x40010800
 800a770:	40010c00 	.word	0x40010c00
 800a774:	40011000 	.word	0x40011000
 800a778:	40012000 	.word	0x40012000

0800a77c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a780:	4b12      	ldr	r3, [pc, #72]	; (800a7cc <MX_I2C1_Init+0x50>)
 800a782:	4a13      	ldr	r2, [pc, #76]	; (800a7d0 <MX_I2C1_Init+0x54>)
 800a784:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800a786:	4b11      	ldr	r3, [pc, #68]	; (800a7cc <MX_I2C1_Init+0x50>)
 800a788:	4a12      	ldr	r2, [pc, #72]	; (800a7d4 <MX_I2C1_Init+0x58>)
 800a78a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a78c:	4b0f      	ldr	r3, [pc, #60]	; (800a7cc <MX_I2C1_Init+0x50>)
 800a78e:	2200      	movs	r2, #0
 800a790:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a792:	4b0e      	ldr	r3, [pc, #56]	; (800a7cc <MX_I2C1_Init+0x50>)
 800a794:	2200      	movs	r2, #0
 800a796:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a798:	4b0c      	ldr	r3, [pc, #48]	; (800a7cc <MX_I2C1_Init+0x50>)
 800a79a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a79e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a7a0:	4b0a      	ldr	r3, [pc, #40]	; (800a7cc <MX_I2C1_Init+0x50>)
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a7a6:	4b09      	ldr	r3, [pc, #36]	; (800a7cc <MX_I2C1_Init+0x50>)
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a7ac:	4b07      	ldr	r3, [pc, #28]	; (800a7cc <MX_I2C1_Init+0x50>)
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a7b2:	4b06      	ldr	r3, [pc, #24]	; (800a7cc <MX_I2C1_Init+0x50>)
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a7b8:	4804      	ldr	r0, [pc, #16]	; (800a7cc <MX_I2C1_Init+0x50>)
 800a7ba:	f005 fecd 	bl	8010558 <HAL_I2C_Init>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d001      	beq.n	800a7c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800a7c4:	f002 f898 	bl	800c8f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a7c8:	bf00      	nop
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	20000cbc 	.word	0x20000cbc
 800a7d0:	40005400 	.word	0x40005400
 800a7d4:	00061a80 	.word	0x00061a80

0800a7d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b088      	sub	sp, #32
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7e0:	f107 0310 	add.w	r3, r7, #16
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	601a      	str	r2, [r3, #0]
 800a7e8:	605a      	str	r2, [r3, #4]
 800a7ea:	609a      	str	r2, [r3, #8]
 800a7ec:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a3b      	ldr	r2, [pc, #236]	; (800a8e0 <HAL_I2C_MspInit+0x108>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d16f      	bne.n	800a8d8 <HAL_I2C_MspInit+0x100>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a7f8:	4b3a      	ldr	r3, [pc, #232]	; (800a8e4 <HAL_I2C_MspInit+0x10c>)
 800a7fa:	699b      	ldr	r3, [r3, #24]
 800a7fc:	4a39      	ldr	r2, [pc, #228]	; (800a8e4 <HAL_I2C_MspInit+0x10c>)
 800a7fe:	f043 0308 	orr.w	r3, r3, #8
 800a802:	6193      	str	r3, [r2, #24]
 800a804:	4b37      	ldr	r3, [pc, #220]	; (800a8e4 <HAL_I2C_MspInit+0x10c>)
 800a806:	699b      	ldr	r3, [r3, #24]
 800a808:	f003 0308 	and.w	r3, r3, #8
 800a80c:	60fb      	str	r3, [r7, #12]
 800a80e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a810:	23c0      	movs	r3, #192	; 0xc0
 800a812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a814:	2312      	movs	r3, #18
 800a816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a818:	2303      	movs	r3, #3
 800a81a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a81c:	f107 0310 	add.w	r3, r7, #16
 800a820:	4619      	mov	r1, r3
 800a822:	4831      	ldr	r0, [pc, #196]	; (800a8e8 <HAL_I2C_MspInit+0x110>)
 800a824:	f005 fc08 	bl	8010038 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a828:	4b2e      	ldr	r3, [pc, #184]	; (800a8e4 <HAL_I2C_MspInit+0x10c>)
 800a82a:	69db      	ldr	r3, [r3, #28]
 800a82c:	4a2d      	ldr	r2, [pc, #180]	; (800a8e4 <HAL_I2C_MspInit+0x10c>)
 800a82e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a832:	61d3      	str	r3, [r2, #28]
 800a834:	4b2b      	ldr	r3, [pc, #172]	; (800a8e4 <HAL_I2C_MspInit+0x10c>)
 800a836:	69db      	ldr	r3, [r3, #28]
 800a838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a83c:	60bb      	str	r3, [r7, #8]
 800a83e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800a840:	4b2a      	ldr	r3, [pc, #168]	; (800a8ec <HAL_I2C_MspInit+0x114>)
 800a842:	4a2b      	ldr	r2, [pc, #172]	; (800a8f0 <HAL_I2C_MspInit+0x118>)
 800a844:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a846:	4b29      	ldr	r3, [pc, #164]	; (800a8ec <HAL_I2C_MspInit+0x114>)
 800a848:	2200      	movs	r2, #0
 800a84a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a84c:	4b27      	ldr	r3, [pc, #156]	; (800a8ec <HAL_I2C_MspInit+0x114>)
 800a84e:	2200      	movs	r2, #0
 800a850:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a852:	4b26      	ldr	r3, [pc, #152]	; (800a8ec <HAL_I2C_MspInit+0x114>)
 800a854:	2280      	movs	r2, #128	; 0x80
 800a856:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a858:	4b24      	ldr	r3, [pc, #144]	; (800a8ec <HAL_I2C_MspInit+0x114>)
 800a85a:	2200      	movs	r2, #0
 800a85c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a85e:	4b23      	ldr	r3, [pc, #140]	; (800a8ec <HAL_I2C_MspInit+0x114>)
 800a860:	2200      	movs	r2, #0
 800a862:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800a864:	4b21      	ldr	r3, [pc, #132]	; (800a8ec <HAL_I2C_MspInit+0x114>)
 800a866:	2200      	movs	r2, #0
 800a868:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a86a:	4b20      	ldr	r3, [pc, #128]	; (800a8ec <HAL_I2C_MspInit+0x114>)
 800a86c:	2200      	movs	r2, #0
 800a86e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800a870:	481e      	ldr	r0, [pc, #120]	; (800a8ec <HAL_I2C_MspInit+0x114>)
 800a872:	f004 fed9 	bl	800f628 <HAL_DMA_Init>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d001      	beq.n	800a880 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 800a87c:	f002 f83c 	bl	800c8f8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a1a      	ldr	r2, [pc, #104]	; (800a8ec <HAL_I2C_MspInit+0x114>)
 800a884:	639a      	str	r2, [r3, #56]	; 0x38
 800a886:	4a19      	ldr	r2, [pc, #100]	; (800a8ec <HAL_I2C_MspInit+0x114>)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800a88c:	4b19      	ldr	r3, [pc, #100]	; (800a8f4 <HAL_I2C_MspInit+0x11c>)
 800a88e:	4a1a      	ldr	r2, [pc, #104]	; (800a8f8 <HAL_I2C_MspInit+0x120>)
 800a890:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a892:	4b18      	ldr	r3, [pc, #96]	; (800a8f4 <HAL_I2C_MspInit+0x11c>)
 800a894:	2210      	movs	r2, #16
 800a896:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a898:	4b16      	ldr	r3, [pc, #88]	; (800a8f4 <HAL_I2C_MspInit+0x11c>)
 800a89a:	2200      	movs	r2, #0
 800a89c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a89e:	4b15      	ldr	r3, [pc, #84]	; (800a8f4 <HAL_I2C_MspInit+0x11c>)
 800a8a0:	2280      	movs	r2, #128	; 0x80
 800a8a2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a8a4:	4b13      	ldr	r3, [pc, #76]	; (800a8f4 <HAL_I2C_MspInit+0x11c>)
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a8aa:	4b12      	ldr	r3, [pc, #72]	; (800a8f4 <HAL_I2C_MspInit+0x11c>)
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800a8b0:	4b10      	ldr	r3, [pc, #64]	; (800a8f4 <HAL_I2C_MspInit+0x11c>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a8b6:	4b0f      	ldr	r3, [pc, #60]	; (800a8f4 <HAL_I2C_MspInit+0x11c>)
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800a8bc:	480d      	ldr	r0, [pc, #52]	; (800a8f4 <HAL_I2C_MspInit+0x11c>)
 800a8be:	f004 feb3 	bl	800f628 <HAL_DMA_Init>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d001      	beq.n	800a8cc <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 800a8c8:	f002 f816 	bl	800c8f8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4a09      	ldr	r2, [pc, #36]	; (800a8f4 <HAL_I2C_MspInit+0x11c>)
 800a8d0:	635a      	str	r2, [r3, #52]	; 0x34
 800a8d2:	4a08      	ldr	r2, [pc, #32]	; (800a8f4 <HAL_I2C_MspInit+0x11c>)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800a8d8:	bf00      	nop
 800a8da:	3720      	adds	r7, #32
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	40005400 	.word	0x40005400
 800a8e4:	40021000 	.word	0x40021000
 800a8e8:	40010c00 	.word	0x40010c00
 800a8ec:	20000d10 	.word	0x20000d10
 800a8f0:	40020080 	.word	0x40020080
 800a8f4:	20000d54 	.word	0x20000d54
 800a8f8:	4002006c 	.word	0x4002006c

0800a8fc <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a10      	ldr	r2, [pc, #64]	; (800a94c <HAL_I2C_MspDeInit+0x50>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d11a      	bne.n	800a944 <HAL_I2C_MspDeInit+0x48>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800a90e:	4b10      	ldr	r3, [pc, #64]	; (800a950 <HAL_I2C_MspDeInit+0x54>)
 800a910:	69db      	ldr	r3, [r3, #28]
 800a912:	4a0f      	ldr	r2, [pc, #60]	; (800a950 <HAL_I2C_MspDeInit+0x54>)
 800a914:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a918:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800a91a:	2140      	movs	r1, #64	; 0x40
 800a91c:	480d      	ldr	r0, [pc, #52]	; (800a954 <HAL_I2C_MspDeInit+0x58>)
 800a91e:	f005 fd1f 	bl	8010360 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800a922:	2180      	movs	r1, #128	; 0x80
 800a924:	480b      	ldr	r0, [pc, #44]	; (800a954 <HAL_I2C_MspDeInit+0x58>)
 800a926:	f005 fd1b 	bl	8010360 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a92e:	4618      	mov	r0, r3
 800a930:	f004 fef0 	bl	800f714 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmatx);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a938:	4618      	mov	r0, r3
 800a93a:	f004 feeb 	bl	800f714 <HAL_DMA_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800a93e:	201f      	movs	r0, #31
 800a940:	f004 fe57 	bl	800f5f2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 800a944:	bf00      	nop
 800a946:	3708      	adds	r7, #8
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	40005400 	.word	0x40005400
 800a950:	40021000 	.word	0x40021000
 800a954:	40010c00 	.word	0x40010c00

0800a958 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800a95c:	4b09      	ldr	r3, [pc, #36]	; (800a984 <MX_IWDG_Init+0x2c>)
 800a95e:	4a0a      	ldr	r2, [pc, #40]	; (800a988 <MX_IWDG_Init+0x30>)
 800a960:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 800a962:	4b08      	ldr	r3, [pc, #32]	; (800a984 <MX_IWDG_Init+0x2c>)
 800a964:	2205      	movs	r2, #5
 800a966:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 800a968:	4b06      	ldr	r3, [pc, #24]	; (800a984 <MX_IWDG_Init+0x2c>)
 800a96a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800a96e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800a970:	4804      	ldr	r0, [pc, #16]	; (800a984 <MX_IWDG_Init+0x2c>)
 800a972:	f008 ff3e 	bl	80137f2 <HAL_IWDG_Init>
 800a976:	4603      	mov	r3, r0
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d001      	beq.n	800a980 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800a97c:	f001 ffbc 	bl	800c8f8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800a980:	bf00      	nop
 800a982:	bd80      	pop	{r7, pc}
 800a984:	20000d98 	.word	0x20000d98
 800a988:	40003000 	.word	0x40003000

0800a98c <LedBlinkInit>:

#include "main.h"
#include "led_blink.h"

void LedBlinkInit(blink_t *BlinkLed, GPIO_TypeDef *GpioPort, uint16_t GpioPin, uint16_t LightTime)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	4611      	mov	r1, r2
 800a998:	461a      	mov	r2, r3
 800a99a:	460b      	mov	r3, r1
 800a99c:	80fb      	strh	r3, [r7, #6]
 800a99e:	4613      	mov	r3, r2
 800a9a0:	80bb      	strh	r3, [r7, #4]
	BlinkLed -> GpioPort = GpioPort;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	68ba      	ldr	r2, [r7, #8]
 800a9a6:	605a      	str	r2, [r3, #4]
	BlinkLed -> GpioPin  = GpioPin;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	88fa      	ldrh	r2, [r7, #6]
 800a9ac:	811a      	strh	r2, [r3, #8]
	BlinkLed -> LightTime = LightTime;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	88ba      	ldrh	r2, [r7, #4]
 800a9b2:	815a      	strh	r2, [r3, #10]
}
 800a9b4:	bf00      	nop
 800a9b6:	3714      	adds	r7, #20
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bc80      	pop	{r7}
 800a9bc:	4770      	bx	lr

0800a9be <LedBlinkOne>:

void LedBlinkOne(blink_t *BlinkLed)
{
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b082      	sub	sp, #8
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
	BlinkLed -> LastTick = HAL_GetTick();
 800a9c6:	f003 fef1 	bl	800e7ac <HAL_GetTick>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(BlinkLed->GpioPort, BlinkLed->GpioPin, SET);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6858      	ldr	r0, [r3, #4]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	891b      	ldrh	r3, [r3, #8]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	4619      	mov	r1, r3
 800a9dc:	f005 fda3 	bl	8010526 <HAL_GPIO_WritePin>
}
 800a9e0:	bf00      	nop
 800a9e2:	3708      	adds	r7, #8
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <LedBlinkTask>:

void LedBlinkTask(blink_t *BlinkLed)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
	if(HAL_GetTick() - BlinkLed->LastTick >= BlinkLed->LightTime)
 800a9f0:	f003 fedc 	bl	800e7ac <HAL_GetTick>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	1ad3      	subs	r3, r2, r3
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	8952      	ldrh	r2, [r2, #10]
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d307      	bcc.n	800aa14 <LedBlinkTask+0x2c>
	{
		HAL_GPIO_WritePin(BlinkLed->GpioPort, BlinkLed->GpioPin, RESET);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6858      	ldr	r0, [r3, #4]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	891b      	ldrh	r3, [r3, #8]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	4619      	mov	r1, r3
 800aa10:	f005 fd89 	bl	8010526 <HAL_GPIO_WritePin>
	}
}
 800aa14:	bf00      	nop
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	4603      	mov	r3, r0
 800aa24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aa26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	db12      	blt.n	800aa54 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aa2e:	79fb      	ldrb	r3, [r7, #7]
 800aa30:	f003 021f 	and.w	r2, r3, #31
 800aa34:	490a      	ldr	r1, [pc, #40]	; (800aa60 <__NVIC_DisableIRQ+0x44>)
 800aa36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa3a:	095b      	lsrs	r3, r3, #5
 800aa3c:	2001      	movs	r0, #1
 800aa3e:	fa00 f202 	lsl.w	r2, r0, r2
 800aa42:	3320      	adds	r3, #32
 800aa44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800aa48:	f3bf 8f4f 	dsb	sy
}
 800aa4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800aa4e:	f3bf 8f6f 	isb	sy
}
 800aa52:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800aa54:	bf00      	nop
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bc80      	pop	{r7}
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	e000e100 	.word	0xe000e100

0800aa64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	__asm__ volatile("ldr r10, =0x0000");
 800aa6a:	f04f 0a00 	mov.w	sl, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800aa6e:	b662      	cpsie	i
}
 800aa70:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800aa72:	f003 fe25 	bl	800e6c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800aa76:	f000 f935 	bl	800ace4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800aa7a:	f7ff fd81 	bl	800a580 <MX_GPIO_Init>
  MX_DMA_Init();
 800aa7e:	f7ff fc71 	bl	800a364 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800aa82:	f003 fcd3 	bl	800e42c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800aa86:	f7ff fe79 	bl	800a77c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800aa8a:	f010 f9fb 	bl	801ae84 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800aa8e:	f7ff fa31 	bl	8009ef4 <MX_ADC1_Init>
  MX_TIM3_Init();
 800aa92:	f003 fa0d 	bl	800deb0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800aa96:	f003 fa83 	bl	800dfa0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800aa9a:	f003 fc73 	bl	800e384 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800aa9e:	f003 fc9b 	bl	800e3d8 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 800aaa2:	f003 fb17 	bl	800e0d4 <MX_TIM5_Init>
  MX_IWDG_Init();
 800aaa6:	f7ff ff57 	bl	800a958 <MX_IWDG_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800aaaa:	f000 f97c 	bl	800ada6 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  if(SSD1306_Init(&hi2c1, &hdma_memtomem_dma2_channel1) != HAL_OK) ERROR_OLED;
 800aaae:	496f      	ldr	r1, [pc, #444]	; (800ac6c <main+0x208>)
 800aab0:	486f      	ldr	r0, [pc, #444]	; (800ac70 <main+0x20c>)
 800aab2:	f003 f819 	bl	800dae8 <SSD1306_Init>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d004      	beq.n	800aac6 <main+0x62>
 800aabc:	4a6d      	ldr	r2, [pc, #436]	; (800ac74 <main+0x210>)
 800aabe:	7813      	ldrb	r3, [r2, #0]
 800aac0:	f043 0302 	orr.w	r3, r3, #2
 800aac4:	7013      	strb	r3, [r2, #0]

  OldTick500ms = HAL_GetTick();
 800aac6:	f003 fe71 	bl	800e7ac <HAL_GetTick>
 800aaca:	4603      	mov	r3, r0
 800aacc:	4a6a      	ldr	r2, [pc, #424]	; (800ac78 <main+0x214>)
 800aace:	6013      	str	r3, [r2, #0]
  OldTick100ms = HAL_GetTick();
 800aad0:	f003 fe6c 	bl	800e7ac <HAL_GetTick>
 800aad4:	4603      	mov	r3, r0
 800aad6:	4a69      	ldr	r2, [pc, #420]	; (800ac7c <main+0x218>)
 800aad8:	6013      	str	r3, [r2, #0]
  OldTick50ms = HAL_GetTick();
 800aada:	f003 fe67 	bl	800e7ac <HAL_GetTick>
 800aade:	4603      	mov	r3, r0
 800aae0:	4a67      	ldr	r2, [pc, #412]	; (800ac80 <main+0x21c>)
 800aae2:	6013      	str	r3, [r2, #0]
  OldTick10000ms = HAL_GetTick();
 800aae4:	f003 fe62 	bl	800e7ac <HAL_GetTick>
 800aae8:	4603      	mov	r3, r0
 800aaea:	4a66      	ldr	r2, [pc, #408]	; (800ac84 <main+0x220>)
 800aaec:	6013      	str	r3, [r2, #0]

  if (ds18b20_read_address(ds1) != HAL_OK)
 800aaee:	4866      	ldr	r0, [pc, #408]	; (800ac88 <main+0x224>)
 800aaf0:	f7ff fc86 	bl	800a400 <ds18b20_read_address>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d004      	beq.n	800ab04 <main+0xa0>
  {
    ERROR_DS;
 800aafa:	4a5e      	ldr	r2, [pc, #376]	; (800ac74 <main+0x210>)
 800aafc:	7813      	ldrb	r3, [r2, #0]
 800aafe:	f043 0301 	orr.w	r3, r3, #1
 800ab02:	7013      	strb	r3, [r2, #0]
  }

  ButtonInitKey(&KeyUp, BUTTON_UP_GPIO_Port, BUTTON_UP_Pin, 20, 1000, 350);
 800ab04:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800ab08:	9301      	str	r3, [sp, #4]
 800ab0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	2314      	movs	r3, #20
 800ab12:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab16:	495d      	ldr	r1, [pc, #372]	; (800ac8c <main+0x228>)
 800ab18:	485d      	ldr	r0, [pc, #372]	; (800ac90 <main+0x22c>)
 800ab1a:	f7ff fb01 	bl	800a120 <ButtonInitKey>
  ButtonInitKey(&KeyDown, BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin, 20, 1000, 350);
 800ab1e:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800ab22:	9301      	str	r3, [sp, #4]
 800ab24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ab28:	9300      	str	r3, [sp, #0]
 800ab2a:	2314      	movs	r3, #20
 800ab2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab30:	4956      	ldr	r1, [pc, #344]	; (800ac8c <main+0x228>)
 800ab32:	4858      	ldr	r0, [pc, #352]	; (800ac94 <main+0x230>)
 800ab34:	f7ff faf4 	bl	800a120 <ButtonInitKey>

  LedBlinkInit(&CommPcUsb, COMM_PC_LED_GPIO_Port, COMM_PC_LED_Pin, 20);
 800ab38:	2314      	movs	r3, #20
 800ab3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab3e:	4956      	ldr	r1, [pc, #344]	; (800ac98 <main+0x234>)
 800ab40:	4856      	ldr	r0, [pc, #344]	; (800ac9c <main+0x238>)
 800ab42:	f7ff ff23 	bl	800a98c <LedBlinkInit>
  LedBlinkInit(&ErrorBlink, ERROR_LED_GPIO_Port, ERROR_LED_Pin, 35);
 800ab46:	2323      	movs	r3, #35	; 0x23
 800ab48:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ab4c:	4952      	ldr	r1, [pc, #328]	; (800ac98 <main+0x234>)
 800ab4e:	4854      	ldr	r0, [pc, #336]	; (800aca0 <main+0x23c>)
 800ab50:	f7ff ff1c 	bl	800a98c <LedBlinkInit>

  ShowMenu();
 800ab54:	f000 fd10 	bl	800b578 <ShowMenu>


  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800ab58:	2100      	movs	r1, #0
 800ab5a:	4852      	ldr	r0, [pc, #328]	; (800aca4 <main+0x240>)
 800ab5c:	f00b f9c2 	bl	8015ee4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800ab60:	2104      	movs	r1, #4
 800ab62:	4850      	ldr	r0, [pc, #320]	; (800aca4 <main+0x240>)
 800ab64:	f00b f9be 	bl	8015ee4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800ab68:	2108      	movs	r1, #8
 800ab6a:	484e      	ldr	r0, [pc, #312]	; (800aca4 <main+0x240>)
 800ab6c:	f00b f9ba 	bl	8015ee4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800ab70:	210c      	movs	r1, #12
 800ab72:	484c      	ldr	r0, [pc, #304]	; (800aca4 <main+0x240>)
 800ab74:	f00b f9b6 	bl	8015ee4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800ab78:	2100      	movs	r1, #0
 800ab7a:	484b      	ldr	r0, [pc, #300]	; (800aca8 <main+0x244>)
 800ab7c:	f00b f9b2 	bl	8015ee4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800ab80:	2104      	movs	r1, #4
 800ab82:	484a      	ldr	r0, [pc, #296]	; (800acac <main+0x248>)
 800ab84:	f00b f9ae 	bl	8015ee4 <HAL_TIM_PWM_Start>

  LedLightInit(&Logo, &htim3, TIM_CHANNEL_1, 20);
 800ab88:	2314      	movs	r3, #20
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	4946      	ldr	r1, [pc, #280]	; (800aca8 <main+0x244>)
 800ab8e:	4848      	ldr	r0, [pc, #288]	; (800acb0 <main+0x24c>)
 800ab90:	f000 fcd8 	bl	800b544 <LedLightInit>
  LedLightInit(&Light, &htim5, TIM_CHANNEL_2, 20);
 800ab94:	2314      	movs	r3, #20
 800ab96:	2204      	movs	r2, #4
 800ab98:	4944      	ldr	r1, [pc, #272]	; (800acac <main+0x248>)
 800ab9a:	4846      	ldr	r0, [pc, #280]	; (800acb4 <main+0x250>)
 800ab9c:	f000 fcd2 	bl	800b544 <LedLightInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  m24cxxInit(&M24C02, &hi2c1, EEPROM_ADDRES, M24C02_MEM_SIZE, WC_EEPROM_GPIO_Port, WC_EEPROM_Pin);
 800aba0:	2320      	movs	r3, #32
 800aba2:	9301      	str	r3, [sp, #4]
 800aba4:	4b44      	ldr	r3, [pc, #272]	; (800acb8 <main+0x254>)
 800aba6:	9300      	str	r3, [sp, #0]
 800aba8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abac:	2250      	movs	r2, #80	; 0x50
 800abae:	4930      	ldr	r1, [pc, #192]	; (800ac70 <main+0x20c>)
 800abb0:	4842      	ldr	r0, [pc, #264]	; (800acbc <main+0x258>)
 800abb2:	f7ff f877 	bl	8009ca4 <m24cxxInit>

  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)Measurements.Adc1Value, 4);
 800abb6:	2204      	movs	r2, #4
 800abb8:	4941      	ldr	r1, [pc, #260]	; (800acc0 <main+0x25c>)
 800abba:	4842      	ldr	r0, [pc, #264]	; (800acc4 <main+0x260>)
 800abbc:	f003 ffee 	bl	800eb9c <HAL_ADC_Start_DMA>

  EepromInit(&M24C02);
 800abc0:	483e      	ldr	r0, [pc, #248]	; (800acbc <main+0x258>)
 800abc2:	f7fe fb53 	bl	800926c <EepromInit>
  EepromRecovery();
 800abc6:	f7fe fb75 	bl	80092b4 <EepromRecovery>

  while (1)
  {
	  HAL_IWDG_Refresh(&hiwdg);
 800abca:	483f      	ldr	r0, [pc, #252]	; (800acc8 <main+0x264>)
 800abcc:	f008 fe53 	bl	8013876 <HAL_IWDG_Refresh>

	  if(CommandToJump == 1)
 800abd0:	4b3e      	ldr	r3, [pc, #248]	; (800accc <main+0x268>)
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d103      	bne.n	800abe0 <main+0x17c>
	  {
		  jump_to_application(0x8000000);
 800abd8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800abdc:	f001 fe5e 	bl	800c89c <jump_to_application>
	  }

	  if(LineCounter)
 800abe0:	4b3b      	ldr	r3, [pc, #236]	; (800acd0 <main+0x26c>)
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00c      	beq.n	800ac02 <main+0x19e>
	  {
		  Parser_TakeLine(&ReceiveBuffer, ReceivedData);
 800abe8:	493a      	ldr	r1, [pc, #232]	; (800acd4 <main+0x270>)
 800abea:	483b      	ldr	r0, [pc, #236]	; (800acd8 <main+0x274>)
 800abec:	f002 fd5f 	bl	800d6ae <Parser_TakeLine>

		  LineCounter--;
 800abf0:	4b37      	ldr	r3, [pc, #220]	; (800acd0 <main+0x26c>)
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	3b01      	subs	r3, #1
 800abf6:	b2da      	uxtb	r2, r3
 800abf8:	4b35      	ldr	r3, [pc, #212]	; (800acd0 <main+0x26c>)
 800abfa:	701a      	strb	r2, [r3, #0]

		  Parser_parse(ReceivedData);
 800abfc:	4835      	ldr	r0, [pc, #212]	; (800acd4 <main+0x270>)
 800abfe:	f002 fd7f 	bl	800d700 <Parser_parse>
	  }
	  if(DataToTransmit > 0 )
 800ac02:	4b36      	ldr	r3, [pc, #216]	; (800acdc <main+0x278>)
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d013      	beq.n	800ac32 <main+0x1ce>
	  {
		  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ac0a:	4b35      	ldr	r3, [pc, #212]	; (800ace0 <main+0x27c>)
 800ac0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac10:	607b      	str	r3, [r7, #4]
		  if (hcdc->TxState == 0)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d10a      	bne.n	800ac32 <main+0x1ce>
		  {
			  LedBlinkOne(&CommPcUsb);
 800ac1c:	481f      	ldr	r0, [pc, #124]	; (800ac9c <main+0x238>)
 800ac1e:	f7ff fece 	bl	800a9be <LedBlinkOne>
			  UsbTransmitTask();
 800ac22:	f001 fcd3 	bl	800c5cc <UsbTransmitTask>

			  DataToTransmit--;
 800ac26:	4b2d      	ldr	r3, [pc, #180]	; (800acdc <main+0x278>)
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	b2da      	uxtb	r2, r3
 800ac2e:	4b2b      	ldr	r3, [pc, #172]	; (800acdc <main+0x278>)
 800ac30:	701a      	strb	r2, [r3, #0]
		  }

	  }


	  IntervalFunc100ms();
 800ac32:	f001 fb41 	bl	800c2b8 <IntervalFunc100ms>
	  IntervalFunc500ms();
 800ac36:	f001 fae7 	bl	800c208 <IntervalFunc500ms>
	  IntervalFunc50ms();
 800ac3a:	f001 fbfd 	bl	800c438 <IntervalFunc50ms>
	  IntervalFunc10000ms();
 800ac3e:	f001 faab 	bl	800c198 <IntervalFunc10000ms>

	  ButtonTask(&KeyDown);
 800ac42:	4814      	ldr	r0, [pc, #80]	; (800ac94 <main+0x230>)
 800ac44:	f7ff fb60 	bl	800a308 <ButtonTask>
	  ButtonTask(&KeyUp);
 800ac48:	4811      	ldr	r0, [pc, #68]	; (800ac90 <main+0x22c>)
 800ac4a:	f7ff fb5d 	bl	800a308 <ButtonTask>

	  LedBlinkTask(&CommPcUsb);
 800ac4e:	4813      	ldr	r0, [pc, #76]	; (800ac9c <main+0x238>)
 800ac50:	f7ff feca 	bl	800a9e8 <LedBlinkTask>
	  LedBlinkTask(&ErrorBlink);
 800ac54:	4812      	ldr	r0, [pc, #72]	; (800aca0 <main+0x23c>)
 800ac56:	f7ff fec7 	bl	800a9e8 <LedBlinkTask>

	  MeasurementConversion();
 800ac5a:	f001 fa47 	bl	800c0ec <MeasurementConversion>

	  LedLightTask(&Logo);
 800ac5e:	4814      	ldr	r0, [pc, #80]	; (800acb0 <main+0x24c>)
 800ac60:	f000 f9e2 	bl	800b028 <LedLightTask>
	  LedLightTask(&Light);
 800ac64:	4813      	ldr	r0, [pc, #76]	; (800acb4 <main+0x250>)
 800ac66:	f000 f9df 	bl	800b028 <LedLightTask>
	  HAL_IWDG_Refresh(&hiwdg);
 800ac6a:	e7ae      	b.n	800abca <main+0x166>
 800ac6c:	20000c78 	.word	0x20000c78
 800ac70:	20000cbc 	.word	0x20000cbc
 800ac74:	20001ea4 	.word	0x20001ea4
 800ac78:	20001e24 	.word	0x20001e24
 800ac7c:	20001e28 	.word	0x20001e28
 800ac80:	20001e2c 	.word	0x20001e2c
 800ac84:	20001e30 	.word	0x20001e30
 800ac88:	20001e3c 	.word	0x20001e3c
 800ac8c:	40011000 	.word	0x40011000
 800ac90:	20000da4 	.word	0x20000da4
 800ac94:	20000dd0 	.word	0x20000dd0
 800ac98:	40011c00 	.word	0x40011c00
 800ac9c:	20000dfc 	.word	0x20000dfc
 800aca0:	20000e08 	.word	0x20000e08
 800aca4:	20002758 	.word	0x20002758
 800aca8:	20002710 	.word	0x20002710
 800acac:	200027a0 	.word	0x200027a0
 800acb0:	20001e7c 	.word	0x20001e7c
 800acb4:	20001e90 	.word	0x20001e90
 800acb8:	40010c00 	.word	0x40010c00
 800acbc:	20001e44 	.word	0x20001e44
 800acc0:	20001e64 	.word	0x20001e64
 800acc4:	20000c04 	.word	0x20000c04
 800acc8:	20000d98 	.word	0x20000d98
 800accc:	20001ea6 	.word	0x20001ea6
 800acd0:	2000161c 	.word	0x2000161c
 800acd4:	20001620 	.word	0x20001620
 800acd8:	20000e14 	.word	0x20000e14
 800acdc:	20001e20 	.word	0x20001e20
 800ace0:	200028c8 	.word	0x200028c8

0800ace4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b096      	sub	sp, #88	; 0x58
 800ace8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800acea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800acee:	2228      	movs	r2, #40	; 0x28
 800acf0:	2100      	movs	r1, #0
 800acf2:	4618      	mov	r0, r3
 800acf4:	f011 fbf3 	bl	801c4de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800acf8:	f107 031c 	add.w	r3, r7, #28
 800acfc:	2200      	movs	r2, #0
 800acfe:	601a      	str	r2, [r3, #0]
 800ad00:	605a      	str	r2, [r3, #4]
 800ad02:	609a      	str	r2, [r3, #8]
 800ad04:	60da      	str	r2, [r3, #12]
 800ad06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ad08:	1d3b      	adds	r3, r7, #4
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	601a      	str	r2, [r3, #0]
 800ad0e:	605a      	str	r2, [r3, #4]
 800ad10:	609a      	str	r2, [r3, #8]
 800ad12:	60da      	str	r2, [r3, #12]
 800ad14:	611a      	str	r2, [r3, #16]
 800ad16:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800ad18:	2309      	movs	r3, #9
 800ad1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800ad1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ad20:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800ad22:	2300      	movs	r3, #0
 800ad24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800ad26:	2301      	movs	r3, #1
 800ad28:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ad2e:	2302      	movs	r3, #2
 800ad30:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ad32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ad36:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800ad38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ad3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ad3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ad42:	4618      	mov	r0, r3
 800ad44:	f00a fb5e 	bl	8015404 <HAL_RCC_OscConfig>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d001      	beq.n	800ad52 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800ad4e:	f001 fdd3 	bl	800c8f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ad52:	230f      	movs	r3, #15
 800ad54:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ad56:	2302      	movs	r3, #2
 800ad58:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800ad5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800ad64:	2300      	movs	r3, #0
 800ad66:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800ad68:	f107 031c 	add.w	r3, r7, #28
 800ad6c:	2102      	movs	r1, #2
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f00a fdca 	bl	8015908 <HAL_RCC_ClockConfig>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d001      	beq.n	800ad7e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800ad7a:	f001 fdbd 	bl	800c8f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800ad7e:	2312      	movs	r3, #18
 800ad80:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800ad82:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800ad86:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ad8c:	1d3b      	adds	r3, r7, #4
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f00a ff4a 	bl	8015c28 <HAL_RCCEx_PeriphCLKConfig>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d001      	beq.n	800ad9e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800ad9a:	f001 fdad 	bl	800c8f8 <Error_Handler>
  }
}
 800ad9e:	bf00      	nop
 800ada0:	3758      	adds	r7, #88	; 0x58
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800adaa:	2200      	movs	r2, #0
 800adac:	2100      	movs	r1, #0
 800adae:	201f      	movs	r0, #31
 800adb0:	f004 fbf5 	bl	800f59e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800adb4:	201f      	movs	r0, #31
 800adb6:	f004 fc0e 	bl	800f5d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800adba:	2200      	movs	r2, #0
 800adbc:	2100      	movs	r1, #0
 800adbe:	2011      	movs	r0, #17
 800adc0:	f004 fbed 	bl	800f59e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800adc4:	2011      	movs	r0, #17
 800adc6:	f004 fc06 	bl	800f5d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800adca:	2200      	movs	r2, #0
 800adcc:	2100      	movs	r1, #0
 800adce:	2010      	movs	r0, #16
 800add0:	f004 fbe5 	bl	800f59e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800add4:	2010      	movs	r0, #16
 800add6:	f004 fbfe 	bl	800f5d6 <HAL_NVIC_EnableIRQ>
  /* USB_LP_CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800adda:	2200      	movs	r2, #0
 800addc:	2100      	movs	r1, #0
 800adde:	2014      	movs	r0, #20
 800ade0:	f004 fbdd 	bl	800f59e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ade4:	2014      	movs	r0, #20
 800ade6:	f004 fbf6 	bl	800f5d6 <HAL_NVIC_EnableIRQ>
  /* ADC1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800adea:	2200      	movs	r2, #0
 800adec:	2100      	movs	r1, #0
 800adee:	2012      	movs	r0, #18
 800adf0:	f004 fbd5 	bl	800f59e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800adf4:	2012      	movs	r0, #18
 800adf6:	f004 fbee 	bl	800f5d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800adfa:	2200      	movs	r2, #0
 800adfc:	2100      	movs	r1, #0
 800adfe:	2038      	movs	r0, #56	; 0x38
 800ae00:	f004 fbcd 	bl	800f59e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800ae04:	2038      	movs	r0, #56	; 0x38
 800ae06:	f004 fbe6 	bl	800f5d6 <HAL_NVIC_EnableIRQ>
}
 800ae0a:	bf00      	nop
 800ae0c:	bd80      	pop	{r7, pc}
	...

0800ae10 <PwmFreqSet>:

/* USER CODE BEGIN 4 */

void PwmFreqSet(uint16_t PwmFrequency)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	4603      	mov	r3, r0
 800ae18:	80fb      	strh	r3, [r7, #6]
	  htim4.Init.Prescaler = PwmFrequency;
 800ae1a:	88fb      	ldrh	r3, [r7, #6]
 800ae1c:	4a06      	ldr	r2, [pc, #24]	; (800ae38 <PwmFreqSet+0x28>)
 800ae1e:	6053      	str	r3, [r2, #4]
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800ae20:	4805      	ldr	r0, [pc, #20]	; (800ae38 <PwmFreqSet+0x28>)
 800ae22:	f00a ffb7 	bl	8015d94 <HAL_TIM_Base_Init>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d001      	beq.n	800ae30 <PwmFreqSet+0x20>
	  {
	    Error_Handler();
 800ae2c:	f001 fd64 	bl	800c8f8 <Error_Handler>
	  }
}
 800ae30:	bf00      	nop
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	20002758 	.word	0x20002758

0800ae3c <OutputSet>:

void OutputSet(uint16_t ODRvalue)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	4603      	mov	r3, r0
 800ae44:	80fb      	strh	r3, [r7, #6]
	GPIOE -> ODR = ODRvalue;
 800ae46:	4a04      	ldr	r2, [pc, #16]	; (800ae58 <OutputSet+0x1c>)
 800ae48:	88fb      	ldrh	r3, [r7, #6]
 800ae4a:	60d3      	str	r3, [r2, #12]
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bc80      	pop	{r7}
 800ae54:	4770      	bx	lr
 800ae56:	bf00      	nop
 800ae58:	40011800 	.word	0x40011800

0800ae5c <OutputPinStateSet>:

void OutputPinStateSet(uint8_t Pin, uint8_t State)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	4603      	mov	r3, r0
 800ae64:	460a      	mov	r2, r1
 800ae66:	71fb      	strb	r3, [r7, #7]
 800ae68:	4613      	mov	r3, r2
 800ae6a:	71bb      	strb	r3, [r7, #6]
	if(State == 1)
 800ae6c:	79bb      	ldrb	r3, [r7, #6]
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d10a      	bne.n	800ae88 <OutputPinStateSet+0x2c>
	{
		GPIOE -> ODR |= (1 << Pin);
 800ae72:	4b0f      	ldr	r3, [pc, #60]	; (800aeb0 <OutputPinStateSet+0x54>)
 800ae74:	68db      	ldr	r3, [r3, #12]
 800ae76:	79fa      	ldrb	r2, [r7, #7]
 800ae78:	2101      	movs	r1, #1
 800ae7a:	fa01 f202 	lsl.w	r2, r1, r2
 800ae7e:	4611      	mov	r1, r2
 800ae80:	4a0b      	ldr	r2, [pc, #44]	; (800aeb0 <OutputPinStateSet+0x54>)
 800ae82:	430b      	orrs	r3, r1
 800ae84:	60d3      	str	r3, [r2, #12]
	}
	else if (State == 0)
	{
		GPIOE -> ODR &= ~(1 << Pin);
	}
}
 800ae86:	e00d      	b.n	800aea4 <OutputPinStateSet+0x48>
	else if (State == 0)
 800ae88:	79bb      	ldrb	r3, [r7, #6]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d10a      	bne.n	800aea4 <OutputPinStateSet+0x48>
		GPIOE -> ODR &= ~(1 << Pin);
 800ae8e:	4b08      	ldr	r3, [pc, #32]	; (800aeb0 <OutputPinStateSet+0x54>)
 800ae90:	68db      	ldr	r3, [r3, #12]
 800ae92:	79fa      	ldrb	r2, [r7, #7]
 800ae94:	2101      	movs	r1, #1
 800ae96:	fa01 f202 	lsl.w	r2, r1, r2
 800ae9a:	43d2      	mvns	r2, r2
 800ae9c:	4611      	mov	r1, r2
 800ae9e:	4a04      	ldr	r2, [pc, #16]	; (800aeb0 <OutputPinStateSet+0x54>)
 800aea0:	400b      	ands	r3, r1
 800aea2:	60d3      	str	r3, [r2, #12]
}
 800aea4:	bf00      	nop
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bc80      	pop	{r7}
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	40011800 	.word	0x40011800

0800aeb4 <OutputPinToggle>:

void OutputPinToggle(uint8_t Pin)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	4603      	mov	r3, r0
 800aebc:	71fb      	strb	r3, [r7, #7]
	GPIOE -> ODR ^= (1 << Pin);
 800aebe:	4b07      	ldr	r3, [pc, #28]	; (800aedc <OutputPinToggle+0x28>)
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	79fa      	ldrb	r2, [r7, #7]
 800aec4:	2101      	movs	r1, #1
 800aec6:	fa01 f202 	lsl.w	r2, r1, r2
 800aeca:	4611      	mov	r1, r2
 800aecc:	4a03      	ldr	r2, [pc, #12]	; (800aedc <OutputPinToggle+0x28>)
 800aece:	404b      	eors	r3, r1
 800aed0:	60d3      	str	r3, [r2, #12]
}
 800aed2:	bf00      	nop
 800aed4:	370c      	adds	r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bc80      	pop	{r7}
 800aeda:	4770      	bx	lr
 800aedc:	40011800 	.word	0x40011800

0800aee0 <PwmSet>:

void PwmSet(uint16_t Pwm1, uint16_t Pwm2, uint16_t Pwm3, uint16_t Pwm4)
{
 800aee0:	b490      	push	{r4, r7}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	4604      	mov	r4, r0
 800aee8:	4608      	mov	r0, r1
 800aeea:	4611      	mov	r1, r2
 800aeec:	461a      	mov	r2, r3
 800aeee:	4623      	mov	r3, r4
 800aef0:	80fb      	strh	r3, [r7, #6]
 800aef2:	4603      	mov	r3, r0
 800aef4:	80bb      	strh	r3, [r7, #4]
 800aef6:	460b      	mov	r3, r1
 800aef8:	807b      	strh	r3, [r7, #2]
 800aefa:	4613      	mov	r3, r2
 800aefc:	803b      	strh	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, Pwm1);
 800aefe:	4b0a      	ldr	r3, [pc, #40]	; (800af28 <PwmSet+0x48>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	88fa      	ldrh	r2, [r7, #6]
 800af04:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, Pwm2);
 800af06:	4b08      	ldr	r3, [pc, #32]	; (800af28 <PwmSet+0x48>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	88ba      	ldrh	r2, [r7, #4]
 800af0c:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, Pwm3);
 800af0e:	4b06      	ldr	r3, [pc, #24]	; (800af28 <PwmSet+0x48>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	887a      	ldrh	r2, [r7, #2]
 800af14:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, Pwm4);
 800af16:	4b04      	ldr	r3, [pc, #16]	; (800af28 <PwmSet+0x48>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	883a      	ldrh	r2, [r7, #0]
 800af1c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800af1e:	bf00      	nop
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bc90      	pop	{r4, r7}
 800af26:	4770      	bx	lr
 800af28:	20002758 	.word	0x20002758

0800af2c <PwmChannelSet>:

void PwmChannelSet(uint8_t Channel, uint16_t Value)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	4603      	mov	r3, r0
 800af34:	460a      	mov	r2, r1
 800af36:	71fb      	strb	r3, [r7, #7]
 800af38:	4613      	mov	r3, r2
 800af3a:	80bb      	strh	r3, [r7, #4]
	Channel = Channel - 1;
 800af3c:	79fb      	ldrb	r3, [r7, #7]
 800af3e:	3b01      	subs	r3, #1
 800af40:	71fb      	strb	r3, [r7, #7]

//	uint8_t ChannelMapper[] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4};
//	__HAL_TIM_SET_COMPARE(&htim4, ChannelMapper[Channel], Value);

	__HAL_TIM_SET_COMPARE(&htim4, Channel*4, Value);
 800af42:	79fb      	ldrb	r3, [r7, #7]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d104      	bne.n	800af52 <PwmChannelSet+0x26>
 800af48:	4b0e      	ldr	r3, [pc, #56]	; (800af84 <PwmChannelSet+0x58>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	88ba      	ldrh	r2, [r7, #4]
 800af4e:	635a      	str	r2, [r3, #52]	; 0x34
}
 800af50:	e013      	b.n	800af7a <PwmChannelSet+0x4e>
	__HAL_TIM_SET_COMPARE(&htim4, Channel*4, Value);
 800af52:	79fb      	ldrb	r3, [r7, #7]
 800af54:	2b01      	cmp	r3, #1
 800af56:	d104      	bne.n	800af62 <PwmChannelSet+0x36>
 800af58:	4b0a      	ldr	r3, [pc, #40]	; (800af84 <PwmChannelSet+0x58>)
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	88bb      	ldrh	r3, [r7, #4]
 800af5e:	6393      	str	r3, [r2, #56]	; 0x38
}
 800af60:	e00b      	b.n	800af7a <PwmChannelSet+0x4e>
	__HAL_TIM_SET_COMPARE(&htim4, Channel*4, Value);
 800af62:	79fb      	ldrb	r3, [r7, #7]
 800af64:	2b02      	cmp	r3, #2
 800af66:	d104      	bne.n	800af72 <PwmChannelSet+0x46>
 800af68:	4b06      	ldr	r3, [pc, #24]	; (800af84 <PwmChannelSet+0x58>)
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	88bb      	ldrh	r3, [r7, #4]
 800af6e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800af70:	e003      	b.n	800af7a <PwmChannelSet+0x4e>
	__HAL_TIM_SET_COMPARE(&htim4, Channel*4, Value);
 800af72:	4b04      	ldr	r3, [pc, #16]	; (800af84 <PwmChannelSet+0x58>)
 800af74:	681a      	ldr	r2, [r3, #0]
 800af76:	88bb      	ldrh	r3, [r7, #4]
 800af78:	6413      	str	r3, [r2, #64]	; 0x40
}
 800af7a:	bf00      	nop
 800af7c:	370c      	adds	r7, #12
 800af7e:	46bd      	mov	sp, r7
 800af80:	bc80      	pop	{r7}
 800af82:	4770      	bx	lr
 800af84:	20002758 	.word	0x20002758

0800af88 <DisplayContrast>:

void DisplayContrast(uint8_t Contrast)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	4603      	mov	r3, r0
 800af90:	71fb      	strb	r3, [r7, #7]
	SSD1306_Command(SSD1306_SETCONTRAST);
 800af92:	2081      	movs	r0, #129	; 0x81
 800af94:	f002 fc7c 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(Contrast);
 800af98:	79fb      	ldrb	r3, [r7, #7]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f002 fc78 	bl	800d890 <SSD1306_Command>
}
 800afa0:	bf00      	nop
 800afa2:	3708      	adds	r7, #8
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <LogoLedSetParameter>:

void LogoLedSetParameter(uint8_t Mode, uint16_t PwmValue, uint16_t DimmerSpeed)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	4603      	mov	r3, r0
 800afb0:	71fb      	strb	r3, [r7, #7]
 800afb2:	460b      	mov	r3, r1
 800afb4:	80bb      	strh	r3, [r7, #4]
 800afb6:	4613      	mov	r3, r2
 800afb8:	807b      	strh	r3, [r7, #2]
	Logo.Mode = Mode;
 800afba:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800afbe:	4b09      	ldr	r3, [pc, #36]	; (800afe4 <LogoLedSetParameter+0x3c>)
 800afc0:	701a      	strb	r2, [r3, #0]
	if(PwmValue != 0) Logo.PwmMax = PwmValue;
 800afc2:	88bb      	ldrh	r3, [r7, #4]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d002      	beq.n	800afce <LogoLedSetParameter+0x26>
 800afc8:	4a06      	ldr	r2, [pc, #24]	; (800afe4 <LogoLedSetParameter+0x3c>)
 800afca:	88bb      	ldrh	r3, [r7, #4]
 800afcc:	8053      	strh	r3, [r2, #2]
	if(DimmerSpeed != 0) Logo.DimmerSpeed = DimmerSpeed;
 800afce:	887b      	ldrh	r3, [r7, #2]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d002      	beq.n	800afda <LogoLedSetParameter+0x32>
 800afd4:	4a03      	ldr	r2, [pc, #12]	; (800afe4 <LogoLedSetParameter+0x3c>)
 800afd6:	887b      	ldrh	r3, [r7, #2]
 800afd8:	8213      	strh	r3, [r2, #16]
}
 800afda:	bf00      	nop
 800afdc:	370c      	adds	r7, #12
 800afde:	46bd      	mov	sp, r7
 800afe0:	bc80      	pop	{r7}
 800afe2:	4770      	bx	lr
 800afe4:	20001e7c 	.word	0x20001e7c

0800afe8 <LightLedSetParameter>:

void LightLedSetParameter(uint8_t Mode, uint16_t PwmValue, uint16_t DimmerSpeed)
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
 800afee:	4603      	mov	r3, r0
 800aff0:	71fb      	strb	r3, [r7, #7]
 800aff2:	460b      	mov	r3, r1
 800aff4:	80bb      	strh	r3, [r7, #4]
 800aff6:	4613      	mov	r3, r2
 800aff8:	807b      	strh	r3, [r7, #2]
	Light.Mode = Mode;
 800affa:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800affe:	4b09      	ldr	r3, [pc, #36]	; (800b024 <LightLedSetParameter+0x3c>)
 800b000:	701a      	strb	r2, [r3, #0]
	if(PwmValue != 0) Light.PwmMax = PwmValue;
 800b002:	88bb      	ldrh	r3, [r7, #4]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d002      	beq.n	800b00e <LightLedSetParameter+0x26>
 800b008:	4a06      	ldr	r2, [pc, #24]	; (800b024 <LightLedSetParameter+0x3c>)
 800b00a:	88bb      	ldrh	r3, [r7, #4]
 800b00c:	8053      	strh	r3, [r2, #2]
	if(DimmerSpeed != 0)Light.DimmerSpeed = DimmerSpeed;
 800b00e:	887b      	ldrh	r3, [r7, #2]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d002      	beq.n	800b01a <LightLedSetParameter+0x32>
 800b014:	4a03      	ldr	r2, [pc, #12]	; (800b024 <LightLedSetParameter+0x3c>)
 800b016:	887b      	ldrh	r3, [r7, #2]
 800b018:	8213      	strh	r3, [r2, #16]
}
 800b01a:	bf00      	nop
 800b01c:	370c      	adds	r7, #12
 800b01e:	46bd      	mov	sp, r7
 800b020:	bc80      	pop	{r7}
 800b022:	4770      	bx	lr
 800b024:	20001e90 	.word	0x20001e90

0800b028 <LedLightTask>:

void LedLightTask(LedLightParameter_t *Instance)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b082      	sub	sp, #8
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
	switch(Instance -> Mode)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f993 3000 	ldrsb.w	r3, [r3]
 800b036:	3301      	adds	r3, #1
 800b038:	2b04      	cmp	r3, #4
 800b03a:	f200 827d 	bhi.w	800b538 <LedLightTask+0x510>
 800b03e:	a201      	add	r2, pc, #4	; (adr r2, 800b044 <LedLightTask+0x1c>)
 800b040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b044:	0800b52f 	.word	0x0800b52f
 800b048:	0800b059 	.word	0x0800b059
 800b04c:	0800b0a1 	.word	0x0800b0a1
 800b050:	0800b243 	.word	0x0800b243
 800b054:	0800b3eb 	.word	0x0800b3eb
	{
	case -1:
		break;
	case 0:
		__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, 0);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	7a1b      	ldrb	r3, [r3, #8]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d105      	bne.n	800b06c <LedLightTask+0x44>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	2200      	movs	r2, #0
 800b068:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800b06a:	e265      	b.n	800b538 <LedLightTask+0x510>
		__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, 0);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	7a1b      	ldrb	r3, [r3, #8]
 800b070:	2b04      	cmp	r3, #4
 800b072:	d105      	bne.n	800b080 <LedLightTask+0x58>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	2300      	movs	r3, #0
 800b07c:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 800b07e:	e25b      	b.n	800b538 <LedLightTask+0x510>
		__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, 0);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	7a1b      	ldrb	r3, [r3, #8]
 800b084:	2b08      	cmp	r3, #8
 800b086:	d105      	bne.n	800b094 <LedLightTask+0x6c>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	2300      	movs	r3, #0
 800b090:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 800b092:	e251      	b.n	800b538 <LedLightTask+0x510>
		__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, 0);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	2300      	movs	r3, #0
 800b09c:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 800b09e:	e24b      	b.n	800b538 <LedLightTask+0x510>
	case 1:
		if(Instance -> PwmActual > Instance -> PwmMax)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	895a      	ldrh	r2, [r3, #10]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	885b      	ldrh	r3, [r3, #2]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d92d      	bls.n	800b108 <LedLightTask+0xe0>
		{
			Instance -> PwmActual = Instance -> PwmMax;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	885a      	ldrh	r2, [r3, #2]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	815a      	strh	r2, [r3, #10]
			__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	7a1b      	ldrb	r3, [r3, #8]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d106      	bne.n	800b0ca <LedLightTask+0xa2>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	895a      	ldrh	r2, [r3, #10]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	635a      	str	r2, [r3, #52]	; 0x34
 800b0c8:	e01e      	b.n	800b108 <LedLightTask+0xe0>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	7a1b      	ldrb	r3, [r3, #8]
 800b0ce:	2b04      	cmp	r3, #4
 800b0d0:	d107      	bne.n	800b0e2 <LedLightTask+0xba>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	8959      	ldrh	r1, [r3, #10]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	460b      	mov	r3, r1
 800b0de:	6393      	str	r3, [r2, #56]	; 0x38
 800b0e0:	e012      	b.n	800b108 <LedLightTask+0xe0>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	7a1b      	ldrb	r3, [r3, #8]
 800b0e6:	2b08      	cmp	r3, #8
 800b0e8:	d107      	bne.n	800b0fa <LedLightTask+0xd2>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	8959      	ldrh	r1, [r3, #10]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	63d3      	str	r3, [r2, #60]	; 0x3c
 800b0f8:	e006      	b.n	800b108 <LedLightTask+0xe0>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	8959      	ldrh	r1, [r3, #10]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	460b      	mov	r3, r1
 800b106:	6413      	str	r3, [r2, #64]	; 0x40
		}
		if(DOOR_OPEN)
 800b108:	2101      	movs	r1, #1
 800b10a:	4888      	ldr	r0, [pc, #544]	; (800b32c <LedLightTask+0x304>)
 800b10c:	f005 f9f4 	bl	80104f8 <HAL_GPIO_ReadPin>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	d147      	bne.n	800b1a6 <LedLightTask+0x17e>
		{
			if(HAL_GetTick() - Instance->LastTick > Instance->DimmerSpeed && Instance->PwmActual <= Instance->PwmMax)
 800b116:	f003 fb49 	bl	800e7ac <HAL_GetTick>
 800b11a:	4602      	mov	r2, r0
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	68db      	ldr	r3, [r3, #12]
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	8a12      	ldrh	r2, [r2, #16]
 800b126:	4293      	cmp	r3, r2
 800b128:	f240 8203 	bls.w	800b532 <LedLightTask+0x50a>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	895a      	ldrh	r2, [r3, #10]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	885b      	ldrh	r3, [r3, #2]
 800b134:	429a      	cmp	r2, r3
 800b136:	f200 81fc 	bhi.w	800b532 <LedLightTask+0x50a>
			{
				Instance->PwmActual++;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	895b      	ldrh	r3, [r3, #10]
 800b13e:	3301      	adds	r3, #1
 800b140:	b29a      	uxth	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	815a      	strh	r2, [r3, #10]
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	7a1b      	ldrb	r3, [r3, #8]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d106      	bne.n	800b15c <LedLightTask+0x134>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	895a      	ldrh	r2, [r3, #10]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	635a      	str	r2, [r3, #52]	; 0x34
 800b15a:	e01e      	b.n	800b19a <LedLightTask+0x172>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	7a1b      	ldrb	r3, [r3, #8]
 800b160:	2b04      	cmp	r3, #4
 800b162:	d107      	bne.n	800b174 <LedLightTask+0x14c>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	8959      	ldrh	r1, [r3, #10]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	460b      	mov	r3, r1
 800b170:	6393      	str	r3, [r2, #56]	; 0x38
 800b172:	e012      	b.n	800b19a <LedLightTask+0x172>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	7a1b      	ldrb	r3, [r3, #8]
 800b178:	2b08      	cmp	r3, #8
 800b17a:	d107      	bne.n	800b18c <LedLightTask+0x164>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	8959      	ldrh	r1, [r3, #10]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	460b      	mov	r3, r1
 800b188:	63d3      	str	r3, [r2, #60]	; 0x3c
 800b18a:	e006      	b.n	800b19a <LedLightTask+0x172>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	8959      	ldrh	r1, [r3, #10]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	460b      	mov	r3, r1
 800b198:	6413      	str	r3, [r2, #64]	; 0x40
				Instance->LastTick = HAL_GetTick();
 800b19a:	f003 fb07 	bl	800e7ac <HAL_GetTick>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	60da      	str	r2, [r3, #12]
				Instance->PwmActual--;
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
				Instance->LastTick = HAL_GetTick();
			}
		}
		break;
 800b1a4:	e1c5      	b.n	800b532 <LedLightTask+0x50a>
		else if(DOOR_CLOSED)
 800b1a6:	2101      	movs	r1, #1
 800b1a8:	4860      	ldr	r0, [pc, #384]	; (800b32c <LedLightTask+0x304>)
 800b1aa:	f005 f9a5 	bl	80104f8 <HAL_GPIO_ReadPin>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	f000 81be 	beq.w	800b532 <LedLightTask+0x50a>
			if(HAL_GetTick() - Instance->LastTick > Instance->DimmerSpeed && Instance->PwmActual > 0)
 800b1b6:	f003 faf9 	bl	800e7ac <HAL_GetTick>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	8a12      	ldrh	r2, [r2, #16]
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	f240 81b3 	bls.w	800b532 <LedLightTask+0x50a>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	895b      	ldrh	r3, [r3, #10]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	f000 81ae 	beq.w	800b532 <LedLightTask+0x50a>
				Instance->PwmActual--;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	895b      	ldrh	r3, [r3, #10]
 800b1da:	3b01      	subs	r3, #1
 800b1dc:	b29a      	uxth	r2, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	815a      	strh	r2, [r3, #10]
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	7a1b      	ldrb	r3, [r3, #8]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d106      	bne.n	800b1f8 <LedLightTask+0x1d0>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	895a      	ldrh	r2, [r3, #10]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	635a      	str	r2, [r3, #52]	; 0x34
 800b1f6:	e01e      	b.n	800b236 <LedLightTask+0x20e>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	7a1b      	ldrb	r3, [r3, #8]
 800b1fc:	2b04      	cmp	r3, #4
 800b1fe:	d107      	bne.n	800b210 <LedLightTask+0x1e8>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	8959      	ldrh	r1, [r3, #10]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	460b      	mov	r3, r1
 800b20c:	6393      	str	r3, [r2, #56]	; 0x38
 800b20e:	e012      	b.n	800b236 <LedLightTask+0x20e>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	7a1b      	ldrb	r3, [r3, #8]
 800b214:	2b08      	cmp	r3, #8
 800b216:	d107      	bne.n	800b228 <LedLightTask+0x200>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	8959      	ldrh	r1, [r3, #10]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	460b      	mov	r3, r1
 800b224:	63d3      	str	r3, [r2, #60]	; 0x3c
 800b226:	e006      	b.n	800b236 <LedLightTask+0x20e>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	8959      	ldrh	r1, [r3, #10]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	460b      	mov	r3, r1
 800b234:	6413      	str	r3, [r2, #64]	; 0x40
				Instance->LastTick = HAL_GetTick();
 800b236:	f003 fab9 	bl	800e7ac <HAL_GetTick>
 800b23a:	4602      	mov	r2, r0
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	60da      	str	r2, [r3, #12]
		break;
 800b240:	e177      	b.n	800b532 <LedLightTask+0x50a>
	case 2:
		if(Instance -> PwmActual > Instance -> PwmMax)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	895a      	ldrh	r2, [r3, #10]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	885b      	ldrh	r3, [r3, #2]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d92d      	bls.n	800b2aa <LedLightTask+0x282>
			{
			Instance -> PwmActual = Instance -> PwmMax;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	885a      	ldrh	r2, [r3, #2]
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	815a      	strh	r2, [r3, #10]
			__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	7a1b      	ldrb	r3, [r3, #8]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d106      	bne.n	800b26c <LedLightTask+0x244>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	895a      	ldrh	r2, [r3, #10]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	635a      	str	r2, [r3, #52]	; 0x34
 800b26a:	e01e      	b.n	800b2aa <LedLightTask+0x282>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	7a1b      	ldrb	r3, [r3, #8]
 800b270:	2b04      	cmp	r3, #4
 800b272:	d107      	bne.n	800b284 <LedLightTask+0x25c>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	8959      	ldrh	r1, [r3, #10]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	460b      	mov	r3, r1
 800b280:	6393      	str	r3, [r2, #56]	; 0x38
 800b282:	e012      	b.n	800b2aa <LedLightTask+0x282>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	7a1b      	ldrb	r3, [r3, #8]
 800b288:	2b08      	cmp	r3, #8
 800b28a:	d107      	bne.n	800b29c <LedLightTask+0x274>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	8959      	ldrh	r1, [r3, #10]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	460b      	mov	r3, r1
 800b298:	63d3      	str	r3, [r2, #60]	; 0x3c
 800b29a:	e006      	b.n	800b2aa <LedLightTask+0x282>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	8959      	ldrh	r1, [r3, #10]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	6413      	str	r3, [r2, #64]	; 0x40
			}
		if(DOOR_OPEN)
 800b2aa:	2101      	movs	r1, #1
 800b2ac:	481f      	ldr	r0, [pc, #124]	; (800b32c <LedLightTask+0x304>)
 800b2ae:	f005 f923 	bl	80104f8 <HAL_GPIO_ReadPin>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d148      	bne.n	800b34a <LedLightTask+0x322>
		{
			if(HAL_GetTick() - Instance->LastTick > Instance->DimmerSpeed && Instance->PwmActual > 0)
 800b2b8:	f003 fa78 	bl	800e7ac <HAL_GetTick>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	1ad3      	subs	r3, r2, r3
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	8a12      	ldrh	r2, [r2, #16]
 800b2c8:	4293      	cmp	r3, r2
 800b2ca:	f240 8134 	bls.w	800b536 <LedLightTask+0x50e>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	895b      	ldrh	r3, [r3, #10]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f000 812f 	beq.w	800b536 <LedLightTask+0x50e>
			{
				Instance->PwmActual--;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	895b      	ldrh	r3, [r3, #10]
 800b2dc:	3b01      	subs	r3, #1
 800b2de:	b29a      	uxth	r2, r3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	815a      	strh	r2, [r3, #10]
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	7a1b      	ldrb	r3, [r3, #8]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d106      	bne.n	800b2fa <LedLightTask+0x2d2>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	895a      	ldrh	r2, [r3, #10]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	635a      	str	r2, [r3, #52]	; 0x34
 800b2f8:	e021      	b.n	800b33e <LedLightTask+0x316>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	7a1b      	ldrb	r3, [r3, #8]
 800b2fe:	2b04      	cmp	r3, #4
 800b300:	d107      	bne.n	800b312 <LedLightTask+0x2ea>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	8959      	ldrh	r1, [r3, #10]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	460b      	mov	r3, r1
 800b30e:	6393      	str	r3, [r2, #56]	; 0x38
 800b310:	e015      	b.n	800b33e <LedLightTask+0x316>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	7a1b      	ldrb	r3, [r3, #8]
 800b316:	2b08      	cmp	r3, #8
 800b318:	d10a      	bne.n	800b330 <LedLightTask+0x308>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	8959      	ldrh	r1, [r3, #10]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	681a      	ldr	r2, [r3, #0]
 800b324:	460b      	mov	r3, r1
 800b326:	63d3      	str	r3, [r2, #60]	; 0x3c
 800b328:	e009      	b.n	800b33e <LedLightTask+0x316>
 800b32a:	bf00      	nop
 800b32c:	40010800 	.word	0x40010800
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	8959      	ldrh	r1, [r3, #10]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	460b      	mov	r3, r1
 800b33c:	6413      	str	r3, [r2, #64]	; 0x40
				Instance->LastTick = HAL_GetTick();
 800b33e:	f003 fa35 	bl	800e7ac <HAL_GetTick>
 800b342:	4602      	mov	r2, r0
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	60da      	str	r2, [r3, #12]
				Instance->PwmActual++;
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
				Instance->LastTick = HAL_GetTick();
			}
		}
		break;
 800b348:	e0f5      	b.n	800b536 <LedLightTask+0x50e>
		else if(DOOR_CLOSED)
 800b34a:	2101      	movs	r1, #1
 800b34c:	487c      	ldr	r0, [pc, #496]	; (800b540 <LedLightTask+0x518>)
 800b34e:	f005 f8d3 	bl	80104f8 <HAL_GPIO_ReadPin>
 800b352:	4603      	mov	r3, r0
 800b354:	2b00      	cmp	r3, #0
 800b356:	f000 80ee 	beq.w	800b536 <LedLightTask+0x50e>
			if(HAL_GetTick() - Instance->LastTick > Instance->DimmerSpeed && Instance->PwmActual < Instance->PwmMax)
 800b35a:	f003 fa27 	bl	800e7ac <HAL_GetTick>
 800b35e:	4602      	mov	r2, r0
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	1ad3      	subs	r3, r2, r3
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	8a12      	ldrh	r2, [r2, #16]
 800b36a:	4293      	cmp	r3, r2
 800b36c:	f240 80e3 	bls.w	800b536 <LedLightTask+0x50e>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	895a      	ldrh	r2, [r3, #10]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	885b      	ldrh	r3, [r3, #2]
 800b378:	429a      	cmp	r2, r3
 800b37a:	f080 80dc 	bcs.w	800b536 <LedLightTask+0x50e>
				Instance->PwmActual++;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	895b      	ldrh	r3, [r3, #10]
 800b382:	3301      	adds	r3, #1
 800b384:	b29a      	uxth	r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	815a      	strh	r2, [r3, #10]
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	7a1b      	ldrb	r3, [r3, #8]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d106      	bne.n	800b3a0 <LedLightTask+0x378>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	895a      	ldrh	r2, [r3, #10]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	635a      	str	r2, [r3, #52]	; 0x34
 800b39e:	e01e      	b.n	800b3de <LedLightTask+0x3b6>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	7a1b      	ldrb	r3, [r3, #8]
 800b3a4:	2b04      	cmp	r3, #4
 800b3a6:	d107      	bne.n	800b3b8 <LedLightTask+0x390>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	8959      	ldrh	r1, [r3, #10]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	6393      	str	r3, [r2, #56]	; 0x38
 800b3b6:	e012      	b.n	800b3de <LedLightTask+0x3b6>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	7a1b      	ldrb	r3, [r3, #8]
 800b3bc:	2b08      	cmp	r3, #8
 800b3be:	d107      	bne.n	800b3d0 <LedLightTask+0x3a8>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	8959      	ldrh	r1, [r3, #10]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	63d3      	str	r3, [r2, #60]	; 0x3c
 800b3ce:	e006      	b.n	800b3de <LedLightTask+0x3b6>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	8959      	ldrh	r1, [r3, #10]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	460b      	mov	r3, r1
 800b3dc:	6413      	str	r3, [r2, #64]	; 0x40
				Instance->LastTick = HAL_GetTick();
 800b3de:	f003 f9e5 	bl	800e7ac <HAL_GetTick>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	60da      	str	r2, [r3, #12]
		break;
 800b3e8:	e0a5      	b.n	800b536 <LedLightTask+0x50e>
	case 3:
		if(!Instance->Direction)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	7c9b      	ldrb	r3, [r3, #18]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d14a      	bne.n	800b488 <LedLightTask+0x460>
		{
			if(HAL_GetTick() - Instance->LastTick > Instance->DimmerSpeed && Instance->PwmActual > 50)
 800b3f2:	f003 f9db 	bl	800e7ac <HAL_GetTick>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	1ad3      	subs	r3, r2, r3
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	8a12      	ldrh	r2, [r2, #16]
 800b402:	4293      	cmp	r3, r2
 800b404:	d938      	bls.n	800b478 <LedLightTask+0x450>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	895b      	ldrh	r3, [r3, #10]
 800b40a:	2b32      	cmp	r3, #50	; 0x32
 800b40c:	d934      	bls.n	800b478 <LedLightTask+0x450>
			{
				Instance->PwmActual--;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	895b      	ldrh	r3, [r3, #10]
 800b412:	3b01      	subs	r3, #1
 800b414:	b29a      	uxth	r2, r3
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	815a      	strh	r2, [r3, #10]
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	7a1b      	ldrb	r3, [r3, #8]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d106      	bne.n	800b430 <LedLightTask+0x408>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	895a      	ldrh	r2, [r3, #10]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	635a      	str	r2, [r3, #52]	; 0x34
 800b42e:	e01e      	b.n	800b46e <LedLightTask+0x446>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	7a1b      	ldrb	r3, [r3, #8]
 800b434:	2b04      	cmp	r3, #4
 800b436:	d107      	bne.n	800b448 <LedLightTask+0x420>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	8959      	ldrh	r1, [r3, #10]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	460b      	mov	r3, r1
 800b444:	6393      	str	r3, [r2, #56]	; 0x38
 800b446:	e012      	b.n	800b46e <LedLightTask+0x446>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	7a1b      	ldrb	r3, [r3, #8]
 800b44c:	2b08      	cmp	r3, #8
 800b44e:	d107      	bne.n	800b460 <LedLightTask+0x438>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	8959      	ldrh	r1, [r3, #10]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	460b      	mov	r3, r1
 800b45c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800b45e:	e006      	b.n	800b46e <LedLightTask+0x446>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	8959      	ldrh	r1, [r3, #10]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	460b      	mov	r3, r1
 800b46c:	6413      	str	r3, [r2, #64]	; 0x40
				Instance->LastTick = HAL_GetTick();
 800b46e:	f003 f99d 	bl	800e7ac <HAL_GetTick>
 800b472:	4602      	mov	r2, r0
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	60da      	str	r2, [r3, #12]
			}
			if(Instance->PwmActual <= 50) Instance -> Direction = 1;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	895b      	ldrh	r3, [r3, #10]
 800b47c:	2b32      	cmp	r3, #50	; 0x32
 800b47e:	d85b      	bhi.n	800b538 <LedLightTask+0x510>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2201      	movs	r2, #1
 800b484:	749a      	strb	r2, [r3, #18]
			}
			if(Instance->PwmActual >= Instance->PwmMax) Instance -> Direction = 0;
		}

	}
}
 800b486:	e057      	b.n	800b538 <LedLightTask+0x510>
		else if(Instance->Direction)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	7c9b      	ldrb	r3, [r3, #18]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d053      	beq.n	800b538 <LedLightTask+0x510>
			if(HAL_GetTick() - Instance->LastTick > Instance->DimmerSpeed && Instance->PwmActual <= Instance->PwmMax)
 800b490:	f003 f98c 	bl	800e7ac <HAL_GetTick>
 800b494:	4602      	mov	r2, r0
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	68db      	ldr	r3, [r3, #12]
 800b49a:	1ad3      	subs	r3, r2, r3
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	8a12      	ldrh	r2, [r2, #16]
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d93a      	bls.n	800b51a <LedLightTask+0x4f2>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	895a      	ldrh	r2, [r3, #10]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	885b      	ldrh	r3, [r3, #2]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d834      	bhi.n	800b51a <LedLightTask+0x4f2>
				Instance->PwmActual++;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	895b      	ldrh	r3, [r3, #10]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	b29a      	uxth	r2, r3
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	815a      	strh	r2, [r3, #10]
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	7a1b      	ldrb	r3, [r3, #8]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d106      	bne.n	800b4d2 <LedLightTask+0x4aa>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	895a      	ldrh	r2, [r3, #10]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	635a      	str	r2, [r3, #52]	; 0x34
 800b4d0:	e01e      	b.n	800b510 <LedLightTask+0x4e8>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	7a1b      	ldrb	r3, [r3, #8]
 800b4d6:	2b04      	cmp	r3, #4
 800b4d8:	d107      	bne.n	800b4ea <LedLightTask+0x4c2>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	8959      	ldrh	r1, [r3, #10]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	6393      	str	r3, [r2, #56]	; 0x38
 800b4e8:	e012      	b.n	800b510 <LedLightTask+0x4e8>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	7a1b      	ldrb	r3, [r3, #8]
 800b4ee:	2b08      	cmp	r3, #8
 800b4f0:	d107      	bne.n	800b502 <LedLightTask+0x4da>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	8959      	ldrh	r1, [r3, #10]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	63d3      	str	r3, [r2, #60]	; 0x3c
 800b500:	e006      	b.n	800b510 <LedLightTask+0x4e8>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	8959      	ldrh	r1, [r3, #10]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	460b      	mov	r3, r1
 800b50e:	6413      	str	r3, [r2, #64]	; 0x40
				Instance->LastTick = HAL_GetTick();
 800b510:	f003 f94c 	bl	800e7ac <HAL_GetTick>
 800b514:	4602      	mov	r2, r0
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	60da      	str	r2, [r3, #12]
			if(Instance->PwmActual >= Instance->PwmMax) Instance -> Direction = 0;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	895a      	ldrh	r2, [r3, #10]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	885b      	ldrh	r3, [r3, #2]
 800b522:	429a      	cmp	r2, r3
 800b524:	d308      	bcc.n	800b538 <LedLightTask+0x510>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2200      	movs	r2, #0
 800b52a:	749a      	strb	r2, [r3, #18]
}
 800b52c:	e004      	b.n	800b538 <LedLightTask+0x510>
		break;
 800b52e:	bf00      	nop
 800b530:	e002      	b.n	800b538 <LedLightTask+0x510>
		break;
 800b532:	bf00      	nop
 800b534:	e000      	b.n	800b538 <LedLightTask+0x510>
		break;
 800b536:	bf00      	nop
}
 800b538:	bf00      	nop
 800b53a:	3708      	adds	r7, #8
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	40010800 	.word	0x40010800

0800b544 <LedLightInit>:

void LedLightInit(LedLightParameter_t *Instance, TIM_HandleTypeDef *htim, uint8_t Channel, uint16_t DimmerSpeed)
{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
 800b54a:	60f8      	str	r0, [r7, #12]
 800b54c:	60b9      	str	r1, [r7, #8]
 800b54e:	4611      	mov	r1, r2
 800b550:	461a      	mov	r2, r3
 800b552:	460b      	mov	r3, r1
 800b554:	71fb      	strb	r3, [r7, #7]
 800b556:	4613      	mov	r3, r2
 800b558:	80bb      	strh	r3, [r7, #4]
	Instance -> htim = htim;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	68ba      	ldr	r2, [r7, #8]
 800b55e:	605a      	str	r2, [r3, #4]
	Instance -> Channel = Channel;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	79fa      	ldrb	r2, [r7, #7]
 800b564:	721a      	strb	r2, [r3, #8]
	Instance -> DimmerSpeed = DimmerSpeed;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	88ba      	ldrh	r2, [r7, #4]
 800b56a:	821a      	strh	r2, [r3, #16]
}
 800b56c:	bf00      	nop
 800b56e:	3714      	adds	r7, #20
 800b570:	46bd      	mov	sp, r7
 800b572:	bc80      	pop	{r7}
 800b574:	4770      	bx	lr
	...

0800b578 <ShowMenu>:


void ShowMenu(void)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	af00      	add	r7, sp, #0
	ButtonRegisterPressCallback(&KeyDown, MenuNext);
 800b57c:	490b      	ldr	r1, [pc, #44]	; (800b5ac <ShowMenu+0x34>)
 800b57e:	480c      	ldr	r0, [pc, #48]	; (800b5b0 <ShowMenu+0x38>)
 800b580:	f7fe fded 	bl	800a15e <ButtonRegisterPressCallback>
	ButtonRegisterRepeatCallback(&KeyDown, MenuPrev);
 800b584:	490b      	ldr	r1, [pc, #44]	; (800b5b4 <ShowMenu+0x3c>)
 800b586:	480a      	ldr	r0, [pc, #40]	; (800b5b0 <ShowMenu+0x38>)
 800b588:	f7fe fdf6 	bl	800a178 <ButtonRegisterRepeatCallback>
	ButtonRegisterPressCallback(&KeyUp, MenuEnter);
 800b58c:	490a      	ldr	r1, [pc, #40]	; (800b5b8 <ShowMenu+0x40>)
 800b58e:	480b      	ldr	r0, [pc, #44]	; (800b5bc <ShowMenu+0x44>)
 800b590:	f7fe fde5 	bl	800a15e <ButtonRegisterPressCallback>
	ButtonRegisterRepeatCallback(&KeyUp, NULL);
 800b594:	2100      	movs	r1, #0
 800b596:	4809      	ldr	r0, [pc, #36]	; (800b5bc <ShowMenu+0x44>)
 800b598:	f7fe fdee 	bl	800a178 <ButtonRegisterRepeatCallback>
	ActualVisibleFunc = ScrollString;
 800b59c:	4b08      	ldr	r3, [pc, #32]	; (800b5c0 <ShowMenu+0x48>)
 800b59e:	4a09      	ldr	r2, [pc, #36]	; (800b5c4 <ShowMenu+0x4c>)
 800b5a0:	601a      	str	r2, [r3, #0]
	MenuRefresh();
 800b5a2:	f001 fbab 	bl	800ccfc <MenuRefresh>
}
 800b5a6:	bf00      	nop
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	0800ca81 	.word	0x0800ca81
 800b5b0:	20000dd0 	.word	0x20000dd0
 800b5b4:	0800cb05 	.word	0x0800cb05
 800b5b8:	0800cb7d 	.word	0x0800cb7d
 800b5bc:	20000da4 	.word	0x20000da4
 800b5c0:	20001ea8 	.word	0x20001ea8
 800b5c4:	0800ced5 	.word	0x0800ced5

0800b5c8 <HideMenu>:

void HideMenu(void)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	af00      	add	r7, sp, #0
	ButtonRegisterPressCallback(&KeyDown, NULL);
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	4808      	ldr	r0, [pc, #32]	; (800b5f0 <HideMenu+0x28>)
 800b5d0:	f7fe fdc5 	bl	800a15e <ButtonRegisterPressCallback>
	ButtonRegisterRepeatCallback(&KeyDown, NULL);
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	4806      	ldr	r0, [pc, #24]	; (800b5f0 <HideMenu+0x28>)
 800b5d8:	f7fe fdce 	bl	800a178 <ButtonRegisterRepeatCallback>
	ButtonRegisterPressCallback(&KeyUp, NULL);
 800b5dc:	2100      	movs	r1, #0
 800b5de:	4805      	ldr	r0, [pc, #20]	; (800b5f4 <HideMenu+0x2c>)
 800b5e0:	f7fe fdbd 	bl	800a15e <ButtonRegisterPressCallback>
	ActualVisibleFunc = NULL;
 800b5e4:	4b04      	ldr	r3, [pc, #16]	; (800b5f8 <HideMenu+0x30>)
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	601a      	str	r2, [r3, #0]
}
 800b5ea:	bf00      	nop
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	20000dd0 	.word	0x20000dd0
 800b5f4:	20000da4 	.word	0x20000da4
 800b5f8:	20001ea8 	.word	0x20001ea8

0800b5fc <ShowMeasurements>:

void ShowMeasurements(void)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b086      	sub	sp, #24
 800b600:	af02      	add	r7, sp, #8
	HideMenu();
 800b602:	f7ff ffe1 	bl	800b5c8 <HideMenu>
	ActualVisibleFunc = ShowMeasurements;
 800b606:	4b23      	ldr	r3, [pc, #140]	; (800b694 <ShowMeasurements+0x98>)
 800b608:	4a23      	ldr	r2, [pc, #140]	; (800b698 <ShowMeasurements+0x9c>)
 800b60a:	601a      	str	r2, [r3, #0]
	ButtonRegisterPressCallback(&KeyDown, ShowMenu);
 800b60c:	4923      	ldr	r1, [pc, #140]	; (800b69c <ShowMeasurements+0xa0>)
 800b60e:	4824      	ldr	r0, [pc, #144]	; (800b6a0 <ShowMeasurements+0xa4>)
 800b610:	f7fe fda5 	bl	800a15e <ButtonRegisterPressCallback>
	SSD1306_Clear(BLACK);
 800b614:	2000      	movs	r0, #0
 800b616:	f002 fa0d 	bl	800da34 <SSD1306_Clear>
	char buff[16];
	sprintf(buff, "5V:   %.2fV", Measurements.Voltage5);
 800b61a:	4b22      	ldr	r3, [pc, #136]	; (800b6a4 <ShowMeasurements+0xa8>)
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	4618      	mov	r0, r3
 800b620:	f7fc ff6e 	bl	8008500 <__aeabi_f2d>
 800b624:	4602      	mov	r2, r0
 800b626:	460b      	mov	r3, r1
 800b628:	4638      	mov	r0, r7
 800b62a:	491f      	ldr	r1, [pc, #124]	; (800b6a8 <ShowMeasurements+0xac>)
 800b62c:	f010 fef4 	bl	801c418 <siprintf>
	GFX_DrawString(0, 0, buff, WHITE, 1);
 800b630:	463a      	mov	r2, r7
 800b632:	2301      	movs	r3, #1
 800b634:	9300      	str	r3, [sp, #0]
 800b636:	2301      	movs	r3, #1
 800b638:	2100      	movs	r1, #0
 800b63a:	2000      	movs	r0, #0
 800b63c:	f7fe f80a 	bl	8009654 <GFX_DrawString>
	sprintf(buff, "12V: %5.2fV", Measurements.Voltage12);
 800b640:	4b18      	ldr	r3, [pc, #96]	; (800b6a4 <ShowMeasurements+0xa8>)
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	4618      	mov	r0, r3
 800b646:	f7fc ff5b 	bl	8008500 <__aeabi_f2d>
 800b64a:	4602      	mov	r2, r0
 800b64c:	460b      	mov	r3, r1
 800b64e:	4638      	mov	r0, r7
 800b650:	4916      	ldr	r1, [pc, #88]	; (800b6ac <ShowMeasurements+0xb0>)
 800b652:	f010 fee1 	bl	801c418 <siprintf>
	GFX_DrawString(0, 16, buff, WHITE, 1);
 800b656:	463a      	mov	r2, r7
 800b658:	2301      	movs	r3, #1
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	2301      	movs	r3, #1
 800b65e:	2110      	movs	r1, #16
 800b660:	2000      	movs	r0, #0
 800b662:	f7fd fff7 	bl	8009654 <GFX_DrawString>
	sprintf(buff, "Curr: %.2fA", Measurements.Current);
 800b666:	4b0f      	ldr	r3, [pc, #60]	; (800b6a4 <ShowMeasurements+0xa8>)
 800b668:	691b      	ldr	r3, [r3, #16]
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7fc ff48 	bl	8008500 <__aeabi_f2d>
 800b670:	4602      	mov	r2, r0
 800b672:	460b      	mov	r3, r1
 800b674:	4638      	mov	r0, r7
 800b676:	490e      	ldr	r1, [pc, #56]	; (800b6b0 <ShowMeasurements+0xb4>)
 800b678:	f010 fece 	bl	801c418 <siprintf>
	GFX_DrawString(0, 32, buff, WHITE, 1);
 800b67c:	463a      	mov	r2, r7
 800b67e:	2301      	movs	r3, #1
 800b680:	9300      	str	r3, [sp, #0]
 800b682:	2301      	movs	r3, #1
 800b684:	2120      	movs	r1, #32
 800b686:	2000      	movs	r0, #0
 800b688:	f7fd ffe4 	bl	8009654 <GFX_DrawString>
}
 800b68c:	bf00      	nop
 800b68e:	3710      	adds	r7, #16
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	20001ea8 	.word	0x20001ea8
 800b698:	0800b5fd 	.word	0x0800b5fd
 800b69c:	0800b579 	.word	0x0800b579
 800b6a0:	20000dd0 	.word	0x20000dd0
 800b6a4:	20001e64 	.word	0x20001e64
 800b6a8:	0801e780 	.word	0x0801e780
 800b6ac:	0801e78c 	.word	0x0801e78c
 800b6b0:	0801e798 	.word	0x0801e798

0800b6b4 <ShowTemperature>:

void ShowTemperature(void)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af02      	add	r7, sp, #8
	HideMenu();
 800b6ba:	f7ff ff85 	bl	800b5c8 <HideMenu>
	ActualVisibleFunc = ShowTemperature;
 800b6be:	4b1a      	ldr	r3, [pc, #104]	; (800b728 <ShowTemperature+0x74>)
 800b6c0:	4a1a      	ldr	r2, [pc, #104]	; (800b72c <ShowTemperature+0x78>)
 800b6c2:	601a      	str	r2, [r3, #0]
	ButtonRegisterPressCallback(&KeyDown, ShowMenu);
 800b6c4:	491a      	ldr	r1, [pc, #104]	; (800b730 <ShowTemperature+0x7c>)
 800b6c6:	481b      	ldr	r0, [pc, #108]	; (800b734 <ShowTemperature+0x80>)
 800b6c8:	f7fe fd49 	bl	800a15e <ButtonRegisterPressCallback>
	SSD1306_Clear(BLACK);
 800b6cc:	2000      	movs	r0, #0
 800b6ce:	f002 f9b1 	bl	800da34 <SSD1306_Clear>
	char buff[16];
	sprintf(buff, "MCU: %.2fC", Measurements.InternalTemperature);
 800b6d2:	4b19      	ldr	r3, [pc, #100]	; (800b738 <ShowTemperature+0x84>)
 800b6d4:	695b      	ldr	r3, [r3, #20]
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7fc ff12 	bl	8008500 <__aeabi_f2d>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	460b      	mov	r3, r1
 800b6e0:	4638      	mov	r0, r7
 800b6e2:	4916      	ldr	r1, [pc, #88]	; (800b73c <ShowTemperature+0x88>)
 800b6e4:	f010 fe98 	bl	801c418 <siprintf>
	GFX_DrawString(0, 0, buff, WHITE, 1);
 800b6e8:	463a      	mov	r2, r7
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	9300      	str	r3, [sp, #0]
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	2000      	movs	r0, #0
 800b6f4:	f7fd ffae 	bl	8009654 <GFX_DrawString>
	sprintf(buff, "Amb: %.2fC", Temperature);
 800b6f8:	4b11      	ldr	r3, [pc, #68]	; (800b740 <ShowTemperature+0x8c>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7fc feff 	bl	8008500 <__aeabi_f2d>
 800b702:	4602      	mov	r2, r0
 800b704:	460b      	mov	r3, r1
 800b706:	4638      	mov	r0, r7
 800b708:	490e      	ldr	r1, [pc, #56]	; (800b744 <ShowTemperature+0x90>)
 800b70a:	f010 fe85 	bl	801c418 <siprintf>
	GFX_DrawString(0, 16, buff, WHITE, 1);
 800b70e:	463a      	mov	r2, r7
 800b710:	2301      	movs	r3, #1
 800b712:	9300      	str	r3, [sp, #0]
 800b714:	2301      	movs	r3, #1
 800b716:	2110      	movs	r1, #16
 800b718:	2000      	movs	r0, #0
 800b71a:	f7fd ff9b 	bl	8009654 <GFX_DrawString>
}
 800b71e:	bf00      	nop
 800b720:	3710      	adds	r7, #16
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	20001ea8 	.word	0x20001ea8
 800b72c:	0800b6b5 	.word	0x0800b6b5
 800b730:	0800b579 	.word	0x0800b579
 800b734:	20000dd0 	.word	0x20000dd0
 800b738:	20001e64 	.word	0x20001e64
 800b73c:	0801e7a4 	.word	0x0801e7a4
 800b740:	20001e38 	.word	0x20001e38
 800b744:	0801e7b0 	.word	0x0801e7b0

0800b748 <Show8bitIndicators>:

void Show8bitIndicators(uint8_t Data, uint8_t NameNumberStart)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b086      	sub	sp, #24
 800b74c:	af02      	add	r7, sp, #8
 800b74e:	4603      	mov	r3, r0
 800b750:	460a      	mov	r2, r1
 800b752:	71fb      	strb	r3, [r7, #7]
 800b754:	4613      	mov	r3, r2
 800b756:	71bb      	strb	r3, [r7, #6]
	ButtonRegisterPressCallback(&KeyDown, ShowMenu);
 800b758:	4941      	ldr	r1, [pc, #260]	; (800b860 <Show8bitIndicators+0x118>)
 800b75a:	4842      	ldr	r0, [pc, #264]	; (800b864 <Show8bitIndicators+0x11c>)
 800b75c:	f7fe fcff 	bl	800a15e <ButtonRegisterPressCallback>
	SSD1306_Clear(BLACK);
 800b760:	2000      	movs	r0, #0
 800b762:	f002 f967 	bl	800da34 <SSD1306_Clear>

	char buff[4];
	GFX_SetFont(font_8x5);
 800b766:	4840      	ldr	r0, [pc, #256]	; (800b868 <Show8bitIndicators+0x120>)
 800b768:	f7fd fe9a 	bl	80094a0 <GFX_SetFont>
	GFX_SetFontSize(1);
 800b76c:	2001      	movs	r0, #1
 800b76e:	f7fd fea5 	bl	80094bc <GFX_SetFontSize>
	for(uint8_t i=0; i<=7; i++)
 800b772:	2300      	movs	r3, #0
 800b774:	73fb      	strb	r3, [r7, #15]
 800b776:	e06a      	b.n	800b84e <Show8bitIndicators+0x106>
	{
		sprintf(buff, "%u.", NameNumberStart + i);
 800b778:	79ba      	ldrb	r2, [r7, #6]
 800b77a:	7bfb      	ldrb	r3, [r7, #15]
 800b77c:	441a      	add	r2, r3
 800b77e:	f107 0308 	add.w	r3, r7, #8
 800b782:	493a      	ldr	r1, [pc, #232]	; (800b86c <Show8bitIndicators+0x124>)
 800b784:	4618      	mov	r0, r3
 800b786:	f010 fe47 	bl	801c418 <siprintf>
		uint8_t y = 20;
 800b78a:	2314      	movs	r3, #20
 800b78c:	73bb      	strb	r3, [r7, #14]
		uint8_t y_name = 0;
 800b78e:	2300      	movs	r3, #0
 800b790:	737b      	strb	r3, [r7, #13]
		if(i>3)
 800b792:	7bfb      	ldrb	r3, [r7, #15]
 800b794:	2b03      	cmp	r3, #3
 800b796:	d903      	bls.n	800b7a0 <Show8bitIndicators+0x58>
		{
			y = 43;
 800b798:	232b      	movs	r3, #43	; 0x2b
 800b79a:	73bb      	strb	r3, [r7, #14]
			y_name = 57;
 800b79c:	2339      	movs	r3, #57	; 0x39
 800b79e:	737b      	strb	r3, [r7, #13]
		}
		GFX_DrawString(15 + (30 * ((i<4)?i:i-4)), y_name, buff, WHITE, 1);
 800b7a0:	7bfb      	ldrb	r3, [r7, #15]
 800b7a2:	2b03      	cmp	r3, #3
 800b7a4:	d807      	bhi.n	800b7b6 <Show8bitIndicators+0x6e>
 800b7a6:	7bfa      	ldrb	r2, [r7, #15]
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	011b      	lsls	r3, r3, #4
 800b7ac:	1a9b      	subs	r3, r3, r2
 800b7ae:	005b      	lsls	r3, r3, #1
 800b7b0:	f103 000f 	add.w	r0, r3, #15
 800b7b4:	e007      	b.n	800b7c6 <Show8bitIndicators+0x7e>
 800b7b6:	7bfb      	ldrb	r3, [r7, #15]
 800b7b8:	1f1a      	subs	r2, r3, #4
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	011b      	lsls	r3, r3, #4
 800b7be:	1a9b      	subs	r3, r3, r2
 800b7c0:	005b      	lsls	r3, r3, #1
 800b7c2:	f103 000f 	add.w	r0, r3, #15
 800b7c6:	7b79      	ldrb	r1, [r7, #13]
 800b7c8:	f107 0208 	add.w	r2, r7, #8
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	9300      	str	r3, [sp, #0]
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	f7fd ff3f 	bl	8009654 <GFX_DrawString>
		if((Data>>i)&1)
 800b7d6:	79fa      	ldrb	r2, [r7, #7]
 800b7d8:	7bfb      	ldrb	r3, [r7, #15]
 800b7da:	fa42 f303 	asr.w	r3, r2, r3
 800b7de:	f003 0301 	and.w	r3, r3, #1
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d018      	beq.n	800b818 <Show8bitIndicators+0xd0>
		{
			GFX_DrawFillCircle(20 + (30 * ((i<4)?i:i-4)), y, 10, WHITE);
 800b7e6:	7bfb      	ldrb	r3, [r7, #15]
 800b7e8:	2b03      	cmp	r3, #3
 800b7ea:	d807      	bhi.n	800b7fc <Show8bitIndicators+0xb4>
 800b7ec:	7bfa      	ldrb	r2, [r7, #15]
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	011b      	lsls	r3, r3, #4
 800b7f2:	1a9b      	subs	r3, r3, r2
 800b7f4:	005b      	lsls	r3, r3, #1
 800b7f6:	f103 0014 	add.w	r0, r3, #20
 800b7fa:	e007      	b.n	800b80c <Show8bitIndicators+0xc4>
 800b7fc:	7bfb      	ldrb	r3, [r7, #15]
 800b7fe:	1f1a      	subs	r2, r3, #4
 800b800:	4613      	mov	r3, r2
 800b802:	011b      	lsls	r3, r3, #4
 800b804:	1a9b      	subs	r3, r3, r2
 800b806:	005b      	lsls	r3, r3, #1
 800b808:	f103 0014 	add.w	r0, r3, #20
 800b80c:	7bb9      	ldrb	r1, [r7, #14]
 800b80e:	2301      	movs	r3, #1
 800b810:	220a      	movs	r2, #10
 800b812:	f7fe fa24 	bl	8009c5e <GFX_DrawFillCircle>
 800b816:	e017      	b.n	800b848 <Show8bitIndicators+0x100>
		}
		else
		{
			GFX_DrawCircle(20 + (30 * ((i<4)?i:i-4)), y, 10, WHITE);
 800b818:	7bfb      	ldrb	r3, [r7, #15]
 800b81a:	2b03      	cmp	r3, #3
 800b81c:	d807      	bhi.n	800b82e <Show8bitIndicators+0xe6>
 800b81e:	7bfa      	ldrb	r2, [r7, #15]
 800b820:	4613      	mov	r3, r2
 800b822:	011b      	lsls	r3, r3, #4
 800b824:	1a9b      	subs	r3, r3, r2
 800b826:	005b      	lsls	r3, r3, #1
 800b828:	f103 0014 	add.w	r0, r3, #20
 800b82c:	e007      	b.n	800b83e <Show8bitIndicators+0xf6>
 800b82e:	7bfb      	ldrb	r3, [r7, #15]
 800b830:	1f1a      	subs	r2, r3, #4
 800b832:	4613      	mov	r3, r2
 800b834:	011b      	lsls	r3, r3, #4
 800b836:	1a9b      	subs	r3, r3, r2
 800b838:	005b      	lsls	r3, r3, #1
 800b83a:	f103 0014 	add.w	r0, r3, #20
 800b83e:	7bb9      	ldrb	r1, [r7, #14]
 800b840:	2301      	movs	r3, #1
 800b842:	220a      	movs	r2, #10
 800b844:	f7fe f86e 	bl	8009924 <GFX_DrawCircle>
	for(uint8_t i=0; i<=7; i++)
 800b848:	7bfb      	ldrb	r3, [r7, #15]
 800b84a:	3301      	adds	r3, #1
 800b84c:	73fb      	strb	r3, [r7, #15]
 800b84e:	7bfb      	ldrb	r3, [r7, #15]
 800b850:	2b07      	cmp	r3, #7
 800b852:	d991      	bls.n	800b778 <Show8bitIndicators+0x30>
		}


	}
}
 800b854:	bf00      	nop
 800b856:	bf00      	nop
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	0800b579 	.word	0x0800b579
 800b864:	20000dd0 	.word	0x20000dd0
 800b868:	0801e9ec 	.word	0x0801e9ec
 800b86c:	0801e7bc 	.word	0x0801e7bc

0800b870 <ShowOut0to7>:

void ShowOut0to7(void)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	af00      	add	r7, sp, #0
	HideMenu();
 800b874:	f7ff fea8 	bl	800b5c8 <HideMenu>
	ActualVisibleFunc = ShowOut0to7;
 800b878:	4b05      	ldr	r3, [pc, #20]	; (800b890 <ShowOut0to7+0x20>)
 800b87a:	4a06      	ldr	r2, [pc, #24]	; (800b894 <ShowOut0to7+0x24>)
 800b87c:	601a      	str	r2, [r3, #0]
	Show8bitIndicators(GPIOE -> ODR, 0);
 800b87e:	4b06      	ldr	r3, [pc, #24]	; (800b898 <ShowOut0to7+0x28>)
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	b2db      	uxtb	r3, r3
 800b884:	2100      	movs	r1, #0
 800b886:	4618      	mov	r0, r3
 800b888:	f7ff ff5e 	bl	800b748 <Show8bitIndicators>
}
 800b88c:	bf00      	nop
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	20001ea8 	.word	0x20001ea8
 800b894:	0800b871 	.word	0x0800b871
 800b898:	40011800 	.word	0x40011800

0800b89c <ShowOut8to15>:

void ShowOut8to15(void)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	af00      	add	r7, sp, #0
	HideMenu();
 800b8a0:	f7ff fe92 	bl	800b5c8 <HideMenu>
	ActualVisibleFunc = ShowOut8to15;
 800b8a4:	4b06      	ldr	r3, [pc, #24]	; (800b8c0 <ShowOut8to15+0x24>)
 800b8a6:	4a07      	ldr	r2, [pc, #28]	; (800b8c4 <ShowOut8to15+0x28>)
 800b8a8:	601a      	str	r2, [r3, #0]
	Show8bitIndicators((GPIOE -> ODR) >> 8, 8);
 800b8aa:	4b07      	ldr	r3, [pc, #28]	; (800b8c8 <ShowOut8to15+0x2c>)
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	0a1b      	lsrs	r3, r3, #8
 800b8b0:	b2db      	uxtb	r3, r3
 800b8b2:	2108      	movs	r1, #8
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f7ff ff47 	bl	800b748 <Show8bitIndicators>
}
 800b8ba:	bf00      	nop
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	20001ea8 	.word	0x20001ea8
 800b8c4:	0800b89d 	.word	0x0800b89d
 800b8c8:	40011800 	.word	0x40011800

0800b8cc <ShowIn0to7>:

void ShowIn0to7(void)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	af00      	add	r7, sp, #0
	HideMenu();
 800b8d0:	f7ff fe7a 	bl	800b5c8 <HideMenu>
	ActualVisibleFunc = ShowIn0to7;
 800b8d4:	4b06      	ldr	r3, [pc, #24]	; (800b8f0 <ShowIn0to7+0x24>)
 800b8d6:	4a07      	ldr	r2, [pc, #28]	; (800b8f4 <ShowIn0to7+0x28>)
 800b8d8:	601a      	str	r2, [r3, #0]
	Show8bitIndicators(~(GPIOG -> IDR), 0);
 800b8da:	4b07      	ldr	r3, [pc, #28]	; (800b8f8 <ShowIn0to7+0x2c>)
 800b8dc:	689b      	ldr	r3, [r3, #8]
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	43db      	mvns	r3, r3
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	2100      	movs	r1, #0
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7ff ff2e 	bl	800b748 <Show8bitIndicators>
}
 800b8ec:	bf00      	nop
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	20001ea8 	.word	0x20001ea8
 800b8f4:	0800b8cd 	.word	0x0800b8cd
 800b8f8:	40012000 	.word	0x40012000

0800b8fc <ShowIn8to15>:

void ShowIn8to15(void)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	af00      	add	r7, sp, #0
	HideMenu();
 800b900:	f7ff fe62 	bl	800b5c8 <HideMenu>
	ActualVisibleFunc = ShowIn8to15;
 800b904:	4b07      	ldr	r3, [pc, #28]	; (800b924 <ShowIn8to15+0x28>)
 800b906:	4a08      	ldr	r2, [pc, #32]	; (800b928 <ShowIn8to15+0x2c>)
 800b908:	601a      	str	r2, [r3, #0]
	Show8bitIndicators(~((GPIOG -> IDR) >> 8), 8);
 800b90a:	4b08      	ldr	r3, [pc, #32]	; (800b92c <ShowIn8to15+0x30>)
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	0a1b      	lsrs	r3, r3, #8
 800b910:	b2db      	uxtb	r3, r3
 800b912:	43db      	mvns	r3, r3
 800b914:	b2db      	uxtb	r3, r3
 800b916:	2108      	movs	r1, #8
 800b918:	4618      	mov	r0, r3
 800b91a:	f7ff ff15 	bl	800b748 <Show8bitIndicators>
}
 800b91e:	bf00      	nop
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	20001ea8 	.word	0x20001ea8
 800b928:	0800b8fd 	.word	0x0800b8fd
 800b92c:	40012000 	.word	0x40012000

0800b930 <ShowPWMsetMenu>:

void ShowPWMsetMenu(void)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af02      	add	r7, sp, #8
	char buff[6];
	uint8_t Length;
	HideMenu();
 800b936:	f7ff fe47 	bl	800b5c8 <HideMenu>
	ActualVisibleFunc = ShowPWMsetMenu;
 800b93a:	4b47      	ldr	r3, [pc, #284]	; (800ba58 <ShowPWMsetMenu+0x128>)
 800b93c:	4a47      	ldr	r2, [pc, #284]	; (800ba5c <ShowPWMsetMenu+0x12c>)
 800b93e:	601a      	str	r2, [r3, #0]
	ButtonRegisterPressCallback(&KeyDown, PwmSetPtrIncrement);
 800b940:	4947      	ldr	r1, [pc, #284]	; (800ba60 <ShowPWMsetMenu+0x130>)
 800b942:	4848      	ldr	r0, [pc, #288]	; (800ba64 <ShowPWMsetMenu+0x134>)
 800b944:	f7fe fc0b 	bl	800a15e <ButtonRegisterPressCallback>
	SSD1306_Clear(BLACK);
 800b948:	2000      	movs	r0, #0
 800b94a:	f002 f873 	bl	800da34 <SSD1306_Clear>

	for(uint8_t i = 0; i<4; i++)
 800b94e:	2300      	movs	r3, #0
 800b950:	71fb      	strb	r3, [r7, #7]
 800b952:	e031      	b.n	800b9b8 <ShowPWMsetMenu+0x88>
	{
		Length = sprintf(buff, "%u", __HAL_TIM_GET_COMPARE(&htim4, i * 4));
 800b954:	79fb      	ldrb	r3, [r7, #7]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d103      	bne.n	800b962 <ShowPWMsetMenu+0x32>
 800b95a:	4b43      	ldr	r3, [pc, #268]	; (800ba68 <ShowPWMsetMenu+0x138>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b960:	e010      	b.n	800b984 <ShowPWMsetMenu+0x54>
 800b962:	79fb      	ldrb	r3, [r7, #7]
 800b964:	2b01      	cmp	r3, #1
 800b966:	d103      	bne.n	800b970 <ShowPWMsetMenu+0x40>
 800b968:	4b3f      	ldr	r3, [pc, #252]	; (800ba68 <ShowPWMsetMenu+0x138>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b96e:	e009      	b.n	800b984 <ShowPWMsetMenu+0x54>
 800b970:	79fb      	ldrb	r3, [r7, #7]
 800b972:	2b02      	cmp	r3, #2
 800b974:	d103      	bne.n	800b97e <ShowPWMsetMenu+0x4e>
 800b976:	4b3c      	ldr	r3, [pc, #240]	; (800ba68 <ShowPWMsetMenu+0x138>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b97c:	e002      	b.n	800b984 <ShowPWMsetMenu+0x54>
 800b97e:	4b3a      	ldr	r3, [pc, #232]	; (800ba68 <ShowPWMsetMenu+0x138>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b984:	4638      	mov	r0, r7
 800b986:	461a      	mov	r2, r3
 800b988:	4938      	ldr	r1, [pc, #224]	; (800ba6c <ShowPWMsetMenu+0x13c>)
 800b98a:	f010 fd45 	bl	801c418 <siprintf>
 800b98e:	4603      	mov	r3, r0
 800b990:	71bb      	strb	r3, [r7, #6]
		GFX_DrawString(64-2 - (Length*5), 16*i, buff, WHITE, 1);
 800b992:	79ba      	ldrb	r2, [r7, #6]
 800b994:	4613      	mov	r3, r2
 800b996:	079b      	lsls	r3, r3, #30
 800b998:	1a9b      	subs	r3, r3, r2
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	1a9b      	subs	r3, r3, r2
 800b99e:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 800b9a2:	79fb      	ldrb	r3, [r7, #7]
 800b9a4:	0119      	lsls	r1, r3, #4
 800b9a6:	463a      	mov	r2, r7
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	9300      	str	r3, [sp, #0]
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	f7fd fe51 	bl	8009654 <GFX_DrawString>
	for(uint8_t i = 0; i<4; i++)
 800b9b2:	79fb      	ldrb	r3, [r7, #7]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	71fb      	strb	r3, [r7, #7]
 800b9b8:	79fb      	ldrb	r3, [r7, #7]
 800b9ba:	2b03      	cmp	r3, #3
 800b9bc:	d9ca      	bls.n	800b954 <ShowPWMsetMenu+0x24>
	}

	if(PwmSetPtr%2 && PwmSetPtr!=9)
 800b9be:	4b2c      	ldr	r3, [pc, #176]	; (800ba70 <ShowPWMsetMenu+0x140>)
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	f003 0301 	and.w	r3, r3, #1
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d018      	beq.n	800b9fe <ShowPWMsetMenu+0xce>
 800b9cc:	4b28      	ldr	r3, [pc, #160]	; (800ba70 <ShowPWMsetMenu+0x140>)
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	2b09      	cmp	r3, #9
 800b9d2:	d014      	beq.n	800b9fe <ShowPWMsetMenu+0xce>
	{
		ButtonRegisterPressCallback(&KeyUp, PwmSetDecrement);
 800b9d4:	4927      	ldr	r1, [pc, #156]	; (800ba74 <ShowPWMsetMenu+0x144>)
 800b9d6:	4828      	ldr	r0, [pc, #160]	; (800ba78 <ShowPWMsetMenu+0x148>)
 800b9d8:	f7fe fbc1 	bl	800a15e <ButtonRegisterPressCallback>
		ButtonRegisterRepeatCallback(&KeyUp, PwmSetDecrement25);
 800b9dc:	4927      	ldr	r1, [pc, #156]	; (800ba7c <ShowPWMsetMenu+0x14c>)
 800b9de:	4826      	ldr	r0, [pc, #152]	; (800ba78 <ShowPWMsetMenu+0x148>)
 800b9e0:	f7fe fbca 	bl	800a178 <ButtonRegisterRepeatCallback>
		GFX_DrawChar(25, 16*(PwmSetPtr/2), '-', WHITE, 1);
 800b9e4:	4b22      	ldr	r3, [pc, #136]	; (800ba70 <ShowPWMsetMenu+0x140>)
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	085b      	lsrs	r3, r3, #1
 800b9ea:	b2db      	uxtb	r3, r3
 800b9ec:	0119      	lsls	r1, r3, #4
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	9300      	str	r3, [sp, #0]
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	222d      	movs	r2, #45	; 0x2d
 800b9f6:	2019      	movs	r0, #25
 800b9f8:	f7fd fd72 	bl	80094e0 <GFX_DrawChar>
	else
	{
		ButtonRegisterPressCallback(&KeyUp, ShowMenu);
		GFX_DrawString(0, 47, "<<", WHITE, 1);
	}
}
 800b9fc:	e028      	b.n	800ba50 <ShowPWMsetMenu+0x120>
	else if(!(PwmSetPtr%2))
 800b9fe:	4b1c      	ldr	r3, [pc, #112]	; (800ba70 <ShowPWMsetMenu+0x140>)
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	f003 0301 	and.w	r3, r3, #1
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d115      	bne.n	800ba38 <ShowPWMsetMenu+0x108>
		ButtonRegisterPressCallback(&KeyUp, PwmSetIncrement);
 800ba0c:	491c      	ldr	r1, [pc, #112]	; (800ba80 <ShowPWMsetMenu+0x150>)
 800ba0e:	481a      	ldr	r0, [pc, #104]	; (800ba78 <ShowPWMsetMenu+0x148>)
 800ba10:	f7fe fba5 	bl	800a15e <ButtonRegisterPressCallback>
		ButtonRegisterRepeatCallback(&KeyUp, PwmSetIncrement25);
 800ba14:	491b      	ldr	r1, [pc, #108]	; (800ba84 <ShowPWMsetMenu+0x154>)
 800ba16:	4818      	ldr	r0, [pc, #96]	; (800ba78 <ShowPWMsetMenu+0x148>)
 800ba18:	f7fe fbae 	bl	800a178 <ButtonRegisterRepeatCallback>
		GFX_DrawChar(91, 16*((PwmSetPtr/2)-1), '+', WHITE, 1);
 800ba1c:	4b14      	ldr	r3, [pc, #80]	; (800ba70 <ShowPWMsetMenu+0x140>)
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	085b      	lsrs	r3, r3, #1
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	3b01      	subs	r3, #1
 800ba26:	0119      	lsls	r1, r3, #4
 800ba28:	2301      	movs	r3, #1
 800ba2a:	9300      	str	r3, [sp, #0]
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	222b      	movs	r2, #43	; 0x2b
 800ba30:	205b      	movs	r0, #91	; 0x5b
 800ba32:	f7fd fd55 	bl	80094e0 <GFX_DrawChar>
}
 800ba36:	e00b      	b.n	800ba50 <ShowPWMsetMenu+0x120>
		ButtonRegisterPressCallback(&KeyUp, ShowMenu);
 800ba38:	4913      	ldr	r1, [pc, #76]	; (800ba88 <ShowPWMsetMenu+0x158>)
 800ba3a:	480f      	ldr	r0, [pc, #60]	; (800ba78 <ShowPWMsetMenu+0x148>)
 800ba3c:	f7fe fb8f 	bl	800a15e <ButtonRegisterPressCallback>
		GFX_DrawString(0, 47, "<<", WHITE, 1);
 800ba40:	2301      	movs	r3, #1
 800ba42:	9300      	str	r3, [sp, #0]
 800ba44:	2301      	movs	r3, #1
 800ba46:	4a11      	ldr	r2, [pc, #68]	; (800ba8c <ShowPWMsetMenu+0x15c>)
 800ba48:	212f      	movs	r1, #47	; 0x2f
 800ba4a:	2000      	movs	r0, #0
 800ba4c:	f7fd fe02 	bl	8009654 <GFX_DrawString>
}
 800ba50:	bf00      	nop
 800ba52:	3708      	adds	r7, #8
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	20001ea8 	.word	0x20001ea8
 800ba5c:	0800b931 	.word	0x0800b931
 800ba60:	0800ba91 	.word	0x0800ba91
 800ba64:	20000dd0 	.word	0x20000dd0
 800ba68:	20002758 	.word	0x20002758
 800ba6c:	0801e7c0 	.word	0x0801e7c0
 800ba70:	20000001 	.word	0x20000001
 800ba74:	0800bb35 	.word	0x0800bb35
 800ba78:	20000da4 	.word	0x20000da4
 800ba7c:	0800bc29 	.word	0x0800bc29
 800ba80:	0800babd 	.word	0x0800babd
 800ba84:	0800bbb1 	.word	0x0800bbb1
 800ba88:	0800b579 	.word	0x0800b579
 800ba8c:	0801e7c4 	.word	0x0801e7c4

0800ba90 <PwmSetPtrIncrement>:

	void PwmSetPtrIncrement(void)
	{
 800ba90:	b480      	push	{r7}
 800ba92:	af00      	add	r7, sp, #0
		PwmSetPtr++;
 800ba94:	4b08      	ldr	r3, [pc, #32]	; (800bab8 <PwmSetPtrIncrement+0x28>)
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	3301      	adds	r3, #1
 800ba9a:	b2da      	uxtb	r2, r3
 800ba9c:	4b06      	ldr	r3, [pc, #24]	; (800bab8 <PwmSetPtrIncrement+0x28>)
 800ba9e:	701a      	strb	r2, [r3, #0]
		if(PwmSetPtr>=10)PwmSetPtr=1;
 800baa0:	4b05      	ldr	r3, [pc, #20]	; (800bab8 <PwmSetPtrIncrement+0x28>)
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	2b09      	cmp	r3, #9
 800baa6:	d902      	bls.n	800baae <PwmSetPtrIncrement+0x1e>
 800baa8:	4b03      	ldr	r3, [pc, #12]	; (800bab8 <PwmSetPtrIncrement+0x28>)
 800baaa:	2201      	movs	r2, #1
 800baac:	701a      	strb	r2, [r3, #0]
	}
 800baae:	bf00      	nop
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bc80      	pop	{r7}
 800bab4:	4770      	bx	lr
 800bab6:	bf00      	nop
 800bab8:	20000001 	.word	0x20000001

0800babc <PwmSetIncrement>:
	void PwmSetIncrement(void)
	{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
		uint8_t CurrentPwmChannel = PwmSetPtr/2;
 800bac2:	4b1a      	ldr	r3, [pc, #104]	; (800bb2c <PwmSetIncrement+0x70>)
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	085b      	lsrs	r3, r3, #1
 800bac8:	717b      	strb	r3, [r7, #5]
		uint16_t PwmValue = __HAL_TIM_GET_COMPARE(&htim4, (CurrentPwmChannel - 1) * 4);
 800baca:	797b      	ldrb	r3, [r7, #5]
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d104      	bne.n	800bada <PwmSetIncrement+0x1e>
 800bad0:	4b17      	ldr	r3, [pc, #92]	; (800bb30 <PwmSetIncrement+0x74>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	e013      	b.n	800bb02 <PwmSetIncrement+0x46>
 800bada:	797b      	ldrb	r3, [r7, #5]
 800badc:	2b02      	cmp	r3, #2
 800bade:	d104      	bne.n	800baea <PwmSetIncrement+0x2e>
 800bae0:	4b13      	ldr	r3, [pc, #76]	; (800bb30 <PwmSetIncrement+0x74>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	e00b      	b.n	800bb02 <PwmSetIncrement+0x46>
 800baea:	797b      	ldrb	r3, [r7, #5]
 800baec:	2b03      	cmp	r3, #3
 800baee:	d104      	bne.n	800bafa <PwmSetIncrement+0x3e>
 800baf0:	4b0f      	ldr	r3, [pc, #60]	; (800bb30 <PwmSetIncrement+0x74>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	e003      	b.n	800bb02 <PwmSetIncrement+0x46>
 800bafa:	4b0d      	ldr	r3, [pc, #52]	; (800bb30 <PwmSetIncrement+0x74>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	80fb      	strh	r3, [r7, #6]

		PwmValue += 1;
 800bb04:	88fb      	ldrh	r3, [r7, #6]
 800bb06:	3301      	adds	r3, #1
 800bb08:	80fb      	strh	r3, [r7, #6]
		if(PwmValue > 1000) PwmValue = 0;
 800bb0a:	88fb      	ldrh	r3, [r7, #6]
 800bb0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb10:	d901      	bls.n	800bb16 <PwmSetIncrement+0x5a>
 800bb12:	2300      	movs	r3, #0
 800bb14:	80fb      	strh	r3, [r7, #6]
		PwmChannelSet(CurrentPwmChannel, PwmValue);
 800bb16:	88fa      	ldrh	r2, [r7, #6]
 800bb18:	797b      	ldrb	r3, [r7, #5]
 800bb1a:	4611      	mov	r1, r2
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7ff fa05 	bl	800af2c <PwmChannelSet>
	}
 800bb22:	bf00      	nop
 800bb24:	3708      	adds	r7, #8
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	20000001 	.word	0x20000001
 800bb30:	20002758 	.word	0x20002758

0800bb34 <PwmSetDecrement>:
	void PwmSetDecrement(void)
	{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
		uint8_t CurrentPwmChannel = PwmSetPtr/2 + 1;
 800bb3a:	4b1b      	ldr	r3, [pc, #108]	; (800bba8 <PwmSetDecrement+0x74>)
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	085b      	lsrs	r3, r3, #1
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	3301      	adds	r3, #1
 800bb44:	717b      	strb	r3, [r7, #5]
		uint16_t PwmValue = __HAL_TIM_GET_COMPARE(&htim4, (CurrentPwmChannel - 1)*4);
 800bb46:	797b      	ldrb	r3, [r7, #5]
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d104      	bne.n	800bb56 <PwmSetDecrement+0x22>
 800bb4c:	4b17      	ldr	r3, [pc, #92]	; (800bbac <PwmSetDecrement+0x78>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	e013      	b.n	800bb7e <PwmSetDecrement+0x4a>
 800bb56:	797b      	ldrb	r3, [r7, #5]
 800bb58:	2b02      	cmp	r3, #2
 800bb5a:	d104      	bne.n	800bb66 <PwmSetDecrement+0x32>
 800bb5c:	4b13      	ldr	r3, [pc, #76]	; (800bbac <PwmSetDecrement+0x78>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	e00b      	b.n	800bb7e <PwmSetDecrement+0x4a>
 800bb66:	797b      	ldrb	r3, [r7, #5]
 800bb68:	2b03      	cmp	r3, #3
 800bb6a:	d104      	bne.n	800bb76 <PwmSetDecrement+0x42>
 800bb6c:	4b0f      	ldr	r3, [pc, #60]	; (800bbac <PwmSetDecrement+0x78>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	e003      	b.n	800bb7e <PwmSetDecrement+0x4a>
 800bb76:	4b0d      	ldr	r3, [pc, #52]	; (800bbac <PwmSetDecrement+0x78>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	80fb      	strh	r3, [r7, #6]

		PwmValue -= 1;
 800bb80:	88fb      	ldrh	r3, [r7, #6]
 800bb82:	3b01      	subs	r3, #1
 800bb84:	80fb      	strh	r3, [r7, #6]
		if(PwmValue > 1000) PwmValue = 1000;
 800bb86:	88fb      	ldrh	r3, [r7, #6]
 800bb88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bb8c:	d902      	bls.n	800bb94 <PwmSetDecrement+0x60>
 800bb8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bb92:	80fb      	strh	r3, [r7, #6]
		PwmChannelSet(CurrentPwmChannel, PwmValue);
 800bb94:	88fa      	ldrh	r2, [r7, #6]
 800bb96:	797b      	ldrb	r3, [r7, #5]
 800bb98:	4611      	mov	r1, r2
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7ff f9c6 	bl	800af2c <PwmChannelSet>
	}
 800bba0:	bf00      	nop
 800bba2:	3708      	adds	r7, #8
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	20000001 	.word	0x20000001
 800bbac:	20002758 	.word	0x20002758

0800bbb0 <PwmSetIncrement25>:
	void PwmSetIncrement25(void)
	{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
		uint8_t CurrentPwmChannel = PwmSetPtr/2;
 800bbb6:	4b1a      	ldr	r3, [pc, #104]	; (800bc20 <PwmSetIncrement25+0x70>)
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	085b      	lsrs	r3, r3, #1
 800bbbc:	717b      	strb	r3, [r7, #5]
		uint16_t PwmValue = __HAL_TIM_GET_COMPARE(&htim4, (CurrentPwmChannel - 1) * 4);
 800bbbe:	797b      	ldrb	r3, [r7, #5]
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d104      	bne.n	800bbce <PwmSetIncrement25+0x1e>
 800bbc4:	4b17      	ldr	r3, [pc, #92]	; (800bc24 <PwmSetIncrement25+0x74>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	e013      	b.n	800bbf6 <PwmSetIncrement25+0x46>
 800bbce:	797b      	ldrb	r3, [r7, #5]
 800bbd0:	2b02      	cmp	r3, #2
 800bbd2:	d104      	bne.n	800bbde <PwmSetIncrement25+0x2e>
 800bbd4:	4b13      	ldr	r3, [pc, #76]	; (800bc24 <PwmSetIncrement25+0x74>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	e00b      	b.n	800bbf6 <PwmSetIncrement25+0x46>
 800bbde:	797b      	ldrb	r3, [r7, #5]
 800bbe0:	2b03      	cmp	r3, #3
 800bbe2:	d104      	bne.n	800bbee <PwmSetIncrement25+0x3e>
 800bbe4:	4b0f      	ldr	r3, [pc, #60]	; (800bc24 <PwmSetIncrement25+0x74>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbea:	b29b      	uxth	r3, r3
 800bbec:	e003      	b.n	800bbf6 <PwmSetIncrement25+0x46>
 800bbee:	4b0d      	ldr	r3, [pc, #52]	; (800bc24 <PwmSetIncrement25+0x74>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	80fb      	strh	r3, [r7, #6]

		PwmValue += 25;
 800bbf8:	88fb      	ldrh	r3, [r7, #6]
 800bbfa:	3319      	adds	r3, #25
 800bbfc:	80fb      	strh	r3, [r7, #6]
		if(PwmValue > 1000) PwmValue = 0;
 800bbfe:	88fb      	ldrh	r3, [r7, #6]
 800bc00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc04:	d901      	bls.n	800bc0a <PwmSetIncrement25+0x5a>
 800bc06:	2300      	movs	r3, #0
 800bc08:	80fb      	strh	r3, [r7, #6]
		PwmChannelSet(CurrentPwmChannel, PwmValue);
 800bc0a:	88fa      	ldrh	r2, [r7, #6]
 800bc0c:	797b      	ldrb	r3, [r7, #5]
 800bc0e:	4611      	mov	r1, r2
 800bc10:	4618      	mov	r0, r3
 800bc12:	f7ff f98b 	bl	800af2c <PwmChannelSet>
	}
 800bc16:	bf00      	nop
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	20000001 	.word	0x20000001
 800bc24:	20002758 	.word	0x20002758

0800bc28 <PwmSetDecrement25>:
	void PwmSetDecrement25(void)
	{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
		uint8_t CurrentPwmChannel = PwmSetPtr/2 + 1;
 800bc2e:	4b1b      	ldr	r3, [pc, #108]	; (800bc9c <PwmSetDecrement25+0x74>)
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	085b      	lsrs	r3, r3, #1
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	3301      	adds	r3, #1
 800bc38:	717b      	strb	r3, [r7, #5]
		uint16_t PwmValue = __HAL_TIM_GET_COMPARE(&htim4, (CurrentPwmChannel - 1)*4);
 800bc3a:	797b      	ldrb	r3, [r7, #5]
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	d104      	bne.n	800bc4a <PwmSetDecrement25+0x22>
 800bc40:	4b17      	ldr	r3, [pc, #92]	; (800bca0 <PwmSetDecrement25+0x78>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	e013      	b.n	800bc72 <PwmSetDecrement25+0x4a>
 800bc4a:	797b      	ldrb	r3, [r7, #5]
 800bc4c:	2b02      	cmp	r3, #2
 800bc4e:	d104      	bne.n	800bc5a <PwmSetDecrement25+0x32>
 800bc50:	4b13      	ldr	r3, [pc, #76]	; (800bca0 <PwmSetDecrement25+0x78>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	e00b      	b.n	800bc72 <PwmSetDecrement25+0x4a>
 800bc5a:	797b      	ldrb	r3, [r7, #5]
 800bc5c:	2b03      	cmp	r3, #3
 800bc5e:	d104      	bne.n	800bc6a <PwmSetDecrement25+0x42>
 800bc60:	4b0f      	ldr	r3, [pc, #60]	; (800bca0 <PwmSetDecrement25+0x78>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	e003      	b.n	800bc72 <PwmSetDecrement25+0x4a>
 800bc6a:	4b0d      	ldr	r3, [pc, #52]	; (800bca0 <PwmSetDecrement25+0x78>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	80fb      	strh	r3, [r7, #6]

		PwmValue -= 25;
 800bc74:	88fb      	ldrh	r3, [r7, #6]
 800bc76:	3b19      	subs	r3, #25
 800bc78:	80fb      	strh	r3, [r7, #6]
		if(PwmValue > 1000) PwmValue = 1000;
 800bc7a:	88fb      	ldrh	r3, [r7, #6]
 800bc7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc80:	d902      	bls.n	800bc88 <PwmSetDecrement25+0x60>
 800bc82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bc86:	80fb      	strh	r3, [r7, #6]
		PwmChannelSet(CurrentPwmChannel, PwmValue);
 800bc88:	88fa      	ldrh	r2, [r7, #6]
 800bc8a:	797b      	ldrb	r3, [r7, #5]
 800bc8c:	4611      	mov	r1, r2
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7ff f94c 	bl	800af2c <PwmChannelSet>
	}
 800bc94:	bf00      	nop
 800bc96:	3708      	adds	r7, #8
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	20000001 	.word	0x20000001
 800bca0:	20002758 	.word	0x20002758

0800bca4 <ShowLedLightParam>:

void ShowLedLightParam(LedLightParameter_t *Instance)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b086      	sub	sp, #24
 800bca8:	af02      	add	r7, sp, #8
 800bcaa:	6078      	str	r0, [r7, #4]
	char buff[6];
	uint8_t Length;

	ButtonRegisterPressCallback(&KeyDown, LedLightParamPtrIncrement);
 800bcac:	494d      	ldr	r1, [pc, #308]	; (800bde4 <ShowLedLightParam+0x140>)
 800bcae:	484e      	ldr	r0, [pc, #312]	; (800bde8 <ShowLedLightParam+0x144>)
 800bcb0:	f7fe fa55 	bl	800a15e <ButtonRegisterPressCallback>
	SSD1306_Clear(BLACK);
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	f001 febd 	bl	800da34 <SSD1306_Clear>

	GFX_DrawString(0, 0, "PWM", WHITE, 1);
 800bcba:	2301      	movs	r3, #1
 800bcbc:	9300      	str	r3, [sp, #0]
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	4a4a      	ldr	r2, [pc, #296]	; (800bdec <ShowLedLightParam+0x148>)
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	f7fd fcc5 	bl	8009654 <GFX_DrawString>
	GFX_DrawString(0, 32, "Speed", WHITE, 1);
 800bcca:	2301      	movs	r3, #1
 800bccc:	9300      	str	r3, [sp, #0]
 800bcce:	2301      	movs	r3, #1
 800bcd0:	4a47      	ldr	r2, [pc, #284]	; (800bdf0 <ShowLedLightParam+0x14c>)
 800bcd2:	2120      	movs	r1, #32
 800bcd4:	2000      	movs	r0, #0
 800bcd6:	f7fd fcbd 	bl	8009654 <GFX_DrawString>
	Length = sprintf(buff, "%u", Instance ->PwmMax);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	885b      	ldrh	r3, [r3, #2]
 800bcde:	461a      	mov	r2, r3
 800bce0:	f107 0308 	add.w	r3, r7, #8
 800bce4:	4943      	ldr	r1, [pc, #268]	; (800bdf4 <ShowLedLightParam+0x150>)
 800bce6:	4618      	mov	r0, r3
 800bce8:	f010 fb96 	bl	801c418 <siprintf>
 800bcec:	4603      	mov	r3, r0
 800bcee:	73fb      	strb	r3, [r7, #15]
	GFX_DrawString(64-2 - (Length*5), 16, buff, WHITE, 1);
 800bcf0:	7bfa      	ldrb	r2, [r7, #15]
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	079b      	lsls	r3, r3, #30
 800bcf6:	1a9b      	subs	r3, r3, r2
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	1a9b      	subs	r3, r3, r2
 800bcfc:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 800bd00:	f107 0208 	add.w	r2, r7, #8
 800bd04:	2301      	movs	r3, #1
 800bd06:	9300      	str	r3, [sp, #0]
 800bd08:	2301      	movs	r3, #1
 800bd0a:	2110      	movs	r1, #16
 800bd0c:	f7fd fca2 	bl	8009654 <GFX_DrawString>
	Length = sprintf(buff, "%u", Instance ->DimmerSpeed);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	8a1b      	ldrh	r3, [r3, #16]
 800bd14:	461a      	mov	r2, r3
 800bd16:	f107 0308 	add.w	r3, r7, #8
 800bd1a:	4936      	ldr	r1, [pc, #216]	; (800bdf4 <ShowLedLightParam+0x150>)
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f010 fb7b 	bl	801c418 <siprintf>
 800bd22:	4603      	mov	r3, r0
 800bd24:	73fb      	strb	r3, [r7, #15]
	GFX_DrawString(64-2 - (Length*5), 48, buff, WHITE, 1);
 800bd26:	7bfa      	ldrb	r2, [r7, #15]
 800bd28:	4613      	mov	r3, r2
 800bd2a:	079b      	lsls	r3, r3, #30
 800bd2c:	1a9b      	subs	r3, r3, r2
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	1a9b      	subs	r3, r3, r2
 800bd32:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 800bd36:	f107 0208 	add.w	r2, r7, #8
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	9300      	str	r3, [sp, #0]
 800bd3e:	2301      	movs	r3, #1
 800bd40:	2130      	movs	r1, #48	; 0x30
 800bd42:	f7fd fc87 	bl	8009654 <GFX_DrawString>

	if(LedParamSetPtr%2 && LedParamSetPtr!=5)
 800bd46:	4b2c      	ldr	r3, [pc, #176]	; (800bdf8 <ShowLedLightParam+0x154>)
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	f003 0301 	and.w	r3, r3, #1
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d016      	beq.n	800bd82 <ShowLedLightParam+0xde>
 800bd54:	4b28      	ldr	r3, [pc, #160]	; (800bdf8 <ShowLedLightParam+0x154>)
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	2b05      	cmp	r3, #5
 800bd5a:	d012      	beq.n	800bd82 <ShowLedLightParam+0xde>
	{
		ButtonRegisterPressCallback(&KeyUp, LedLightParamDecrement);
 800bd5c:	4927      	ldr	r1, [pc, #156]	; (800bdfc <ShowLedLightParam+0x158>)
 800bd5e:	4828      	ldr	r0, [pc, #160]	; (800be00 <ShowLedLightParam+0x15c>)
 800bd60:	f7fe f9fd 	bl	800a15e <ButtonRegisterPressCallback>
		ButtonRegisterRepeatCallback(&KeyUp, LedLightParamDecrement25);
 800bd64:	4927      	ldr	r1, [pc, #156]	; (800be04 <ShowLedLightParam+0x160>)
 800bd66:	4826      	ldr	r0, [pc, #152]	; (800be00 <ShowLedLightParam+0x15c>)
 800bd68:	f7fe fa06 	bl	800a178 <ButtonRegisterRepeatCallback>
		GFX_DrawChar(25, 16*LedParamSetPtr, '-', WHITE, 1);
 800bd6c:	4b22      	ldr	r3, [pc, #136]	; (800bdf8 <ShowLedLightParam+0x154>)
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	0119      	lsls	r1, r3, #4
 800bd72:	2301      	movs	r3, #1
 800bd74:	9300      	str	r3, [sp, #0]
 800bd76:	2301      	movs	r3, #1
 800bd78:	222d      	movs	r2, #45	; 0x2d
 800bd7a:	2019      	movs	r0, #25
 800bd7c:	f7fd fbb0 	bl	80094e0 <GFX_DrawChar>
 800bd80:	e02b      	b.n	800bdda <ShowLedLightParam+0x136>
	}
	else if(!(LedParamSetPtr%2)&& LedParamSetPtr!=5)
 800bd82:	4b1d      	ldr	r3, [pc, #116]	; (800bdf8 <ShowLedLightParam+0x154>)
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	f003 0301 	and.w	r3, r3, #1
 800bd8a:	b2db      	uxtb	r3, r3
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d117      	bne.n	800bdc0 <ShowLedLightParam+0x11c>
 800bd90:	4b19      	ldr	r3, [pc, #100]	; (800bdf8 <ShowLedLightParam+0x154>)
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	2b05      	cmp	r3, #5
 800bd96:	d013      	beq.n	800bdc0 <ShowLedLightParam+0x11c>
	{
		ButtonRegisterPressCallback(&KeyUp, LedLightParamIncrement);
 800bd98:	491b      	ldr	r1, [pc, #108]	; (800be08 <ShowLedLightParam+0x164>)
 800bd9a:	4819      	ldr	r0, [pc, #100]	; (800be00 <ShowLedLightParam+0x15c>)
 800bd9c:	f7fe f9df 	bl	800a15e <ButtonRegisterPressCallback>
		ButtonRegisterRepeatCallback(&KeyUp, LedLightParamIncrement25);
 800bda0:	491a      	ldr	r1, [pc, #104]	; (800be0c <ShowLedLightParam+0x168>)
 800bda2:	4817      	ldr	r0, [pc, #92]	; (800be00 <ShowLedLightParam+0x15c>)
 800bda4:	f7fe f9e8 	bl	800a178 <ButtonRegisterRepeatCallback>
		GFX_DrawChar(91, 16*(LedParamSetPtr-1), '+', WHITE, 1);
 800bda8:	4b13      	ldr	r3, [pc, #76]	; (800bdf8 <ShowLedLightParam+0x154>)
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	3b01      	subs	r3, #1
 800bdae:	0119      	lsls	r1, r3, #4
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	9300      	str	r3, [sp, #0]
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	222b      	movs	r2, #43	; 0x2b
 800bdb8:	205b      	movs	r0, #91	; 0x5b
 800bdba:	f7fd fb91 	bl	80094e0 <GFX_DrawChar>
 800bdbe:	e00c      	b.n	800bdda <ShowLedLightParam+0x136>
	}
	else
	{
		ButtonRegisterPressCallback(&KeyUp, ShowMenu);
 800bdc0:	4913      	ldr	r1, [pc, #76]	; (800be10 <ShowLedLightParam+0x16c>)
 800bdc2:	480f      	ldr	r0, [pc, #60]	; (800be00 <ShowLedLightParam+0x15c>)
 800bdc4:	f7fe f9cb 	bl	800a15e <ButtonRegisterPressCallback>
		GFX_DrawString(0, 47, "<<", WHITE, 1);
 800bdc8:	2301      	movs	r3, #1
 800bdca:	9300      	str	r3, [sp, #0]
 800bdcc:	2301      	movs	r3, #1
 800bdce:	4a11      	ldr	r2, [pc, #68]	; (800be14 <ShowLedLightParam+0x170>)
 800bdd0:	212f      	movs	r1, #47	; 0x2f
 800bdd2:	2000      	movs	r0, #0
 800bdd4:	f7fd fc3e 	bl	8009654 <GFX_DrawString>
	}
}
 800bdd8:	bf00      	nop
 800bdda:	bf00      	nop
 800bddc:	3710      	adds	r7, #16
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	0800be19 	.word	0x0800be19
 800bde8:	20000dd0 	.word	0x20000dd0
 800bdec:	0801e7c8 	.word	0x0801e7c8
 800bdf0:	0801e7cc 	.word	0x0801e7cc
 800bdf4:	0801e7c0 	.word	0x0801e7c0
 800bdf8:	20000002 	.word	0x20000002
 800bdfc:	0800bf2d 	.word	0x0800bf2d
 800be00:	20000da4 	.word	0x20000da4
 800be04:	0800bfa1 	.word	0x0800bfa1
 800be08:	0800be45 	.word	0x0800be45
 800be0c:	0800beb5 	.word	0x0800beb5
 800be10:	0800b579 	.word	0x0800b579
 800be14:	0801e7c4 	.word	0x0801e7c4

0800be18 <LedLightParamPtrIncrement>:
	void LedLightParamPtrIncrement(void)
	{
 800be18:	b480      	push	{r7}
 800be1a:	af00      	add	r7, sp, #0
		LedParamSetPtr++;
 800be1c:	4b08      	ldr	r3, [pc, #32]	; (800be40 <LedLightParamPtrIncrement+0x28>)
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	3301      	adds	r3, #1
 800be22:	b2da      	uxtb	r2, r3
 800be24:	4b06      	ldr	r3, [pc, #24]	; (800be40 <LedLightParamPtrIncrement+0x28>)
 800be26:	701a      	strb	r2, [r3, #0]
		if(LedParamSetPtr >= 6)
 800be28:	4b05      	ldr	r3, [pc, #20]	; (800be40 <LedLightParamPtrIncrement+0x28>)
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	2b05      	cmp	r3, #5
 800be2e:	d902      	bls.n	800be36 <LedLightParamPtrIncrement+0x1e>
		{
			LedParamSetPtr = 1;
 800be30:	4b03      	ldr	r3, [pc, #12]	; (800be40 <LedLightParamPtrIncrement+0x28>)
 800be32:	2201      	movs	r2, #1
 800be34:	701a      	strb	r2, [r3, #0]
		}
	}
 800be36:	bf00      	nop
 800be38:	46bd      	mov	sp, r7
 800be3a:	bc80      	pop	{r7}
 800be3c:	4770      	bx	lr
 800be3e:	bf00      	nop
 800be40:	20000002 	.word	0x20000002

0800be44 <LedLightParamIncrement>:
	void LedLightParamIncrement(void)
	{
 800be44:	b480      	push	{r7}
 800be46:	af00      	add	r7, sp, #0
		switch(LedParamSetPtr/2)
 800be48:	4b18      	ldr	r3, [pc, #96]	; (800beac <LedLightParamIncrement+0x68>)
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	085b      	lsrs	r3, r3, #1
 800be4e:	b2db      	uxtb	r3, r3
 800be50:	2b01      	cmp	r3, #1
 800be52:	d002      	beq.n	800be5a <LedLightParamIncrement+0x16>
 800be54:	2b02      	cmp	r3, #2
 800be56:	d011      	beq.n	800be7c <LedLightParamIncrement+0x38>
		case 2:
			LedLightActualEdit -> DimmerSpeed++;
			if(LedLightActualEdit -> DimmerSpeed >1000) LedLightActualEdit->DimmerSpeed = 0;
			break;
		}
	}
 800be58:	e024      	b.n	800bea4 <LedLightParamIncrement+0x60>
			LedLightActualEdit -> PwmMax++;
 800be5a:	4b15      	ldr	r3, [pc, #84]	; (800beb0 <LedLightParamIncrement+0x6c>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	885a      	ldrh	r2, [r3, #2]
 800be60:	3201      	adds	r2, #1
 800be62:	b292      	uxth	r2, r2
 800be64:	805a      	strh	r2, [r3, #2]
			if(LedLightActualEdit -> PwmMax > 1000) LedLightActualEdit->PwmMax = 0;
 800be66:	4b12      	ldr	r3, [pc, #72]	; (800beb0 <LedLightParamIncrement+0x6c>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	885b      	ldrh	r3, [r3, #2]
 800be6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be70:	d915      	bls.n	800be9e <LedLightParamIncrement+0x5a>
 800be72:	4b0f      	ldr	r3, [pc, #60]	; (800beb0 <LedLightParamIncrement+0x6c>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	2200      	movs	r2, #0
 800be78:	805a      	strh	r2, [r3, #2]
			break;
 800be7a:	e010      	b.n	800be9e <LedLightParamIncrement+0x5a>
			LedLightActualEdit -> DimmerSpeed++;
 800be7c:	4b0c      	ldr	r3, [pc, #48]	; (800beb0 <LedLightParamIncrement+0x6c>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	8a1a      	ldrh	r2, [r3, #16]
 800be82:	3201      	adds	r2, #1
 800be84:	b292      	uxth	r2, r2
 800be86:	821a      	strh	r2, [r3, #16]
			if(LedLightActualEdit -> DimmerSpeed >1000) LedLightActualEdit->DimmerSpeed = 0;
 800be88:	4b09      	ldr	r3, [pc, #36]	; (800beb0 <LedLightParamIncrement+0x6c>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	8a1b      	ldrh	r3, [r3, #16]
 800be8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be92:	d906      	bls.n	800bea2 <LedLightParamIncrement+0x5e>
 800be94:	4b06      	ldr	r3, [pc, #24]	; (800beb0 <LedLightParamIncrement+0x6c>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	2200      	movs	r2, #0
 800be9a:	821a      	strh	r2, [r3, #16]
			break;
 800be9c:	e001      	b.n	800bea2 <LedLightParamIncrement+0x5e>
			break;
 800be9e:	bf00      	nop
 800bea0:	e000      	b.n	800bea4 <LedLightParamIncrement+0x60>
			break;
 800bea2:	bf00      	nop
	}
 800bea4:	bf00      	nop
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bc80      	pop	{r7}
 800beaa:	4770      	bx	lr
 800beac:	20000002 	.word	0x20000002
 800beb0:	20001e5c 	.word	0x20001e5c

0800beb4 <LedLightParamIncrement25>:
	void LedLightParamIncrement25(void)
	{
 800beb4:	b480      	push	{r7}
 800beb6:	af00      	add	r7, sp, #0
		switch(LedParamSetPtr/2)
 800beb8:	4b1a      	ldr	r3, [pc, #104]	; (800bf24 <LedLightParamIncrement25+0x70>)
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	085b      	lsrs	r3, r3, #1
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d002      	beq.n	800beca <LedLightParamIncrement25+0x16>
 800bec4:	2b02      	cmp	r3, #2
 800bec6:	d013      	beq.n	800bef0 <LedLightParamIncrement25+0x3c>
		case 2:
			LedLightActualEdit -> DimmerSpeed += 25;
			if(LedLightActualEdit -> DimmerSpeed >1000) LedLightActualEdit->DimmerSpeed = 0;
			break;
		}
	}
 800bec8:	e028      	b.n	800bf1c <LedLightParamIncrement25+0x68>
			LedLightActualEdit -> PwmMax += 25;
 800beca:	4b17      	ldr	r3, [pc, #92]	; (800bf28 <LedLightParamIncrement25+0x74>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	885a      	ldrh	r2, [r3, #2]
 800bed0:	4b15      	ldr	r3, [pc, #84]	; (800bf28 <LedLightParamIncrement25+0x74>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	3219      	adds	r2, #25
 800bed6:	b292      	uxth	r2, r2
 800bed8:	805a      	strh	r2, [r3, #2]
			if(LedLightActualEdit -> PwmMax > 1000) LedLightActualEdit->PwmMax = 0;
 800beda:	4b13      	ldr	r3, [pc, #76]	; (800bf28 <LedLightParamIncrement25+0x74>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	885b      	ldrh	r3, [r3, #2]
 800bee0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bee4:	d917      	bls.n	800bf16 <LedLightParamIncrement25+0x62>
 800bee6:	4b10      	ldr	r3, [pc, #64]	; (800bf28 <LedLightParamIncrement25+0x74>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2200      	movs	r2, #0
 800beec:	805a      	strh	r2, [r3, #2]
			break;
 800beee:	e012      	b.n	800bf16 <LedLightParamIncrement25+0x62>
			LedLightActualEdit -> DimmerSpeed += 25;
 800bef0:	4b0d      	ldr	r3, [pc, #52]	; (800bf28 <LedLightParamIncrement25+0x74>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	8a1a      	ldrh	r2, [r3, #16]
 800bef6:	4b0c      	ldr	r3, [pc, #48]	; (800bf28 <LedLightParamIncrement25+0x74>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	3219      	adds	r2, #25
 800befc:	b292      	uxth	r2, r2
 800befe:	821a      	strh	r2, [r3, #16]
			if(LedLightActualEdit -> DimmerSpeed >1000) LedLightActualEdit->DimmerSpeed = 0;
 800bf00:	4b09      	ldr	r3, [pc, #36]	; (800bf28 <LedLightParamIncrement25+0x74>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	8a1b      	ldrh	r3, [r3, #16]
 800bf06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf0a:	d906      	bls.n	800bf1a <LedLightParamIncrement25+0x66>
 800bf0c:	4b06      	ldr	r3, [pc, #24]	; (800bf28 <LedLightParamIncrement25+0x74>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	2200      	movs	r2, #0
 800bf12:	821a      	strh	r2, [r3, #16]
			break;
 800bf14:	e001      	b.n	800bf1a <LedLightParamIncrement25+0x66>
			break;
 800bf16:	bf00      	nop
 800bf18:	e000      	b.n	800bf1c <LedLightParamIncrement25+0x68>
			break;
 800bf1a:	bf00      	nop
	}
 800bf1c:	bf00      	nop
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bc80      	pop	{r7}
 800bf22:	4770      	bx	lr
 800bf24:	20000002 	.word	0x20000002
 800bf28:	20001e5c 	.word	0x20001e5c

0800bf2c <LedLightParamDecrement>:
	void LedLightParamDecrement(void)
	{
 800bf2c:	b480      	push	{r7}
 800bf2e:	af00      	add	r7, sp, #0
		switch((LedParamSetPtr/2)+1)
 800bf30:	4b19      	ldr	r3, [pc, #100]	; (800bf98 <LedLightParamDecrement+0x6c>)
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	085b      	lsrs	r3, r3, #1
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	3301      	adds	r3, #1
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d002      	beq.n	800bf44 <LedLightParamDecrement+0x18>
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	d012      	beq.n	800bf68 <LedLightParamDecrement+0x3c>
			break;
		case 2:
			LedLightActualEdit -> DimmerSpeed--;
			if(LedLightActualEdit -> DimmerSpeed > 1000) LedLightActualEdit -> DimmerSpeed = 1000;
		}
	}
 800bf42:	e024      	b.n	800bf8e <LedLightParamDecrement+0x62>
			LedLightActualEdit -> PwmMax--;
 800bf44:	4b15      	ldr	r3, [pc, #84]	; (800bf9c <LedLightParamDecrement+0x70>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	885a      	ldrh	r2, [r3, #2]
 800bf4a:	3a01      	subs	r2, #1
 800bf4c:	b292      	uxth	r2, r2
 800bf4e:	805a      	strh	r2, [r3, #2]
			if(LedLightActualEdit -> PwmMax > 1000) LedLightActualEdit->PwmMax = 1000;
 800bf50:	4b12      	ldr	r3, [pc, #72]	; (800bf9c <LedLightParamDecrement+0x70>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	885b      	ldrh	r3, [r3, #2]
 800bf56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf5a:	d917      	bls.n	800bf8c <LedLightParamDecrement+0x60>
 800bf5c:	4b0f      	ldr	r3, [pc, #60]	; (800bf9c <LedLightParamDecrement+0x70>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf64:	805a      	strh	r2, [r3, #2]
			break;
 800bf66:	e011      	b.n	800bf8c <LedLightParamDecrement+0x60>
			LedLightActualEdit -> DimmerSpeed--;
 800bf68:	4b0c      	ldr	r3, [pc, #48]	; (800bf9c <LedLightParamDecrement+0x70>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	8a1a      	ldrh	r2, [r3, #16]
 800bf6e:	3a01      	subs	r2, #1
 800bf70:	b292      	uxth	r2, r2
 800bf72:	821a      	strh	r2, [r3, #16]
			if(LedLightActualEdit -> DimmerSpeed > 1000) LedLightActualEdit -> DimmerSpeed = 1000;
 800bf74:	4b09      	ldr	r3, [pc, #36]	; (800bf9c <LedLightParamDecrement+0x70>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	8a1b      	ldrh	r3, [r3, #16]
 800bf7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf7e:	d906      	bls.n	800bf8e <LedLightParamDecrement+0x62>
 800bf80:	4b06      	ldr	r3, [pc, #24]	; (800bf9c <LedLightParamDecrement+0x70>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf88:	821a      	strh	r2, [r3, #16]
	}
 800bf8a:	e000      	b.n	800bf8e <LedLightParamDecrement+0x62>
			break;
 800bf8c:	bf00      	nop
	}
 800bf8e:	bf00      	nop
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bc80      	pop	{r7}
 800bf94:	4770      	bx	lr
 800bf96:	bf00      	nop
 800bf98:	20000002 	.word	0x20000002
 800bf9c:	20001e5c 	.word	0x20001e5c

0800bfa0 <LedLightParamDecrement25>:
	void LedLightParamDecrement25(void)
	{
 800bfa0:	b480      	push	{r7}
 800bfa2:	af00      	add	r7, sp, #0
		switch((LedParamSetPtr/2)+1)
 800bfa4:	4b1b      	ldr	r3, [pc, #108]	; (800c014 <LedLightParamDecrement25+0x74>)
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	085b      	lsrs	r3, r3, #1
 800bfaa:	b2db      	uxtb	r3, r3
 800bfac:	3301      	adds	r3, #1
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d002      	beq.n	800bfb8 <LedLightParamDecrement25+0x18>
 800bfb2:	2b02      	cmp	r3, #2
 800bfb4:	d014      	beq.n	800bfe0 <LedLightParamDecrement25+0x40>
			break;
		case 2:
			LedLightActualEdit -> DimmerSpeed -= 25;
			if(LedLightActualEdit -> DimmerSpeed > 1000) LedLightActualEdit -> DimmerSpeed = 1000;
		}
	}
 800bfb6:	e028      	b.n	800c00a <LedLightParamDecrement25+0x6a>
			LedLightActualEdit -> PwmMax -= 25;
 800bfb8:	4b17      	ldr	r3, [pc, #92]	; (800c018 <LedLightParamDecrement25+0x78>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	885a      	ldrh	r2, [r3, #2]
 800bfbe:	4b16      	ldr	r3, [pc, #88]	; (800c018 <LedLightParamDecrement25+0x78>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	3a19      	subs	r2, #25
 800bfc4:	b292      	uxth	r2, r2
 800bfc6:	805a      	strh	r2, [r3, #2]
			if(LedLightActualEdit -> PwmMax > 1000) LedLightActualEdit->PwmMax = 1000;
 800bfc8:	4b13      	ldr	r3, [pc, #76]	; (800c018 <LedLightParamDecrement25+0x78>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	885b      	ldrh	r3, [r3, #2]
 800bfce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bfd2:	d919      	bls.n	800c008 <LedLightParamDecrement25+0x68>
 800bfd4:	4b10      	ldr	r3, [pc, #64]	; (800c018 <LedLightParamDecrement25+0x78>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bfdc:	805a      	strh	r2, [r3, #2]
			break;
 800bfde:	e013      	b.n	800c008 <LedLightParamDecrement25+0x68>
			LedLightActualEdit -> DimmerSpeed -= 25;
 800bfe0:	4b0d      	ldr	r3, [pc, #52]	; (800c018 <LedLightParamDecrement25+0x78>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	8a1a      	ldrh	r2, [r3, #16]
 800bfe6:	4b0c      	ldr	r3, [pc, #48]	; (800c018 <LedLightParamDecrement25+0x78>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	3a19      	subs	r2, #25
 800bfec:	b292      	uxth	r2, r2
 800bfee:	821a      	strh	r2, [r3, #16]
			if(LedLightActualEdit -> DimmerSpeed > 1000) LedLightActualEdit -> DimmerSpeed = 1000;
 800bff0:	4b09      	ldr	r3, [pc, #36]	; (800c018 <LedLightParamDecrement25+0x78>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	8a1b      	ldrh	r3, [r3, #16]
 800bff6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bffa:	d906      	bls.n	800c00a <LedLightParamDecrement25+0x6a>
 800bffc:	4b06      	ldr	r3, [pc, #24]	; (800c018 <LedLightParamDecrement25+0x78>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c004:	821a      	strh	r2, [r3, #16]
	}
 800c006:	e000      	b.n	800c00a <LedLightParamDecrement25+0x6a>
			break;
 800c008:	bf00      	nop
	}
 800c00a:	bf00      	nop
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bc80      	pop	{r7}
 800c010:	4770      	bx	lr
 800c012:	bf00      	nop
 800c014:	20000002 	.word	0x20000002
 800c018:	20001e5c 	.word	0x20001e5c

0800c01c <ShowLedLightParamLogo>:
	void ShowLedLightParamLogo(void)
	{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	af00      	add	r7, sp, #0
		HideMenu();
 800c020:	f7ff fad2 	bl	800b5c8 <HideMenu>
		ActualVisibleFunc = ShowLedLightParamLogo;
 800c024:	4b06      	ldr	r3, [pc, #24]	; (800c040 <ShowLedLightParamLogo+0x24>)
 800c026:	4a07      	ldr	r2, [pc, #28]	; (800c044 <ShowLedLightParamLogo+0x28>)
 800c028:	601a      	str	r2, [r3, #0]
		LedLightActualEdit = &Logo;
 800c02a:	4b07      	ldr	r3, [pc, #28]	; (800c048 <ShowLedLightParamLogo+0x2c>)
 800c02c:	4a07      	ldr	r2, [pc, #28]	; (800c04c <ShowLedLightParamLogo+0x30>)
 800c02e:	601a      	str	r2, [r3, #0]
		ShowLedLightParam(LedLightActualEdit);
 800c030:	4b05      	ldr	r3, [pc, #20]	; (800c048 <ShowLedLightParamLogo+0x2c>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4618      	mov	r0, r3
 800c036:	f7ff fe35 	bl	800bca4 <ShowLedLightParam>
	}
 800c03a:	bf00      	nop
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	20001ea8 	.word	0x20001ea8
 800c044:	0800c01d 	.word	0x0800c01d
 800c048:	20001e5c 	.word	0x20001e5c
 800c04c:	20001e7c 	.word	0x20001e7c

0800c050 <ShowLedLightParamLight>:
	void ShowLedLightParamLight(void)
	{
 800c050:	b580      	push	{r7, lr}
 800c052:	af00      	add	r7, sp, #0
		HideMenu();
 800c054:	f7ff fab8 	bl	800b5c8 <HideMenu>
		ActualVisibleFunc = ShowLedLightParamLight;
 800c058:	4b06      	ldr	r3, [pc, #24]	; (800c074 <ShowLedLightParamLight+0x24>)
 800c05a:	4a07      	ldr	r2, [pc, #28]	; (800c078 <ShowLedLightParamLight+0x28>)
 800c05c:	601a      	str	r2, [r3, #0]
		LedLightActualEdit = &Light;
 800c05e:	4b07      	ldr	r3, [pc, #28]	; (800c07c <ShowLedLightParamLight+0x2c>)
 800c060:	4a07      	ldr	r2, [pc, #28]	; (800c080 <ShowLedLightParamLight+0x30>)
 800c062:	601a      	str	r2, [r3, #0]
		ShowLedLightParam(LedLightActualEdit);
 800c064:	4b05      	ldr	r3, [pc, #20]	; (800c07c <ShowLedLightParamLight+0x2c>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4618      	mov	r0, r3
 800c06a:	f7ff fe1b 	bl	800bca4 <ShowLedLightParam>
	}
 800c06e:	bf00      	nop
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	20001ea8 	.word	0x20001ea8
 800c078:	0800c051 	.word	0x0800c051
 800c07c:	20001e5c 	.word	0x20001e5c
 800c080:	20001e90 	.word	0x20001e90

0800c084 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
	if(hadc ->Instance == ADC1)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4a08      	ldr	r2, [pc, #32]	; (800c0b4 <HAL_ADC_ConvCpltCallback+0x30>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d109      	bne.n	800c0aa <HAL_ADC_ConvCpltCallback+0x26>
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)Measurements.Adc1Value, 4);
 800c096:	2204      	movs	r2, #4
 800c098:	4907      	ldr	r1, [pc, #28]	; (800c0b8 <HAL_ADC_ConvCpltCallback+0x34>)
 800c09a:	4808      	ldr	r0, [pc, #32]	; (800c0bc <HAL_ADC_ConvCpltCallback+0x38>)
 800c09c:	f002 fd7e 	bl	800eb9c <HAL_ADC_Start_DMA>
		ITCount++;
 800c0a0:	4b07      	ldr	r3, [pc, #28]	; (800c0c0 <HAL_ADC_ConvCpltCallback+0x3c>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	4a06      	ldr	r2, [pc, #24]	; (800c0c0 <HAL_ADC_ConvCpltCallback+0x3c>)
 800c0a8:	6013      	str	r3, [r2, #0]
	}
}
 800c0aa:	bf00      	nop
 800c0ac:	3708      	adds	r7, #8
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	40012400 	.word	0x40012400
 800c0b8:	20001e64 	.word	0x20001e64
 800c0bc:	20000c04 	.word	0x20000c04
 800c0c0:	20001e60 	.word	0x20001e60

0800c0c4 <BootloaderJump>:

void BootloaderJump(uint16_t Code)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	80fb      	strh	r3, [r7, #6]
	if(Code == 1234)
 800c0ce:	88fb      	ldrh	r3, [r7, #6]
 800c0d0:	f240 42d2 	movw	r2, #1234	; 0x4d2
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d102      	bne.n	800c0de <BootloaderJump+0x1a>
	CommandToJump = 1;
 800c0d8:	4b03      	ldr	r3, [pc, #12]	; (800c0e8 <BootloaderJump+0x24>)
 800c0da:	2201      	movs	r2, #1
 800c0dc:	701a      	strb	r2, [r3, #0]
}
 800c0de:	bf00      	nop
 800c0e0:	370c      	adds	r7, #12
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bc80      	pop	{r7}
 800c0e6:	4770      	bx	lr
 800c0e8:	20001ea6 	.word	0x20001ea6

0800c0ec <MeasurementConversion>:

void MeasurementConversion(void)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	af00      	add	r7, sp, #0
	Measurements.Voltage12 = Measurements.Voltage12Raw /1241.0F * 5;
 800c0f0:	4b23      	ldr	r3, [pc, #140]	; (800c180 <MeasurementConversion+0x94>)
 800c0f2:	881b      	ldrh	r3, [r3, #0]
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7fc fdec 	bl	8008cd4 <__aeabi_i2f>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	4921      	ldr	r1, [pc, #132]	; (800c184 <MeasurementConversion+0x98>)
 800c100:	4618      	mov	r0, r3
 800c102:	f7fc feef 	bl	8008ee4 <__aeabi_fdiv>
 800c106:	4603      	mov	r3, r0
 800c108:	491f      	ldr	r1, [pc, #124]	; (800c188 <MeasurementConversion+0x9c>)
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7fc fe36 	bl	8008d7c <__aeabi_fmul>
 800c110:	4603      	mov	r3, r0
 800c112:	461a      	mov	r2, r3
 800c114:	4b1a      	ldr	r3, [pc, #104]	; (800c180 <MeasurementConversion+0x94>)
 800c116:	609a      	str	r2, [r3, #8]
	Measurements.Voltage5 = Measurements.Voltage5Raw /1241.0F*2;
 800c118:	4b19      	ldr	r3, [pc, #100]	; (800c180 <MeasurementConversion+0x94>)
 800c11a:	885b      	ldrh	r3, [r3, #2]
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	4618      	mov	r0, r3
 800c120:	f7fc fdd8 	bl	8008cd4 <__aeabi_i2f>
 800c124:	4603      	mov	r3, r0
 800c126:	4917      	ldr	r1, [pc, #92]	; (800c184 <MeasurementConversion+0x98>)
 800c128:	4618      	mov	r0, r3
 800c12a:	f7fc fedb 	bl	8008ee4 <__aeabi_fdiv>
 800c12e:	4603      	mov	r3, r0
 800c130:	4619      	mov	r1, r3
 800c132:	4618      	mov	r0, r3
 800c134:	f7fc fd1a 	bl	8008b6c <__addsf3>
 800c138:	4603      	mov	r3, r0
 800c13a:	461a      	mov	r2, r3
 800c13c:	4b10      	ldr	r3, [pc, #64]	; (800c180 <MeasurementConversion+0x94>)
 800c13e:	60da      	str	r2, [r3, #12]
	Measurements.InternalTemperature = ((Measurements.InternalTemperatureRaw /1241.0F) - V25) / AVG_SLOPE + 25;
 800c140:	4b0f      	ldr	r3, [pc, #60]	; (800c180 <MeasurementConversion+0x94>)
 800c142:	88db      	ldrh	r3, [r3, #6]
 800c144:	b29b      	uxth	r3, r3
 800c146:	4618      	mov	r0, r3
 800c148:	f7fc fdc4 	bl	8008cd4 <__aeabi_i2f>
 800c14c:	4603      	mov	r3, r0
 800c14e:	490d      	ldr	r1, [pc, #52]	; (800c184 <MeasurementConversion+0x98>)
 800c150:	4618      	mov	r0, r3
 800c152:	f7fc fec7 	bl	8008ee4 <__aeabi_fdiv>
 800c156:	4603      	mov	r3, r0
 800c158:	490c      	ldr	r1, [pc, #48]	; (800c18c <MeasurementConversion+0xa0>)
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7fc fd04 	bl	8008b68 <__aeabi_fsub>
 800c160:	4603      	mov	r3, r0
 800c162:	490b      	ldr	r1, [pc, #44]	; (800c190 <MeasurementConversion+0xa4>)
 800c164:	4618      	mov	r0, r3
 800c166:	f7fc febd 	bl	8008ee4 <__aeabi_fdiv>
 800c16a:	4603      	mov	r3, r0
 800c16c:	4909      	ldr	r1, [pc, #36]	; (800c194 <MeasurementConversion+0xa8>)
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fc fcfc 	bl	8008b6c <__addsf3>
 800c174:	4603      	mov	r3, r0
 800c176:	461a      	mov	r2, r3
 800c178:	4b01      	ldr	r3, [pc, #4]	; (800c180 <MeasurementConversion+0x94>)
 800c17a:	615a      	str	r2, [r3, #20]
}
 800c17c:	bf00      	nop
 800c17e:	bd80      	pop	{r7, pc}
 800c180:	20001e64 	.word	0x20001e64
 800c184:	449b2000 	.word	0x449b2000
 800c188:	40a00000 	.word	0x40a00000
 800c18c:	3fb70a3d 	.word	0x3fb70a3d
 800c190:	4089999a 	.word	0x4089999a
 800c194:	41c80000 	.word	0x41c80000

0800c198 <IntervalFunc10000ms>:


void IntervalFunc10000ms(void)
{
 800c198:	b5b0      	push	{r4, r5, r7, lr}
 800c19a:	b0c2      	sub	sp, #264	; 0x108
 800c19c:	af02      	add	r7, sp, #8
	if(HAL_GetTick() - OldTick10000ms >10000)
 800c19e:	f002 fb05 	bl	800e7ac <HAL_GetTick>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	4b14      	ldr	r3, [pc, #80]	; (800c1f8 <IntervalFunc10000ms+0x60>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	1ad3      	subs	r3, r2, r3
 800c1aa:	f242 7210 	movw	r2, #10000	; 0x2710
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d91d      	bls.n	800c1ee <IntervalFunc10000ms+0x56>
	{
		char MsgToSend[255];
		EepromRefresh(&M24C02);
 800c1b2:	4812      	ldr	r0, [pc, #72]	; (800c1fc <IntervalFunc10000ms+0x64>)
 800c1b4:	f7fd f966 	bl	8009484 <EepromRefresh>

		sprintf(MsgToSend, "10/0x%lx%lx%lx/%s",
 800c1b8:	f002 fb3a 	bl	800e830 <HAL_GetUIDw2>
 800c1bc:	4604      	mov	r4, r0
 800c1be:	f002 fb2d 	bl	800e81c <HAL_GetUIDw1>
 800c1c2:	4605      	mov	r5, r0
 800c1c4:	f002 fb20 	bl	800e808 <HAL_GetUIDw0>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	4638      	mov	r0, r7
 800c1cc:	4a0c      	ldr	r2, [pc, #48]	; (800c200 <IntervalFunc10000ms+0x68>)
 800c1ce:	9201      	str	r2, [sp, #4]
 800c1d0:	9300      	str	r3, [sp, #0]
 800c1d2:	462b      	mov	r3, r5
 800c1d4:	4622      	mov	r2, r4
 800c1d6:	490b      	ldr	r1, [pc, #44]	; (800c204 <IntervalFunc10000ms+0x6c>)
 800c1d8:	f010 f91e 	bl	801c418 <siprintf>
				HAL_GetUIDw2(),
				HAL_GetUIDw1(),
				HAL_GetUIDw0(),
				Version);
		UsbBuffWrite(MsgToSend);
 800c1dc:	463b      	mov	r3, r7
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f000 f9b0 	bl	800c544 <UsbBuffWrite>
		OldTick10000ms = HAL_GetTick();
 800c1e4:	f002 fae2 	bl	800e7ac <HAL_GetTick>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	4a03      	ldr	r2, [pc, #12]	; (800c1f8 <IntervalFunc10000ms+0x60>)
 800c1ec:	6013      	str	r3, [r2, #0]
	}
}
 800c1ee:	bf00      	nop
 800c1f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bdb0      	pop	{r4, r5, r7, pc}
 800c1f8:	20001e30 	.word	0x20001e30
 800c1fc:	20001e44 	.word	0x20001e44
 800c200:	0801ebcc 	.word	0x0801ebcc
 800c204:	0801e7d4 	.word	0x0801e7d4

0800c208 <IntervalFunc500ms>:


void IntervalFunc500ms(void)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	af00      	add	r7, sp, #0
	  if(HAL_GetTick() - OldTick500ms >500)
 800c20c:	f002 face 	bl	800e7ac <HAL_GetTick>
 800c210:	4602      	mov	r2, r0
 800c212:	4b22      	ldr	r3, [pc, #136]	; (800c29c <IntervalFunc500ms+0x94>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	1ad3      	subs	r3, r2, r3
 800c218:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c21c:	d93b      	bls.n	800c296 <IntervalFunc500ms+0x8e>
	  {
		  OldTick500ms = HAL_GetTick();
 800c21e:	f002 fac5 	bl	800e7ac <HAL_GetTick>
 800c222:	4603      	mov	r3, r0
 800c224:	4a1d      	ldr	r2, [pc, #116]	; (800c29c <IntervalFunc500ms+0x94>)
 800c226:	6013      	str	r3, [r2, #0]
//		  }



		  static uint8_t TempMeasureFlag = 0;
		  if(!TempMeasureFlag)
 800c228:	4b1d      	ldr	r3, [pc, #116]	; (800c2a0 <IntervalFunc500ms+0x98>)
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d10e      	bne.n	800c24e <IntervalFunc500ms+0x46>
		  {
			  if (ds18b20_start_measure(NULL) != HAL_OK) ERROR_DS;
 800c230:	2000      	movs	r0, #0
 800c232:	f7fe f946 	bl	800a4c2 <ds18b20_start_measure>
 800c236:	4603      	mov	r3, r0
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d004      	beq.n	800c246 <IntervalFunc500ms+0x3e>
 800c23c:	4a19      	ldr	r2, [pc, #100]	; (800c2a4 <IntervalFunc500ms+0x9c>)
 800c23e:	7813      	ldrb	r3, [r2, #0]
 800c240:	f043 0301 	orr.w	r3, r3, #1
 800c244:	7013      	strb	r3, [r2, #0]
			  TempMeasureFlag = 1;
 800c246:	4b16      	ldr	r3, [pc, #88]	; (800c2a0 <IntervalFunc500ms+0x98>)
 800c248:	2201      	movs	r2, #1
 800c24a:	701a      	strb	r2, [r3, #0]
 800c24c:	e01b      	b.n	800c286 <IntervalFunc500ms+0x7e>
		  }
		  else
		  {
			  Temp = ds18b20_get_temp_wo_fp(NULL);
 800c24e:	2000      	movs	r0, #0
 800c250:	f7fe f975 	bl	800a53e <ds18b20_get_temp_wo_fp>
 800c254:	4603      	mov	r3, r0
 800c256:	461a      	mov	r2, r3
 800c258:	4b13      	ldr	r3, [pc, #76]	; (800c2a8 <IntervalFunc500ms+0xa0>)
 800c25a:	601a      	str	r2, [r3, #0]
			  Temperature = Temp;
 800c25c:	4b12      	ldr	r3, [pc, #72]	; (800c2a8 <IntervalFunc500ms+0xa0>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4618      	mov	r0, r3
 800c262:	f7fc fd37 	bl	8008cd4 <__aeabi_i2f>
 800c266:	4603      	mov	r3, r0
 800c268:	4a10      	ldr	r2, [pc, #64]	; (800c2ac <IntervalFunc500ms+0xa4>)
 800c26a:	6013      	str	r3, [r2, #0]
			  Temperature = Temperature/100;
 800c26c:	4b0f      	ldr	r3, [pc, #60]	; (800c2ac <IntervalFunc500ms+0xa4>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	490f      	ldr	r1, [pc, #60]	; (800c2b0 <IntervalFunc500ms+0xa8>)
 800c272:	4618      	mov	r0, r3
 800c274:	f7fc fe36 	bl	8008ee4 <__aeabi_fdiv>
 800c278:	4603      	mov	r3, r0
 800c27a:	461a      	mov	r2, r3
 800c27c:	4b0b      	ldr	r3, [pc, #44]	; (800c2ac <IntervalFunc500ms+0xa4>)
 800c27e:	601a      	str	r2, [r3, #0]
			  TempMeasureFlag = 0;
 800c280:	4b07      	ldr	r3, [pc, #28]	; (800c2a0 <IntervalFunc500ms+0x98>)
 800c282:	2200      	movs	r2, #0
 800c284:	701a      	strb	r2, [r3, #0]
		  }

			if(ErrorCode.Error > 0) LedBlinkOne(&ErrorBlink);
 800c286:	4b07      	ldr	r3, [pc, #28]	; (800c2a4 <IntervalFunc500ms+0x9c>)
 800c288:	881b      	ldrh	r3, [r3, #0]
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d002      	beq.n	800c296 <IntervalFunc500ms+0x8e>
 800c290:	4808      	ldr	r0, [pc, #32]	; (800c2b4 <IntervalFunc500ms+0xac>)
 800c292:	f7fe fb94 	bl	800a9be <LedBlinkOne>
	  }
}
 800c296:	bf00      	nop
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	20001e24 	.word	0x20001e24
 800c2a0:	20001eac 	.word	0x20001eac
 800c2a4:	20001ea4 	.word	0x20001ea4
 800c2a8:	20001e34 	.word	0x20001e34
 800c2ac:	20001e38 	.word	0x20001e38
 800c2b0:	42c80000 	.word	0x42c80000
 800c2b4:	20000e08 	.word	0x20000e08

0800c2b8 <IntervalFunc100ms>:

void IntervalFunc100ms(void)
{
 800c2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2bc:	b0d7      	sub	sp, #348	; 0x15c
 800c2be:	af0e      	add	r7, sp, #56	; 0x38
	if(HAL_GetTick() - OldTick100ms >100)
 800c2c0:	f002 fa74 	bl	800e7ac <HAL_GetTick>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	4b50      	ldr	r3, [pc, #320]	; (800c408 <IntervalFunc100ms+0x150>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	1ad3      	subs	r3, r2, r3
 800c2cc:	2b64      	cmp	r3, #100	; 0x64
 800c2ce:	f240 8095 	bls.w	800c3fc <IntervalFunc100ms+0x144>
		/*
		 * Message to send id. 0.
		 * 0/Input 16bit/Output 16bit/PWM1/PWM2/PWM3/PWM4/Temperature/12V/5V/Current
		 */
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
									(uint16_t*)((~GPIOG->IDR)&0xffff),
 800c2d2:	4b4e      	ldr	r3, [pc, #312]	; (800c40c <IntervalFunc100ms+0x154>)
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	43db      	mvns	r3, r3
 800c2d8:	b29b      	uxth	r3, r3
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 800c2da:	61fb      	str	r3, [r7, #28]
									(uint16_t*)GPIOE->ODR,
 800c2dc:	4b4c      	ldr	r3, [pc, #304]	; (800c410 <IntervalFunc100ms+0x158>)
 800c2de:	68db      	ldr	r3, [r3, #12]
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 800c2e0:	61bb      	str	r3, [r7, #24]
									(uint16_t*)__HAL_TIM_GetCompare(&htim4, TIM_CHANNEL_1),
 800c2e2:	4b4c      	ldr	r3, [pc, #304]	; (800c414 <IntervalFunc100ms+0x15c>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 800c2e8:	461e      	mov	r6, r3
									(uint16_t*)__HAL_TIM_GetCompare(&htim4, TIM_CHANNEL_2),
 800c2ea:	4b4a      	ldr	r3, [pc, #296]	; (800c414 <IntervalFunc100ms+0x15c>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 800c2f0:	617b      	str	r3, [r7, #20]
									(uint16_t*)__HAL_TIM_GetCompare(&htim4, TIM_CHANNEL_3),
 800c2f2:	4b48      	ldr	r3, [pc, #288]	; (800c414 <IntervalFunc100ms+0x15c>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 800c2f8:	613b      	str	r3, [r7, #16]
									(uint16_t*)__HAL_TIM_GetCompare(&htim4, TIM_CHANNEL_4),
 800c2fa:	4b46      	ldr	r3, [pc, #280]	; (800c414 <IntervalFunc100ms+0x15c>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 800c300:	60fb      	str	r3, [r7, #12]
 800c302:	4b45      	ldr	r3, [pc, #276]	; (800c418 <IntervalFunc100ms+0x160>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4618      	mov	r0, r3
 800c308:	f7fc f8fa 	bl	8008500 <__aeabi_f2d>
 800c30c:	4682      	mov	sl, r0
 800c30e:	468b      	mov	fp, r1
									Temperature,
									Measurements.InternalTemperature,
 800c310:	4b42      	ldr	r3, [pc, #264]	; (800c41c <IntervalFunc100ms+0x164>)
 800c312:	695b      	ldr	r3, [r3, #20]
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 800c314:	4618      	mov	r0, r3
 800c316:	f7fc f8f3 	bl	8008500 <__aeabi_f2d>
 800c31a:	e9c7 0100 	strd	r0, r1, [r7]
									Measurements.Voltage12,
 800c31e:	4b3f      	ldr	r3, [pc, #252]	; (800c41c <IntervalFunc100ms+0x164>)
 800c320:	689b      	ldr	r3, [r3, #8]
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 800c322:	4618      	mov	r0, r3
 800c324:	f7fc f8ec 	bl	8008500 <__aeabi_f2d>
 800c328:	4680      	mov	r8, r0
 800c32a:	4689      	mov	r9, r1
									Measurements.Voltage5,
 800c32c:	4b3b      	ldr	r3, [pc, #236]	; (800c41c <IntervalFunc100ms+0x164>)
 800c32e:	68db      	ldr	r3, [r3, #12]
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 800c330:	4618      	mov	r0, r3
 800c332:	f7fc f8e5 	bl	8008500 <__aeabi_f2d>
 800c336:	4604      	mov	r4, r0
 800c338:	460d      	mov	r5, r1
									Measurements.Current);
 800c33a:	4b38      	ldr	r3, [pc, #224]	; (800c41c <IntervalFunc100ms+0x164>)
 800c33c:	691b      	ldr	r3, [r3, #16]
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 800c33e:	4618      	mov	r0, r3
 800c340:	f7fc f8de 	bl	8008500 <__aeabi_f2d>
 800c344:	4602      	mov	r2, r0
 800c346:	460b      	mov	r3, r1
 800c348:	f107 0020 	add.w	r0, r7, #32
 800c34c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c350:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 800c354:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800c358:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c35c:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800c360:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800c364:	68f9      	ldr	r1, [r7, #12]
 800c366:	9103      	str	r1, [sp, #12]
 800c368:	6939      	ldr	r1, [r7, #16]
 800c36a:	9102      	str	r1, [sp, #8]
 800c36c:	6979      	ldr	r1, [r7, #20]
 800c36e:	9101      	str	r1, [sp, #4]
 800c370:	9600      	str	r6, [sp, #0]
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	69fa      	ldr	r2, [r7, #28]
 800c376:	492a      	ldr	r1, [pc, #168]	; (800c420 <IntervalFunc100ms+0x168>)
 800c378:	f010 f84e 	bl	801c418 <siprintf>
		UsbBuffWrite(MsgToSend);
 800c37c:	f107 0320 	add.w	r3, r7, #32
 800c380:	4618      	mov	r0, r3
 800c382:	f000 f8df 	bl	800c544 <UsbBuffWrite>

		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u/%u/%u",
				Light.Mode,
 800c386:	4b27      	ldr	r3, [pc, #156]	; (800c424 <IntervalFunc100ms+0x16c>)
 800c388:	f993 3000 	ldrsb.w	r3, [r3]
		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u/%u/%u",
 800c38c:	4698      	mov	r8, r3
				Light.PwmMax,
 800c38e:	4b25      	ldr	r3, [pc, #148]	; (800c424 <IntervalFunc100ms+0x16c>)
 800c390:	885b      	ldrh	r3, [r3, #2]
		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u/%u/%u",
 800c392:	4699      	mov	r9, r3
				Light.DimmerSpeed,
 800c394:	4b23      	ldr	r3, [pc, #140]	; (800c424 <IntervalFunc100ms+0x16c>)
 800c396:	8a1b      	ldrh	r3, [r3, #16]
		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u/%u/%u",
 800c398:	461c      	mov	r4, r3
				Logo.Mode,
 800c39a:	4b23      	ldr	r3, [pc, #140]	; (800c428 <IntervalFunc100ms+0x170>)
 800c39c:	f993 3000 	ldrsb.w	r3, [r3]
		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u/%u/%u",
 800c3a0:	461d      	mov	r5, r3
				Logo.PwmMax,
 800c3a2:	4b21      	ldr	r3, [pc, #132]	; (800c428 <IntervalFunc100ms+0x170>)
 800c3a4:	885b      	ldrh	r3, [r3, #2]
		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u/%u/%u",
 800c3a6:	461e      	mov	r6, r3
				Logo.DimmerSpeed,
 800c3a8:	4b1f      	ldr	r3, [pc, #124]	; (800c428 <IntervalFunc100ms+0x170>)
 800c3aa:	8a1b      	ldrh	r3, [r3, #16]
		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u/%u/%u",
 800c3ac:	61fb      	str	r3, [r7, #28]
				ErrorCode.Error,
 800c3ae:	4b1f      	ldr	r3, [pc, #124]	; (800c42c <IntervalFunc100ms+0x174>)
 800c3b0:	881b      	ldrh	r3, [r3, #0]
 800c3b2:	b29b      	uxth	r3, r3
		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u/%u/%u",
 800c3b4:	61bb      	str	r3, [r7, #24]
				DOOR_OPEN);
 800c3b6:	2101      	movs	r1, #1
 800c3b8:	481d      	ldr	r0, [pc, #116]	; (800c430 <IntervalFunc100ms+0x178>)
 800c3ba:	f004 f89d 	bl	80104f8 <HAL_GPIO_ReadPin>
 800c3be:	4603      	mov	r3, r0
		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u/%u/%u",
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	bf0c      	ite	eq
 800c3c4:	2301      	moveq	r3, #1
 800c3c6:	2300      	movne	r3, #0
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	f107 0020 	add.w	r0, r7, #32
 800c3ce:	9305      	str	r3, [sp, #20]
 800c3d0:	69ba      	ldr	r2, [r7, #24]
 800c3d2:	9204      	str	r2, [sp, #16]
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	9303      	str	r3, [sp, #12]
 800c3d8:	9602      	str	r6, [sp, #8]
 800c3da:	9501      	str	r5, [sp, #4]
 800c3dc:	9400      	str	r4, [sp, #0]
 800c3de:	464b      	mov	r3, r9
 800c3e0:	4642      	mov	r2, r8
 800c3e2:	4914      	ldr	r1, [pc, #80]	; (800c434 <IntervalFunc100ms+0x17c>)
 800c3e4:	f010 f818 	bl	801c418 <siprintf>
		UsbBuffWrite(MsgToSend);
 800c3e8:	f107 0320 	add.w	r3, r7, #32
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f000 f8a9 	bl	800c544 <UsbBuffWrite>

		OldTick100ms = HAL_GetTick();
 800c3f2:	f002 f9db 	bl	800e7ac <HAL_GetTick>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	4a03      	ldr	r2, [pc, #12]	; (800c408 <IntervalFunc100ms+0x150>)
 800c3fa:	6013      	str	r3, [r2, #0]
	}

}
 800c3fc:	bf00      	nop
 800c3fe:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800c402:	46bd      	mov	sp, r7
 800c404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c408:	20001e28 	.word	0x20001e28
 800c40c:	40012000 	.word	0x40012000
 800c410:	40011800 	.word	0x40011800
 800c414:	20002758 	.word	0x20002758
 800c418:	20001e38 	.word	0x20001e38
 800c41c:	20001e64 	.word	0x20001e64
 800c420:	0801e7e8 	.word	0x0801e7e8
 800c424:	20001e90 	.word	0x20001e90
 800c428:	20001e7c 	.word	0x20001e7c
 800c42c:	20001ea4 	.word	0x20001ea4
 800c430:	40010800 	.word	0x40010800
 800c434:	0801e818 	.word	0x0801e818

0800c438 <IntervalFunc50ms>:

void IntervalFunc50ms(void)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - OldTick50ms >50)
 800c43c:	f002 f9b6 	bl	800e7ac <HAL_GetTick>
 800c440:	4602      	mov	r2, r0
 800c442:	4b13      	ldr	r3, [pc, #76]	; (800c490 <IntervalFunc50ms+0x58>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	1ad3      	subs	r3, r2, r3
 800c448:	2b32      	cmp	r3, #50	; 0x32
 800c44a:	d91f      	bls.n	800c48c <IntervalFunc50ms+0x54>
	{
		if(ActualVisibleFunc != ShowPWMsetMenu && ActualVisibleFunc != ShowLedLightParamLight && ActualVisibleFunc != ShowLedLightParamLogo)
 800c44c:	4b11      	ldr	r3, [pc, #68]	; (800c494 <IntervalFunc50ms+0x5c>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a11      	ldr	r2, [pc, #68]	; (800c498 <IntervalFunc50ms+0x60>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d00c      	beq.n	800c470 <IntervalFunc50ms+0x38>
 800c456:	4b0f      	ldr	r3, [pc, #60]	; (800c494 <IntervalFunc50ms+0x5c>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a10      	ldr	r2, [pc, #64]	; (800c49c <IntervalFunc50ms+0x64>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d007      	beq.n	800c470 <IntervalFunc50ms+0x38>
 800c460:	4b0c      	ldr	r3, [pc, #48]	; (800c494 <IntervalFunc50ms+0x5c>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a0e      	ldr	r2, [pc, #56]	; (800c4a0 <IntervalFunc50ms+0x68>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d002      	beq.n	800c470 <IntervalFunc50ms+0x38>
		{
			EepromBackup(&M24C02);
 800c46a:	480e      	ldr	r0, [pc, #56]	; (800c4a4 <IntervalFunc50ms+0x6c>)
 800c46c:	f7fc ffca 	bl	8009404 <EepromBackup>
		}

		if(ActualVisibleFunc != NULL)
 800c470:	4b08      	ldr	r3, [pc, #32]	; (800c494 <IntervalFunc50ms+0x5c>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d002      	beq.n	800c47e <IntervalFunc50ms+0x46>
		{
			ActualVisibleFunc();
 800c478:	4b06      	ldr	r3, [pc, #24]	; (800c494 <IntervalFunc50ms+0x5c>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4798      	blx	r3
		}

		SSD1306_Display();
 800c47e:	f001 faf7 	bl	800da70 <SSD1306_Display>

		OldTick50ms = HAL_GetTick();
 800c482:	f002 f993 	bl	800e7ac <HAL_GetTick>
 800c486:	4603      	mov	r3, r0
 800c488:	4a01      	ldr	r2, [pc, #4]	; (800c490 <IntervalFunc50ms+0x58>)
 800c48a:	6013      	str	r3, [r2, #0]
	}

}
 800c48c:	bf00      	nop
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	20001e2c 	.word	0x20001e2c
 800c494:	20001ea8 	.word	0x20001ea8
 800c498:	0800b931 	.word	0x0800b931
 800c49c:	0800c051 	.word	0x0800c051
 800c4a0:	0800c01d 	.word	0x0800c01d
 800c4a4:	20001e44 	.word	0x20001e44

0800c4a8 <HAL_I2C_MemTxCpltCallback>:



void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
	m24cxxWcSetIt(&M24C02, hi2c);
 800c4b0:	6879      	ldr	r1, [r7, #4]
 800c4b2:	4803      	ldr	r0, [pc, #12]	; (800c4c0 <HAL_I2C_MemTxCpltCallback+0x18>)
 800c4b4:	f7fd fcfe 	bl	8009eb4 <m24cxxWcSetIt>
}
 800c4b8:	bf00      	nop
 800c4ba:	3708      	adds	r7, #8
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}
 800c4c0:	20001e44 	.word	0x20001e44

0800c4c4 <CDC_ReveiveCallback>:

void CDC_ReveiveCallback(uint8_t *Buffer, uint8_t Length)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b084      	sub	sp, #16
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	70fb      	strb	r3, [r7, #3]
	if(Length > 0)
 800c4d0:	78fb      	ldrb	r3, [r7, #3]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d02a      	beq.n	800c52c <CDC_ReveiveCallback+0x68>
	{
		uint8_t i = 0;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	73fb      	strb	r3, [r7, #15]
		LedBlinkOne(&CommPcUsb); //Control Led
 800c4da:	4816      	ldr	r0, [pc, #88]	; (800c534 <CDC_ReveiveCallback+0x70>)
 800c4dc:	f7fe fa6f 	bl	800a9be <LedBlinkOne>
		while(i < Length)
 800c4e0:	e020      	b.n	800c524 <CDC_ReveiveCallback+0x60>
		{
		if (RB_OK == Ring_Buffer_Write(&ReceiveBuffer, Buffer[i]))
 800c4e2:	7bfb      	ldrb	r3, [r7, #15]
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	4413      	add	r3, r2
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	4812      	ldr	r0, [pc, #72]	; (800c538 <CDC_ReveiveCallback+0x74>)
 800c4ee:	f001 f997 	bl	800d820 <Ring_Buffer_Write>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d10c      	bne.n	800c512 <CDC_ReveiveCallback+0x4e>
		{
			if(Buffer[i] == ENDLINE)
 800c4f8:	7bfb      	ldrb	r3, [r7, #15]
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	4413      	add	r3, r2
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	2b5e      	cmp	r3, #94	; 0x5e
 800c502:	d10c      	bne.n	800c51e <CDC_ReveiveCallback+0x5a>
			{
				LineCounter++;
 800c504:	4b0d      	ldr	r3, [pc, #52]	; (800c53c <CDC_ReveiveCallback+0x78>)
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	3301      	adds	r3, #1
 800c50a:	b2da      	uxtb	r2, r3
 800c50c:	4b0b      	ldr	r3, [pc, #44]	; (800c53c <CDC_ReveiveCallback+0x78>)
 800c50e:	701a      	strb	r2, [r3, #0]
 800c510:	e005      	b.n	800c51e <CDC_ReveiveCallback+0x5a>
			}
		}
		else
		{
			Ring_Buffer_Flush(&ReceiveBuffer);
 800c512:	4809      	ldr	r0, [pc, #36]	; (800c538 <CDC_ReveiveCallback+0x74>)
 800c514:	f001 f9ac 	bl	800d870 <Ring_Buffer_Flush>
			UsbBuffWrite("ERROR");
 800c518:	4809      	ldr	r0, [pc, #36]	; (800c540 <CDC_ReveiveCallback+0x7c>)
 800c51a:	f000 f813 	bl	800c544 <UsbBuffWrite>
		}
		i++;
 800c51e:	7bfb      	ldrb	r3, [r7, #15]
 800c520:	3301      	adds	r3, #1
 800c522:	73fb      	strb	r3, [r7, #15]
		while(i < Length)
 800c524:	7bfa      	ldrb	r2, [r7, #15]
 800c526:	78fb      	ldrb	r3, [r7, #3]
 800c528:	429a      	cmp	r2, r3
 800c52a:	d3da      	bcc.n	800c4e2 <CDC_ReveiveCallback+0x1e>
		}
	}
}
 800c52c:	bf00      	nop
 800c52e:	3710      	adds	r7, #16
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}
 800c534:	20000dfc 	.word	0x20000dfc
 800c538:	20000e14 	.word	0x20000e14
 800c53c:	2000161c 	.word	0x2000161c
 800c540:	0801e834 	.word	0x0801e834

0800c544 <UsbBuffWrite>:

void UsbBuffWrite(char * Message)
{
 800c544:	b590      	push	{r4, r7, lr}
 800c546:	b085      	sub	sp, #20
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]

	DataToTransmit++;
 800c54c:	4b1d      	ldr	r3, [pc, #116]	; (800c5c4 <UsbBuffWrite+0x80>)
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	3301      	adds	r3, #1
 800c552:	b2da      	uxtb	r2, r3
 800c554:	4b1b      	ldr	r3, [pc, #108]	; (800c5c4 <UsbBuffWrite+0x80>)
 800c556:	701a      	strb	r2, [r3, #0]
	for(uint8_t y = 0 ; y < strlen(Message) ; y++)
 800c558:	2300      	movs	r3, #0
 800c55a:	73fb      	strb	r3, [r7, #15]
 800c55c:	e016      	b.n	800c58c <UsbBuffWrite+0x48>
	{
		if(RB_OK == Ring_Buffer_Write(&TransmitBuffer, Message[y]))
 800c55e:	7bfb      	ldrb	r3, [r7, #15]
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	4413      	add	r3, r2
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	4619      	mov	r1, r3
 800c568:	4817      	ldr	r0, [pc, #92]	; (800c5c8 <UsbBuffWrite+0x84>)
 800c56a:	f001 f959 	bl	800d820 <Ring_Buffer_Write>
 800c56e:	4603      	mov	r3, r0
 800c570:	2b00      	cmp	r3, #0
 800c572:	d008      	beq.n	800c586 <UsbBuffWrite+0x42>
		{

		}
		else
		{
			Ring_Buffer_Flush(&TransmitBuffer);
 800c574:	4814      	ldr	r0, [pc, #80]	; (800c5c8 <UsbBuffWrite+0x84>)
 800c576:	f001 f97b 	bl	800d870 <Ring_Buffer_Flush>
			DataToTransmit--;
 800c57a:	4b12      	ldr	r3, [pc, #72]	; (800c5c4 <UsbBuffWrite+0x80>)
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	3b01      	subs	r3, #1
 800c580:	b2da      	uxtb	r2, r3
 800c582:	4b10      	ldr	r3, [pc, #64]	; (800c5c4 <UsbBuffWrite+0x80>)
 800c584:	701a      	strb	r2, [r3, #0]
	for(uint8_t y = 0 ; y < strlen(Message) ; y++)
 800c586:	7bfb      	ldrb	r3, [r7, #15]
 800c588:	3301      	adds	r3, #1
 800c58a:	73fb      	strb	r3, [r7, #15]
 800c58c:	7bfc      	ldrb	r4, [r7, #15]
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f7fb fe4a 	bl	8008228 <strlen>
 800c594:	4603      	mov	r3, r0
 800c596:	429c      	cmp	r4, r3
 800c598:	d3e1      	bcc.n	800c55e <UsbBuffWrite+0x1a>
		}
	}

	if(RB_OK == Ring_Buffer_Write(&TransmitBuffer, '^'))
 800c59a:	215e      	movs	r1, #94	; 0x5e
 800c59c:	480a      	ldr	r0, [pc, #40]	; (800c5c8 <UsbBuffWrite+0x84>)
 800c59e:	f001 f93f 	bl	800d820 <Ring_Buffer_Write>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d008      	beq.n	800c5ba <UsbBuffWrite+0x76>
	{

	}
	else
	{
		Ring_Buffer_Flush(&TransmitBuffer);
 800c5a8:	4807      	ldr	r0, [pc, #28]	; (800c5c8 <UsbBuffWrite+0x84>)
 800c5aa:	f001 f961 	bl	800d870 <Ring_Buffer_Flush>
		DataToTransmit--;
 800c5ae:	4b05      	ldr	r3, [pc, #20]	; (800c5c4 <UsbBuffWrite+0x80>)
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	3b01      	subs	r3, #1
 800c5b4:	b2da      	uxtb	r2, r3
 800c5b6:	4b03      	ldr	r3, [pc, #12]	; (800c5c4 <UsbBuffWrite+0x80>)
 800c5b8:	701a      	strb	r2, [r3, #0]
	}

}
 800c5ba:	bf00      	nop
 800c5bc:	3714      	adds	r7, #20
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd90      	pop	{r4, r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	20001e20 	.word	0x20001e20
 800c5c8:	20001218 	.word	0x20001218

0800c5cc <UsbTransmitTask>:

void UsbTransmitTask(void)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp = 0;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	71bb      	strb	r3, [r7, #6]
		do
		{
			if(Ring_Buffer_Read(&TransmitBuffer, &tmp) == RB_OK)
 800c5da:	1dbb      	adds	r3, r7, #6
 800c5dc:	4619      	mov	r1, r3
 800c5de:	480e      	ldr	r0, [pc, #56]	; (800c618 <UsbTransmitTask+0x4c>)
 800c5e0:	f001 f8f6 	bl	800d7d0 <Ring_Buffer_Read>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d10a      	bne.n	800c600 <UsbTransmitTask+0x34>
			{
			TransmitData[i] = tmp;
 800c5ea:	79fb      	ldrb	r3, [r7, #7]
 800c5ec:	79b9      	ldrb	r1, [r7, #6]
 800c5ee:	4a0b      	ldr	r2, [pc, #44]	; (800c61c <UsbTransmitTask+0x50>)
 800c5f0:	54d1      	strb	r1, [r2, r3]
			i++;
 800c5f2:	79fb      	ldrb	r3, [r7, #7]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	71fb      	strb	r3, [r7, #7]
			else
			{
				break;
			}

		} while(tmp != '^');
 800c5f8:	79bb      	ldrb	r3, [r7, #6]
 800c5fa:	2b5e      	cmp	r3, #94	; 0x5e
 800c5fc:	d1ed      	bne.n	800c5da <UsbTransmitTask+0xe>
 800c5fe:	e000      	b.n	800c602 <UsbTransmitTask+0x36>
				break;
 800c600:	bf00      	nop

		CDC_Transmit_FS(TransmitData, i);
 800c602:	79fb      	ldrb	r3, [r7, #7]
 800c604:	b29b      	uxth	r3, r3
 800c606:	4619      	mov	r1, r3
 800c608:	4804      	ldr	r0, [pc, #16]	; (800c61c <UsbTransmitTask+0x50>)
 800c60a:	f00e fd45 	bl	801b098 <CDC_Transmit_FS>
}
 800c60e:	bf00      	nop
 800c610:	3708      	adds	r7, #8
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	20001218 	.word	0x20001218
 800c61c:	20001a20 	.word	0x20001a20

0800c620 <deinit_peripherals>:

void deinit_peripherals(void)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800c624:	b672      	cpsid	i
}
 800c626:	bf00      	nop

	__disable_irq();
	NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c628:	2014      	movs	r0, #20
 800c62a:	f7fe f9f7 	bl	800aa1c <__NVIC_DisableIRQ>
	USBD_Stop(&hUsbDeviceFS);
 800c62e:	488a      	ldr	r0, [pc, #552]	; (800c858 <deinit_peripherals+0x238>)
 800c630:	f00d fbc8 	bl	8019dc4 <USBD_Stop>
	USBD_DeInit(&hUsbDeviceFS);
 800c634:	4888      	ldr	r0, [pc, #544]	; (800c858 <deinit_peripherals+0x238>)
 800c636:	f00d fb83 	bl	8019d40 <USBD_DeInit>
	__HAL_RCC_USB_CLK_DISABLE();
 800c63a:	4b88      	ldr	r3, [pc, #544]	; (800c85c <deinit_peripherals+0x23c>)
 800c63c:	69db      	ldr	r3, [r3, #28]
 800c63e:	4a87      	ldr	r2, [pc, #540]	; (800c85c <deinit_peripherals+0x23c>)
 800c640:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c644:	61d3      	str	r3, [r2, #28]
	memset(&hUsbDeviceFS, 0, sizeof(USBD_HandleTypeDef));
 800c646:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800c64a:	2100      	movs	r1, #0
 800c64c:	4882      	ldr	r0, [pc, #520]	; (800c858 <deinit_peripherals+0x238>)
 800c64e:	f00f ff46 	bl	801c4de <memset>

	  HAL_GPIO_DeInit(COMM_PC_LED_GPIO_Port, COMM_PC_LED_Pin);
 800c652:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c656:	4882      	ldr	r0, [pc, #520]	; (800c860 <deinit_peripherals+0x240>)
 800c658:	f003 fe82 	bl	8010360 <HAL_GPIO_DeInit>
	  HAL_GPIO_DeInit(ERROR_LED_GPIO_Port, ERROR_LED_Pin);
 800c65c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c660:	487f      	ldr	r0, [pc, #508]	; (800c860 <deinit_peripherals+0x240>)
 800c662:	f003 fe7d 	bl	8010360 <HAL_GPIO_DeInit>
	  HAL_GPIO_DeInit(GPIOG, 0); HAL_GPIO_DeInit(GPIOG, 1); HAL_GPIO_DeInit(GPIOG, 2); HAL_GPIO_DeInit(GPIOG, 3); HAL_GPIO_DeInit(GPIOG, 4);
 800c666:	2100      	movs	r1, #0
 800c668:	487e      	ldr	r0, [pc, #504]	; (800c864 <deinit_peripherals+0x244>)
 800c66a:	f003 fe79 	bl	8010360 <HAL_GPIO_DeInit>
 800c66e:	2101      	movs	r1, #1
 800c670:	487c      	ldr	r0, [pc, #496]	; (800c864 <deinit_peripherals+0x244>)
 800c672:	f003 fe75 	bl	8010360 <HAL_GPIO_DeInit>
 800c676:	2102      	movs	r1, #2
 800c678:	487a      	ldr	r0, [pc, #488]	; (800c864 <deinit_peripherals+0x244>)
 800c67a:	f003 fe71 	bl	8010360 <HAL_GPIO_DeInit>
 800c67e:	2103      	movs	r1, #3
 800c680:	4878      	ldr	r0, [pc, #480]	; (800c864 <deinit_peripherals+0x244>)
 800c682:	f003 fe6d 	bl	8010360 <HAL_GPIO_DeInit>
 800c686:	2104      	movs	r1, #4
 800c688:	4876      	ldr	r0, [pc, #472]	; (800c864 <deinit_peripherals+0x244>)
 800c68a:	f003 fe69 	bl	8010360 <HAL_GPIO_DeInit>
	  HAL_GPIO_DeInit(GPIOG, 5); HAL_GPIO_DeInit(GPIOG, 6); HAL_GPIO_DeInit(GPIOG, 7); HAL_GPIO_DeInit(GPIOG, 8); HAL_GPIO_DeInit(GPIOG, 9);
 800c68e:	2105      	movs	r1, #5
 800c690:	4874      	ldr	r0, [pc, #464]	; (800c864 <deinit_peripherals+0x244>)
 800c692:	f003 fe65 	bl	8010360 <HAL_GPIO_DeInit>
 800c696:	2106      	movs	r1, #6
 800c698:	4872      	ldr	r0, [pc, #456]	; (800c864 <deinit_peripherals+0x244>)
 800c69a:	f003 fe61 	bl	8010360 <HAL_GPIO_DeInit>
 800c69e:	2107      	movs	r1, #7
 800c6a0:	4870      	ldr	r0, [pc, #448]	; (800c864 <deinit_peripherals+0x244>)
 800c6a2:	f003 fe5d 	bl	8010360 <HAL_GPIO_DeInit>
 800c6a6:	2108      	movs	r1, #8
 800c6a8:	486e      	ldr	r0, [pc, #440]	; (800c864 <deinit_peripherals+0x244>)
 800c6aa:	f003 fe59 	bl	8010360 <HAL_GPIO_DeInit>
 800c6ae:	2109      	movs	r1, #9
 800c6b0:	486c      	ldr	r0, [pc, #432]	; (800c864 <deinit_peripherals+0x244>)
 800c6b2:	f003 fe55 	bl	8010360 <HAL_GPIO_DeInit>
	  HAL_GPIO_DeInit(GPIOG, 10); HAL_GPIO_DeInit(GPIOG, 11); HAL_GPIO_DeInit(GPIOG, 12); HAL_GPIO_DeInit(GPIOG, 13); HAL_GPIO_DeInit(GPIOG, 14);
 800c6b6:	210a      	movs	r1, #10
 800c6b8:	486a      	ldr	r0, [pc, #424]	; (800c864 <deinit_peripherals+0x244>)
 800c6ba:	f003 fe51 	bl	8010360 <HAL_GPIO_DeInit>
 800c6be:	210b      	movs	r1, #11
 800c6c0:	4868      	ldr	r0, [pc, #416]	; (800c864 <deinit_peripherals+0x244>)
 800c6c2:	f003 fe4d 	bl	8010360 <HAL_GPIO_DeInit>
 800c6c6:	210c      	movs	r1, #12
 800c6c8:	4866      	ldr	r0, [pc, #408]	; (800c864 <deinit_peripherals+0x244>)
 800c6ca:	f003 fe49 	bl	8010360 <HAL_GPIO_DeInit>
 800c6ce:	210d      	movs	r1, #13
 800c6d0:	4864      	ldr	r0, [pc, #400]	; (800c864 <deinit_peripherals+0x244>)
 800c6d2:	f003 fe45 	bl	8010360 <HAL_GPIO_DeInit>
 800c6d6:	210e      	movs	r1, #14
 800c6d8:	4862      	ldr	r0, [pc, #392]	; (800c864 <deinit_peripherals+0x244>)
 800c6da:	f003 fe41 	bl	8010360 <HAL_GPIO_DeInit>
	  HAL_GPIO_DeInit(GPIOG, 15); HAL_GPIO_DeInit(GPIOE, 0); HAL_GPIO_DeInit(GPIOE, 1); HAL_GPIO_DeInit(GPIOE, 2); HAL_GPIO_DeInit(GPIOE, 3);
 800c6de:	210f      	movs	r1, #15
 800c6e0:	4860      	ldr	r0, [pc, #384]	; (800c864 <deinit_peripherals+0x244>)
 800c6e2:	f003 fe3d 	bl	8010360 <HAL_GPIO_DeInit>
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	485f      	ldr	r0, [pc, #380]	; (800c868 <deinit_peripherals+0x248>)
 800c6ea:	f003 fe39 	bl	8010360 <HAL_GPIO_DeInit>
 800c6ee:	2101      	movs	r1, #1
 800c6f0:	485d      	ldr	r0, [pc, #372]	; (800c868 <deinit_peripherals+0x248>)
 800c6f2:	f003 fe35 	bl	8010360 <HAL_GPIO_DeInit>
 800c6f6:	2102      	movs	r1, #2
 800c6f8:	485b      	ldr	r0, [pc, #364]	; (800c868 <deinit_peripherals+0x248>)
 800c6fa:	f003 fe31 	bl	8010360 <HAL_GPIO_DeInit>
 800c6fe:	2103      	movs	r1, #3
 800c700:	4859      	ldr	r0, [pc, #356]	; (800c868 <deinit_peripherals+0x248>)
 800c702:	f003 fe2d 	bl	8010360 <HAL_GPIO_DeInit>
	  HAL_GPIO_DeInit(GPIOE, 4); HAL_GPIO_DeInit(GPIOE, 5); HAL_GPIO_DeInit(GPIOE, 6); HAL_GPIO_DeInit(GPIOE, 7); HAL_GPIO_DeInit(GPIOE, 8);
 800c706:	2104      	movs	r1, #4
 800c708:	4857      	ldr	r0, [pc, #348]	; (800c868 <deinit_peripherals+0x248>)
 800c70a:	f003 fe29 	bl	8010360 <HAL_GPIO_DeInit>
 800c70e:	2105      	movs	r1, #5
 800c710:	4855      	ldr	r0, [pc, #340]	; (800c868 <deinit_peripherals+0x248>)
 800c712:	f003 fe25 	bl	8010360 <HAL_GPIO_DeInit>
 800c716:	2106      	movs	r1, #6
 800c718:	4853      	ldr	r0, [pc, #332]	; (800c868 <deinit_peripherals+0x248>)
 800c71a:	f003 fe21 	bl	8010360 <HAL_GPIO_DeInit>
 800c71e:	2107      	movs	r1, #7
 800c720:	4851      	ldr	r0, [pc, #324]	; (800c868 <deinit_peripherals+0x248>)
 800c722:	f003 fe1d 	bl	8010360 <HAL_GPIO_DeInit>
 800c726:	2108      	movs	r1, #8
 800c728:	484f      	ldr	r0, [pc, #316]	; (800c868 <deinit_peripherals+0x248>)
 800c72a:	f003 fe19 	bl	8010360 <HAL_GPIO_DeInit>
	  HAL_GPIO_DeInit(GPIOE, 9); HAL_GPIO_DeInit(GPIOE, 10); HAL_GPIO_DeInit(GPIOE, 11); HAL_GPIO_DeInit(GPIOE, 12); HAL_GPIO_DeInit(GPIOE, 13);
 800c72e:	2109      	movs	r1, #9
 800c730:	484d      	ldr	r0, [pc, #308]	; (800c868 <deinit_peripherals+0x248>)
 800c732:	f003 fe15 	bl	8010360 <HAL_GPIO_DeInit>
 800c736:	210a      	movs	r1, #10
 800c738:	484b      	ldr	r0, [pc, #300]	; (800c868 <deinit_peripherals+0x248>)
 800c73a:	f003 fe11 	bl	8010360 <HAL_GPIO_DeInit>
 800c73e:	210b      	movs	r1, #11
 800c740:	4849      	ldr	r0, [pc, #292]	; (800c868 <deinit_peripherals+0x248>)
 800c742:	f003 fe0d 	bl	8010360 <HAL_GPIO_DeInit>
 800c746:	210c      	movs	r1, #12
 800c748:	4847      	ldr	r0, [pc, #284]	; (800c868 <deinit_peripherals+0x248>)
 800c74a:	f003 fe09 	bl	8010360 <HAL_GPIO_DeInit>
 800c74e:	210d      	movs	r1, #13
 800c750:	4845      	ldr	r0, [pc, #276]	; (800c868 <deinit_peripherals+0x248>)
 800c752:	f003 fe05 	bl	8010360 <HAL_GPIO_DeInit>
	  HAL_GPIO_DeInit(GPIOE, 14); HAL_GPIO_DeInit(GPIOE, 15); HAL_GPIO_DeInit(GPIOF, 10); HAL_GPIO_DeInit(GPIOE, 11); HAL_GPIO_DeInit(GPIOE, 12);
 800c756:	210e      	movs	r1, #14
 800c758:	4843      	ldr	r0, [pc, #268]	; (800c868 <deinit_peripherals+0x248>)
 800c75a:	f003 fe01 	bl	8010360 <HAL_GPIO_DeInit>
 800c75e:	210f      	movs	r1, #15
 800c760:	4841      	ldr	r0, [pc, #260]	; (800c868 <deinit_peripherals+0x248>)
 800c762:	f003 fdfd 	bl	8010360 <HAL_GPIO_DeInit>
 800c766:	210a      	movs	r1, #10
 800c768:	483d      	ldr	r0, [pc, #244]	; (800c860 <deinit_peripherals+0x240>)
 800c76a:	f003 fdf9 	bl	8010360 <HAL_GPIO_DeInit>
 800c76e:	210b      	movs	r1, #11
 800c770:	483d      	ldr	r0, [pc, #244]	; (800c868 <deinit_peripherals+0x248>)
 800c772:	f003 fdf5 	bl	8010360 <HAL_GPIO_DeInit>
 800c776:	210c      	movs	r1, #12
 800c778:	483b      	ldr	r0, [pc, #236]	; (800c868 <deinit_peripherals+0x248>)
 800c77a:	f003 fdf1 	bl	8010360 <HAL_GPIO_DeInit>
	  HAL_GPIO_DeInit(GPIOE, 13); HAL_GPIO_DeInit(GPIOE, 14); HAL_GPIO_DeInit(GPIOE, 15); HAL_GPIO_DeInit(GPIOD, 12); HAL_GPIO_DeInit(GPIOD, 13);
 800c77e:	210d      	movs	r1, #13
 800c780:	4839      	ldr	r0, [pc, #228]	; (800c868 <deinit_peripherals+0x248>)
 800c782:	f003 fded 	bl	8010360 <HAL_GPIO_DeInit>
 800c786:	210e      	movs	r1, #14
 800c788:	4837      	ldr	r0, [pc, #220]	; (800c868 <deinit_peripherals+0x248>)
 800c78a:	f003 fde9 	bl	8010360 <HAL_GPIO_DeInit>
 800c78e:	210f      	movs	r1, #15
 800c790:	4835      	ldr	r0, [pc, #212]	; (800c868 <deinit_peripherals+0x248>)
 800c792:	f003 fde5 	bl	8010360 <HAL_GPIO_DeInit>
 800c796:	210c      	movs	r1, #12
 800c798:	4834      	ldr	r0, [pc, #208]	; (800c86c <deinit_peripherals+0x24c>)
 800c79a:	f003 fde1 	bl	8010360 <HAL_GPIO_DeInit>
 800c79e:	210d      	movs	r1, #13
 800c7a0:	4832      	ldr	r0, [pc, #200]	; (800c86c <deinit_peripherals+0x24c>)
 800c7a2:	f003 fddd 	bl	8010360 <HAL_GPIO_DeInit>
	  HAL_GPIO_DeInit(GPIOD, 14); HAL_GPIO_DeInit(GPIOD, 15); HAL_GPIO_DeInit(SW_OPEN_GPIO_Port, SW_OPEN_Pin); HAL_GPIO_DeInit(RS485_TXE_GPIO_Port, RS485_TXE_Pin);
 800c7a6:	210e      	movs	r1, #14
 800c7a8:	4830      	ldr	r0, [pc, #192]	; (800c86c <deinit_peripherals+0x24c>)
 800c7aa:	f003 fdd9 	bl	8010360 <HAL_GPIO_DeInit>
 800c7ae:	210f      	movs	r1, #15
 800c7b0:	482e      	ldr	r0, [pc, #184]	; (800c86c <deinit_peripherals+0x24c>)
 800c7b2:	f003 fdd5 	bl	8010360 <HAL_GPIO_DeInit>
 800c7b6:	2101      	movs	r1, #1
 800c7b8:	482d      	ldr	r0, [pc, #180]	; (800c870 <deinit_peripherals+0x250>)
 800c7ba:	f003 fdd1 	bl	8010360 <HAL_GPIO_DeInit>
 800c7be:	2110      	movs	r1, #16
 800c7c0:	482b      	ldr	r0, [pc, #172]	; (800c870 <deinit_peripherals+0x250>)
 800c7c2:	f003 fdcd 	bl	8010360 <HAL_GPIO_DeInit>
	  HAL_GPIO_DeInit(WC_EEPROM_GPIO_Port, WC_EEPROM_Pin); HAL_GPIO_DeInit(BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin);
 800c7c6:	2120      	movs	r1, #32
 800c7c8:	482a      	ldr	r0, [pc, #168]	; (800c874 <deinit_peripherals+0x254>)
 800c7ca:	f003 fdc9 	bl	8010360 <HAL_GPIO_DeInit>
 800c7ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c7d2:	4829      	ldr	r0, [pc, #164]	; (800c878 <deinit_peripherals+0x258>)
 800c7d4:	f003 fdc4 	bl	8010360 <HAL_GPIO_DeInit>
	  HAL_GPIO_DeInit(BUTTON_UP_GPIO_Port, BUTTON_UP_Pin);
 800c7d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c7dc:	4826      	ldr	r0, [pc, #152]	; (800c878 <deinit_peripherals+0x258>)
 800c7de:	f003 fdbf 	bl	8010360 <HAL_GPIO_DeInit>
	  //DMA Deinit
	  HAL_DMA_DeInit(&hdma_memtomem_dma2_channel1);
 800c7e2:	4826      	ldr	r0, [pc, #152]	; (800c87c <deinit_peripherals+0x25c>)
 800c7e4:	f002 ff96 	bl	800f714 <HAL_DMA_DeInit>
	  //TIM Deinit
	  __HAL_RCC_TIM3_CLK_DISABLE();
 800c7e8:	4b1c      	ldr	r3, [pc, #112]	; (800c85c <deinit_peripherals+0x23c>)
 800c7ea:	69db      	ldr	r3, [r3, #28]
 800c7ec:	4a1b      	ldr	r2, [pc, #108]	; (800c85c <deinit_peripherals+0x23c>)
 800c7ee:	f023 0302 	bic.w	r3, r3, #2
 800c7f2:	61d3      	str	r3, [r2, #28]
	  __HAL_RCC_TIM4_CLK_DISABLE();
 800c7f4:	4b19      	ldr	r3, [pc, #100]	; (800c85c <deinit_peripherals+0x23c>)
 800c7f6:	69db      	ldr	r3, [r3, #28]
 800c7f8:	4a18      	ldr	r2, [pc, #96]	; (800c85c <deinit_peripherals+0x23c>)
 800c7fa:	f023 0304 	bic.w	r3, r3, #4
 800c7fe:	61d3      	str	r3, [r2, #28]
	  __HAL_RCC_TIM5_CLK_DISABLE();
 800c800:	4b16      	ldr	r3, [pc, #88]	; (800c85c <deinit_peripherals+0x23c>)
 800c802:	69db      	ldr	r3, [r3, #28]
 800c804:	4a15      	ldr	r2, [pc, #84]	; (800c85c <deinit_peripherals+0x23c>)
 800c806:	f023 0308 	bic.w	r3, r3, #8
 800c80a:	61d3      	str	r3, [r2, #28]

	  HAL_UART_DeInit(&huart1);
 800c80c:	481c      	ldr	r0, [pc, #112]	; (800c880 <deinit_peripherals+0x260>)
 800c80e:	f00a f9a1 	bl	8016b54 <HAL_UART_DeInit>
	  HAL_UART_DeInit(&huart2);
 800c812:	481c      	ldr	r0, [pc, #112]	; (800c884 <deinit_peripherals+0x264>)
 800c814:	f00a f99e 	bl	8016b54 <HAL_UART_DeInit>
	  HAL_UART_DeInit(&huart3);
 800c818:	481b      	ldr	r0, [pc, #108]	; (800c888 <deinit_peripherals+0x268>)
 800c81a:	f00a f99b 	bl	8016b54 <HAL_UART_DeInit>

	  HAL_I2C_DeInit(&hi2c1);
 800c81e:	481b      	ldr	r0, [pc, #108]	; (800c88c <deinit_peripherals+0x26c>)
 800c820:	f003 ffde 	bl	80107e0 <HAL_I2C_DeInit>

	  HAL_ADC_Stop_DMA(&hadc1);
 800c824:	481a      	ldr	r0, [pc, #104]	; (800c890 <deinit_peripherals+0x270>)
 800c826:	f002 fa97 	bl	800ed58 <HAL_ADC_Stop_DMA>
	  HAL_ADC_DeInit(&hadc1);
 800c82a:	4819      	ldr	r0, [pc, #100]	; (800c890 <deinit_peripherals+0x270>)
 800c82c:	f002 f8f4 	bl	800ea18 <HAL_ADC_DeInit>


	  HAL_DeInit();
 800c830:	f001 ff5c 	bl	800e6ec <HAL_DeInit>

	 IWDG->KR = 0xAAAA; //Unlock key Register
 800c834:	4b17      	ldr	r3, [pc, #92]	; (800c894 <deinit_peripherals+0x274>)
 800c836:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800c83a:	601a      	str	r2, [r3, #0]
	 IWDG->KR = 0x0000; //Deactive IWDG
 800c83c:	4b15      	ldr	r3, [pc, #84]	; (800c894 <deinit_peripherals+0x274>)
 800c83e:	2200      	movs	r2, #0
 800c840:	601a      	str	r2, [r3, #0]


	  SysTick->CTRL = 0;
 800c842:	4b15      	ldr	r3, [pc, #84]	; (800c898 <deinit_peripherals+0x278>)
 800c844:	2200      	movs	r2, #0
 800c846:	601a      	str	r2, [r3, #0]
	  SysTick->LOAD = 0;
 800c848:	4b13      	ldr	r3, [pc, #76]	; (800c898 <deinit_peripherals+0x278>)
 800c84a:	2200      	movs	r2, #0
 800c84c:	605a      	str	r2, [r3, #4]
	  SysTick->VAL = 0;
 800c84e:	4b12      	ldr	r3, [pc, #72]	; (800c898 <deinit_peripherals+0x278>)
 800c850:	2200      	movs	r2, #0
 800c852:	609a      	str	r2, [r3, #8]

}
 800c854:	bf00      	nop
 800c856:	bd80      	pop	{r7, pc}
 800c858:	200028c8 	.word	0x200028c8
 800c85c:	40021000 	.word	0x40021000
 800c860:	40011c00 	.word	0x40011c00
 800c864:	40012000 	.word	0x40012000
 800c868:	40011800 	.word	0x40011800
 800c86c:	40011400 	.word	0x40011400
 800c870:	40010800 	.word	0x40010800
 800c874:	40010c00 	.word	0x40010c00
 800c878:	40011000 	.word	0x40011000
 800c87c:	20000c78 	.word	0x20000c78
 800c880:	200027e8 	.word	0x200027e8
 800c884:	20002830 	.word	0x20002830
 800c888:	20002878 	.word	0x20002878
 800c88c:	20000cbc 	.word	0x20000cbc
 800c890:	20000c04 	.word	0x20000c04
 800c894:	40003000 	.word	0x40003000
 800c898:	e000e010 	.word	0xe000e010

0800c89c <jump_to_application>:

void jump_to_application(uint32_t const app_address) {
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b086      	sub	sp, #24
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 8; i++) {
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	75fb      	strb	r3, [r7, #23]
 800c8a8:	e009      	b.n	800c8be <jump_to_application+0x22>
	        NVIC->ICER[i] = 0xFFFFFFFF;
 800c8aa:	4a12      	ldr	r2, [pc, #72]	; (800c8f4 <jump_to_application+0x58>)
 800c8ac:	7dfb      	ldrb	r3, [r7, #23]
 800c8ae:	3320      	adds	r3, #32
 800c8b0:	f04f 31ff 	mov.w	r1, #4294967295
 800c8b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint8_t i = 0; i < 8; i++) {
 800c8b8:	7dfb      	ldrb	r3, [r7, #23]
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	75fb      	strb	r3, [r7, #23]
 800c8be:	7dfb      	ldrb	r3, [r7, #23]
 800c8c0:	2b07      	cmp	r3, #7
 800c8c2:	d9f2      	bls.n	800c8aa <jump_to_application+0xe>
	    }
  typedef void (*jumpFunction)(); // helper-typedef
  uint32_t const jumpAddress = *(__IO uint32_t*) (app_address + 4); // Address of application's Reset Handler
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	3304      	adds	r3, #4
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	613b      	str	r3, [r7, #16]
  jumpFunction runApplication =  jumpAddress; // Function we'll use to jump to application
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	60fb      	str	r3, [r7, #12]


  deinit_peripherals(); // Deinitialization of peripherals and systick
 800c8d0:	f7ff fea6 	bl	800c620 <deinit_peripherals>

  __set_MSP(*((__IO uint32_t*) app_address)); // Stack pointer setup
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	f383 8808 	msr	MSP, r3
}
 800c8e0:	bf00      	nop
  __asm__ volatile("ldr r10, =0x1234");
 800c8e2:	f241 2a34 	movw	sl, #4660	; 0x1234
  runApplication(); // Jump to application
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	4798      	blx	r3
}
 800c8ea:	bf00      	nop
 800c8ec:	3718      	adds	r7, #24
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	e000e100 	.word	0xe000e100

0800c8f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800c8fc:	b672      	cpsid	i
}
 800c8fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  GPIOF -> ODR |= 0x8000;
 800c900:	4b03      	ldr	r3, [pc, #12]	; (800c910 <Error_Handler+0x18>)
 800c902:	68db      	ldr	r3, [r3, #12]
 800c904:	4a02      	ldr	r2, [pc, #8]	; (800c910 <Error_Handler+0x18>)
 800c906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c90a:	60d3      	str	r3, [r2, #12]
  while (1)
 800c90c:	e7fe      	b.n	800c90c <Error_Handler+0x14>
 800c90e:	bf00      	nop
 800c910:	40011c00 	.word	0x40011c00

0800c914 <HeaderDraw>:
	menu_t sub_menu4_3 = { BackStr, NULL, &sub_menu4_2, NULL, &menu4, MenuBack };


static void HeaderDraw(char *header)

{
 800c914:	b580      	push	{r7, lr}
 800c916:	b08c      	sub	sp, #48	; 0x30
 800c918:	af02      	add	r7, sp, #8
 800c91a:	6078      	str	r0, [r7, #4]
	  GFX_SetFont(font_8x5);
 800c91c:	4857      	ldr	r0, [pc, #348]	; (800ca7c <HeaderDraw+0x168>)
 800c91e:	f7fc fdbf 	bl	80094a0 <GFX_SetFont>
	  GFX_SetFontSize(1);
 800c922:	2001      	movs	r0, #1
 800c924:	f7fc fdca 	bl	80094bc <GFX_SetFontSize>
	  size_t headerLen = strlen(header);
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f7fb fc7d 	bl	8008228 <strlen>
 800c92e:	6238      	str	r0, [r7, #32]
	  char buff[20];
	  if(headerLen % 2)
 800c930:	6a3b      	ldr	r3, [r7, #32]
 800c932:	f003 0301 	and.w	r3, r3, #1
 800c936:	2b00      	cmp	r3, #0
 800c938:	d04e      	beq.n	800c9d8 <HeaderDraw+0xc4>
	  {
		  for(uint8_t i = 0; i<19; i++)
 800c93a:	2300      	movs	r3, #0
 800c93c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c940:	e03a      	b.n	800c9b8 <HeaderDraw+0xa4>
		  {
			  if(i<9-(headerLen/2))
 800c942:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c946:	6a3b      	ldr	r3, [r7, #32]
 800c948:	085b      	lsrs	r3, r3, #1
 800c94a:	f1c3 0309 	rsb	r3, r3, #9
 800c94e:	429a      	cmp	r2, r3
 800c950:	d207      	bcs.n	800c962 <HeaderDraw+0x4e>
			  {
				  buff[i] = '-';
 800c952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c956:	3328      	adds	r3, #40	; 0x28
 800c958:	443b      	add	r3, r7
 800c95a:	222d      	movs	r2, #45	; 0x2d
 800c95c:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800c960:	e025      	b.n	800c9ae <HeaderDraw+0x9a>
			  }
			  else if(i>=9-(headerLen/2) && i<9+(headerLen/2) + 1)
 800c962:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c966:	6a3b      	ldr	r3, [r7, #32]
 800c968:	085b      	lsrs	r3, r3, #1
 800c96a:	f1c3 0309 	rsb	r3, r3, #9
 800c96e:	429a      	cmp	r2, r3
 800c970:	d316      	bcc.n	800c9a0 <HeaderDraw+0x8c>
 800c972:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c976:	6a3b      	ldr	r3, [r7, #32]
 800c978:	085b      	lsrs	r3, r3, #1
 800c97a:	330a      	adds	r3, #10
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d20f      	bcs.n	800c9a0 <HeaderDraw+0x8c>
			  {
				  buff[i] = header[i-9+(headerLen/2)];
 800c980:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c984:	6a3b      	ldr	r3, [r7, #32]
 800c986:	085b      	lsrs	r3, r3, #1
 800c988:	4413      	add	r3, r2
 800c98a:	3b09      	subs	r3, #9
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	441a      	add	r2, r3
 800c990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c994:	7812      	ldrb	r2, [r2, #0]
 800c996:	3328      	adds	r3, #40	; 0x28
 800c998:	443b      	add	r3, r7
 800c99a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800c99e:	e006      	b.n	800c9ae <HeaderDraw+0x9a>
			  }
			  else
			  {
				  buff[i] = '-';
 800c9a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9a4:	3328      	adds	r3, #40	; 0x28
 800c9a6:	443b      	add	r3, r7
 800c9a8:	222d      	movs	r2, #45	; 0x2d
 800c9aa:	f803 2c1c 	strb.w	r2, [r3, #-28]
		  for(uint8_t i = 0; i<19; i++)
 800c9ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c9b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9bc:	2b12      	cmp	r3, #18
 800c9be:	d9c0      	bls.n	800c942 <HeaderDraw+0x2e>
			  }
		  }
		  buff[19] = 0;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	77fb      	strb	r3, [r7, #31]
		  GFX_DrawString(9, 0, buff, WHITE, 0);
 800c9c4:	f107 020c 	add.w	r2, r7, #12
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	9300      	str	r3, [sp, #0]
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	2100      	movs	r1, #0
 800c9d0:	2009      	movs	r0, #9
 800c9d2:	f7fc fe3f 	bl	8009654 <GFX_DrawString>
			  }
		  }
		  buff[18] = 0;
		  GFX_DrawString(11, 0, buff, WHITE, 0);
	  }
}
 800c9d6:	e04d      	b.n	800ca74 <HeaderDraw+0x160>
		  for(uint8_t i = 0; i<18; i++)
 800c9d8:	2300      	movs	r3, #0
 800c9da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c9de:	e03a      	b.n	800ca56 <HeaderDraw+0x142>
			  if(i<9-(headerLen/2))
 800c9e0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c9e4:	6a3b      	ldr	r3, [r7, #32]
 800c9e6:	085b      	lsrs	r3, r3, #1
 800c9e8:	f1c3 0309 	rsb	r3, r3, #9
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d207      	bcs.n	800ca00 <HeaderDraw+0xec>
				  buff[i] = '-';
 800c9f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c9f4:	3328      	adds	r3, #40	; 0x28
 800c9f6:	443b      	add	r3, r7
 800c9f8:	222d      	movs	r2, #45	; 0x2d
 800c9fa:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800c9fe:	e025      	b.n	800ca4c <HeaderDraw+0x138>
			  else if(i>=9-(headerLen/2) && i<9+(headerLen/2))
 800ca00:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ca04:	6a3b      	ldr	r3, [r7, #32]
 800ca06:	085b      	lsrs	r3, r3, #1
 800ca08:	f1c3 0309 	rsb	r3, r3, #9
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d316      	bcc.n	800ca3e <HeaderDraw+0x12a>
 800ca10:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ca14:	6a3b      	ldr	r3, [r7, #32]
 800ca16:	085b      	lsrs	r3, r3, #1
 800ca18:	3309      	adds	r3, #9
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d20f      	bcs.n	800ca3e <HeaderDraw+0x12a>
				  buff[i] = header[i-9+(headerLen/2)];
 800ca1e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ca22:	6a3b      	ldr	r3, [r7, #32]
 800ca24:	085b      	lsrs	r3, r3, #1
 800ca26:	4413      	add	r3, r2
 800ca28:	3b09      	subs	r3, #9
 800ca2a:	687a      	ldr	r2, [r7, #4]
 800ca2c:	441a      	add	r2, r3
 800ca2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca32:	7812      	ldrb	r2, [r2, #0]
 800ca34:	3328      	adds	r3, #40	; 0x28
 800ca36:	443b      	add	r3, r7
 800ca38:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800ca3c:	e006      	b.n	800ca4c <HeaderDraw+0x138>
				  buff[i] = '-';
 800ca3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca42:	3328      	adds	r3, #40	; 0x28
 800ca44:	443b      	add	r3, r7
 800ca46:	222d      	movs	r2, #45	; 0x2d
 800ca48:	f803 2c1c 	strb.w	r2, [r3, #-28]
		  for(uint8_t i = 0; i<18; i++)
 800ca4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca50:	3301      	adds	r3, #1
 800ca52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ca56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca5a:	2b11      	cmp	r3, #17
 800ca5c:	d9c0      	bls.n	800c9e0 <HeaderDraw+0xcc>
		  buff[18] = 0;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	77bb      	strb	r3, [r7, #30]
		  GFX_DrawString(11, 0, buff, WHITE, 0);
 800ca62:	f107 020c 	add.w	r2, r7, #12
 800ca66:	2300      	movs	r3, #0
 800ca68:	9300      	str	r3, [sp, #0]
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	2100      	movs	r1, #0
 800ca6e:	200b      	movs	r0, #11
 800ca70:	f7fc fdf0 	bl	8009654 <GFX_DrawString>
}
 800ca74:	bf00      	nop
 800ca76:	3728      	adds	r7, #40	; 0x28
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	0801e9ec 	.word	0x0801e9ec

0800ca80 <MenuNext>:

void MenuNext(void)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	af00      	add	r7, sp, #0
	if(CurrentPointer->next)
 800ca84:	4b1b      	ldr	r3, [pc, #108]	; (800caf4 <MenuNext+0x74>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d018      	beq.n	800cac0 <MenuNext+0x40>
	{
		CurrentPointer = CurrentPointer->next;
 800ca8e:	4b19      	ldr	r3, [pc, #100]	; (800caf4 <MenuNext+0x74>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	4a17      	ldr	r2, [pc, #92]	; (800caf4 <MenuNext+0x74>)
 800ca96:	6013      	str	r3, [r2, #0]
		MenuIndex++;
 800ca98:	4b17      	ldr	r3, [pc, #92]	; (800caf8 <MenuNext+0x78>)
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	4b15      	ldr	r3, [pc, #84]	; (800caf8 <MenuNext+0x78>)
 800caa2:	701a      	strb	r2, [r3, #0]
		if(++OledRowPos > OLED_ROWS - 1)
 800caa4:	4b15      	ldr	r3, [pc, #84]	; (800cafc <MenuNext+0x7c>)
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	3301      	adds	r3, #1
 800caaa:	b2da      	uxtb	r2, r3
 800caac:	4b13      	ldr	r3, [pc, #76]	; (800cafc <MenuNext+0x7c>)
 800caae:	701a      	strb	r2, [r3, #0]
 800cab0:	4b12      	ldr	r3, [pc, #72]	; (800cafc <MenuNext+0x7c>)
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	2b02      	cmp	r3, #2
 800cab6:	d918      	bls.n	800caea <MenuNext+0x6a>
		{
			OledRowPos = OLED_ROWS - 1;
 800cab8:	4b10      	ldr	r3, [pc, #64]	; (800cafc <MenuNext+0x7c>)
 800caba:	2202      	movs	r2, #2
 800cabc:	701a      	strb	r2, [r3, #0]
 800cabe:	e014      	b.n	800caea <MenuNext+0x6a>
		}
	}
	else
	{
		MenuIndex = 0;
 800cac0:	4b0d      	ldr	r3, [pc, #52]	; (800caf8 <MenuNext+0x78>)
 800cac2:	2200      	movs	r2, #0
 800cac4:	701a      	strb	r2, [r3, #0]
		OledRowPos = 0;
 800cac6:	4b0d      	ldr	r3, [pc, #52]	; (800cafc <MenuNext+0x7c>)
 800cac8:	2200      	movs	r2, #0
 800caca:	701a      	strb	r2, [r3, #0]
		if(CurrentPointer->parent)
 800cacc:	4b09      	ldr	r3, [pc, #36]	; (800caf4 <MenuNext+0x74>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	691b      	ldr	r3, [r3, #16]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d006      	beq.n	800cae4 <MenuNext+0x64>
		{
			CurrentPointer = (CurrentPointer -> parent) -> child;
 800cad6:	4b07      	ldr	r3, [pc, #28]	; (800caf4 <MenuNext+0x74>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	691b      	ldr	r3, [r3, #16]
 800cadc:	68db      	ldr	r3, [r3, #12]
 800cade:	4a05      	ldr	r2, [pc, #20]	; (800caf4 <MenuNext+0x74>)
 800cae0:	6013      	str	r3, [r2, #0]
 800cae2:	e002      	b.n	800caea <MenuNext+0x6a>
		}
		else
		{
			CurrentPointer = &menu1;
 800cae4:	4b03      	ldr	r3, [pc, #12]	; (800caf4 <MenuNext+0x74>)
 800cae6:	4a06      	ldr	r2, [pc, #24]	; (800cb00 <MenuNext+0x80>)
 800cae8:	601a      	str	r2, [r3, #0]
		}
	}
	MenuRefresh();
 800caea:	f000 f907 	bl	800ccfc <MenuRefresh>
}
 800caee:	bf00      	nop
 800caf0:	bd80      	pop	{r7, pc}
 800caf2:	bf00      	nop
 800caf4:	20000004 	.word	0x20000004
 800caf8:	20001ead 	.word	0x20001ead
 800cafc:	20001eae 	.word	0x20001eae
 800cb00:	20000008 	.word	0x20000008

0800cb04 <MenuPrev>:

void MenuPrev(void)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	af00      	add	r7, sp, #0
	CurrentPointer = CurrentPointer -> prev;
 800cb08:	4b19      	ldr	r3, [pc, #100]	; (800cb70 <MenuPrev+0x6c>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	689b      	ldr	r3, [r3, #8]
 800cb0e:	4a18      	ldr	r2, [pc, #96]	; (800cb70 <MenuPrev+0x6c>)
 800cb10:	6013      	str	r3, [r2, #0]

	if(MenuIndex)
 800cb12:	4b18      	ldr	r3, [pc, #96]	; (800cb74 <MenuPrev+0x70>)
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d010      	beq.n	800cb3c <MenuPrev+0x38>
	{
		MenuIndex--;
 800cb1a:	4b16      	ldr	r3, [pc, #88]	; (800cb74 <MenuPrev+0x70>)
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	3b01      	subs	r3, #1
 800cb20:	b2da      	uxtb	r2, r3
 800cb22:	4b14      	ldr	r3, [pc, #80]	; (800cb74 <MenuPrev+0x70>)
 800cb24:	701a      	strb	r2, [r3, #0]
		if(OledRowPos > 0)
 800cb26:	4b14      	ldr	r3, [pc, #80]	; (800cb78 <MenuPrev+0x74>)
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d01b      	beq.n	800cb66 <MenuPrev+0x62>
		{
			OledRowPos--;
 800cb2e:	4b12      	ldr	r3, [pc, #72]	; (800cb78 <MenuPrev+0x74>)
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	3b01      	subs	r3, #1
 800cb34:	b2da      	uxtb	r2, r3
 800cb36:	4b10      	ldr	r3, [pc, #64]	; (800cb78 <MenuPrev+0x74>)
 800cb38:	701a      	strb	r2, [r3, #0]
 800cb3a:	e014      	b.n	800cb66 <MenuPrev+0x62>
		}
	}
	else
	{
		MenuIndex = MenuGetIndex(CurrentPointer);
 800cb3c:	4b0c      	ldr	r3, [pc, #48]	; (800cb70 <MenuPrev+0x6c>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4618      	mov	r0, r3
 800cb42:	f000 f899 	bl	800cc78 <MenuGetIndex>
 800cb46:	4603      	mov	r3, r0
 800cb48:	461a      	mov	r2, r3
 800cb4a:	4b0a      	ldr	r3, [pc, #40]	; (800cb74 <MenuPrev+0x70>)
 800cb4c:	701a      	strb	r2, [r3, #0]
		{
			if(MenuIndex >= OLED_ROWS)
 800cb4e:	4b09      	ldr	r3, [pc, #36]	; (800cb74 <MenuPrev+0x70>)
 800cb50:	781b      	ldrb	r3, [r3, #0]
 800cb52:	2b02      	cmp	r3, #2
 800cb54:	d903      	bls.n	800cb5e <MenuPrev+0x5a>
			{
				OledRowPos = OLED_ROWS - 1;
 800cb56:	4b08      	ldr	r3, [pc, #32]	; (800cb78 <MenuPrev+0x74>)
 800cb58:	2202      	movs	r2, #2
 800cb5a:	701a      	strb	r2, [r3, #0]
 800cb5c:	e003      	b.n	800cb66 <MenuPrev+0x62>
			}
			else
			{
				OledRowPos = MenuIndex;
 800cb5e:	4b05      	ldr	r3, [pc, #20]	; (800cb74 <MenuPrev+0x70>)
 800cb60:	781a      	ldrb	r2, [r3, #0]
 800cb62:	4b05      	ldr	r3, [pc, #20]	; (800cb78 <MenuPrev+0x74>)
 800cb64:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	MenuRefresh();
 800cb66:	f000 f8c9 	bl	800ccfc <MenuRefresh>
}
 800cb6a:	bf00      	nop
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	20000004 	.word	0x20000004
 800cb74:	20001ead 	.word	0x20001ead
 800cb78:	20001eae 	.word	0x20001eae

0800cb7c <MenuEnter>:

void MenuEnter(void)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b082      	sub	sp, #8
 800cb80:	af00      	add	r7, sp, #0
	uint8_t Back = 0;
 800cb82:	2300      	movs	r3, #0
 800cb84:	71fb      	strb	r3, [r7, #7]

	if(CurrentPointer->menu_function != NULL && CurrentPointer->menu_function !=MenuBack)
 800cb86:	4b21      	ldr	r3, [pc, #132]	; (800cc0c <MenuEnter+0x90>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	695b      	ldr	r3, [r3, #20]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d00a      	beq.n	800cba6 <MenuEnter+0x2a>
 800cb90:	4b1e      	ldr	r3, [pc, #120]	; (800cc0c <MenuEnter+0x90>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	695b      	ldr	r3, [r3, #20]
 800cb96:	4a1e      	ldr	r2, [pc, #120]	; (800cc10 <MenuEnter+0x94>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d004      	beq.n	800cba6 <MenuEnter+0x2a>
	{
		CurrentPointer -> menu_function();
 800cb9c:	4b1b      	ldr	r3, [pc, #108]	; (800cc0c <MenuEnter+0x90>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	695b      	ldr	r3, [r3, #20]
 800cba2:	4798      	blx	r3
 800cba4:	e00c      	b.n	800cbc0 <MenuEnter+0x44>
	}
	else if(CurrentPointer->menu_function != NULL && CurrentPointer->menu_function == MenuBack)
 800cba6:	4b19      	ldr	r3, [pc, #100]	; (800cc0c <MenuEnter+0x90>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	695b      	ldr	r3, [r3, #20]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d007      	beq.n	800cbc0 <MenuEnter+0x44>
 800cbb0:	4b16      	ldr	r3, [pc, #88]	; (800cc0c <MenuEnter+0x90>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	695b      	ldr	r3, [r3, #20]
 800cbb6:	4a16      	ldr	r2, [pc, #88]	; (800cc10 <MenuEnter+0x94>)
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d101      	bne.n	800cbc0 <MenuEnter+0x44>
	{
		Back = 1;
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	71fb      	strb	r3, [r7, #7]
	}

	if(CurrentPointer->child != NULL)
 800cbc0:	4b12      	ldr	r3, [pc, #72]	; (800cc0c <MenuEnter+0x90>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	68db      	ldr	r3, [r3, #12]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d015      	beq.n	800cbf6 <MenuEnter+0x7a>
	{

			OledRowPosLevel[MenuGetLevel(CurrentPointer)] = OledRowPos;
 800cbca:	4b10      	ldr	r3, [pc, #64]	; (800cc0c <MenuEnter+0x90>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f000 f876 	bl	800ccc0 <MenuGetLevel>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	4b0e      	ldr	r3, [pc, #56]	; (800cc14 <MenuEnter+0x98>)
 800cbda:	7819      	ldrb	r1, [r3, #0]
 800cbdc:	4b0e      	ldr	r3, [pc, #56]	; (800cc18 <MenuEnter+0x9c>)
 800cbde:	5499      	strb	r1, [r3, r2]

		MenuIndex = 0;
 800cbe0:	4b0e      	ldr	r3, [pc, #56]	; (800cc1c <MenuEnter+0xa0>)
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	701a      	strb	r2, [r3, #0]
		OledRowPos = 0;
 800cbe6:	4b0b      	ldr	r3, [pc, #44]	; (800cc14 <MenuEnter+0x98>)
 800cbe8:	2200      	movs	r2, #0
 800cbea:	701a      	strb	r2, [r3, #0]
		CurrentPointer = CurrentPointer -> child;
 800cbec:	4b07      	ldr	r3, [pc, #28]	; (800cc0c <MenuEnter+0x90>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	68db      	ldr	r3, [r3, #12]
 800cbf2:	4a06      	ldr	r2, [pc, #24]	; (800cc0c <MenuEnter+0x90>)
 800cbf4:	6013      	str	r3, [r2, #0]
	}

	if(Back == 1)
 800cbf6:	79fb      	ldrb	r3, [r7, #7]
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d101      	bne.n	800cc00 <MenuEnter+0x84>
	{
		MenuBack();
 800cbfc:	f000 f810 	bl	800cc20 <MenuBack>
	}

	MenuRefresh();
 800cc00:	f000 f87c 	bl	800ccfc <MenuRefresh>
}
 800cc04:	bf00      	nop
 800cc06:	3708      	adds	r7, #8
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	20000004 	.word	0x20000004
 800cc10:	0800cc21 	.word	0x0800cc21
 800cc14:	20001eae 	.word	0x20001eae
 800cc18:	20001eb0 	.word	0x20001eb0
 800cc1c:	20001ead 	.word	0x20001ead

0800cc20 <MenuBack>:

void MenuBack(void)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	af00      	add	r7, sp, #0
	if(CurrentPointer->parent != NULL)
 800cc24:	4b10      	ldr	r3, [pc, #64]	; (800cc68 <MenuBack+0x48>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	691b      	ldr	r3, [r3, #16]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d00f      	beq.n	800cc4e <MenuBack+0x2e>
	{
		CurrentPointer = CurrentPointer -> parent;
 800cc2e:	4b0e      	ldr	r3, [pc, #56]	; (800cc68 <MenuBack+0x48>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	691b      	ldr	r3, [r3, #16]
 800cc34:	4a0c      	ldr	r2, [pc, #48]	; (800cc68 <MenuBack+0x48>)
 800cc36:	6013      	str	r3, [r2, #0]
		OledRowPos = OledRowPosLevel[MenuGetLevel(CurrentPointer)];
 800cc38:	4b0b      	ldr	r3, [pc, #44]	; (800cc68 <MenuBack+0x48>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f000 f83f 	bl	800ccc0 <MenuGetLevel>
 800cc42:	4603      	mov	r3, r0
 800cc44:	461a      	mov	r2, r3
 800cc46:	4b09      	ldr	r3, [pc, #36]	; (800cc6c <MenuBack+0x4c>)
 800cc48:	5c9a      	ldrb	r2, [r3, r2]
 800cc4a:	4b09      	ldr	r3, [pc, #36]	; (800cc70 <MenuBack+0x50>)
 800cc4c:	701a      	strb	r2, [r3, #0]
	}

//	CurrentPointer = CurrentPointer -> parent;
	MenuIndex = MenuGetIndex(CurrentPointer);
 800cc4e:	4b06      	ldr	r3, [pc, #24]	; (800cc68 <MenuBack+0x48>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4618      	mov	r0, r3
 800cc54:	f000 f810 	bl	800cc78 <MenuGetIndex>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	4b05      	ldr	r3, [pc, #20]	; (800cc74 <MenuBack+0x54>)
 800cc5e:	701a      	strb	r2, [r3, #0]

	MenuRefresh();
 800cc60:	f000 f84c 	bl	800ccfc <MenuRefresh>
}
 800cc64:	bf00      	nop
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	20000004 	.word	0x20000004
 800cc6c:	20001eb0 	.word	0x20001eb0
 800cc70:	20001eae 	.word	0x20001eae
 800cc74:	20001ead 	.word	0x20001ead

0800cc78 <MenuGetIndex>:

static uint8_t MenuGetIndex(menu_t *menu)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b085      	sub	sp, #20
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
	menu_t *temp;
	uint8_t i = 0;
 800cc80:	2300      	movs	r3, #0
 800cc82:	72fb      	strb	r3, [r7, #11]

	if(menu->parent)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	691b      	ldr	r3, [r3, #16]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d004      	beq.n	800cc96 <MenuGetIndex+0x1e>
	{
		temp = (menu->parent) -> child;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	691b      	ldr	r3, [r3, #16]
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	60fb      	str	r3, [r7, #12]
 800cc94:	e008      	b.n	800cca8 <MenuGetIndex+0x30>
	}
	else
	{
		temp = &menu1;
 800cc96:	4b09      	ldr	r3, [pc, #36]	; (800ccbc <MenuGetIndex+0x44>)
 800cc98:	60fb      	str	r3, [r7, #12]
	}

	while(temp != menu)
 800cc9a:	e005      	b.n	800cca8 <MenuGetIndex+0x30>
	{
		temp = temp -> next;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	60fb      	str	r3, [r7, #12]
		i++;
 800cca2:	7afb      	ldrb	r3, [r7, #11]
 800cca4:	3301      	adds	r3, #1
 800cca6:	72fb      	strb	r3, [r7, #11]
	while(temp != menu)
 800cca8:	68fa      	ldr	r2, [r7, #12]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d1f5      	bne.n	800cc9c <MenuGetIndex+0x24>
	}

	return i;
 800ccb0:	7afb      	ldrb	r3, [r7, #11]
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3714      	adds	r7, #20
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bc80      	pop	{r7}
 800ccba:	4770      	bx	lr
 800ccbc:	20000008 	.word	0x20000008

0800ccc0 <MenuGetLevel>:

uint8_t MenuGetLevel(menu_t *menu)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b085      	sub	sp, #20
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
	menu_t *temp = menu;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	60fb      	str	r3, [r7, #12]
	uint8_t i = 0;
 800cccc:	2300      	movs	r3, #0
 800ccce:	72fb      	strb	r3, [r7, #11]

	if(menu->parent == NULL)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	691b      	ldr	r3, [r3, #16]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d107      	bne.n	800cce8 <MenuGetLevel+0x28>
	{
		return 0;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	e00a      	b.n	800ccf2 <MenuGetLevel+0x32>
	}

	while(temp->parent != NULL)
	{
		temp = temp -> parent;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	691b      	ldr	r3, [r3, #16]
 800cce0:	60fb      	str	r3, [r7, #12]
		i++;
 800cce2:	7afb      	ldrb	r3, [r7, #11]
 800cce4:	3301      	adds	r3, #1
 800cce6:	72fb      	strb	r3, [r7, #11]
	while(temp->parent != NULL)
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	691b      	ldr	r3, [r3, #16]
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d1f5      	bne.n	800ccdc <MenuGetLevel+0x1c>
	}
	return i;
 800ccf0:	7afb      	ldrb	r3, [r7, #11]
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	3714      	adds	r7, #20
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bc80      	pop	{r7}
 800ccfa:	4770      	bx	lr

0800ccfc <MenuRefresh>:

void MenuRefresh(void)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b084      	sub	sp, #16
 800cd00:	af02      	add	r7, sp, #8
	menu_t *temp;
	uint8_t i;

	if( CurrentPointer->parent == &sub_menu1_6 ||
 800cd02:	4b65      	ldr	r3, [pc, #404]	; (800ce98 <MenuRefresh+0x19c>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	691b      	ldr	r3, [r3, #16]
 800cd08:	4a64      	ldr	r2, [pc, #400]	; (800ce9c <MenuRefresh+0x1a0>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d011      	beq.n	800cd32 <MenuRefresh+0x36>
		CurrentPointer->parent == &sub_menu3_1_1 ||
 800cd0e:	4b62      	ldr	r3, [pc, #392]	; (800ce98 <MenuRefresh+0x19c>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	691b      	ldr	r3, [r3, #16]
	if( CurrentPointer->parent == &sub_menu1_6 ||
 800cd14:	4a62      	ldr	r2, [pc, #392]	; (800cea0 <MenuRefresh+0x1a4>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d00b      	beq.n	800cd32 <MenuRefresh+0x36>
		CurrentPointer->parent == &sub_menu3_2_1 ||
 800cd1a:	4b5f      	ldr	r3, [pc, #380]	; (800ce98 <MenuRefresh+0x19c>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	691b      	ldr	r3, [r3, #16]
		CurrentPointer->parent == &sub_menu3_1_1 ||
 800cd20:	4a60      	ldr	r2, [pc, #384]	; (800cea4 <MenuRefresh+0x1a8>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d005      	beq.n	800cd32 <MenuRefresh+0x36>
		CurrentPointer->parent == &sub_menu3_3)
 800cd26:	4b5c      	ldr	r3, [pc, #368]	; (800ce98 <MenuRefresh+0x19c>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	691b      	ldr	r3, [r3, #16]
		CurrentPointer->parent == &sub_menu3_2_1 ||
 800cd2c:	4a5e      	ldr	r2, [pc, #376]	; (800cea8 <MenuRefresh+0x1ac>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d101      	bne.n	800cd36 <MenuRefresh+0x3a>
	{
		MenuIndicatorRefresh();
 800cd32:	f000 fa59 	bl	800d1e8 <MenuIndicatorRefresh>
	}

	SSD1306_Clear(BLACK);
 800cd36:	2000      	movs	r0, #0
 800cd38:	f000 fe7c 	bl	800da34 <SSD1306_Clear>

	if(CurrentPointer->parent)
 800cd3c:	4b56      	ldr	r3, [pc, #344]	; (800ce98 <MenuRefresh+0x19c>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	691b      	ldr	r3, [r3, #16]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d00c      	beq.n	800cd60 <MenuRefresh+0x64>
	{
		temp = (CurrentPointer->parent) -> child;
 800cd46:	4b54      	ldr	r3, [pc, #336]	; (800ce98 <MenuRefresh+0x19c>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	691b      	ldr	r3, [r3, #16]
 800cd4c:	68db      	ldr	r3, [r3, #12]
 800cd4e:	607b      	str	r3, [r7, #4]
		HeaderDraw((CurrentPointer->parent) -> name);
 800cd50:	4b51      	ldr	r3, [pc, #324]	; (800ce98 <MenuRefresh+0x19c>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	691b      	ldr	r3, [r3, #16]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f7ff fddb 	bl	800c914 <HeaderDraw>
 800cd5e:	e004      	b.n	800cd6a <MenuRefresh+0x6e>
	}
	else
	{
		temp = &menu1;
 800cd60:	4b52      	ldr	r3, [pc, #328]	; (800ceac <MenuRefresh+0x1b0>)
 800cd62:	607b      	str	r3, [r7, #4]
		HeaderDraw("Menu");
 800cd64:	4852      	ldr	r0, [pc, #328]	; (800ceb0 <MenuRefresh+0x1b4>)
 800cd66:	f7ff fdd5 	bl	800c914 <HeaderDraw>
	}

	for(i=0; i!=MenuIndex - OledRowPos; i++)
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	70fb      	strb	r3, [r7, #3]
 800cd6e:	e009      	b.n	800cd84 <MenuRefresh+0x88>
	{
		if(temp -> next == NULL) break; // Hard fault protection
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d00f      	beq.n	800cd98 <MenuRefresh+0x9c>

		temp = temp -> next;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	607b      	str	r3, [r7, #4]
	for(i=0; i!=MenuIndex - OledRowPos; i++)
 800cd7e:	78fb      	ldrb	r3, [r7, #3]
 800cd80:	3301      	adds	r3, #1
 800cd82:	70fb      	strb	r3, [r7, #3]
 800cd84:	78fa      	ldrb	r2, [r7, #3]
 800cd86:	4b4b      	ldr	r3, [pc, #300]	; (800ceb4 <MenuRefresh+0x1b8>)
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	4b4a      	ldr	r3, [pc, #296]	; (800ceb8 <MenuRefresh+0x1bc>)
 800cd8e:	781b      	ldrb	r3, [r3, #0]
 800cd90:	1acb      	subs	r3, r1, r3
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d1ec      	bne.n	800cd70 <MenuRefresh+0x74>
 800cd96:	e000      	b.n	800cd9a <MenuRefresh+0x9e>
		if(temp -> next == NULL) break; // Hard fault protection
 800cd98:	bf00      	nop
	}

	GFX_SetFont(font_8x5);
 800cd9a:	4848      	ldr	r0, [pc, #288]	; (800cebc <MenuRefresh+0x1c0>)
 800cd9c:	f7fc fb80 	bl	80094a0 <GFX_SetFont>
	GFX_SetFontSize(2);
 800cda0:	2002      	movs	r0, #2
 800cda2:	f7fc fb8b 	bl	80094bc <GFX_SetFontSize>
	for(i=0; i<OLED_ROWS; i++)
 800cda6:	2300      	movs	r3, #0
 800cda8:	70fb      	strb	r3, [r7, #3]
 800cdaa:	e06c      	b.n	800ce86 <MenuRefresh+0x18a>
	{
		if(temp == CurrentPointer)
 800cdac:	4b3a      	ldr	r3, [pc, #232]	; (800ce98 <MenuRefresh+0x19c>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d14a      	bne.n	800ce4c <MenuRefresh+0x150>
		{
//			GFX_DrawFillRectangle(5, (i*20) + OLED_MENU_Y_OFFSET, 123, 16, WHITE);
//			GFX_DrawFillCircle(10, (i*20) + OLED_MENU_Y_OFFSET + 8, 4, BLACK);
//			GFX_DrawString(20, (i*20) + OLED_MENU_Y_OFFSET + 1, temp->name, BLACK, 1);

			TempStr = temp->name;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a41      	ldr	r2, [pc, #260]	; (800cec0 <MenuRefresh+0x1c4>)
 800cdbc:	6013      	str	r3, [r2, #0]
			uint8_t TempStrLength = strlen(TempStr);
 800cdbe:	4b40      	ldr	r3, [pc, #256]	; (800cec0 <MenuRefresh+0x1c4>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f7fb fa30 	bl	8008228 <strlen>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	70bb      	strb	r3, [r7, #2]
			TempStrLengthVar = -(TempStrLength * 5);
 800cdcc:	78bb      	ldrb	r3, [r7, #2]
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	0392      	lsls	r2, r2, #14
 800cdd4:	1ad2      	subs	r2, r2, r3
 800cdd6:	0092      	lsls	r2, r2, #2
 800cdd8:	1ad3      	subs	r3, r2, r3
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	b21a      	sxth	r2, r3
 800cdde:	4b39      	ldr	r3, [pc, #228]	; (800cec4 <MenuRefresh+0x1c8>)
 800cde0:	801a      	strh	r2, [r3, #0]
			TempId = i;
 800cde2:	4a39      	ldr	r2, [pc, #228]	; (800cec8 <MenuRefresh+0x1cc>)
 800cde4:	78fb      	ldrb	r3, [r7, #3]
 800cde6:	7013      	strb	r3, [r2, #0]

			if(TempStrLength >= 10)
 800cde8:	78bb      	ldrb	r3, [r7, #2]
 800cdea:	2b09      	cmp	r3, #9
 800cdec:	d908      	bls.n	800ce00 <MenuRefresh+0x104>
			{
				ScrollEn = 1;
 800cdee:	4b37      	ldr	r3, [pc, #220]	; (800cecc <MenuRefresh+0x1d0>)
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	701a      	strb	r2, [r3, #0]
				ScrollFirst =1;
 800cdf4:	4b36      	ldr	r3, [pc, #216]	; (800ced0 <MenuRefresh+0x1d4>)
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	701a      	strb	r2, [r3, #0]
				ScrollString();
 800cdfa:	f000 f86b 	bl	800ced4 <ScrollString>
 800cdfe:	e039      	b.n	800ce74 <MenuRefresh+0x178>
			}
			else
			{
				ScrollEn = 0;
 800ce00:	4b32      	ldr	r3, [pc, #200]	; (800cecc <MenuRefresh+0x1d0>)
 800ce02:	2200      	movs	r2, #0
 800ce04:	701a      	strb	r2, [r3, #0]
				GFX_DrawRectangle(17, ((i*OLED_MENU_Y_SPACE)-1) + OLED_MENU_Y_OFFSET, 111, 18, WHITE);
 800ce06:	78fa      	ldrb	r2, [r7, #3]
 800ce08:	4613      	mov	r3, r2
 800ce0a:	00db      	lsls	r3, r3, #3
 800ce0c:	4413      	add	r3, r2
 800ce0e:	005b      	lsls	r3, r3, #1
 800ce10:	f103 0108 	add.w	r1, r3, #8
 800ce14:	2301      	movs	r3, #1
 800ce16:	9300      	str	r3, [sp, #0]
 800ce18:	2312      	movs	r3, #18
 800ce1a:	226f      	movs	r2, #111	; 0x6f
 800ce1c:	2011      	movs	r0, #17
 800ce1e:	f7fc fd31 	bl	8009884 <GFX_DrawRectangle>
//				GFX_DrawFillCircle(10, (i*20) + OLED_MENU_Y_OFFSET + 8, 4, BLACK);
//				GFX_DrawChar(5, (i*20) + OLED_MENU_Y_OFFSET + 1, '>', BLACK, 1);
				StateIndicator(temp, i);
 800ce22:	78fb      	ldrb	r3, [r7, #3]
 800ce24:	4619      	mov	r1, r3
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f000 f91c 	bl	800d064 <StateIndicator>
				GFX_DrawString(20, (i*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, temp->name, WHITE, 1);
 800ce2c:	78fa      	ldrb	r2, [r7, #3]
 800ce2e:	4613      	mov	r3, r2
 800ce30:	00db      	lsls	r3, r3, #3
 800ce32:	4413      	add	r3, r2
 800ce34:	005b      	lsls	r3, r3, #1
 800ce36:	f103 010a 	add.w	r1, r3, #10
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681a      	ldr	r2, [r3, #0]
 800ce3e:	2301      	movs	r3, #1
 800ce40:	9300      	str	r3, [sp, #0]
 800ce42:	2301      	movs	r3, #1
 800ce44:	2014      	movs	r0, #20
 800ce46:	f7fc fc05 	bl	8009654 <GFX_DrawString>
 800ce4a:	e013      	b.n	800ce74 <MenuRefresh+0x178>

		}
		else
		{
//			GFX_DrawChar(5, (i*20) + OLED_MENU_Y_OFFSET + 1, '>', WHITE, 0);
			StateIndicator(temp, i);
 800ce4c:	78fb      	ldrb	r3, [r7, #3]
 800ce4e:	4619      	mov	r1, r3
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f000 f907 	bl	800d064 <StateIndicator>
			GFX_DrawString(20, (i*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET, temp->name, WHITE, 0);
 800ce56:	78fa      	ldrb	r2, [r7, #3]
 800ce58:	4613      	mov	r3, r2
 800ce5a:	00db      	lsls	r3, r3, #3
 800ce5c:	4413      	add	r3, r2
 800ce5e:	005b      	lsls	r3, r3, #1
 800ce60:	f103 0109 	add.w	r1, r3, #9
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681a      	ldr	r2, [r3, #0]
 800ce68:	2300      	movs	r3, #0
 800ce6a:	9300      	str	r3, [sp, #0]
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	2014      	movs	r0, #20
 800ce70:	f7fc fbf0 	bl	8009654 <GFX_DrawString>
		}

		temp = temp -> next;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	607b      	str	r3, [r7, #4]
		if(!temp) break;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d006      	beq.n	800ce8e <MenuRefresh+0x192>
	for(i=0; i<OLED_ROWS; i++)
 800ce80:	78fb      	ldrb	r3, [r7, #3]
 800ce82:	3301      	adds	r3, #1
 800ce84:	70fb      	strb	r3, [r7, #3]
 800ce86:	78fb      	ldrb	r3, [r7, #3]
 800ce88:	2b02      	cmp	r3, #2
 800ce8a:	d98f      	bls.n	800cdac <MenuRefresh+0xb0>
	}
}
 800ce8c:	e000      	b.n	800ce90 <MenuRefresh+0x194>
		if(!temp) break;
 800ce8e:	bf00      	nop
}
 800ce90:	bf00      	nop
 800ce92:	3708      	adds	r7, #8
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}
 800ce98:	20000004 	.word	0x20000004
 800ce9c:	200000b0 	.word	0x200000b0
 800cea0:	20000318 	.word	0x20000318
 800cea4:	20000414 	.word	0x20000414
 800cea8:	200004f4 	.word	0x200004f4
 800ceac:	20000008 	.word	0x20000008
 800ceb0:	0801e99c 	.word	0x0801e99c
 800ceb4:	20001ead 	.word	0x20001ead
 800ceb8:	20001eae 	.word	0x20001eae
 800cebc:	0801e9ec 	.word	0x0801e9ec
 800cec0:	20001eb8 	.word	0x20001eb8
 800cec4:	20001eb6 	.word	0x20001eb6
 800cec8:	20001ebc 	.word	0x20001ebc
 800cecc:	20001ebd 	.word	0x20001ebd
 800ced0:	20001ebe 	.word	0x20001ebe

0800ced4 <ScrollString>:

void ScrollString(void)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af02      	add	r7, sp, #8
	  static int16_t ScrollVar = 20;
	  static int16_t ScrollVar2 = 123;

	  static uint32_t OldTick = 0;

	  if(ScrollFirst)
 800ceda:	4b59      	ldr	r3, [pc, #356]	; (800d040 <ScrollString+0x16c>)
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00d      	beq.n	800cefe <ScrollString+0x2a>
	  {
		  ScrollFirst = 0;
 800cee2:	4b57      	ldr	r3, [pc, #348]	; (800d040 <ScrollString+0x16c>)
 800cee4:	2200      	movs	r2, #0
 800cee6:	701a      	strb	r2, [r3, #0]
		  ScrollVar = 20;
 800cee8:	4b56      	ldr	r3, [pc, #344]	; (800d044 <ScrollString+0x170>)
 800ceea:	2214      	movs	r2, #20
 800ceec:	801a      	strh	r2, [r3, #0]
		  ScrollVar2 = 123;
 800ceee:	4b56      	ldr	r3, [pc, #344]	; (800d048 <ScrollString+0x174>)
 800cef0:	227b      	movs	r2, #123	; 0x7b
 800cef2:	801a      	strh	r2, [r3, #0]
		  OldTick = HAL_GetTick();
 800cef4:	f001 fc5a 	bl	800e7ac <HAL_GetTick>
 800cef8:	4603      	mov	r3, r0
 800cefa:	4a54      	ldr	r2, [pc, #336]	; (800d04c <ScrollString+0x178>)
 800cefc:	6013      	str	r3, [r2, #0]
	  }

	  if(ScrollEn)
 800cefe:	4b54      	ldr	r3, [pc, #336]	; (800d050 <ScrollString+0x17c>)
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	f000 8098 	beq.w	800d038 <ScrollString+0x164>
	  {

	  int16_t var = TempStrLengthVar;
 800cf08:	4b52      	ldr	r3, [pc, #328]	; (800d054 <ScrollString+0x180>)
 800cf0a:	881b      	ldrh	r3, [r3, #0]
 800cf0c:	80fb      	strh	r3, [r7, #6]

	  	GFX_DrawFillRectangle(0, ((TempId*OLED_MENU_Y_SPACE)-1) + OLED_MENU_Y_OFFSET, 128, 18, BLACK);
 800cf0e:	4b52      	ldr	r3, [pc, #328]	; (800d058 <ScrollString+0x184>)
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	461a      	mov	r2, r3
 800cf14:	4613      	mov	r3, r2
 800cf16:	00db      	lsls	r3, r3, #3
 800cf18:	4413      	add	r3, r2
 800cf1a:	005b      	lsls	r3, r3, #1
 800cf1c:	f103 0108 	add.w	r1, r3, #8
 800cf20:	2300      	movs	r3, #0
 800cf22:	9300      	str	r3, [sp, #0]
 800cf24:	2312      	movs	r3, #18
 800cf26:	2280      	movs	r2, #128	; 0x80
 800cf28:	2000      	movs	r0, #0
 800cf2a:	f7fc fcd8 	bl	80098de <GFX_DrawFillRectangle>
		if(ScrollVar>var-75)
 800cf2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cf32:	3b4a      	subs	r3, #74	; 0x4a
 800cf34:	4a43      	ldr	r2, [pc, #268]	; (800d044 <ScrollString+0x170>)
 800cf36:	f9b2 2000 	ldrsh.w	r2, [r2]
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	dc13      	bgt.n	800cf66 <ScrollString+0x92>
		{
		GFX_DrawString(ScrollVar, (TempId*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, TempStr, WHITE, 1);
 800cf3e:	4b41      	ldr	r3, [pc, #260]	; (800d044 <ScrollString+0x170>)
 800cf40:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cf44:	4618      	mov	r0, r3
 800cf46:	4b44      	ldr	r3, [pc, #272]	; (800d058 <ScrollString+0x184>)
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	4613      	mov	r3, r2
 800cf4e:	00db      	lsls	r3, r3, #3
 800cf50:	4413      	add	r3, r2
 800cf52:	005b      	lsls	r3, r3, #1
 800cf54:	f103 010a 	add.w	r1, r3, #10
 800cf58:	4b40      	ldr	r3, [pc, #256]	; (800d05c <ScrollString+0x188>)
 800cf5a:	681a      	ldr	r2, [r3, #0]
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	9300      	str	r3, [sp, #0]
 800cf60:	2301      	movs	r3, #1
 800cf62:	f7fc fb77 	bl	8009654 <GFX_DrawString>
		}

		GFX_DrawFillRectangle(0, ((TempId*OLED_MENU_Y_SPACE)-1) + OLED_MENU_Y_OFFSET, 17, 18, BLACK);
 800cf66:	4b3c      	ldr	r3, [pc, #240]	; (800d058 <ScrollString+0x184>)
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	4613      	mov	r3, r2
 800cf6e:	00db      	lsls	r3, r3, #3
 800cf70:	4413      	add	r3, r2
 800cf72:	005b      	lsls	r3, r3, #1
 800cf74:	f103 0108 	add.w	r1, r3, #8
 800cf78:	2300      	movs	r3, #0
 800cf7a:	9300      	str	r3, [sp, #0]
 800cf7c:	2312      	movs	r3, #18
 800cf7e:	2211      	movs	r2, #17
 800cf80:	2000      	movs	r0, #0
 800cf82:	f7fc fcac 	bl	80098de <GFX_DrawFillRectangle>
//		GFX_DrawFillCircle(10, (TempId*20) + OLED_MENU_Y_OFFSET + 8, 4, BLACK);
//		GFX_DrawChar(5, (TempId*20) + OLED_MENU_Y_OFFSET + 1, '>', BLACK, 1);
		StateIndicator(CurrentPointer, TempId);
 800cf86:	4b36      	ldr	r3, [pc, #216]	; (800d060 <ScrollString+0x18c>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4a33      	ldr	r2, [pc, #204]	; (800d058 <ScrollString+0x184>)
 800cf8c:	7812      	ldrb	r2, [r2, #0]
 800cf8e:	4611      	mov	r1, r2
 800cf90:	4618      	mov	r0, r3
 800cf92:	f000 f867 	bl	800d064 <StateIndicator>
		GFX_DrawRectangle(17, ((TempId*OLED_MENU_Y_SPACE)-1) + OLED_MENU_Y_OFFSET, 111, 18, WHITE);
 800cf96:	4b30      	ldr	r3, [pc, #192]	; (800d058 <ScrollString+0x184>)
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	461a      	mov	r2, r3
 800cf9c:	4613      	mov	r3, r2
 800cf9e:	00db      	lsls	r3, r3, #3
 800cfa0:	4413      	add	r3, r2
 800cfa2:	005b      	lsls	r3, r3, #1
 800cfa4:	f103 0108 	add.w	r1, r3, #8
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	9300      	str	r3, [sp, #0]
 800cfac:	2312      	movs	r3, #18
 800cfae:	226f      	movs	r2, #111	; 0x6f
 800cfb0:	2011      	movs	r0, #17
 800cfb2:	f7fc fc67 	bl	8009884 <GFX_DrawRectangle>

		if(HAL_GetTick() - OldTick >= SCROLL_FREEZE) ScrollVar--;
 800cfb6:	f001 fbf9 	bl	800e7ac <HAL_GetTick>
 800cfba:	4602      	mov	r2, r0
 800cfbc:	4b23      	ldr	r3, [pc, #140]	; (800d04c <ScrollString+0x178>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	1ad3      	subs	r3, r2, r3
 800cfc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cfc6:	d308      	bcc.n	800cfda <ScrollString+0x106>
 800cfc8:	4b1e      	ldr	r3, [pc, #120]	; (800d044 <ScrollString+0x170>)
 800cfca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfce:	b29b      	uxth	r3, r3
 800cfd0:	3b01      	subs	r3, #1
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	b21a      	sxth	r2, r3
 800cfd6:	4b1b      	ldr	r3, [pc, #108]	; (800d044 <ScrollString+0x170>)
 800cfd8:	801a      	strh	r2, [r3, #0]

		  if(ScrollVar < var)
 800cfda:	4b1a      	ldr	r3, [pc, #104]	; (800d044 <ScrollString+0x170>)
 800cfdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfe0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	dd27      	ble.n	800d038 <ScrollString+0x164>
		  {
			  GFX_DrawString(ScrollVar2, (TempId*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, TempStr, WHITE, 1);
 800cfe8:	4b17      	ldr	r3, [pc, #92]	; (800d048 <ScrollString+0x174>)
 800cfea:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cfee:	4618      	mov	r0, r3
 800cff0:	4b19      	ldr	r3, [pc, #100]	; (800d058 <ScrollString+0x184>)
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	461a      	mov	r2, r3
 800cff6:	4613      	mov	r3, r2
 800cff8:	00db      	lsls	r3, r3, #3
 800cffa:	4413      	add	r3, r2
 800cffc:	005b      	lsls	r3, r3, #1
 800cffe:	f103 010a 	add.w	r1, r3, #10
 800d002:	4b16      	ldr	r3, [pc, #88]	; (800d05c <ScrollString+0x188>)
 800d004:	681a      	ldr	r2, [r3, #0]
 800d006:	2301      	movs	r3, #1
 800d008:	9300      	str	r3, [sp, #0]
 800d00a:	2301      	movs	r3, #1
 800d00c:	f7fc fb22 	bl	8009654 <GFX_DrawString>
			  ScrollVar2--;
 800d010:	4b0d      	ldr	r3, [pc, #52]	; (800d048 <ScrollString+0x174>)
 800d012:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d016:	b29b      	uxth	r3, r3
 800d018:	3b01      	subs	r3, #1
 800d01a:	b29b      	uxth	r3, r3
 800d01c:	b21a      	sxth	r2, r3
 800d01e:	4b0a      	ldr	r3, [pc, #40]	; (800d048 <ScrollString+0x174>)
 800d020:	801a      	strh	r2, [r3, #0]
			  if(ScrollVar2 == 20)
 800d022:	4b09      	ldr	r3, [pc, #36]	; (800d048 <ScrollString+0x174>)
 800d024:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d028:	2b14      	cmp	r3, #20
 800d02a:	d105      	bne.n	800d038 <ScrollString+0x164>
			  {
				  ScrollVar = 20;
 800d02c:	4b05      	ldr	r3, [pc, #20]	; (800d044 <ScrollString+0x170>)
 800d02e:	2214      	movs	r2, #20
 800d030:	801a      	strh	r2, [r3, #0]
				  ScrollVar2 = 123;
 800d032:	4b05      	ldr	r3, [pc, #20]	; (800d048 <ScrollString+0x174>)
 800d034:	227b      	movs	r2, #123	; 0x7b
 800d036:	801a      	strh	r2, [r3, #0]
			  }
		  }

	  }

}
 800d038:	bf00      	nop
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}
 800d040:	20001ebe 	.word	0x20001ebe
 800d044:	20000628 	.word	0x20000628
 800d048:	2000062a 	.word	0x2000062a
 800d04c:	20001ec0 	.word	0x20001ec0
 800d050:	20001ebd 	.word	0x20001ebd
 800d054:	20001eb6 	.word	0x20001eb6
 800d058:	20001ebc 	.word	0x20001ebc
 800d05c:	20001eb8 	.word	0x20001eb8
 800d060:	20000004 	.word	0x20000004

0800d064 <StateIndicator>:

static void StateIndicator(menu_t *menu, uint8_t pos)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af02      	add	r7, sp, #8
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	460b      	mov	r3, r1
 800d06e:	70fb      	strb	r3, [r7, #3]
	if(menu == CurrentPointer)
 800d070:	4b5b      	ldr	r3, [pc, #364]	; (800d1e0 <StateIndicator+0x17c>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	429a      	cmp	r2, r3
 800d078:	d156      	bne.n	800d128 <StateIndicator+0xc4>
	{
		if(menu->menu_state == 0 && menu->name != BackStr)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d113      	bne.n	800d0ac <StateIndicator+0x48>
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a56      	ldr	r2, [pc, #344]	; (800d1e4 <StateIndicator+0x180>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d00e      	beq.n	800d0ac <StateIndicator+0x48>
		{
			GFX_DrawChar(5, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, '>', WHITE, 0);
 800d08e:	78fa      	ldrb	r2, [r7, #3]
 800d090:	4613      	mov	r3, r2
 800d092:	00db      	lsls	r3, r3, #3
 800d094:	4413      	add	r3, r2
 800d096:	005b      	lsls	r3, r3, #1
 800d098:	f103 010a 	add.w	r1, r3, #10
 800d09c:	2300      	movs	r3, #0
 800d09e:	9300      	str	r3, [sp, #0]
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	223e      	movs	r2, #62	; 0x3e
 800d0a4:	2005      	movs	r0, #5
 800d0a6:	f7fc fa1b 	bl	80094e0 <GFX_DrawChar>
 800d0aa:	e094      	b.n	800d1d6 <StateIndicator+0x172>
		}
		else if(menu->menu_state == 0 && menu->name == BackStr)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d113      	bne.n	800d0de <StateIndicator+0x7a>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4a4a      	ldr	r2, [pc, #296]	; (800d1e4 <StateIndicator+0x180>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d10e      	bne.n	800d0de <StateIndicator+0x7a>
		{
			GFX_DrawChar(5, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, '<', WHITE, 0);
 800d0c0:	78fa      	ldrb	r2, [r7, #3]
 800d0c2:	4613      	mov	r3, r2
 800d0c4:	00db      	lsls	r3, r3, #3
 800d0c6:	4413      	add	r3, r2
 800d0c8:	005b      	lsls	r3, r3, #1
 800d0ca:	f103 010a 	add.w	r1, r3, #10
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	9300      	str	r3, [sp, #0]
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	223c      	movs	r2, #60	; 0x3c
 800d0d6:	2005      	movs	r0, #5
 800d0d8:	f7fc fa02 	bl	80094e0 <GFX_DrawChar>
 800d0dc:	e07b      	b.n	800d1d6 <StateIndicator+0x172>
		}
		else if(menu->menu_state == 1)
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d10c      	bne.n	800d102 <StateIndicator+0x9e>
		{
			GFX_DrawFillCircle(10, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 8, 4, WHITE);
 800d0e8:	78fa      	ldrb	r2, [r7, #3]
 800d0ea:	4613      	mov	r3, r2
 800d0ec:	00db      	lsls	r3, r3, #3
 800d0ee:	4413      	add	r3, r2
 800d0f0:	005b      	lsls	r3, r3, #1
 800d0f2:	f103 0111 	add.w	r1, r3, #17
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	2204      	movs	r2, #4
 800d0fa:	200a      	movs	r0, #10
 800d0fc:	f7fc fdaf 	bl	8009c5e <GFX_DrawFillCircle>
		else if(menu->menu_state == -1)
		{
			GFX_DrawCircle(10, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 8, 4, WHITE);
		}
	}
}
 800d100:	e069      	b.n	800d1d6 <StateIndicator+0x172>
		else if(menu->menu_state == -1)
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800d108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d10c:	d163      	bne.n	800d1d6 <StateIndicator+0x172>
			GFX_DrawCircle(10, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 8, 4, WHITE);
 800d10e:	78fa      	ldrb	r2, [r7, #3]
 800d110:	4613      	mov	r3, r2
 800d112:	00db      	lsls	r3, r3, #3
 800d114:	4413      	add	r3, r2
 800d116:	005b      	lsls	r3, r3, #1
 800d118:	f103 0111 	add.w	r1, r3, #17
 800d11c:	2301      	movs	r3, #1
 800d11e:	2204      	movs	r2, #4
 800d120:	200a      	movs	r0, #10
 800d122:	f7fc fbff 	bl	8009924 <GFX_DrawCircle>
}
 800d126:	e056      	b.n	800d1d6 <StateIndicator+0x172>
		if(menu->menu_state == 0 && menu->name != BackStr)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d113      	bne.n	800d15a <StateIndicator+0xf6>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	4a2b      	ldr	r2, [pc, #172]	; (800d1e4 <StateIndicator+0x180>)
 800d138:	4293      	cmp	r3, r2
 800d13a:	d00e      	beq.n	800d15a <StateIndicator+0xf6>
			GFX_DrawChar(5, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, '>', WHITE, 0);
 800d13c:	78fa      	ldrb	r2, [r7, #3]
 800d13e:	4613      	mov	r3, r2
 800d140:	00db      	lsls	r3, r3, #3
 800d142:	4413      	add	r3, r2
 800d144:	005b      	lsls	r3, r3, #1
 800d146:	f103 010a 	add.w	r1, r3, #10
 800d14a:	2300      	movs	r3, #0
 800d14c:	9300      	str	r3, [sp, #0]
 800d14e:	2301      	movs	r3, #1
 800d150:	223e      	movs	r2, #62	; 0x3e
 800d152:	2005      	movs	r0, #5
 800d154:	f7fc f9c4 	bl	80094e0 <GFX_DrawChar>
 800d158:	e03d      	b.n	800d1d6 <StateIndicator+0x172>
		else if(menu->menu_state == 0 && menu->name == BackStr)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d113      	bne.n	800d18c <StateIndicator+0x128>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4a1e      	ldr	r2, [pc, #120]	; (800d1e4 <StateIndicator+0x180>)
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d10e      	bne.n	800d18c <StateIndicator+0x128>
			GFX_DrawChar(5, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, '<', WHITE, 0);
 800d16e:	78fa      	ldrb	r2, [r7, #3]
 800d170:	4613      	mov	r3, r2
 800d172:	00db      	lsls	r3, r3, #3
 800d174:	4413      	add	r3, r2
 800d176:	005b      	lsls	r3, r3, #1
 800d178:	f103 010a 	add.w	r1, r3, #10
 800d17c:	2300      	movs	r3, #0
 800d17e:	9300      	str	r3, [sp, #0]
 800d180:	2301      	movs	r3, #1
 800d182:	223c      	movs	r2, #60	; 0x3c
 800d184:	2005      	movs	r0, #5
 800d186:	f7fc f9ab 	bl	80094e0 <GFX_DrawChar>
 800d18a:	e024      	b.n	800d1d6 <StateIndicator+0x172>
		else if(menu->menu_state == 1)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800d192:	2b01      	cmp	r3, #1
 800d194:	d10c      	bne.n	800d1b0 <StateIndicator+0x14c>
			GFX_DrawFillCircle(10, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 8, 4, WHITE);
 800d196:	78fa      	ldrb	r2, [r7, #3]
 800d198:	4613      	mov	r3, r2
 800d19a:	00db      	lsls	r3, r3, #3
 800d19c:	4413      	add	r3, r2
 800d19e:	005b      	lsls	r3, r3, #1
 800d1a0:	f103 0111 	add.w	r1, r3, #17
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	2204      	movs	r2, #4
 800d1a8:	200a      	movs	r0, #10
 800d1aa:	f7fc fd58 	bl	8009c5e <GFX_DrawFillCircle>
}
 800d1ae:	e012      	b.n	800d1d6 <StateIndicator+0x172>
		else if(menu->menu_state == -1)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800d1b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ba:	d10c      	bne.n	800d1d6 <StateIndicator+0x172>
			GFX_DrawCircle(10, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 8, 4, WHITE);
 800d1bc:	78fa      	ldrb	r2, [r7, #3]
 800d1be:	4613      	mov	r3, r2
 800d1c0:	00db      	lsls	r3, r3, #3
 800d1c2:	4413      	add	r3, r2
 800d1c4:	005b      	lsls	r3, r3, #1
 800d1c6:	f103 0111 	add.w	r1, r3, #17
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	2204      	movs	r2, #4
 800d1ce:	200a      	movs	r0, #10
 800d1d0:	f7fc fba8 	bl	8009924 <GFX_DrawCircle>
}
 800d1d4:	e7ff      	b.n	800d1d6 <StateIndicator+0x172>
 800d1d6:	bf00      	nop
 800d1d8:	3708      	adds	r7, #8
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	20000004 	.word	0x20000004
 800d1e4:	0801ebd0 	.word	0x0801ebd0

0800d1e8 <MenuIndicatorRefresh>:
extern TIM_HandleTypeDef htim4;

extern enum PwmFreqency;

void MenuIndicatorRefresh(void)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	af00      	add	r7, sp, #0
	sub_menu1_6_1.menu_state =  ((GPIOE -> ODR >> 0)  & 1)? 1 : -1;
 800d1ec:	4ba4      	ldr	r3, [pc, #656]	; (800d480 <MenuIndicatorRefresh+0x298>)
 800d1ee:	68db      	ldr	r3, [r3, #12]
 800d1f0:	f003 0301 	and.w	r3, r3, #1
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d001      	beq.n	800d1fc <MenuIndicatorRefresh+0x14>
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	e001      	b.n	800d200 <MenuIndicatorRefresh+0x18>
 800d1fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d200:	4ba0      	ldr	r3, [pc, #640]	; (800d484 <MenuIndicatorRefresh+0x29c>)
 800d202:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_2.menu_state =  ((GPIOE -> ODR >> 1)  & 1)? 1 : -1;
 800d204:	4b9e      	ldr	r3, [pc, #632]	; (800d480 <MenuIndicatorRefresh+0x298>)
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	f003 0302 	and.w	r3, r3, #2
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d001      	beq.n	800d214 <MenuIndicatorRefresh+0x2c>
 800d210:	2201      	movs	r2, #1
 800d212:	e001      	b.n	800d218 <MenuIndicatorRefresh+0x30>
 800d214:	f04f 32ff 	mov.w	r2, #4294967295
 800d218:	4b9b      	ldr	r3, [pc, #620]	; (800d488 <MenuIndicatorRefresh+0x2a0>)
 800d21a:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_3.menu_state =  ((GPIOE -> ODR >> 2)  & 1)? 1 : -1;
 800d21c:	4b98      	ldr	r3, [pc, #608]	; (800d480 <MenuIndicatorRefresh+0x298>)
 800d21e:	68db      	ldr	r3, [r3, #12]
 800d220:	f003 0304 	and.w	r3, r3, #4
 800d224:	2b00      	cmp	r3, #0
 800d226:	d001      	beq.n	800d22c <MenuIndicatorRefresh+0x44>
 800d228:	2201      	movs	r2, #1
 800d22a:	e001      	b.n	800d230 <MenuIndicatorRefresh+0x48>
 800d22c:	f04f 32ff 	mov.w	r2, #4294967295
 800d230:	4b96      	ldr	r3, [pc, #600]	; (800d48c <MenuIndicatorRefresh+0x2a4>)
 800d232:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_4.menu_state =  ((GPIOE -> ODR >> 3)  & 1)? 1 : -1;
 800d234:	4b92      	ldr	r3, [pc, #584]	; (800d480 <MenuIndicatorRefresh+0x298>)
 800d236:	68db      	ldr	r3, [r3, #12]
 800d238:	f003 0308 	and.w	r3, r3, #8
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d001      	beq.n	800d244 <MenuIndicatorRefresh+0x5c>
 800d240:	2201      	movs	r2, #1
 800d242:	e001      	b.n	800d248 <MenuIndicatorRefresh+0x60>
 800d244:	f04f 32ff 	mov.w	r2, #4294967295
 800d248:	4b91      	ldr	r3, [pc, #580]	; (800d490 <MenuIndicatorRefresh+0x2a8>)
 800d24a:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_5.menu_state =  ((GPIOE -> ODR >> 4)  & 1)? 1 : -1;
 800d24c:	4b8c      	ldr	r3, [pc, #560]	; (800d480 <MenuIndicatorRefresh+0x298>)
 800d24e:	68db      	ldr	r3, [r3, #12]
 800d250:	f003 0310 	and.w	r3, r3, #16
 800d254:	2b00      	cmp	r3, #0
 800d256:	d001      	beq.n	800d25c <MenuIndicatorRefresh+0x74>
 800d258:	2201      	movs	r2, #1
 800d25a:	e001      	b.n	800d260 <MenuIndicatorRefresh+0x78>
 800d25c:	f04f 32ff 	mov.w	r2, #4294967295
 800d260:	4b8c      	ldr	r3, [pc, #560]	; (800d494 <MenuIndicatorRefresh+0x2ac>)
 800d262:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_6.menu_state =  ((GPIOE -> ODR >> 5)  & 1)? 1 : -1;
 800d264:	4b86      	ldr	r3, [pc, #536]	; (800d480 <MenuIndicatorRefresh+0x298>)
 800d266:	68db      	ldr	r3, [r3, #12]
 800d268:	f003 0320 	and.w	r3, r3, #32
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d001      	beq.n	800d274 <MenuIndicatorRefresh+0x8c>
 800d270:	2201      	movs	r2, #1
 800d272:	e001      	b.n	800d278 <MenuIndicatorRefresh+0x90>
 800d274:	f04f 32ff 	mov.w	r2, #4294967295
 800d278:	4b87      	ldr	r3, [pc, #540]	; (800d498 <MenuIndicatorRefresh+0x2b0>)
 800d27a:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_7.menu_state =  ((GPIOE -> ODR >> 6)  & 1)? 1 : -1;
 800d27c:	4b80      	ldr	r3, [pc, #512]	; (800d480 <MenuIndicatorRefresh+0x298>)
 800d27e:	68db      	ldr	r3, [r3, #12]
 800d280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d284:	2b00      	cmp	r3, #0
 800d286:	d001      	beq.n	800d28c <MenuIndicatorRefresh+0xa4>
 800d288:	2201      	movs	r2, #1
 800d28a:	e001      	b.n	800d290 <MenuIndicatorRefresh+0xa8>
 800d28c:	f04f 32ff 	mov.w	r2, #4294967295
 800d290:	4b82      	ldr	r3, [pc, #520]	; (800d49c <MenuIndicatorRefresh+0x2b4>)
 800d292:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_8.menu_state =  ((GPIOE -> ODR >> 7)  & 1)? 1 : -1;
 800d294:	4b7a      	ldr	r3, [pc, #488]	; (800d480 <MenuIndicatorRefresh+0x298>)
 800d296:	68db      	ldr	r3, [r3, #12]
 800d298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d001      	beq.n	800d2a4 <MenuIndicatorRefresh+0xbc>
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	e001      	b.n	800d2a8 <MenuIndicatorRefresh+0xc0>
 800d2a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d2a8:	4b7d      	ldr	r3, [pc, #500]	; (800d4a0 <MenuIndicatorRefresh+0x2b8>)
 800d2aa:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_9.menu_state =  ((GPIOE -> ODR >> 8)  & 1)? 1 : -1;
 800d2ac:	4b74      	ldr	r3, [pc, #464]	; (800d480 <MenuIndicatorRefresh+0x298>)
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d001      	beq.n	800d2bc <MenuIndicatorRefresh+0xd4>
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	e001      	b.n	800d2c0 <MenuIndicatorRefresh+0xd8>
 800d2bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d2c0:	4b78      	ldr	r3, [pc, #480]	; (800d4a4 <MenuIndicatorRefresh+0x2bc>)
 800d2c2:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_10.menu_state = ((GPIOE -> ODR >> 9)  & 1)? 1 : -1;
 800d2c4:	4b6e      	ldr	r3, [pc, #440]	; (800d480 <MenuIndicatorRefresh+0x298>)
 800d2c6:	68db      	ldr	r3, [r3, #12]
 800d2c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d001      	beq.n	800d2d4 <MenuIndicatorRefresh+0xec>
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	e001      	b.n	800d2d8 <MenuIndicatorRefresh+0xf0>
 800d2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d2d8:	4b73      	ldr	r3, [pc, #460]	; (800d4a8 <MenuIndicatorRefresh+0x2c0>)
 800d2da:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_11.menu_state = ((GPIOE -> ODR >> 10) & 1)? 1 : -1;
 800d2dc:	4b68      	ldr	r3, [pc, #416]	; (800d480 <MenuIndicatorRefresh+0x298>)
 800d2de:	68db      	ldr	r3, [r3, #12]
 800d2e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d001      	beq.n	800d2ec <MenuIndicatorRefresh+0x104>
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	e001      	b.n	800d2f0 <MenuIndicatorRefresh+0x108>
 800d2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800d2f0:	4b6e      	ldr	r3, [pc, #440]	; (800d4ac <MenuIndicatorRefresh+0x2c4>)
 800d2f2:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_12.menu_state = ((GPIOE -> ODR >> 11) & 1)? 1 : -1;
 800d2f4:	4b62      	ldr	r3, [pc, #392]	; (800d480 <MenuIndicatorRefresh+0x298>)
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d001      	beq.n	800d304 <MenuIndicatorRefresh+0x11c>
 800d300:	2201      	movs	r2, #1
 800d302:	e001      	b.n	800d308 <MenuIndicatorRefresh+0x120>
 800d304:	f04f 32ff 	mov.w	r2, #4294967295
 800d308:	4b69      	ldr	r3, [pc, #420]	; (800d4b0 <MenuIndicatorRefresh+0x2c8>)
 800d30a:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_13.menu_state = ((GPIOE -> ODR >> 12) & 1)? 1 : -1;
 800d30c:	4b5c      	ldr	r3, [pc, #368]	; (800d480 <MenuIndicatorRefresh+0x298>)
 800d30e:	68db      	ldr	r3, [r3, #12]
 800d310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d314:	2b00      	cmp	r3, #0
 800d316:	d001      	beq.n	800d31c <MenuIndicatorRefresh+0x134>
 800d318:	2201      	movs	r2, #1
 800d31a:	e001      	b.n	800d320 <MenuIndicatorRefresh+0x138>
 800d31c:	f04f 32ff 	mov.w	r2, #4294967295
 800d320:	4b64      	ldr	r3, [pc, #400]	; (800d4b4 <MenuIndicatorRefresh+0x2cc>)
 800d322:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_14.menu_state = ((GPIOE -> ODR >> 13) & 1)? 1 : -1;
 800d324:	4b56      	ldr	r3, [pc, #344]	; (800d480 <MenuIndicatorRefresh+0x298>)
 800d326:	68db      	ldr	r3, [r3, #12]
 800d328:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d001      	beq.n	800d334 <MenuIndicatorRefresh+0x14c>
 800d330:	2201      	movs	r2, #1
 800d332:	e001      	b.n	800d338 <MenuIndicatorRefresh+0x150>
 800d334:	f04f 32ff 	mov.w	r2, #4294967295
 800d338:	4b5f      	ldr	r3, [pc, #380]	; (800d4b8 <MenuIndicatorRefresh+0x2d0>)
 800d33a:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_15.menu_state = ((GPIOE -> ODR >> 14) & 1)? 1 : -1;
 800d33c:	4b50      	ldr	r3, [pc, #320]	; (800d480 <MenuIndicatorRefresh+0x298>)
 800d33e:	68db      	ldr	r3, [r3, #12]
 800d340:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d344:	2b00      	cmp	r3, #0
 800d346:	d001      	beq.n	800d34c <MenuIndicatorRefresh+0x164>
 800d348:	2201      	movs	r2, #1
 800d34a:	e001      	b.n	800d350 <MenuIndicatorRefresh+0x168>
 800d34c:	f04f 32ff 	mov.w	r2, #4294967295
 800d350:	4b5a      	ldr	r3, [pc, #360]	; (800d4bc <MenuIndicatorRefresh+0x2d4>)
 800d352:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_16.menu_state = ((GPIOE -> ODR >> 15) & 1)? 1 : -1;
 800d354:	4b4a      	ldr	r3, [pc, #296]	; (800d480 <MenuIndicatorRefresh+0x298>)
 800d356:	68db      	ldr	r3, [r3, #12]
 800d358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d001      	beq.n	800d364 <MenuIndicatorRefresh+0x17c>
 800d360:	2201      	movs	r2, #1
 800d362:	e001      	b.n	800d368 <MenuIndicatorRefresh+0x180>
 800d364:	f04f 32ff 	mov.w	r2, #4294967295
 800d368:	4b55      	ldr	r3, [pc, #340]	; (800d4c0 <MenuIndicatorRefresh+0x2d8>)
 800d36a:	761a      	strb	r2, [r3, #24]

	sub_menu3_1_1_1.menu_state = (Logo.Mode == 0)? 1 : -1;
 800d36c:	4b55      	ldr	r3, [pc, #340]	; (800d4c4 <MenuIndicatorRefresh+0x2dc>)
 800d36e:	f993 3000 	ldrsb.w	r3, [r3]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d101      	bne.n	800d37a <MenuIndicatorRefresh+0x192>
 800d376:	2201      	movs	r2, #1
 800d378:	e001      	b.n	800d37e <MenuIndicatorRefresh+0x196>
 800d37a:	f04f 32ff 	mov.w	r2, #4294967295
 800d37e:	4b52      	ldr	r3, [pc, #328]	; (800d4c8 <MenuIndicatorRefresh+0x2e0>)
 800d380:	761a      	strb	r2, [r3, #24]
	sub_menu3_1_1_2.menu_state = (Logo.Mode == 1)? 1 : -1;
 800d382:	4b50      	ldr	r3, [pc, #320]	; (800d4c4 <MenuIndicatorRefresh+0x2dc>)
 800d384:	f993 3000 	ldrsb.w	r3, [r3]
 800d388:	2b01      	cmp	r3, #1
 800d38a:	d101      	bne.n	800d390 <MenuIndicatorRefresh+0x1a8>
 800d38c:	2201      	movs	r2, #1
 800d38e:	e001      	b.n	800d394 <MenuIndicatorRefresh+0x1ac>
 800d390:	f04f 32ff 	mov.w	r2, #4294967295
 800d394:	4b4d      	ldr	r3, [pc, #308]	; (800d4cc <MenuIndicatorRefresh+0x2e4>)
 800d396:	761a      	strb	r2, [r3, #24]
	sub_menu3_1_1_3.menu_state = (Logo.Mode == 2)? 1 : -1;
 800d398:	4b4a      	ldr	r3, [pc, #296]	; (800d4c4 <MenuIndicatorRefresh+0x2dc>)
 800d39a:	f993 3000 	ldrsb.w	r3, [r3]
 800d39e:	2b02      	cmp	r3, #2
 800d3a0:	d101      	bne.n	800d3a6 <MenuIndicatorRefresh+0x1be>
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	e001      	b.n	800d3aa <MenuIndicatorRefresh+0x1c2>
 800d3a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d3aa:	4b49      	ldr	r3, [pc, #292]	; (800d4d0 <MenuIndicatorRefresh+0x2e8>)
 800d3ac:	761a      	strb	r2, [r3, #24]
	sub_menu3_1_1_4.menu_state = (Logo.Mode == 3)? 1 : -1;
 800d3ae:	4b45      	ldr	r3, [pc, #276]	; (800d4c4 <MenuIndicatorRefresh+0x2dc>)
 800d3b0:	f993 3000 	ldrsb.w	r3, [r3]
 800d3b4:	2b03      	cmp	r3, #3
 800d3b6:	d101      	bne.n	800d3bc <MenuIndicatorRefresh+0x1d4>
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	e001      	b.n	800d3c0 <MenuIndicatorRefresh+0x1d8>
 800d3bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d3c0:	4b44      	ldr	r3, [pc, #272]	; (800d4d4 <MenuIndicatorRefresh+0x2ec>)
 800d3c2:	761a      	strb	r2, [r3, #24]

	sub_menu3_2_1_1.menu_state = (Light.Mode == 0)? 1 : -1;
 800d3c4:	4b44      	ldr	r3, [pc, #272]	; (800d4d8 <MenuIndicatorRefresh+0x2f0>)
 800d3c6:	f993 3000 	ldrsb.w	r3, [r3]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d101      	bne.n	800d3d2 <MenuIndicatorRefresh+0x1ea>
 800d3ce:	2201      	movs	r2, #1
 800d3d0:	e001      	b.n	800d3d6 <MenuIndicatorRefresh+0x1ee>
 800d3d2:	f04f 32ff 	mov.w	r2, #4294967295
 800d3d6:	4b41      	ldr	r3, [pc, #260]	; (800d4dc <MenuIndicatorRefresh+0x2f4>)
 800d3d8:	761a      	strb	r2, [r3, #24]
	sub_menu3_2_1_2.menu_state = (Light.Mode == 1)? 1 : -1;
 800d3da:	4b3f      	ldr	r3, [pc, #252]	; (800d4d8 <MenuIndicatorRefresh+0x2f0>)
 800d3dc:	f993 3000 	ldrsb.w	r3, [r3]
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d101      	bne.n	800d3e8 <MenuIndicatorRefresh+0x200>
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	e001      	b.n	800d3ec <MenuIndicatorRefresh+0x204>
 800d3e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d3ec:	4b3c      	ldr	r3, [pc, #240]	; (800d4e0 <MenuIndicatorRefresh+0x2f8>)
 800d3ee:	761a      	strb	r2, [r3, #24]
	sub_menu3_2_1_3.menu_state = (Light.Mode == 2)? 1 : -1;
 800d3f0:	4b39      	ldr	r3, [pc, #228]	; (800d4d8 <MenuIndicatorRefresh+0x2f0>)
 800d3f2:	f993 3000 	ldrsb.w	r3, [r3]
 800d3f6:	2b02      	cmp	r3, #2
 800d3f8:	d101      	bne.n	800d3fe <MenuIndicatorRefresh+0x216>
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	e001      	b.n	800d402 <MenuIndicatorRefresh+0x21a>
 800d3fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d402:	4b38      	ldr	r3, [pc, #224]	; (800d4e4 <MenuIndicatorRefresh+0x2fc>)
 800d404:	761a      	strb	r2, [r3, #24]
	sub_menu3_2_1_4.menu_state = (Light.Mode == 3)? 1 : -1;
 800d406:	4b34      	ldr	r3, [pc, #208]	; (800d4d8 <MenuIndicatorRefresh+0x2f0>)
 800d408:	f993 3000 	ldrsb.w	r3, [r3]
 800d40c:	2b03      	cmp	r3, #3
 800d40e:	d101      	bne.n	800d414 <MenuIndicatorRefresh+0x22c>
 800d410:	2201      	movs	r2, #1
 800d412:	e001      	b.n	800d418 <MenuIndicatorRefresh+0x230>
 800d414:	f04f 32ff 	mov.w	r2, #4294967295
 800d418:	4b33      	ldr	r3, [pc, #204]	; (800d4e8 <MenuIndicatorRefresh+0x300>)
 800d41a:	761a      	strb	r2, [r3, #24]

	sub_menu3_3_1.menu_state = (htim4.Init.Prescaler ==  HZ60)? 1 : -1;
 800d41c:	4b33      	ldr	r3, [pc, #204]	; (800d4ec <MenuIndicatorRefresh+0x304>)
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	f240 42af 	movw	r2, #1199	; 0x4af
 800d424:	4293      	cmp	r3, r2
 800d426:	d101      	bne.n	800d42c <MenuIndicatorRefresh+0x244>
 800d428:	2201      	movs	r2, #1
 800d42a:	e001      	b.n	800d430 <MenuIndicatorRefresh+0x248>
 800d42c:	f04f 32ff 	mov.w	r2, #4294967295
 800d430:	4b2f      	ldr	r3, [pc, #188]	; (800d4f0 <MenuIndicatorRefresh+0x308>)
 800d432:	761a      	strb	r2, [r3, #24]
	sub_menu3_3_2.menu_state = (htim4.Init.Prescaler == HZ100)? 1 : -1;
 800d434:	4b2d      	ldr	r3, [pc, #180]	; (800d4ec <MenuIndicatorRefresh+0x304>)
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	f240 22cf 	movw	r2, #719	; 0x2cf
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d101      	bne.n	800d444 <MenuIndicatorRefresh+0x25c>
 800d440:	2201      	movs	r2, #1
 800d442:	e001      	b.n	800d448 <MenuIndicatorRefresh+0x260>
 800d444:	f04f 32ff 	mov.w	r2, #4294967295
 800d448:	4b2a      	ldr	r3, [pc, #168]	; (800d4f4 <MenuIndicatorRefresh+0x30c>)
 800d44a:	761a      	strb	r2, [r3, #24]
	sub_menu3_3_3.menu_state = (htim4.Init.Prescaler == HZ200)? 1 : -1;
 800d44c:	4b27      	ldr	r3, [pc, #156]	; (800d4ec <MenuIndicatorRefresh+0x304>)
 800d44e:	685b      	ldr	r3, [r3, #4]
 800d450:	f240 1267 	movw	r2, #359	; 0x167
 800d454:	4293      	cmp	r3, r2
 800d456:	d101      	bne.n	800d45c <MenuIndicatorRefresh+0x274>
 800d458:	2201      	movs	r2, #1
 800d45a:	e001      	b.n	800d460 <MenuIndicatorRefresh+0x278>
 800d45c:	f04f 32ff 	mov.w	r2, #4294967295
 800d460:	4b25      	ldr	r3, [pc, #148]	; (800d4f8 <MenuIndicatorRefresh+0x310>)
 800d462:	761a      	strb	r2, [r3, #24]
	sub_menu3_3_4.menu_state = (htim4.Init.Prescaler == HZ300)? 1 : -1;
 800d464:	4b21      	ldr	r3, [pc, #132]	; (800d4ec <MenuIndicatorRefresh+0x304>)
 800d466:	685b      	ldr	r3, [r3, #4]
 800d468:	2bef      	cmp	r3, #239	; 0xef
 800d46a:	d101      	bne.n	800d470 <MenuIndicatorRefresh+0x288>
 800d46c:	2201      	movs	r2, #1
 800d46e:	e001      	b.n	800d474 <MenuIndicatorRefresh+0x28c>
 800d470:	f04f 32ff 	mov.w	r2, #4294967295
 800d474:	4b21      	ldr	r3, [pc, #132]	; (800d4fc <MenuIndicatorRefresh+0x314>)
 800d476:	761a      	strb	r2, [r3, #24]
}
 800d478:	bf00      	nop
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bc80      	pop	{r7}
 800d47e:	4770      	bx	lr
 800d480:	40011800 	.word	0x40011800
 800d484:	200000cc 	.word	0x200000cc
 800d488:	200000e8 	.word	0x200000e8
 800d48c:	20000104 	.word	0x20000104
 800d490:	20000120 	.word	0x20000120
 800d494:	2000013c 	.word	0x2000013c
 800d498:	20000158 	.word	0x20000158
 800d49c:	20000174 	.word	0x20000174
 800d4a0:	20000190 	.word	0x20000190
 800d4a4:	200001ac 	.word	0x200001ac
 800d4a8:	200001c8 	.word	0x200001c8
 800d4ac:	200001e4 	.word	0x200001e4
 800d4b0:	20000200 	.word	0x20000200
 800d4b4:	2000021c 	.word	0x2000021c
 800d4b8:	20000238 	.word	0x20000238
 800d4bc:	20000254 	.word	0x20000254
 800d4c0:	20000270 	.word	0x20000270
 800d4c4:	20001e7c 	.word	0x20001e7c
 800d4c8:	20000334 	.word	0x20000334
 800d4cc:	20000350 	.word	0x20000350
 800d4d0:	2000036c 	.word	0x2000036c
 800d4d4:	20000388 	.word	0x20000388
 800d4d8:	20001e90 	.word	0x20001e90
 800d4dc:	20000430 	.word	0x20000430
 800d4e0:	2000044c 	.word	0x2000044c
 800d4e4:	20000468 	.word	0x20000468
 800d4e8:	20000484 	.word	0x20000484
 800d4ec:	20002758 	.word	0x20002758
 800d4f0:	20000510 	.word	0x20000510
 800d4f4:	2000052c 	.word	0x2000052c
 800d4f8:	20000548 	.word	0x20000548
 800d4fc:	20000564 	.word	0x20000564

0800d500 <SetOut0>:

void SetOut0(void)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	af00      	add	r7, sp, #0
	OutputPinToggle(0);
 800d504:	2000      	movs	r0, #0
 800d506:	f7fd fcd5 	bl	800aeb4 <OutputPinToggle>
}
 800d50a:	bf00      	nop
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <SetOut1>:

void SetOut1(void)
{
 800d50e:	b580      	push	{r7, lr}
 800d510:	af00      	add	r7, sp, #0
	OutputPinToggle(1);
 800d512:	2001      	movs	r0, #1
 800d514:	f7fd fcce 	bl	800aeb4 <OutputPinToggle>
}
 800d518:	bf00      	nop
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <SetOut2>:

void SetOut2(void)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	af00      	add	r7, sp, #0
	OutputPinToggle(2);
 800d520:	2002      	movs	r0, #2
 800d522:	f7fd fcc7 	bl	800aeb4 <OutputPinToggle>
}
 800d526:	bf00      	nop
 800d528:	bd80      	pop	{r7, pc}

0800d52a <SetOut3>:

void SetOut3(void)
{
 800d52a:	b580      	push	{r7, lr}
 800d52c:	af00      	add	r7, sp, #0
	OutputPinToggle(3);
 800d52e:	2003      	movs	r0, #3
 800d530:	f7fd fcc0 	bl	800aeb4 <OutputPinToggle>
}
 800d534:	bf00      	nop
 800d536:	bd80      	pop	{r7, pc}

0800d538 <SetOut4>:

void SetOut4(void)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	af00      	add	r7, sp, #0
	OutputPinToggle(4);
 800d53c:	2004      	movs	r0, #4
 800d53e:	f7fd fcb9 	bl	800aeb4 <OutputPinToggle>
}
 800d542:	bf00      	nop
 800d544:	bd80      	pop	{r7, pc}

0800d546 <SetOut5>:

void SetOut5(void)
{
 800d546:	b580      	push	{r7, lr}
 800d548:	af00      	add	r7, sp, #0
	OutputPinToggle(5);
 800d54a:	2005      	movs	r0, #5
 800d54c:	f7fd fcb2 	bl	800aeb4 <OutputPinToggle>
}
 800d550:	bf00      	nop
 800d552:	bd80      	pop	{r7, pc}

0800d554 <SetOut6>:

void SetOut6(void)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	af00      	add	r7, sp, #0
	OutputPinToggle(6);
 800d558:	2006      	movs	r0, #6
 800d55a:	f7fd fcab 	bl	800aeb4 <OutputPinToggle>
}
 800d55e:	bf00      	nop
 800d560:	bd80      	pop	{r7, pc}

0800d562 <SetOut7>:

void SetOut7(void)
{
 800d562:	b580      	push	{r7, lr}
 800d564:	af00      	add	r7, sp, #0
	OutputPinToggle(7);
 800d566:	2007      	movs	r0, #7
 800d568:	f7fd fca4 	bl	800aeb4 <OutputPinToggle>
}
 800d56c:	bf00      	nop
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <SetOut8>:

void SetOut8(void)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	af00      	add	r7, sp, #0
	OutputPinToggle(8);
 800d574:	2008      	movs	r0, #8
 800d576:	f7fd fc9d 	bl	800aeb4 <OutputPinToggle>
}
 800d57a:	bf00      	nop
 800d57c:	bd80      	pop	{r7, pc}

0800d57e <SetOut9>:

void SetOut9(void)
{
 800d57e:	b580      	push	{r7, lr}
 800d580:	af00      	add	r7, sp, #0
	OutputPinToggle(9);
 800d582:	2009      	movs	r0, #9
 800d584:	f7fd fc96 	bl	800aeb4 <OutputPinToggle>
}
 800d588:	bf00      	nop
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <SetOut10>:

void SetOut10(void)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	af00      	add	r7, sp, #0
	OutputPinToggle(10);
 800d590:	200a      	movs	r0, #10
 800d592:	f7fd fc8f 	bl	800aeb4 <OutputPinToggle>
}
 800d596:	bf00      	nop
 800d598:	bd80      	pop	{r7, pc}

0800d59a <SetOut11>:

void SetOut11(void)
{
 800d59a:	b580      	push	{r7, lr}
 800d59c:	af00      	add	r7, sp, #0
	OutputPinToggle(11);
 800d59e:	200b      	movs	r0, #11
 800d5a0:	f7fd fc88 	bl	800aeb4 <OutputPinToggle>
}
 800d5a4:	bf00      	nop
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <SetOut12>:

void SetOut12(void)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	af00      	add	r7, sp, #0
	OutputPinToggle(12);
 800d5ac:	200c      	movs	r0, #12
 800d5ae:	f7fd fc81 	bl	800aeb4 <OutputPinToggle>
}
 800d5b2:	bf00      	nop
 800d5b4:	bd80      	pop	{r7, pc}

0800d5b6 <SetOut13>:

void SetOut13(void)
{
 800d5b6:	b580      	push	{r7, lr}
 800d5b8:	af00      	add	r7, sp, #0
	OutputPinToggle(13);
 800d5ba:	200d      	movs	r0, #13
 800d5bc:	f7fd fc7a 	bl	800aeb4 <OutputPinToggle>
}
 800d5c0:	bf00      	nop
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <SetOut14>:

void SetOut14(void)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	af00      	add	r7, sp, #0
	OutputPinToggle(14);
 800d5c8:	200e      	movs	r0, #14
 800d5ca:	f7fd fc73 	bl	800aeb4 <OutputPinToggle>
}
 800d5ce:	bf00      	nop
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <SetOut15>:

void SetOut15(void)
{
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	af00      	add	r7, sp, #0
	OutputPinToggle(15);
 800d5d6:	200f      	movs	r0, #15
 800d5d8:	f7fd fc6c 	bl	800aeb4 <OutputPinToggle>
}
 800d5dc:	bf00      	nop
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <SetModeLogo0>:

void SetModeLogo0(void)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	af00      	add	r7, sp, #0
	LogoLedSetParameter(0, 0, 0);
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	2100      	movs	r1, #0
 800d5e8:	2000      	movs	r0, #0
 800d5ea:	f7fd fcdd 	bl	800afa8 <LogoLedSetParameter>
}
 800d5ee:	bf00      	nop
 800d5f0:	bd80      	pop	{r7, pc}

0800d5f2 <SetModeLogo1>:

void SetModeLogo1(void)
{
 800d5f2:	b580      	push	{r7, lr}
 800d5f4:	af00      	add	r7, sp, #0
	LogoLedSetParameter(1, 0, 0);
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	2100      	movs	r1, #0
 800d5fa:	2001      	movs	r0, #1
 800d5fc:	f7fd fcd4 	bl	800afa8 <LogoLedSetParameter>
}
 800d600:	bf00      	nop
 800d602:	bd80      	pop	{r7, pc}

0800d604 <SetModeLogo2>:

void SetModeLogo2(void)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	af00      	add	r7, sp, #0
	LogoLedSetParameter(2, 0, 0);
 800d608:	2200      	movs	r2, #0
 800d60a:	2100      	movs	r1, #0
 800d60c:	2002      	movs	r0, #2
 800d60e:	f7fd fccb 	bl	800afa8 <LogoLedSetParameter>
}
 800d612:	bf00      	nop
 800d614:	bd80      	pop	{r7, pc}

0800d616 <SetModeLogo3>:

void SetModeLogo3(void)
{
 800d616:	b580      	push	{r7, lr}
 800d618:	af00      	add	r7, sp, #0
	LogoLedSetParameter(3, 0, 0);
 800d61a:	2200      	movs	r2, #0
 800d61c:	2100      	movs	r1, #0
 800d61e:	2003      	movs	r0, #3
 800d620:	f7fd fcc2 	bl	800afa8 <LogoLedSetParameter>
}
 800d624:	bf00      	nop
 800d626:	bd80      	pop	{r7, pc}

0800d628 <SetModeLight0>:

void SetModeLight0(void)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	af00      	add	r7, sp, #0
	LightLedSetParameter(0, 0, 0);
 800d62c:	2200      	movs	r2, #0
 800d62e:	2100      	movs	r1, #0
 800d630:	2000      	movs	r0, #0
 800d632:	f7fd fcd9 	bl	800afe8 <LightLedSetParameter>
}
 800d636:	bf00      	nop
 800d638:	bd80      	pop	{r7, pc}

0800d63a <SetModeLight1>:
void SetModeLight1(void)
{
 800d63a:	b580      	push	{r7, lr}
 800d63c:	af00      	add	r7, sp, #0
	LightLedSetParameter(1, 0, 0);
 800d63e:	2200      	movs	r2, #0
 800d640:	2100      	movs	r1, #0
 800d642:	2001      	movs	r0, #1
 800d644:	f7fd fcd0 	bl	800afe8 <LightLedSetParameter>
}
 800d648:	bf00      	nop
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <SetModeLight2>:
void SetModeLight2(void)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	af00      	add	r7, sp, #0
	LightLedSetParameter(2, 0, 0);
 800d650:	2200      	movs	r2, #0
 800d652:	2100      	movs	r1, #0
 800d654:	2002      	movs	r0, #2
 800d656:	f7fd fcc7 	bl	800afe8 <LightLedSetParameter>
}
 800d65a:	bf00      	nop
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <SetModeLight3>:
void SetModeLight3(void)
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	af00      	add	r7, sp, #0
	LightLedSetParameter(3, 0, 0);
 800d662:	2200      	movs	r2, #0
 800d664:	2100      	movs	r1, #0
 800d666:	2003      	movs	r0, #3
 800d668:	f7fd fcbe 	bl	800afe8 <LightLedSetParameter>
}
 800d66c:	bf00      	nop
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <SetPwmFreq60>:

void SetPwmFreq60(void)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	af00      	add	r7, sp, #0
	PwmFreqSet(HZ60);
 800d674:	f240 40af 	movw	r0, #1199	; 0x4af
 800d678:	f7fd fbca 	bl	800ae10 <PwmFreqSet>
}
 800d67c:	bf00      	nop
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <SetPwmFreq100>:

void SetPwmFreq100(void)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	af00      	add	r7, sp, #0
	PwmFreqSet(HZ100);
 800d684:	f240 20cf 	movw	r0, #719	; 0x2cf
 800d688:	f7fd fbc2 	bl	800ae10 <PwmFreqSet>
}
 800d68c:	bf00      	nop
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <SetPwmFreq200>:

void SetPwmFreq200(void)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	af00      	add	r7, sp, #0
	PwmFreqSet(HZ200);
 800d694:	f240 1067 	movw	r0, #359	; 0x167
 800d698:	f7fd fbba 	bl	800ae10 <PwmFreqSet>
}
 800d69c:	bf00      	nop
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <SetPwmFreq300>:

void SetPwmFreq300(void)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	af00      	add	r7, sp, #0
	PwmFreqSet(HZ300);
 800d6a4:	20ef      	movs	r0, #239	; 0xef
 800d6a6:	f7fd fbb3 	bl	800ae10 <PwmFreqSet>
}
 800d6aa:	bf00      	nop
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <Parser_TakeLine>:
		{LOGO_PARAM, LogoLedSetParameter, 3},
		{BOOTLOADER_JUMP, BootloaderJump, 1}
};

void Parser_TakeLine(RingBuffer_t *Buff, uint8_t *Destination)
{
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b084      	sub	sp, #16
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
 800d6b6:	6039      	str	r1, [r7, #0]
	  uint8_t i = 0;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	73fb      	strb	r3, [r7, #15]
	  uint8_t tmp = 0;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	73bb      	strb	r3, [r7, #14]
	do
	{
		 Ring_Buffer_Read(Buff, &tmp);
 800d6c0:	f107 030e 	add.w	r3, r7, #14
 800d6c4:	4619      	mov	r1, r3
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 f882 	bl	800d7d0 <Ring_Buffer_Read>
		 if(tmp == ENDLINE)
 800d6cc:	7bbb      	ldrb	r3, [r7, #14]
 800d6ce:	2b5e      	cmp	r3, #94	; 0x5e
 800d6d0:	d105      	bne.n	800d6de <Parser_TakeLine+0x30>
			{
			 Destination[i] = 0;
 800d6d2:	7bfb      	ldrb	r3, [r7, #15]
 800d6d4:	683a      	ldr	r2, [r7, #0]
 800d6d6:	4413      	add	r3, r2
 800d6d8:	2200      	movs	r2, #0
 800d6da:	701a      	strb	r2, [r3, #0]
 800d6dc:	e004      	b.n	800d6e8 <Parser_TakeLine+0x3a>
			}
		else
			{
			Destination[i] = tmp;
 800d6de:	7bfb      	ldrb	r3, [r7, #15]
 800d6e0:	683a      	ldr	r2, [r7, #0]
 800d6e2:	4413      	add	r3, r2
 800d6e4:	7bba      	ldrb	r2, [r7, #14]
 800d6e6:	701a      	strb	r2, [r3, #0]
			}

			i++;
 800d6e8:	7bfb      	ldrb	r3, [r7, #15]
 800d6ea:	3301      	adds	r3, #1
 800d6ec:	73fb      	strb	r3, [r7, #15]

	} while(tmp != ENDLINE);
 800d6ee:	7bbb      	ldrb	r3, [r7, #14]
 800d6f0:	2b5e      	cmp	r3, #94	; 0x5e
 800d6f2:	d1e5      	bne.n	800d6c0 <Parser_TakeLine+0x12>
}
 800d6f4:	bf00      	nop
 800d6f6:	bf00      	nop
 800d6f8:	3710      	adds	r7, #16
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
	...

0800d700 <Parser_parse>:




void Parser_parse(uint8_t * DataToParse)
{
 800d700:	b590      	push	{r4, r7, lr}
 800d702:	b087      	sub	sp, #28
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
	char * ParsePointer = strtok((char*)DataToParse, "/");
 800d708:	492d      	ldr	r1, [pc, #180]	; (800d7c0 <Parser_parse+0xc0>)
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f00e fef0 	bl	801c4f0 <strtok>
 800d710:	6138      	str	r0, [r7, #16]
	uint8_t CommandID = atoi(ParsePointer);
 800d712:	6938      	ldr	r0, [r7, #16]
 800d714:	f00e f8e6 	bl	801b8e4 <atoi>
 800d718:	4603      	mov	r3, r0
 800d71a:	73fb      	strb	r3, [r7, #15]

	if(CommandMapper[CommandID].Action != NULL)
 800d71c:	7bfa      	ldrb	r2, [r7, #15]
 800d71e:	4929      	ldr	r1, [pc, #164]	; (800d7c4 <Parser_parse+0xc4>)
 800d720:	4613      	mov	r3, r2
 800d722:	005b      	lsls	r3, r3, #1
 800d724:	4413      	add	r3, r2
 800d726:	009b      	lsls	r3, r3, #2
 800d728:	440b      	add	r3, r1
 800d72a:	3304      	adds	r3, #4
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d041      	beq.n	800d7b6 <Parser_parse+0xb6>
	{
		for(uint8_t i = 0; i<CommandMapper[CommandID].CommandArgQ; i++)
 800d732:	2300      	movs	r3, #0
 800d734:	75fb      	strb	r3, [r7, #23]
 800d736:	e00f      	b.n	800d758 <Parser_parse+0x58>
		{
			char * ParsePointer = strtok(NULL, "/");
 800d738:	4921      	ldr	r1, [pc, #132]	; (800d7c0 <Parser_parse+0xc0>)
 800d73a:	2000      	movs	r0, #0
 800d73c:	f00e fed8 	bl	801c4f0 <strtok>
 800d740:	60b8      	str	r0, [r7, #8]
			ReceivedCommandArgument[i] = atoi(ParsePointer);
 800d742:	7dfc      	ldrb	r4, [r7, #23]
 800d744:	68b8      	ldr	r0, [r7, #8]
 800d746:	f00e f8cd 	bl	801b8e4 <atoi>
 800d74a:	4603      	mov	r3, r0
 800d74c:	4a1e      	ldr	r2, [pc, #120]	; (800d7c8 <Parser_parse+0xc8>)
 800d74e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		for(uint8_t i = 0; i<CommandMapper[CommandID].CommandArgQ; i++)
 800d752:	7dfb      	ldrb	r3, [r7, #23]
 800d754:	3301      	adds	r3, #1
 800d756:	75fb      	strb	r3, [r7, #23]
 800d758:	7bfa      	ldrb	r2, [r7, #15]
 800d75a:	491a      	ldr	r1, [pc, #104]	; (800d7c4 <Parser_parse+0xc4>)
 800d75c:	4613      	mov	r3, r2
 800d75e:	005b      	lsls	r3, r3, #1
 800d760:	4413      	add	r3, r2
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	440b      	add	r3, r1
 800d766:	3308      	adds	r3, #8
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	7dfa      	ldrb	r2, [r7, #23]
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d3e3      	bcc.n	800d738 <Parser_parse+0x38>
		}

 		CommandMapper[CommandID].Action(ReceivedCommandArgument[0], ReceivedCommandArgument[1], ReceivedCommandArgument[2], ReceivedCommandArgument[3]);
 800d770:	7bfa      	ldrb	r2, [r7, #15]
 800d772:	4914      	ldr	r1, [pc, #80]	; (800d7c4 <Parser_parse+0xc4>)
 800d774:	4613      	mov	r3, r2
 800d776:	005b      	lsls	r3, r3, #1
 800d778:	4413      	add	r3, r2
 800d77a:	009b      	lsls	r3, r3, #2
 800d77c:	440b      	add	r3, r1
 800d77e:	3304      	adds	r3, #4
 800d780:	681c      	ldr	r4, [r3, #0]
 800d782:	4b11      	ldr	r3, [pc, #68]	; (800d7c8 <Parser_parse+0xc8>)
 800d784:	6818      	ldr	r0, [r3, #0]
 800d786:	4b10      	ldr	r3, [pc, #64]	; (800d7c8 <Parser_parse+0xc8>)
 800d788:	6859      	ldr	r1, [r3, #4]
 800d78a:	4b0f      	ldr	r3, [pc, #60]	; (800d7c8 <Parser_parse+0xc8>)
 800d78c:	689a      	ldr	r2, [r3, #8]
 800d78e:	4b0e      	ldr	r3, [pc, #56]	; (800d7c8 <Parser_parse+0xc8>)
 800d790:	68db      	ldr	r3, [r3, #12]
 800d792:	47a0      	blx	r4

 		//Earising argument buffer
 		for(uint8_t i=0; i<ReceivedArgumentSize; i++)
 800d794:	2300      	movs	r3, #0
 800d796:	75bb      	strb	r3, [r7, #22]
 800d798:	e007      	b.n	800d7aa <Parser_parse+0xaa>
 		{
 			ReceivedCommandArgument[i] = 0;
 800d79a:	7dbb      	ldrb	r3, [r7, #22]
 800d79c:	4a0a      	ldr	r2, [pc, #40]	; (800d7c8 <Parser_parse+0xc8>)
 800d79e:	2100      	movs	r1, #0
 800d7a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 		for(uint8_t i=0; i<ReceivedArgumentSize; i++)
 800d7a4:	7dbb      	ldrb	r3, [r7, #22]
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	75bb      	strb	r3, [r7, #22]
 800d7aa:	7dbb      	ldrb	r3, [r7, #22]
 800d7ac:	2b0f      	cmp	r3, #15
 800d7ae:	d9f4      	bls.n	800d79a <Parser_parse+0x9a>
 		}
 		UsbBuffWrite("OK");
 800d7b0:	4806      	ldr	r0, [pc, #24]	; (800d7cc <Parser_parse+0xcc>)
 800d7b2:	f7fe fec7 	bl	800c544 <UsbBuffWrite>
	}
}
 800d7b6:	bf00      	nop
 800d7b8:	371c      	adds	r7, #28
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd90      	pop	{r4, r7, pc}
 800d7be:	bf00      	nop
 800d7c0:	0801e9a4 	.word	0x0801e9a4
 800d7c4:	2000062c 	.word	0x2000062c
 800d7c8:	20001ec4 	.word	0x20001ec4
 800d7cc:	0801e9a8 	.word	0x0801e9a8

0800d7d0 <Ring_Buffer_Read>:
 */
#include "main.h"
#include "ring_buffer.h"

RbStatus_t Ring_Buffer_Read(RingBuffer_t * Buff, uint8_t *value)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b083      	sub	sp, #12
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]
	if(Buff->Head == Buff->Tail)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	881a      	ldrh	r2, [r3, #0]
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	885b      	ldrh	r3, [r3, #2]
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	d101      	bne.n	800d7ea <Ring_Buffer_Read+0x1a>
	{
		return RB_ERROR;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	e015      	b.n	800d816 <Ring_Buffer_Read+0x46>
	}
	*value = Buff->Buffer[Buff->Tail];
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	885b      	ldrh	r3, [r3, #2]
 800d7ee:	461a      	mov	r2, r3
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	4413      	add	r3, r2
 800d7f4:	791a      	ldrb	r2, [r3, #4]
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	701a      	strb	r2, [r3, #0]

	Buff->Tail = (Buff->Tail + 1) % RING_BUFFER_SIZE;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	885b      	ldrh	r3, [r3, #2]
 800d7fe:	3301      	adds	r3, #1
 800d800:	425a      	negs	r2, r3
 800d802:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d806:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d80a:	bf58      	it	pl
 800d80c:	4253      	negpl	r3, r2
 800d80e:	b29a      	uxth	r2, r3
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	805a      	strh	r2, [r3, #2]

	return RB_OK;
 800d814:	2300      	movs	r3, #0
}
 800d816:	4618      	mov	r0, r3
 800d818:	370c      	adds	r7, #12
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bc80      	pop	{r7}
 800d81e:	4770      	bx	lr

0800d820 <Ring_Buffer_Write>:

RbStatus_t Ring_Buffer_Write(RingBuffer_t * Buff, uint8_t value)
{
 800d820:	b480      	push	{r7}
 800d822:	b085      	sub	sp, #20
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	460b      	mov	r3, r1
 800d82a:	70fb      	strb	r3, [r7, #3]
	uint16_t Head_tmp = (Buff->Head + 1) % RING_BUFFER_SIZE;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	881b      	ldrh	r3, [r3, #0]
 800d830:	3301      	adds	r3, #1
 800d832:	425a      	negs	r2, r3
 800d834:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d838:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d83c:	bf58      	it	pl
 800d83e:	4253      	negpl	r3, r2
 800d840:	81fb      	strh	r3, [r7, #14]

	if(Head_tmp == Buff->Tail)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	885b      	ldrh	r3, [r3, #2]
 800d846:	89fa      	ldrh	r2, [r7, #14]
 800d848:	429a      	cmp	r2, r3
 800d84a:	d101      	bne.n	800d850 <Ring_Buffer_Write+0x30>
	{
		return RB_ERROR;
 800d84c:	2301      	movs	r3, #1
 800d84e:	e00a      	b.n	800d866 <Ring_Buffer_Write+0x46>
	}
	Buff->Buffer[Buff->Head] = value;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	881b      	ldrh	r3, [r3, #0]
 800d854:	461a      	mov	r2, r3
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	4413      	add	r3, r2
 800d85a:	78fa      	ldrb	r2, [r7, #3]
 800d85c:	711a      	strb	r2, [r3, #4]
	Buff->Head = Head_tmp;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	89fa      	ldrh	r2, [r7, #14]
 800d862:	801a      	strh	r2, [r3, #0]

	return RB_OK;
 800d864:	2300      	movs	r3, #0
}
 800d866:	4618      	mov	r0, r3
 800d868:	3714      	adds	r7, #20
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bc80      	pop	{r7}
 800d86e:	4770      	bx	lr

0800d870 <Ring_Buffer_Flush>:

void Ring_Buffer_Flush(RingBuffer_t * Buff)
{
 800d870:	b480      	push	{r7}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
	Buff->Head = 0;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2200      	movs	r2, #0
 800d87c:	801a      	strh	r2, [r3, #0]
	Buff->Tail = 0;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2200      	movs	r2, #0
 800d882:	805a      	strh	r2, [r3, #2]
}
 800d884:	bf00      	nop
 800d886:	370c      	adds	r7, #12
 800d888:	46bd      	mov	sp, r7
 800d88a:	bc80      	pop	{r7}
 800d88c:	4770      	bx	lr
	...

0800d890 <SSD1306_Command>:

static uint8_t buffer[SSD1306_BUFFER_SIZE];
static uint8_t buffer_disp[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b086      	sub	sp, #24
 800d894:	af04      	add	r7, sp, #16
 800d896:	4603      	mov	r3, r0
 800d898:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 800d89a:	4b09      	ldr	r3, [pc, #36]	; (800d8c0 <SSD1306_Command+0x30>)
 800d89c:	6818      	ldr	r0, [r3, #0]
 800d89e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d8a2:	9302      	str	r3, [sp, #8]
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	9301      	str	r3, [sp, #4]
 800d8a8:	1dfb      	adds	r3, r7, #7
 800d8aa:	9300      	str	r3, [sp, #0]
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	2178      	movs	r1, #120	; 0x78
 800d8b2:	f002 ffd9 	bl	8010868 <HAL_I2C_Mem_Write>
}
 800d8b6:	bf00      	nop
 800d8b8:	3708      	adds	r7, #8
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	20001f04 	.word	0x20001f04

0800d8c4 <SSD1306_Data>:

static void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b084      	sub	sp, #16
 800d8c8:	af02      	add	r7, sp, #8
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	460b      	mov	r3, r1
 800d8ce:	807b      	strh	r3, [r7, #2]
#ifdef SSD1306_USE_DMA

	if(oled_i2c -> hdmatx -> State == HAL_DMA_STATE_READY)
 800d8d0:	4b0f      	ldr	r3, [pc, #60]	; (800d910 <SSD1306_Data+0x4c>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d112      	bne.n	800d906 <SSD1306_Data+0x42>
	{
		if(HAL_I2C_Mem_Write_DMA(oled_i2c, (SSD1306_ADRESS<<1), 0x40, 1, Data, Size) == HAL_ERROR)
 800d8e0:	4b0b      	ldr	r3, [pc, #44]	; (800d910 <SSD1306_Data+0x4c>)
 800d8e2:	6818      	ldr	r0, [r3, #0]
 800d8e4:	887b      	ldrh	r3, [r7, #2]
 800d8e6:	9301      	str	r3, [sp, #4]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	9300      	str	r3, [sp, #0]
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	2240      	movs	r2, #64	; 0x40
 800d8f0:	2178      	movs	r1, #120	; 0x78
 800d8f2:	f003 fb1b 	bl	8010f2c <HAL_I2C_Mem_Write_DMA>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	2b01      	cmp	r3, #1
 800d8fa:	d104      	bne.n	800d906 <SSD1306_Data+0x42>
		{
			ERROR_OLED;
 800d8fc:	4a05      	ldr	r2, [pc, #20]	; (800d914 <SSD1306_Data+0x50>)
 800d8fe:	7813      	ldrb	r3, [r2, #0]
 800d900:	f043 0302 	orr.w	r3, r3, #2
 800d904:	7013      	strb	r3, [r2, #0]
		}
	}
#else
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
#endif
}
 800d906:	bf00      	nop
 800d908:	3708      	adds	r7, #8
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	20001f04 	.word	0x20001f04
 800d914:	20001ea4 	.word	0x20001ea4

0800d918 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 800d918:	b480      	push	{r7}
 800d91a:	b083      	sub	sp, #12
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	4603      	mov	r3, r0
 800d920:	80fb      	strh	r3, [r7, #6]
 800d922:	460b      	mov	r3, r1
 800d924:	80bb      	strh	r3, [r7, #4]
 800d926:	4613      	mov	r3, r2
 800d928:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 800d92a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	db79      	blt.n	800da26 <SSD1306_DrawPixel+0x10e>
 800d932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d936:	2b7f      	cmp	r3, #127	; 0x7f
 800d938:	dc75      	bgt.n	800da26 <SSD1306_DrawPixel+0x10e>
 800d93a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	db71      	blt.n	800da26 <SSD1306_DrawPixel+0x10e>
 800d942:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d946:	2b3f      	cmp	r3, #63	; 0x3f
 800d948:	dc6d      	bgt.n	800da26 <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 800d94a:	78fb      	ldrb	r3, [r7, #3]
 800d94c:	2b02      	cmp	r3, #2
 800d94e:	d049      	beq.n	800d9e4 <SSD1306_DrawPixel+0xcc>
 800d950:	2b02      	cmp	r3, #2
 800d952:	dc69      	bgt.n	800da28 <SSD1306_DrawPixel+0x110>
 800d954:	2b00      	cmp	r3, #0
 800d956:	d022      	beq.n	800d99e <SSD1306_DrawPixel+0x86>
 800d958:	2b01      	cmp	r3, #1
 800d95a:	d165      	bne.n	800da28 <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 800d95c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d960:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d964:	2b00      	cmp	r3, #0
 800d966:	da00      	bge.n	800d96a <SSD1306_DrawPixel+0x52>
 800d968:	3307      	adds	r3, #7
 800d96a:	10db      	asrs	r3, r3, #3
 800d96c:	b218      	sxth	r0, r3
 800d96e:	4603      	mov	r3, r0
 800d970:	01db      	lsls	r3, r3, #7
 800d972:	4413      	add	r3, r2
 800d974:	4a2e      	ldr	r2, [pc, #184]	; (800da30 <SSD1306_DrawPixel+0x118>)
 800d976:	5cd3      	ldrb	r3, [r2, r3]
 800d978:	b25a      	sxtb	r2, r3
 800d97a:	88bb      	ldrh	r3, [r7, #4]
 800d97c:	f003 0307 	and.w	r3, r3, #7
 800d980:	2101      	movs	r1, #1
 800d982:	fa01 f303 	lsl.w	r3, r1, r3
 800d986:	b25b      	sxtb	r3, r3
 800d988:	4313      	orrs	r3, r2
 800d98a:	b259      	sxtb	r1, r3
 800d98c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d990:	4603      	mov	r3, r0
 800d992:	01db      	lsls	r3, r3, #7
 800d994:	4413      	add	r3, r2
 800d996:	b2c9      	uxtb	r1, r1
 800d998:	4a25      	ldr	r2, [pc, #148]	; (800da30 <SSD1306_DrawPixel+0x118>)
 800d99a:	54d1      	strb	r1, [r2, r3]
      break;
 800d99c:	e044      	b.n	800da28 <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 800d99e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d9a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	da00      	bge.n	800d9ac <SSD1306_DrawPixel+0x94>
 800d9aa:	3307      	adds	r3, #7
 800d9ac:	10db      	asrs	r3, r3, #3
 800d9ae:	b218      	sxth	r0, r3
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	01db      	lsls	r3, r3, #7
 800d9b4:	4413      	add	r3, r2
 800d9b6:	4a1e      	ldr	r2, [pc, #120]	; (800da30 <SSD1306_DrawPixel+0x118>)
 800d9b8:	5cd3      	ldrb	r3, [r2, r3]
 800d9ba:	b25a      	sxtb	r2, r3
 800d9bc:	88bb      	ldrh	r3, [r7, #4]
 800d9be:	f003 0307 	and.w	r3, r3, #7
 800d9c2:	2101      	movs	r1, #1
 800d9c4:	fa01 f303 	lsl.w	r3, r1, r3
 800d9c8:	b25b      	sxtb	r3, r3
 800d9ca:	43db      	mvns	r3, r3
 800d9cc:	b25b      	sxtb	r3, r3
 800d9ce:	4013      	ands	r3, r2
 800d9d0:	b259      	sxtb	r1, r3
 800d9d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	01db      	lsls	r3, r3, #7
 800d9da:	4413      	add	r3, r2
 800d9dc:	b2c9      	uxtb	r1, r1
 800d9de:	4a14      	ldr	r2, [pc, #80]	; (800da30 <SSD1306_DrawPixel+0x118>)
 800d9e0:	54d1      	strb	r1, [r2, r3]
      break;
 800d9e2:	e021      	b.n	800da28 <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 800d9e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d9e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	da00      	bge.n	800d9f2 <SSD1306_DrawPixel+0xda>
 800d9f0:	3307      	adds	r3, #7
 800d9f2:	10db      	asrs	r3, r3, #3
 800d9f4:	b218      	sxth	r0, r3
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	01db      	lsls	r3, r3, #7
 800d9fa:	4413      	add	r3, r2
 800d9fc:	4a0c      	ldr	r2, [pc, #48]	; (800da30 <SSD1306_DrawPixel+0x118>)
 800d9fe:	5cd3      	ldrb	r3, [r2, r3]
 800da00:	b25a      	sxtb	r2, r3
 800da02:	88bb      	ldrh	r3, [r7, #4]
 800da04:	f003 0307 	and.w	r3, r3, #7
 800da08:	2101      	movs	r1, #1
 800da0a:	fa01 f303 	lsl.w	r3, r1, r3
 800da0e:	b25b      	sxtb	r3, r3
 800da10:	4053      	eors	r3, r2
 800da12:	b259      	sxtb	r1, r3
 800da14:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800da18:	4603      	mov	r3, r0
 800da1a:	01db      	lsls	r3, r3, #7
 800da1c:	4413      	add	r3, r2
 800da1e:	b2c9      	uxtb	r1, r1
 800da20:	4a03      	ldr	r2, [pc, #12]	; (800da30 <SSD1306_DrawPixel+0x118>)
 800da22:	54d1      	strb	r1, [r2, r3]
      break;
 800da24:	e000      	b.n	800da28 <SSD1306_DrawPixel+0x110>
	  return;
 800da26:	bf00      	nop
    }
}
 800da28:	370c      	adds	r7, #12
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bc80      	pop	{r7}
 800da2e:	4770      	bx	lr
 800da30:	20001f0c 	.word	0x20001f0c

0800da34 <SSD1306_Clear>:


void SSD1306_Clear(uint8_t Color)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b082      	sub	sp, #8
 800da38:	af00      	add	r7, sp, #0
 800da3a:	4603      	mov	r3, r0
 800da3c:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 800da3e:	79fb      	ldrb	r3, [r7, #7]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d008      	beq.n	800da56 <SSD1306_Clear+0x22>
 800da44:	2b01      	cmp	r3, #1
 800da46:	d10d      	bne.n	800da64 <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xff, SSD1306_BUFFER_SIZE);
 800da48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800da4c:	21ff      	movs	r1, #255	; 0xff
 800da4e:	4807      	ldr	r0, [pc, #28]	; (800da6c <SSD1306_Clear+0x38>)
 800da50:	f00e fd45 	bl	801c4de <memset>
		break;
 800da54:	e006      	b.n	800da64 <SSD1306_Clear+0x30>
	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 800da56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800da5a:	2100      	movs	r1, #0
 800da5c:	4803      	ldr	r0, [pc, #12]	; (800da6c <SSD1306_Clear+0x38>)
 800da5e:	f00e fd3e 	bl	801c4de <memset>
		break;
 800da62:	bf00      	nop
	}
}
 800da64:	bf00      	nop
 800da66:	3708      	adds	r7, #8
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}
 800da6c:	20001f0c 	.word	0x20001f0c

0800da70 <SSD1306_Display>:

void SSD1306_Display(void)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_PAGEADDR);
 800da74:	2022      	movs	r0, #34	; 0x22
 800da76:	f7ff ff0b 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(0);                      // Page start address
 800da7a:	2000      	movs	r0, #0
 800da7c:	f7ff ff08 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(0xFF);                   // Page end (not really, but works here)
 800da80:	20ff      	movs	r0, #255	; 0xff
 800da82:	f7ff ff05 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 800da86:	2021      	movs	r0, #33	; 0x21
 800da88:	f7ff ff02 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(0); // Column start address
 800da8c:	2000      	movs	r0, #0
 800da8e:	f7ff feff 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 800da92:	207f      	movs	r0, #127	; 0x7f
 800da94:	f7ff fefc 	bl	800d890 <SSD1306_Command>

#ifdef SSD1306_USE_DMA_DOUBLE_BUFFERING
	HAL_DMA_Start_IT(&hdma_memtomem_dma2_channel1, (uint32_t*)buffer, (uint32_t*)buffer_disp, SSD1306_BUFFER_SIZE);
 800da98:	4904      	ldr	r1, [pc, #16]	; (800daac <SSD1306_Display+0x3c>)
 800da9a:	4a05      	ldr	r2, [pc, #20]	; (800dab0 <SSD1306_Display+0x40>)
 800da9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800daa0:	4804      	ldr	r0, [pc, #16]	; (800dab4 <SSD1306_Display+0x44>)
 800daa2:	f001 feaf 	bl	800f804 <HAL_DMA_Start_IT>

	SSD1306_Data(buffer_disp, SSD1306_BUFFER_SIZE);
#endif


}
 800daa6:	bf00      	nop
 800daa8:	bd80      	pop	{r7, pc}
 800daaa:	bf00      	nop
 800daac:	20001f0c 	.word	0x20001f0c
 800dab0:	2000230c 	.word	0x2000230c
 800dab4:	20000c78 	.word	0x20000c78

0800dab8 <XferCpltCallback>:
#ifdef SSD1306_USE_DMA_DOUBLE_BUFFERING
static void XferCpltCallback(DMA_HandleTypeDef *hdma)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b082      	sub	sp, #8
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
	if(hdma->Instance == oled_buff_dma->Instance)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681a      	ldr	r2, [r3, #0]
 800dac4:	4b06      	ldr	r3, [pc, #24]	; (800dae0 <XferCpltCallback+0x28>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	429a      	cmp	r2, r3
 800dacc:	d104      	bne.n	800dad8 <XferCpltCallback+0x20>
	{
		SSD1306_Data(buffer_disp, SSD1306_BUFFER_SIZE);
 800dace:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dad2:	4804      	ldr	r0, [pc, #16]	; (800dae4 <XferCpltCallback+0x2c>)
 800dad4:	f7ff fef6 	bl	800d8c4 <SSD1306_Data>
	}
}
 800dad8:	bf00      	nop
 800dada:	3708      	adds	r7, #8
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	20001f08 	.word	0x20001f08
 800dae4:	2000230c 	.word	0x2000230c

0800dae8 <SSD1306_Init>:
#endif


#ifdef SSD1306_USE_DMA_DOUBLE_BUFFERING
HAL_StatusTypeDef SSD1306_Init(I2C_HandleTypeDef *i2c, DMA_HandleTypeDef *dma)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	6039      	str	r1, [r7, #0]
	oled_i2c = i2c;
 800daf2:	4a35      	ldr	r2, [pc, #212]	; (800dbc8 <SSD1306_Init+0xe0>)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6013      	str	r3, [r2, #0]
	oled_buff_dma = dma;
 800daf8:	4a34      	ldr	r2, [pc, #208]	; (800dbcc <SSD1306_Init+0xe4>)
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	6013      	str	r3, [r2, #0]

	if(HAL_I2C_IsDeviceReady(oled_i2c, (SSD1306_ADRESS<<1), OLED_TRIALS, 10) != HAL_OK)
 800dafe:	4b32      	ldr	r3, [pc, #200]	; (800dbc8 <SSD1306_Init+0xe0>)
 800db00:	6818      	ldr	r0, [r3, #0]
 800db02:	230a      	movs	r3, #10
 800db04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800db08:	2178      	movs	r1, #120	; 0x78
 800db0a:	f003 fceb 	bl	80114e4 <HAL_I2C_IsDeviceReady>
 800db0e:	4603      	mov	r3, r0
 800db10:	2b00      	cmp	r3, #0
 800db12:	d001      	beq.n	800db18 <SSD1306_Init+0x30>
	{
		return HAL_ERROR;
 800db14:	2301      	movs	r3, #1
 800db16:	e052      	b.n	800dbbe <SSD1306_Init+0xd6>
	}


	SSD1306_Command(SSD1306_DISPLAYOFF);
 800db18:	20ae      	movs	r0, #174	; 0xae
 800db1a:	f7ff feb9 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 800db1e:	20d5      	movs	r0, #213	; 0xd5
 800db20:	f7ff feb6 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(0x80);
 800db24:	2080      	movs	r0, #128	; 0x80
 800db26:	f7ff feb3 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETMULTIPLEX);
 800db2a:	20a8      	movs	r0, #168	; 0xa8
 800db2c:	f7ff feb0 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 800db30:	203f      	movs	r0, #63	; 0x3f
 800db32:	f7ff fead 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 800db36:	20d3      	movs	r0, #211	; 0xd3
 800db38:	f7ff feaa 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(0x00);
 800db3c:	2000      	movs	r0, #0
 800db3e:	f7ff fea7 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 800db42:	2040      	movs	r0, #64	; 0x40
 800db44:	f7ff fea4 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(SSD1306_CHARGEPUMP);
 800db48:	208d      	movs	r0, #141	; 0x8d
 800db4a:	f7ff fea1 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(0x14);
 800db4e:	2014      	movs	r0, #20
 800db50:	f7ff fe9e 	bl	800d890 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 800db54:	2020      	movs	r0, #32
 800db56:	f7ff fe9b 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 800db5a:	2000      	movs	r0, #0
 800db5c:	f7ff fe98 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 800db60:	20a1      	movs	r0, #161	; 0xa1
 800db62:	f7ff fe95 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 800db66:	20c8      	movs	r0, #200	; 0xc8
 800db68:	f7ff fe92 	bl	800d890 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 800db6c:	20da      	movs	r0, #218	; 0xda
 800db6e:	f7ff fe8f 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(0x12);
 800db72:	2012      	movs	r0, #18
 800db74:	f7ff fe8c 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 800db78:	2081      	movs	r0, #129	; 0x81
 800db7a:	f7ff fe89 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(0x10);
 800db7e:	2010      	movs	r0, #16
 800db80:	f7ff fe86 	bl	800d890 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 800db84:	20d9      	movs	r0, #217	; 0xd9
 800db86:	f7ff fe83 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(0xF1);
 800db8a:	20f1      	movs	r0, #241	; 0xf1
 800db8c:	f7ff fe80 	bl	800d890 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 800db90:	20db      	movs	r0, #219	; 0xdb
 800db92:	f7ff fe7d 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(0x40);
 800db96:	2040      	movs	r0, #64	; 0x40
 800db98:	f7ff fe7a 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 800db9c:	20a4      	movs	r0, #164	; 0xa4
 800db9e:	f7ff fe77 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 800dba2:	20a6      	movs	r0, #166	; 0xa6
 800dba4:	f7ff fe74 	bl	800d890 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 800dba8:	202e      	movs	r0, #46	; 0x2e
 800dbaa:	f7ff fe71 	bl	800d890 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON);
 800dbae:	20af      	movs	r0, #175	; 0xaf
 800dbb0:	f7ff fe6e 	bl	800d890 <SSD1306_Command>

	/*
	 * Bufforing DMA Cplt Callback
	 */
	oled_buff_dma->XferCpltCallback = XferCpltCallback;
 800dbb4:	4b05      	ldr	r3, [pc, #20]	; (800dbcc <SSD1306_Init+0xe4>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4a05      	ldr	r2, [pc, #20]	; (800dbd0 <SSD1306_Init+0xe8>)
 800dbba:	629a      	str	r2, [r3, #40]	; 0x28
	return HAL_OK;
 800dbbc:	2300      	movs	r3, #0

}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3708      	adds	r7, #8
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	20001f04 	.word	0x20001f04
 800dbcc:	20001f08 	.word	0x20001f08
 800dbd0:	0800dab9 	.word	0x0800dab9

0800dbd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b085      	sub	sp, #20
 800dbd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800dbda:	4b15      	ldr	r3, [pc, #84]	; (800dc30 <HAL_MspInit+0x5c>)
 800dbdc:	699b      	ldr	r3, [r3, #24]
 800dbde:	4a14      	ldr	r2, [pc, #80]	; (800dc30 <HAL_MspInit+0x5c>)
 800dbe0:	f043 0301 	orr.w	r3, r3, #1
 800dbe4:	6193      	str	r3, [r2, #24]
 800dbe6:	4b12      	ldr	r3, [pc, #72]	; (800dc30 <HAL_MspInit+0x5c>)
 800dbe8:	699b      	ldr	r3, [r3, #24]
 800dbea:	f003 0301 	and.w	r3, r3, #1
 800dbee:	60bb      	str	r3, [r7, #8]
 800dbf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800dbf2:	4b0f      	ldr	r3, [pc, #60]	; (800dc30 <HAL_MspInit+0x5c>)
 800dbf4:	69db      	ldr	r3, [r3, #28]
 800dbf6:	4a0e      	ldr	r2, [pc, #56]	; (800dc30 <HAL_MspInit+0x5c>)
 800dbf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dbfc:	61d3      	str	r3, [r2, #28]
 800dbfe:	4b0c      	ldr	r3, [pc, #48]	; (800dc30 <HAL_MspInit+0x5c>)
 800dc00:	69db      	ldr	r3, [r3, #28]
 800dc02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc06:	607b      	str	r3, [r7, #4]
 800dc08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800dc0a:	4b0a      	ldr	r3, [pc, #40]	; (800dc34 <HAL_MspInit+0x60>)
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	60fb      	str	r3, [r7, #12]
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800dc16:	60fb      	str	r3, [r7, #12]
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800dc1e:	60fb      	str	r3, [r7, #12]
 800dc20:	4a04      	ldr	r2, [pc, #16]	; (800dc34 <HAL_MspInit+0x60>)
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800dc26:	bf00      	nop
 800dc28:	3714      	adds	r7, #20
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bc80      	pop	{r7}
 800dc2e:	4770      	bx	lr
 800dc30:	40021000 	.word	0x40021000
 800dc34:	40010000 	.word	0x40010000

0800dc38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800dc38:	b480      	push	{r7}
 800dc3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800dc3c:	e7fe      	b.n	800dc3c <NMI_Handler+0x4>

0800dc3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800dc3e:	b480      	push	{r7}
 800dc40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800dc42:	e7fe      	b.n	800dc42 <HardFault_Handler+0x4>

0800dc44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800dc44:	b480      	push	{r7}
 800dc46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800dc48:	e7fe      	b.n	800dc48 <MemManage_Handler+0x4>

0800dc4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800dc4a:	b480      	push	{r7}
 800dc4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800dc4e:	e7fe      	b.n	800dc4e <BusFault_Handler+0x4>

0800dc50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800dc50:	b480      	push	{r7}
 800dc52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800dc54:	e7fe      	b.n	800dc54 <UsageFault_Handler+0x4>

0800dc56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800dc56:	b480      	push	{r7}
 800dc58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800dc5a:	bf00      	nop
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bc80      	pop	{r7}
 800dc60:	4770      	bx	lr

0800dc62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800dc62:	b480      	push	{r7}
 800dc64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800dc66:	bf00      	nop
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bc80      	pop	{r7}
 800dc6c:	4770      	bx	lr

0800dc6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800dc6e:	b480      	push	{r7}
 800dc70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800dc72:	bf00      	nop
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bc80      	pop	{r7}
 800dc78:	4770      	bx	lr

0800dc7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800dc7a:	b580      	push	{r7, lr}
 800dc7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800dc7e:	f000 fd83 	bl	800e788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800dc82:	bf00      	nop
 800dc84:	bd80      	pop	{r7, pc}
	...

0800dc88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800dc8c:	4802      	ldr	r0, [pc, #8]	; (800dc98 <DMA1_Channel1_IRQHandler+0x10>)
 800dc8e:	f001 ff5d 	bl	800fb4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800dc92:	bf00      	nop
 800dc94:	bd80      	pop	{r7, pc}
 800dc96:	bf00      	nop
 800dc98:	20000c34 	.word	0x20000c34

0800dc9c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800dca0:	4802      	ldr	r0, [pc, #8]	; (800dcac <DMA1_Channel6_IRQHandler+0x10>)
 800dca2:	f001 ff53 	bl	800fb4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800dca6:	bf00      	nop
 800dca8:	bd80      	pop	{r7, pc}
 800dcaa:	bf00      	nop
 800dcac:	20000d54 	.word	0x20000d54

0800dcb0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800dcb4:	4802      	ldr	r0, [pc, #8]	; (800dcc0 <DMA1_Channel7_IRQHandler+0x10>)
 800dcb6:	f001 ff49 	bl	800fb4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800dcba:	bf00      	nop
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	20000d10 	.word	0x20000d10

0800dcc4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800dcc8:	4802      	ldr	r0, [pc, #8]	; (800dcd4 <ADC1_2_IRQHandler+0x10>)
 800dcca:	f001 f891 	bl	800edf0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800dcce:	bf00      	nop
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	20000c04 	.word	0x20000c04

0800dcd8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800dcdc:	4802      	ldr	r0, [pc, #8]	; (800dce8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800dcde:	f005 ff47 	bl	8013b70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800dce2:	bf00      	nop
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	2000358c 	.word	0x2000358c

0800dcec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800dcf0:	4802      	ldr	r0, [pc, #8]	; (800dcfc <I2C1_EV_IRQHandler+0x10>)
 800dcf2:	f003 fd25 	bl	8011740 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800dcf6:	bf00      	nop
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	20000cbc 	.word	0x20000cbc

0800dd00 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_channel1);
 800dd04:	4802      	ldr	r0, [pc, #8]	; (800dd10 <DMA2_Channel1_IRQHandler+0x10>)
 800dd06:	f001 ff21 	bl	800fb4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800dd0a:	bf00      	nop
 800dd0c:	bd80      	pop	{r7, pc}
 800dd0e:	bf00      	nop
 800dd10:	20000c78 	.word	0x20000c78

0800dd14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800dd14:	b480      	push	{r7}
 800dd16:	af00      	add	r7, sp, #0
  return 1;
 800dd18:	2301      	movs	r3, #1
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bc80      	pop	{r7}
 800dd20:	4770      	bx	lr

0800dd22 <_kill>:

int _kill(int pid, int sig)
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b082      	sub	sp, #8
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
 800dd2a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800dd2c:	f00e fc86 	bl	801c63c <__errno>
 800dd30:	4603      	mov	r3, r0
 800dd32:	2216      	movs	r2, #22
 800dd34:	601a      	str	r2, [r3, #0]
  return -1;
 800dd36:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3708      	adds	r7, #8
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}

0800dd42 <_exit>:

void _exit (int status)
{
 800dd42:	b580      	push	{r7, lr}
 800dd44:	b082      	sub	sp, #8
 800dd46:	af00      	add	r7, sp, #0
 800dd48:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800dd4a:	f04f 31ff 	mov.w	r1, #4294967295
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f7ff ffe7 	bl	800dd22 <_kill>
  while (1) {}    /* Make sure we hang here */
 800dd54:	e7fe      	b.n	800dd54 <_exit+0x12>

0800dd56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800dd56:	b580      	push	{r7, lr}
 800dd58:	b086      	sub	sp, #24
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	60f8      	str	r0, [r7, #12]
 800dd5e:	60b9      	str	r1, [r7, #8]
 800dd60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dd62:	2300      	movs	r3, #0
 800dd64:	617b      	str	r3, [r7, #20]
 800dd66:	e00a      	b.n	800dd7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800dd68:	f3af 8000 	nop.w
 800dd6c:	4601      	mov	r1, r0
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	1c5a      	adds	r2, r3, #1
 800dd72:	60ba      	str	r2, [r7, #8]
 800dd74:	b2ca      	uxtb	r2, r1
 800dd76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	3301      	adds	r3, #1
 800dd7c:	617b      	str	r3, [r7, #20]
 800dd7e:	697a      	ldr	r2, [r7, #20]
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	429a      	cmp	r2, r3
 800dd84:	dbf0      	blt.n	800dd68 <_read+0x12>
  }

  return len;
 800dd86:	687b      	ldr	r3, [r7, #4]
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3718      	adds	r7, #24
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b086      	sub	sp, #24
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	60f8      	str	r0, [r7, #12]
 800dd98:	60b9      	str	r1, [r7, #8]
 800dd9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	617b      	str	r3, [r7, #20]
 800dda0:	e009      	b.n	800ddb6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	1c5a      	adds	r2, r3, #1
 800dda6:	60ba      	str	r2, [r7, #8]
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	617b      	str	r3, [r7, #20]
 800ddb6:	697a      	ldr	r2, [r7, #20]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	dbf1      	blt.n	800dda2 <_write+0x12>
  }
  return len;
 800ddbe:	687b      	ldr	r3, [r7, #4]
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3718      	adds	r7, #24
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <_close>:

int _close(int file)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800ddd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	370c      	adds	r7, #12
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bc80      	pop	{r7}
 800dddc:	4770      	bx	lr

0800ddde <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ddde:	b480      	push	{r7}
 800dde0:	b083      	sub	sp, #12
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
 800dde6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ddee:	605a      	str	r2, [r3, #4]
  return 0;
 800ddf0:	2300      	movs	r3, #0
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	370c      	adds	r7, #12
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bc80      	pop	{r7}
 800ddfa:	4770      	bx	lr

0800ddfc <_isatty>:

int _isatty(int file)
{
 800ddfc:	b480      	push	{r7}
 800ddfe:	b083      	sub	sp, #12
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800de04:	2301      	movs	r3, #1
}
 800de06:	4618      	mov	r0, r3
 800de08:	370c      	adds	r7, #12
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bc80      	pop	{r7}
 800de0e:	4770      	bx	lr

0800de10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800de10:	b480      	push	{r7}
 800de12:	b085      	sub	sp, #20
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800de1c:	2300      	movs	r3, #0
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3714      	adds	r7, #20
 800de22:	46bd      	mov	sp, r7
 800de24:	bc80      	pop	{r7}
 800de26:	4770      	bx	lr

0800de28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b086      	sub	sp, #24
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800de30:	4a14      	ldr	r2, [pc, #80]	; (800de84 <_sbrk+0x5c>)
 800de32:	4b15      	ldr	r3, [pc, #84]	; (800de88 <_sbrk+0x60>)
 800de34:	1ad3      	subs	r3, r2, r3
 800de36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800de3c:	4b13      	ldr	r3, [pc, #76]	; (800de8c <_sbrk+0x64>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d102      	bne.n	800de4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800de44:	4b11      	ldr	r3, [pc, #68]	; (800de8c <_sbrk+0x64>)
 800de46:	4a12      	ldr	r2, [pc, #72]	; (800de90 <_sbrk+0x68>)
 800de48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800de4a:	4b10      	ldr	r3, [pc, #64]	; (800de8c <_sbrk+0x64>)
 800de4c:	681a      	ldr	r2, [r3, #0]
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	4413      	add	r3, r2
 800de52:	693a      	ldr	r2, [r7, #16]
 800de54:	429a      	cmp	r2, r3
 800de56:	d207      	bcs.n	800de68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800de58:	f00e fbf0 	bl	801c63c <__errno>
 800de5c:	4603      	mov	r3, r0
 800de5e:	220c      	movs	r2, #12
 800de60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800de62:	f04f 33ff 	mov.w	r3, #4294967295
 800de66:	e009      	b.n	800de7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800de68:	4b08      	ldr	r3, [pc, #32]	; (800de8c <_sbrk+0x64>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800de6e:	4b07      	ldr	r3, [pc, #28]	; (800de8c <_sbrk+0x64>)
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	4413      	add	r3, r2
 800de76:	4a05      	ldr	r2, [pc, #20]	; (800de8c <_sbrk+0x64>)
 800de78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800de7a:	68fb      	ldr	r3, [r7, #12]
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3718      	adds	r7, #24
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}
 800de84:	20010000 	.word	0x20010000
 800de88:	00001000 	.word	0x00001000
 800de8c:	2000270c 	.word	0x2000270c
 800de90:	20003be8 	.word	0x20003be8

0800de94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800de94:	b480      	push	{r7}
 800de96:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 800de98:	4b03      	ldr	r3, [pc, #12]	; (800dea8 <SystemInit+0x14>)
 800de9a:	4a04      	ldr	r2, [pc, #16]	; (800deac <SystemInit+0x18>)
 800de9c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800de9e:	bf00      	nop
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bc80      	pop	{r7}
 800dea4:	4770      	bx	lr
 800dea6:	bf00      	nop
 800dea8:	e000ed00 	.word	0xe000ed00
 800deac:	08008000 	.word	0x08008000

0800deb0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b08e      	sub	sp, #56	; 0x38
 800deb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800deb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800deba:	2200      	movs	r2, #0
 800debc:	601a      	str	r2, [r3, #0]
 800debe:	605a      	str	r2, [r3, #4]
 800dec0:	609a      	str	r2, [r3, #8]
 800dec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dec4:	f107 0320 	add.w	r3, r7, #32
 800dec8:	2200      	movs	r2, #0
 800deca:	601a      	str	r2, [r3, #0]
 800decc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dece:	1d3b      	adds	r3, r7, #4
 800ded0:	2200      	movs	r2, #0
 800ded2:	601a      	str	r2, [r3, #0]
 800ded4:	605a      	str	r2, [r3, #4]
 800ded6:	609a      	str	r2, [r3, #8]
 800ded8:	60da      	str	r2, [r3, #12]
 800deda:	611a      	str	r2, [r3, #16]
 800dedc:	615a      	str	r2, [r3, #20]
 800dede:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800dee0:	4b2d      	ldr	r3, [pc, #180]	; (800df98 <MX_TIM3_Init+0xe8>)
 800dee2:	4a2e      	ldr	r2, [pc, #184]	; (800df9c <MX_TIM3_Init+0xec>)
 800dee4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 359;
 800dee6:	4b2c      	ldr	r3, [pc, #176]	; (800df98 <MX_TIM3_Init+0xe8>)
 800dee8:	f240 1267 	movw	r2, #359	; 0x167
 800deec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800deee:	4b2a      	ldr	r3, [pc, #168]	; (800df98 <MX_TIM3_Init+0xe8>)
 800def0:	2200      	movs	r2, #0
 800def2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800def4:	4b28      	ldr	r3, [pc, #160]	; (800df98 <MX_TIM3_Init+0xe8>)
 800def6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800defa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800defc:	4b26      	ldr	r3, [pc, #152]	; (800df98 <MX_TIM3_Init+0xe8>)
 800defe:	2200      	movs	r2, #0
 800df00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800df02:	4b25      	ldr	r3, [pc, #148]	; (800df98 <MX_TIM3_Init+0xe8>)
 800df04:	2200      	movs	r2, #0
 800df06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800df08:	4823      	ldr	r0, [pc, #140]	; (800df98 <MX_TIM3_Init+0xe8>)
 800df0a:	f007 ff43 	bl	8015d94 <HAL_TIM_Base_Init>
 800df0e:	4603      	mov	r3, r0
 800df10:	2b00      	cmp	r3, #0
 800df12:	d001      	beq.n	800df18 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800df14:	f7fe fcf0 	bl	800c8f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800df18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800df1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800df1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800df22:	4619      	mov	r1, r3
 800df24:	481c      	ldr	r0, [pc, #112]	; (800df98 <MX_TIM3_Init+0xe8>)
 800df26:	f008 f959 	bl	80161dc <HAL_TIM_ConfigClockSource>
 800df2a:	4603      	mov	r3, r0
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d001      	beq.n	800df34 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800df30:	f7fe fce2 	bl	800c8f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800df34:	4818      	ldr	r0, [pc, #96]	; (800df98 <MX_TIM3_Init+0xe8>)
 800df36:	f007 ff7c 	bl	8015e32 <HAL_TIM_PWM_Init>
 800df3a:	4603      	mov	r3, r0
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d001      	beq.n	800df44 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800df40:	f7fe fcda 	bl	800c8f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800df44:	2300      	movs	r3, #0
 800df46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800df48:	2300      	movs	r3, #0
 800df4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800df4c:	f107 0320 	add.w	r3, r7, #32
 800df50:	4619      	mov	r1, r3
 800df52:	4811      	ldr	r0, [pc, #68]	; (800df98 <MX_TIM3_Init+0xe8>)
 800df54:	f008 fcea 	bl	801692c <HAL_TIMEx_MasterConfigSynchronization>
 800df58:	4603      	mov	r3, r0
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d001      	beq.n	800df62 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800df5e:	f7fe fccb 	bl	800c8f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800df62:	2360      	movs	r3, #96	; 0x60
 800df64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800df66:	2300      	movs	r3, #0
 800df68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800df6a:	2300      	movs	r3, #0
 800df6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800df6e:	2300      	movs	r3, #0
 800df70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800df72:	1d3b      	adds	r3, r7, #4
 800df74:	2200      	movs	r2, #0
 800df76:	4619      	mov	r1, r3
 800df78:	4807      	ldr	r0, [pc, #28]	; (800df98 <MX_TIM3_Init+0xe8>)
 800df7a:	f008 f86d 	bl	8016058 <HAL_TIM_PWM_ConfigChannel>
 800df7e:	4603      	mov	r3, r0
 800df80:	2b00      	cmp	r3, #0
 800df82:	d001      	beq.n	800df88 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800df84:	f7fe fcb8 	bl	800c8f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800df88:	4803      	ldr	r0, [pc, #12]	; (800df98 <MX_TIM3_Init+0xe8>)
 800df8a:	f000 f961 	bl	800e250 <HAL_TIM_MspPostInit>

}
 800df8e:	bf00      	nop
 800df90:	3738      	adds	r7, #56	; 0x38
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	20002710 	.word	0x20002710
 800df9c:	40000400 	.word	0x40000400

0800dfa0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b08e      	sub	sp, #56	; 0x38
 800dfa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dfa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dfaa:	2200      	movs	r2, #0
 800dfac:	601a      	str	r2, [r3, #0]
 800dfae:	605a      	str	r2, [r3, #4]
 800dfb0:	609a      	str	r2, [r3, #8]
 800dfb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800dfb4:	f107 0320 	add.w	r3, r7, #32
 800dfb8:	2200      	movs	r2, #0
 800dfba:	601a      	str	r2, [r3, #0]
 800dfbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800dfbe:	1d3b      	adds	r3, r7, #4
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	601a      	str	r2, [r3, #0]
 800dfc4:	605a      	str	r2, [r3, #4]
 800dfc6:	609a      	str	r2, [r3, #8]
 800dfc8:	60da      	str	r2, [r3, #12]
 800dfca:	611a      	str	r2, [r3, #16]
 800dfcc:	615a      	str	r2, [r3, #20]
 800dfce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800dfd0:	4b3e      	ldr	r3, [pc, #248]	; (800e0cc <MX_TIM4_Init+0x12c>)
 800dfd2:	4a3f      	ldr	r2, [pc, #252]	; (800e0d0 <MX_TIM4_Init+0x130>)
 800dfd4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 800dfd6:	4b3d      	ldr	r3, [pc, #244]	; (800e0cc <MX_TIM4_Init+0x12c>)
 800dfd8:	f240 22cf 	movw	r2, #719	; 0x2cf
 800dfdc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dfde:	4b3b      	ldr	r3, [pc, #236]	; (800e0cc <MX_TIM4_Init+0x12c>)
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800dfe4:	4b39      	ldr	r3, [pc, #228]	; (800e0cc <MX_TIM4_Init+0x12c>)
 800dfe6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800dfea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dfec:	4b37      	ldr	r3, [pc, #220]	; (800e0cc <MX_TIM4_Init+0x12c>)
 800dfee:	2200      	movs	r2, #0
 800dff0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dff2:	4b36      	ldr	r3, [pc, #216]	; (800e0cc <MX_TIM4_Init+0x12c>)
 800dff4:	2200      	movs	r2, #0
 800dff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800dff8:	4834      	ldr	r0, [pc, #208]	; (800e0cc <MX_TIM4_Init+0x12c>)
 800dffa:	f007 fecb 	bl	8015d94 <HAL_TIM_Base_Init>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d001      	beq.n	800e008 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800e004:	f7fe fc78 	bl	800c8f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e00c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800e00e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e012:	4619      	mov	r1, r3
 800e014:	482d      	ldr	r0, [pc, #180]	; (800e0cc <MX_TIM4_Init+0x12c>)
 800e016:	f008 f8e1 	bl	80161dc <HAL_TIM_ConfigClockSource>
 800e01a:	4603      	mov	r3, r0
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d001      	beq.n	800e024 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800e020:	f7fe fc6a 	bl	800c8f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800e024:	4829      	ldr	r0, [pc, #164]	; (800e0cc <MX_TIM4_Init+0x12c>)
 800e026:	f007 ff04 	bl	8015e32 <HAL_TIM_PWM_Init>
 800e02a:	4603      	mov	r3, r0
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d001      	beq.n	800e034 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800e030:	f7fe fc62 	bl	800c8f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e034:	2300      	movs	r3, #0
 800e036:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e038:	2300      	movs	r3, #0
 800e03a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800e03c:	f107 0320 	add.w	r3, r7, #32
 800e040:	4619      	mov	r1, r3
 800e042:	4822      	ldr	r0, [pc, #136]	; (800e0cc <MX_TIM4_Init+0x12c>)
 800e044:	f008 fc72 	bl	801692c <HAL_TIMEx_MasterConfigSynchronization>
 800e048:	4603      	mov	r3, r0
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d001      	beq.n	800e052 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800e04e:	f7fe fc53 	bl	800c8f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e052:	2360      	movs	r3, #96	; 0x60
 800e054:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 800e056:	f240 13f3 	movw	r3, #499	; 0x1f3
 800e05a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e05c:	2300      	movs	r3, #0
 800e05e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e060:	2300      	movs	r3, #0
 800e062:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e064:	1d3b      	adds	r3, r7, #4
 800e066:	2200      	movs	r2, #0
 800e068:	4619      	mov	r1, r3
 800e06a:	4818      	ldr	r0, [pc, #96]	; (800e0cc <MX_TIM4_Init+0x12c>)
 800e06c:	f007 fff4 	bl	8016058 <HAL_TIM_PWM_ConfigChannel>
 800e070:	4603      	mov	r3, r0
 800e072:	2b00      	cmp	r3, #0
 800e074:	d001      	beq.n	800e07a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800e076:	f7fe fc3f 	bl	800c8f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e07a:	1d3b      	adds	r3, r7, #4
 800e07c:	2204      	movs	r2, #4
 800e07e:	4619      	mov	r1, r3
 800e080:	4812      	ldr	r0, [pc, #72]	; (800e0cc <MX_TIM4_Init+0x12c>)
 800e082:	f007 ffe9 	bl	8016058 <HAL_TIM_PWM_ConfigChannel>
 800e086:	4603      	mov	r3, r0
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d001      	beq.n	800e090 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 800e08c:	f7fe fc34 	bl	800c8f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800e090:	1d3b      	adds	r3, r7, #4
 800e092:	2208      	movs	r2, #8
 800e094:	4619      	mov	r1, r3
 800e096:	480d      	ldr	r0, [pc, #52]	; (800e0cc <MX_TIM4_Init+0x12c>)
 800e098:	f007 ffde 	bl	8016058 <HAL_TIM_PWM_ConfigChannel>
 800e09c:	4603      	mov	r3, r0
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d001      	beq.n	800e0a6 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 800e0a2:	f7fe fc29 	bl	800c8f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e0a6:	1d3b      	adds	r3, r7, #4
 800e0a8:	220c      	movs	r2, #12
 800e0aa:	4619      	mov	r1, r3
 800e0ac:	4807      	ldr	r0, [pc, #28]	; (800e0cc <MX_TIM4_Init+0x12c>)
 800e0ae:	f007 ffd3 	bl	8016058 <HAL_TIM_PWM_ConfigChannel>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d001      	beq.n	800e0bc <MX_TIM4_Init+0x11c>
  {
    Error_Handler();
 800e0b8:	f7fe fc1e 	bl	800c8f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800e0bc:	4803      	ldr	r0, [pc, #12]	; (800e0cc <MX_TIM4_Init+0x12c>)
 800e0be:	f000 f8c7 	bl	800e250 <HAL_TIM_MspPostInit>

}
 800e0c2:	bf00      	nop
 800e0c4:	3738      	adds	r7, #56	; 0x38
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	bd80      	pop	{r7, pc}
 800e0ca:	bf00      	nop
 800e0cc:	20002758 	.word	0x20002758
 800e0d0:	40000800 	.word	0x40000800

0800e0d4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b08e      	sub	sp, #56	; 0x38
 800e0d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e0da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e0de:	2200      	movs	r2, #0
 800e0e0:	601a      	str	r2, [r3, #0]
 800e0e2:	605a      	str	r2, [r3, #4]
 800e0e4:	609a      	str	r2, [r3, #8]
 800e0e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e0e8:	f107 0320 	add.w	r3, r7, #32
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	601a      	str	r2, [r3, #0]
 800e0f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e0f2:	1d3b      	adds	r3, r7, #4
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	601a      	str	r2, [r3, #0]
 800e0f8:	605a      	str	r2, [r3, #4]
 800e0fa:	609a      	str	r2, [r3, #8]
 800e0fc:	60da      	str	r2, [r3, #12]
 800e0fe:	611a      	str	r2, [r3, #16]
 800e100:	615a      	str	r2, [r3, #20]
 800e102:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800e104:	4b2d      	ldr	r3, [pc, #180]	; (800e1bc <MX_TIM5_Init+0xe8>)
 800e106:	4a2e      	ldr	r2, [pc, #184]	; (800e1c0 <MX_TIM5_Init+0xec>)
 800e108:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 719;
 800e10a:	4b2c      	ldr	r3, [pc, #176]	; (800e1bc <MX_TIM5_Init+0xe8>)
 800e10c:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e110:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e112:	4b2a      	ldr	r3, [pc, #168]	; (800e1bc <MX_TIM5_Init+0xe8>)
 800e114:	2200      	movs	r2, #0
 800e116:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 800e118:	4b28      	ldr	r3, [pc, #160]	; (800e1bc <MX_TIM5_Init+0xe8>)
 800e11a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e11e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e120:	4b26      	ldr	r3, [pc, #152]	; (800e1bc <MX_TIM5_Init+0xe8>)
 800e122:	2200      	movs	r2, #0
 800e124:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e126:	4b25      	ldr	r3, [pc, #148]	; (800e1bc <MX_TIM5_Init+0xe8>)
 800e128:	2200      	movs	r2, #0
 800e12a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800e12c:	4823      	ldr	r0, [pc, #140]	; (800e1bc <MX_TIM5_Init+0xe8>)
 800e12e:	f007 fe31 	bl	8015d94 <HAL_TIM_Base_Init>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d001      	beq.n	800e13c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800e138:	f7fe fbde 	bl	800c8f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e13c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e140:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800e142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e146:	4619      	mov	r1, r3
 800e148:	481c      	ldr	r0, [pc, #112]	; (800e1bc <MX_TIM5_Init+0xe8>)
 800e14a:	f008 f847 	bl	80161dc <HAL_TIM_ConfigClockSource>
 800e14e:	4603      	mov	r3, r0
 800e150:	2b00      	cmp	r3, #0
 800e152:	d001      	beq.n	800e158 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800e154:	f7fe fbd0 	bl	800c8f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800e158:	4818      	ldr	r0, [pc, #96]	; (800e1bc <MX_TIM5_Init+0xe8>)
 800e15a:	f007 fe6a 	bl	8015e32 <HAL_TIM_PWM_Init>
 800e15e:	4603      	mov	r3, r0
 800e160:	2b00      	cmp	r3, #0
 800e162:	d001      	beq.n	800e168 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800e164:	f7fe fbc8 	bl	800c8f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e168:	2300      	movs	r3, #0
 800e16a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e16c:	2300      	movs	r3, #0
 800e16e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800e170:	f107 0320 	add.w	r3, r7, #32
 800e174:	4619      	mov	r1, r3
 800e176:	4811      	ldr	r0, [pc, #68]	; (800e1bc <MX_TIM5_Init+0xe8>)
 800e178:	f008 fbd8 	bl	801692c <HAL_TIMEx_MasterConfigSynchronization>
 800e17c:	4603      	mov	r3, r0
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d001      	beq.n	800e186 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800e182:	f7fe fbb9 	bl	800c8f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e186:	2360      	movs	r3, #96	; 0x60
 800e188:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800e18a:	2300      	movs	r3, #0
 800e18c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e18e:	2300      	movs	r3, #0
 800e190:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e192:	2300      	movs	r3, #0
 800e194:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e196:	1d3b      	adds	r3, r7, #4
 800e198:	2204      	movs	r2, #4
 800e19a:	4619      	mov	r1, r3
 800e19c:	4807      	ldr	r0, [pc, #28]	; (800e1bc <MX_TIM5_Init+0xe8>)
 800e19e:	f007 ff5b 	bl	8016058 <HAL_TIM_PWM_ConfigChannel>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d001      	beq.n	800e1ac <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800e1a8:	f7fe fba6 	bl	800c8f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800e1ac:	4803      	ldr	r0, [pc, #12]	; (800e1bc <MX_TIM5_Init+0xe8>)
 800e1ae:	f000 f84f 	bl	800e250 <HAL_TIM_MspPostInit>

}
 800e1b2:	bf00      	nop
 800e1b4:	3738      	adds	r7, #56	; 0x38
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}
 800e1ba:	bf00      	nop
 800e1bc:	200027a0 	.word	0x200027a0
 800e1c0:	40000c00 	.word	0x40000c00

0800e1c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b087      	sub	sp, #28
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4a1b      	ldr	r2, [pc, #108]	; (800e240 <HAL_TIM_Base_MspInit+0x7c>)
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d10c      	bne.n	800e1f0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800e1d6:	4b1b      	ldr	r3, [pc, #108]	; (800e244 <HAL_TIM_Base_MspInit+0x80>)
 800e1d8:	69db      	ldr	r3, [r3, #28]
 800e1da:	4a1a      	ldr	r2, [pc, #104]	; (800e244 <HAL_TIM_Base_MspInit+0x80>)
 800e1dc:	f043 0302 	orr.w	r3, r3, #2
 800e1e0:	61d3      	str	r3, [r2, #28]
 800e1e2:	4b18      	ldr	r3, [pc, #96]	; (800e244 <HAL_TIM_Base_MspInit+0x80>)
 800e1e4:	69db      	ldr	r3, [r3, #28]
 800e1e6:	f003 0302 	and.w	r3, r3, #2
 800e1ea:	617b      	str	r3, [r7, #20]
 800e1ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800e1ee:	e022      	b.n	800e236 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4a14      	ldr	r2, [pc, #80]	; (800e248 <HAL_TIM_Base_MspInit+0x84>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d10c      	bne.n	800e214 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800e1fa:	4b12      	ldr	r3, [pc, #72]	; (800e244 <HAL_TIM_Base_MspInit+0x80>)
 800e1fc:	69db      	ldr	r3, [r3, #28]
 800e1fe:	4a11      	ldr	r2, [pc, #68]	; (800e244 <HAL_TIM_Base_MspInit+0x80>)
 800e200:	f043 0304 	orr.w	r3, r3, #4
 800e204:	61d3      	str	r3, [r2, #28]
 800e206:	4b0f      	ldr	r3, [pc, #60]	; (800e244 <HAL_TIM_Base_MspInit+0x80>)
 800e208:	69db      	ldr	r3, [r3, #28]
 800e20a:	f003 0304 	and.w	r3, r3, #4
 800e20e:	613b      	str	r3, [r7, #16]
 800e210:	693b      	ldr	r3, [r7, #16]
}
 800e212:	e010      	b.n	800e236 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM5)
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	4a0c      	ldr	r2, [pc, #48]	; (800e24c <HAL_TIM_Base_MspInit+0x88>)
 800e21a:	4293      	cmp	r3, r2
 800e21c:	d10b      	bne.n	800e236 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800e21e:	4b09      	ldr	r3, [pc, #36]	; (800e244 <HAL_TIM_Base_MspInit+0x80>)
 800e220:	69db      	ldr	r3, [r3, #28]
 800e222:	4a08      	ldr	r2, [pc, #32]	; (800e244 <HAL_TIM_Base_MspInit+0x80>)
 800e224:	f043 0308 	orr.w	r3, r3, #8
 800e228:	61d3      	str	r3, [r2, #28]
 800e22a:	4b06      	ldr	r3, [pc, #24]	; (800e244 <HAL_TIM_Base_MspInit+0x80>)
 800e22c:	69db      	ldr	r3, [r3, #28]
 800e22e:	f003 0308 	and.w	r3, r3, #8
 800e232:	60fb      	str	r3, [r7, #12]
 800e234:	68fb      	ldr	r3, [r7, #12]
}
 800e236:	bf00      	nop
 800e238:	371c      	adds	r7, #28
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bc80      	pop	{r7}
 800e23e:	4770      	bx	lr
 800e240:	40000400 	.word	0x40000400
 800e244:	40021000 	.word	0x40021000
 800e248:	40000800 	.word	0x40000800
 800e24c:	40000c00 	.word	0x40000c00

0800e250 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b08c      	sub	sp, #48	; 0x30
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e258:	f107 0318 	add.w	r3, r7, #24
 800e25c:	2200      	movs	r2, #0
 800e25e:	601a      	str	r2, [r3, #0]
 800e260:	605a      	str	r2, [r3, #4]
 800e262:	609a      	str	r2, [r3, #8]
 800e264:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	4a3e      	ldr	r2, [pc, #248]	; (800e364 <HAL_TIM_MspPostInit+0x114>)
 800e26c:	4293      	cmp	r3, r2
 800e26e:	d12a      	bne.n	800e2c6 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e270:	4b3d      	ldr	r3, [pc, #244]	; (800e368 <HAL_TIM_MspPostInit+0x118>)
 800e272:	699b      	ldr	r3, [r3, #24]
 800e274:	4a3c      	ldr	r2, [pc, #240]	; (800e368 <HAL_TIM_MspPostInit+0x118>)
 800e276:	f043 0310 	orr.w	r3, r3, #16
 800e27a:	6193      	str	r3, [r2, #24]
 800e27c:	4b3a      	ldr	r3, [pc, #232]	; (800e368 <HAL_TIM_MspPostInit+0x118>)
 800e27e:	699b      	ldr	r3, [r3, #24]
 800e280:	f003 0310 	and.w	r3, r3, #16
 800e284:	617b      	str	r3, [r7, #20]
 800e286:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800e288:	2340      	movs	r3, #64	; 0x40
 800e28a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e28c:	2302      	movs	r3, #2
 800e28e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e290:	2302      	movs	r3, #2
 800e292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e294:	f107 0318 	add.w	r3, r7, #24
 800e298:	4619      	mov	r1, r3
 800e29a:	4834      	ldr	r0, [pc, #208]	; (800e36c <HAL_TIM_MspPostInit+0x11c>)
 800e29c:	f001 fecc 	bl	8010038 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800e2a0:	4b33      	ldr	r3, [pc, #204]	; (800e370 <HAL_TIM_MspPostInit+0x120>)
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e2ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800e2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800e2b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b8:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800e2bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800e2be:	4a2c      	ldr	r2, [pc, #176]	; (800e370 <HAL_TIM_MspPostInit+0x120>)
 800e2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800e2c4:	e049      	b.n	800e35a <HAL_TIM_MspPostInit+0x10a>
  else if(timHandle->Instance==TIM4)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	4a2a      	ldr	r2, [pc, #168]	; (800e374 <HAL_TIM_MspPostInit+0x124>)
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	d127      	bne.n	800e320 <HAL_TIM_MspPostInit+0xd0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e2d0:	4b25      	ldr	r3, [pc, #148]	; (800e368 <HAL_TIM_MspPostInit+0x118>)
 800e2d2:	699b      	ldr	r3, [r3, #24]
 800e2d4:	4a24      	ldr	r2, [pc, #144]	; (800e368 <HAL_TIM_MspPostInit+0x118>)
 800e2d6:	f043 0320 	orr.w	r3, r3, #32
 800e2da:	6193      	str	r3, [r2, #24]
 800e2dc:	4b22      	ldr	r3, [pc, #136]	; (800e368 <HAL_TIM_MspPostInit+0x118>)
 800e2de:	699b      	ldr	r3, [r3, #24]
 800e2e0:	f003 0320 	and.w	r3, r3, #32
 800e2e4:	613b      	str	r3, [r7, #16]
 800e2e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800e2e8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800e2ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2ee:	2302      	movs	r3, #2
 800e2f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e2f2:	2302      	movs	r3, #2
 800e2f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e2f6:	f107 0318 	add.w	r3, r7, #24
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	481e      	ldr	r0, [pc, #120]	; (800e378 <HAL_TIM_MspPostInit+0x128>)
 800e2fe:	f001 fe9b 	bl	8010038 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 800e302:	4b1b      	ldr	r3, [pc, #108]	; (800e370 <HAL_TIM_MspPostInit+0x120>)
 800e304:	685b      	ldr	r3, [r3, #4]
 800e306:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e30a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800e30e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e312:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e316:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e318:	4a15      	ldr	r2, [pc, #84]	; (800e370 <HAL_TIM_MspPostInit+0x120>)
 800e31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e31c:	6053      	str	r3, [r2, #4]
}
 800e31e:	e01c      	b.n	800e35a <HAL_TIM_MspPostInit+0x10a>
  else if(timHandle->Instance==TIM5)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	4a15      	ldr	r2, [pc, #84]	; (800e37c <HAL_TIM_MspPostInit+0x12c>)
 800e326:	4293      	cmp	r3, r2
 800e328:	d117      	bne.n	800e35a <HAL_TIM_MspPostInit+0x10a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e32a:	4b0f      	ldr	r3, [pc, #60]	; (800e368 <HAL_TIM_MspPostInit+0x118>)
 800e32c:	699b      	ldr	r3, [r3, #24]
 800e32e:	4a0e      	ldr	r2, [pc, #56]	; (800e368 <HAL_TIM_MspPostInit+0x118>)
 800e330:	f043 0304 	orr.w	r3, r3, #4
 800e334:	6193      	str	r3, [r2, #24]
 800e336:	4b0c      	ldr	r3, [pc, #48]	; (800e368 <HAL_TIM_MspPostInit+0x118>)
 800e338:	699b      	ldr	r3, [r3, #24]
 800e33a:	f003 0304 	and.w	r3, r3, #4
 800e33e:	60fb      	str	r3, [r7, #12]
 800e340:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e342:	2302      	movs	r3, #2
 800e344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e346:	2302      	movs	r3, #2
 800e348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e34a:	2302      	movs	r3, #2
 800e34c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e34e:	f107 0318 	add.w	r3, r7, #24
 800e352:	4619      	mov	r1, r3
 800e354:	480a      	ldr	r0, [pc, #40]	; (800e380 <HAL_TIM_MspPostInit+0x130>)
 800e356:	f001 fe6f 	bl	8010038 <HAL_GPIO_Init>
}
 800e35a:	bf00      	nop
 800e35c:	3730      	adds	r7, #48	; 0x30
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}
 800e362:	bf00      	nop
 800e364:	40000400 	.word	0x40000400
 800e368:	40021000 	.word	0x40021000
 800e36c:	40011000 	.word	0x40011000
 800e370:	40010000 	.word	0x40010000
 800e374:	40000800 	.word	0x40000800
 800e378:	40011400 	.word	0x40011400
 800e37c:	40000c00 	.word	0x40000c00
 800e380:	40010800 	.word	0x40010800

0800e384 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800e388:	4b11      	ldr	r3, [pc, #68]	; (800e3d0 <MX_USART1_UART_Init+0x4c>)
 800e38a:	4a12      	ldr	r2, [pc, #72]	; (800e3d4 <MX_USART1_UART_Init+0x50>)
 800e38c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800e38e:	4b10      	ldr	r3, [pc, #64]	; (800e3d0 <MX_USART1_UART_Init+0x4c>)
 800e390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800e394:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e396:	4b0e      	ldr	r3, [pc, #56]	; (800e3d0 <MX_USART1_UART_Init+0x4c>)
 800e398:	2200      	movs	r2, #0
 800e39a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e39c:	4b0c      	ldr	r3, [pc, #48]	; (800e3d0 <MX_USART1_UART_Init+0x4c>)
 800e39e:	2200      	movs	r2, #0
 800e3a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e3a2:	4b0b      	ldr	r3, [pc, #44]	; (800e3d0 <MX_USART1_UART_Init+0x4c>)
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e3a8:	4b09      	ldr	r3, [pc, #36]	; (800e3d0 <MX_USART1_UART_Init+0x4c>)
 800e3aa:	220c      	movs	r2, #12
 800e3ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e3ae:	4b08      	ldr	r3, [pc, #32]	; (800e3d0 <MX_USART1_UART_Init+0x4c>)
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e3b4:	4b06      	ldr	r3, [pc, #24]	; (800e3d0 <MX_USART1_UART_Init+0x4c>)
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e3ba:	4805      	ldr	r0, [pc, #20]	; (800e3d0 <MX_USART1_UART_Init+0x4c>)
 800e3bc:	f008 fb22 	bl	8016a04 <HAL_UART_Init>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d001      	beq.n	800e3ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800e3c6:	f7fe fa97 	bl	800c8f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800e3ca:	bf00      	nop
 800e3cc:	bd80      	pop	{r7, pc}
 800e3ce:	bf00      	nop
 800e3d0:	200027e8 	.word	0x200027e8
 800e3d4:	40013800 	.word	0x40013800

0800e3d8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800e3dc:	4b11      	ldr	r3, [pc, #68]	; (800e424 <MX_USART2_UART_Init+0x4c>)
 800e3de:	4a12      	ldr	r2, [pc, #72]	; (800e428 <MX_USART2_UART_Init+0x50>)
 800e3e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800e3e2:	4b10      	ldr	r3, [pc, #64]	; (800e424 <MX_USART2_UART_Init+0x4c>)
 800e3e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800e3e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800e3ea:	4b0e      	ldr	r3, [pc, #56]	; (800e424 <MX_USART2_UART_Init+0x4c>)
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800e3f0:	4b0c      	ldr	r3, [pc, #48]	; (800e424 <MX_USART2_UART_Init+0x4c>)
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800e3f6:	4b0b      	ldr	r3, [pc, #44]	; (800e424 <MX_USART2_UART_Init+0x4c>)
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800e3fc:	4b09      	ldr	r3, [pc, #36]	; (800e424 <MX_USART2_UART_Init+0x4c>)
 800e3fe:	220c      	movs	r2, #12
 800e400:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e402:	4b08      	ldr	r3, [pc, #32]	; (800e424 <MX_USART2_UART_Init+0x4c>)
 800e404:	2200      	movs	r2, #0
 800e406:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800e408:	4b06      	ldr	r3, [pc, #24]	; (800e424 <MX_USART2_UART_Init+0x4c>)
 800e40a:	2200      	movs	r2, #0
 800e40c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800e40e:	4805      	ldr	r0, [pc, #20]	; (800e424 <MX_USART2_UART_Init+0x4c>)
 800e410:	f008 faf8 	bl	8016a04 <HAL_UART_Init>
 800e414:	4603      	mov	r3, r0
 800e416:	2b00      	cmp	r3, #0
 800e418:	d001      	beq.n	800e41e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800e41a:	f7fe fa6d 	bl	800c8f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800e41e:	bf00      	nop
 800e420:	bd80      	pop	{r7, pc}
 800e422:	bf00      	nop
 800e424:	20002830 	.word	0x20002830
 800e428:	40004400 	.word	0x40004400

0800e42c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800e430:	4b11      	ldr	r3, [pc, #68]	; (800e478 <MX_USART3_UART_Init+0x4c>)
 800e432:	4a12      	ldr	r2, [pc, #72]	; (800e47c <MX_USART3_UART_Init+0x50>)
 800e434:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800e436:	4b10      	ldr	r3, [pc, #64]	; (800e478 <MX_USART3_UART_Init+0x4c>)
 800e438:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800e43c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800e43e:	4b0e      	ldr	r3, [pc, #56]	; (800e478 <MX_USART3_UART_Init+0x4c>)
 800e440:	2200      	movs	r2, #0
 800e442:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800e444:	4b0c      	ldr	r3, [pc, #48]	; (800e478 <MX_USART3_UART_Init+0x4c>)
 800e446:	2200      	movs	r2, #0
 800e448:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800e44a:	4b0b      	ldr	r3, [pc, #44]	; (800e478 <MX_USART3_UART_Init+0x4c>)
 800e44c:	2200      	movs	r2, #0
 800e44e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800e450:	4b09      	ldr	r3, [pc, #36]	; (800e478 <MX_USART3_UART_Init+0x4c>)
 800e452:	220c      	movs	r2, #12
 800e454:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e456:	4b08      	ldr	r3, [pc, #32]	; (800e478 <MX_USART3_UART_Init+0x4c>)
 800e458:	2200      	movs	r2, #0
 800e45a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800e45c:	4b06      	ldr	r3, [pc, #24]	; (800e478 <MX_USART3_UART_Init+0x4c>)
 800e45e:	2200      	movs	r2, #0
 800e460:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 800e462:	4805      	ldr	r0, [pc, #20]	; (800e478 <MX_USART3_UART_Init+0x4c>)
 800e464:	f008 fb1e 	bl	8016aa4 <HAL_HalfDuplex_Init>
 800e468:	4603      	mov	r3, r0
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d001      	beq.n	800e472 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800e46e:	f7fe fa43 	bl	800c8f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800e472:	bf00      	nop
 800e474:	bd80      	pop	{r7, pc}
 800e476:	bf00      	nop
 800e478:	20002878 	.word	0x20002878
 800e47c:	40004800 	.word	0x40004800

0800e480 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b08c      	sub	sp, #48	; 0x30
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e488:	f107 0320 	add.w	r3, r7, #32
 800e48c:	2200      	movs	r2, #0
 800e48e:	601a      	str	r2, [r3, #0]
 800e490:	605a      	str	r2, [r3, #4]
 800e492:	609a      	str	r2, [r3, #8]
 800e494:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	4a4d      	ldr	r2, [pc, #308]	; (800e5d0 <HAL_UART_MspInit+0x150>)
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d132      	bne.n	800e506 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800e4a0:	4b4c      	ldr	r3, [pc, #304]	; (800e5d4 <HAL_UART_MspInit+0x154>)
 800e4a2:	699b      	ldr	r3, [r3, #24]
 800e4a4:	4a4b      	ldr	r2, [pc, #300]	; (800e5d4 <HAL_UART_MspInit+0x154>)
 800e4a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e4aa:	6193      	str	r3, [r2, #24]
 800e4ac:	4b49      	ldr	r3, [pc, #292]	; (800e5d4 <HAL_UART_MspInit+0x154>)
 800e4ae:	699b      	ldr	r3, [r3, #24]
 800e4b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e4b4:	61fb      	str	r3, [r7, #28]
 800e4b6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e4b8:	4b46      	ldr	r3, [pc, #280]	; (800e5d4 <HAL_UART_MspInit+0x154>)
 800e4ba:	699b      	ldr	r3, [r3, #24]
 800e4bc:	4a45      	ldr	r2, [pc, #276]	; (800e5d4 <HAL_UART_MspInit+0x154>)
 800e4be:	f043 0304 	orr.w	r3, r3, #4
 800e4c2:	6193      	str	r3, [r2, #24]
 800e4c4:	4b43      	ldr	r3, [pc, #268]	; (800e5d4 <HAL_UART_MspInit+0x154>)
 800e4c6:	699b      	ldr	r3, [r3, #24]
 800e4c8:	f003 0304 	and.w	r3, r3, #4
 800e4cc:	61bb      	str	r3, [r7, #24]
 800e4ce:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e4d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e4d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4d6:	2302      	movs	r3, #2
 800e4d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e4da:	2303      	movs	r3, #3
 800e4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e4de:	f107 0320 	add.w	r3, r7, #32
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	483c      	ldr	r0, [pc, #240]	; (800e5d8 <HAL_UART_MspInit+0x158>)
 800e4e6:	f001 fda7 	bl	8010038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e4ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e4f8:	f107 0320 	add.w	r3, r7, #32
 800e4fc:	4619      	mov	r1, r3
 800e4fe:	4836      	ldr	r0, [pc, #216]	; (800e5d8 <HAL_UART_MspInit+0x158>)
 800e500:	f001 fd9a 	bl	8010038 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800e504:	e05f      	b.n	800e5c6 <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART2)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	4a34      	ldr	r2, [pc, #208]	; (800e5dc <HAL_UART_MspInit+0x15c>)
 800e50c:	4293      	cmp	r3, r2
 800e50e:	d130      	bne.n	800e572 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800e510:	4b30      	ldr	r3, [pc, #192]	; (800e5d4 <HAL_UART_MspInit+0x154>)
 800e512:	69db      	ldr	r3, [r3, #28]
 800e514:	4a2f      	ldr	r2, [pc, #188]	; (800e5d4 <HAL_UART_MspInit+0x154>)
 800e516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e51a:	61d3      	str	r3, [r2, #28]
 800e51c:	4b2d      	ldr	r3, [pc, #180]	; (800e5d4 <HAL_UART_MspInit+0x154>)
 800e51e:	69db      	ldr	r3, [r3, #28]
 800e520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e524:	617b      	str	r3, [r7, #20]
 800e526:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e528:	4b2a      	ldr	r3, [pc, #168]	; (800e5d4 <HAL_UART_MspInit+0x154>)
 800e52a:	699b      	ldr	r3, [r3, #24]
 800e52c:	4a29      	ldr	r2, [pc, #164]	; (800e5d4 <HAL_UART_MspInit+0x154>)
 800e52e:	f043 0304 	orr.w	r3, r3, #4
 800e532:	6193      	str	r3, [r2, #24]
 800e534:	4b27      	ldr	r3, [pc, #156]	; (800e5d4 <HAL_UART_MspInit+0x154>)
 800e536:	699b      	ldr	r3, [r3, #24]
 800e538:	f003 0304 	and.w	r3, r3, #4
 800e53c:	613b      	str	r3, [r7, #16]
 800e53e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e540:	2304      	movs	r3, #4
 800e542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e544:	2302      	movs	r3, #2
 800e546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e548:	2303      	movs	r3, #3
 800e54a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e54c:	f107 0320 	add.w	r3, r7, #32
 800e550:	4619      	mov	r1, r3
 800e552:	4821      	ldr	r0, [pc, #132]	; (800e5d8 <HAL_UART_MspInit+0x158>)
 800e554:	f001 fd70 	bl	8010038 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e558:	2308      	movs	r3, #8
 800e55a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e55c:	2300      	movs	r3, #0
 800e55e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e560:	2300      	movs	r3, #0
 800e562:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e564:	f107 0320 	add.w	r3, r7, #32
 800e568:	4619      	mov	r1, r3
 800e56a:	481b      	ldr	r0, [pc, #108]	; (800e5d8 <HAL_UART_MspInit+0x158>)
 800e56c:	f001 fd64 	bl	8010038 <HAL_GPIO_Init>
}
 800e570:	e029      	b.n	800e5c6 <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART3)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	4a1a      	ldr	r2, [pc, #104]	; (800e5e0 <HAL_UART_MspInit+0x160>)
 800e578:	4293      	cmp	r3, r2
 800e57a:	d124      	bne.n	800e5c6 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 800e57c:	4b15      	ldr	r3, [pc, #84]	; (800e5d4 <HAL_UART_MspInit+0x154>)
 800e57e:	69db      	ldr	r3, [r3, #28]
 800e580:	4a14      	ldr	r2, [pc, #80]	; (800e5d4 <HAL_UART_MspInit+0x154>)
 800e582:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e586:	61d3      	str	r3, [r2, #28]
 800e588:	4b12      	ldr	r3, [pc, #72]	; (800e5d4 <HAL_UART_MspInit+0x154>)
 800e58a:	69db      	ldr	r3, [r3, #28]
 800e58c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e590:	60fb      	str	r3, [r7, #12]
 800e592:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e594:	4b0f      	ldr	r3, [pc, #60]	; (800e5d4 <HAL_UART_MspInit+0x154>)
 800e596:	699b      	ldr	r3, [r3, #24]
 800e598:	4a0e      	ldr	r2, [pc, #56]	; (800e5d4 <HAL_UART_MspInit+0x154>)
 800e59a:	f043 0308 	orr.w	r3, r3, #8
 800e59e:	6193      	str	r3, [r2, #24]
 800e5a0:	4b0c      	ldr	r3, [pc, #48]	; (800e5d4 <HAL_UART_MspInit+0x154>)
 800e5a2:	699b      	ldr	r3, [r3, #24]
 800e5a4:	f003 0308 	and.w	r3, r3, #8
 800e5a8:	60bb      	str	r3, [r7, #8]
 800e5aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e5ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e5b2:	2312      	movs	r3, #18
 800e5b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e5b6:	2303      	movs	r3, #3
 800e5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e5ba:	f107 0320 	add.w	r3, r7, #32
 800e5be:	4619      	mov	r1, r3
 800e5c0:	4808      	ldr	r0, [pc, #32]	; (800e5e4 <HAL_UART_MspInit+0x164>)
 800e5c2:	f001 fd39 	bl	8010038 <HAL_GPIO_Init>
}
 800e5c6:	bf00      	nop
 800e5c8:	3730      	adds	r7, #48	; 0x30
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
 800e5ce:	bf00      	nop
 800e5d0:	40013800 	.word	0x40013800
 800e5d4:	40021000 	.word	0x40021000
 800e5d8:	40010800 	.word	0x40010800
 800e5dc:	40004400 	.word	0x40004400
 800e5e0:	40004800 	.word	0x40004800
 800e5e4:	40010c00 	.word	0x40010c00

0800e5e8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b082      	sub	sp, #8
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	4a19      	ldr	r2, [pc, #100]	; (800e65c <HAL_UART_MspDeInit+0x74>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d10b      	bne.n	800e612 <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800e5fa:	4b19      	ldr	r3, [pc, #100]	; (800e660 <HAL_UART_MspDeInit+0x78>)
 800e5fc:	699b      	ldr	r3, [r3, #24]
 800e5fe:	4a18      	ldr	r2, [pc, #96]	; (800e660 <HAL_UART_MspDeInit+0x78>)
 800e600:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e604:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800e606:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e60a:	4816      	ldr	r0, [pc, #88]	; (800e664 <HAL_UART_MspDeInit+0x7c>)
 800e60c:	f001 fea8 	bl	8010360 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 800e610:	e01f      	b.n	800e652 <HAL_UART_MspDeInit+0x6a>
  else if(uartHandle->Instance==USART2)
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	4a14      	ldr	r2, [pc, #80]	; (800e668 <HAL_UART_MspDeInit+0x80>)
 800e618:	4293      	cmp	r3, r2
 800e61a:	d10a      	bne.n	800e632 <HAL_UART_MspDeInit+0x4a>
    __HAL_RCC_USART2_CLK_DISABLE();
 800e61c:	4b10      	ldr	r3, [pc, #64]	; (800e660 <HAL_UART_MspDeInit+0x78>)
 800e61e:	69db      	ldr	r3, [r3, #28]
 800e620:	4a0f      	ldr	r2, [pc, #60]	; (800e660 <HAL_UART_MspDeInit+0x78>)
 800e622:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e626:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800e628:	210c      	movs	r1, #12
 800e62a:	480e      	ldr	r0, [pc, #56]	; (800e664 <HAL_UART_MspDeInit+0x7c>)
 800e62c:	f001 fe98 	bl	8010360 <HAL_GPIO_DeInit>
}
 800e630:	e00f      	b.n	800e652 <HAL_UART_MspDeInit+0x6a>
  else if(uartHandle->Instance==USART3)
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	4a0d      	ldr	r2, [pc, #52]	; (800e66c <HAL_UART_MspDeInit+0x84>)
 800e638:	4293      	cmp	r3, r2
 800e63a:	d10a      	bne.n	800e652 <HAL_UART_MspDeInit+0x6a>
    __HAL_RCC_USART3_CLK_DISABLE();
 800e63c:	4b08      	ldr	r3, [pc, #32]	; (800e660 <HAL_UART_MspDeInit+0x78>)
 800e63e:	69db      	ldr	r3, [r3, #28]
 800e640:	4a07      	ldr	r2, [pc, #28]	; (800e660 <HAL_UART_MspDeInit+0x78>)
 800e642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e646:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800e648:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e64c:	4808      	ldr	r0, [pc, #32]	; (800e670 <HAL_UART_MspDeInit+0x88>)
 800e64e:	f001 fe87 	bl	8010360 <HAL_GPIO_DeInit>
}
 800e652:	bf00      	nop
 800e654:	3708      	adds	r7, #8
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}
 800e65a:	bf00      	nop
 800e65c:	40013800 	.word	0x40013800
 800e660:	40021000 	.word	0x40021000
 800e664:	40010800 	.word	0x40010800
 800e668:	40004400 	.word	0x40004400
 800e66c:	40004800 	.word	0x40004800
 800e670:	40010c00 	.word	0x40010c00

0800e674 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800e674:	f7ff fc0e 	bl	800de94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800e678:	480b      	ldr	r0, [pc, #44]	; (800e6a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800e67a:	490c      	ldr	r1, [pc, #48]	; (800e6ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800e67c:	4a0c      	ldr	r2, [pc, #48]	; (800e6b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800e67e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e680:	e002      	b.n	800e688 <LoopCopyDataInit>

0800e682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e686:	3304      	adds	r3, #4

0800e688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e68a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e68c:	d3f9      	bcc.n	800e682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e68e:	4a09      	ldr	r2, [pc, #36]	; (800e6b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800e690:	4c09      	ldr	r4, [pc, #36]	; (800e6b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800e692:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e694:	e001      	b.n	800e69a <LoopFillZerobss>

0800e696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e698:	3204      	adds	r2, #4

0800e69a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e69a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e69c:	d3fb      	bcc.n	800e696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800e69e:	f00d ffd3 	bl	801c648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e6a2:	f7fc f9df 	bl	800aa64 <main>
  bx lr
 800e6a6:	4770      	bx	lr
  ldr r0, =_sdata
 800e6a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e6ac:	200009e4 	.word	0x200009e4
  ldr r2, =_sidata
 800e6b0:	0801efd8 	.word	0x0801efd8
  ldr r2, =_sbss
 800e6b4:	200009e4 	.word	0x200009e4
  ldr r4, =_ebss
 800e6b8:	20003be8 	.word	0x20003be8

0800e6bc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e6bc:	e7fe      	b.n	800e6bc <ADC3_IRQHandler>
	...

0800e6c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e6c4:	4b08      	ldr	r3, [pc, #32]	; (800e6e8 <HAL_Init+0x28>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	4a07      	ldr	r2, [pc, #28]	; (800e6e8 <HAL_Init+0x28>)
 800e6ca:	f043 0310 	orr.w	r3, r3, #16
 800e6ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e6d0:	2003      	movs	r0, #3
 800e6d2:	f000 ff59 	bl	800f588 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e6d6:	200f      	movs	r0, #15
 800e6d8:	f000 f826 	bl	800e728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e6dc:	f7ff fa7a 	bl	800dbd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e6e0:	2300      	movs	r3, #0
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	40022000 	.word	0x40022000

0800e6ec <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800e6f0:	4b09      	ldr	r3, [pc, #36]	; (800e718 <HAL_DeInit+0x2c>)
 800e6f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e6f6:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 800e6f8:	4b07      	ldr	r3, [pc, #28]	; (800e718 <HAL_DeInit+0x2c>)
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 800e6fe:	4b06      	ldr	r3, [pc, #24]	; (800e718 <HAL_DeInit+0x2c>)
 800e700:	f04f 32ff 	mov.w	r2, #4294967295
 800e704:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 800e706:	4b04      	ldr	r3, [pc, #16]	; (800e718 <HAL_DeInit+0x2c>)
 800e708:	2200      	movs	r2, #0
 800e70a:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800e70c:	f000 f806 	bl	800e71c <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800e710:	2300      	movs	r3, #0
}
 800e712:	4618      	mov	r0, r3
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	40021000 	.word	0x40021000

0800e71c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800e71c:	b480      	push	{r7}
 800e71e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800e720:	bf00      	nop
 800e722:	46bd      	mov	sp, r7
 800e724:	bc80      	pop	{r7}
 800e726:	4770      	bx	lr

0800e728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e730:	4b12      	ldr	r3, [pc, #72]	; (800e77c <HAL_InitTick+0x54>)
 800e732:	681a      	ldr	r2, [r3, #0]
 800e734:	4b12      	ldr	r3, [pc, #72]	; (800e780 <HAL_InitTick+0x58>)
 800e736:	781b      	ldrb	r3, [r3, #0]
 800e738:	4619      	mov	r1, r3
 800e73a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e73e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e742:	fbb2 f3f3 	udiv	r3, r2, r3
 800e746:	4618      	mov	r0, r3
 800e748:	f000 ff61 	bl	800f60e <HAL_SYSTICK_Config>
 800e74c:	4603      	mov	r3, r0
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d001      	beq.n	800e756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800e752:	2301      	movs	r3, #1
 800e754:	e00e      	b.n	800e774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2b0f      	cmp	r3, #15
 800e75a:	d80a      	bhi.n	800e772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e75c:	2200      	movs	r2, #0
 800e75e:	6879      	ldr	r1, [r7, #4]
 800e760:	f04f 30ff 	mov.w	r0, #4294967295
 800e764:	f000 ff1b 	bl	800f59e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e768:	4a06      	ldr	r2, [pc, #24]	; (800e784 <HAL_InitTick+0x5c>)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e76e:	2300      	movs	r3, #0
 800e770:	e000      	b.n	800e774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800e772:	2301      	movs	r3, #1
}
 800e774:	4618      	mov	r0, r3
 800e776:	3708      	adds	r7, #8
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}
 800e77c:	20000698 	.word	0x20000698
 800e780:	200006a0 	.word	0x200006a0
 800e784:	2000069c 	.word	0x2000069c

0800e788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e788:	b480      	push	{r7}
 800e78a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e78c:	4b05      	ldr	r3, [pc, #20]	; (800e7a4 <HAL_IncTick+0x1c>)
 800e78e:	781b      	ldrb	r3, [r3, #0]
 800e790:	461a      	mov	r2, r3
 800e792:	4b05      	ldr	r3, [pc, #20]	; (800e7a8 <HAL_IncTick+0x20>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	4413      	add	r3, r2
 800e798:	4a03      	ldr	r2, [pc, #12]	; (800e7a8 <HAL_IncTick+0x20>)
 800e79a:	6013      	str	r3, [r2, #0]
}
 800e79c:	bf00      	nop
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bc80      	pop	{r7}
 800e7a2:	4770      	bx	lr
 800e7a4:	200006a0 	.word	0x200006a0
 800e7a8:	200028c0 	.word	0x200028c0

0800e7ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	af00      	add	r7, sp, #0
  return uwTick;
 800e7b0:	4b02      	ldr	r3, [pc, #8]	; (800e7bc <HAL_GetTick+0x10>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bc80      	pop	{r7}
 800e7ba:	4770      	bx	lr
 800e7bc:	200028c0 	.word	0x200028c0

0800e7c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b084      	sub	sp, #16
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e7c8:	f7ff fff0 	bl	800e7ac <HAL_GetTick>
 800e7cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7d8:	d005      	beq.n	800e7e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e7da:	4b0a      	ldr	r3, [pc, #40]	; (800e804 <HAL_Delay+0x44>)
 800e7dc:	781b      	ldrb	r3, [r3, #0]
 800e7de:	461a      	mov	r2, r3
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	4413      	add	r3, r2
 800e7e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800e7e6:	bf00      	nop
 800e7e8:	f7ff ffe0 	bl	800e7ac <HAL_GetTick>
 800e7ec:	4602      	mov	r2, r0
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	1ad3      	subs	r3, r2, r3
 800e7f2:	68fa      	ldr	r2, [r7, #12]
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d8f7      	bhi.n	800e7e8 <HAL_Delay+0x28>
  {
  }
}
 800e7f8:	bf00      	nop
 800e7fa:	bf00      	nop
 800e7fc:	3710      	adds	r7, #16
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop
 800e804:	200006a0 	.word	0x200006a0

0800e808 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800e808:	b480      	push	{r7}
 800e80a:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 800e80c:	4b02      	ldr	r3, [pc, #8]	; (800e818 <HAL_GetUIDw0+0x10>)
 800e80e:	681b      	ldr	r3, [r3, #0]
}
 800e810:	4618      	mov	r0, r3
 800e812:	46bd      	mov	sp, r7
 800e814:	bc80      	pop	{r7}
 800e816:	4770      	bx	lr
 800e818:	1ffff7e8 	.word	0x1ffff7e8

0800e81c <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800e81c:	b480      	push	{r7}
 800e81e:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800e820:	4b02      	ldr	r3, [pc, #8]	; (800e82c <HAL_GetUIDw1+0x10>)
 800e822:	681b      	ldr	r3, [r3, #0]
}
 800e824:	4618      	mov	r0, r3
 800e826:	46bd      	mov	sp, r7
 800e828:	bc80      	pop	{r7}
 800e82a:	4770      	bx	lr
 800e82c:	1ffff7ec 	.word	0x1ffff7ec

0800e830 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800e830:	b480      	push	{r7}
 800e832:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800e834:	4b02      	ldr	r3, [pc, #8]	; (800e840 <HAL_GetUIDw2+0x10>)
 800e836:	681b      	ldr	r3, [r3, #0]
}
 800e838:	4618      	mov	r0, r3
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bc80      	pop	{r7}
 800e83e:	4770      	bx	lr
 800e840:	1ffff7f0 	.word	0x1ffff7f0

0800e844 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b086      	sub	sp, #24
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e84c:	2300      	movs	r3, #0
 800e84e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800e850:	2300      	movs	r3, #0
 800e852:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800e854:	2300      	movs	r3, #0
 800e856:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800e858:	2300      	movs	r3, #0
 800e85a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d101      	bne.n	800e866 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800e862:	2301      	movs	r3, #1
 800e864:	e0ce      	b.n	800ea04 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	689b      	ldr	r3, [r3, #8]
 800e86a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e870:	2b00      	cmp	r3, #0
 800e872:	d109      	bne.n	800e888 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2200      	movs	r2, #0
 800e878:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2200      	movs	r2, #0
 800e87e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f7fb fba0 	bl	8009fc8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f000 fcdd 	bl	800f248 <ADC_ConversionStop_Disable>
 800e88e:	4603      	mov	r3, r0
 800e890:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e896:	f003 0310 	and.w	r3, r3, #16
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	f040 80a9 	bne.w	800e9f2 <HAL_ADC_Init+0x1ae>
 800e8a0:	7dfb      	ldrb	r3, [r7, #23]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	f040 80a5 	bne.w	800e9f2 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800e8b0:	f023 0302 	bic.w	r3, r3, #2
 800e8b4:	f043 0202 	orr.w	r2, r3, #2
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	4951      	ldr	r1, [pc, #324]	; (800ea0c <HAL_ADC_Init+0x1c8>)
 800e8c6:	428b      	cmp	r3, r1
 800e8c8:	d10a      	bne.n	800e8e0 <HAL_ADC_Init+0x9c>
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	69db      	ldr	r3, [r3, #28]
 800e8ce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800e8d2:	d002      	beq.n	800e8da <HAL_ADC_Init+0x96>
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	69db      	ldr	r3, [r3, #28]
 800e8d8:	e004      	b.n	800e8e4 <HAL_ADC_Init+0xa0>
 800e8da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e8de:	e001      	b.n	800e8e4 <HAL_ADC_Init+0xa0>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800e8e4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	7b1b      	ldrb	r3, [r3, #12]
 800e8ea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800e8ec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800e8ee:	68ba      	ldr	r2, [r7, #8]
 800e8f0:	4313      	orrs	r3, r2
 800e8f2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	689b      	ldr	r3, [r3, #8]
 800e8f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8fc:	d003      	beq.n	800e906 <HAL_ADC_Init+0xc2>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	689b      	ldr	r3, [r3, #8]
 800e902:	2b01      	cmp	r3, #1
 800e904:	d102      	bne.n	800e90c <HAL_ADC_Init+0xc8>
 800e906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e90a:	e000      	b.n	800e90e <HAL_ADC_Init+0xca>
 800e90c:	2300      	movs	r3, #0
 800e90e:	693a      	ldr	r2, [r7, #16]
 800e910:	4313      	orrs	r3, r2
 800e912:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	7d1b      	ldrb	r3, [r3, #20]
 800e918:	2b01      	cmp	r3, #1
 800e91a:	d119      	bne.n	800e950 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	7b1b      	ldrb	r3, [r3, #12]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d109      	bne.n	800e938 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	699b      	ldr	r3, [r3, #24]
 800e928:	3b01      	subs	r3, #1
 800e92a:	035a      	lsls	r2, r3, #13
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	4313      	orrs	r3, r2
 800e930:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e934:	613b      	str	r3, [r7, #16]
 800e936:	e00b      	b.n	800e950 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e93c:	f043 0220 	orr.w	r2, r3, #32
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e948:	f043 0201 	orr.w	r2, r3, #1
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	685b      	ldr	r3, [r3, #4]
 800e956:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	693a      	ldr	r2, [r7, #16]
 800e960:	430a      	orrs	r2, r1
 800e962:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	689a      	ldr	r2, [r3, #8]
 800e96a:	4b29      	ldr	r3, [pc, #164]	; (800ea10 <HAL_ADC_Init+0x1cc>)
 800e96c:	4013      	ands	r3, r2
 800e96e:	687a      	ldr	r2, [r7, #4]
 800e970:	6812      	ldr	r2, [r2, #0]
 800e972:	68b9      	ldr	r1, [r7, #8]
 800e974:	430b      	orrs	r3, r1
 800e976:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	689b      	ldr	r3, [r3, #8]
 800e97c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e980:	d003      	beq.n	800e98a <HAL_ADC_Init+0x146>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	689b      	ldr	r3, [r3, #8]
 800e986:	2b01      	cmp	r3, #1
 800e988:	d104      	bne.n	800e994 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	691b      	ldr	r3, [r3, #16]
 800e98e:	3b01      	subs	r3, #1
 800e990:	051b      	lsls	r3, r3, #20
 800e992:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e99a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	68fa      	ldr	r2, [r7, #12]
 800e9a4:	430a      	orrs	r2, r1
 800e9a6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	689a      	ldr	r2, [r3, #8]
 800e9ae:	4b19      	ldr	r3, [pc, #100]	; (800ea14 <HAL_ADC_Init+0x1d0>)
 800e9b0:	4013      	ands	r3, r2
 800e9b2:	68ba      	ldr	r2, [r7, #8]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d10b      	bne.n	800e9d0 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9c2:	f023 0303 	bic.w	r3, r3, #3
 800e9c6:	f043 0201 	orr.w	r2, r3, #1
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800e9ce:	e018      	b.n	800ea02 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9d4:	f023 0312 	bic.w	r3, r3, #18
 800e9d8:	f043 0210 	orr.w	r2, r3, #16
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9e4:	f043 0201 	orr.w	r2, r3, #1
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800e9f0:	e007      	b.n	800ea02 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9f6:	f043 0210 	orr.w	r2, r3, #16
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800e9fe:	2301      	movs	r3, #1
 800ea00:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800ea02:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	3718      	adds	r7, #24
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}
 800ea0c:	40013c00 	.word	0x40013c00
 800ea10:	ffe1f7fd 	.word	0xffe1f7fd
 800ea14:	ff1f0efe 	.word	0xff1f0efe

0800ea18 <HAL_ADC_DeInit>:
  *         function HAL_ADC_MspDeInit().
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b084      	sub	sp, #16
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ea20:	2300      	movs	r3, #0
 800ea22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d101      	bne.n	800ea2e <HAL_ADC_DeInit+0x16>
  {
     return HAL_ERROR;
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	e0ad      	b.n	800eb8a <HAL_ADC_DeInit+0x172>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea32:	f043 0202 	orr.w	r2, r3, #2
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f000 fc04 	bl	800f248 <ADC_ConversionStop_Disable>
 800ea40:	4603      	mov	r3, r0
 800ea42:	73fb      	strb	r3, [r7, #15]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status == HAL_OK)
 800ea44:	7bfb      	ldrb	r3, [r7, #15]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	f040 809a 	bne.w	800eb80 <HAL_ADC_DeInit+0x168>




    /* Reset register SR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	f06f 021f 	mvn.w	r2, #31
 800ea54:	601a      	str	r2, [r3, #0]
                                ADC_FLAG_JSTRT | ADC_FLAG_STRT));
                         
    /* Reset register CR1 */
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	6859      	ldr	r1, [r3, #4]
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681a      	ldr	r2, [r3, #0]
 800ea60:	4b4c      	ldr	r3, [pc, #304]	; (800eb94 <HAL_ADC_DeInit+0x17c>)
 800ea62:	400b      	ands	r3, r1
 800ea64:	6053      	str	r3, [r2, #4]
                                    ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
                                    ADC_CR1_AWDSGL  | ADC_CR1_SCAN   | ADC_CR1_JEOCIE  |   
                                    ADC_CR1_AWDIE   | ADC_CR1_EOCIE  | ADC_CR1_AWDCH    ));
    
    /* Reset register CR2 */
    CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	6899      	ldr	r1, [r3, #8]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681a      	ldr	r2, [r3, #0]
 800ea70:	4b49      	ldr	r3, [pc, #292]	; (800eb98 <HAL_ADC_DeInit+0x180>)
 800ea72:	400b      	ands	r3, r1
 800ea74:	6093      	str	r3, [r2, #8]
                                    ADC_CR2_JEXTSEL | ADC_CR2_ALIGN   | ADC_CR2_DMA      |        
                                    ADC_CR2_RSTCAL  | ADC_CR2_CAL     | ADC_CR2_CONT     |          
                                    ADC_CR2_ADON                                          ));
    
    /* Reset register SMPR1 */
    CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16 | ADC_SMPR1_SMP15 | 
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	68da      	ldr	r2, [r3, #12]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800ea84:	60da      	str	r2, [r3, #12]
                                      ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
                                      ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10                    ));
    
    /* Reset register SMPR2 */
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	691a      	ldr	r2, [r3, #16]
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800ea94:	611a      	str	r2, [r3, #16]
                                      ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
                                      ADC_SMPR2_SMP3 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | 
                                      ADC_SMPR2_SMP0                                    ));

    /* Reset register JOFR1 */
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	695b      	ldr	r3, [r3, #20]
 800ea9c:	687a      	ldr	r2, [r7, #4]
 800ea9e:	6812      	ldr	r2, [r2, #0]
 800eaa0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800eaa4:	f023 030f 	bic.w	r3, r3, #15
 800eaa8:	6153      	str	r3, [r2, #20]
    /* Reset register JOFR2 */
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	699b      	ldr	r3, [r3, #24]
 800eab0:	687a      	ldr	r2, [r7, #4]
 800eab2:	6812      	ldr	r2, [r2, #0]
 800eab4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800eab8:	f023 030f 	bic.w	r3, r3, #15
 800eabc:	6193      	str	r3, [r2, #24]
    /* Reset register JOFR3 */
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	69db      	ldr	r3, [r3, #28]
 800eac4:	687a      	ldr	r2, [r7, #4]
 800eac6:	6812      	ldr	r2, [r2, #0]
 800eac8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800eacc:	f023 030f 	bic.w	r3, r3, #15
 800ead0:	61d3      	str	r3, [r2, #28]
    /* Reset register JOFR4 */
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	6a1b      	ldr	r3, [r3, #32]
 800ead8:	687a      	ldr	r2, [r7, #4]
 800eada:	6812      	ldr	r2, [r2, #0]
 800eadc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800eae0:	f023 030f 	bic.w	r3, r3, #15
 800eae4:	6213      	str	r3, [r2, #32]
    
    /* Reset register HTR */
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaec:	687a      	ldr	r2, [r7, #4]
 800eaee:	6812      	ldr	r2, [r2, #0]
 800eaf0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800eaf4:	f023 030f 	bic.w	r3, r3, #15
 800eaf8:	6253      	str	r3, [r2, #36]	; 0x24
    /* Reset register LTR */
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb00:	687a      	ldr	r2, [r7, #4]
 800eb02:	6812      	ldr	r2, [r2, #0]
 800eb04:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800eb08:	f023 030f 	bic.w	r3, r3, #15
 800eb0c:	6293      	str	r3, [r2, #40]	; 0x28
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800eb1c:	62da      	str	r2, [r3, #44]	; 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800eb2c:	62da      	str	r2, [r3, #44]	; 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR2 */
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800eb3c:	631a      	str	r2, [r3, #48]	; 0x30
                                    ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
    
    /* Reset register SQR3 */
    CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 800eb4c:	635a      	str	r2, [r3, #52]	; 0x34
                                    ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb54:	687a      	ldr	r2, [r7, #4]
 800eb56:	6812      	ldr	r2, [r2, #0]
 800eb58:	0d9b      	lsrs	r3, r3, #22
 800eb5a:	059b      	lsls	r3, r3, #22
 800eb5c:	6393      	str	r3, [r2, #56]	; 0x38
                                    ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
                                    ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb64:	687a      	ldr	r2, [r7, #4]
 800eb66:	6812      	ldr	r2, [r2, #0]
 800eb68:	0d9b      	lsrs	r3, r3, #22
 800eb6a:	059b      	lsls	r3, r3, #22
 800eb6c:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f7fb faaa 	bl	800a0c8 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2200      	movs	r2, #0
 800eb78:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET; 
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	629a      	str	r2, [r3, #40]	; 0x28
  
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2200      	movs	r2, #0
 800eb84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800eb88:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3710      	adds	r7, #16
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	bf00      	nop
 800eb94:	ff3f0000 	.word	0xff3f0000
 800eb98:	ff0106f0 	.word	0xff0106f0

0800eb9c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b086      	sub	sp, #24
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	60f8      	str	r0, [r7, #12]
 800eba4:	60b9      	str	r1, [r7, #8]
 800eba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	4a64      	ldr	r2, [pc, #400]	; (800ed44 <HAL_ADC_Start_DMA+0x1a8>)
 800ebb2:	4293      	cmp	r3, r2
 800ebb4:	d004      	beq.n	800ebc0 <HAL_ADC_Start_DMA+0x24>
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	4a63      	ldr	r2, [pc, #396]	; (800ed48 <HAL_ADC_Start_DMA+0x1ac>)
 800ebbc:	4293      	cmp	r3, r2
 800ebbe:	d106      	bne.n	800ebce <HAL_ADC_Start_DMA+0x32>
 800ebc0:	4b60      	ldr	r3, [pc, #384]	; (800ed44 <HAL_ADC_Start_DMA+0x1a8>)
 800ebc2:	685b      	ldr	r3, [r3, #4]
 800ebc4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	f040 80b3 	bne.w	800ed34 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	d101      	bne.n	800ebdc <HAL_ADC_Start_DMA+0x40>
 800ebd8:	2302      	movs	r3, #2
 800ebda:	e0ae      	b.n	800ed3a <HAL_ADC_Start_DMA+0x19e>
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	2201      	movs	r2, #1
 800ebe0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800ebe4:	68f8      	ldr	r0, [r7, #12]
 800ebe6:	f000 fad5 	bl	800f194 <ADC_Enable>
 800ebea:	4603      	mov	r3, r0
 800ebec:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800ebee:	7dfb      	ldrb	r3, [r7, #23]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	f040 809a 	bne.w	800ed2a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebfa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ebfe:	f023 0301 	bic.w	r3, r3, #1
 800ec02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	4a4e      	ldr	r2, [pc, #312]	; (800ed48 <HAL_ADC_Start_DMA+0x1ac>)
 800ec10:	4293      	cmp	r3, r2
 800ec12:	d105      	bne.n	800ec20 <HAL_ADC_Start_DMA+0x84>
 800ec14:	4b4b      	ldr	r3, [pc, #300]	; (800ed44 <HAL_ADC_Start_DMA+0x1a8>)
 800ec16:	685b      	ldr	r3, [r3, #4]
 800ec18:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d115      	bne.n	800ec4c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec24:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d026      	beq.n	800ec88 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec3e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800ec42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800ec4a:	e01d      	b.n	800ec88 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec50:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	4a39      	ldr	r2, [pc, #228]	; (800ed44 <HAL_ADC_Start_DMA+0x1a8>)
 800ec5e:	4293      	cmp	r3, r2
 800ec60:	d004      	beq.n	800ec6c <HAL_ADC_Start_DMA+0xd0>
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	4a38      	ldr	r2, [pc, #224]	; (800ed48 <HAL_ADC_Start_DMA+0x1ac>)
 800ec68:	4293      	cmp	r3, r2
 800ec6a:	d10d      	bne.n	800ec88 <HAL_ADC_Start_DMA+0xec>
 800ec6c:	4b35      	ldr	r3, [pc, #212]	; (800ed44 <HAL_ADC_Start_DMA+0x1a8>)
 800ec6e:	685b      	ldr	r3, [r3, #4]
 800ec70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d007      	beq.n	800ec88 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800ec80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d006      	beq.n	800eca2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec98:	f023 0206 	bic.w	r2, r3, #6
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	62da      	str	r2, [r3, #44]	; 0x2c
 800eca0:	e002      	b.n	800eca8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	2200      	movs	r2, #0
 800eca6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	6a1b      	ldr	r3, [r3, #32]
 800ecb4:	4a25      	ldr	r2, [pc, #148]	; (800ed4c <HAL_ADC_Start_DMA+0x1b0>)
 800ecb6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	6a1b      	ldr	r3, [r3, #32]
 800ecbc:	4a24      	ldr	r2, [pc, #144]	; (800ed50 <HAL_ADC_Start_DMA+0x1b4>)
 800ecbe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	6a1b      	ldr	r3, [r3, #32]
 800ecc4:	4a23      	ldr	r2, [pc, #140]	; (800ed54 <HAL_ADC_Start_DMA+0x1b8>)
 800ecc6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	f06f 0202 	mvn.w	r2, #2
 800ecd0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	689a      	ldr	r2, [r3, #8]
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ece0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	6a18      	ldr	r0, [r3, #32]
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	334c      	adds	r3, #76	; 0x4c
 800ecec:	4619      	mov	r1, r3
 800ecee:	68ba      	ldr	r2, [r7, #8]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f000 fd87 	bl	800f804 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	689b      	ldr	r3, [r3, #8]
 800ecfc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800ed00:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800ed04:	d108      	bne.n	800ed18 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	689a      	ldr	r2, [r3, #8]
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800ed14:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800ed16:	e00f      	b.n	800ed38 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	689a      	ldr	r2, [r3, #8]
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ed26:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800ed28:	e006      	b.n	800ed38 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800ed32:	e001      	b.n	800ed38 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800ed34:	2301      	movs	r3, #1
 800ed36:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800ed38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3718      	adds	r7, #24
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	40012400 	.word	0x40012400
 800ed48:	40012800 	.word	0x40012800
 800ed4c:	0800f2cb 	.word	0x0800f2cb
 800ed50:	0800f347 	.word	0x0800f347
 800ed54:	0800f363 	.word	0x0800f363

0800ed58 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ed60:	2300      	movs	r3, #0
 800ed62:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ed6a:	2b01      	cmp	r3, #1
 800ed6c:	d101      	bne.n	800ed72 <HAL_ADC_Stop_DMA+0x1a>
 800ed6e:	2302      	movs	r3, #2
 800ed70:	e03a      	b.n	800ede8 <HAL_ADC_Stop_DMA+0x90>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2201      	movs	r2, #1
 800ed76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f000 fa64 	bl	800f248 <ADC_ConversionStop_Disable>
 800ed80:	4603      	mov	r3, r0
 800ed82:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800ed84:	7bfb      	ldrb	r3, [r7, #15]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d129      	bne.n	800edde <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	689a      	ldr	r2, [r3, #8]
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ed98:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	6a1b      	ldr	r3, [r3, #32]
 800ed9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800eda2:	b2db      	uxtb	r3, r3
 800eda4:	2b02      	cmp	r3, #2
 800eda6:	d11a      	bne.n	800edde <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6a1b      	ldr	r3, [r3, #32]
 800edac:	4618      	mov	r0, r3
 800edae:	f000 fd89 	bl	800f8c4 <HAL_DMA_Abort>
 800edb2:	4603      	mov	r3, r0
 800edb4:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 800edb6:	7bfb      	ldrb	r3, [r7, #15]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d10a      	bne.n	800edd2 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edc0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800edc4:	f023 0301 	bic.w	r3, r3, #1
 800edc8:	f043 0201 	orr.w	r2, r3, #1
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	629a      	str	r2, [r3, #40]	; 0x28
 800edd0:	e005      	b.n	800edde <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2200      	movs	r2, #0
 800ede2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 800ede6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3710      	adds	r7, #16
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	685b      	ldr	r3, [r3, #4]
 800ee06:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	f003 0320 	and.w	r3, r3, #32
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d03e      	beq.n	800ee90 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	f003 0302 	and.w	r3, r3, #2
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d039      	beq.n	800ee90 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee20:	f003 0310 	and.w	r3, r3, #16
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d105      	bne.n	800ee34 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	689b      	ldr	r3, [r3, #8]
 800ee3a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800ee3e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800ee42:	d11d      	bne.n	800ee80 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d119      	bne.n	800ee80 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	685a      	ldr	r2, [r3, #4]
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	f022 0220 	bic.w	r2, r2, #32
 800ee5a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d105      	bne.n	800ee80 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee78:	f043 0201 	orr.w	r2, r3, #1
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f7fd f8ff 	bl	800c084 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	f06f 0212 	mvn.w	r2, #18
 800ee8e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d04d      	beq.n	800ef36 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	f003 0304 	and.w	r3, r3, #4
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d048      	beq.n	800ef36 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eea8:	f003 0310 	and.w	r3, r3, #16
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d105      	bne.n	800eebc <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeb4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	689b      	ldr	r3, [r3, #8]
 800eec2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800eec6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800eeca:	d012      	beq.n	800eef2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d125      	bne.n	800ef26 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	689b      	ldr	r3, [r3, #8]
 800eee0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800eee4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800eee8:	d11d      	bne.n	800ef26 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d119      	bne.n	800ef26 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	685a      	ldr	r2, [r3, #4]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ef00:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d105      	bne.n	800ef26 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef1e:	f043 0201 	orr.w	r2, r3, #1
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f000 fa35 	bl	800f396 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f06f 020c 	mvn.w	r2, #12
 800ef34:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d012      	beq.n	800ef66 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	f003 0301 	and.w	r3, r3, #1
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d00d      	beq.n	800ef66 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f000 f812 	bl	800ef80 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	f06f 0201 	mvn.w	r2, #1
 800ef64:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800ef66:	bf00      	nop
 800ef68:	3710      	adds	r7, #16
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}

0800ef6e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ef6e:	b480      	push	{r7}
 800ef70:	b083      	sub	sp, #12
 800ef72:	af00      	add	r7, sp, #0
 800ef74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800ef76:	bf00      	nop
 800ef78:	370c      	adds	r7, #12
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bc80      	pop	{r7}
 800ef7e:	4770      	bx	lr

0800ef80 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800ef80:	b480      	push	{r7}
 800ef82:	b083      	sub	sp, #12
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800ef88:	bf00      	nop
 800ef8a:	370c      	adds	r7, #12
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bc80      	pop	{r7}
 800ef90:	4770      	bx	lr

0800ef92 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800ef92:	b480      	push	{r7}
 800ef94:	b083      	sub	sp, #12
 800ef96:	af00      	add	r7, sp, #0
 800ef98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800ef9a:	bf00      	nop
 800ef9c:	370c      	adds	r7, #12
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bc80      	pop	{r7}
 800efa2:	4770      	bx	lr

0800efa4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800efa4:	b480      	push	{r7}
 800efa6:	b085      	sub	sp, #20
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800efae:	2300      	movs	r3, #0
 800efb0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800efb2:	2300      	movs	r3, #0
 800efb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800efbc:	2b01      	cmp	r3, #1
 800efbe:	d101      	bne.n	800efc4 <HAL_ADC_ConfigChannel+0x20>
 800efc0:	2302      	movs	r3, #2
 800efc2:	e0dc      	b.n	800f17e <HAL_ADC_ConfigChannel+0x1da>
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2201      	movs	r2, #1
 800efc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	685b      	ldr	r3, [r3, #4]
 800efd0:	2b06      	cmp	r3, #6
 800efd2:	d81c      	bhi.n	800f00e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	685a      	ldr	r2, [r3, #4]
 800efde:	4613      	mov	r3, r2
 800efe0:	009b      	lsls	r3, r3, #2
 800efe2:	4413      	add	r3, r2
 800efe4:	3b05      	subs	r3, #5
 800efe6:	221f      	movs	r2, #31
 800efe8:	fa02 f303 	lsl.w	r3, r2, r3
 800efec:	43db      	mvns	r3, r3
 800efee:	4019      	ands	r1, r3
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	6818      	ldr	r0, [r3, #0]
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	685a      	ldr	r2, [r3, #4]
 800eff8:	4613      	mov	r3, r2
 800effa:	009b      	lsls	r3, r3, #2
 800effc:	4413      	add	r3, r2
 800effe:	3b05      	subs	r3, #5
 800f000:	fa00 f203 	lsl.w	r2, r0, r3
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	430a      	orrs	r2, r1
 800f00a:	635a      	str	r2, [r3, #52]	; 0x34
 800f00c:	e03c      	b.n	800f088 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	2b0c      	cmp	r3, #12
 800f014:	d81c      	bhi.n	800f050 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	685a      	ldr	r2, [r3, #4]
 800f020:	4613      	mov	r3, r2
 800f022:	009b      	lsls	r3, r3, #2
 800f024:	4413      	add	r3, r2
 800f026:	3b23      	subs	r3, #35	; 0x23
 800f028:	221f      	movs	r2, #31
 800f02a:	fa02 f303 	lsl.w	r3, r2, r3
 800f02e:	43db      	mvns	r3, r3
 800f030:	4019      	ands	r1, r3
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	6818      	ldr	r0, [r3, #0]
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	685a      	ldr	r2, [r3, #4]
 800f03a:	4613      	mov	r3, r2
 800f03c:	009b      	lsls	r3, r3, #2
 800f03e:	4413      	add	r3, r2
 800f040:	3b23      	subs	r3, #35	; 0x23
 800f042:	fa00 f203 	lsl.w	r2, r0, r3
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	430a      	orrs	r2, r1
 800f04c:	631a      	str	r2, [r3, #48]	; 0x30
 800f04e:	e01b      	b.n	800f088 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	685a      	ldr	r2, [r3, #4]
 800f05a:	4613      	mov	r3, r2
 800f05c:	009b      	lsls	r3, r3, #2
 800f05e:	4413      	add	r3, r2
 800f060:	3b41      	subs	r3, #65	; 0x41
 800f062:	221f      	movs	r2, #31
 800f064:	fa02 f303 	lsl.w	r3, r2, r3
 800f068:	43db      	mvns	r3, r3
 800f06a:	4019      	ands	r1, r3
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	6818      	ldr	r0, [r3, #0]
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	685a      	ldr	r2, [r3, #4]
 800f074:	4613      	mov	r3, r2
 800f076:	009b      	lsls	r3, r3, #2
 800f078:	4413      	add	r3, r2
 800f07a:	3b41      	subs	r3, #65	; 0x41
 800f07c:	fa00 f203 	lsl.w	r2, r0, r3
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	430a      	orrs	r2, r1
 800f086:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	2b09      	cmp	r3, #9
 800f08e:	d91c      	bls.n	800f0ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	68d9      	ldr	r1, [r3, #12]
 800f096:	683b      	ldr	r3, [r7, #0]
 800f098:	681a      	ldr	r2, [r3, #0]
 800f09a:	4613      	mov	r3, r2
 800f09c:	005b      	lsls	r3, r3, #1
 800f09e:	4413      	add	r3, r2
 800f0a0:	3b1e      	subs	r3, #30
 800f0a2:	2207      	movs	r2, #7
 800f0a4:	fa02 f303 	lsl.w	r3, r2, r3
 800f0a8:	43db      	mvns	r3, r3
 800f0aa:	4019      	ands	r1, r3
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	6898      	ldr	r0, [r3, #8]
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	681a      	ldr	r2, [r3, #0]
 800f0b4:	4613      	mov	r3, r2
 800f0b6:	005b      	lsls	r3, r3, #1
 800f0b8:	4413      	add	r3, r2
 800f0ba:	3b1e      	subs	r3, #30
 800f0bc:	fa00 f203 	lsl.w	r2, r0, r3
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	430a      	orrs	r2, r1
 800f0c6:	60da      	str	r2, [r3, #12]
 800f0c8:	e019      	b.n	800f0fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	6919      	ldr	r1, [r3, #16]
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	681a      	ldr	r2, [r3, #0]
 800f0d4:	4613      	mov	r3, r2
 800f0d6:	005b      	lsls	r3, r3, #1
 800f0d8:	4413      	add	r3, r2
 800f0da:	2207      	movs	r2, #7
 800f0dc:	fa02 f303 	lsl.w	r3, r2, r3
 800f0e0:	43db      	mvns	r3, r3
 800f0e2:	4019      	ands	r1, r3
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	6898      	ldr	r0, [r3, #8]
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	681a      	ldr	r2, [r3, #0]
 800f0ec:	4613      	mov	r3, r2
 800f0ee:	005b      	lsls	r3, r3, #1
 800f0f0:	4413      	add	r3, r2
 800f0f2:	fa00 f203 	lsl.w	r2, r0, r3
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	430a      	orrs	r2, r1
 800f0fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	2b10      	cmp	r3, #16
 800f104:	d003      	beq.n	800f10e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800f10a:	2b11      	cmp	r3, #17
 800f10c:	d132      	bne.n	800f174 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	4a1d      	ldr	r2, [pc, #116]	; (800f188 <HAL_ADC_ConfigChannel+0x1e4>)
 800f114:	4293      	cmp	r3, r2
 800f116:	d125      	bne.n	800f164 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	689b      	ldr	r3, [r3, #8]
 800f11e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f122:	2b00      	cmp	r3, #0
 800f124:	d126      	bne.n	800f174 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	689a      	ldr	r2, [r3, #8]
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800f134:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	2b10      	cmp	r3, #16
 800f13c:	d11a      	bne.n	800f174 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800f13e:	4b13      	ldr	r3, [pc, #76]	; (800f18c <HAL_ADC_ConfigChannel+0x1e8>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	4a13      	ldr	r2, [pc, #76]	; (800f190 <HAL_ADC_ConfigChannel+0x1ec>)
 800f144:	fba2 2303 	umull	r2, r3, r2, r3
 800f148:	0c9a      	lsrs	r2, r3, #18
 800f14a:	4613      	mov	r3, r2
 800f14c:	009b      	lsls	r3, r3, #2
 800f14e:	4413      	add	r3, r2
 800f150:	005b      	lsls	r3, r3, #1
 800f152:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800f154:	e002      	b.n	800f15c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	3b01      	subs	r3, #1
 800f15a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d1f9      	bne.n	800f156 <HAL_ADC_ConfigChannel+0x1b2>
 800f162:	e007      	b.n	800f174 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f168:	f043 0220 	orr.w	r2, r3, #32
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800f170:	2301      	movs	r3, #1
 800f172:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2200      	movs	r2, #0
 800f178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800f17c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f17e:	4618      	mov	r0, r3
 800f180:	3714      	adds	r7, #20
 800f182:	46bd      	mov	sp, r7
 800f184:	bc80      	pop	{r7}
 800f186:	4770      	bx	lr
 800f188:	40012400 	.word	0x40012400
 800f18c:	20000698 	.word	0x20000698
 800f190:	431bde83 	.word	0x431bde83

0800f194 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f19c:	2300      	movs	r3, #0
 800f19e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	689b      	ldr	r3, [r3, #8]
 800f1aa:	f003 0301 	and.w	r3, r3, #1
 800f1ae:	2b01      	cmp	r3, #1
 800f1b0:	d040      	beq.n	800f234 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	689a      	ldr	r2, [r3, #8]
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	f042 0201 	orr.w	r2, r2, #1
 800f1c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800f1c2:	4b1f      	ldr	r3, [pc, #124]	; (800f240 <ADC_Enable+0xac>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	4a1f      	ldr	r2, [pc, #124]	; (800f244 <ADC_Enable+0xb0>)
 800f1c8:	fba2 2303 	umull	r2, r3, r2, r3
 800f1cc:	0c9b      	lsrs	r3, r3, #18
 800f1ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800f1d0:	e002      	b.n	800f1d8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	3b01      	subs	r3, #1
 800f1d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d1f9      	bne.n	800f1d2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800f1de:	f7ff fae5 	bl	800e7ac <HAL_GetTick>
 800f1e2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800f1e4:	e01f      	b.n	800f226 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800f1e6:	f7ff fae1 	bl	800e7ac <HAL_GetTick>
 800f1ea:	4602      	mov	r2, r0
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	1ad3      	subs	r3, r2, r3
 800f1f0:	2b02      	cmp	r3, #2
 800f1f2:	d918      	bls.n	800f226 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	689b      	ldr	r3, [r3, #8]
 800f1fa:	f003 0301 	and.w	r3, r3, #1
 800f1fe:	2b01      	cmp	r3, #1
 800f200:	d011      	beq.n	800f226 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f206:	f043 0210 	orr.w	r2, r3, #16
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f212:	f043 0201 	orr.w	r2, r3, #1
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2200      	movs	r2, #0
 800f21e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800f222:	2301      	movs	r3, #1
 800f224:	e007      	b.n	800f236 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	689b      	ldr	r3, [r3, #8]
 800f22c:	f003 0301 	and.w	r3, r3, #1
 800f230:	2b01      	cmp	r3, #1
 800f232:	d1d8      	bne.n	800f1e6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800f234:	2300      	movs	r3, #0
}
 800f236:	4618      	mov	r0, r3
 800f238:	3710      	adds	r7, #16
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
 800f23e:	bf00      	nop
 800f240:	20000698 	.word	0x20000698
 800f244:	431bde83 	.word	0x431bde83

0800f248 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b084      	sub	sp, #16
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800f250:	2300      	movs	r3, #0
 800f252:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	689b      	ldr	r3, [r3, #8]
 800f25a:	f003 0301 	and.w	r3, r3, #1
 800f25e:	2b01      	cmp	r3, #1
 800f260:	d12e      	bne.n	800f2c0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	689a      	ldr	r2, [r3, #8]
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	f022 0201 	bic.w	r2, r2, #1
 800f270:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800f272:	f7ff fa9b 	bl	800e7ac <HAL_GetTick>
 800f276:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800f278:	e01b      	b.n	800f2b2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800f27a:	f7ff fa97 	bl	800e7ac <HAL_GetTick>
 800f27e:	4602      	mov	r2, r0
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	1ad3      	subs	r3, r2, r3
 800f284:	2b02      	cmp	r3, #2
 800f286:	d914      	bls.n	800f2b2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	689b      	ldr	r3, [r3, #8]
 800f28e:	f003 0301 	and.w	r3, r3, #1
 800f292:	2b01      	cmp	r3, #1
 800f294:	d10d      	bne.n	800f2b2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f29a:	f043 0210 	orr.w	r2, r3, #16
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2a6:	f043 0201 	orr.w	r2, r3, #1
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	e007      	b.n	800f2c2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	689b      	ldr	r3, [r3, #8]
 800f2b8:	f003 0301 	and.w	r3, r3, #1
 800f2bc:	2b01      	cmp	r3, #1
 800f2be:	d0dc      	beq.n	800f27a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800f2c0:	2300      	movs	r3, #0
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3710      	adds	r7, #16
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}

0800f2ca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800f2ca:	b580      	push	{r7, lr}
 800f2cc:	b084      	sub	sp, #16
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2d6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d127      	bne.n	800f334 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	689b      	ldr	r3, [r3, #8]
 800f2f6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800f2fa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800f2fe:	d115      	bne.n	800f32c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800f304:	2b00      	cmp	r3, #0
 800f306:	d111      	bne.n	800f32c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f30c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d105      	bne.n	800f32c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f324:	f043 0201 	orr.w	r2, r3, #1
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800f32c:	68f8      	ldr	r0, [r7, #12]
 800f32e:	f7fc fea9 	bl	800c084 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800f332:	e004      	b.n	800f33e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	6a1b      	ldr	r3, [r3, #32]
 800f338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	4798      	blx	r3
}
 800f33e:	bf00      	nop
 800f340:	3710      	adds	r7, #16
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}

0800f346 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800f346:	b580      	push	{r7, lr}
 800f348:	b084      	sub	sp, #16
 800f34a:	af00      	add	r7, sp, #0
 800f34c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f352:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800f354:	68f8      	ldr	r0, [r7, #12]
 800f356:	f7ff fe0a 	bl	800ef6e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f35a:	bf00      	nop
 800f35c:	3710      	adds	r7, #16
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd80      	pop	{r7, pc}

0800f362 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800f362:	b580      	push	{r7, lr}
 800f364:	b084      	sub	sp, #16
 800f366:	af00      	add	r7, sp, #0
 800f368:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f36e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f374:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f380:	f043 0204 	orr.w	r2, r3, #4
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800f388:	68f8      	ldr	r0, [r7, #12]
 800f38a:	f7ff fe02 	bl	800ef92 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800f38e:	bf00      	nop
 800f390:	3710      	adds	r7, #16
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}

0800f396 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800f396:	b480      	push	{r7}
 800f398:	b083      	sub	sp, #12
 800f39a:	af00      	add	r7, sp, #0
 800f39c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800f39e:	bf00      	nop
 800f3a0:	370c      	adds	r7, #12
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bc80      	pop	{r7}
 800f3a6:	4770      	bx	lr

0800f3a8 <__NVIC_SetPriorityGrouping>:
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b085      	sub	sp, #20
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f003 0307 	and.w	r3, r3, #7
 800f3b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f3b8:	4b0c      	ldr	r3, [pc, #48]	; (800f3ec <__NVIC_SetPriorityGrouping+0x44>)
 800f3ba:	68db      	ldr	r3, [r3, #12]
 800f3bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f3be:	68ba      	ldr	r2, [r7, #8]
 800f3c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f3c4:	4013      	ands	r3, r2
 800f3c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f3d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f3d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f3d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f3da:	4a04      	ldr	r2, [pc, #16]	; (800f3ec <__NVIC_SetPriorityGrouping+0x44>)
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	60d3      	str	r3, [r2, #12]
}
 800f3e0:	bf00      	nop
 800f3e2:	3714      	adds	r7, #20
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bc80      	pop	{r7}
 800f3e8:	4770      	bx	lr
 800f3ea:	bf00      	nop
 800f3ec:	e000ed00 	.word	0xe000ed00

0800f3f0 <__NVIC_GetPriorityGrouping>:
{
 800f3f0:	b480      	push	{r7}
 800f3f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f3f4:	4b04      	ldr	r3, [pc, #16]	; (800f408 <__NVIC_GetPriorityGrouping+0x18>)
 800f3f6:	68db      	ldr	r3, [r3, #12]
 800f3f8:	0a1b      	lsrs	r3, r3, #8
 800f3fa:	f003 0307 	and.w	r3, r3, #7
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	46bd      	mov	sp, r7
 800f402:	bc80      	pop	{r7}
 800f404:	4770      	bx	lr
 800f406:	bf00      	nop
 800f408:	e000ed00 	.word	0xe000ed00

0800f40c <__NVIC_EnableIRQ>:
{
 800f40c:	b480      	push	{r7}
 800f40e:	b083      	sub	sp, #12
 800f410:	af00      	add	r7, sp, #0
 800f412:	4603      	mov	r3, r0
 800f414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	db0b      	blt.n	800f436 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f41e:	79fb      	ldrb	r3, [r7, #7]
 800f420:	f003 021f 	and.w	r2, r3, #31
 800f424:	4906      	ldr	r1, [pc, #24]	; (800f440 <__NVIC_EnableIRQ+0x34>)
 800f426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f42a:	095b      	lsrs	r3, r3, #5
 800f42c:	2001      	movs	r0, #1
 800f42e:	fa00 f202 	lsl.w	r2, r0, r2
 800f432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800f436:	bf00      	nop
 800f438:	370c      	adds	r7, #12
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bc80      	pop	{r7}
 800f43e:	4770      	bx	lr
 800f440:	e000e100 	.word	0xe000e100

0800f444 <__NVIC_DisableIRQ>:
{
 800f444:	b480      	push	{r7}
 800f446:	b083      	sub	sp, #12
 800f448:	af00      	add	r7, sp, #0
 800f44a:	4603      	mov	r3, r0
 800f44c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f44e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f452:	2b00      	cmp	r3, #0
 800f454:	db12      	blt.n	800f47c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f456:	79fb      	ldrb	r3, [r7, #7]
 800f458:	f003 021f 	and.w	r2, r3, #31
 800f45c:	490a      	ldr	r1, [pc, #40]	; (800f488 <__NVIC_DisableIRQ+0x44>)
 800f45e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f462:	095b      	lsrs	r3, r3, #5
 800f464:	2001      	movs	r0, #1
 800f466:	fa00 f202 	lsl.w	r2, r0, r2
 800f46a:	3320      	adds	r3, #32
 800f46c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800f470:	f3bf 8f4f 	dsb	sy
}
 800f474:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800f476:	f3bf 8f6f 	isb	sy
}
 800f47a:	bf00      	nop
}
 800f47c:	bf00      	nop
 800f47e:	370c      	adds	r7, #12
 800f480:	46bd      	mov	sp, r7
 800f482:	bc80      	pop	{r7}
 800f484:	4770      	bx	lr
 800f486:	bf00      	nop
 800f488:	e000e100 	.word	0xe000e100

0800f48c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b083      	sub	sp, #12
 800f490:	af00      	add	r7, sp, #0
 800f492:	4603      	mov	r3, r0
 800f494:	6039      	str	r1, [r7, #0]
 800f496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	db0a      	blt.n	800f4b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	b2da      	uxtb	r2, r3
 800f4a4:	490c      	ldr	r1, [pc, #48]	; (800f4d8 <__NVIC_SetPriority+0x4c>)
 800f4a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f4aa:	0112      	lsls	r2, r2, #4
 800f4ac:	b2d2      	uxtb	r2, r2
 800f4ae:	440b      	add	r3, r1
 800f4b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800f4b4:	e00a      	b.n	800f4cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	b2da      	uxtb	r2, r3
 800f4ba:	4908      	ldr	r1, [pc, #32]	; (800f4dc <__NVIC_SetPriority+0x50>)
 800f4bc:	79fb      	ldrb	r3, [r7, #7]
 800f4be:	f003 030f 	and.w	r3, r3, #15
 800f4c2:	3b04      	subs	r3, #4
 800f4c4:	0112      	lsls	r2, r2, #4
 800f4c6:	b2d2      	uxtb	r2, r2
 800f4c8:	440b      	add	r3, r1
 800f4ca:	761a      	strb	r2, [r3, #24]
}
 800f4cc:	bf00      	nop
 800f4ce:	370c      	adds	r7, #12
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bc80      	pop	{r7}
 800f4d4:	4770      	bx	lr
 800f4d6:	bf00      	nop
 800f4d8:	e000e100 	.word	0xe000e100
 800f4dc:	e000ed00 	.word	0xe000ed00

0800f4e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800f4e0:	b480      	push	{r7}
 800f4e2:	b089      	sub	sp, #36	; 0x24
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	60f8      	str	r0, [r7, #12]
 800f4e8:	60b9      	str	r1, [r7, #8]
 800f4ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	f003 0307 	and.w	r3, r3, #7
 800f4f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f4f4:	69fb      	ldr	r3, [r7, #28]
 800f4f6:	f1c3 0307 	rsb	r3, r3, #7
 800f4fa:	2b04      	cmp	r3, #4
 800f4fc:	bf28      	it	cs
 800f4fe:	2304      	movcs	r3, #4
 800f500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f502:	69fb      	ldr	r3, [r7, #28]
 800f504:	3304      	adds	r3, #4
 800f506:	2b06      	cmp	r3, #6
 800f508:	d902      	bls.n	800f510 <NVIC_EncodePriority+0x30>
 800f50a:	69fb      	ldr	r3, [r7, #28]
 800f50c:	3b03      	subs	r3, #3
 800f50e:	e000      	b.n	800f512 <NVIC_EncodePriority+0x32>
 800f510:	2300      	movs	r3, #0
 800f512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f514:	f04f 32ff 	mov.w	r2, #4294967295
 800f518:	69bb      	ldr	r3, [r7, #24]
 800f51a:	fa02 f303 	lsl.w	r3, r2, r3
 800f51e:	43da      	mvns	r2, r3
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	401a      	ands	r2, r3
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f528:	f04f 31ff 	mov.w	r1, #4294967295
 800f52c:	697b      	ldr	r3, [r7, #20]
 800f52e:	fa01 f303 	lsl.w	r3, r1, r3
 800f532:	43d9      	mvns	r1, r3
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f538:	4313      	orrs	r3, r2
         );
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3724      	adds	r7, #36	; 0x24
 800f53e:	46bd      	mov	sp, r7
 800f540:	bc80      	pop	{r7}
 800f542:	4770      	bx	lr

0800f544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b082      	sub	sp, #8
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	3b01      	subs	r3, #1
 800f550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f554:	d301      	bcc.n	800f55a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800f556:	2301      	movs	r3, #1
 800f558:	e00f      	b.n	800f57a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f55a:	4a0a      	ldr	r2, [pc, #40]	; (800f584 <SysTick_Config+0x40>)
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	3b01      	subs	r3, #1
 800f560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800f562:	210f      	movs	r1, #15
 800f564:	f04f 30ff 	mov.w	r0, #4294967295
 800f568:	f7ff ff90 	bl	800f48c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f56c:	4b05      	ldr	r3, [pc, #20]	; (800f584 <SysTick_Config+0x40>)
 800f56e:	2200      	movs	r2, #0
 800f570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f572:	4b04      	ldr	r3, [pc, #16]	; (800f584 <SysTick_Config+0x40>)
 800f574:	2207      	movs	r2, #7
 800f576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f578:	2300      	movs	r3, #0
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	3708      	adds	r7, #8
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}
 800f582:	bf00      	nop
 800f584:	e000e010 	.word	0xe000e010

0800f588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b082      	sub	sp, #8
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f7ff ff09 	bl	800f3a8 <__NVIC_SetPriorityGrouping>
}
 800f596:	bf00      	nop
 800f598:	3708      	adds	r7, #8
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}

0800f59e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f59e:	b580      	push	{r7, lr}
 800f5a0:	b086      	sub	sp, #24
 800f5a2:	af00      	add	r7, sp, #0
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	60b9      	str	r1, [r7, #8]
 800f5a8:	607a      	str	r2, [r7, #4]
 800f5aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800f5b0:	f7ff ff1e 	bl	800f3f0 <__NVIC_GetPriorityGrouping>
 800f5b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f5b6:	687a      	ldr	r2, [r7, #4]
 800f5b8:	68b9      	ldr	r1, [r7, #8]
 800f5ba:	6978      	ldr	r0, [r7, #20]
 800f5bc:	f7ff ff90 	bl	800f4e0 <NVIC_EncodePriority>
 800f5c0:	4602      	mov	r2, r0
 800f5c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5c6:	4611      	mov	r1, r2
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	f7ff ff5f 	bl	800f48c <__NVIC_SetPriority>
}
 800f5ce:	bf00      	nop
 800f5d0:	3718      	adds	r7, #24
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}

0800f5d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f5d6:	b580      	push	{r7, lr}
 800f5d8:	b082      	sub	sp, #8
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	4603      	mov	r3, r0
 800f5de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f5e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f7ff ff11 	bl	800f40c <__NVIC_EnableIRQ>
}
 800f5ea:	bf00      	nop
 800f5ec:	3708      	adds	r7, #8
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}

0800f5f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800f5f2:	b580      	push	{r7, lr}
 800f5f4:	b082      	sub	sp, #8
 800f5f6:	af00      	add	r7, sp, #0
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800f5fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f600:	4618      	mov	r0, r3
 800f602:	f7ff ff1f 	bl	800f444 <__NVIC_DisableIRQ>
}
 800f606:	bf00      	nop
 800f608:	3708      	adds	r7, #8
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}

0800f60e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800f60e:	b580      	push	{r7, lr}
 800f610:	b082      	sub	sp, #8
 800f612:	af00      	add	r7, sp, #0
 800f614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f7ff ff94 	bl	800f544 <SysTick_Config>
 800f61c:	4603      	mov	r3, r0
}
 800f61e:	4618      	mov	r0, r3
 800f620:	3708      	adds	r7, #8
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
	...

0800f628 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f628:	b480      	push	{r7}
 800f62a:	b085      	sub	sp, #20
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800f630:	2300      	movs	r3, #0
 800f632:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d101      	bne.n	800f63e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800f63a:	2301      	movs	r3, #1
 800f63c:	e059      	b.n	800f6f2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	461a      	mov	r2, r3
 800f644:	4b2d      	ldr	r3, [pc, #180]	; (800f6fc <HAL_DMA_Init+0xd4>)
 800f646:	429a      	cmp	r2, r3
 800f648:	d80f      	bhi.n	800f66a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	461a      	mov	r2, r3
 800f650:	4b2b      	ldr	r3, [pc, #172]	; (800f700 <HAL_DMA_Init+0xd8>)
 800f652:	4413      	add	r3, r2
 800f654:	4a2b      	ldr	r2, [pc, #172]	; (800f704 <HAL_DMA_Init+0xdc>)
 800f656:	fba2 2303 	umull	r2, r3, r2, r3
 800f65a:	091b      	lsrs	r3, r3, #4
 800f65c:	009a      	lsls	r2, r3, #2
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	4a28      	ldr	r2, [pc, #160]	; (800f708 <HAL_DMA_Init+0xe0>)
 800f666:	63da      	str	r2, [r3, #60]	; 0x3c
 800f668:	e00e      	b.n	800f688 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	461a      	mov	r2, r3
 800f670:	4b26      	ldr	r3, [pc, #152]	; (800f70c <HAL_DMA_Init+0xe4>)
 800f672:	4413      	add	r3, r2
 800f674:	4a23      	ldr	r2, [pc, #140]	; (800f704 <HAL_DMA_Init+0xdc>)
 800f676:	fba2 2303 	umull	r2, r3, r2, r3
 800f67a:	091b      	lsrs	r3, r3, #4
 800f67c:	009a      	lsls	r2, r3, #2
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	4a22      	ldr	r2, [pc, #136]	; (800f710 <HAL_DMA_Init+0xe8>)
 800f686:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2202      	movs	r2, #2
 800f68c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800f69e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800f6a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800f6ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	68db      	ldr	r3, [r3, #12]
 800f6b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f6b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	695b      	ldr	r3, [r3, #20]
 800f6be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f6c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	69db      	ldr	r3, [r3, #28]
 800f6ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800f6cc:	68fa      	ldr	r2, [r7, #12]
 800f6ce:	4313      	orrs	r3, r2
 800f6d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	68fa      	ldr	r2, [r7, #12]
 800f6d8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2201      	movs	r2, #1
 800f6e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800f6f0:	2300      	movs	r3, #0
}
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	3714      	adds	r7, #20
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bc80      	pop	{r7}
 800f6fa:	4770      	bx	lr
 800f6fc:	40020407 	.word	0x40020407
 800f700:	bffdfff8 	.word	0xbffdfff8
 800f704:	cccccccd 	.word	0xcccccccd
 800f708:	40020000 	.word	0x40020000
 800f70c:	bffdfbf8 	.word	0xbffdfbf8
 800f710:	40020400 	.word	0x40020400

0800f714 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800f714:	b480      	push	{r7}
 800f716:	b083      	sub	sp, #12
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d101      	bne.n	800f726 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800f722:	2301      	movs	r3, #1
 800f724:	e05c      	b.n	800f7e0 <HAL_DMA_DeInit+0xcc>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	681a      	ldr	r2, [r3, #0]
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	f022 0201 	bic.w	r2, r2, #1
 800f734:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	2200      	movs	r2, #0
 800f73c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	2200      	movs	r2, #0
 800f744:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	2200      	movs	r2, #0
 800f74c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	2200      	movs	r2, #0
 800f754:	60da      	str	r2, [r3, #12]

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	461a      	mov	r2, r3
 800f75c:	4b23      	ldr	r3, [pc, #140]	; (800f7ec <HAL_DMA_DeInit+0xd8>)
 800f75e:	429a      	cmp	r2, r3
 800f760:	d80f      	bhi.n	800f782 <HAL_DMA_DeInit+0x6e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	461a      	mov	r2, r3
 800f768:	4b21      	ldr	r3, [pc, #132]	; (800f7f0 <HAL_DMA_DeInit+0xdc>)
 800f76a:	4413      	add	r3, r2
 800f76c:	4a21      	ldr	r2, [pc, #132]	; (800f7f4 <HAL_DMA_DeInit+0xe0>)
 800f76e:	fba2 2303 	umull	r2, r3, r2, r3
 800f772:	091b      	lsrs	r3, r3, #4
 800f774:	009a      	lsls	r2, r3, #2
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	4a1e      	ldr	r2, [pc, #120]	; (800f7f8 <HAL_DMA_DeInit+0xe4>)
 800f77e:	63da      	str	r2, [r3, #60]	; 0x3c
 800f780:	e00e      	b.n	800f7a0 <HAL_DMA_DeInit+0x8c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	461a      	mov	r2, r3
 800f788:	4b1c      	ldr	r3, [pc, #112]	; (800f7fc <HAL_DMA_DeInit+0xe8>)
 800f78a:	4413      	add	r3, r2
 800f78c:	4a19      	ldr	r2, [pc, #100]	; (800f7f4 <HAL_DMA_DeInit+0xe0>)
 800f78e:	fba2 2303 	umull	r2, r3, r2, r3
 800f792:	091b      	lsrs	r3, r3, #4
 800f794:	009a      	lsls	r2, r3, #2
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	4a18      	ldr	r2, [pc, #96]	; (800f800 <HAL_DMA_DeInit+0xec>)
 800f79e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7a8:	2101      	movs	r1, #1
 800f7aa:	fa01 f202 	lsl.w	r2, r1, r2
 800f7ae:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2200      	movs	r2, #0
 800f7c0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2200      	movs	r2, #0
 800f7da:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800f7de:	2300      	movs	r3, #0
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	370c      	adds	r7, #12
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bc80      	pop	{r7}
 800f7e8:	4770      	bx	lr
 800f7ea:	bf00      	nop
 800f7ec:	40020407 	.word	0x40020407
 800f7f0:	bffdfff8 	.word	0xbffdfff8
 800f7f4:	cccccccd 	.word	0xcccccccd
 800f7f8:	40020000 	.word	0x40020000
 800f7fc:	bffdfbf8 	.word	0xbffdfbf8
 800f800:	40020400 	.word	0x40020400

0800f804 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b086      	sub	sp, #24
 800f808:	af00      	add	r7, sp, #0
 800f80a:	60f8      	str	r0, [r7, #12]
 800f80c:	60b9      	str	r1, [r7, #8]
 800f80e:	607a      	str	r2, [r7, #4]
 800f810:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f812:	2300      	movs	r3, #0
 800f814:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f81c:	2b01      	cmp	r3, #1
 800f81e:	d101      	bne.n	800f824 <HAL_DMA_Start_IT+0x20>
 800f820:	2302      	movs	r3, #2
 800f822:	e04b      	b.n	800f8bc <HAL_DMA_Start_IT+0xb8>
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	2201      	movs	r2, #1
 800f828:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f832:	b2db      	uxtb	r3, r3
 800f834:	2b01      	cmp	r3, #1
 800f836:	d13a      	bne.n	800f8ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	2202      	movs	r2, #2
 800f83c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	2200      	movs	r2, #0
 800f844:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	681a      	ldr	r2, [r3, #0]
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	f022 0201 	bic.w	r2, r2, #1
 800f854:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	687a      	ldr	r2, [r7, #4]
 800f85a:	68b9      	ldr	r1, [r7, #8]
 800f85c:	68f8      	ldr	r0, [r7, #12]
 800f85e:	f000 fbbe 	bl	800ffde <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f866:	2b00      	cmp	r3, #0
 800f868:	d008      	beq.n	800f87c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	681a      	ldr	r2, [r3, #0]
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	f042 020e 	orr.w	r2, r2, #14
 800f878:	601a      	str	r2, [r3, #0]
 800f87a:	e00f      	b.n	800f89c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	681a      	ldr	r2, [r3, #0]
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	f022 0204 	bic.w	r2, r2, #4
 800f88a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	681a      	ldr	r2, [r3, #0]
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	f042 020a 	orr.w	r2, r2, #10
 800f89a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	681a      	ldr	r2, [r3, #0]
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	f042 0201 	orr.w	r2, r2, #1
 800f8aa:	601a      	str	r2, [r3, #0]
 800f8ac:	e005      	b.n	800f8ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800f8b6:	2302      	movs	r3, #2
 800f8b8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800f8ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3718      	adds	r7, #24
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}

0800f8c4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800f8c4:	b480      	push	{r7}
 800f8c6:	b085      	sub	sp, #20
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f8d6:	b2db      	uxtb	r3, r3
 800f8d8:	2b02      	cmp	r3, #2
 800f8da:	d008      	beq.n	800f8ee <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	2204      	movs	r2, #4
 800f8e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	e020      	b.n	800f930 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	681a      	ldr	r2, [r3, #0]
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	f022 020e 	bic.w	r2, r2, #14
 800f8fc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	681a      	ldr	r2, [r3, #0]
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	f022 0201 	bic.w	r2, r2, #1
 800f90c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f916:	2101      	movs	r1, #1
 800f918:	fa01 f202 	lsl.w	r2, r1, r2
 800f91c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2201      	movs	r2, #1
 800f922:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2200      	movs	r2, #0
 800f92a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800f92e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f930:	4618      	mov	r0, r3
 800f932:	3714      	adds	r7, #20
 800f934:	46bd      	mov	sp, r7
 800f936:	bc80      	pop	{r7}
 800f938:	4770      	bx	lr
	...

0800f93c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b084      	sub	sp, #16
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f944:	2300      	movs	r3, #0
 800f946:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f94e:	b2db      	uxtb	r3, r3
 800f950:	2b02      	cmp	r3, #2
 800f952:	d005      	beq.n	800f960 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2204      	movs	r2, #4
 800f958:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800f95a:	2301      	movs	r3, #1
 800f95c:	73fb      	strb	r3, [r7, #15]
 800f95e:	e0d6      	b.n	800fb0e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	681a      	ldr	r2, [r3, #0]
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	f022 020e 	bic.w	r2, r2, #14
 800f96e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	681a      	ldr	r2, [r3, #0]
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	f022 0201 	bic.w	r2, r2, #1
 800f97e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	461a      	mov	r2, r3
 800f986:	4b64      	ldr	r3, [pc, #400]	; (800fb18 <HAL_DMA_Abort_IT+0x1dc>)
 800f988:	429a      	cmp	r2, r3
 800f98a:	d958      	bls.n	800fa3e <HAL_DMA_Abort_IT+0x102>
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	4a62      	ldr	r2, [pc, #392]	; (800fb1c <HAL_DMA_Abort_IT+0x1e0>)
 800f992:	4293      	cmp	r3, r2
 800f994:	d04f      	beq.n	800fa36 <HAL_DMA_Abort_IT+0xfa>
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	4a61      	ldr	r2, [pc, #388]	; (800fb20 <HAL_DMA_Abort_IT+0x1e4>)
 800f99c:	4293      	cmp	r3, r2
 800f99e:	d048      	beq.n	800fa32 <HAL_DMA_Abort_IT+0xf6>
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	4a5f      	ldr	r2, [pc, #380]	; (800fb24 <HAL_DMA_Abort_IT+0x1e8>)
 800f9a6:	4293      	cmp	r3, r2
 800f9a8:	d040      	beq.n	800fa2c <HAL_DMA_Abort_IT+0xf0>
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	4a5e      	ldr	r2, [pc, #376]	; (800fb28 <HAL_DMA_Abort_IT+0x1ec>)
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	d038      	beq.n	800fa26 <HAL_DMA_Abort_IT+0xea>
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	4a5c      	ldr	r2, [pc, #368]	; (800fb2c <HAL_DMA_Abort_IT+0x1f0>)
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	d030      	beq.n	800fa20 <HAL_DMA_Abort_IT+0xe4>
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	4a5b      	ldr	r2, [pc, #364]	; (800fb30 <HAL_DMA_Abort_IT+0x1f4>)
 800f9c4:	4293      	cmp	r3, r2
 800f9c6:	d028      	beq.n	800fa1a <HAL_DMA_Abort_IT+0xde>
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	4a52      	ldr	r2, [pc, #328]	; (800fb18 <HAL_DMA_Abort_IT+0x1dc>)
 800f9ce:	4293      	cmp	r3, r2
 800f9d0:	d020      	beq.n	800fa14 <HAL_DMA_Abort_IT+0xd8>
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	4a57      	ldr	r2, [pc, #348]	; (800fb34 <HAL_DMA_Abort_IT+0x1f8>)
 800f9d8:	4293      	cmp	r3, r2
 800f9da:	d019      	beq.n	800fa10 <HAL_DMA_Abort_IT+0xd4>
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	4a55      	ldr	r2, [pc, #340]	; (800fb38 <HAL_DMA_Abort_IT+0x1fc>)
 800f9e2:	4293      	cmp	r3, r2
 800f9e4:	d012      	beq.n	800fa0c <HAL_DMA_Abort_IT+0xd0>
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	4a54      	ldr	r2, [pc, #336]	; (800fb3c <HAL_DMA_Abort_IT+0x200>)
 800f9ec:	4293      	cmp	r3, r2
 800f9ee:	d00a      	beq.n	800fa06 <HAL_DMA_Abort_IT+0xca>
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	4a52      	ldr	r2, [pc, #328]	; (800fb40 <HAL_DMA_Abort_IT+0x204>)
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d102      	bne.n	800fa00 <HAL_DMA_Abort_IT+0xc4>
 800f9fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f9fe:	e01b      	b.n	800fa38 <HAL_DMA_Abort_IT+0xfc>
 800fa00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800fa04:	e018      	b.n	800fa38 <HAL_DMA_Abort_IT+0xfc>
 800fa06:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fa0a:	e015      	b.n	800fa38 <HAL_DMA_Abort_IT+0xfc>
 800fa0c:	2310      	movs	r3, #16
 800fa0e:	e013      	b.n	800fa38 <HAL_DMA_Abort_IT+0xfc>
 800fa10:	2301      	movs	r3, #1
 800fa12:	e011      	b.n	800fa38 <HAL_DMA_Abort_IT+0xfc>
 800fa14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800fa18:	e00e      	b.n	800fa38 <HAL_DMA_Abort_IT+0xfc>
 800fa1a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800fa1e:	e00b      	b.n	800fa38 <HAL_DMA_Abort_IT+0xfc>
 800fa20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800fa24:	e008      	b.n	800fa38 <HAL_DMA_Abort_IT+0xfc>
 800fa26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fa2a:	e005      	b.n	800fa38 <HAL_DMA_Abort_IT+0xfc>
 800fa2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fa30:	e002      	b.n	800fa38 <HAL_DMA_Abort_IT+0xfc>
 800fa32:	2310      	movs	r3, #16
 800fa34:	e000      	b.n	800fa38 <HAL_DMA_Abort_IT+0xfc>
 800fa36:	2301      	movs	r3, #1
 800fa38:	4a42      	ldr	r2, [pc, #264]	; (800fb44 <HAL_DMA_Abort_IT+0x208>)
 800fa3a:	6053      	str	r3, [r2, #4]
 800fa3c:	e057      	b.n	800faee <HAL_DMA_Abort_IT+0x1b2>
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	4a36      	ldr	r2, [pc, #216]	; (800fb1c <HAL_DMA_Abort_IT+0x1e0>)
 800fa44:	4293      	cmp	r3, r2
 800fa46:	d04f      	beq.n	800fae8 <HAL_DMA_Abort_IT+0x1ac>
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	4a34      	ldr	r2, [pc, #208]	; (800fb20 <HAL_DMA_Abort_IT+0x1e4>)
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	d048      	beq.n	800fae4 <HAL_DMA_Abort_IT+0x1a8>
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	4a33      	ldr	r2, [pc, #204]	; (800fb24 <HAL_DMA_Abort_IT+0x1e8>)
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d040      	beq.n	800fade <HAL_DMA_Abort_IT+0x1a2>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	4a31      	ldr	r2, [pc, #196]	; (800fb28 <HAL_DMA_Abort_IT+0x1ec>)
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d038      	beq.n	800fad8 <HAL_DMA_Abort_IT+0x19c>
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	4a30      	ldr	r2, [pc, #192]	; (800fb2c <HAL_DMA_Abort_IT+0x1f0>)
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d030      	beq.n	800fad2 <HAL_DMA_Abort_IT+0x196>
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4a2e      	ldr	r2, [pc, #184]	; (800fb30 <HAL_DMA_Abort_IT+0x1f4>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d028      	beq.n	800facc <HAL_DMA_Abort_IT+0x190>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	4a26      	ldr	r2, [pc, #152]	; (800fb18 <HAL_DMA_Abort_IT+0x1dc>)
 800fa80:	4293      	cmp	r3, r2
 800fa82:	d020      	beq.n	800fac6 <HAL_DMA_Abort_IT+0x18a>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	4a2a      	ldr	r2, [pc, #168]	; (800fb34 <HAL_DMA_Abort_IT+0x1f8>)
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d019      	beq.n	800fac2 <HAL_DMA_Abort_IT+0x186>
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	4a29      	ldr	r2, [pc, #164]	; (800fb38 <HAL_DMA_Abort_IT+0x1fc>)
 800fa94:	4293      	cmp	r3, r2
 800fa96:	d012      	beq.n	800fabe <HAL_DMA_Abort_IT+0x182>
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	4a27      	ldr	r2, [pc, #156]	; (800fb3c <HAL_DMA_Abort_IT+0x200>)
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	d00a      	beq.n	800fab8 <HAL_DMA_Abort_IT+0x17c>
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	4a26      	ldr	r2, [pc, #152]	; (800fb40 <HAL_DMA_Abort_IT+0x204>)
 800faa8:	4293      	cmp	r3, r2
 800faaa:	d102      	bne.n	800fab2 <HAL_DMA_Abort_IT+0x176>
 800faac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fab0:	e01b      	b.n	800faea <HAL_DMA_Abort_IT+0x1ae>
 800fab2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800fab6:	e018      	b.n	800faea <HAL_DMA_Abort_IT+0x1ae>
 800fab8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fabc:	e015      	b.n	800faea <HAL_DMA_Abort_IT+0x1ae>
 800fabe:	2310      	movs	r3, #16
 800fac0:	e013      	b.n	800faea <HAL_DMA_Abort_IT+0x1ae>
 800fac2:	2301      	movs	r3, #1
 800fac4:	e011      	b.n	800faea <HAL_DMA_Abort_IT+0x1ae>
 800fac6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800faca:	e00e      	b.n	800faea <HAL_DMA_Abort_IT+0x1ae>
 800facc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800fad0:	e00b      	b.n	800faea <HAL_DMA_Abort_IT+0x1ae>
 800fad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800fad6:	e008      	b.n	800faea <HAL_DMA_Abort_IT+0x1ae>
 800fad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fadc:	e005      	b.n	800faea <HAL_DMA_Abort_IT+0x1ae>
 800fade:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fae2:	e002      	b.n	800faea <HAL_DMA_Abort_IT+0x1ae>
 800fae4:	2310      	movs	r3, #16
 800fae6:	e000      	b.n	800faea <HAL_DMA_Abort_IT+0x1ae>
 800fae8:	2301      	movs	r3, #1
 800faea:	4a17      	ldr	r2, [pc, #92]	; (800fb48 <HAL_DMA_Abort_IT+0x20c>)
 800faec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2201      	movs	r2, #1
 800faf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2200      	movs	r2, #0
 800fafa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d003      	beq.n	800fb0e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb0a:	6878      	ldr	r0, [r7, #4]
 800fb0c:	4798      	blx	r3
    } 
  }
  return status;
 800fb0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb10:	4618      	mov	r0, r3
 800fb12:	3710      	adds	r7, #16
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}
 800fb18:	40020080 	.word	0x40020080
 800fb1c:	40020008 	.word	0x40020008
 800fb20:	4002001c 	.word	0x4002001c
 800fb24:	40020030 	.word	0x40020030
 800fb28:	40020044 	.word	0x40020044
 800fb2c:	40020058 	.word	0x40020058
 800fb30:	4002006c 	.word	0x4002006c
 800fb34:	40020408 	.word	0x40020408
 800fb38:	4002041c 	.word	0x4002041c
 800fb3c:	40020430 	.word	0x40020430
 800fb40:	40020444 	.word	0x40020444
 800fb44:	40020400 	.word	0x40020400
 800fb48:	40020000 	.word	0x40020000

0800fb4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b084      	sub	sp, #16
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb68:	2204      	movs	r2, #4
 800fb6a:	409a      	lsls	r2, r3
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	4013      	ands	r3, r2
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	f000 80f1 	beq.w	800fd58 <HAL_DMA_IRQHandler+0x20c>
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	f003 0304 	and.w	r3, r3, #4
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	f000 80eb 	beq.w	800fd58 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	f003 0320 	and.w	r3, r3, #32
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d107      	bne.n	800fba0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	681a      	ldr	r2, [r3, #0]
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	f022 0204 	bic.w	r2, r2, #4
 800fb9e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	461a      	mov	r2, r3
 800fba6:	4b5f      	ldr	r3, [pc, #380]	; (800fd24 <HAL_DMA_IRQHandler+0x1d8>)
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	d958      	bls.n	800fc5e <HAL_DMA_IRQHandler+0x112>
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	4a5d      	ldr	r2, [pc, #372]	; (800fd28 <HAL_DMA_IRQHandler+0x1dc>)
 800fbb2:	4293      	cmp	r3, r2
 800fbb4:	d04f      	beq.n	800fc56 <HAL_DMA_IRQHandler+0x10a>
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	4a5c      	ldr	r2, [pc, #368]	; (800fd2c <HAL_DMA_IRQHandler+0x1e0>)
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	d048      	beq.n	800fc52 <HAL_DMA_IRQHandler+0x106>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	4a5a      	ldr	r2, [pc, #360]	; (800fd30 <HAL_DMA_IRQHandler+0x1e4>)
 800fbc6:	4293      	cmp	r3, r2
 800fbc8:	d040      	beq.n	800fc4c <HAL_DMA_IRQHandler+0x100>
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	4a59      	ldr	r2, [pc, #356]	; (800fd34 <HAL_DMA_IRQHandler+0x1e8>)
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	d038      	beq.n	800fc46 <HAL_DMA_IRQHandler+0xfa>
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	4a57      	ldr	r2, [pc, #348]	; (800fd38 <HAL_DMA_IRQHandler+0x1ec>)
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d030      	beq.n	800fc40 <HAL_DMA_IRQHandler+0xf4>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	4a56      	ldr	r2, [pc, #344]	; (800fd3c <HAL_DMA_IRQHandler+0x1f0>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d028      	beq.n	800fc3a <HAL_DMA_IRQHandler+0xee>
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	4a4d      	ldr	r2, [pc, #308]	; (800fd24 <HAL_DMA_IRQHandler+0x1d8>)
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d020      	beq.n	800fc34 <HAL_DMA_IRQHandler+0xe8>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	4a52      	ldr	r2, [pc, #328]	; (800fd40 <HAL_DMA_IRQHandler+0x1f4>)
 800fbf8:	4293      	cmp	r3, r2
 800fbfa:	d019      	beq.n	800fc30 <HAL_DMA_IRQHandler+0xe4>
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	4a50      	ldr	r2, [pc, #320]	; (800fd44 <HAL_DMA_IRQHandler+0x1f8>)
 800fc02:	4293      	cmp	r3, r2
 800fc04:	d012      	beq.n	800fc2c <HAL_DMA_IRQHandler+0xe0>
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	4a4f      	ldr	r2, [pc, #316]	; (800fd48 <HAL_DMA_IRQHandler+0x1fc>)
 800fc0c:	4293      	cmp	r3, r2
 800fc0e:	d00a      	beq.n	800fc26 <HAL_DMA_IRQHandler+0xda>
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	4a4d      	ldr	r2, [pc, #308]	; (800fd4c <HAL_DMA_IRQHandler+0x200>)
 800fc16:	4293      	cmp	r3, r2
 800fc18:	d102      	bne.n	800fc20 <HAL_DMA_IRQHandler+0xd4>
 800fc1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fc1e:	e01b      	b.n	800fc58 <HAL_DMA_IRQHandler+0x10c>
 800fc20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fc24:	e018      	b.n	800fc58 <HAL_DMA_IRQHandler+0x10c>
 800fc26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc2a:	e015      	b.n	800fc58 <HAL_DMA_IRQHandler+0x10c>
 800fc2c:	2340      	movs	r3, #64	; 0x40
 800fc2e:	e013      	b.n	800fc58 <HAL_DMA_IRQHandler+0x10c>
 800fc30:	2304      	movs	r3, #4
 800fc32:	e011      	b.n	800fc58 <HAL_DMA_IRQHandler+0x10c>
 800fc34:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800fc38:	e00e      	b.n	800fc58 <HAL_DMA_IRQHandler+0x10c>
 800fc3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fc3e:	e00b      	b.n	800fc58 <HAL_DMA_IRQHandler+0x10c>
 800fc40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fc44:	e008      	b.n	800fc58 <HAL_DMA_IRQHandler+0x10c>
 800fc46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fc4a:	e005      	b.n	800fc58 <HAL_DMA_IRQHandler+0x10c>
 800fc4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc50:	e002      	b.n	800fc58 <HAL_DMA_IRQHandler+0x10c>
 800fc52:	2340      	movs	r3, #64	; 0x40
 800fc54:	e000      	b.n	800fc58 <HAL_DMA_IRQHandler+0x10c>
 800fc56:	2304      	movs	r3, #4
 800fc58:	4a3d      	ldr	r2, [pc, #244]	; (800fd50 <HAL_DMA_IRQHandler+0x204>)
 800fc5a:	6053      	str	r3, [r2, #4]
 800fc5c:	e057      	b.n	800fd0e <HAL_DMA_IRQHandler+0x1c2>
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	4a31      	ldr	r2, [pc, #196]	; (800fd28 <HAL_DMA_IRQHandler+0x1dc>)
 800fc64:	4293      	cmp	r3, r2
 800fc66:	d04f      	beq.n	800fd08 <HAL_DMA_IRQHandler+0x1bc>
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4a2f      	ldr	r2, [pc, #188]	; (800fd2c <HAL_DMA_IRQHandler+0x1e0>)
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d048      	beq.n	800fd04 <HAL_DMA_IRQHandler+0x1b8>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	4a2e      	ldr	r2, [pc, #184]	; (800fd30 <HAL_DMA_IRQHandler+0x1e4>)
 800fc78:	4293      	cmp	r3, r2
 800fc7a:	d040      	beq.n	800fcfe <HAL_DMA_IRQHandler+0x1b2>
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	4a2c      	ldr	r2, [pc, #176]	; (800fd34 <HAL_DMA_IRQHandler+0x1e8>)
 800fc82:	4293      	cmp	r3, r2
 800fc84:	d038      	beq.n	800fcf8 <HAL_DMA_IRQHandler+0x1ac>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	4a2b      	ldr	r2, [pc, #172]	; (800fd38 <HAL_DMA_IRQHandler+0x1ec>)
 800fc8c:	4293      	cmp	r3, r2
 800fc8e:	d030      	beq.n	800fcf2 <HAL_DMA_IRQHandler+0x1a6>
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	4a29      	ldr	r2, [pc, #164]	; (800fd3c <HAL_DMA_IRQHandler+0x1f0>)
 800fc96:	4293      	cmp	r3, r2
 800fc98:	d028      	beq.n	800fcec <HAL_DMA_IRQHandler+0x1a0>
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	4a21      	ldr	r2, [pc, #132]	; (800fd24 <HAL_DMA_IRQHandler+0x1d8>)
 800fca0:	4293      	cmp	r3, r2
 800fca2:	d020      	beq.n	800fce6 <HAL_DMA_IRQHandler+0x19a>
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	4a25      	ldr	r2, [pc, #148]	; (800fd40 <HAL_DMA_IRQHandler+0x1f4>)
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d019      	beq.n	800fce2 <HAL_DMA_IRQHandler+0x196>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	4a24      	ldr	r2, [pc, #144]	; (800fd44 <HAL_DMA_IRQHandler+0x1f8>)
 800fcb4:	4293      	cmp	r3, r2
 800fcb6:	d012      	beq.n	800fcde <HAL_DMA_IRQHandler+0x192>
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	4a22      	ldr	r2, [pc, #136]	; (800fd48 <HAL_DMA_IRQHandler+0x1fc>)
 800fcbe:	4293      	cmp	r3, r2
 800fcc0:	d00a      	beq.n	800fcd8 <HAL_DMA_IRQHandler+0x18c>
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	4a21      	ldr	r2, [pc, #132]	; (800fd4c <HAL_DMA_IRQHandler+0x200>)
 800fcc8:	4293      	cmp	r3, r2
 800fcca:	d102      	bne.n	800fcd2 <HAL_DMA_IRQHandler+0x186>
 800fccc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fcd0:	e01b      	b.n	800fd0a <HAL_DMA_IRQHandler+0x1be>
 800fcd2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fcd6:	e018      	b.n	800fd0a <HAL_DMA_IRQHandler+0x1be>
 800fcd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fcdc:	e015      	b.n	800fd0a <HAL_DMA_IRQHandler+0x1be>
 800fcde:	2340      	movs	r3, #64	; 0x40
 800fce0:	e013      	b.n	800fd0a <HAL_DMA_IRQHandler+0x1be>
 800fce2:	2304      	movs	r3, #4
 800fce4:	e011      	b.n	800fd0a <HAL_DMA_IRQHandler+0x1be>
 800fce6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800fcea:	e00e      	b.n	800fd0a <HAL_DMA_IRQHandler+0x1be>
 800fcec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fcf0:	e00b      	b.n	800fd0a <HAL_DMA_IRQHandler+0x1be>
 800fcf2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fcf6:	e008      	b.n	800fd0a <HAL_DMA_IRQHandler+0x1be>
 800fcf8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fcfc:	e005      	b.n	800fd0a <HAL_DMA_IRQHandler+0x1be>
 800fcfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fd02:	e002      	b.n	800fd0a <HAL_DMA_IRQHandler+0x1be>
 800fd04:	2340      	movs	r3, #64	; 0x40
 800fd06:	e000      	b.n	800fd0a <HAL_DMA_IRQHandler+0x1be>
 800fd08:	2304      	movs	r3, #4
 800fd0a:	4a12      	ldr	r2, [pc, #72]	; (800fd54 <HAL_DMA_IRQHandler+0x208>)
 800fd0c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	f000 8136 	beq.w	800ff84 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800fd20:	e130      	b.n	800ff84 <HAL_DMA_IRQHandler+0x438>
 800fd22:	bf00      	nop
 800fd24:	40020080 	.word	0x40020080
 800fd28:	40020008 	.word	0x40020008
 800fd2c:	4002001c 	.word	0x4002001c
 800fd30:	40020030 	.word	0x40020030
 800fd34:	40020044 	.word	0x40020044
 800fd38:	40020058 	.word	0x40020058
 800fd3c:	4002006c 	.word	0x4002006c
 800fd40:	40020408 	.word	0x40020408
 800fd44:	4002041c 	.word	0x4002041c
 800fd48:	40020430 	.word	0x40020430
 800fd4c:	40020444 	.word	0x40020444
 800fd50:	40020400 	.word	0x40020400
 800fd54:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd5c:	2202      	movs	r2, #2
 800fd5e:	409a      	lsls	r2, r3
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	4013      	ands	r3, r2
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	f000 80dd 	beq.w	800ff24 <HAL_DMA_IRQHandler+0x3d8>
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	f003 0302 	and.w	r3, r3, #2
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	f000 80d7 	beq.w	800ff24 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	f003 0320 	and.w	r3, r3, #32
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d10b      	bne.n	800fd9c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	681a      	ldr	r2, [r3, #0]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	f022 020a 	bic.w	r2, r2, #10
 800fd92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2201      	movs	r2, #1
 800fd98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	461a      	mov	r2, r3
 800fda2:	4b7b      	ldr	r3, [pc, #492]	; (800ff90 <HAL_DMA_IRQHandler+0x444>)
 800fda4:	429a      	cmp	r2, r3
 800fda6:	d958      	bls.n	800fe5a <HAL_DMA_IRQHandler+0x30e>
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	4a79      	ldr	r2, [pc, #484]	; (800ff94 <HAL_DMA_IRQHandler+0x448>)
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	d04f      	beq.n	800fe52 <HAL_DMA_IRQHandler+0x306>
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	4a78      	ldr	r2, [pc, #480]	; (800ff98 <HAL_DMA_IRQHandler+0x44c>)
 800fdb8:	4293      	cmp	r3, r2
 800fdba:	d048      	beq.n	800fe4e <HAL_DMA_IRQHandler+0x302>
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	4a76      	ldr	r2, [pc, #472]	; (800ff9c <HAL_DMA_IRQHandler+0x450>)
 800fdc2:	4293      	cmp	r3, r2
 800fdc4:	d040      	beq.n	800fe48 <HAL_DMA_IRQHandler+0x2fc>
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	4a75      	ldr	r2, [pc, #468]	; (800ffa0 <HAL_DMA_IRQHandler+0x454>)
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	d038      	beq.n	800fe42 <HAL_DMA_IRQHandler+0x2f6>
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	4a73      	ldr	r2, [pc, #460]	; (800ffa4 <HAL_DMA_IRQHandler+0x458>)
 800fdd6:	4293      	cmp	r3, r2
 800fdd8:	d030      	beq.n	800fe3c <HAL_DMA_IRQHandler+0x2f0>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	4a72      	ldr	r2, [pc, #456]	; (800ffa8 <HAL_DMA_IRQHandler+0x45c>)
 800fde0:	4293      	cmp	r3, r2
 800fde2:	d028      	beq.n	800fe36 <HAL_DMA_IRQHandler+0x2ea>
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	4a69      	ldr	r2, [pc, #420]	; (800ff90 <HAL_DMA_IRQHandler+0x444>)
 800fdea:	4293      	cmp	r3, r2
 800fdec:	d020      	beq.n	800fe30 <HAL_DMA_IRQHandler+0x2e4>
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	4a6e      	ldr	r2, [pc, #440]	; (800ffac <HAL_DMA_IRQHandler+0x460>)
 800fdf4:	4293      	cmp	r3, r2
 800fdf6:	d019      	beq.n	800fe2c <HAL_DMA_IRQHandler+0x2e0>
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	4a6c      	ldr	r2, [pc, #432]	; (800ffb0 <HAL_DMA_IRQHandler+0x464>)
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d012      	beq.n	800fe28 <HAL_DMA_IRQHandler+0x2dc>
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	4a6b      	ldr	r2, [pc, #428]	; (800ffb4 <HAL_DMA_IRQHandler+0x468>)
 800fe08:	4293      	cmp	r3, r2
 800fe0a:	d00a      	beq.n	800fe22 <HAL_DMA_IRQHandler+0x2d6>
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	4a69      	ldr	r2, [pc, #420]	; (800ffb8 <HAL_DMA_IRQHandler+0x46c>)
 800fe12:	4293      	cmp	r3, r2
 800fe14:	d102      	bne.n	800fe1c <HAL_DMA_IRQHandler+0x2d0>
 800fe16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fe1a:	e01b      	b.n	800fe54 <HAL_DMA_IRQHandler+0x308>
 800fe1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fe20:	e018      	b.n	800fe54 <HAL_DMA_IRQHandler+0x308>
 800fe22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe26:	e015      	b.n	800fe54 <HAL_DMA_IRQHandler+0x308>
 800fe28:	2320      	movs	r3, #32
 800fe2a:	e013      	b.n	800fe54 <HAL_DMA_IRQHandler+0x308>
 800fe2c:	2302      	movs	r3, #2
 800fe2e:	e011      	b.n	800fe54 <HAL_DMA_IRQHandler+0x308>
 800fe30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fe34:	e00e      	b.n	800fe54 <HAL_DMA_IRQHandler+0x308>
 800fe36:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fe3a:	e00b      	b.n	800fe54 <HAL_DMA_IRQHandler+0x308>
 800fe3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fe40:	e008      	b.n	800fe54 <HAL_DMA_IRQHandler+0x308>
 800fe42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fe46:	e005      	b.n	800fe54 <HAL_DMA_IRQHandler+0x308>
 800fe48:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fe4c:	e002      	b.n	800fe54 <HAL_DMA_IRQHandler+0x308>
 800fe4e:	2320      	movs	r3, #32
 800fe50:	e000      	b.n	800fe54 <HAL_DMA_IRQHandler+0x308>
 800fe52:	2302      	movs	r3, #2
 800fe54:	4a59      	ldr	r2, [pc, #356]	; (800ffbc <HAL_DMA_IRQHandler+0x470>)
 800fe56:	6053      	str	r3, [r2, #4]
 800fe58:	e057      	b.n	800ff0a <HAL_DMA_IRQHandler+0x3be>
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	4a4d      	ldr	r2, [pc, #308]	; (800ff94 <HAL_DMA_IRQHandler+0x448>)
 800fe60:	4293      	cmp	r3, r2
 800fe62:	d04f      	beq.n	800ff04 <HAL_DMA_IRQHandler+0x3b8>
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	4a4b      	ldr	r2, [pc, #300]	; (800ff98 <HAL_DMA_IRQHandler+0x44c>)
 800fe6a:	4293      	cmp	r3, r2
 800fe6c:	d048      	beq.n	800ff00 <HAL_DMA_IRQHandler+0x3b4>
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	4a4a      	ldr	r2, [pc, #296]	; (800ff9c <HAL_DMA_IRQHandler+0x450>)
 800fe74:	4293      	cmp	r3, r2
 800fe76:	d040      	beq.n	800fefa <HAL_DMA_IRQHandler+0x3ae>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	4a48      	ldr	r2, [pc, #288]	; (800ffa0 <HAL_DMA_IRQHandler+0x454>)
 800fe7e:	4293      	cmp	r3, r2
 800fe80:	d038      	beq.n	800fef4 <HAL_DMA_IRQHandler+0x3a8>
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	4a47      	ldr	r2, [pc, #284]	; (800ffa4 <HAL_DMA_IRQHandler+0x458>)
 800fe88:	4293      	cmp	r3, r2
 800fe8a:	d030      	beq.n	800feee <HAL_DMA_IRQHandler+0x3a2>
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	4a45      	ldr	r2, [pc, #276]	; (800ffa8 <HAL_DMA_IRQHandler+0x45c>)
 800fe92:	4293      	cmp	r3, r2
 800fe94:	d028      	beq.n	800fee8 <HAL_DMA_IRQHandler+0x39c>
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	4a3d      	ldr	r2, [pc, #244]	; (800ff90 <HAL_DMA_IRQHandler+0x444>)
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	d020      	beq.n	800fee2 <HAL_DMA_IRQHandler+0x396>
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	4a41      	ldr	r2, [pc, #260]	; (800ffac <HAL_DMA_IRQHandler+0x460>)
 800fea6:	4293      	cmp	r3, r2
 800fea8:	d019      	beq.n	800fede <HAL_DMA_IRQHandler+0x392>
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	4a40      	ldr	r2, [pc, #256]	; (800ffb0 <HAL_DMA_IRQHandler+0x464>)
 800feb0:	4293      	cmp	r3, r2
 800feb2:	d012      	beq.n	800feda <HAL_DMA_IRQHandler+0x38e>
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	4a3e      	ldr	r2, [pc, #248]	; (800ffb4 <HAL_DMA_IRQHandler+0x468>)
 800feba:	4293      	cmp	r3, r2
 800febc:	d00a      	beq.n	800fed4 <HAL_DMA_IRQHandler+0x388>
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	4a3d      	ldr	r2, [pc, #244]	; (800ffb8 <HAL_DMA_IRQHandler+0x46c>)
 800fec4:	4293      	cmp	r3, r2
 800fec6:	d102      	bne.n	800fece <HAL_DMA_IRQHandler+0x382>
 800fec8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fecc:	e01b      	b.n	800ff06 <HAL_DMA_IRQHandler+0x3ba>
 800fece:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fed2:	e018      	b.n	800ff06 <HAL_DMA_IRQHandler+0x3ba>
 800fed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fed8:	e015      	b.n	800ff06 <HAL_DMA_IRQHandler+0x3ba>
 800feda:	2320      	movs	r3, #32
 800fedc:	e013      	b.n	800ff06 <HAL_DMA_IRQHandler+0x3ba>
 800fede:	2302      	movs	r3, #2
 800fee0:	e011      	b.n	800ff06 <HAL_DMA_IRQHandler+0x3ba>
 800fee2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fee6:	e00e      	b.n	800ff06 <HAL_DMA_IRQHandler+0x3ba>
 800fee8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800feec:	e00b      	b.n	800ff06 <HAL_DMA_IRQHandler+0x3ba>
 800feee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fef2:	e008      	b.n	800ff06 <HAL_DMA_IRQHandler+0x3ba>
 800fef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fef8:	e005      	b.n	800ff06 <HAL_DMA_IRQHandler+0x3ba>
 800fefa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fefe:	e002      	b.n	800ff06 <HAL_DMA_IRQHandler+0x3ba>
 800ff00:	2320      	movs	r3, #32
 800ff02:	e000      	b.n	800ff06 <HAL_DMA_IRQHandler+0x3ba>
 800ff04:	2302      	movs	r3, #2
 800ff06:	4a2e      	ldr	r2, [pc, #184]	; (800ffc0 <HAL_DMA_IRQHandler+0x474>)
 800ff08:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d034      	beq.n	800ff84 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800ff22:	e02f      	b.n	800ff84 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff28:	2208      	movs	r2, #8
 800ff2a:	409a      	lsls	r2, r3
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	4013      	ands	r3, r2
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d028      	beq.n	800ff86 <HAL_DMA_IRQHandler+0x43a>
 800ff34:	68bb      	ldr	r3, [r7, #8]
 800ff36:	f003 0308 	and.w	r3, r3, #8
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d023      	beq.n	800ff86 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	681a      	ldr	r2, [r3, #0]
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	f022 020e 	bic.w	r2, r2, #14
 800ff4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff56:	2101      	movs	r1, #1
 800ff58:	fa01 f202 	lsl.w	r2, r1, r2
 800ff5c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2201      	movs	r2, #1
 800ff62:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2201      	movs	r2, #1
 800ff68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d004      	beq.n	800ff86 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	4798      	blx	r3
    }
  }
  return;
 800ff84:	bf00      	nop
 800ff86:	bf00      	nop
}
 800ff88:	3710      	adds	r7, #16
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}
 800ff8e:	bf00      	nop
 800ff90:	40020080 	.word	0x40020080
 800ff94:	40020008 	.word	0x40020008
 800ff98:	4002001c 	.word	0x4002001c
 800ff9c:	40020030 	.word	0x40020030
 800ffa0:	40020044 	.word	0x40020044
 800ffa4:	40020058 	.word	0x40020058
 800ffa8:	4002006c 	.word	0x4002006c
 800ffac:	40020408 	.word	0x40020408
 800ffb0:	4002041c 	.word	0x4002041c
 800ffb4:	40020430 	.word	0x40020430
 800ffb8:	40020444 	.word	0x40020444
 800ffbc:	40020400 	.word	0x40020400
 800ffc0:	40020000 	.word	0x40020000

0800ffc4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b083      	sub	sp, #12
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ffd2:	b2db      	uxtb	r3, r3
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	370c      	adds	r7, #12
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bc80      	pop	{r7}
 800ffdc:	4770      	bx	lr

0800ffde <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ffde:	b480      	push	{r7}
 800ffe0:	b085      	sub	sp, #20
 800ffe2:	af00      	add	r7, sp, #0
 800ffe4:	60f8      	str	r0, [r7, #12]
 800ffe6:	60b9      	str	r1, [r7, #8]
 800ffe8:	607a      	str	r2, [r7, #4]
 800ffea:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fff4:	2101      	movs	r1, #1
 800fff6:	fa01 f202 	lsl.w	r2, r1, r2
 800fffa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	683a      	ldr	r2, [r7, #0]
 8010002:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	2b10      	cmp	r3, #16
 801000a:	d108      	bne.n	801001e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	687a      	ldr	r2, [r7, #4]
 8010012:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	68ba      	ldr	r2, [r7, #8]
 801001a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801001c:	e007      	b.n	801002e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	68ba      	ldr	r2, [r7, #8]
 8010024:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	60da      	str	r2, [r3, #12]
}
 801002e:	bf00      	nop
 8010030:	3714      	adds	r7, #20
 8010032:	46bd      	mov	sp, r7
 8010034:	bc80      	pop	{r7}
 8010036:	4770      	bx	lr

08010038 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010038:	b480      	push	{r7}
 801003a:	b08b      	sub	sp, #44	; 0x2c
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8010042:	2300      	movs	r3, #0
 8010044:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8010046:	2300      	movs	r3, #0
 8010048:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 801004a:	e179      	b.n	8010340 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 801004c:	2201      	movs	r2, #1
 801004e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010050:	fa02 f303 	lsl.w	r3, r2, r3
 8010054:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	69fa      	ldr	r2, [r7, #28]
 801005c:	4013      	ands	r3, r2
 801005e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8010060:	69ba      	ldr	r2, [r7, #24]
 8010062:	69fb      	ldr	r3, [r7, #28]
 8010064:	429a      	cmp	r2, r3
 8010066:	f040 8168 	bne.w	801033a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	685b      	ldr	r3, [r3, #4]
 801006e:	4a96      	ldr	r2, [pc, #600]	; (80102c8 <HAL_GPIO_Init+0x290>)
 8010070:	4293      	cmp	r3, r2
 8010072:	d05e      	beq.n	8010132 <HAL_GPIO_Init+0xfa>
 8010074:	4a94      	ldr	r2, [pc, #592]	; (80102c8 <HAL_GPIO_Init+0x290>)
 8010076:	4293      	cmp	r3, r2
 8010078:	d875      	bhi.n	8010166 <HAL_GPIO_Init+0x12e>
 801007a:	4a94      	ldr	r2, [pc, #592]	; (80102cc <HAL_GPIO_Init+0x294>)
 801007c:	4293      	cmp	r3, r2
 801007e:	d058      	beq.n	8010132 <HAL_GPIO_Init+0xfa>
 8010080:	4a92      	ldr	r2, [pc, #584]	; (80102cc <HAL_GPIO_Init+0x294>)
 8010082:	4293      	cmp	r3, r2
 8010084:	d86f      	bhi.n	8010166 <HAL_GPIO_Init+0x12e>
 8010086:	4a92      	ldr	r2, [pc, #584]	; (80102d0 <HAL_GPIO_Init+0x298>)
 8010088:	4293      	cmp	r3, r2
 801008a:	d052      	beq.n	8010132 <HAL_GPIO_Init+0xfa>
 801008c:	4a90      	ldr	r2, [pc, #576]	; (80102d0 <HAL_GPIO_Init+0x298>)
 801008e:	4293      	cmp	r3, r2
 8010090:	d869      	bhi.n	8010166 <HAL_GPIO_Init+0x12e>
 8010092:	4a90      	ldr	r2, [pc, #576]	; (80102d4 <HAL_GPIO_Init+0x29c>)
 8010094:	4293      	cmp	r3, r2
 8010096:	d04c      	beq.n	8010132 <HAL_GPIO_Init+0xfa>
 8010098:	4a8e      	ldr	r2, [pc, #568]	; (80102d4 <HAL_GPIO_Init+0x29c>)
 801009a:	4293      	cmp	r3, r2
 801009c:	d863      	bhi.n	8010166 <HAL_GPIO_Init+0x12e>
 801009e:	4a8e      	ldr	r2, [pc, #568]	; (80102d8 <HAL_GPIO_Init+0x2a0>)
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d046      	beq.n	8010132 <HAL_GPIO_Init+0xfa>
 80100a4:	4a8c      	ldr	r2, [pc, #560]	; (80102d8 <HAL_GPIO_Init+0x2a0>)
 80100a6:	4293      	cmp	r3, r2
 80100a8:	d85d      	bhi.n	8010166 <HAL_GPIO_Init+0x12e>
 80100aa:	2b12      	cmp	r3, #18
 80100ac:	d82a      	bhi.n	8010104 <HAL_GPIO_Init+0xcc>
 80100ae:	2b12      	cmp	r3, #18
 80100b0:	d859      	bhi.n	8010166 <HAL_GPIO_Init+0x12e>
 80100b2:	a201      	add	r2, pc, #4	; (adr r2, 80100b8 <HAL_GPIO_Init+0x80>)
 80100b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100b8:	08010133 	.word	0x08010133
 80100bc:	0801010d 	.word	0x0801010d
 80100c0:	0801011f 	.word	0x0801011f
 80100c4:	08010161 	.word	0x08010161
 80100c8:	08010167 	.word	0x08010167
 80100cc:	08010167 	.word	0x08010167
 80100d0:	08010167 	.word	0x08010167
 80100d4:	08010167 	.word	0x08010167
 80100d8:	08010167 	.word	0x08010167
 80100dc:	08010167 	.word	0x08010167
 80100e0:	08010167 	.word	0x08010167
 80100e4:	08010167 	.word	0x08010167
 80100e8:	08010167 	.word	0x08010167
 80100ec:	08010167 	.word	0x08010167
 80100f0:	08010167 	.word	0x08010167
 80100f4:	08010167 	.word	0x08010167
 80100f8:	08010167 	.word	0x08010167
 80100fc:	08010115 	.word	0x08010115
 8010100:	08010129 	.word	0x08010129
 8010104:	4a75      	ldr	r2, [pc, #468]	; (80102dc <HAL_GPIO_Init+0x2a4>)
 8010106:	4293      	cmp	r3, r2
 8010108:	d013      	beq.n	8010132 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 801010a:	e02c      	b.n	8010166 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	623b      	str	r3, [r7, #32]
          break;
 8010112:	e029      	b.n	8010168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	68db      	ldr	r3, [r3, #12]
 8010118:	3304      	adds	r3, #4
 801011a:	623b      	str	r3, [r7, #32]
          break;
 801011c:	e024      	b.n	8010168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	68db      	ldr	r3, [r3, #12]
 8010122:	3308      	adds	r3, #8
 8010124:	623b      	str	r3, [r7, #32]
          break;
 8010126:	e01f      	b.n	8010168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	68db      	ldr	r3, [r3, #12]
 801012c:	330c      	adds	r3, #12
 801012e:	623b      	str	r3, [r7, #32]
          break;
 8010130:	e01a      	b.n	8010168 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	689b      	ldr	r3, [r3, #8]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d102      	bne.n	8010140 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 801013a:	2304      	movs	r3, #4
 801013c:	623b      	str	r3, [r7, #32]
          break;
 801013e:	e013      	b.n	8010168 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	689b      	ldr	r3, [r3, #8]
 8010144:	2b01      	cmp	r3, #1
 8010146:	d105      	bne.n	8010154 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8010148:	2308      	movs	r3, #8
 801014a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	69fa      	ldr	r2, [r7, #28]
 8010150:	611a      	str	r2, [r3, #16]
          break;
 8010152:	e009      	b.n	8010168 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8010154:	2308      	movs	r3, #8
 8010156:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	69fa      	ldr	r2, [r7, #28]
 801015c:	615a      	str	r2, [r3, #20]
          break;
 801015e:	e003      	b.n	8010168 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8010160:	2300      	movs	r3, #0
 8010162:	623b      	str	r3, [r7, #32]
          break;
 8010164:	e000      	b.n	8010168 <HAL_GPIO_Init+0x130>
          break;
 8010166:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8010168:	69bb      	ldr	r3, [r7, #24]
 801016a:	2bff      	cmp	r3, #255	; 0xff
 801016c:	d801      	bhi.n	8010172 <HAL_GPIO_Init+0x13a>
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	e001      	b.n	8010176 <HAL_GPIO_Init+0x13e>
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	3304      	adds	r3, #4
 8010176:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8010178:	69bb      	ldr	r3, [r7, #24]
 801017a:	2bff      	cmp	r3, #255	; 0xff
 801017c:	d802      	bhi.n	8010184 <HAL_GPIO_Init+0x14c>
 801017e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010180:	009b      	lsls	r3, r3, #2
 8010182:	e002      	b.n	801018a <HAL_GPIO_Init+0x152>
 8010184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010186:	3b08      	subs	r3, #8
 8010188:	009b      	lsls	r3, r3, #2
 801018a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	681a      	ldr	r2, [r3, #0]
 8010190:	210f      	movs	r1, #15
 8010192:	693b      	ldr	r3, [r7, #16]
 8010194:	fa01 f303 	lsl.w	r3, r1, r3
 8010198:	43db      	mvns	r3, r3
 801019a:	401a      	ands	r2, r3
 801019c:	6a39      	ldr	r1, [r7, #32]
 801019e:	693b      	ldr	r3, [r7, #16]
 80101a0:	fa01 f303 	lsl.w	r3, r1, r3
 80101a4:	431a      	orrs	r2, r3
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	685b      	ldr	r3, [r3, #4]
 80101ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	f000 80c1 	beq.w	801033a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80101b8:	4b49      	ldr	r3, [pc, #292]	; (80102e0 <HAL_GPIO_Init+0x2a8>)
 80101ba:	699b      	ldr	r3, [r3, #24]
 80101bc:	4a48      	ldr	r2, [pc, #288]	; (80102e0 <HAL_GPIO_Init+0x2a8>)
 80101be:	f043 0301 	orr.w	r3, r3, #1
 80101c2:	6193      	str	r3, [r2, #24]
 80101c4:	4b46      	ldr	r3, [pc, #280]	; (80102e0 <HAL_GPIO_Init+0x2a8>)
 80101c6:	699b      	ldr	r3, [r3, #24]
 80101c8:	f003 0301 	and.w	r3, r3, #1
 80101cc:	60bb      	str	r3, [r7, #8]
 80101ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80101d0:	4a44      	ldr	r2, [pc, #272]	; (80102e4 <HAL_GPIO_Init+0x2ac>)
 80101d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d4:	089b      	lsrs	r3, r3, #2
 80101d6:	3302      	adds	r3, #2
 80101d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80101de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e0:	f003 0303 	and.w	r3, r3, #3
 80101e4:	009b      	lsls	r3, r3, #2
 80101e6:	220f      	movs	r2, #15
 80101e8:	fa02 f303 	lsl.w	r3, r2, r3
 80101ec:	43db      	mvns	r3, r3
 80101ee:	68fa      	ldr	r2, [r7, #12]
 80101f0:	4013      	ands	r3, r2
 80101f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	4a3c      	ldr	r2, [pc, #240]	; (80102e8 <HAL_GPIO_Init+0x2b0>)
 80101f8:	4293      	cmp	r3, r2
 80101fa:	d01f      	beq.n	801023c <HAL_GPIO_Init+0x204>
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	4a3b      	ldr	r2, [pc, #236]	; (80102ec <HAL_GPIO_Init+0x2b4>)
 8010200:	4293      	cmp	r3, r2
 8010202:	d019      	beq.n	8010238 <HAL_GPIO_Init+0x200>
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	4a3a      	ldr	r2, [pc, #232]	; (80102f0 <HAL_GPIO_Init+0x2b8>)
 8010208:	4293      	cmp	r3, r2
 801020a:	d013      	beq.n	8010234 <HAL_GPIO_Init+0x1fc>
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	4a39      	ldr	r2, [pc, #228]	; (80102f4 <HAL_GPIO_Init+0x2bc>)
 8010210:	4293      	cmp	r3, r2
 8010212:	d00d      	beq.n	8010230 <HAL_GPIO_Init+0x1f8>
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	4a38      	ldr	r2, [pc, #224]	; (80102f8 <HAL_GPIO_Init+0x2c0>)
 8010218:	4293      	cmp	r3, r2
 801021a:	d007      	beq.n	801022c <HAL_GPIO_Init+0x1f4>
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	4a37      	ldr	r2, [pc, #220]	; (80102fc <HAL_GPIO_Init+0x2c4>)
 8010220:	4293      	cmp	r3, r2
 8010222:	d101      	bne.n	8010228 <HAL_GPIO_Init+0x1f0>
 8010224:	2305      	movs	r3, #5
 8010226:	e00a      	b.n	801023e <HAL_GPIO_Init+0x206>
 8010228:	2306      	movs	r3, #6
 801022a:	e008      	b.n	801023e <HAL_GPIO_Init+0x206>
 801022c:	2304      	movs	r3, #4
 801022e:	e006      	b.n	801023e <HAL_GPIO_Init+0x206>
 8010230:	2303      	movs	r3, #3
 8010232:	e004      	b.n	801023e <HAL_GPIO_Init+0x206>
 8010234:	2302      	movs	r3, #2
 8010236:	e002      	b.n	801023e <HAL_GPIO_Init+0x206>
 8010238:	2301      	movs	r3, #1
 801023a:	e000      	b.n	801023e <HAL_GPIO_Init+0x206>
 801023c:	2300      	movs	r3, #0
 801023e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010240:	f002 0203 	and.w	r2, r2, #3
 8010244:	0092      	lsls	r2, r2, #2
 8010246:	4093      	lsls	r3, r2
 8010248:	68fa      	ldr	r2, [r7, #12]
 801024a:	4313      	orrs	r3, r2
 801024c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 801024e:	4925      	ldr	r1, [pc, #148]	; (80102e4 <HAL_GPIO_Init+0x2ac>)
 8010250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010252:	089b      	lsrs	r3, r3, #2
 8010254:	3302      	adds	r3, #2
 8010256:	68fa      	ldr	r2, [r7, #12]
 8010258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	685b      	ldr	r3, [r3, #4]
 8010260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010264:	2b00      	cmp	r3, #0
 8010266:	d006      	beq.n	8010276 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8010268:	4b25      	ldr	r3, [pc, #148]	; (8010300 <HAL_GPIO_Init+0x2c8>)
 801026a:	689a      	ldr	r2, [r3, #8]
 801026c:	4924      	ldr	r1, [pc, #144]	; (8010300 <HAL_GPIO_Init+0x2c8>)
 801026e:	69bb      	ldr	r3, [r7, #24]
 8010270:	4313      	orrs	r3, r2
 8010272:	608b      	str	r3, [r1, #8]
 8010274:	e006      	b.n	8010284 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8010276:	4b22      	ldr	r3, [pc, #136]	; (8010300 <HAL_GPIO_Init+0x2c8>)
 8010278:	689a      	ldr	r2, [r3, #8]
 801027a:	69bb      	ldr	r3, [r7, #24]
 801027c:	43db      	mvns	r3, r3
 801027e:	4920      	ldr	r1, [pc, #128]	; (8010300 <HAL_GPIO_Init+0x2c8>)
 8010280:	4013      	ands	r3, r2
 8010282:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	685b      	ldr	r3, [r3, #4]
 8010288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801028c:	2b00      	cmp	r3, #0
 801028e:	d006      	beq.n	801029e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8010290:	4b1b      	ldr	r3, [pc, #108]	; (8010300 <HAL_GPIO_Init+0x2c8>)
 8010292:	68da      	ldr	r2, [r3, #12]
 8010294:	491a      	ldr	r1, [pc, #104]	; (8010300 <HAL_GPIO_Init+0x2c8>)
 8010296:	69bb      	ldr	r3, [r7, #24]
 8010298:	4313      	orrs	r3, r2
 801029a:	60cb      	str	r3, [r1, #12]
 801029c:	e006      	b.n	80102ac <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 801029e:	4b18      	ldr	r3, [pc, #96]	; (8010300 <HAL_GPIO_Init+0x2c8>)
 80102a0:	68da      	ldr	r2, [r3, #12]
 80102a2:	69bb      	ldr	r3, [r7, #24]
 80102a4:	43db      	mvns	r3, r3
 80102a6:	4916      	ldr	r1, [pc, #88]	; (8010300 <HAL_GPIO_Init+0x2c8>)
 80102a8:	4013      	ands	r3, r2
 80102aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d025      	beq.n	8010304 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80102b8:	4b11      	ldr	r3, [pc, #68]	; (8010300 <HAL_GPIO_Init+0x2c8>)
 80102ba:	685a      	ldr	r2, [r3, #4]
 80102bc:	4910      	ldr	r1, [pc, #64]	; (8010300 <HAL_GPIO_Init+0x2c8>)
 80102be:	69bb      	ldr	r3, [r7, #24]
 80102c0:	4313      	orrs	r3, r2
 80102c2:	604b      	str	r3, [r1, #4]
 80102c4:	e025      	b.n	8010312 <HAL_GPIO_Init+0x2da>
 80102c6:	bf00      	nop
 80102c8:	10320000 	.word	0x10320000
 80102cc:	10310000 	.word	0x10310000
 80102d0:	10220000 	.word	0x10220000
 80102d4:	10210000 	.word	0x10210000
 80102d8:	10120000 	.word	0x10120000
 80102dc:	10110000 	.word	0x10110000
 80102e0:	40021000 	.word	0x40021000
 80102e4:	40010000 	.word	0x40010000
 80102e8:	40010800 	.word	0x40010800
 80102ec:	40010c00 	.word	0x40010c00
 80102f0:	40011000 	.word	0x40011000
 80102f4:	40011400 	.word	0x40011400
 80102f8:	40011800 	.word	0x40011800
 80102fc:	40011c00 	.word	0x40011c00
 8010300:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8010304:	4b15      	ldr	r3, [pc, #84]	; (801035c <HAL_GPIO_Init+0x324>)
 8010306:	685a      	ldr	r2, [r3, #4]
 8010308:	69bb      	ldr	r3, [r7, #24]
 801030a:	43db      	mvns	r3, r3
 801030c:	4913      	ldr	r1, [pc, #76]	; (801035c <HAL_GPIO_Init+0x324>)
 801030e:	4013      	ands	r3, r2
 8010310:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	685b      	ldr	r3, [r3, #4]
 8010316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801031a:	2b00      	cmp	r3, #0
 801031c:	d006      	beq.n	801032c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 801031e:	4b0f      	ldr	r3, [pc, #60]	; (801035c <HAL_GPIO_Init+0x324>)
 8010320:	681a      	ldr	r2, [r3, #0]
 8010322:	490e      	ldr	r1, [pc, #56]	; (801035c <HAL_GPIO_Init+0x324>)
 8010324:	69bb      	ldr	r3, [r7, #24]
 8010326:	4313      	orrs	r3, r2
 8010328:	600b      	str	r3, [r1, #0]
 801032a:	e006      	b.n	801033a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 801032c:	4b0b      	ldr	r3, [pc, #44]	; (801035c <HAL_GPIO_Init+0x324>)
 801032e:	681a      	ldr	r2, [r3, #0]
 8010330:	69bb      	ldr	r3, [r7, #24]
 8010332:	43db      	mvns	r3, r3
 8010334:	4909      	ldr	r1, [pc, #36]	; (801035c <HAL_GPIO_Init+0x324>)
 8010336:	4013      	ands	r3, r2
 8010338:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 801033a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801033c:	3301      	adds	r3, #1
 801033e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	681a      	ldr	r2, [r3, #0]
 8010344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010346:	fa22 f303 	lsr.w	r3, r2, r3
 801034a:	2b00      	cmp	r3, #0
 801034c:	f47f ae7e 	bne.w	801004c <HAL_GPIO_Init+0x14>
  }
}
 8010350:	bf00      	nop
 8010352:	bf00      	nop
 8010354:	372c      	adds	r7, #44	; 0x2c
 8010356:	46bd      	mov	sp, r7
 8010358:	bc80      	pop	{r7}
 801035a:	4770      	bx	lr
 801035c:	40010400 	.word	0x40010400

08010360 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8010360:	b480      	push	{r7}
 8010362:	b089      	sub	sp, #36	; 0x24
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
 8010368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 801036a:	2300      	movs	r3, #0
 801036c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 801036e:	e0a6      	b.n	80104be <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8010370:	2201      	movs	r2, #1
 8010372:	69fb      	ldr	r3, [r7, #28]
 8010374:	fa02 f303 	lsl.w	r3, r2, r3
 8010378:	683a      	ldr	r2, [r7, #0]
 801037a:	4013      	ands	r3, r2
 801037c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 801037e:	69bb      	ldr	r3, [r7, #24]
 8010380:	2b00      	cmp	r3, #0
 8010382:	f000 8099 	beq.w	80104b8 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8010386:	4a54      	ldr	r2, [pc, #336]	; (80104d8 <HAL_GPIO_DeInit+0x178>)
 8010388:	69fb      	ldr	r3, [r7, #28]
 801038a:	089b      	lsrs	r3, r3, #2
 801038c:	3302      	adds	r3, #2
 801038e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010392:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8010394:	69fb      	ldr	r3, [r7, #28]
 8010396:	f003 0303 	and.w	r3, r3, #3
 801039a:	009b      	lsls	r3, r3, #2
 801039c:	220f      	movs	r2, #15
 801039e:	fa02 f303 	lsl.w	r3, r2, r3
 80103a2:	697a      	ldr	r2, [r7, #20]
 80103a4:	4013      	ands	r3, r2
 80103a6:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	4a4c      	ldr	r2, [pc, #304]	; (80104dc <HAL_GPIO_DeInit+0x17c>)
 80103ac:	4293      	cmp	r3, r2
 80103ae:	d01f      	beq.n	80103f0 <HAL_GPIO_DeInit+0x90>
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	4a4b      	ldr	r2, [pc, #300]	; (80104e0 <HAL_GPIO_DeInit+0x180>)
 80103b4:	4293      	cmp	r3, r2
 80103b6:	d019      	beq.n	80103ec <HAL_GPIO_DeInit+0x8c>
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	4a4a      	ldr	r2, [pc, #296]	; (80104e4 <HAL_GPIO_DeInit+0x184>)
 80103bc:	4293      	cmp	r3, r2
 80103be:	d013      	beq.n	80103e8 <HAL_GPIO_DeInit+0x88>
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	4a49      	ldr	r2, [pc, #292]	; (80104e8 <HAL_GPIO_DeInit+0x188>)
 80103c4:	4293      	cmp	r3, r2
 80103c6:	d00d      	beq.n	80103e4 <HAL_GPIO_DeInit+0x84>
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	4a48      	ldr	r2, [pc, #288]	; (80104ec <HAL_GPIO_DeInit+0x18c>)
 80103cc:	4293      	cmp	r3, r2
 80103ce:	d007      	beq.n	80103e0 <HAL_GPIO_DeInit+0x80>
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	4a47      	ldr	r2, [pc, #284]	; (80104f0 <HAL_GPIO_DeInit+0x190>)
 80103d4:	4293      	cmp	r3, r2
 80103d6:	d101      	bne.n	80103dc <HAL_GPIO_DeInit+0x7c>
 80103d8:	2305      	movs	r3, #5
 80103da:	e00a      	b.n	80103f2 <HAL_GPIO_DeInit+0x92>
 80103dc:	2306      	movs	r3, #6
 80103de:	e008      	b.n	80103f2 <HAL_GPIO_DeInit+0x92>
 80103e0:	2304      	movs	r3, #4
 80103e2:	e006      	b.n	80103f2 <HAL_GPIO_DeInit+0x92>
 80103e4:	2303      	movs	r3, #3
 80103e6:	e004      	b.n	80103f2 <HAL_GPIO_DeInit+0x92>
 80103e8:	2302      	movs	r3, #2
 80103ea:	e002      	b.n	80103f2 <HAL_GPIO_DeInit+0x92>
 80103ec:	2301      	movs	r3, #1
 80103ee:	e000      	b.n	80103f2 <HAL_GPIO_DeInit+0x92>
 80103f0:	2300      	movs	r3, #0
 80103f2:	69fa      	ldr	r2, [r7, #28]
 80103f4:	f002 0203 	and.w	r2, r2, #3
 80103f8:	0092      	lsls	r2, r2, #2
 80103fa:	4093      	lsls	r3, r2
 80103fc:	697a      	ldr	r2, [r7, #20]
 80103fe:	429a      	cmp	r2, r3
 8010400:	d132      	bne.n	8010468 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8010402:	4b3c      	ldr	r3, [pc, #240]	; (80104f4 <HAL_GPIO_DeInit+0x194>)
 8010404:	681a      	ldr	r2, [r3, #0]
 8010406:	69bb      	ldr	r3, [r7, #24]
 8010408:	43db      	mvns	r3, r3
 801040a:	493a      	ldr	r1, [pc, #232]	; (80104f4 <HAL_GPIO_DeInit+0x194>)
 801040c:	4013      	ands	r3, r2
 801040e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8010410:	4b38      	ldr	r3, [pc, #224]	; (80104f4 <HAL_GPIO_DeInit+0x194>)
 8010412:	685a      	ldr	r2, [r3, #4]
 8010414:	69bb      	ldr	r3, [r7, #24]
 8010416:	43db      	mvns	r3, r3
 8010418:	4936      	ldr	r1, [pc, #216]	; (80104f4 <HAL_GPIO_DeInit+0x194>)
 801041a:	4013      	ands	r3, r2
 801041c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 801041e:	4b35      	ldr	r3, [pc, #212]	; (80104f4 <HAL_GPIO_DeInit+0x194>)
 8010420:	68da      	ldr	r2, [r3, #12]
 8010422:	69bb      	ldr	r3, [r7, #24]
 8010424:	43db      	mvns	r3, r3
 8010426:	4933      	ldr	r1, [pc, #204]	; (80104f4 <HAL_GPIO_DeInit+0x194>)
 8010428:	4013      	ands	r3, r2
 801042a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 801042c:	4b31      	ldr	r3, [pc, #196]	; (80104f4 <HAL_GPIO_DeInit+0x194>)
 801042e:	689a      	ldr	r2, [r3, #8]
 8010430:	69bb      	ldr	r3, [r7, #24]
 8010432:	43db      	mvns	r3, r3
 8010434:	492f      	ldr	r1, [pc, #188]	; (80104f4 <HAL_GPIO_DeInit+0x194>)
 8010436:	4013      	ands	r3, r2
 8010438:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 801043a:	69fb      	ldr	r3, [r7, #28]
 801043c:	f003 0303 	and.w	r3, r3, #3
 8010440:	009b      	lsls	r3, r3, #2
 8010442:	220f      	movs	r2, #15
 8010444:	fa02 f303 	lsl.w	r3, r2, r3
 8010448:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 801044a:	4a23      	ldr	r2, [pc, #140]	; (80104d8 <HAL_GPIO_DeInit+0x178>)
 801044c:	69fb      	ldr	r3, [r7, #28]
 801044e:	089b      	lsrs	r3, r3, #2
 8010450:	3302      	adds	r3, #2
 8010452:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8010456:	697b      	ldr	r3, [r7, #20]
 8010458:	43da      	mvns	r2, r3
 801045a:	481f      	ldr	r0, [pc, #124]	; (80104d8 <HAL_GPIO_DeInit+0x178>)
 801045c:	69fb      	ldr	r3, [r7, #28]
 801045e:	089b      	lsrs	r3, r3, #2
 8010460:	400a      	ands	r2, r1
 8010462:	3302      	adds	r3, #2
 8010464:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8010468:	69bb      	ldr	r3, [r7, #24]
 801046a:	2bff      	cmp	r3, #255	; 0xff
 801046c:	d801      	bhi.n	8010472 <HAL_GPIO_DeInit+0x112>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	e001      	b.n	8010476 <HAL_GPIO_DeInit+0x116>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	3304      	adds	r3, #4
 8010476:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8010478:	69bb      	ldr	r3, [r7, #24]
 801047a:	2bff      	cmp	r3, #255	; 0xff
 801047c:	d802      	bhi.n	8010484 <HAL_GPIO_DeInit+0x124>
 801047e:	69fb      	ldr	r3, [r7, #28]
 8010480:	009b      	lsls	r3, r3, #2
 8010482:	e002      	b.n	801048a <HAL_GPIO_DeInit+0x12a>
 8010484:	69fb      	ldr	r3, [r7, #28]
 8010486:	3b08      	subs	r3, #8
 8010488:	009b      	lsls	r3, r3, #2
 801048a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	681a      	ldr	r2, [r3, #0]
 8010490:	210f      	movs	r1, #15
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	fa01 f303 	lsl.w	r3, r1, r3
 8010498:	43db      	mvns	r3, r3
 801049a:	401a      	ands	r2, r3
 801049c:	2104      	movs	r1, #4
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	fa01 f303 	lsl.w	r3, r1, r3
 80104a4:	431a      	orrs	r2, r3
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	68da      	ldr	r2, [r3, #12]
 80104ae:	69bb      	ldr	r3, [r7, #24]
 80104b0:	43db      	mvns	r3, r3
 80104b2:	401a      	ands	r2, r3
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80104b8:	69fb      	ldr	r3, [r7, #28]
 80104ba:	3301      	adds	r3, #1
 80104bc:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80104be:	683a      	ldr	r2, [r7, #0]
 80104c0:	69fb      	ldr	r3, [r7, #28]
 80104c2:	fa22 f303 	lsr.w	r3, r2, r3
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	f47f af52 	bne.w	8010370 <HAL_GPIO_DeInit+0x10>
  }
}
 80104cc:	bf00      	nop
 80104ce:	bf00      	nop
 80104d0:	3724      	adds	r7, #36	; 0x24
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bc80      	pop	{r7}
 80104d6:	4770      	bx	lr
 80104d8:	40010000 	.word	0x40010000
 80104dc:	40010800 	.word	0x40010800
 80104e0:	40010c00 	.word	0x40010c00
 80104e4:	40011000 	.word	0x40011000
 80104e8:	40011400 	.word	0x40011400
 80104ec:	40011800 	.word	0x40011800
 80104f0:	40011c00 	.word	0x40011c00
 80104f4:	40010400 	.word	0x40010400

080104f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80104f8:	b480      	push	{r7}
 80104fa:	b085      	sub	sp, #20
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
 8010500:	460b      	mov	r3, r1
 8010502:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	689a      	ldr	r2, [r3, #8]
 8010508:	887b      	ldrh	r3, [r7, #2]
 801050a:	4013      	ands	r3, r2
 801050c:	2b00      	cmp	r3, #0
 801050e:	d002      	beq.n	8010516 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8010510:	2301      	movs	r3, #1
 8010512:	73fb      	strb	r3, [r7, #15]
 8010514:	e001      	b.n	801051a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8010516:	2300      	movs	r3, #0
 8010518:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801051a:	7bfb      	ldrb	r3, [r7, #15]
}
 801051c:	4618      	mov	r0, r3
 801051e:	3714      	adds	r7, #20
 8010520:	46bd      	mov	sp, r7
 8010522:	bc80      	pop	{r7}
 8010524:	4770      	bx	lr

08010526 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010526:	b480      	push	{r7}
 8010528:	b083      	sub	sp, #12
 801052a:	af00      	add	r7, sp, #0
 801052c:	6078      	str	r0, [r7, #4]
 801052e:	460b      	mov	r3, r1
 8010530:	807b      	strh	r3, [r7, #2]
 8010532:	4613      	mov	r3, r2
 8010534:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8010536:	787b      	ldrb	r3, [r7, #1]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d003      	beq.n	8010544 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801053c:	887a      	ldrh	r2, [r7, #2]
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8010542:	e003      	b.n	801054c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8010544:	887b      	ldrh	r3, [r7, #2]
 8010546:	041a      	lsls	r2, r3, #16
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	611a      	str	r2, [r3, #16]
}
 801054c:	bf00      	nop
 801054e:	370c      	adds	r7, #12
 8010550:	46bd      	mov	sp, r7
 8010552:	bc80      	pop	{r7}
 8010554:	4770      	bx	lr
	...

08010558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b084      	sub	sp, #16
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d101      	bne.n	801056a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8010566:	2301      	movs	r3, #1
 8010568:	e12b      	b.n	80107c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010570:	b2db      	uxtb	r3, r3
 8010572:	2b00      	cmp	r3, #0
 8010574:	d106      	bne.n	8010584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2200      	movs	r2, #0
 801057a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f7fa f92a 	bl	800a7d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2224      	movs	r2, #36	; 0x24
 8010588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	681a      	ldr	r2, [r3, #0]
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	f022 0201 	bic.w	r2, r2, #1
 801059a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	681a      	ldr	r2, [r3, #0]
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80105aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	681a      	ldr	r2, [r3, #0]
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80105ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80105bc:	f005 faee 	bl	8015b9c <HAL_RCC_GetPCLK1Freq>
 80105c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	685b      	ldr	r3, [r3, #4]
 80105c6:	4a81      	ldr	r2, [pc, #516]	; (80107cc <HAL_I2C_Init+0x274>)
 80105c8:	4293      	cmp	r3, r2
 80105ca:	d807      	bhi.n	80105dc <HAL_I2C_Init+0x84>
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	4a80      	ldr	r2, [pc, #512]	; (80107d0 <HAL_I2C_Init+0x278>)
 80105d0:	4293      	cmp	r3, r2
 80105d2:	bf94      	ite	ls
 80105d4:	2301      	movls	r3, #1
 80105d6:	2300      	movhi	r3, #0
 80105d8:	b2db      	uxtb	r3, r3
 80105da:	e006      	b.n	80105ea <HAL_I2C_Init+0x92>
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	4a7d      	ldr	r2, [pc, #500]	; (80107d4 <HAL_I2C_Init+0x27c>)
 80105e0:	4293      	cmp	r3, r2
 80105e2:	bf94      	ite	ls
 80105e4:	2301      	movls	r3, #1
 80105e6:	2300      	movhi	r3, #0
 80105e8:	b2db      	uxtb	r3, r3
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d001      	beq.n	80105f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80105ee:	2301      	movs	r3, #1
 80105f0:	e0e7      	b.n	80107c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	4a78      	ldr	r2, [pc, #480]	; (80107d8 <HAL_I2C_Init+0x280>)
 80105f6:	fba2 2303 	umull	r2, r3, r2, r3
 80105fa:	0c9b      	lsrs	r3, r3, #18
 80105fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	685b      	ldr	r3, [r3, #4]
 8010604:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	68ba      	ldr	r2, [r7, #8]
 801060e:	430a      	orrs	r2, r1
 8010610:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	6a1b      	ldr	r3, [r3, #32]
 8010618:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	685b      	ldr	r3, [r3, #4]
 8010620:	4a6a      	ldr	r2, [pc, #424]	; (80107cc <HAL_I2C_Init+0x274>)
 8010622:	4293      	cmp	r3, r2
 8010624:	d802      	bhi.n	801062c <HAL_I2C_Init+0xd4>
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	3301      	adds	r3, #1
 801062a:	e009      	b.n	8010640 <HAL_I2C_Init+0xe8>
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8010632:	fb02 f303 	mul.w	r3, r2, r3
 8010636:	4a69      	ldr	r2, [pc, #420]	; (80107dc <HAL_I2C_Init+0x284>)
 8010638:	fba2 2303 	umull	r2, r3, r2, r3
 801063c:	099b      	lsrs	r3, r3, #6
 801063e:	3301      	adds	r3, #1
 8010640:	687a      	ldr	r2, [r7, #4]
 8010642:	6812      	ldr	r2, [r2, #0]
 8010644:	430b      	orrs	r3, r1
 8010646:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	69db      	ldr	r3, [r3, #28]
 801064e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8010652:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	685b      	ldr	r3, [r3, #4]
 801065a:	495c      	ldr	r1, [pc, #368]	; (80107cc <HAL_I2C_Init+0x274>)
 801065c:	428b      	cmp	r3, r1
 801065e:	d819      	bhi.n	8010694 <HAL_I2C_Init+0x13c>
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	1e59      	subs	r1, r3, #1
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	005b      	lsls	r3, r3, #1
 801066a:	fbb1 f3f3 	udiv	r3, r1, r3
 801066e:	1c59      	adds	r1, r3, #1
 8010670:	f640 73fc 	movw	r3, #4092	; 0xffc
 8010674:	400b      	ands	r3, r1
 8010676:	2b00      	cmp	r3, #0
 8010678:	d00a      	beq.n	8010690 <HAL_I2C_Init+0x138>
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	1e59      	subs	r1, r3, #1
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	685b      	ldr	r3, [r3, #4]
 8010682:	005b      	lsls	r3, r3, #1
 8010684:	fbb1 f3f3 	udiv	r3, r1, r3
 8010688:	3301      	adds	r3, #1
 801068a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801068e:	e051      	b.n	8010734 <HAL_I2C_Init+0x1dc>
 8010690:	2304      	movs	r3, #4
 8010692:	e04f      	b.n	8010734 <HAL_I2C_Init+0x1dc>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	689b      	ldr	r3, [r3, #8]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d111      	bne.n	80106c0 <HAL_I2C_Init+0x168>
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	1e58      	subs	r0, r3, #1
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6859      	ldr	r1, [r3, #4]
 80106a4:	460b      	mov	r3, r1
 80106a6:	005b      	lsls	r3, r3, #1
 80106a8:	440b      	add	r3, r1
 80106aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80106ae:	3301      	adds	r3, #1
 80106b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	bf0c      	ite	eq
 80106b8:	2301      	moveq	r3, #1
 80106ba:	2300      	movne	r3, #0
 80106bc:	b2db      	uxtb	r3, r3
 80106be:	e012      	b.n	80106e6 <HAL_I2C_Init+0x18e>
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	1e58      	subs	r0, r3, #1
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	6859      	ldr	r1, [r3, #4]
 80106c8:	460b      	mov	r3, r1
 80106ca:	009b      	lsls	r3, r3, #2
 80106cc:	440b      	add	r3, r1
 80106ce:	0099      	lsls	r1, r3, #2
 80106d0:	440b      	add	r3, r1
 80106d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80106d6:	3301      	adds	r3, #1
 80106d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80106dc:	2b00      	cmp	r3, #0
 80106de:	bf0c      	ite	eq
 80106e0:	2301      	moveq	r3, #1
 80106e2:	2300      	movne	r3, #0
 80106e4:	b2db      	uxtb	r3, r3
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d001      	beq.n	80106ee <HAL_I2C_Init+0x196>
 80106ea:	2301      	movs	r3, #1
 80106ec:	e022      	b.n	8010734 <HAL_I2C_Init+0x1dc>
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	689b      	ldr	r3, [r3, #8]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d10e      	bne.n	8010714 <HAL_I2C_Init+0x1bc>
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	1e58      	subs	r0, r3, #1
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6859      	ldr	r1, [r3, #4]
 80106fe:	460b      	mov	r3, r1
 8010700:	005b      	lsls	r3, r3, #1
 8010702:	440b      	add	r3, r1
 8010704:	fbb0 f3f3 	udiv	r3, r0, r3
 8010708:	3301      	adds	r3, #1
 801070a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801070e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010712:	e00f      	b.n	8010734 <HAL_I2C_Init+0x1dc>
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	1e58      	subs	r0, r3, #1
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	6859      	ldr	r1, [r3, #4]
 801071c:	460b      	mov	r3, r1
 801071e:	009b      	lsls	r3, r3, #2
 8010720:	440b      	add	r3, r1
 8010722:	0099      	lsls	r1, r3, #2
 8010724:	440b      	add	r3, r1
 8010726:	fbb0 f3f3 	udiv	r3, r0, r3
 801072a:	3301      	adds	r3, #1
 801072c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010730:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010734:	6879      	ldr	r1, [r7, #4]
 8010736:	6809      	ldr	r1, [r1, #0]
 8010738:	4313      	orrs	r3, r2
 801073a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	69da      	ldr	r2, [r3, #28]
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6a1b      	ldr	r3, [r3, #32]
 801074e:	431a      	orrs	r2, r3
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	430a      	orrs	r2, r1
 8010756:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	689b      	ldr	r3, [r3, #8]
 801075e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8010762:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010766:	687a      	ldr	r2, [r7, #4]
 8010768:	6911      	ldr	r1, [r2, #16]
 801076a:	687a      	ldr	r2, [r7, #4]
 801076c:	68d2      	ldr	r2, [r2, #12]
 801076e:	4311      	orrs	r1, r2
 8010770:	687a      	ldr	r2, [r7, #4]
 8010772:	6812      	ldr	r2, [r2, #0]
 8010774:	430b      	orrs	r3, r1
 8010776:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	68db      	ldr	r3, [r3, #12]
 801077e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	695a      	ldr	r2, [r3, #20]
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	699b      	ldr	r3, [r3, #24]
 801078a:	431a      	orrs	r2, r3
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	430a      	orrs	r2, r1
 8010792:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	681a      	ldr	r2, [r3, #0]
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	f042 0201 	orr.w	r2, r2, #1
 80107a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2200      	movs	r2, #0
 80107a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2220      	movs	r2, #32
 80107ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2200      	movs	r2, #0
 80107b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2200      	movs	r2, #0
 80107bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80107c0:	2300      	movs	r3, #0
}
 80107c2:	4618      	mov	r0, r3
 80107c4:	3710      	adds	r7, #16
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}
 80107ca:	bf00      	nop
 80107cc:	000186a0 	.word	0x000186a0
 80107d0:	001e847f 	.word	0x001e847f
 80107d4:	003d08ff 	.word	0x003d08ff
 80107d8:	431bde83 	.word	0x431bde83
 80107dc:	10624dd3 	.word	0x10624dd3

080107e0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d101      	bne.n	80107f2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80107ee:	2301      	movs	r3, #1
 80107f0:	e021      	b.n	8010836 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2224      	movs	r2, #36	; 0x24
 80107f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	681a      	ldr	r2, [r3, #0]
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	f022 0201 	bic.w	r2, r2, #1
 8010808:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f7fa f876 	bl	800a8fc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2200      	movs	r2, #0
 8010814:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2200      	movs	r2, #0
 801081a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2200      	movs	r2, #0
 8010822:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2200      	movs	r2, #0
 8010828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2200      	movs	r2, #0
 8010830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010834:	2300      	movs	r3, #0
}
 8010836:	4618      	mov	r0, r3
 8010838:	3708      	adds	r7, #8
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}

0801083e <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 801083e:	b480      	push	{r7}
 8010840:	b083      	sub	sp, #12
 8010842:	af00      	add	r7, sp, #0
 8010844:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	695b      	ldr	r3, [r3, #20]
 801084c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010850:	2b80      	cmp	r3, #128	; 0x80
 8010852:	d103      	bne.n	801085c <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	2200      	movs	r2, #0
 801085a:	611a      	str	r2, [r3, #16]
  }
}
 801085c:	bf00      	nop
 801085e:	370c      	adds	r7, #12
 8010860:	46bd      	mov	sp, r7
 8010862:	bc80      	pop	{r7}
 8010864:	4770      	bx	lr
	...

08010868 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b088      	sub	sp, #32
 801086c:	af02      	add	r7, sp, #8
 801086e:	60f8      	str	r0, [r7, #12]
 8010870:	4608      	mov	r0, r1
 8010872:	4611      	mov	r1, r2
 8010874:	461a      	mov	r2, r3
 8010876:	4603      	mov	r3, r0
 8010878:	817b      	strh	r3, [r7, #10]
 801087a:	460b      	mov	r3, r1
 801087c:	813b      	strh	r3, [r7, #8]
 801087e:	4613      	mov	r3, r2
 8010880:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8010882:	f7fd ff93 	bl	800e7ac <HAL_GetTick>
 8010886:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801088e:	b2db      	uxtb	r3, r3
 8010890:	2b20      	cmp	r3, #32
 8010892:	f040 80d9 	bne.w	8010a48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	9300      	str	r3, [sp, #0]
 801089a:	2319      	movs	r3, #25
 801089c:	2201      	movs	r2, #1
 801089e:	496d      	ldr	r1, [pc, #436]	; (8010a54 <HAL_I2C_Mem_Write+0x1ec>)
 80108a0:	68f8      	ldr	r0, [r7, #12]
 80108a2:	f002 fd25 	bl	80132f0 <I2C_WaitOnFlagUntilTimeout>
 80108a6:	4603      	mov	r3, r0
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d001      	beq.n	80108b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80108ac:	2302      	movs	r3, #2
 80108ae:	e0cc      	b.n	8010a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80108b6:	2b01      	cmp	r3, #1
 80108b8:	d101      	bne.n	80108be <HAL_I2C_Mem_Write+0x56>
 80108ba:	2302      	movs	r3, #2
 80108bc:	e0c5      	b.n	8010a4a <HAL_I2C_Mem_Write+0x1e2>
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	2201      	movs	r2, #1
 80108c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	f003 0301 	and.w	r3, r3, #1
 80108d0:	2b01      	cmp	r3, #1
 80108d2:	d007      	beq.n	80108e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	681a      	ldr	r2, [r3, #0]
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	f042 0201 	orr.w	r2, r2, #1
 80108e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	681a      	ldr	r2, [r3, #0]
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80108f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	2221      	movs	r2, #33	; 0x21
 80108f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	2240      	movs	r2, #64	; 0x40
 8010900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	2200      	movs	r2, #0
 8010908:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	6a3a      	ldr	r2, [r7, #32]
 801090e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010914:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801091a:	b29a      	uxth	r2, r3
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	4a4d      	ldr	r2, [pc, #308]	; (8010a58 <HAL_I2C_Mem_Write+0x1f0>)
 8010924:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8010926:	88f8      	ldrh	r0, [r7, #6]
 8010928:	893a      	ldrh	r2, [r7, #8]
 801092a:	8979      	ldrh	r1, [r7, #10]
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	9301      	str	r3, [sp, #4]
 8010930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010932:	9300      	str	r3, [sp, #0]
 8010934:	4603      	mov	r3, r0
 8010936:	68f8      	ldr	r0, [r7, #12]
 8010938:	f002 f9a8 	bl	8012c8c <I2C_RequestMemoryWrite>
 801093c:	4603      	mov	r3, r0
 801093e:	2b00      	cmp	r3, #0
 8010940:	d052      	beq.n	80109e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8010942:	2301      	movs	r3, #1
 8010944:	e081      	b.n	8010a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010946:	697a      	ldr	r2, [r7, #20]
 8010948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801094a:	68f8      	ldr	r0, [r7, #12]
 801094c:	f002 fdea 	bl	8013524 <I2C_WaitOnTXEFlagUntilTimeout>
 8010950:	4603      	mov	r3, r0
 8010952:	2b00      	cmp	r3, #0
 8010954:	d00d      	beq.n	8010972 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801095a:	2b04      	cmp	r3, #4
 801095c:	d107      	bne.n	801096e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	681a      	ldr	r2, [r3, #0]
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801096c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801096e:	2301      	movs	r3, #1
 8010970:	e06b      	b.n	8010a4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010976:	781a      	ldrb	r2, [r3, #0]
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010982:	1c5a      	adds	r2, r3, #1
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801098c:	3b01      	subs	r3, #1
 801098e:	b29a      	uxth	r2, r3
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010998:	b29b      	uxth	r3, r3
 801099a:	3b01      	subs	r3, #1
 801099c:	b29a      	uxth	r2, r3
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	695b      	ldr	r3, [r3, #20]
 80109a8:	f003 0304 	and.w	r3, r3, #4
 80109ac:	2b04      	cmp	r3, #4
 80109ae:	d11b      	bne.n	80109e8 <HAL_I2C_Mem_Write+0x180>
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d017      	beq.n	80109e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109bc:	781a      	ldrb	r2, [r3, #0]
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109c8:	1c5a      	adds	r2, r3, #1
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80109d2:	3b01      	subs	r3, #1
 80109d4:	b29a      	uxth	r2, r3
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80109de:	b29b      	uxth	r3, r3
 80109e0:	3b01      	subs	r3, #1
 80109e2:	b29a      	uxth	r2, r3
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d1aa      	bne.n	8010946 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80109f0:	697a      	ldr	r2, [r7, #20]
 80109f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80109f4:	68f8      	ldr	r0, [r7, #12]
 80109f6:	f002 fddd 	bl	80135b4 <I2C_WaitOnBTFFlagUntilTimeout>
 80109fa:	4603      	mov	r3, r0
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d00d      	beq.n	8010a1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a04:	2b04      	cmp	r3, #4
 8010a06:	d107      	bne.n	8010a18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	681a      	ldr	r2, [r3, #0]
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010a16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8010a18:	2301      	movs	r3, #1
 8010a1a:	e016      	b.n	8010a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	681a      	ldr	r2, [r3, #0]
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010a2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	2220      	movs	r2, #32
 8010a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	2200      	movs	r2, #0
 8010a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	2200      	movs	r2, #0
 8010a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8010a44:	2300      	movs	r3, #0
 8010a46:	e000      	b.n	8010a4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8010a48:	2302      	movs	r3, #2
  }
}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	3718      	adds	r7, #24
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}
 8010a52:	bf00      	nop
 8010a54:	00100002 	.word	0x00100002
 8010a58:	ffff0000 	.word	0xffff0000

08010a5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b08c      	sub	sp, #48	; 0x30
 8010a60:	af02      	add	r7, sp, #8
 8010a62:	60f8      	str	r0, [r7, #12]
 8010a64:	4608      	mov	r0, r1
 8010a66:	4611      	mov	r1, r2
 8010a68:	461a      	mov	r2, r3
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	817b      	strh	r3, [r7, #10]
 8010a6e:	460b      	mov	r3, r1
 8010a70:	813b      	strh	r3, [r7, #8]
 8010a72:	4613      	mov	r3, r2
 8010a74:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8010a76:	2300      	movs	r3, #0
 8010a78:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8010a7a:	f7fd fe97 	bl	800e7ac <HAL_GetTick>
 8010a7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010a86:	b2db      	uxtb	r3, r3
 8010a88:	2b20      	cmp	r3, #32
 8010a8a:	f040 8244 	bne.w	8010f16 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8010a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a90:	9300      	str	r3, [sp, #0]
 8010a92:	2319      	movs	r3, #25
 8010a94:	2201      	movs	r2, #1
 8010a96:	4982      	ldr	r1, [pc, #520]	; (8010ca0 <HAL_I2C_Mem_Read+0x244>)
 8010a98:	68f8      	ldr	r0, [r7, #12]
 8010a9a:	f002 fc29 	bl	80132f0 <I2C_WaitOnFlagUntilTimeout>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d001      	beq.n	8010aa8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8010aa4:	2302      	movs	r3, #2
 8010aa6:	e237      	b.n	8010f18 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010aae:	2b01      	cmp	r3, #1
 8010ab0:	d101      	bne.n	8010ab6 <HAL_I2C_Mem_Read+0x5a>
 8010ab2:	2302      	movs	r3, #2
 8010ab4:	e230      	b.n	8010f18 <HAL_I2C_Mem_Read+0x4bc>
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	2201      	movs	r2, #1
 8010aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	f003 0301 	and.w	r3, r3, #1
 8010ac8:	2b01      	cmp	r3, #1
 8010aca:	d007      	beq.n	8010adc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	681a      	ldr	r2, [r3, #0]
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	f042 0201 	orr.w	r2, r2, #1
 8010ada:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	681a      	ldr	r2, [r3, #0]
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010aea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	2222      	movs	r2, #34	; 0x22
 8010af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2240      	movs	r2, #64	; 0x40
 8010af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	2200      	movs	r2, #0
 8010b00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8010b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010b12:	b29a      	uxth	r2, r3
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	4a62      	ldr	r2, [pc, #392]	; (8010ca4 <HAL_I2C_Mem_Read+0x248>)
 8010b1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8010b1e:	88f8      	ldrh	r0, [r7, #6]
 8010b20:	893a      	ldrh	r2, [r7, #8]
 8010b22:	8979      	ldrh	r1, [r7, #10]
 8010b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b26:	9301      	str	r3, [sp, #4]
 8010b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b2a:	9300      	str	r3, [sp, #0]
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	68f8      	ldr	r0, [r7, #12]
 8010b30:	f002 f942 	bl	8012db8 <I2C_RequestMemoryRead>
 8010b34:	4603      	mov	r3, r0
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d001      	beq.n	8010b3e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	e1ec      	b.n	8010f18 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d113      	bne.n	8010b6e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010b46:	2300      	movs	r3, #0
 8010b48:	61fb      	str	r3, [r7, #28]
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	695b      	ldr	r3, [r3, #20]
 8010b50:	61fb      	str	r3, [r7, #28]
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	699b      	ldr	r3, [r3, #24]
 8010b58:	61fb      	str	r3, [r7, #28]
 8010b5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	681a      	ldr	r2, [r3, #0]
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010b6a:	601a      	str	r2, [r3, #0]
 8010b6c:	e1c0      	b.n	8010ef0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b72:	2b01      	cmp	r3, #1
 8010b74:	d11e      	bne.n	8010bb4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	681a      	ldr	r2, [r3, #0]
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010b84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8010b86:	b672      	cpsid	i
}
 8010b88:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	61bb      	str	r3, [r7, #24]
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	695b      	ldr	r3, [r3, #20]
 8010b94:	61bb      	str	r3, [r7, #24]
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	699b      	ldr	r3, [r3, #24]
 8010b9c:	61bb      	str	r3, [r7, #24]
 8010b9e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	681a      	ldr	r2, [r3, #0]
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010bae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8010bb0:	b662      	cpsie	i
}
 8010bb2:	e035      	b.n	8010c20 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010bb8:	2b02      	cmp	r3, #2
 8010bba:	d11e      	bne.n	8010bfa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	681a      	ldr	r2, [r3, #0]
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010bca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8010bcc:	b672      	cpsid	i
}
 8010bce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	617b      	str	r3, [r7, #20]
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	695b      	ldr	r3, [r3, #20]
 8010bda:	617b      	str	r3, [r7, #20]
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	699b      	ldr	r3, [r3, #24]
 8010be2:	617b      	str	r3, [r7, #20]
 8010be4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	681a      	ldr	r2, [r3, #0]
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010bf4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8010bf6:	b662      	cpsie	i
}
 8010bf8:	e012      	b.n	8010c20 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	681a      	ldr	r2, [r3, #0]
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010c08:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	613b      	str	r3, [r7, #16]
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	695b      	ldr	r3, [r3, #20]
 8010c14:	613b      	str	r3, [r7, #16]
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	699b      	ldr	r3, [r3, #24]
 8010c1c:	613b      	str	r3, [r7, #16]
 8010c1e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8010c20:	e166      	b.n	8010ef0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010c26:	2b03      	cmp	r3, #3
 8010c28:	f200 811f 	bhi.w	8010e6a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010c30:	2b01      	cmp	r3, #1
 8010c32:	d123      	bne.n	8010c7c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010c38:	68f8      	ldr	r0, [r7, #12]
 8010c3a:	f002 fd35 	bl	80136a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d001      	beq.n	8010c48 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8010c44:	2301      	movs	r3, #1
 8010c46:	e167      	b.n	8010f18 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	691a      	ldr	r2, [r3, #16]
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c52:	b2d2      	uxtb	r2, r2
 8010c54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c5a:	1c5a      	adds	r2, r3, #1
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010c64:	3b01      	subs	r3, #1
 8010c66:	b29a      	uxth	r2, r3
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010c70:	b29b      	uxth	r3, r3
 8010c72:	3b01      	subs	r3, #1
 8010c74:	b29a      	uxth	r2, r3
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010c7a:	e139      	b.n	8010ef0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010c80:	2b02      	cmp	r3, #2
 8010c82:	d152      	bne.n	8010d2a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8010c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c86:	9300      	str	r3, [sp, #0]
 8010c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	4906      	ldr	r1, [pc, #24]	; (8010ca8 <HAL_I2C_Mem_Read+0x24c>)
 8010c8e:	68f8      	ldr	r0, [r7, #12]
 8010c90:	f002 fb2e 	bl	80132f0 <I2C_WaitOnFlagUntilTimeout>
 8010c94:	4603      	mov	r3, r0
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d008      	beq.n	8010cac <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	e13c      	b.n	8010f18 <HAL_I2C_Mem_Read+0x4bc>
 8010c9e:	bf00      	nop
 8010ca0:	00100002 	.word	0x00100002
 8010ca4:	ffff0000 	.word	0xffff0000
 8010ca8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8010cac:	b672      	cpsid	i
}
 8010cae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	681a      	ldr	r2, [r3, #0]
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	691a      	ldr	r2, [r3, #16]
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cca:	b2d2      	uxtb	r2, r2
 8010ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cd2:	1c5a      	adds	r2, r3, #1
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010cdc:	3b01      	subs	r3, #1
 8010cde:	b29a      	uxth	r2, r3
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010ce8:	b29b      	uxth	r3, r3
 8010cea:	3b01      	subs	r3, #1
 8010cec:	b29a      	uxth	r2, r3
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8010cf2:	b662      	cpsie	i
}
 8010cf4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	691a      	ldr	r2, [r3, #16]
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d00:	b2d2      	uxtb	r2, r2
 8010d02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d08:	1c5a      	adds	r2, r3, #1
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d12:	3b01      	subs	r3, #1
 8010d14:	b29a      	uxth	r2, r3
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	3b01      	subs	r3, #1
 8010d22:	b29a      	uxth	r2, r3
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010d28:	e0e2      	b.n	8010ef0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8010d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d2c:	9300      	str	r3, [sp, #0]
 8010d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d30:	2200      	movs	r2, #0
 8010d32:	497b      	ldr	r1, [pc, #492]	; (8010f20 <HAL_I2C_Mem_Read+0x4c4>)
 8010d34:	68f8      	ldr	r0, [r7, #12]
 8010d36:	f002 fadb 	bl	80132f0 <I2C_WaitOnFlagUntilTimeout>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d001      	beq.n	8010d44 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8010d40:	2301      	movs	r3, #1
 8010d42:	e0e9      	b.n	8010f18 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	681a      	ldr	r2, [r3, #0]
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010d52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8010d54:	b672      	cpsid	i
}
 8010d56:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	691a      	ldr	r2, [r3, #16]
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d62:	b2d2      	uxtb	r2, r2
 8010d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d6a:	1c5a      	adds	r2, r3, #1
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d74:	3b01      	subs	r3, #1
 8010d76:	b29a      	uxth	r2, r3
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010d80:	b29b      	uxth	r3, r3
 8010d82:	3b01      	subs	r3, #1
 8010d84:	b29a      	uxth	r2, r3
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8010d8a:	4b66      	ldr	r3, [pc, #408]	; (8010f24 <HAL_I2C_Mem_Read+0x4c8>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	08db      	lsrs	r3, r3, #3
 8010d90:	4a65      	ldr	r2, [pc, #404]	; (8010f28 <HAL_I2C_Mem_Read+0x4cc>)
 8010d92:	fba2 2303 	umull	r2, r3, r2, r3
 8010d96:	0a1a      	lsrs	r2, r3, #8
 8010d98:	4613      	mov	r3, r2
 8010d9a:	009b      	lsls	r3, r3, #2
 8010d9c:	4413      	add	r3, r2
 8010d9e:	00da      	lsls	r2, r3, #3
 8010da0:	1ad3      	subs	r3, r2, r3
 8010da2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8010da4:	6a3b      	ldr	r3, [r7, #32]
 8010da6:	3b01      	subs	r3, #1
 8010da8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8010daa:	6a3b      	ldr	r3, [r7, #32]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d118      	bne.n	8010de2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	2200      	movs	r2, #0
 8010db4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	2220      	movs	r2, #32
 8010dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dca:	f043 0220 	orr.w	r2, r3, #32
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8010dd2:	b662      	cpsie	i
}
 8010dd4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	2200      	movs	r2, #0
 8010dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8010dde:	2301      	movs	r3, #1
 8010de0:	e09a      	b.n	8010f18 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	695b      	ldr	r3, [r3, #20]
 8010de8:	f003 0304 	and.w	r3, r3, #4
 8010dec:	2b04      	cmp	r3, #4
 8010dee:	d1d9      	bne.n	8010da4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	681a      	ldr	r2, [r3, #0]
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	691a      	ldr	r2, [r3, #16]
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e0a:	b2d2      	uxtb	r2, r2
 8010e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e12:	1c5a      	adds	r2, r3, #1
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e1c:	3b01      	subs	r3, #1
 8010e1e:	b29a      	uxth	r2, r3
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010e28:	b29b      	uxth	r3, r3
 8010e2a:	3b01      	subs	r3, #1
 8010e2c:	b29a      	uxth	r2, r3
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8010e32:	b662      	cpsie	i
}
 8010e34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	691a      	ldr	r2, [r3, #16]
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e40:	b2d2      	uxtb	r2, r2
 8010e42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e48:	1c5a      	adds	r2, r3, #1
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e52:	3b01      	subs	r3, #1
 8010e54:	b29a      	uxth	r2, r3
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010e5e:	b29b      	uxth	r3, r3
 8010e60:	3b01      	subs	r3, #1
 8010e62:	b29a      	uxth	r2, r3
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010e68:	e042      	b.n	8010ef0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8010e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010e6e:	68f8      	ldr	r0, [r7, #12]
 8010e70:	f002 fc1a 	bl	80136a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8010e74:	4603      	mov	r3, r0
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d001      	beq.n	8010e7e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	e04c      	b.n	8010f18 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	691a      	ldr	r2, [r3, #16]
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e88:	b2d2      	uxtb	r2, r2
 8010e8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e90:	1c5a      	adds	r2, r3, #1
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e9a:	3b01      	subs	r3, #1
 8010e9c:	b29a      	uxth	r2, r3
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010ea6:	b29b      	uxth	r3, r3
 8010ea8:	3b01      	subs	r3, #1
 8010eaa:	b29a      	uxth	r2, r3
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	695b      	ldr	r3, [r3, #20]
 8010eb6:	f003 0304 	and.w	r3, r3, #4
 8010eba:	2b04      	cmp	r3, #4
 8010ebc:	d118      	bne.n	8010ef0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	691a      	ldr	r2, [r3, #16]
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ec8:	b2d2      	uxtb	r2, r2
 8010eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ed0:	1c5a      	adds	r2, r3, #1
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010eda:	3b01      	subs	r3, #1
 8010edc:	b29a      	uxth	r2, r3
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	3b01      	subs	r3, #1
 8010eea:	b29a      	uxth	r2, r3
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	f47f ae94 	bne.w	8010c22 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	2220      	movs	r2, #32
 8010efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	2200      	movs	r2, #0
 8010f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8010f12:	2300      	movs	r3, #0
 8010f14:	e000      	b.n	8010f18 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8010f16:	2302      	movs	r3, #2
  }
}
 8010f18:	4618      	mov	r0, r3
 8010f1a:	3728      	adds	r7, #40	; 0x28
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}
 8010f20:	00010004 	.word	0x00010004
 8010f24:	20000698 	.word	0x20000698
 8010f28:	14f8b589 	.word	0x14f8b589

08010f2c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b08a      	sub	sp, #40	; 0x28
 8010f30:	af02      	add	r7, sp, #8
 8010f32:	60f8      	str	r0, [r7, #12]
 8010f34:	4608      	mov	r0, r1
 8010f36:	4611      	mov	r1, r2
 8010f38:	461a      	mov	r2, r3
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	817b      	strh	r3, [r7, #10]
 8010f3e:	460b      	mov	r3, r1
 8010f40:	813b      	strh	r3, [r7, #8]
 8010f42:	4613      	mov	r3, r2
 8010f44:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8010f46:	2300      	movs	r3, #0
 8010f48:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8010f4a:	f7fd fc2f 	bl	800e7ac <HAL_GetTick>
 8010f4e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010f56:	b2db      	uxtb	r3, r3
 8010f58:	2b20      	cmp	r3, #32
 8010f5a:	f040 812e 	bne.w	80111ba <HAL_I2C_Mem_Write_DMA+0x28e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8010f5e:	4b99      	ldr	r3, [pc, #612]	; (80111c4 <HAL_I2C_Mem_Write_DMA+0x298>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	08db      	lsrs	r3, r3, #3
 8010f64:	4a98      	ldr	r2, [pc, #608]	; (80111c8 <HAL_I2C_Mem_Write_DMA+0x29c>)
 8010f66:	fba2 2303 	umull	r2, r3, r2, r3
 8010f6a:	0a1a      	lsrs	r2, r3, #8
 8010f6c:	4613      	mov	r3, r2
 8010f6e:	009b      	lsls	r3, r3, #2
 8010f70:	4413      	add	r3, r2
 8010f72:	009a      	lsls	r2, r3, #2
 8010f74:	4413      	add	r3, r2
 8010f76:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8010f78:	697b      	ldr	r3, [r7, #20]
 8010f7a:	3b01      	subs	r3, #1
 8010f7c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8010f7e:	697b      	ldr	r3, [r7, #20]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d112      	bne.n	8010faa <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	2200      	movs	r2, #0
 8010f88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	2220      	movs	r2, #32
 8010f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	2200      	movs	r2, #0
 8010f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f9e:	f043 0220 	orr.w	r2, r3, #32
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8010fa6:	2302      	movs	r3, #2
 8010fa8:	e108      	b.n	80111bc <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	699b      	ldr	r3, [r3, #24]
 8010fb0:	f003 0302 	and.w	r3, r3, #2
 8010fb4:	2b02      	cmp	r3, #2
 8010fb6:	d0df      	beq.n	8010f78 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010fbe:	2b01      	cmp	r3, #1
 8010fc0:	d101      	bne.n	8010fc6 <HAL_I2C_Mem_Write_DMA+0x9a>
 8010fc2:	2302      	movs	r3, #2
 8010fc4:	e0fa      	b.n	80111bc <HAL_I2C_Mem_Write_DMA+0x290>
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	2201      	movs	r2, #1
 8010fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	f003 0301 	and.w	r3, r3, #1
 8010fd8:	2b01      	cmp	r3, #1
 8010fda:	d007      	beq.n	8010fec <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	681a      	ldr	r2, [r3, #0]
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	f042 0201 	orr.w	r2, r2, #1
 8010fea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	681a      	ldr	r2, [r3, #0]
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010ffa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	2221      	movs	r2, #33	; 0x21
 8011000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	2240      	movs	r2, #64	; 0x40
 8011008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	2200      	movs	r2, #0
 8011010:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011016:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801101c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011022:	b29a      	uxth	r2, r3
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	4a68      	ldr	r2, [pc, #416]	; (80111cc <HAL_I2C_Mem_Write_DMA+0x2a0>)
 801102c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 801102e:	897a      	ldrh	r2, [r7, #10]
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8011034:	893a      	ldrh	r2, [r7, #8]
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 801103a:	88fa      	ldrh	r2, [r7, #6]
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	2200      	movs	r2, #0
 8011044:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801104a:	2b00      	cmp	r3, #0
 801104c:	f000 80a1 	beq.w	8011192 <HAL_I2C_Mem_Write_DMA+0x266>
    {
      if (hi2c->hdmatx != NULL)
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011054:	2b00      	cmp	r3, #0
 8011056:	d022      	beq.n	801109e <HAL_I2C_Mem_Write_DMA+0x172>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801105c:	4a5c      	ldr	r2, [pc, #368]	; (80111d0 <HAL_I2C_Mem_Write_DMA+0x2a4>)
 801105e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011064:	4a5b      	ldr	r2, [pc, #364]	; (80111d4 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8011066:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801106c:	2200      	movs	r2, #0
 801106e:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011074:	2200      	movs	r2, #0
 8011076:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011080:	4619      	mov	r1, r3
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	3310      	adds	r3, #16
 8011088:	461a      	mov	r2, r3
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801108e:	f7fe fbb9 	bl	800f804 <HAL_DMA_Start_IT>
 8011092:	4603      	mov	r3, r0
 8011094:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8011096:	7efb      	ldrb	r3, [r7, #27]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d166      	bne.n	801116a <HAL_I2C_Mem_Write_DMA+0x23e>
 801109c:	e013      	b.n	80110c6 <HAL_I2C_Mem_Write_DMA+0x19a>
        hi2c->State     = HAL_I2C_STATE_READY;
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	2220      	movs	r2, #32
 80110a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	2200      	movs	r2, #0
 80110aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110b2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	2200      	movs	r2, #0
 80110be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80110c2:	2301      	movs	r3, #1
 80110c4:	e07a      	b.n	80111bc <HAL_I2C_Mem_Write_DMA+0x290>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80110c6:	88f8      	ldrh	r0, [r7, #6]
 80110c8:	893a      	ldrh	r2, [r7, #8]
 80110ca:	8979      	ldrh	r1, [r7, #10]
 80110cc:	69fb      	ldr	r3, [r7, #28]
 80110ce:	9301      	str	r3, [sp, #4]
 80110d0:	2323      	movs	r3, #35	; 0x23
 80110d2:	9300      	str	r3, [sp, #0]
 80110d4:	4603      	mov	r3, r0
 80110d6:	68f8      	ldr	r0, [r7, #12]
 80110d8:	f001 fdd8 	bl	8012c8c <I2C_RequestMemoryWrite>
 80110dc:	4603      	mov	r3, r0
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d022      	beq.n	8011128 <HAL_I2C_Mem_Write_DMA+0x1fc>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110e6:	4618      	mov	r0, r3
 80110e8:	f7fe fc28 	bl	800f93c <HAL_DMA_Abort_IT>
 80110ec:	4603      	mov	r3, r0
 80110ee:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110f4:	2200      	movs	r2, #0
 80110f6:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	681a      	ldr	r2, [r3, #0]
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011106:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	2200      	movs	r2, #0
 801110c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	2200      	movs	r2, #0
 8011112:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	681a      	ldr	r2, [r3, #0]
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	f022 0201 	bic.w	r2, r2, #1
 8011122:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8011124:	2301      	movs	r3, #1
 8011126:	e049      	b.n	80111bc <HAL_I2C_Mem_Write_DMA+0x290>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011128:	2300      	movs	r3, #0
 801112a:	613b      	str	r3, [r7, #16]
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	695b      	ldr	r3, [r3, #20]
 8011132:	613b      	str	r3, [r7, #16]
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	699b      	ldr	r3, [r3, #24]
 801113a:	613b      	str	r3, [r7, #16]
 801113c:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	2200      	movs	r2, #0
 8011142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	685a      	ldr	r2, [r3, #4]
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011154:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	685a      	ldr	r2, [r3, #4]
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011164:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8011166:	2300      	movs	r3, #0
 8011168:	e028      	b.n	80111bc <HAL_I2C_Mem_Write_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	2220      	movs	r2, #32
 801116e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	2200      	movs	r2, #0
 8011176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801117e:	f043 0210 	orr.w	r2, r3, #16
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	2200      	movs	r2, #0
 801118a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801118e:	2301      	movs	r3, #1
 8011190:	e014      	b.n	80111bc <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	2220      	movs	r2, #32
 8011196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	2200      	movs	r2, #0
 801119e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	2200      	movs	r2, #0
 80111b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80111b6:	2301      	movs	r3, #1
 80111b8:	e000      	b.n	80111bc <HAL_I2C_Mem_Write_DMA+0x290>
    }
  }
  else
  {
    return HAL_BUSY;
 80111ba:	2302      	movs	r3, #2
  }
}
 80111bc:	4618      	mov	r0, r3
 80111be:	3720      	adds	r7, #32
 80111c0:	46bd      	mov	sp, r7
 80111c2:	bd80      	pop	{r7, pc}
 80111c4:	20000698 	.word	0x20000698
 80111c8:	14f8b589 	.word	0x14f8b589
 80111cc:	ffff0000 	.word	0xffff0000
 80111d0:	08012f89 	.word	0x08012f89
 80111d4:	08013133 	.word	0x08013133

080111d8 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b08c      	sub	sp, #48	; 0x30
 80111dc:	af02      	add	r7, sp, #8
 80111de:	60f8      	str	r0, [r7, #12]
 80111e0:	4608      	mov	r0, r1
 80111e2:	4611      	mov	r1, r2
 80111e4:	461a      	mov	r2, r3
 80111e6:	4603      	mov	r3, r0
 80111e8:	817b      	strh	r3, [r7, #10]
 80111ea:	460b      	mov	r3, r1
 80111ec:	813b      	strh	r3, [r7, #8]
 80111ee:	4613      	mov	r3, r2
 80111f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80111f2:	f7fd fadb 	bl	800e7ac <HAL_GetTick>
 80111f6:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 80111f8:	2300      	movs	r3, #0
 80111fa:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011202:	b2db      	uxtb	r3, r3
 8011204:	2b20      	cmp	r3, #32
 8011206:	f040 8168 	bne.w	80114da <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 801120a:	4b98      	ldr	r3, [pc, #608]	; (801146c <HAL_I2C_Mem_Read_DMA+0x294>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	08db      	lsrs	r3, r3, #3
 8011210:	4a97      	ldr	r2, [pc, #604]	; (8011470 <HAL_I2C_Mem_Read_DMA+0x298>)
 8011212:	fba2 2303 	umull	r2, r3, r2, r3
 8011216:	0a1a      	lsrs	r2, r3, #8
 8011218:	4613      	mov	r3, r2
 801121a:	009b      	lsls	r3, r3, #2
 801121c:	4413      	add	r3, r2
 801121e:	009a      	lsls	r2, r3, #2
 8011220:	4413      	add	r3, r2
 8011222:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8011224:	69fb      	ldr	r3, [r7, #28]
 8011226:	3b01      	subs	r3, #1
 8011228:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 801122a:	69fb      	ldr	r3, [r7, #28]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d112      	bne.n	8011256 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	2200      	movs	r2, #0
 8011234:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	2220      	movs	r2, #32
 801123a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2200      	movs	r2, #0
 8011242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801124a:	f043 0220 	orr.w	r2, r3, #32
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8011252:	2302      	movs	r3, #2
 8011254:	e142      	b.n	80114dc <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	699b      	ldr	r3, [r3, #24]
 801125c:	f003 0302 	and.w	r3, r3, #2
 8011260:	2b02      	cmp	r3, #2
 8011262:	d0df      	beq.n	8011224 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801126a:	2b01      	cmp	r3, #1
 801126c:	d101      	bne.n	8011272 <HAL_I2C_Mem_Read_DMA+0x9a>
 801126e:	2302      	movs	r3, #2
 8011270:	e134      	b.n	80114dc <HAL_I2C_Mem_Read_DMA+0x304>
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	2201      	movs	r2, #1
 8011276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	f003 0301 	and.w	r3, r3, #1
 8011284:	2b01      	cmp	r3, #1
 8011286:	d007      	beq.n	8011298 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	681a      	ldr	r2, [r3, #0]
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	f042 0201 	orr.w	r2, r2, #1
 8011296:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	681a      	ldr	r2, [r3, #0]
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80112a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	2222      	movs	r2, #34	; 0x22
 80112ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	2240      	movs	r2, #64	; 0x40
 80112b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	2200      	movs	r2, #0
 80112bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80112c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80112ce:	b29a      	uxth	r2, r3
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	4a67      	ldr	r2, [pc, #412]	; (8011474 <HAL_I2C_Mem_Read_DMA+0x29c>)
 80112d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80112da:	897a      	ldrh	r2, [r7, #10]
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80112e0:	893a      	ldrh	r2, [r7, #8]
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80112e6:	88fa      	ldrh	r2, [r7, #6]
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	2200      	movs	r2, #0
 80112f0:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	f000 80c2 	beq.w	8011480 <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011300:	2b00      	cmp	r3, #0
 8011302:	d024      	beq.n	801134e <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011308:	4a5b      	ldr	r2, [pc, #364]	; (8011478 <HAL_I2C_Mem_Read_DMA+0x2a0>)
 801130a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011310:	4a5a      	ldr	r2, [pc, #360]	; (801147c <HAL_I2C_Mem_Read_DMA+0x2a4>)
 8011312:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011318:	2200      	movs	r2, #0
 801131a:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011320:	2200      	movs	r2, #0
 8011322:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	3310      	adds	r3, #16
 801132e:	4619      	mov	r1, r3
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011334:	461a      	mov	r2, r3
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801133a:	f7fe fa63 	bl	800f804 <HAL_DMA_Start_IT>
 801133e:	4603      	mov	r3, r0
 8011340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8011344:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011348:	2b00      	cmp	r3, #0
 801134a:	d17b      	bne.n	8011444 <HAL_I2C_Mem_Read_DMA+0x26c>
 801134c:	e013      	b.n	8011376 <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	2220      	movs	r2, #32
 8011352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	2200      	movs	r2, #0
 801135a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011362:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	2200      	movs	r2, #0
 801136e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8011372:	2301      	movs	r3, #1
 8011374:	e0b2      	b.n	80114dc <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8011376:	88f8      	ldrh	r0, [r7, #6]
 8011378:	893a      	ldrh	r2, [r7, #8]
 801137a:	8979      	ldrh	r1, [r7, #10]
 801137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137e:	9301      	str	r3, [sp, #4]
 8011380:	2323      	movs	r3, #35	; 0x23
 8011382:	9300      	str	r3, [sp, #0]
 8011384:	4603      	mov	r3, r0
 8011386:	68f8      	ldr	r0, [r7, #12]
 8011388:	f001 fd16 	bl	8012db8 <I2C_RequestMemoryRead>
 801138c:	4603      	mov	r3, r0
 801138e:	2b00      	cmp	r3, #0
 8011390:	d023      	beq.n	80113da <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011396:	4618      	mov	r0, r3
 8011398:	f7fe fad0 	bl	800f93c <HAL_DMA_Abort_IT>
 801139c:	4603      	mov	r3, r0
 801139e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113a6:	2200      	movs	r2, #0
 80113a8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	681a      	ldr	r2, [r3, #0]
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80113b8:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	2200      	movs	r2, #0
 80113be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	2200      	movs	r2, #0
 80113c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	681a      	ldr	r2, [r3, #0]
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	f022 0201 	bic.w	r2, r2, #1
 80113d4:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80113d6:	2301      	movs	r3, #1
 80113d8:	e080      	b.n	80114dc <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80113de:	2b01      	cmp	r3, #1
 80113e0:	d108      	bne.n	80113f4 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	681a      	ldr	r2, [r3, #0]
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80113f0:	601a      	str	r2, [r3, #0]
 80113f2:	e007      	b.n	8011404 <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	685a      	ldr	r2, [r3, #4]
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011402:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011404:	2300      	movs	r3, #0
 8011406:	61bb      	str	r3, [r7, #24]
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	695b      	ldr	r3, [r3, #20]
 801140e:	61bb      	str	r3, [r7, #24]
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	699b      	ldr	r3, [r3, #24]
 8011416:	61bb      	str	r3, [r7, #24]
 8011418:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	2200      	movs	r2, #0
 801141e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	685a      	ldr	r2, [r3, #4]
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011430:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	685a      	ldr	r2, [r3, #4]
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011440:	605a      	str	r2, [r3, #4]
 8011442:	e048      	b.n	80114d6 <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	2220      	movs	r2, #32
 8011448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	2200      	movs	r2, #0
 8011450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011458:	f043 0210 	orr.w	r2, r3, #16
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	2200      	movs	r2, #0
 8011464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011468:	2301      	movs	r3, #1
 801146a:	e037      	b.n	80114dc <HAL_I2C_Mem_Read_DMA+0x304>
 801146c:	20000698 	.word	0x20000698
 8011470:	14f8b589 	.word	0x14f8b589
 8011474:	ffff0000 	.word	0xffff0000
 8011478:	08012f89 	.word	0x08012f89
 801147c:	08013133 	.word	0x08013133
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8011480:	88f8      	ldrh	r0, [r7, #6]
 8011482:	893a      	ldrh	r2, [r7, #8]
 8011484:	8979      	ldrh	r1, [r7, #10]
 8011486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011488:	9301      	str	r3, [sp, #4]
 801148a:	2323      	movs	r3, #35	; 0x23
 801148c:	9300      	str	r3, [sp, #0]
 801148e:	4603      	mov	r3, r0
 8011490:	68f8      	ldr	r0, [r7, #12]
 8011492:	f001 fc91 	bl	8012db8 <I2C_RequestMemoryRead>
 8011496:	4603      	mov	r3, r0
 8011498:	2b00      	cmp	r3, #0
 801149a:	d001      	beq.n	80114a0 <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 801149c:	2301      	movs	r3, #1
 801149e:	e01d      	b.n	80114dc <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80114a0:	2300      	movs	r3, #0
 80114a2:	617b      	str	r3, [r7, #20]
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	695b      	ldr	r3, [r3, #20]
 80114aa:	617b      	str	r3, [r7, #20]
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	699b      	ldr	r3, [r3, #24]
 80114b2:	617b      	str	r3, [r7, #20]
 80114b4:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	681a      	ldr	r2, [r3, #0]
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80114c4:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	2220      	movs	r2, #32
 80114ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	2200      	movs	r2, #0
 80114d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 80114d6:	2300      	movs	r3, #0
 80114d8:	e000      	b.n	80114dc <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 80114da:	2302      	movs	r3, #2
  }
}
 80114dc:	4618      	mov	r0, r3
 80114de:	3728      	adds	r7, #40	; 0x28
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}

080114e4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b08a      	sub	sp, #40	; 0x28
 80114e8:	af02      	add	r7, sp, #8
 80114ea:	60f8      	str	r0, [r7, #12]
 80114ec:	607a      	str	r2, [r7, #4]
 80114ee:	603b      	str	r3, [r7, #0]
 80114f0:	460b      	mov	r3, r1
 80114f2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80114f4:	f7fd f95a 	bl	800e7ac <HAL_GetTick>
 80114f8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80114fa:	2300      	movs	r3, #0
 80114fc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011504:	b2db      	uxtb	r3, r3
 8011506:	2b20      	cmp	r3, #32
 8011508:	f040 8111 	bne.w	801172e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801150c:	69fb      	ldr	r3, [r7, #28]
 801150e:	9300      	str	r3, [sp, #0]
 8011510:	2319      	movs	r3, #25
 8011512:	2201      	movs	r2, #1
 8011514:	4988      	ldr	r1, [pc, #544]	; (8011738 <HAL_I2C_IsDeviceReady+0x254>)
 8011516:	68f8      	ldr	r0, [r7, #12]
 8011518:	f001 feea 	bl	80132f0 <I2C_WaitOnFlagUntilTimeout>
 801151c:	4603      	mov	r3, r0
 801151e:	2b00      	cmp	r3, #0
 8011520:	d001      	beq.n	8011526 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8011522:	2302      	movs	r3, #2
 8011524:	e104      	b.n	8011730 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801152c:	2b01      	cmp	r3, #1
 801152e:	d101      	bne.n	8011534 <HAL_I2C_IsDeviceReady+0x50>
 8011530:	2302      	movs	r3, #2
 8011532:	e0fd      	b.n	8011730 <HAL_I2C_IsDeviceReady+0x24c>
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	2201      	movs	r2, #1
 8011538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	f003 0301 	and.w	r3, r3, #1
 8011546:	2b01      	cmp	r3, #1
 8011548:	d007      	beq.n	801155a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	681a      	ldr	r2, [r3, #0]
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	f042 0201 	orr.w	r2, r2, #1
 8011558:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	681a      	ldr	r2, [r3, #0]
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011568:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	2224      	movs	r2, #36	; 0x24
 801156e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	2200      	movs	r2, #0
 8011576:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	4a70      	ldr	r2, [pc, #448]	; (801173c <HAL_I2C_IsDeviceReady+0x258>)
 801157c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	681a      	ldr	r2, [r3, #0]
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801158c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 801158e:	69fb      	ldr	r3, [r7, #28]
 8011590:	9300      	str	r3, [sp, #0]
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	2200      	movs	r2, #0
 8011596:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801159a:	68f8      	ldr	r0, [r7, #12]
 801159c:	f001 fea8 	bl	80132f0 <I2C_WaitOnFlagUntilTimeout>
 80115a0:	4603      	mov	r3, r0
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d00d      	beq.n	80115c2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80115b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80115b4:	d103      	bne.n	80115be <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80115bc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80115be:	2303      	movs	r3, #3
 80115c0:	e0b6      	b.n	8011730 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80115c2:	897b      	ldrh	r3, [r7, #10]
 80115c4:	b2db      	uxtb	r3, r3
 80115c6:	461a      	mov	r2, r3
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80115d0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80115d2:	f7fd f8eb 	bl	800e7ac <HAL_GetTick>
 80115d6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	695b      	ldr	r3, [r3, #20]
 80115de:	f003 0302 	and.w	r3, r3, #2
 80115e2:	2b02      	cmp	r3, #2
 80115e4:	bf0c      	ite	eq
 80115e6:	2301      	moveq	r3, #1
 80115e8:	2300      	movne	r3, #0
 80115ea:	b2db      	uxtb	r3, r3
 80115ec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	695b      	ldr	r3, [r3, #20]
 80115f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80115f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80115fc:	bf0c      	ite	eq
 80115fe:	2301      	moveq	r3, #1
 8011600:	2300      	movne	r3, #0
 8011602:	b2db      	uxtb	r3, r3
 8011604:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8011606:	e025      	b.n	8011654 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8011608:	f7fd f8d0 	bl	800e7ac <HAL_GetTick>
 801160c:	4602      	mov	r2, r0
 801160e:	69fb      	ldr	r3, [r7, #28]
 8011610:	1ad3      	subs	r3, r2, r3
 8011612:	683a      	ldr	r2, [r7, #0]
 8011614:	429a      	cmp	r2, r3
 8011616:	d302      	bcc.n	801161e <HAL_I2C_IsDeviceReady+0x13a>
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d103      	bne.n	8011626 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	22a0      	movs	r2, #160	; 0xa0
 8011622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	695b      	ldr	r3, [r3, #20]
 801162c:	f003 0302 	and.w	r3, r3, #2
 8011630:	2b02      	cmp	r3, #2
 8011632:	bf0c      	ite	eq
 8011634:	2301      	moveq	r3, #1
 8011636:	2300      	movne	r3, #0
 8011638:	b2db      	uxtb	r3, r3
 801163a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	695b      	ldr	r3, [r3, #20]
 8011642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801164a:	bf0c      	ite	eq
 801164c:	2301      	moveq	r3, #1
 801164e:	2300      	movne	r3, #0
 8011650:	b2db      	uxtb	r3, r3
 8011652:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801165a:	b2db      	uxtb	r3, r3
 801165c:	2ba0      	cmp	r3, #160	; 0xa0
 801165e:	d005      	beq.n	801166c <HAL_I2C_IsDeviceReady+0x188>
 8011660:	7dfb      	ldrb	r3, [r7, #23]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d102      	bne.n	801166c <HAL_I2C_IsDeviceReady+0x188>
 8011666:	7dbb      	ldrb	r3, [r7, #22]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d0cd      	beq.n	8011608 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	2220      	movs	r2, #32
 8011670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	695b      	ldr	r3, [r3, #20]
 801167a:	f003 0302 	and.w	r3, r3, #2
 801167e:	2b02      	cmp	r3, #2
 8011680:	d129      	bne.n	80116d6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	681a      	ldr	r2, [r3, #0]
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011690:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011692:	2300      	movs	r3, #0
 8011694:	613b      	str	r3, [r7, #16]
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	695b      	ldr	r3, [r3, #20]
 801169c:	613b      	str	r3, [r7, #16]
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	699b      	ldr	r3, [r3, #24]
 80116a4:	613b      	str	r3, [r7, #16]
 80116a6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80116a8:	69fb      	ldr	r3, [r7, #28]
 80116aa:	9300      	str	r3, [sp, #0]
 80116ac:	2319      	movs	r3, #25
 80116ae:	2201      	movs	r2, #1
 80116b0:	4921      	ldr	r1, [pc, #132]	; (8011738 <HAL_I2C_IsDeviceReady+0x254>)
 80116b2:	68f8      	ldr	r0, [r7, #12]
 80116b4:	f001 fe1c 	bl	80132f0 <I2C_WaitOnFlagUntilTimeout>
 80116b8:	4603      	mov	r3, r0
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d001      	beq.n	80116c2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80116be:	2301      	movs	r3, #1
 80116c0:	e036      	b.n	8011730 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	2220      	movs	r2, #32
 80116c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	2200      	movs	r2, #0
 80116ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80116d2:	2300      	movs	r3, #0
 80116d4:	e02c      	b.n	8011730 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	681a      	ldr	r2, [r3, #0]
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80116e4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80116ee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80116f0:	69fb      	ldr	r3, [r7, #28]
 80116f2:	9300      	str	r3, [sp, #0]
 80116f4:	2319      	movs	r3, #25
 80116f6:	2201      	movs	r2, #1
 80116f8:	490f      	ldr	r1, [pc, #60]	; (8011738 <HAL_I2C_IsDeviceReady+0x254>)
 80116fa:	68f8      	ldr	r0, [r7, #12]
 80116fc:	f001 fdf8 	bl	80132f0 <I2C_WaitOnFlagUntilTimeout>
 8011700:	4603      	mov	r3, r0
 8011702:	2b00      	cmp	r3, #0
 8011704:	d001      	beq.n	801170a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8011706:	2301      	movs	r3, #1
 8011708:	e012      	b.n	8011730 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 801170a:	69bb      	ldr	r3, [r7, #24]
 801170c:	3301      	adds	r3, #1
 801170e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8011710:	69ba      	ldr	r2, [r7, #24]
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	429a      	cmp	r2, r3
 8011716:	f4ff af32 	bcc.w	801157e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	2220      	movs	r2, #32
 801171e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	2200      	movs	r2, #0
 8011726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801172a:	2301      	movs	r3, #1
 801172c:	e000      	b.n	8011730 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 801172e:	2302      	movs	r3, #2
  }
}
 8011730:	4618      	mov	r0, r3
 8011732:	3720      	adds	r7, #32
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}
 8011738:	00100002 	.word	0x00100002
 801173c:	ffff0000 	.word	0xffff0000

08011740 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b088      	sub	sp, #32
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8011748:	2300      	movs	r3, #0
 801174a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	685b      	ldr	r3, [r3, #4]
 8011752:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011758:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011760:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011768:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 801176a:	7bfb      	ldrb	r3, [r7, #15]
 801176c:	2b10      	cmp	r3, #16
 801176e:	d003      	beq.n	8011778 <HAL_I2C_EV_IRQHandler+0x38>
 8011770:	7bfb      	ldrb	r3, [r7, #15]
 8011772:	2b40      	cmp	r3, #64	; 0x40
 8011774:	f040 80b1 	bne.w	80118da <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	699b      	ldr	r3, [r3, #24]
 801177e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	695b      	ldr	r3, [r3, #20]
 8011786:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8011788:	69fb      	ldr	r3, [r7, #28]
 801178a:	f003 0301 	and.w	r3, r3, #1
 801178e:	2b00      	cmp	r3, #0
 8011790:	d10d      	bne.n	80117ae <HAL_I2C_EV_IRQHandler+0x6e>
 8011792:	693b      	ldr	r3, [r7, #16]
 8011794:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8011798:	d003      	beq.n	80117a2 <HAL_I2C_EV_IRQHandler+0x62>
 801179a:	693b      	ldr	r3, [r7, #16]
 801179c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80117a0:	d101      	bne.n	80117a6 <HAL_I2C_EV_IRQHandler+0x66>
 80117a2:	2301      	movs	r3, #1
 80117a4:	e000      	b.n	80117a8 <HAL_I2C_EV_IRQHandler+0x68>
 80117a6:	2300      	movs	r3, #0
 80117a8:	2b01      	cmp	r3, #1
 80117aa:	f000 8114 	beq.w	80119d6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80117ae:	69fb      	ldr	r3, [r7, #28]
 80117b0:	f003 0301 	and.w	r3, r3, #1
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d00b      	beq.n	80117d0 <HAL_I2C_EV_IRQHandler+0x90>
 80117b8:	697b      	ldr	r3, [r7, #20]
 80117ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d006      	beq.n	80117d0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80117c2:	6878      	ldr	r0, [r7, #4]
 80117c4:	f001 fffb 	bl	80137be <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f000 fcb0 	bl	801212e <I2C_Master_SB>
 80117ce:	e083      	b.n	80118d8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80117d0:	69fb      	ldr	r3, [r7, #28]
 80117d2:	f003 0308 	and.w	r3, r3, #8
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d008      	beq.n	80117ec <HAL_I2C_EV_IRQHandler+0xac>
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d003      	beq.n	80117ec <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80117e4:	6878      	ldr	r0, [r7, #4]
 80117e6:	f000 fd27 	bl	8012238 <I2C_Master_ADD10>
 80117ea:	e075      	b.n	80118d8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80117ec:	69fb      	ldr	r3, [r7, #28]
 80117ee:	f003 0302 	and.w	r3, r3, #2
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d008      	beq.n	8011808 <HAL_I2C_EV_IRQHandler+0xc8>
 80117f6:	697b      	ldr	r3, [r7, #20]
 80117f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d003      	beq.n	8011808 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f000 fd42 	bl	801228a <I2C_Master_ADDR>
 8011806:	e067      	b.n	80118d8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8011808:	69bb      	ldr	r3, [r7, #24]
 801180a:	f003 0304 	and.w	r3, r3, #4
 801180e:	2b00      	cmp	r3, #0
 8011810:	d036      	beq.n	8011880 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	685b      	ldr	r3, [r3, #4]
 8011818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801181c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011820:	f000 80db 	beq.w	80119da <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011824:	69fb      	ldr	r3, [r7, #28]
 8011826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801182a:	2b00      	cmp	r3, #0
 801182c:	d00d      	beq.n	801184a <HAL_I2C_EV_IRQHandler+0x10a>
 801182e:	697b      	ldr	r3, [r7, #20]
 8011830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011834:	2b00      	cmp	r3, #0
 8011836:	d008      	beq.n	801184a <HAL_I2C_EV_IRQHandler+0x10a>
 8011838:	69fb      	ldr	r3, [r7, #28]
 801183a:	f003 0304 	and.w	r3, r3, #4
 801183e:	2b00      	cmp	r3, #0
 8011840:	d103      	bne.n	801184a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	f000 f924 	bl	8011a90 <I2C_MasterTransmit_TXE>
 8011848:	e046      	b.n	80118d8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801184a:	69fb      	ldr	r3, [r7, #28]
 801184c:	f003 0304 	and.w	r3, r3, #4
 8011850:	2b00      	cmp	r3, #0
 8011852:	f000 80c2 	beq.w	80119da <HAL_I2C_EV_IRQHandler+0x29a>
 8011856:	697b      	ldr	r3, [r7, #20]
 8011858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801185c:	2b00      	cmp	r3, #0
 801185e:	f000 80bc 	beq.w	80119da <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8011862:	7bbb      	ldrb	r3, [r7, #14]
 8011864:	2b21      	cmp	r3, #33	; 0x21
 8011866:	d103      	bne.n	8011870 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8011868:	6878      	ldr	r0, [r7, #4]
 801186a:	f000 f9ad 	bl	8011bc8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801186e:	e0b4      	b.n	80119da <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8011870:	7bfb      	ldrb	r3, [r7, #15]
 8011872:	2b40      	cmp	r3, #64	; 0x40
 8011874:	f040 80b1 	bne.w	80119da <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8011878:	6878      	ldr	r0, [r7, #4]
 801187a:	f000 fa1b 	bl	8011cb4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801187e:	e0ac      	b.n	80119da <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	685b      	ldr	r3, [r3, #4]
 8011886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801188a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801188e:	f000 80a4 	beq.w	80119da <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011892:	69fb      	ldr	r3, [r7, #28]
 8011894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011898:	2b00      	cmp	r3, #0
 801189a:	d00d      	beq.n	80118b8 <HAL_I2C_EV_IRQHandler+0x178>
 801189c:	697b      	ldr	r3, [r7, #20]
 801189e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d008      	beq.n	80118b8 <HAL_I2C_EV_IRQHandler+0x178>
 80118a6:	69fb      	ldr	r3, [r7, #28]
 80118a8:	f003 0304 	and.w	r3, r3, #4
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d103      	bne.n	80118b8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f000 fa97 	bl	8011de4 <I2C_MasterReceive_RXNE>
 80118b6:	e00f      	b.n	80118d8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80118b8:	69fb      	ldr	r3, [r7, #28]
 80118ba:	f003 0304 	and.w	r3, r3, #4
 80118be:	2b00      	cmp	r3, #0
 80118c0:	f000 808b 	beq.w	80119da <HAL_I2C_EV_IRQHandler+0x29a>
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	f000 8085 	beq.w	80119da <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	f000 fb42 	bl	8011f5a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80118d6:	e080      	b.n	80119da <HAL_I2C_EV_IRQHandler+0x29a>
 80118d8:	e07f      	b.n	80119da <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d004      	beq.n	80118ec <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	695b      	ldr	r3, [r3, #20]
 80118e8:	61fb      	str	r3, [r7, #28]
 80118ea:	e007      	b.n	80118fc <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	699b      	ldr	r3, [r3, #24]
 80118f2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	695b      	ldr	r3, [r3, #20]
 80118fa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80118fc:	69fb      	ldr	r3, [r7, #28]
 80118fe:	f003 0302 	and.w	r3, r3, #2
 8011902:	2b00      	cmp	r3, #0
 8011904:	d011      	beq.n	801192a <HAL_I2C_EV_IRQHandler+0x1ea>
 8011906:	697b      	ldr	r3, [r7, #20]
 8011908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801190c:	2b00      	cmp	r3, #0
 801190e:	d00c      	beq.n	801192a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011914:	2b00      	cmp	r3, #0
 8011916:	d003      	beq.n	8011920 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	699b      	ldr	r3, [r3, #24]
 801191e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8011920:	69b9      	ldr	r1, [r7, #24]
 8011922:	6878      	ldr	r0, [r7, #4]
 8011924:	f000 ff08 	bl	8012738 <I2C_Slave_ADDR>
 8011928:	e05a      	b.n	80119e0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 801192a:	69fb      	ldr	r3, [r7, #28]
 801192c:	f003 0310 	and.w	r3, r3, #16
 8011930:	2b00      	cmp	r3, #0
 8011932:	d008      	beq.n	8011946 <HAL_I2C_EV_IRQHandler+0x206>
 8011934:	697b      	ldr	r3, [r7, #20]
 8011936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801193a:	2b00      	cmp	r3, #0
 801193c:	d003      	beq.n	8011946 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f000 ff42 	bl	80127c8 <I2C_Slave_STOPF>
 8011944:	e04c      	b.n	80119e0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8011946:	7bbb      	ldrb	r3, [r7, #14]
 8011948:	2b21      	cmp	r3, #33	; 0x21
 801194a:	d002      	beq.n	8011952 <HAL_I2C_EV_IRQHandler+0x212>
 801194c:	7bbb      	ldrb	r3, [r7, #14]
 801194e:	2b29      	cmp	r3, #41	; 0x29
 8011950:	d120      	bne.n	8011994 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011952:	69fb      	ldr	r3, [r7, #28]
 8011954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011958:	2b00      	cmp	r3, #0
 801195a:	d00d      	beq.n	8011978 <HAL_I2C_EV_IRQHandler+0x238>
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011962:	2b00      	cmp	r3, #0
 8011964:	d008      	beq.n	8011978 <HAL_I2C_EV_IRQHandler+0x238>
 8011966:	69fb      	ldr	r3, [r7, #28]
 8011968:	f003 0304 	and.w	r3, r3, #4
 801196c:	2b00      	cmp	r3, #0
 801196e:	d103      	bne.n	8011978 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8011970:	6878      	ldr	r0, [r7, #4]
 8011972:	f000 fe25 	bl	80125c0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011976:	e032      	b.n	80119de <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8011978:	69fb      	ldr	r3, [r7, #28]
 801197a:	f003 0304 	and.w	r3, r3, #4
 801197e:	2b00      	cmp	r3, #0
 8011980:	d02d      	beq.n	80119de <HAL_I2C_EV_IRQHandler+0x29e>
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011988:	2b00      	cmp	r3, #0
 801198a:	d028      	beq.n	80119de <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 801198c:	6878      	ldr	r0, [r7, #4]
 801198e:	f000 fe54 	bl	801263a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011992:	e024      	b.n	80119de <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8011994:	69fb      	ldr	r3, [r7, #28]
 8011996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801199a:	2b00      	cmp	r3, #0
 801199c:	d00d      	beq.n	80119ba <HAL_I2C_EV_IRQHandler+0x27a>
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d008      	beq.n	80119ba <HAL_I2C_EV_IRQHandler+0x27a>
 80119a8:	69fb      	ldr	r3, [r7, #28]
 80119aa:	f003 0304 	and.w	r3, r3, #4
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d103      	bne.n	80119ba <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	f000 fe61 	bl	801267a <I2C_SlaveReceive_RXNE>
 80119b8:	e012      	b.n	80119e0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80119ba:	69fb      	ldr	r3, [r7, #28]
 80119bc:	f003 0304 	and.w	r3, r3, #4
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d00d      	beq.n	80119e0 <HAL_I2C_EV_IRQHandler+0x2a0>
 80119c4:	697b      	ldr	r3, [r7, #20]
 80119c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d008      	beq.n	80119e0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80119ce:	6878      	ldr	r0, [r7, #4]
 80119d0:	f000 fe91 	bl	80126f6 <I2C_SlaveReceive_BTF>
 80119d4:	e004      	b.n	80119e0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80119d6:	bf00      	nop
 80119d8:	e002      	b.n	80119e0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80119da:	bf00      	nop
 80119dc:	e000      	b.n	80119e0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80119de:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80119e0:	3720      	adds	r7, #32
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}

080119e6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80119e6:	b480      	push	{r7}
 80119e8:	b083      	sub	sp, #12
 80119ea:	af00      	add	r7, sp, #0
 80119ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80119ee:	bf00      	nop
 80119f0:	370c      	adds	r7, #12
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bc80      	pop	{r7}
 80119f6:	4770      	bx	lr

080119f8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80119f8:	b480      	push	{r7}
 80119fa:	b083      	sub	sp, #12
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8011a00:	bf00      	nop
 8011a02:	370c      	adds	r7, #12
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bc80      	pop	{r7}
 8011a08:	4770      	bx	lr

08011a0a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011a0a:	b480      	push	{r7}
 8011a0c:	b083      	sub	sp, #12
 8011a0e:	af00      	add	r7, sp, #0
 8011a10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8011a12:	bf00      	nop
 8011a14:	370c      	adds	r7, #12
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bc80      	pop	{r7}
 8011a1a:	4770      	bx	lr

08011a1c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011a1c:	b480      	push	{r7}
 8011a1e:	b083      	sub	sp, #12
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8011a24:	bf00      	nop
 8011a26:	370c      	adds	r7, #12
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	bc80      	pop	{r7}
 8011a2c:	4770      	bx	lr

08011a2e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8011a2e:	b480      	push	{r7}
 8011a30:	b083      	sub	sp, #12
 8011a32:	af00      	add	r7, sp, #0
 8011a34:	6078      	str	r0, [r7, #4]
 8011a36:	460b      	mov	r3, r1
 8011a38:	70fb      	strb	r3, [r7, #3]
 8011a3a:	4613      	mov	r3, r2
 8011a3c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8011a3e:	bf00      	nop
 8011a40:	370c      	adds	r7, #12
 8011a42:	46bd      	mov	sp, r7
 8011a44:	bc80      	pop	{r7}
 8011a46:	4770      	bx	lr

08011a48 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011a48:	b480      	push	{r7}
 8011a4a:	b083      	sub	sp, #12
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8011a50:	bf00      	nop
 8011a52:	370c      	adds	r7, #12
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bc80      	pop	{r7}
 8011a58:	4770      	bx	lr

08011a5a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011a5a:	b480      	push	{r7}
 8011a5c:	b083      	sub	sp, #12
 8011a5e:	af00      	add	r7, sp, #0
 8011a60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8011a62:	bf00      	nop
 8011a64:	370c      	adds	r7, #12
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bc80      	pop	{r7}
 8011a6a:	4770      	bx	lr

08011a6c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	b083      	sub	sp, #12
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8011a74:	bf00      	nop
 8011a76:	370c      	adds	r7, #12
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bc80      	pop	{r7}
 8011a7c:	4770      	bx	lr

08011a7e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011a7e:	b480      	push	{r7}
 8011a80:	b083      	sub	sp, #12
 8011a82:	af00      	add	r7, sp, #0
 8011a84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8011a86:	bf00      	nop
 8011a88:	370c      	adds	r7, #12
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	bc80      	pop	{r7}
 8011a8e:	4770      	bx	lr

08011a90 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b084      	sub	sp, #16
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011a9e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011aa6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aac:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d150      	bne.n	8011b58 <I2C_MasterTransmit_TXE+0xc8>
 8011ab6:	7bfb      	ldrb	r3, [r7, #15]
 8011ab8:	2b21      	cmp	r3, #33	; 0x21
 8011aba:	d14d      	bne.n	8011b58 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	2b08      	cmp	r3, #8
 8011ac0:	d01d      	beq.n	8011afe <I2C_MasterTransmit_TXE+0x6e>
 8011ac2:	68bb      	ldr	r3, [r7, #8]
 8011ac4:	2b20      	cmp	r3, #32
 8011ac6:	d01a      	beq.n	8011afe <I2C_MasterTransmit_TXE+0x6e>
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8011ace:	d016      	beq.n	8011afe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	685a      	ldr	r2, [r3, #4]
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011ade:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	2211      	movs	r2, #17
 8011ae4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	2200      	movs	r2, #0
 8011aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	2220      	movs	r2, #32
 8011af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8011af6:	6878      	ldr	r0, [r7, #4]
 8011af8:	f7ff ff75 	bl	80119e6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8011afc:	e060      	b.n	8011bc0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	685a      	ldr	r2, [r3, #4]
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011b0c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	681a      	ldr	r2, [r3, #0]
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011b1c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2200      	movs	r2, #0
 8011b22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	2220      	movs	r2, #32
 8011b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011b32:	b2db      	uxtb	r3, r3
 8011b34:	2b40      	cmp	r3, #64	; 0x40
 8011b36:	d107      	bne.n	8011b48 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8011b40:	6878      	ldr	r0, [r7, #4]
 8011b42:	f7fa fcb1 	bl	800c4a8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8011b46:	e03b      	b.n	8011bc0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8011b50:	6878      	ldr	r0, [r7, #4]
 8011b52:	f7ff ff48 	bl	80119e6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8011b56:	e033      	b.n	8011bc0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8011b58:	7bfb      	ldrb	r3, [r7, #15]
 8011b5a:	2b21      	cmp	r3, #33	; 0x21
 8011b5c:	d005      	beq.n	8011b6a <I2C_MasterTransmit_TXE+0xda>
 8011b5e:	7bbb      	ldrb	r3, [r7, #14]
 8011b60:	2b40      	cmp	r3, #64	; 0x40
 8011b62:	d12d      	bne.n	8011bc0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8011b64:	7bfb      	ldrb	r3, [r7, #15]
 8011b66:	2b22      	cmp	r3, #34	; 0x22
 8011b68:	d12a      	bne.n	8011bc0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011b6e:	b29b      	uxth	r3, r3
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d108      	bne.n	8011b86 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	685a      	ldr	r2, [r3, #4]
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011b82:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8011b84:	e01c      	b.n	8011bc0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011b8c:	b2db      	uxtb	r3, r3
 8011b8e:	2b40      	cmp	r3, #64	; 0x40
 8011b90:	d103      	bne.n	8011b9a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8011b92:	6878      	ldr	r0, [r7, #4]
 8011b94:	f000 f88e 	bl	8011cb4 <I2C_MemoryTransmit_TXE_BTF>
}
 8011b98:	e012      	b.n	8011bc0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b9e:	781a      	ldrb	r2, [r3, #0]
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011baa:	1c5a      	adds	r2, r3, #1
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011bb4:	b29b      	uxth	r3, r3
 8011bb6:	3b01      	subs	r3, #1
 8011bb8:	b29a      	uxth	r2, r3
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8011bbe:	e7ff      	b.n	8011bc0 <I2C_MasterTransmit_TXE+0x130>
 8011bc0:	bf00      	nop
 8011bc2:	3710      	adds	r7, #16
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd80      	pop	{r7, pc}

08011bc8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b084      	sub	sp, #16
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bd4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011bdc:	b2db      	uxtb	r3, r3
 8011bde:	2b21      	cmp	r3, #33	; 0x21
 8011be0:	d164      	bne.n	8011cac <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011be6:	b29b      	uxth	r3, r3
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d012      	beq.n	8011c12 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bf0:	781a      	ldrb	r2, [r3, #0]
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bfc:	1c5a      	adds	r2, r3, #1
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011c06:	b29b      	uxth	r3, r3
 8011c08:	3b01      	subs	r3, #1
 8011c0a:	b29a      	uxth	r2, r3
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8011c10:	e04c      	b.n	8011cac <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	2b08      	cmp	r3, #8
 8011c16:	d01d      	beq.n	8011c54 <I2C_MasterTransmit_BTF+0x8c>
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	2b20      	cmp	r3, #32
 8011c1c:	d01a      	beq.n	8011c54 <I2C_MasterTransmit_BTF+0x8c>
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8011c24:	d016      	beq.n	8011c54 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	685a      	ldr	r2, [r3, #4]
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011c34:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	2211      	movs	r2, #17
 8011c3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	2200      	movs	r2, #0
 8011c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	2220      	movs	r2, #32
 8011c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8011c4c:	6878      	ldr	r0, [r7, #4]
 8011c4e:	f7ff feca 	bl	80119e6 <HAL_I2C_MasterTxCpltCallback>
}
 8011c52:	e02b      	b.n	8011cac <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	685a      	ldr	r2, [r3, #4]
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011c62:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	681a      	ldr	r2, [r3, #0]
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011c72:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	2200      	movs	r2, #0
 8011c78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	2220      	movs	r2, #32
 8011c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011c88:	b2db      	uxtb	r3, r3
 8011c8a:	2b40      	cmp	r3, #64	; 0x40
 8011c8c:	d107      	bne.n	8011c9e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	2200      	movs	r2, #0
 8011c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8011c96:	6878      	ldr	r0, [r7, #4]
 8011c98:	f7fa fc06 	bl	800c4a8 <HAL_I2C_MemTxCpltCallback>
}
 8011c9c:	e006      	b.n	8011cac <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8011ca6:	6878      	ldr	r0, [r7, #4]
 8011ca8:	f7ff fe9d 	bl	80119e6 <HAL_I2C_MasterTxCpltCallback>
}
 8011cac:	bf00      	nop
 8011cae:	3710      	adds	r7, #16
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}

08011cb4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b084      	sub	sp, #16
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011cc2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d11d      	bne.n	8011d08 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011cd0:	2b01      	cmp	r3, #1
 8011cd2:	d10b      	bne.n	8011cec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011cd8:	b2da      	uxtb	r2, r3
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ce4:	1c9a      	adds	r2, r3, #2
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8011cea:	e077      	b.n	8011ddc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011cf0:	b29b      	uxth	r3, r3
 8011cf2:	121b      	asrs	r3, r3, #8
 8011cf4:	b2da      	uxtb	r2, r3
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d00:	1c5a      	adds	r2, r3, #1
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	651a      	str	r2, [r3, #80]	; 0x50
}
 8011d06:	e069      	b.n	8011ddc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d0c:	2b01      	cmp	r3, #1
 8011d0e:	d10b      	bne.n	8011d28 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d14:	b2da      	uxtb	r2, r3
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d20:	1c5a      	adds	r2, r3, #1
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	651a      	str	r2, [r3, #80]	; 0x50
}
 8011d26:	e059      	b.n	8011ddc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d2c:	2b02      	cmp	r3, #2
 8011d2e:	d152      	bne.n	8011dd6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8011d30:	7bfb      	ldrb	r3, [r7, #15]
 8011d32:	2b22      	cmp	r3, #34	; 0x22
 8011d34:	d10d      	bne.n	8011d52 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	681a      	ldr	r2, [r3, #0]
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011d44:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d4a:	1c5a      	adds	r2, r3, #1
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8011d50:	e044      	b.n	8011ddc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011d56:	b29b      	uxth	r3, r3
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d015      	beq.n	8011d88 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8011d5c:	7bfb      	ldrb	r3, [r7, #15]
 8011d5e:	2b21      	cmp	r3, #33	; 0x21
 8011d60:	d112      	bne.n	8011d88 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d66:	781a      	ldrb	r2, [r3, #0]
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d72:	1c5a      	adds	r2, r3, #1
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011d7c:	b29b      	uxth	r3, r3
 8011d7e:	3b01      	subs	r3, #1
 8011d80:	b29a      	uxth	r2, r3
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8011d86:	e029      	b.n	8011ddc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011d8c:	b29b      	uxth	r3, r3
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d124      	bne.n	8011ddc <I2C_MemoryTransmit_TXE_BTF+0x128>
 8011d92:	7bfb      	ldrb	r3, [r7, #15]
 8011d94:	2b21      	cmp	r3, #33	; 0x21
 8011d96:	d121      	bne.n	8011ddc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	685a      	ldr	r2, [r3, #4]
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011da6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	681a      	ldr	r2, [r3, #0]
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011db6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2200      	movs	r2, #0
 8011dbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	2220      	movs	r2, #32
 8011dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2200      	movs	r2, #0
 8011dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8011dce:	6878      	ldr	r0, [r7, #4]
 8011dd0:	f7fa fb6a 	bl	800c4a8 <HAL_I2C_MemTxCpltCallback>
}
 8011dd4:	e002      	b.n	8011ddc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8011dd6:	6878      	ldr	r0, [r7, #4]
 8011dd8:	f7fe fd31 	bl	801083e <I2C_Flush_DR>
}
 8011ddc:	bf00      	nop
 8011dde:	3710      	adds	r7, #16
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}

08011de4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b084      	sub	sp, #16
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011df2:	b2db      	uxtb	r3, r3
 8011df4:	2b22      	cmp	r3, #34	; 0x22
 8011df6:	f040 80ac 	bne.w	8011f52 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011dfe:	b29b      	uxth	r3, r3
 8011e00:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	2b03      	cmp	r3, #3
 8011e06:	d921      	bls.n	8011e4c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	691a      	ldr	r2, [r3, #16]
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e12:	b2d2      	uxtb	r2, r2
 8011e14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e1a:	1c5a      	adds	r2, r3, #1
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011e24:	b29b      	uxth	r3, r3
 8011e26:	3b01      	subs	r3, #1
 8011e28:	b29a      	uxth	r2, r3
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011e32:	b29b      	uxth	r3, r3
 8011e34:	2b03      	cmp	r3, #3
 8011e36:	f040 808c 	bne.w	8011f52 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	685a      	ldr	r2, [r3, #4]
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011e48:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8011e4a:	e082      	b.n	8011f52 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e50:	2b02      	cmp	r3, #2
 8011e52:	d075      	beq.n	8011f40 <I2C_MasterReceive_RXNE+0x15c>
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	2b01      	cmp	r3, #1
 8011e58:	d002      	beq.n	8011e60 <I2C_MasterReceive_RXNE+0x7c>
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d16f      	bne.n	8011f40 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8011e60:	6878      	ldr	r0, [r7, #4]
 8011e62:	f001 fbef 	bl	8013644 <I2C_WaitOnSTOPRequestThroughIT>
 8011e66:	4603      	mov	r3, r0
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d142      	bne.n	8011ef2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	681a      	ldr	r2, [r3, #0]
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011e7a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	685a      	ldr	r2, [r3, #4]
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011e8a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	691a      	ldr	r2, [r3, #16]
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e96:	b2d2      	uxtb	r2, r2
 8011e98:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e9e:	1c5a      	adds	r2, r3, #1
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011ea8:	b29b      	uxth	r3, r3
 8011eaa:	3b01      	subs	r3, #1
 8011eac:	b29a      	uxth	r2, r3
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	2220      	movs	r2, #32
 8011eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011ec0:	b2db      	uxtb	r3, r3
 8011ec2:	2b40      	cmp	r3, #64	; 0x40
 8011ec4:	d10a      	bne.n	8011edc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	2200      	movs	r2, #0
 8011eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8011ed4:	6878      	ldr	r0, [r7, #4]
 8011ed6:	f7ff fdc0 	bl	8011a5a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8011eda:	e03a      	b.n	8011f52 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	2200      	movs	r2, #0
 8011ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	2212      	movs	r2, #18
 8011ee8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	f7ff fd84 	bl	80119f8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8011ef0:	e02f      	b.n	8011f52 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	685a      	ldr	r2, [r3, #4]
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8011f00:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	691a      	ldr	r2, [r3, #16]
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f0c:	b2d2      	uxtb	r2, r2
 8011f0e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f14:	1c5a      	adds	r2, r3, #1
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f1e:	b29b      	uxth	r3, r3
 8011f20:	3b01      	subs	r3, #1
 8011f22:	b29a      	uxth	r2, r3
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2220      	movs	r2, #32
 8011f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	2200      	movs	r2, #0
 8011f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f7ff fd97 	bl	8011a6c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8011f3e:	e008      	b.n	8011f52 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	685a      	ldr	r2, [r3, #4]
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011f4e:	605a      	str	r2, [r3, #4]
}
 8011f50:	e7ff      	b.n	8011f52 <I2C_MasterReceive_RXNE+0x16e>
 8011f52:	bf00      	nop
 8011f54:	3710      	adds	r7, #16
 8011f56:	46bd      	mov	sp, r7
 8011f58:	bd80      	pop	{r7, pc}

08011f5a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8011f5a:	b580      	push	{r7, lr}
 8011f5c:	b084      	sub	sp, #16
 8011f5e:	af00      	add	r7, sp, #0
 8011f60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f66:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f6c:	b29b      	uxth	r3, r3
 8011f6e:	2b04      	cmp	r3, #4
 8011f70:	d11b      	bne.n	8011faa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	685a      	ldr	r2, [r3, #4]
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011f80:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	691a      	ldr	r2, [r3, #16]
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f8c:	b2d2      	uxtb	r2, r2
 8011f8e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f94:	1c5a      	adds	r2, r3, #1
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011f9e:	b29b      	uxth	r3, r3
 8011fa0:	3b01      	subs	r3, #1
 8011fa2:	b29a      	uxth	r2, r3
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8011fa8:	e0bd      	b.n	8012126 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011fae:	b29b      	uxth	r3, r3
 8011fb0:	2b03      	cmp	r3, #3
 8011fb2:	d129      	bne.n	8012008 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	685a      	ldr	r2, [r3, #4]
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011fc2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	2b04      	cmp	r3, #4
 8011fc8:	d00a      	beq.n	8011fe0 <I2C_MasterReceive_BTF+0x86>
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	2b02      	cmp	r3, #2
 8011fce:	d007      	beq.n	8011fe0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	681a      	ldr	r2, [r3, #0]
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011fde:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	691a      	ldr	r2, [r3, #16]
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fea:	b2d2      	uxtb	r2, r2
 8011fec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ff2:	1c5a      	adds	r2, r3, #1
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011ffc:	b29b      	uxth	r3, r3
 8011ffe:	3b01      	subs	r3, #1
 8012000:	b29a      	uxth	r2, r3
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8012006:	e08e      	b.n	8012126 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801200c:	b29b      	uxth	r3, r3
 801200e:	2b02      	cmp	r3, #2
 8012010:	d176      	bne.n	8012100 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	2b01      	cmp	r3, #1
 8012016:	d002      	beq.n	801201e <I2C_MasterReceive_BTF+0xc4>
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	2b10      	cmp	r3, #16
 801201c:	d108      	bne.n	8012030 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	681a      	ldr	r2, [r3, #0]
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801202c:	601a      	str	r2, [r3, #0]
 801202e:	e019      	b.n	8012064 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	2b04      	cmp	r3, #4
 8012034:	d002      	beq.n	801203c <I2C_MasterReceive_BTF+0xe2>
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	2b02      	cmp	r3, #2
 801203a:	d108      	bne.n	801204e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	681a      	ldr	r2, [r3, #0]
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801204a:	601a      	str	r2, [r3, #0]
 801204c:	e00a      	b.n	8012064 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	2b10      	cmp	r3, #16
 8012052:	d007      	beq.n	8012064 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	681a      	ldr	r2, [r3, #0]
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012062:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	691a      	ldr	r2, [r3, #16]
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801206e:	b2d2      	uxtb	r2, r2
 8012070:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012076:	1c5a      	adds	r2, r3, #1
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012080:	b29b      	uxth	r3, r3
 8012082:	3b01      	subs	r3, #1
 8012084:	b29a      	uxth	r2, r3
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	691a      	ldr	r2, [r3, #16]
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012094:	b2d2      	uxtb	r2, r2
 8012096:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801209c:	1c5a      	adds	r2, r3, #1
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80120a6:	b29b      	uxth	r3, r3
 80120a8:	3b01      	subs	r3, #1
 80120aa:	b29a      	uxth	r2, r3
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	685a      	ldr	r2, [r3, #4]
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80120be:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	2220      	movs	r2, #32
 80120c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80120ce:	b2db      	uxtb	r3, r3
 80120d0:	2b40      	cmp	r3, #64	; 0x40
 80120d2:	d10a      	bne.n	80120ea <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	2200      	movs	r2, #0
 80120d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	2200      	movs	r2, #0
 80120e0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80120e2:	6878      	ldr	r0, [r7, #4]
 80120e4:	f7ff fcb9 	bl	8011a5a <HAL_I2C_MemRxCpltCallback>
}
 80120e8:	e01d      	b.n	8012126 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	2200      	movs	r2, #0
 80120ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	2212      	movs	r2, #18
 80120f6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80120f8:	6878      	ldr	r0, [r7, #4]
 80120fa:	f7ff fc7d 	bl	80119f8 <HAL_I2C_MasterRxCpltCallback>
}
 80120fe:	e012      	b.n	8012126 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	691a      	ldr	r2, [r3, #16]
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801210a:	b2d2      	uxtb	r2, r2
 801210c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012112:	1c5a      	adds	r2, r3, #1
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801211c:	b29b      	uxth	r3, r3
 801211e:	3b01      	subs	r3, #1
 8012120:	b29a      	uxth	r2, r3
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8012126:	bf00      	nop
 8012128:	3710      	adds	r7, #16
 801212a:	46bd      	mov	sp, r7
 801212c:	bd80      	pop	{r7, pc}

0801212e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 801212e:	b480      	push	{r7}
 8012130:	b083      	sub	sp, #12
 8012132:	af00      	add	r7, sp, #0
 8012134:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801213c:	b2db      	uxtb	r3, r3
 801213e:	2b40      	cmp	r3, #64	; 0x40
 8012140:	d117      	bne.n	8012172 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012146:	2b00      	cmp	r3, #0
 8012148:	d109      	bne.n	801215e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801214e:	b2db      	uxtb	r3, r3
 8012150:	461a      	mov	r2, r3
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801215a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 801215c:	e067      	b.n	801222e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012162:	b2db      	uxtb	r3, r3
 8012164:	f043 0301 	orr.w	r3, r3, #1
 8012168:	b2da      	uxtb	r2, r3
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	611a      	str	r2, [r3, #16]
}
 8012170:	e05d      	b.n	801222e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	691b      	ldr	r3, [r3, #16]
 8012176:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801217a:	d133      	bne.n	80121e4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012182:	b2db      	uxtb	r3, r3
 8012184:	2b21      	cmp	r3, #33	; 0x21
 8012186:	d109      	bne.n	801219c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801218c:	b2db      	uxtb	r3, r3
 801218e:	461a      	mov	r2, r3
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8012198:	611a      	str	r2, [r3, #16]
 801219a:	e008      	b.n	80121ae <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121a0:	b2db      	uxtb	r3, r3
 80121a2:	f043 0301 	orr.w	r3, r3, #1
 80121a6:	b2da      	uxtb	r2, r3
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d004      	beq.n	80121c0 <I2C_Master_SB+0x92>
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d108      	bne.n	80121d2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d032      	beq.n	801222e <I2C_Master_SB+0x100>
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d02d      	beq.n	801222e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	685a      	ldr	r2, [r3, #4]
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80121e0:	605a      	str	r2, [r3, #4]
}
 80121e2:	e024      	b.n	801222e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d10e      	bne.n	801220a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121f0:	b29b      	uxth	r3, r3
 80121f2:	11db      	asrs	r3, r3, #7
 80121f4:	b2db      	uxtb	r3, r3
 80121f6:	f003 0306 	and.w	r3, r3, #6
 80121fa:	b2db      	uxtb	r3, r3
 80121fc:	f063 030f 	orn	r3, r3, #15
 8012200:	b2da      	uxtb	r2, r3
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	611a      	str	r2, [r3, #16]
}
 8012208:	e011      	b.n	801222e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801220e:	2b01      	cmp	r3, #1
 8012210:	d10d      	bne.n	801222e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012216:	b29b      	uxth	r3, r3
 8012218:	11db      	asrs	r3, r3, #7
 801221a:	b2db      	uxtb	r3, r3
 801221c:	f003 0306 	and.w	r3, r3, #6
 8012220:	b2db      	uxtb	r3, r3
 8012222:	f063 030e 	orn	r3, r3, #14
 8012226:	b2da      	uxtb	r2, r3
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	611a      	str	r2, [r3, #16]
}
 801222e:	bf00      	nop
 8012230:	370c      	adds	r7, #12
 8012232:	46bd      	mov	sp, r7
 8012234:	bc80      	pop	{r7}
 8012236:	4770      	bx	lr

08012238 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8012238:	b480      	push	{r7}
 801223a:	b083      	sub	sp, #12
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012244:	b2da      	uxtb	r2, r3
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012250:	2b00      	cmp	r3, #0
 8012252:	d004      	beq.n	801225e <I2C_Master_ADD10+0x26>
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801225a:	2b00      	cmp	r3, #0
 801225c:	d108      	bne.n	8012270 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012262:	2b00      	cmp	r3, #0
 8012264:	d00c      	beq.n	8012280 <I2C_Master_ADD10+0x48>
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801226c:	2b00      	cmp	r3, #0
 801226e:	d007      	beq.n	8012280 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	685a      	ldr	r2, [r3, #4]
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801227e:	605a      	str	r2, [r3, #4]
  }
}
 8012280:	bf00      	nop
 8012282:	370c      	adds	r7, #12
 8012284:	46bd      	mov	sp, r7
 8012286:	bc80      	pop	{r7}
 8012288:	4770      	bx	lr

0801228a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 801228a:	b480      	push	{r7}
 801228c:	b091      	sub	sp, #68	; 0x44
 801228e:	af00      	add	r7, sp, #0
 8012290:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012298:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122a0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122a6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80122ae:	b2db      	uxtb	r3, r3
 80122b0:	2b22      	cmp	r3, #34	; 0x22
 80122b2:	f040 8174 	bne.w	801259e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d10f      	bne.n	80122de <I2C_Master_ADDR+0x54>
 80122be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80122c2:	2b40      	cmp	r3, #64	; 0x40
 80122c4:	d10b      	bne.n	80122de <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80122c6:	2300      	movs	r3, #0
 80122c8:	633b      	str	r3, [r7, #48]	; 0x30
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	695b      	ldr	r3, [r3, #20]
 80122d0:	633b      	str	r3, [r7, #48]	; 0x30
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	699b      	ldr	r3, [r3, #24]
 80122d8:	633b      	str	r3, [r7, #48]	; 0x30
 80122da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122dc:	e16b      	b.n	80125b6 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d11d      	bne.n	8012322 <I2C_Master_ADDR+0x98>
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	691b      	ldr	r3, [r3, #16]
 80122ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80122ee:	d118      	bne.n	8012322 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80122f0:	2300      	movs	r3, #0
 80122f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	695b      	ldr	r3, [r3, #20]
 80122fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	699b      	ldr	r3, [r3, #24]
 8012302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012304:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	681a      	ldr	r2, [r3, #0]
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012314:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801231a:	1c5a      	adds	r2, r3, #1
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	651a      	str	r2, [r3, #80]	; 0x50
 8012320:	e149      	b.n	80125b6 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012326:	b29b      	uxth	r3, r3
 8012328:	2b00      	cmp	r3, #0
 801232a:	d113      	bne.n	8012354 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801232c:	2300      	movs	r3, #0
 801232e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	695b      	ldr	r3, [r3, #20]
 8012336:	62bb      	str	r3, [r7, #40]	; 0x28
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	699b      	ldr	r3, [r3, #24]
 801233e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012340:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	681a      	ldr	r2, [r3, #0]
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012350:	601a      	str	r2, [r3, #0]
 8012352:	e120      	b.n	8012596 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012358:	b29b      	uxth	r3, r3
 801235a:	2b01      	cmp	r3, #1
 801235c:	f040 808a 	bne.w	8012474 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8012360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012362:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012366:	d137      	bne.n	80123d8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	681a      	ldr	r2, [r3, #0]
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012376:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	685b      	ldr	r3, [r3, #4]
 801237e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012386:	d113      	bne.n	80123b0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	681a      	ldr	r2, [r3, #0]
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012396:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012398:	2300      	movs	r3, #0
 801239a:	627b      	str	r3, [r7, #36]	; 0x24
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	695b      	ldr	r3, [r3, #20]
 80123a2:	627b      	str	r3, [r7, #36]	; 0x24
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	699b      	ldr	r3, [r3, #24]
 80123aa:	627b      	str	r3, [r7, #36]	; 0x24
 80123ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ae:	e0f2      	b.n	8012596 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80123b0:	2300      	movs	r3, #0
 80123b2:	623b      	str	r3, [r7, #32]
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	695b      	ldr	r3, [r3, #20]
 80123ba:	623b      	str	r3, [r7, #32]
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	699b      	ldr	r3, [r3, #24]
 80123c2:	623b      	str	r3, [r7, #32]
 80123c4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	681a      	ldr	r2, [r3, #0]
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80123d4:	601a      	str	r2, [r3, #0]
 80123d6:	e0de      	b.n	8012596 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80123d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123da:	2b08      	cmp	r3, #8
 80123dc:	d02e      	beq.n	801243c <I2C_Master_ADDR+0x1b2>
 80123de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123e0:	2b20      	cmp	r3, #32
 80123e2:	d02b      	beq.n	801243c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80123e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123e6:	2b12      	cmp	r3, #18
 80123e8:	d102      	bne.n	80123f0 <I2C_Master_ADDR+0x166>
 80123ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ec:	2b01      	cmp	r3, #1
 80123ee:	d125      	bne.n	801243c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80123f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123f2:	2b04      	cmp	r3, #4
 80123f4:	d00e      	beq.n	8012414 <I2C_Master_ADDR+0x18a>
 80123f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123f8:	2b02      	cmp	r3, #2
 80123fa:	d00b      	beq.n	8012414 <I2C_Master_ADDR+0x18a>
 80123fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123fe:	2b10      	cmp	r3, #16
 8012400:	d008      	beq.n	8012414 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	681a      	ldr	r2, [r3, #0]
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012410:	601a      	str	r2, [r3, #0]
 8012412:	e007      	b.n	8012424 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	681a      	ldr	r2, [r3, #0]
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012422:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012424:	2300      	movs	r3, #0
 8012426:	61fb      	str	r3, [r7, #28]
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	695b      	ldr	r3, [r3, #20]
 801242e:	61fb      	str	r3, [r7, #28]
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	699b      	ldr	r3, [r3, #24]
 8012436:	61fb      	str	r3, [r7, #28]
 8012438:	69fb      	ldr	r3, [r7, #28]
 801243a:	e0ac      	b.n	8012596 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	681a      	ldr	r2, [r3, #0]
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801244a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801244c:	2300      	movs	r3, #0
 801244e:	61bb      	str	r3, [r7, #24]
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	695b      	ldr	r3, [r3, #20]
 8012456:	61bb      	str	r3, [r7, #24]
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	699b      	ldr	r3, [r3, #24]
 801245e:	61bb      	str	r3, [r7, #24]
 8012460:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	681a      	ldr	r2, [r3, #0]
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012470:	601a      	str	r2, [r3, #0]
 8012472:	e090      	b.n	8012596 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012478:	b29b      	uxth	r3, r3
 801247a:	2b02      	cmp	r3, #2
 801247c:	d158      	bne.n	8012530 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 801247e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012480:	2b04      	cmp	r3, #4
 8012482:	d021      	beq.n	80124c8 <I2C_Master_ADDR+0x23e>
 8012484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012486:	2b02      	cmp	r3, #2
 8012488:	d01e      	beq.n	80124c8 <I2C_Master_ADDR+0x23e>
 801248a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801248c:	2b10      	cmp	r3, #16
 801248e:	d01b      	beq.n	80124c8 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	681a      	ldr	r2, [r3, #0]
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801249e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80124a0:	2300      	movs	r3, #0
 80124a2:	617b      	str	r3, [r7, #20]
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	695b      	ldr	r3, [r3, #20]
 80124aa:	617b      	str	r3, [r7, #20]
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	699b      	ldr	r3, [r3, #24]
 80124b2:	617b      	str	r3, [r7, #20]
 80124b4:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	681a      	ldr	r2, [r3, #0]
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80124c4:	601a      	str	r2, [r3, #0]
 80124c6:	e012      	b.n	80124ee <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	681a      	ldr	r2, [r3, #0]
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80124d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80124d8:	2300      	movs	r3, #0
 80124da:	613b      	str	r3, [r7, #16]
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	695b      	ldr	r3, [r3, #20]
 80124e2:	613b      	str	r3, [r7, #16]
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	699b      	ldr	r3, [r3, #24]
 80124ea:	613b      	str	r3, [r7, #16]
 80124ec:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	685b      	ldr	r3, [r3, #4]
 80124f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80124f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80124fc:	d14b      	bne.n	8012596 <I2C_Master_ADDR+0x30c>
 80124fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012500:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012504:	d00b      	beq.n	801251e <I2C_Master_ADDR+0x294>
 8012506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012508:	2b01      	cmp	r3, #1
 801250a:	d008      	beq.n	801251e <I2C_Master_ADDR+0x294>
 801250c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801250e:	2b08      	cmp	r3, #8
 8012510:	d005      	beq.n	801251e <I2C_Master_ADDR+0x294>
 8012512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012514:	2b10      	cmp	r3, #16
 8012516:	d002      	beq.n	801251e <I2C_Master_ADDR+0x294>
 8012518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801251a:	2b20      	cmp	r3, #32
 801251c:	d13b      	bne.n	8012596 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	685a      	ldr	r2, [r3, #4]
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801252c:	605a      	str	r2, [r3, #4]
 801252e:	e032      	b.n	8012596 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	681a      	ldr	r2, [r3, #0]
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801253e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	685b      	ldr	r3, [r3, #4]
 8012546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801254a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801254e:	d117      	bne.n	8012580 <I2C_Master_ADDR+0x2f6>
 8012550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012552:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8012556:	d00b      	beq.n	8012570 <I2C_Master_ADDR+0x2e6>
 8012558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801255a:	2b01      	cmp	r3, #1
 801255c:	d008      	beq.n	8012570 <I2C_Master_ADDR+0x2e6>
 801255e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012560:	2b08      	cmp	r3, #8
 8012562:	d005      	beq.n	8012570 <I2C_Master_ADDR+0x2e6>
 8012564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012566:	2b10      	cmp	r3, #16
 8012568:	d002      	beq.n	8012570 <I2C_Master_ADDR+0x2e6>
 801256a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801256c:	2b20      	cmp	r3, #32
 801256e:	d107      	bne.n	8012580 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	685a      	ldr	r2, [r3, #4]
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801257e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012580:	2300      	movs	r3, #0
 8012582:	60fb      	str	r3, [r7, #12]
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	695b      	ldr	r3, [r3, #20]
 801258a:	60fb      	str	r3, [r7, #12]
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	699b      	ldr	r3, [r3, #24]
 8012592:	60fb      	str	r3, [r7, #12]
 8012594:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	2200      	movs	r2, #0
 801259a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 801259c:	e00b      	b.n	80125b6 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801259e:	2300      	movs	r3, #0
 80125a0:	60bb      	str	r3, [r7, #8]
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	695b      	ldr	r3, [r3, #20]
 80125a8:	60bb      	str	r3, [r7, #8]
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	699b      	ldr	r3, [r3, #24]
 80125b0:	60bb      	str	r3, [r7, #8]
 80125b2:	68bb      	ldr	r3, [r7, #8]
}
 80125b4:	e7ff      	b.n	80125b6 <I2C_Master_ADDR+0x32c>
 80125b6:	bf00      	nop
 80125b8:	3744      	adds	r7, #68	; 0x44
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bc80      	pop	{r7}
 80125be:	4770      	bx	lr

080125c0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b084      	sub	sp, #16
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80125ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80125d4:	b29b      	uxth	r3, r3
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d02b      	beq.n	8012632 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125de:	781a      	ldrb	r2, [r3, #0]
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125ea:	1c5a      	adds	r2, r3, #1
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80125f4:	b29b      	uxth	r3, r3
 80125f6:	3b01      	subs	r3, #1
 80125f8:	b29a      	uxth	r2, r3
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012602:	b29b      	uxth	r3, r3
 8012604:	2b00      	cmp	r3, #0
 8012606:	d114      	bne.n	8012632 <I2C_SlaveTransmit_TXE+0x72>
 8012608:	7bfb      	ldrb	r3, [r7, #15]
 801260a:	2b29      	cmp	r3, #41	; 0x29
 801260c:	d111      	bne.n	8012632 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	685a      	ldr	r2, [r3, #4]
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801261c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	2221      	movs	r2, #33	; 0x21
 8012622:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2228      	movs	r2, #40	; 0x28
 8012628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 801262c:	6878      	ldr	r0, [r7, #4]
 801262e:	f7ff f9ec 	bl	8011a0a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8012632:	bf00      	nop
 8012634:	3710      	adds	r7, #16
 8012636:	46bd      	mov	sp, r7
 8012638:	bd80      	pop	{r7, pc}

0801263a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 801263a:	b480      	push	{r7}
 801263c:	b083      	sub	sp, #12
 801263e:	af00      	add	r7, sp, #0
 8012640:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012646:	b29b      	uxth	r3, r3
 8012648:	2b00      	cmp	r3, #0
 801264a:	d011      	beq.n	8012670 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012650:	781a      	ldrb	r2, [r3, #0]
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801265c:	1c5a      	adds	r2, r3, #1
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012666:	b29b      	uxth	r3, r3
 8012668:	3b01      	subs	r3, #1
 801266a:	b29a      	uxth	r2, r3
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8012670:	bf00      	nop
 8012672:	370c      	adds	r7, #12
 8012674:	46bd      	mov	sp, r7
 8012676:	bc80      	pop	{r7}
 8012678:	4770      	bx	lr

0801267a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801267a:	b580      	push	{r7, lr}
 801267c:	b084      	sub	sp, #16
 801267e:	af00      	add	r7, sp, #0
 8012680:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012688:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801268e:	b29b      	uxth	r3, r3
 8012690:	2b00      	cmp	r3, #0
 8012692:	d02c      	beq.n	80126ee <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	691a      	ldr	r2, [r3, #16]
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801269e:	b2d2      	uxtb	r2, r2
 80126a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126a6:	1c5a      	adds	r2, r3, #1
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80126b0:	b29b      	uxth	r3, r3
 80126b2:	3b01      	subs	r3, #1
 80126b4:	b29a      	uxth	r2, r3
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80126be:	b29b      	uxth	r3, r3
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d114      	bne.n	80126ee <I2C_SlaveReceive_RXNE+0x74>
 80126c4:	7bfb      	ldrb	r3, [r7, #15]
 80126c6:	2b2a      	cmp	r3, #42	; 0x2a
 80126c8:	d111      	bne.n	80126ee <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	685a      	ldr	r2, [r3, #4]
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80126d8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	2222      	movs	r2, #34	; 0x22
 80126de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2228      	movs	r2, #40	; 0x28
 80126e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80126e8:	6878      	ldr	r0, [r7, #4]
 80126ea:	f7ff f997 	bl	8011a1c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80126ee:	bf00      	nop
 80126f0:	3710      	adds	r7, #16
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd80      	pop	{r7, pc}

080126f6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80126f6:	b480      	push	{r7}
 80126f8:	b083      	sub	sp, #12
 80126fa:	af00      	add	r7, sp, #0
 80126fc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012702:	b29b      	uxth	r3, r3
 8012704:	2b00      	cmp	r3, #0
 8012706:	d012      	beq.n	801272e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	691a      	ldr	r2, [r3, #16]
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012712:	b2d2      	uxtb	r2, r2
 8012714:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801271a:	1c5a      	adds	r2, r3, #1
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012724:	b29b      	uxth	r3, r3
 8012726:	3b01      	subs	r3, #1
 8012728:	b29a      	uxth	r2, r3
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 801272e:	bf00      	nop
 8012730:	370c      	adds	r7, #12
 8012732:	46bd      	mov	sp, r7
 8012734:	bc80      	pop	{r7}
 8012736:	4770      	bx	lr

08012738 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b084      	sub	sp, #16
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
 8012740:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8012742:	2300      	movs	r3, #0
 8012744:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801274c:	b2db      	uxtb	r3, r3
 801274e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8012752:	2b28      	cmp	r3, #40	; 0x28
 8012754:	d125      	bne.n	80127a2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	685a      	ldr	r2, [r3, #4]
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012764:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8012766:	683b      	ldr	r3, [r7, #0]
 8012768:	f003 0304 	and.w	r3, r3, #4
 801276c:	2b00      	cmp	r3, #0
 801276e:	d101      	bne.n	8012774 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8012770:	2301      	movs	r3, #1
 8012772:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8012774:	683b      	ldr	r3, [r7, #0]
 8012776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801277a:	2b00      	cmp	r3, #0
 801277c:	d103      	bne.n	8012786 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	68db      	ldr	r3, [r3, #12]
 8012782:	81bb      	strh	r3, [r7, #12]
 8012784:	e002      	b.n	801278c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	699b      	ldr	r3, [r3, #24]
 801278a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	2200      	movs	r2, #0
 8012790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8012794:	89ba      	ldrh	r2, [r7, #12]
 8012796:	7bfb      	ldrb	r3, [r7, #15]
 8012798:	4619      	mov	r1, r3
 801279a:	6878      	ldr	r0, [r7, #4]
 801279c:	f7ff f947 	bl	8011a2e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80127a0:	e00e      	b.n	80127c0 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80127a2:	2300      	movs	r3, #0
 80127a4:	60bb      	str	r3, [r7, #8]
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	695b      	ldr	r3, [r3, #20]
 80127ac:	60bb      	str	r3, [r7, #8]
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	699b      	ldr	r3, [r3, #24]
 80127b4:	60bb      	str	r3, [r7, #8]
 80127b6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	2200      	movs	r2, #0
 80127bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80127c0:	bf00      	nop
 80127c2:	3710      	adds	r7, #16
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}

080127c8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b084      	sub	sp, #16
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80127d6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	685a      	ldr	r2, [r3, #4]
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80127e6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80127e8:	2300      	movs	r3, #0
 80127ea:	60bb      	str	r3, [r7, #8]
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	695b      	ldr	r3, [r3, #20]
 80127f2:	60bb      	str	r3, [r7, #8]
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	681a      	ldr	r2, [r3, #0]
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	f042 0201 	orr.w	r2, r2, #1
 8012802:	601a      	str	r2, [r3, #0]
 8012804:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	681a      	ldr	r2, [r3, #0]
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012814:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	685b      	ldr	r3, [r3, #4]
 801281c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012824:	d172      	bne.n	801290c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8012826:	7bfb      	ldrb	r3, [r7, #15]
 8012828:	2b22      	cmp	r3, #34	; 0x22
 801282a:	d002      	beq.n	8012832 <I2C_Slave_STOPF+0x6a>
 801282c:	7bfb      	ldrb	r3, [r7, #15]
 801282e:	2b2a      	cmp	r3, #42	; 0x2a
 8012830:	d135      	bne.n	801289e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	685b      	ldr	r3, [r3, #4]
 801283a:	b29a      	uxth	r2, r3
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012844:	b29b      	uxth	r3, r3
 8012846:	2b00      	cmp	r3, #0
 8012848:	d005      	beq.n	8012856 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801284e:	f043 0204 	orr.w	r2, r3, #4
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	685a      	ldr	r2, [r3, #4]
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012864:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801286a:	4618      	mov	r0, r3
 801286c:	f7fd fbaa 	bl	800ffc4 <HAL_DMA_GetState>
 8012870:	4603      	mov	r3, r0
 8012872:	2b01      	cmp	r3, #1
 8012874:	d049      	beq.n	801290a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801287a:	4a69      	ldr	r2, [pc, #420]	; (8012a20 <I2C_Slave_STOPF+0x258>)
 801287c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012882:	4618      	mov	r0, r3
 8012884:	f7fd f85a 	bl	800f93c <HAL_DMA_Abort_IT>
 8012888:	4603      	mov	r3, r0
 801288a:	2b00      	cmp	r3, #0
 801288c:	d03d      	beq.n	801290a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012894:	687a      	ldr	r2, [r7, #4]
 8012896:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012898:	4610      	mov	r0, r2
 801289a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801289c:	e035      	b.n	801290a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	685b      	ldr	r3, [r3, #4]
 80128a6:	b29a      	uxth	r2, r3
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80128b0:	b29b      	uxth	r3, r3
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d005      	beq.n	80128c2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128ba:	f043 0204 	orr.w	r2, r3, #4
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	685a      	ldr	r2, [r3, #4]
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80128d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128d6:	4618      	mov	r0, r3
 80128d8:	f7fd fb74 	bl	800ffc4 <HAL_DMA_GetState>
 80128dc:	4603      	mov	r3, r0
 80128de:	2b01      	cmp	r3, #1
 80128e0:	d014      	beq.n	801290c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128e6:	4a4e      	ldr	r2, [pc, #312]	; (8012a20 <I2C_Slave_STOPF+0x258>)
 80128e8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128ee:	4618      	mov	r0, r3
 80128f0:	f7fd f824 	bl	800f93c <HAL_DMA_Abort_IT>
 80128f4:	4603      	mov	r3, r0
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d008      	beq.n	801290c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012900:	687a      	ldr	r2, [r7, #4]
 8012902:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8012904:	4610      	mov	r0, r2
 8012906:	4798      	blx	r3
 8012908:	e000      	b.n	801290c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801290a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012910:	b29b      	uxth	r3, r3
 8012912:	2b00      	cmp	r3, #0
 8012914:	d03e      	beq.n	8012994 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	695b      	ldr	r3, [r3, #20]
 801291c:	f003 0304 	and.w	r3, r3, #4
 8012920:	2b04      	cmp	r3, #4
 8012922:	d112      	bne.n	801294a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	691a      	ldr	r2, [r3, #16]
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801292e:	b2d2      	uxtb	r2, r2
 8012930:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012936:	1c5a      	adds	r2, r3, #1
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012940:	b29b      	uxth	r3, r3
 8012942:	3b01      	subs	r3, #1
 8012944:	b29a      	uxth	r2, r3
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	695b      	ldr	r3, [r3, #20]
 8012950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012954:	2b40      	cmp	r3, #64	; 0x40
 8012956:	d112      	bne.n	801297e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	691a      	ldr	r2, [r3, #16]
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012962:	b2d2      	uxtb	r2, r2
 8012964:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801296a:	1c5a      	adds	r2, r3, #1
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012974:	b29b      	uxth	r3, r3
 8012976:	3b01      	subs	r3, #1
 8012978:	b29a      	uxth	r2, r3
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012982:	b29b      	uxth	r3, r3
 8012984:	2b00      	cmp	r3, #0
 8012986:	d005      	beq.n	8012994 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801298c:	f043 0204 	orr.w	r2, r3, #4
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012998:	2b00      	cmp	r3, #0
 801299a:	d003      	beq.n	80129a4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	f000 f843 	bl	8012a28 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80129a2:	e039      	b.n	8012a18 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80129a4:	7bfb      	ldrb	r3, [r7, #15]
 80129a6:	2b2a      	cmp	r3, #42	; 0x2a
 80129a8:	d109      	bne.n	80129be <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	2200      	movs	r2, #0
 80129ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2228      	movs	r2, #40	; 0x28
 80129b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80129b8:	6878      	ldr	r0, [r7, #4]
 80129ba:	f7ff f82f 	bl	8011a1c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80129c4:	b2db      	uxtb	r3, r3
 80129c6:	2b28      	cmp	r3, #40	; 0x28
 80129c8:	d111      	bne.n	80129ee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	4a15      	ldr	r2, [pc, #84]	; (8012a24 <I2C_Slave_STOPF+0x25c>)
 80129ce:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	2200      	movs	r2, #0
 80129d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	2220      	movs	r2, #32
 80129da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	2200      	movs	r2, #0
 80129e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80129e6:	6878      	ldr	r0, [r7, #4]
 80129e8:	f7ff f82e 	bl	8011a48 <HAL_I2C_ListenCpltCallback>
}
 80129ec:	e014      	b.n	8012a18 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129f2:	2b22      	cmp	r3, #34	; 0x22
 80129f4:	d002      	beq.n	80129fc <I2C_Slave_STOPF+0x234>
 80129f6:	7bfb      	ldrb	r3, [r7, #15]
 80129f8:	2b22      	cmp	r3, #34	; 0x22
 80129fa:	d10d      	bne.n	8012a18 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	2200      	movs	r2, #0
 8012a00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	2220      	movs	r2, #32
 8012a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8012a12:	6878      	ldr	r0, [r7, #4]
 8012a14:	f7ff f802 	bl	8011a1c <HAL_I2C_SlaveRxCpltCallback>
}
 8012a18:	bf00      	nop
 8012a1a:	3710      	adds	r7, #16
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd80      	pop	{r7, pc}
 8012a20:	080131a1 	.word	0x080131a1
 8012a24:	ffff0000 	.word	0xffff0000

08012a28 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b084      	sub	sp, #16
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012a36:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012a3e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8012a40:	7bbb      	ldrb	r3, [r7, #14]
 8012a42:	2b10      	cmp	r3, #16
 8012a44:	d002      	beq.n	8012a4c <I2C_ITError+0x24>
 8012a46:	7bbb      	ldrb	r3, [r7, #14]
 8012a48:	2b40      	cmp	r3, #64	; 0x40
 8012a4a:	d10a      	bne.n	8012a62 <I2C_ITError+0x3a>
 8012a4c:	7bfb      	ldrb	r3, [r7, #15]
 8012a4e:	2b22      	cmp	r3, #34	; 0x22
 8012a50:	d107      	bne.n	8012a62 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	681a      	ldr	r2, [r3, #0]
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012a60:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8012a62:	7bfb      	ldrb	r3, [r7, #15]
 8012a64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8012a68:	2b28      	cmp	r3, #40	; 0x28
 8012a6a:	d107      	bne.n	8012a7c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	2200      	movs	r2, #0
 8012a70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	2228      	movs	r2, #40	; 0x28
 8012a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8012a7a:	e015      	b.n	8012aa8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	685b      	ldr	r3, [r3, #4]
 8012a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012a8a:	d00a      	beq.n	8012aa2 <I2C_ITError+0x7a>
 8012a8c:	7bfb      	ldrb	r3, [r7, #15]
 8012a8e:	2b60      	cmp	r3, #96	; 0x60
 8012a90:	d007      	beq.n	8012aa2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	2220      	movs	r2, #32
 8012a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	2200      	movs	r2, #0
 8012a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	685b      	ldr	r3, [r3, #4]
 8012aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012ab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012ab6:	d162      	bne.n	8012b7e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	685a      	ldr	r2, [r3, #4]
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012ac6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012acc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012ad0:	b2db      	uxtb	r3, r3
 8012ad2:	2b01      	cmp	r3, #1
 8012ad4:	d020      	beq.n	8012b18 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ada:	4a6a      	ldr	r2, [pc, #424]	; (8012c84 <I2C_ITError+0x25c>)
 8012adc:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	f7fc ff2a 	bl	800f93c <HAL_DMA_Abort_IT>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	f000 8089 	beq.w	8012c02 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	681a      	ldr	r2, [r3, #0]
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	f022 0201 	bic.w	r2, r2, #1
 8012afe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	2220      	movs	r2, #32
 8012b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b0e:	687a      	ldr	r2, [r7, #4]
 8012b10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8012b12:	4610      	mov	r0, r2
 8012b14:	4798      	blx	r3
 8012b16:	e074      	b.n	8012c02 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b1c:	4a59      	ldr	r2, [pc, #356]	; (8012c84 <I2C_ITError+0x25c>)
 8012b1e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b24:	4618      	mov	r0, r3
 8012b26:	f7fc ff09 	bl	800f93c <HAL_DMA_Abort_IT>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d068      	beq.n	8012c02 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	695b      	ldr	r3, [r3, #20]
 8012b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b3a:	2b40      	cmp	r3, #64	; 0x40
 8012b3c:	d10b      	bne.n	8012b56 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	691a      	ldr	r2, [r3, #16]
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b48:	b2d2      	uxtb	r2, r2
 8012b4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b50:	1c5a      	adds	r2, r3, #1
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	681a      	ldr	r2, [r3, #0]
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	f022 0201 	bic.w	r2, r2, #1
 8012b64:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	2220      	movs	r2, #32
 8012b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b74:	687a      	ldr	r2, [r7, #4]
 8012b76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012b78:	4610      	mov	r0, r2
 8012b7a:	4798      	blx	r3
 8012b7c:	e041      	b.n	8012c02 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012b84:	b2db      	uxtb	r3, r3
 8012b86:	2b60      	cmp	r3, #96	; 0x60
 8012b88:	d125      	bne.n	8012bd6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	2220      	movs	r2, #32
 8012b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	2200      	movs	r2, #0
 8012b96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	695b      	ldr	r3, [r3, #20]
 8012b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ba2:	2b40      	cmp	r3, #64	; 0x40
 8012ba4:	d10b      	bne.n	8012bbe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	691a      	ldr	r2, [r3, #16]
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bb0:	b2d2      	uxtb	r2, r2
 8012bb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bb8:	1c5a      	adds	r2, r3, #1
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	681a      	ldr	r2, [r3, #0]
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	f022 0201 	bic.w	r2, r2, #1
 8012bcc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	f7fe ff55 	bl	8011a7e <HAL_I2C_AbortCpltCallback>
 8012bd4:	e015      	b.n	8012c02 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	695b      	ldr	r3, [r3, #20]
 8012bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012be0:	2b40      	cmp	r3, #64	; 0x40
 8012be2:	d10b      	bne.n	8012bfc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	691a      	ldr	r2, [r3, #16]
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bee:	b2d2      	uxtb	r2, r2
 8012bf0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bf6:	1c5a      	adds	r2, r3, #1
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8012bfc:	6878      	ldr	r0, [r7, #4]
 8012bfe:	f7fe ff35 	bl	8011a6c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c06:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	f003 0301 	and.w	r3, r3, #1
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d10e      	bne.n	8012c30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8012c12:	68bb      	ldr	r3, [r7, #8]
 8012c14:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d109      	bne.n	8012c30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8012c1c:	68bb      	ldr	r3, [r7, #8]
 8012c1e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d104      	bne.n	8012c30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8012c26:	68bb      	ldr	r3, [r7, #8]
 8012c28:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d007      	beq.n	8012c40 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	685a      	ldr	r2, [r3, #4]
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8012c3e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012c46:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c4c:	f003 0304 	and.w	r3, r3, #4
 8012c50:	2b04      	cmp	r3, #4
 8012c52:	d113      	bne.n	8012c7c <I2C_ITError+0x254>
 8012c54:	7bfb      	ldrb	r3, [r7, #15]
 8012c56:	2b28      	cmp	r3, #40	; 0x28
 8012c58:	d110      	bne.n	8012c7c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	4a0a      	ldr	r2, [pc, #40]	; (8012c88 <I2C_ITError+0x260>)
 8012c5e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	2200      	movs	r2, #0
 8012c64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	2220      	movs	r2, #32
 8012c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	2200      	movs	r2, #0
 8012c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8012c76:	6878      	ldr	r0, [r7, #4]
 8012c78:	f7fe fee6 	bl	8011a48 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8012c7c:	bf00      	nop
 8012c7e:	3710      	adds	r7, #16
 8012c80:	46bd      	mov	sp, r7
 8012c82:	bd80      	pop	{r7, pc}
 8012c84:	080131a1 	.word	0x080131a1
 8012c88:	ffff0000 	.word	0xffff0000

08012c8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b088      	sub	sp, #32
 8012c90:	af02      	add	r7, sp, #8
 8012c92:	60f8      	str	r0, [r7, #12]
 8012c94:	4608      	mov	r0, r1
 8012c96:	4611      	mov	r1, r2
 8012c98:	461a      	mov	r2, r3
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	817b      	strh	r3, [r7, #10]
 8012c9e:	460b      	mov	r3, r1
 8012ca0:	813b      	strh	r3, [r7, #8]
 8012ca2:	4613      	mov	r3, r2
 8012ca4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	681a      	ldr	r2, [r3, #0]
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012cb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8012cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb8:	9300      	str	r3, [sp, #0]
 8012cba:	6a3b      	ldr	r3, [r7, #32]
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8012cc2:	68f8      	ldr	r0, [r7, #12]
 8012cc4:	f000 fb14 	bl	80132f0 <I2C_WaitOnFlagUntilTimeout>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d00d      	beq.n	8012cea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012cdc:	d103      	bne.n	8012ce6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012ce4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8012ce6:	2303      	movs	r3, #3
 8012ce8:	e05f      	b.n	8012daa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8012cea:	897b      	ldrh	r3, [r7, #10]
 8012cec:	b2db      	uxtb	r3, r3
 8012cee:	461a      	mov	r2, r3
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8012cf8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8012cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cfc:	6a3a      	ldr	r2, [r7, #32]
 8012cfe:	492d      	ldr	r1, [pc, #180]	; (8012db4 <I2C_RequestMemoryWrite+0x128>)
 8012d00:	68f8      	ldr	r0, [r7, #12]
 8012d02:	f000 fb6f 	bl	80133e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012d06:	4603      	mov	r3, r0
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d001      	beq.n	8012d10 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	e04c      	b.n	8012daa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012d10:	2300      	movs	r3, #0
 8012d12:	617b      	str	r3, [r7, #20]
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	695b      	ldr	r3, [r3, #20]
 8012d1a:	617b      	str	r3, [r7, #20]
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	699b      	ldr	r3, [r3, #24]
 8012d22:	617b      	str	r3, [r7, #20]
 8012d24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d28:	6a39      	ldr	r1, [r7, #32]
 8012d2a:	68f8      	ldr	r0, [r7, #12]
 8012d2c:	f000 fbfa 	bl	8013524 <I2C_WaitOnTXEFlagUntilTimeout>
 8012d30:	4603      	mov	r3, r0
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d00d      	beq.n	8012d52 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d3a:	2b04      	cmp	r3, #4
 8012d3c:	d107      	bne.n	8012d4e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	681a      	ldr	r2, [r3, #0]
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012d4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8012d4e:	2301      	movs	r3, #1
 8012d50:	e02b      	b.n	8012daa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8012d52:	88fb      	ldrh	r3, [r7, #6]
 8012d54:	2b01      	cmp	r3, #1
 8012d56:	d105      	bne.n	8012d64 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8012d58:	893b      	ldrh	r3, [r7, #8]
 8012d5a:	b2da      	uxtb	r2, r3
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	611a      	str	r2, [r3, #16]
 8012d62:	e021      	b.n	8012da8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8012d64:	893b      	ldrh	r3, [r7, #8]
 8012d66:	0a1b      	lsrs	r3, r3, #8
 8012d68:	b29b      	uxth	r3, r3
 8012d6a:	b2da      	uxtb	r2, r3
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d74:	6a39      	ldr	r1, [r7, #32]
 8012d76:	68f8      	ldr	r0, [r7, #12]
 8012d78:	f000 fbd4 	bl	8013524 <I2C_WaitOnTXEFlagUntilTimeout>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d00d      	beq.n	8012d9e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d86:	2b04      	cmp	r3, #4
 8012d88:	d107      	bne.n	8012d9a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	681a      	ldr	r2, [r3, #0]
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012d98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8012d9a:	2301      	movs	r3, #1
 8012d9c:	e005      	b.n	8012daa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8012d9e:	893b      	ldrh	r3, [r7, #8]
 8012da0:	b2da      	uxtb	r2, r3
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8012da8:	2300      	movs	r3, #0
}
 8012daa:	4618      	mov	r0, r3
 8012dac:	3718      	adds	r7, #24
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bd80      	pop	{r7, pc}
 8012db2:	bf00      	nop
 8012db4:	00010002 	.word	0x00010002

08012db8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b088      	sub	sp, #32
 8012dbc:	af02      	add	r7, sp, #8
 8012dbe:	60f8      	str	r0, [r7, #12]
 8012dc0:	4608      	mov	r0, r1
 8012dc2:	4611      	mov	r1, r2
 8012dc4:	461a      	mov	r2, r3
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	817b      	strh	r3, [r7, #10]
 8012dca:	460b      	mov	r3, r1
 8012dcc:	813b      	strh	r3, [r7, #8]
 8012dce:	4613      	mov	r3, r2
 8012dd0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	681a      	ldr	r2, [r3, #0]
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012de0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	681a      	ldr	r2, [r3, #0]
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012df0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8012df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df4:	9300      	str	r3, [sp, #0]
 8012df6:	6a3b      	ldr	r3, [r7, #32]
 8012df8:	2200      	movs	r2, #0
 8012dfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8012dfe:	68f8      	ldr	r0, [r7, #12]
 8012e00:	f000 fa76 	bl	80132f0 <I2C_WaitOnFlagUntilTimeout>
 8012e04:	4603      	mov	r3, r0
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d00d      	beq.n	8012e26 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e18:	d103      	bne.n	8012e22 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012e20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8012e22:	2303      	movs	r3, #3
 8012e24:	e0aa      	b.n	8012f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8012e26:	897b      	ldrh	r3, [r7, #10]
 8012e28:	b2db      	uxtb	r3, r3
 8012e2a:	461a      	mov	r2, r3
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8012e34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8012e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e38:	6a3a      	ldr	r2, [r7, #32]
 8012e3a:	4952      	ldr	r1, [pc, #328]	; (8012f84 <I2C_RequestMemoryRead+0x1cc>)
 8012e3c:	68f8      	ldr	r0, [r7, #12]
 8012e3e:	f000 fad1 	bl	80133e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012e42:	4603      	mov	r3, r0
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d001      	beq.n	8012e4c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8012e48:	2301      	movs	r3, #1
 8012e4a:	e097      	b.n	8012f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8012e4c:	2300      	movs	r3, #0
 8012e4e:	617b      	str	r3, [r7, #20]
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	695b      	ldr	r3, [r3, #20]
 8012e56:	617b      	str	r3, [r7, #20]
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	699b      	ldr	r3, [r3, #24]
 8012e5e:	617b      	str	r3, [r7, #20]
 8012e60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e64:	6a39      	ldr	r1, [r7, #32]
 8012e66:	68f8      	ldr	r0, [r7, #12]
 8012e68:	f000 fb5c 	bl	8013524 <I2C_WaitOnTXEFlagUntilTimeout>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d00d      	beq.n	8012e8e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e76:	2b04      	cmp	r3, #4
 8012e78:	d107      	bne.n	8012e8a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	681a      	ldr	r2, [r3, #0]
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012e88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8012e8a:	2301      	movs	r3, #1
 8012e8c:	e076      	b.n	8012f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8012e8e:	88fb      	ldrh	r3, [r7, #6]
 8012e90:	2b01      	cmp	r3, #1
 8012e92:	d105      	bne.n	8012ea0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8012e94:	893b      	ldrh	r3, [r7, #8]
 8012e96:	b2da      	uxtb	r2, r3
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	611a      	str	r2, [r3, #16]
 8012e9e:	e021      	b.n	8012ee4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8012ea0:	893b      	ldrh	r3, [r7, #8]
 8012ea2:	0a1b      	lsrs	r3, r3, #8
 8012ea4:	b29b      	uxth	r3, r3
 8012ea6:	b2da      	uxtb	r2, r3
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012eb0:	6a39      	ldr	r1, [r7, #32]
 8012eb2:	68f8      	ldr	r0, [r7, #12]
 8012eb4:	f000 fb36 	bl	8013524 <I2C_WaitOnTXEFlagUntilTimeout>
 8012eb8:	4603      	mov	r3, r0
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d00d      	beq.n	8012eda <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ec2:	2b04      	cmp	r3, #4
 8012ec4:	d107      	bne.n	8012ed6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	681a      	ldr	r2, [r3, #0]
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012ed4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8012ed6:	2301      	movs	r3, #1
 8012ed8:	e050      	b.n	8012f7c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8012eda:	893b      	ldrh	r3, [r7, #8]
 8012edc:	b2da      	uxtb	r2, r3
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8012ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ee6:	6a39      	ldr	r1, [r7, #32]
 8012ee8:	68f8      	ldr	r0, [r7, #12]
 8012eea:	f000 fb1b 	bl	8013524 <I2C_WaitOnTXEFlagUntilTimeout>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d00d      	beq.n	8012f10 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ef8:	2b04      	cmp	r3, #4
 8012efa:	d107      	bne.n	8012f0c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	681a      	ldr	r2, [r3, #0]
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012f0a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8012f0c:	2301      	movs	r3, #1
 8012f0e:	e035      	b.n	8012f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	681a      	ldr	r2, [r3, #0]
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012f1e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8012f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f22:	9300      	str	r3, [sp, #0]
 8012f24:	6a3b      	ldr	r3, [r7, #32]
 8012f26:	2200      	movs	r2, #0
 8012f28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8012f2c:	68f8      	ldr	r0, [r7, #12]
 8012f2e:	f000 f9df 	bl	80132f0 <I2C_WaitOnFlagUntilTimeout>
 8012f32:	4603      	mov	r3, r0
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d00d      	beq.n	8012f54 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012f46:	d103      	bne.n	8012f50 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8012f50:	2303      	movs	r3, #3
 8012f52:	e013      	b.n	8012f7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8012f54:	897b      	ldrh	r3, [r7, #10]
 8012f56:	b2db      	uxtb	r3, r3
 8012f58:	f043 0301 	orr.w	r3, r3, #1
 8012f5c:	b2da      	uxtb	r2, r3
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8012f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f66:	6a3a      	ldr	r2, [r7, #32]
 8012f68:	4906      	ldr	r1, [pc, #24]	; (8012f84 <I2C_RequestMemoryRead+0x1cc>)
 8012f6a:	68f8      	ldr	r0, [r7, #12]
 8012f6c:	f000 fa3a 	bl	80133e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8012f70:	4603      	mov	r3, r0
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d001      	beq.n	8012f7a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8012f76:	2301      	movs	r3, #1
 8012f78:	e000      	b.n	8012f7c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8012f7a:	2300      	movs	r3, #0
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	3718      	adds	r7, #24
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd80      	pop	{r7, pc}
 8012f84:	00010002 	.word	0x00010002

08012f88 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b086      	sub	sp, #24
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f94:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8012f96:	697b      	ldr	r3, [r7, #20]
 8012f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012f9c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8012f9e:	697b      	ldr	r3, [r7, #20]
 8012fa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012fa4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8012fa6:	697b      	ldr	r3, [r7, #20]
 8012fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012faa:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8012fac:	697b      	ldr	r3, [r7, #20]
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	685a      	ldr	r2, [r3, #4]
 8012fb2:	697b      	ldr	r3, [r7, #20]
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8012fba:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8012fbc:	697b      	ldr	r3, [r7, #20]
 8012fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d003      	beq.n	8012fcc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012fc8:	2200      	movs	r2, #0
 8012fca:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8012fcc:	697b      	ldr	r3, [r7, #20]
 8012fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d003      	beq.n	8012fdc <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8012fd4:	697b      	ldr	r3, [r7, #20]
 8012fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fd8:	2200      	movs	r2, #0
 8012fda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8012fdc:	7cfb      	ldrb	r3, [r7, #19]
 8012fde:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8012fe2:	2b21      	cmp	r3, #33	; 0x21
 8012fe4:	d007      	beq.n	8012ff6 <I2C_DMAXferCplt+0x6e>
 8012fe6:	7cfb      	ldrb	r3, [r7, #19]
 8012fe8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8012fec:	2b22      	cmp	r3, #34	; 0x22
 8012fee:	d131      	bne.n	8013054 <I2C_DMAXferCplt+0xcc>
 8012ff0:	7cbb      	ldrb	r3, [r7, #18]
 8012ff2:	2b20      	cmp	r3, #32
 8012ff4:	d12e      	bne.n	8013054 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8012ff6:	697b      	ldr	r3, [r7, #20]
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	685a      	ldr	r2, [r3, #4]
 8012ffc:	697b      	ldr	r3, [r7, #20]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013004:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	2200      	movs	r2, #0
 801300a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 801300c:	7cfb      	ldrb	r3, [r7, #19]
 801300e:	2b29      	cmp	r3, #41	; 0x29
 8013010:	d10a      	bne.n	8013028 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8013012:	697b      	ldr	r3, [r7, #20]
 8013014:	2221      	movs	r2, #33	; 0x21
 8013016:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8013018:	697b      	ldr	r3, [r7, #20]
 801301a:	2228      	movs	r2, #40	; 0x28
 801301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8013020:	6978      	ldr	r0, [r7, #20]
 8013022:	f7fe fcf2 	bl	8011a0a <HAL_I2C_SlaveTxCpltCallback>
 8013026:	e00c      	b.n	8013042 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8013028:	7cfb      	ldrb	r3, [r7, #19]
 801302a:	2b2a      	cmp	r3, #42	; 0x2a
 801302c:	d109      	bne.n	8013042 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801302e:	697b      	ldr	r3, [r7, #20]
 8013030:	2222      	movs	r2, #34	; 0x22
 8013032:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8013034:	697b      	ldr	r3, [r7, #20]
 8013036:	2228      	movs	r2, #40	; 0x28
 8013038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801303c:	6978      	ldr	r0, [r7, #20]
 801303e:	f7fe fced 	bl	8011a1c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8013042:	697b      	ldr	r3, [r7, #20]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	685a      	ldr	r2, [r3, #4]
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8013050:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8013052:	e06a      	b.n	801312a <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8013054:	697b      	ldr	r3, [r7, #20]
 8013056:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801305a:	b2db      	uxtb	r3, r3
 801305c:	2b00      	cmp	r3, #0
 801305e:	d064      	beq.n	801312a <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8013060:	697b      	ldr	r3, [r7, #20]
 8013062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013064:	b29b      	uxth	r3, r3
 8013066:	2b01      	cmp	r3, #1
 8013068:	d107      	bne.n	801307a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801306a:	697b      	ldr	r3, [r7, #20]
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	681a      	ldr	r2, [r3, #0]
 8013070:	697b      	ldr	r3, [r7, #20]
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013078:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801307a:	697b      	ldr	r3, [r7, #20]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	685a      	ldr	r2, [r3, #4]
 8013080:	697b      	ldr	r3, [r7, #20]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8013088:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8013090:	d009      	beq.n	80130a6 <I2C_DMAXferCplt+0x11e>
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	2b08      	cmp	r3, #8
 8013096:	d006      	beq.n	80130a6 <I2C_DMAXferCplt+0x11e>
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 801309e:	d002      	beq.n	80130a6 <I2C_DMAXferCplt+0x11e>
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	2b20      	cmp	r3, #32
 80130a4:	d107      	bne.n	80130b6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80130a6:	697b      	ldr	r3, [r7, #20]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	681a      	ldr	r2, [r3, #0]
 80130ac:	697b      	ldr	r3, [r7, #20]
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80130b4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80130b6:	697b      	ldr	r3, [r7, #20]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	685a      	ldr	r2, [r3, #4]
 80130bc:	697b      	ldr	r3, [r7, #20]
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80130c4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80130c6:	697b      	ldr	r3, [r7, #20]
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	685a      	ldr	r2, [r3, #4]
 80130cc:	697b      	ldr	r3, [r7, #20]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80130d4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	2200      	movs	r2, #0
 80130da:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80130dc:	697b      	ldr	r3, [r7, #20]
 80130de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d003      	beq.n	80130ec <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80130e4:	6978      	ldr	r0, [r7, #20]
 80130e6:	f7fe fcc1 	bl	8011a6c <HAL_I2C_ErrorCallback>
}
 80130ea:	e01e      	b.n	801312a <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80130ec:	697b      	ldr	r3, [r7, #20]
 80130ee:	2220      	movs	r2, #32
 80130f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80130f4:	697b      	ldr	r3, [r7, #20]
 80130f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80130fa:	b2db      	uxtb	r3, r3
 80130fc:	2b40      	cmp	r3, #64	; 0x40
 80130fe:	d10a      	bne.n	8013116 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013100:	697b      	ldr	r3, [r7, #20]
 8013102:	2200      	movs	r2, #0
 8013104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8013108:	697b      	ldr	r3, [r7, #20]
 801310a:	2200      	movs	r2, #0
 801310c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 801310e:	6978      	ldr	r0, [r7, #20]
 8013110:	f7fe fca3 	bl	8011a5a <HAL_I2C_MemRxCpltCallback>
}
 8013114:	e009      	b.n	801312a <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8013116:	697b      	ldr	r3, [r7, #20]
 8013118:	2200      	movs	r2, #0
 801311a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801311e:	697b      	ldr	r3, [r7, #20]
 8013120:	2212      	movs	r2, #18
 8013122:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8013124:	6978      	ldr	r0, [r7, #20]
 8013126:	f7fe fc67 	bl	80119f8 <HAL_I2C_MasterRxCpltCallback>
}
 801312a:	bf00      	nop
 801312c:	3718      	adds	r7, #24
 801312e:	46bd      	mov	sp, r7
 8013130:	bd80      	pop	{r7, pc}

08013132 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8013132:	b580      	push	{r7, lr}
 8013134:	b084      	sub	sp, #16
 8013136:	af00      	add	r7, sp, #0
 8013138:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801313e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013144:	2b00      	cmp	r3, #0
 8013146:	d003      	beq.n	8013150 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801314c:	2200      	movs	r2, #0
 801314e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013154:	2b00      	cmp	r3, #0
 8013156:	d003      	beq.n	8013160 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801315c:	2200      	movs	r2, #0
 801315e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	681a      	ldr	r2, [r3, #0]
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801316e:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	2200      	movs	r2, #0
 8013174:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	2220      	movs	r2, #32
 801317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	2200      	movs	r2, #0
 8013182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801318a:	f043 0210 	orr.w	r2, r3, #16
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8013192:	68f8      	ldr	r0, [r7, #12]
 8013194:	f7fe fc6a 	bl	8011a6c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8013198:	bf00      	nop
 801319a:	3710      	adds	r7, #16
 801319c:	46bd      	mov	sp, r7
 801319e:	bd80      	pop	{r7, pc}

080131a0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b086      	sub	sp, #24
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80131a8:	2300      	movs	r3, #0
 80131aa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131b0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80131b2:	697b      	ldr	r3, [r7, #20]
 80131b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80131b8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80131ba:	4b4b      	ldr	r3, [pc, #300]	; (80132e8 <I2C_DMAAbort+0x148>)
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	08db      	lsrs	r3, r3, #3
 80131c0:	4a4a      	ldr	r2, [pc, #296]	; (80132ec <I2C_DMAAbort+0x14c>)
 80131c2:	fba2 2303 	umull	r2, r3, r2, r3
 80131c6:	0a1a      	lsrs	r2, r3, #8
 80131c8:	4613      	mov	r3, r2
 80131ca:	009b      	lsls	r3, r3, #2
 80131cc:	4413      	add	r3, r2
 80131ce:	00da      	lsls	r2, r3, #3
 80131d0:	1ad3      	subs	r3, r2, r3
 80131d2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d106      	bne.n	80131e8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80131da:	697b      	ldr	r3, [r7, #20]
 80131dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131de:	f043 0220 	orr.w	r2, r3, #32
 80131e2:	697b      	ldr	r3, [r7, #20]
 80131e4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80131e6:	e00a      	b.n	80131fe <I2C_DMAAbort+0x5e>
    }
    count--;
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	3b01      	subs	r3, #1
 80131ec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80131ee:	697b      	ldr	r3, [r7, #20]
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80131f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80131fc:	d0ea      	beq.n	80131d4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80131fe:	697b      	ldr	r3, [r7, #20]
 8013200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013202:	2b00      	cmp	r3, #0
 8013204:	d003      	beq.n	801320e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8013206:	697b      	ldr	r3, [r7, #20]
 8013208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801320a:	2200      	movs	r2, #0
 801320c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013212:	2b00      	cmp	r3, #0
 8013214:	d003      	beq.n	801321e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8013216:	697b      	ldr	r3, [r7, #20]
 8013218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801321a:	2200      	movs	r2, #0
 801321c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801321e:	697b      	ldr	r3, [r7, #20]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	681a      	ldr	r2, [r3, #0]
 8013224:	697b      	ldr	r3, [r7, #20]
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801322c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 801322e:	697b      	ldr	r3, [r7, #20]
 8013230:	2200      	movs	r2, #0
 8013232:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8013234:	697b      	ldr	r3, [r7, #20]
 8013236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013238:	2b00      	cmp	r3, #0
 801323a:	d003      	beq.n	8013244 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 801323c:	697b      	ldr	r3, [r7, #20]
 801323e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013240:	2200      	movs	r2, #0
 8013242:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8013244:	697b      	ldr	r3, [r7, #20]
 8013246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013248:	2b00      	cmp	r3, #0
 801324a:	d003      	beq.n	8013254 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 801324c:	697b      	ldr	r3, [r7, #20]
 801324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013250:	2200      	movs	r2, #0
 8013252:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8013254:	697b      	ldr	r3, [r7, #20]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	681a      	ldr	r2, [r3, #0]
 801325a:	697b      	ldr	r3, [r7, #20]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	f022 0201 	bic.w	r2, r2, #1
 8013262:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8013264:	697b      	ldr	r3, [r7, #20]
 8013266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801326a:	b2db      	uxtb	r3, r3
 801326c:	2b60      	cmp	r3, #96	; 0x60
 801326e:	d10e      	bne.n	801328e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8013270:	697b      	ldr	r3, [r7, #20]
 8013272:	2220      	movs	r2, #32
 8013274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8013278:	697b      	ldr	r3, [r7, #20]
 801327a:	2200      	movs	r2, #0
 801327c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8013280:	697b      	ldr	r3, [r7, #20]
 8013282:	2200      	movs	r2, #0
 8013284:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8013286:	6978      	ldr	r0, [r7, #20]
 8013288:	f7fe fbf9 	bl	8011a7e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801328c:	e027      	b.n	80132de <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801328e:	7cfb      	ldrb	r3, [r7, #19]
 8013290:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8013294:	2b28      	cmp	r3, #40	; 0x28
 8013296:	d117      	bne.n	80132c8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8013298:	697b      	ldr	r3, [r7, #20]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	681a      	ldr	r2, [r3, #0]
 801329e:	697b      	ldr	r3, [r7, #20]
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	f042 0201 	orr.w	r2, r2, #1
 80132a6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80132a8:	697b      	ldr	r3, [r7, #20]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	681a      	ldr	r2, [r3, #0]
 80132ae:	697b      	ldr	r3, [r7, #20]
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80132b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80132b8:	697b      	ldr	r3, [r7, #20]
 80132ba:	2200      	movs	r2, #0
 80132bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80132be:	697b      	ldr	r3, [r7, #20]
 80132c0:	2228      	movs	r2, #40	; 0x28
 80132c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80132c6:	e007      	b.n	80132d8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80132c8:	697b      	ldr	r3, [r7, #20]
 80132ca:	2220      	movs	r2, #32
 80132cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80132d0:	697b      	ldr	r3, [r7, #20]
 80132d2:	2200      	movs	r2, #0
 80132d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80132d8:	6978      	ldr	r0, [r7, #20]
 80132da:	f7fe fbc7 	bl	8011a6c <HAL_I2C_ErrorCallback>
}
 80132de:	bf00      	nop
 80132e0:	3718      	adds	r7, #24
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}
 80132e6:	bf00      	nop
 80132e8:	20000698 	.word	0x20000698
 80132ec:	14f8b589 	.word	0x14f8b589

080132f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b084      	sub	sp, #16
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	60f8      	str	r0, [r7, #12]
 80132f8:	60b9      	str	r1, [r7, #8]
 80132fa:	603b      	str	r3, [r7, #0]
 80132fc:	4613      	mov	r3, r2
 80132fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8013300:	e048      	b.n	8013394 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013302:	683b      	ldr	r3, [r7, #0]
 8013304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013308:	d044      	beq.n	8013394 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801330a:	f7fb fa4f 	bl	800e7ac <HAL_GetTick>
 801330e:	4602      	mov	r2, r0
 8013310:	69bb      	ldr	r3, [r7, #24]
 8013312:	1ad3      	subs	r3, r2, r3
 8013314:	683a      	ldr	r2, [r7, #0]
 8013316:	429a      	cmp	r2, r3
 8013318:	d302      	bcc.n	8013320 <I2C_WaitOnFlagUntilTimeout+0x30>
 801331a:	683b      	ldr	r3, [r7, #0]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d139      	bne.n	8013394 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	0c1b      	lsrs	r3, r3, #16
 8013324:	b2db      	uxtb	r3, r3
 8013326:	2b01      	cmp	r3, #1
 8013328:	d10d      	bne.n	8013346 <I2C_WaitOnFlagUntilTimeout+0x56>
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	695b      	ldr	r3, [r3, #20]
 8013330:	43da      	mvns	r2, r3
 8013332:	68bb      	ldr	r3, [r7, #8]
 8013334:	4013      	ands	r3, r2
 8013336:	b29b      	uxth	r3, r3
 8013338:	2b00      	cmp	r3, #0
 801333a:	bf0c      	ite	eq
 801333c:	2301      	moveq	r3, #1
 801333e:	2300      	movne	r3, #0
 8013340:	b2db      	uxtb	r3, r3
 8013342:	461a      	mov	r2, r3
 8013344:	e00c      	b.n	8013360 <I2C_WaitOnFlagUntilTimeout+0x70>
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	699b      	ldr	r3, [r3, #24]
 801334c:	43da      	mvns	r2, r3
 801334e:	68bb      	ldr	r3, [r7, #8]
 8013350:	4013      	ands	r3, r2
 8013352:	b29b      	uxth	r3, r3
 8013354:	2b00      	cmp	r3, #0
 8013356:	bf0c      	ite	eq
 8013358:	2301      	moveq	r3, #1
 801335a:	2300      	movne	r3, #0
 801335c:	b2db      	uxtb	r3, r3
 801335e:	461a      	mov	r2, r3
 8013360:	79fb      	ldrb	r3, [r7, #7]
 8013362:	429a      	cmp	r2, r3
 8013364:	d116      	bne.n	8013394 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	2200      	movs	r2, #0
 801336a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	2220      	movs	r2, #32
 8013370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	2200      	movs	r2, #0
 8013378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013380:	f043 0220 	orr.w	r2, r3, #32
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	2200      	movs	r2, #0
 801338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8013390:	2301      	movs	r3, #1
 8013392:	e023      	b.n	80133dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8013394:	68bb      	ldr	r3, [r7, #8]
 8013396:	0c1b      	lsrs	r3, r3, #16
 8013398:	b2db      	uxtb	r3, r3
 801339a:	2b01      	cmp	r3, #1
 801339c:	d10d      	bne.n	80133ba <I2C_WaitOnFlagUntilTimeout+0xca>
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	695b      	ldr	r3, [r3, #20]
 80133a4:	43da      	mvns	r2, r3
 80133a6:	68bb      	ldr	r3, [r7, #8]
 80133a8:	4013      	ands	r3, r2
 80133aa:	b29b      	uxth	r3, r3
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	bf0c      	ite	eq
 80133b0:	2301      	moveq	r3, #1
 80133b2:	2300      	movne	r3, #0
 80133b4:	b2db      	uxtb	r3, r3
 80133b6:	461a      	mov	r2, r3
 80133b8:	e00c      	b.n	80133d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	699b      	ldr	r3, [r3, #24]
 80133c0:	43da      	mvns	r2, r3
 80133c2:	68bb      	ldr	r3, [r7, #8]
 80133c4:	4013      	ands	r3, r2
 80133c6:	b29b      	uxth	r3, r3
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	bf0c      	ite	eq
 80133cc:	2301      	moveq	r3, #1
 80133ce:	2300      	movne	r3, #0
 80133d0:	b2db      	uxtb	r3, r3
 80133d2:	461a      	mov	r2, r3
 80133d4:	79fb      	ldrb	r3, [r7, #7]
 80133d6:	429a      	cmp	r2, r3
 80133d8:	d093      	beq.n	8013302 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80133da:	2300      	movs	r3, #0
}
 80133dc:	4618      	mov	r0, r3
 80133de:	3710      	adds	r7, #16
 80133e0:	46bd      	mov	sp, r7
 80133e2:	bd80      	pop	{r7, pc}

080133e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b084      	sub	sp, #16
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	60f8      	str	r0, [r7, #12]
 80133ec:	60b9      	str	r1, [r7, #8]
 80133ee:	607a      	str	r2, [r7, #4]
 80133f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80133f2:	e071      	b.n	80134d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	695b      	ldr	r3, [r3, #20]
 80133fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80133fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013402:	d123      	bne.n	801344c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	681a      	ldr	r2, [r3, #0]
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013412:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801341c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	2200      	movs	r2, #0
 8013422:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	2220      	movs	r2, #32
 8013428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	2200      	movs	r2, #0
 8013430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013438:	f043 0204 	orr.w	r2, r3, #4
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	2200      	movs	r2, #0
 8013444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8013448:	2301      	movs	r3, #1
 801344a:	e067      	b.n	801351c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013452:	d041      	beq.n	80134d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013454:	f7fb f9aa 	bl	800e7ac <HAL_GetTick>
 8013458:	4602      	mov	r2, r0
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	1ad3      	subs	r3, r2, r3
 801345e:	687a      	ldr	r2, [r7, #4]
 8013460:	429a      	cmp	r2, r3
 8013462:	d302      	bcc.n	801346a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d136      	bne.n	80134d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 801346a:	68bb      	ldr	r3, [r7, #8]
 801346c:	0c1b      	lsrs	r3, r3, #16
 801346e:	b2db      	uxtb	r3, r3
 8013470:	2b01      	cmp	r3, #1
 8013472:	d10c      	bne.n	801348e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	695b      	ldr	r3, [r3, #20]
 801347a:	43da      	mvns	r2, r3
 801347c:	68bb      	ldr	r3, [r7, #8]
 801347e:	4013      	ands	r3, r2
 8013480:	b29b      	uxth	r3, r3
 8013482:	2b00      	cmp	r3, #0
 8013484:	bf14      	ite	ne
 8013486:	2301      	movne	r3, #1
 8013488:	2300      	moveq	r3, #0
 801348a:	b2db      	uxtb	r3, r3
 801348c:	e00b      	b.n	80134a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	699b      	ldr	r3, [r3, #24]
 8013494:	43da      	mvns	r2, r3
 8013496:	68bb      	ldr	r3, [r7, #8]
 8013498:	4013      	ands	r3, r2
 801349a:	b29b      	uxth	r3, r3
 801349c:	2b00      	cmp	r3, #0
 801349e:	bf14      	ite	ne
 80134a0:	2301      	movne	r3, #1
 80134a2:	2300      	moveq	r3, #0
 80134a4:	b2db      	uxtb	r3, r3
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d016      	beq.n	80134d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	2200      	movs	r2, #0
 80134ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	2220      	movs	r2, #32
 80134b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	2200      	movs	r2, #0
 80134bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134c4:	f043 0220 	orr.w	r2, r3, #32
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	2200      	movs	r2, #0
 80134d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80134d4:	2301      	movs	r3, #1
 80134d6:	e021      	b.n	801351c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80134d8:	68bb      	ldr	r3, [r7, #8]
 80134da:	0c1b      	lsrs	r3, r3, #16
 80134dc:	b2db      	uxtb	r3, r3
 80134de:	2b01      	cmp	r3, #1
 80134e0:	d10c      	bne.n	80134fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	695b      	ldr	r3, [r3, #20]
 80134e8:	43da      	mvns	r2, r3
 80134ea:	68bb      	ldr	r3, [r7, #8]
 80134ec:	4013      	ands	r3, r2
 80134ee:	b29b      	uxth	r3, r3
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	bf14      	ite	ne
 80134f4:	2301      	movne	r3, #1
 80134f6:	2300      	moveq	r3, #0
 80134f8:	b2db      	uxtb	r3, r3
 80134fa:	e00b      	b.n	8013514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	699b      	ldr	r3, [r3, #24]
 8013502:	43da      	mvns	r2, r3
 8013504:	68bb      	ldr	r3, [r7, #8]
 8013506:	4013      	ands	r3, r2
 8013508:	b29b      	uxth	r3, r3
 801350a:	2b00      	cmp	r3, #0
 801350c:	bf14      	ite	ne
 801350e:	2301      	movne	r3, #1
 8013510:	2300      	moveq	r3, #0
 8013512:	b2db      	uxtb	r3, r3
 8013514:	2b00      	cmp	r3, #0
 8013516:	f47f af6d 	bne.w	80133f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 801351a:	2300      	movs	r3, #0
}
 801351c:	4618      	mov	r0, r3
 801351e:	3710      	adds	r7, #16
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}

08013524 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b084      	sub	sp, #16
 8013528:	af00      	add	r7, sp, #0
 801352a:	60f8      	str	r0, [r7, #12]
 801352c:	60b9      	str	r1, [r7, #8]
 801352e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8013530:	e034      	b.n	801359c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8013532:	68f8      	ldr	r0, [r7, #12]
 8013534:	f000 f915 	bl	8013762 <I2C_IsAcknowledgeFailed>
 8013538:	4603      	mov	r3, r0
 801353a:	2b00      	cmp	r3, #0
 801353c:	d001      	beq.n	8013542 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801353e:	2301      	movs	r3, #1
 8013540:	e034      	b.n	80135ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013548:	d028      	beq.n	801359c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801354a:	f7fb f92f 	bl	800e7ac <HAL_GetTick>
 801354e:	4602      	mov	r2, r0
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	1ad3      	subs	r3, r2, r3
 8013554:	68ba      	ldr	r2, [r7, #8]
 8013556:	429a      	cmp	r2, r3
 8013558:	d302      	bcc.n	8013560 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801355a:	68bb      	ldr	r3, [r7, #8]
 801355c:	2b00      	cmp	r3, #0
 801355e:	d11d      	bne.n	801359c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	695b      	ldr	r3, [r3, #20]
 8013566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801356a:	2b80      	cmp	r3, #128	; 0x80
 801356c:	d016      	beq.n	801359c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	2200      	movs	r2, #0
 8013572:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	2220      	movs	r2, #32
 8013578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	2200      	movs	r2, #0
 8013580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013588:	f043 0220 	orr.w	r2, r3, #32
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	2200      	movs	r2, #0
 8013594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8013598:	2301      	movs	r3, #1
 801359a:	e007      	b.n	80135ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	695b      	ldr	r3, [r3, #20]
 80135a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80135a6:	2b80      	cmp	r3, #128	; 0x80
 80135a8:	d1c3      	bne.n	8013532 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80135aa:	2300      	movs	r3, #0
}
 80135ac:	4618      	mov	r0, r3
 80135ae:	3710      	adds	r7, #16
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bd80      	pop	{r7, pc}

080135b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b084      	sub	sp, #16
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	60f8      	str	r0, [r7, #12]
 80135bc:	60b9      	str	r1, [r7, #8]
 80135be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80135c0:	e034      	b.n	801362c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80135c2:	68f8      	ldr	r0, [r7, #12]
 80135c4:	f000 f8cd 	bl	8013762 <I2C_IsAcknowledgeFailed>
 80135c8:	4603      	mov	r3, r0
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d001      	beq.n	80135d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80135ce:	2301      	movs	r3, #1
 80135d0:	e034      	b.n	801363c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80135d2:	68bb      	ldr	r3, [r7, #8]
 80135d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135d8:	d028      	beq.n	801362c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80135da:	f7fb f8e7 	bl	800e7ac <HAL_GetTick>
 80135de:	4602      	mov	r2, r0
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	1ad3      	subs	r3, r2, r3
 80135e4:	68ba      	ldr	r2, [r7, #8]
 80135e6:	429a      	cmp	r2, r3
 80135e8:	d302      	bcc.n	80135f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80135ea:	68bb      	ldr	r3, [r7, #8]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d11d      	bne.n	801362c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	695b      	ldr	r3, [r3, #20]
 80135f6:	f003 0304 	and.w	r3, r3, #4
 80135fa:	2b04      	cmp	r3, #4
 80135fc:	d016      	beq.n	801362c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	2200      	movs	r2, #0
 8013602:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	2220      	movs	r2, #32
 8013608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	2200      	movs	r2, #0
 8013610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013618:	f043 0220 	orr.w	r2, r3, #32
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	2200      	movs	r2, #0
 8013624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8013628:	2301      	movs	r3, #1
 801362a:	e007      	b.n	801363c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	695b      	ldr	r3, [r3, #20]
 8013632:	f003 0304 	and.w	r3, r3, #4
 8013636:	2b04      	cmp	r3, #4
 8013638:	d1c3      	bne.n	80135c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801363a:	2300      	movs	r3, #0
}
 801363c:	4618      	mov	r0, r3
 801363e:	3710      	adds	r7, #16
 8013640:	46bd      	mov	sp, r7
 8013642:	bd80      	pop	{r7, pc}

08013644 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8013644:	b480      	push	{r7}
 8013646:	b085      	sub	sp, #20
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801364c:	2300      	movs	r3, #0
 801364e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8013650:	4b13      	ldr	r3, [pc, #76]	; (80136a0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	08db      	lsrs	r3, r3, #3
 8013656:	4a13      	ldr	r2, [pc, #76]	; (80136a4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8013658:	fba2 2303 	umull	r2, r3, r2, r3
 801365c:	0a1a      	lsrs	r2, r3, #8
 801365e:	4613      	mov	r3, r2
 8013660:	009b      	lsls	r3, r3, #2
 8013662:	4413      	add	r3, r2
 8013664:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	3b01      	subs	r3, #1
 801366a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d107      	bne.n	8013682 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013676:	f043 0220 	orr.w	r2, r3, #32
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801367e:	2301      	movs	r3, #1
 8013680:	e008      	b.n	8013694 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801368c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013690:	d0e9      	beq.n	8013666 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8013692:	2300      	movs	r3, #0
}
 8013694:	4618      	mov	r0, r3
 8013696:	3714      	adds	r7, #20
 8013698:	46bd      	mov	sp, r7
 801369a:	bc80      	pop	{r7}
 801369c:	4770      	bx	lr
 801369e:	bf00      	nop
 80136a0:	20000698 	.word	0x20000698
 80136a4:	14f8b589 	.word	0x14f8b589

080136a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b084      	sub	sp, #16
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	60f8      	str	r0, [r7, #12]
 80136b0:	60b9      	str	r1, [r7, #8]
 80136b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80136b4:	e049      	b.n	801374a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	681b      	ldr	r3, [r3, #0]
 80136ba:	695b      	ldr	r3, [r3, #20]
 80136bc:	f003 0310 	and.w	r3, r3, #16
 80136c0:	2b10      	cmp	r3, #16
 80136c2:	d119      	bne.n	80136f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	f06f 0210 	mvn.w	r2, #16
 80136cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	2200      	movs	r2, #0
 80136d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	2220      	movs	r2, #32
 80136d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	2200      	movs	r2, #0
 80136e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	2200      	movs	r2, #0
 80136f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80136f4:	2301      	movs	r3, #1
 80136f6:	e030      	b.n	801375a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80136f8:	f7fb f858 	bl	800e7ac <HAL_GetTick>
 80136fc:	4602      	mov	r2, r0
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	1ad3      	subs	r3, r2, r3
 8013702:	68ba      	ldr	r2, [r7, #8]
 8013704:	429a      	cmp	r2, r3
 8013706:	d302      	bcc.n	801370e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8013708:	68bb      	ldr	r3, [r7, #8]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d11d      	bne.n	801374a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	695b      	ldr	r3, [r3, #20]
 8013714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013718:	2b40      	cmp	r3, #64	; 0x40
 801371a:	d016      	beq.n	801374a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	2200      	movs	r2, #0
 8013720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	2220      	movs	r2, #32
 8013726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	2200      	movs	r2, #0
 801372e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013736:	f043 0220 	orr.w	r2, r3, #32
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	2200      	movs	r2, #0
 8013742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8013746:	2301      	movs	r3, #1
 8013748:	e007      	b.n	801375a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	695b      	ldr	r3, [r3, #20]
 8013750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013754:	2b40      	cmp	r3, #64	; 0x40
 8013756:	d1ae      	bne.n	80136b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8013758:	2300      	movs	r3, #0
}
 801375a:	4618      	mov	r0, r3
 801375c:	3710      	adds	r7, #16
 801375e:	46bd      	mov	sp, r7
 8013760:	bd80      	pop	{r7, pc}

08013762 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8013762:	b480      	push	{r7}
 8013764:	b083      	sub	sp, #12
 8013766:	af00      	add	r7, sp, #0
 8013768:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	695b      	ldr	r3, [r3, #20]
 8013770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013778:	d11b      	bne.n	80137b2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013782:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2200      	movs	r2, #0
 8013788:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	2220      	movs	r2, #32
 801378e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	2200      	movs	r2, #0
 8013796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801379e:	f043 0204 	orr.w	r2, r3, #4
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	2200      	movs	r2, #0
 80137aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80137ae:	2301      	movs	r3, #1
 80137b0:	e000      	b.n	80137b4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80137b2:	2300      	movs	r3, #0
}
 80137b4:	4618      	mov	r0, r3
 80137b6:	370c      	adds	r7, #12
 80137b8:	46bd      	mov	sp, r7
 80137ba:	bc80      	pop	{r7}
 80137bc:	4770      	bx	lr

080137be <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80137be:	b480      	push	{r7}
 80137c0:	b083      	sub	sp, #12
 80137c2:	af00      	add	r7, sp, #0
 80137c4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137ca:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80137ce:	d103      	bne.n	80137d8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	2201      	movs	r2, #1
 80137d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80137d6:	e007      	b.n	80137e8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80137e0:	d102      	bne.n	80137e8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	2208      	movs	r2, #8
 80137e6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80137e8:	bf00      	nop
 80137ea:	370c      	adds	r7, #12
 80137ec:	46bd      	mov	sp, r7
 80137ee:	bc80      	pop	{r7}
 80137f0:	4770      	bx	lr

080137f2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80137f2:	b580      	push	{r7, lr}
 80137f4:	b084      	sub	sp, #16
 80137f6:	af00      	add	r7, sp, #0
 80137f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d101      	bne.n	8013804 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8013800:	2301      	movs	r3, #1
 8013802:	e034      	b.n	801386e <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 801380c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	f245 5255 	movw	r2, #21845	; 0x5555
 8013816:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	687a      	ldr	r2, [r7, #4]
 801381e:	6852      	ldr	r2, [r2, #4]
 8013820:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	687a      	ldr	r2, [r7, #4]
 8013828:	6892      	ldr	r2, [r2, #8]
 801382a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 801382c:	f7fa ffbe 	bl	800e7ac <HAL_GetTick>
 8013830:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8013832:	e00f      	b.n	8013854 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8013834:	f7fa ffba 	bl	800e7ac <HAL_GetTick>
 8013838:	4602      	mov	r2, r0
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	1ad3      	subs	r3, r2, r3
 801383e:	2b27      	cmp	r3, #39	; 0x27
 8013840:	d908      	bls.n	8013854 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	68db      	ldr	r3, [r3, #12]
 8013848:	f003 0303 	and.w	r3, r3, #3
 801384c:	2b00      	cmp	r3, #0
 801384e:	d001      	beq.n	8013854 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8013850:	2303      	movs	r3, #3
 8013852:	e00c      	b.n	801386e <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	68db      	ldr	r3, [r3, #12]
 801385a:	f003 0303 	and.w	r3, r3, #3
 801385e:	2b00      	cmp	r3, #0
 8013860:	d1e8      	bne.n	8013834 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801386a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801386c:	2300      	movs	r3, #0
}
 801386e:	4618      	mov	r0, r3
 8013870:	3710      	adds	r7, #16
 8013872:	46bd      	mov	sp, r7
 8013874:	bd80      	pop	{r7, pc}

08013876 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8013876:	b480      	push	{r7}
 8013878:	b083      	sub	sp, #12
 801387a:	af00      	add	r7, sp, #0
 801387c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8013886:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8013888:	2300      	movs	r3, #0
}
 801388a:	4618      	mov	r0, r3
 801388c:	370c      	adds	r7, #12
 801388e:	46bd      	mov	sp, r7
 8013890:	bc80      	pop	{r7}
 8013892:	4770      	bx	lr

08013894 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8013894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013896:	b08b      	sub	sp, #44	; 0x2c
 8013898:	af06      	add	r7, sp, #24
 801389a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d101      	bne.n	80138a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80138a2:	2301      	movs	r3, #1
 80138a4:	e0f1      	b.n	8013a8a <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80138ac:	b2db      	uxtb	r3, r3
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d106      	bne.n	80138c0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	2200      	movs	r2, #0
 80138b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80138ba:	6878      	ldr	r0, [r7, #4]
 80138bc:	f007 fd20 	bl	801b300 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	2203      	movs	r2, #3
 80138c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	4618      	mov	r0, r3
 80138ce:	f003 fbab 	bl	8017028 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	603b      	str	r3, [r7, #0]
 80138d8:	687e      	ldr	r6, [r7, #4]
 80138da:	466d      	mov	r5, sp
 80138dc:	f106 0410 	add.w	r4, r6, #16
 80138e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80138e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80138e4:	6823      	ldr	r3, [r4, #0]
 80138e6:	602b      	str	r3, [r5, #0]
 80138e8:	1d33      	adds	r3, r6, #4
 80138ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80138ec:	6838      	ldr	r0, [r7, #0]
 80138ee:	f003 fb75 	bl	8016fdc <USB_CoreInit>
 80138f2:	4603      	mov	r3, r0
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d005      	beq.n	8013904 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	2202      	movs	r2, #2
 80138fc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8013900:	2301      	movs	r3, #1
 8013902:	e0c2      	b.n	8013a8a <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	2100      	movs	r1, #0
 801390a:	4618      	mov	r0, r3
 801390c:	f003 fba6 	bl	801705c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013910:	2300      	movs	r3, #0
 8013912:	73fb      	strb	r3, [r7, #15]
 8013914:	e040      	b.n	8013998 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8013916:	7bfb      	ldrb	r3, [r7, #15]
 8013918:	6879      	ldr	r1, [r7, #4]
 801391a:	1c5a      	adds	r2, r3, #1
 801391c:	4613      	mov	r3, r2
 801391e:	009b      	lsls	r3, r3, #2
 8013920:	4413      	add	r3, r2
 8013922:	00db      	lsls	r3, r3, #3
 8013924:	440b      	add	r3, r1
 8013926:	3301      	adds	r3, #1
 8013928:	2201      	movs	r2, #1
 801392a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801392c:	7bfb      	ldrb	r3, [r7, #15]
 801392e:	6879      	ldr	r1, [r7, #4]
 8013930:	1c5a      	adds	r2, r3, #1
 8013932:	4613      	mov	r3, r2
 8013934:	009b      	lsls	r3, r3, #2
 8013936:	4413      	add	r3, r2
 8013938:	00db      	lsls	r3, r3, #3
 801393a:	440b      	add	r3, r1
 801393c:	7bfa      	ldrb	r2, [r7, #15]
 801393e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8013940:	7bfb      	ldrb	r3, [r7, #15]
 8013942:	6879      	ldr	r1, [r7, #4]
 8013944:	1c5a      	adds	r2, r3, #1
 8013946:	4613      	mov	r3, r2
 8013948:	009b      	lsls	r3, r3, #2
 801394a:	4413      	add	r3, r2
 801394c:	00db      	lsls	r3, r3, #3
 801394e:	440b      	add	r3, r1
 8013950:	3303      	adds	r3, #3
 8013952:	2200      	movs	r2, #0
 8013954:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8013956:	7bfa      	ldrb	r2, [r7, #15]
 8013958:	6879      	ldr	r1, [r7, #4]
 801395a:	4613      	mov	r3, r2
 801395c:	009b      	lsls	r3, r3, #2
 801395e:	4413      	add	r3, r2
 8013960:	00db      	lsls	r3, r3, #3
 8013962:	440b      	add	r3, r1
 8013964:	3338      	adds	r3, #56	; 0x38
 8013966:	2200      	movs	r2, #0
 8013968:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801396a:	7bfa      	ldrb	r2, [r7, #15]
 801396c:	6879      	ldr	r1, [r7, #4]
 801396e:	4613      	mov	r3, r2
 8013970:	009b      	lsls	r3, r3, #2
 8013972:	4413      	add	r3, r2
 8013974:	00db      	lsls	r3, r3, #3
 8013976:	440b      	add	r3, r1
 8013978:	333c      	adds	r3, #60	; 0x3c
 801397a:	2200      	movs	r2, #0
 801397c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 801397e:	7bfa      	ldrb	r2, [r7, #15]
 8013980:	6879      	ldr	r1, [r7, #4]
 8013982:	4613      	mov	r3, r2
 8013984:	009b      	lsls	r3, r3, #2
 8013986:	4413      	add	r3, r2
 8013988:	00db      	lsls	r3, r3, #3
 801398a:	440b      	add	r3, r1
 801398c:	3340      	adds	r3, #64	; 0x40
 801398e:	2200      	movs	r2, #0
 8013990:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013992:	7bfb      	ldrb	r3, [r7, #15]
 8013994:	3301      	adds	r3, #1
 8013996:	73fb      	strb	r3, [r7, #15]
 8013998:	7bfa      	ldrb	r2, [r7, #15]
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	685b      	ldr	r3, [r3, #4]
 801399e:	429a      	cmp	r2, r3
 80139a0:	d3b9      	bcc.n	8013916 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80139a2:	2300      	movs	r3, #0
 80139a4:	73fb      	strb	r3, [r7, #15]
 80139a6:	e044      	b.n	8013a32 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80139a8:	7bfa      	ldrb	r2, [r7, #15]
 80139aa:	6879      	ldr	r1, [r7, #4]
 80139ac:	4613      	mov	r3, r2
 80139ae:	009b      	lsls	r3, r3, #2
 80139b0:	4413      	add	r3, r2
 80139b2:	00db      	lsls	r3, r3, #3
 80139b4:	440b      	add	r3, r1
 80139b6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80139ba:	2200      	movs	r2, #0
 80139bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80139be:	7bfa      	ldrb	r2, [r7, #15]
 80139c0:	6879      	ldr	r1, [r7, #4]
 80139c2:	4613      	mov	r3, r2
 80139c4:	009b      	lsls	r3, r3, #2
 80139c6:	4413      	add	r3, r2
 80139c8:	00db      	lsls	r3, r3, #3
 80139ca:	440b      	add	r3, r1
 80139cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80139d0:	7bfa      	ldrb	r2, [r7, #15]
 80139d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80139d4:	7bfa      	ldrb	r2, [r7, #15]
 80139d6:	6879      	ldr	r1, [r7, #4]
 80139d8:	4613      	mov	r3, r2
 80139da:	009b      	lsls	r3, r3, #2
 80139dc:	4413      	add	r3, r2
 80139de:	00db      	lsls	r3, r3, #3
 80139e0:	440b      	add	r3, r1
 80139e2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80139e6:	2200      	movs	r2, #0
 80139e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80139ea:	7bfa      	ldrb	r2, [r7, #15]
 80139ec:	6879      	ldr	r1, [r7, #4]
 80139ee:	4613      	mov	r3, r2
 80139f0:	009b      	lsls	r3, r3, #2
 80139f2:	4413      	add	r3, r2
 80139f4:	00db      	lsls	r3, r3, #3
 80139f6:	440b      	add	r3, r1
 80139f8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80139fc:	2200      	movs	r2, #0
 80139fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8013a00:	7bfa      	ldrb	r2, [r7, #15]
 8013a02:	6879      	ldr	r1, [r7, #4]
 8013a04:	4613      	mov	r3, r2
 8013a06:	009b      	lsls	r3, r3, #2
 8013a08:	4413      	add	r3, r2
 8013a0a:	00db      	lsls	r3, r3, #3
 8013a0c:	440b      	add	r3, r1
 8013a0e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8013a12:	2200      	movs	r2, #0
 8013a14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8013a16:	7bfa      	ldrb	r2, [r7, #15]
 8013a18:	6879      	ldr	r1, [r7, #4]
 8013a1a:	4613      	mov	r3, r2
 8013a1c:	009b      	lsls	r3, r3, #2
 8013a1e:	4413      	add	r3, r2
 8013a20:	00db      	lsls	r3, r3, #3
 8013a22:	440b      	add	r3, r1
 8013a24:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8013a28:	2200      	movs	r2, #0
 8013a2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013a2c:	7bfb      	ldrb	r3, [r7, #15]
 8013a2e:	3301      	adds	r3, #1
 8013a30:	73fb      	strb	r3, [r7, #15]
 8013a32:	7bfa      	ldrb	r2, [r7, #15]
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	685b      	ldr	r3, [r3, #4]
 8013a38:	429a      	cmp	r2, r3
 8013a3a:	d3b5      	bcc.n	80139a8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	603b      	str	r3, [r7, #0]
 8013a42:	687e      	ldr	r6, [r7, #4]
 8013a44:	466d      	mov	r5, sp
 8013a46:	f106 0410 	add.w	r4, r6, #16
 8013a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013a4e:	6823      	ldr	r3, [r4, #0]
 8013a50:	602b      	str	r3, [r5, #0]
 8013a52:	1d33      	adds	r3, r6, #4
 8013a54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013a56:	6838      	ldr	r0, [r7, #0]
 8013a58:	f003 fb0c 	bl	8017074 <USB_DevInit>
 8013a5c:	4603      	mov	r3, r0
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d005      	beq.n	8013a6e <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	2202      	movs	r2, #2
 8013a66:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8013a6a:	2301      	movs	r3, #1
 8013a6c:	e00d      	b.n	8013a8a <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	2200      	movs	r2, #0
 8013a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	2201      	movs	r2, #1
 8013a7a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	4618      	mov	r0, r3
 8013a84:	f005 fda3 	bl	80195ce <USB_DevDisconnect>

  return HAL_OK;
 8013a88:	2300      	movs	r3, #0
}
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	3714      	adds	r7, #20
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013a92 <HAL_PCD_DeInit>:
  * @brief  DeInitializes the PCD peripheral.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_DeInit(PCD_HandleTypeDef *hpcd)
{
 8013a92:	b580      	push	{r7, lr}
 8013a94:	b082      	sub	sp, #8
 8013a96:	af00      	add	r7, sp, #0
 8013a98:	6078      	str	r0, [r7, #4]
  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d101      	bne.n	8013aa4 <HAL_PCD_DeInit+0x12>
  {
    return HAL_ERROR;
 8013aa0:	2301      	movs	r3, #1
 8013aa2:	e015      	b.n	8013ad0 <HAL_PCD_DeInit+0x3e>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	2203      	movs	r2, #3
 8013aa8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Stop Device */
  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f005 fd59 	bl	8019568 <USB_StopDevice>
 8013ab6:	4603      	mov	r3, r0
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d001      	beq.n	8013ac0 <HAL_PCD_DeInit+0x2e>
  {
    return HAL_ERROR;
 8013abc:	2301      	movs	r3, #1
 8013abe:	e007      	b.n	8013ad0 <HAL_PCD_DeInit+0x3e>

  /* DeInit the low level hardware */
  hpcd->MspDeInitCallback(hpcd);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_PCD_MspDeInit(hpcd);
 8013ac0:	6878      	ldr	r0, [r7, #4]
 8013ac2:	f007 fc3b 	bl	801b33c <HAL_PCD_MspDeInit>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  hpcd->State = HAL_PCD_STATE_RESET;
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	2200      	movs	r2, #0
 8013aca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  return HAL_OK;
 8013ace:	2300      	movs	r3, #0
}
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	3708      	adds	r7, #8
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	bd80      	pop	{r7, pc}

08013ad8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b082      	sub	sp, #8
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8013ae6:	2b01      	cmp	r3, #1
 8013ae8:	d101      	bne.n	8013aee <HAL_PCD_Start+0x16>
 8013aea:	2302      	movs	r3, #2
 8013aec:	e016      	b.n	8013b1c <HAL_PCD_Start+0x44>
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	2201      	movs	r2, #1
 8013af2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	4618      	mov	r0, r3
 8013afc:	f003 fa7e 	bl	8016ffc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8013b00:	2101      	movs	r1, #1
 8013b02:	6878      	ldr	r0, [r7, #4]
 8013b04:	f007 feb7 	bl	801b876 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f005 fd54 	bl	80195ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	2200      	movs	r2, #0
 8013b16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8013b1a:	2300      	movs	r3, #0
}
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	3708      	adds	r7, #8
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd80      	pop	{r7, pc}

08013b24 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b082      	sub	sp, #8
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8013b32:	2b01      	cmp	r3, #1
 8013b34:	d101      	bne.n	8013b3a <HAL_PCD_Stop+0x16>
 8013b36:	2302      	movs	r3, #2
 8013b38:	e016      	b.n	8013b68 <HAL_PCD_Stop+0x44>
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	2201      	movs	r2, #1
 8013b3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	4618      	mov	r0, r3
 8013b48:	f003 fa6e 	bl	8017028 <USB_DisableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 0U);
 8013b4c:	2100      	movs	r1, #0
 8013b4e:	6878      	ldr	r0, [r7, #4]
 8013b50:	f007 fe91 	bl	801b876 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevDisconnect(hpcd->Instance);
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f005 fd38 	bl	80195ce <USB_DevDisconnect>

#if defined (USB_OTG_FS)
  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	2200      	movs	r2, #0
 8013b62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8013b66:	2300      	movs	r3, #0
}
 8013b68:	4618      	mov	r0, r3
 8013b6a:	3708      	adds	r7, #8
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	bd80      	pop	{r7, pc}

08013b70 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b088      	sub	sp, #32
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	f005 fd30 	bl	80195e2 <USB_ReadInterrupts>
 8013b82:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8013b84:	69bb      	ldr	r3, [r7, #24]
 8013b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d003      	beq.n	8013b96 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8013b8e:	6878      	ldr	r0, [r7, #4]
 8013b90:	f000 fb1b 	bl	80141ca <PCD_EP_ISR_Handler>

    return;
 8013b94:	e119      	b.n	8013dca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8013b96:	69bb      	ldr	r3, [r7, #24]
 8013b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d013      	beq.n	8013bc8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013ba8:	b29a      	uxth	r2, r3
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013bb2:	b292      	uxth	r2, r2
 8013bb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8013bb8:	6878      	ldr	r0, [r7, #4]
 8013bba:	f007 fc2e 	bl	801b41a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8013bbe:	2100      	movs	r1, #0
 8013bc0:	6878      	ldr	r0, [r7, #4]
 8013bc2:	f000 f905 	bl	8013dd0 <HAL_PCD_SetAddress>

    return;
 8013bc6:	e100      	b.n	8013dca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8013bc8:	69bb      	ldr	r3, [r7, #24]
 8013bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d00c      	beq.n	8013bec <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013bda:	b29a      	uxth	r2, r3
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8013be4:	b292      	uxth	r2, r2
 8013be6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8013bea:	e0ee      	b.n	8013dca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8013bec:	69bb      	ldr	r3, [r7, #24]
 8013bee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d00c      	beq.n	8013c10 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013bfe:	b29a      	uxth	r2, r3
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013c08:	b292      	uxth	r2, r2
 8013c0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8013c0e:	e0dc      	b.n	8013dca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8013c10:	69bb      	ldr	r3, [r7, #24]
 8013c12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d027      	beq.n	8013c6a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8013c22:	b29a      	uxth	r2, r3
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	f022 0204 	bic.w	r2, r2, #4
 8013c2c:	b292      	uxth	r2, r2
 8013c2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8013c3a:	b29a      	uxth	r2, r3
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	f022 0208 	bic.w	r2, r2, #8
 8013c44:	b292      	uxth	r2, r2
 8013c46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8013c4a:	6878      	ldr	r0, [r7, #4]
 8013c4c:	f007 fc1e 	bl	801b48c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013c58:	b29a      	uxth	r2, r3
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8013c62:	b292      	uxth	r2, r2
 8013c64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8013c68:	e0af      	b.n	8013dca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8013c6a:	69bb      	ldr	r3, [r7, #24]
 8013c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	f000 8083 	beq.w	8013d7c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8013c76:	2300      	movs	r3, #0
 8013c78:	77fb      	strb	r3, [r7, #31]
 8013c7a:	e010      	b.n	8013c9e <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	461a      	mov	r2, r3
 8013c82:	7ffb      	ldrb	r3, [r7, #31]
 8013c84:	009b      	lsls	r3, r3, #2
 8013c86:	441a      	add	r2, r3
 8013c88:	7ffb      	ldrb	r3, [r7, #31]
 8013c8a:	8812      	ldrh	r2, [r2, #0]
 8013c8c:	b292      	uxth	r2, r2
 8013c8e:	005b      	lsls	r3, r3, #1
 8013c90:	3320      	adds	r3, #32
 8013c92:	443b      	add	r3, r7
 8013c94:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8013c98:	7ffb      	ldrb	r3, [r7, #31]
 8013c9a:	3301      	adds	r3, #1
 8013c9c:	77fb      	strb	r3, [r7, #31]
 8013c9e:	7ffb      	ldrb	r3, [r7, #31]
 8013ca0:	2b07      	cmp	r3, #7
 8013ca2:	d9eb      	bls.n	8013c7c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8013cac:	b29a      	uxth	r2, r3
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	f042 0201 	orr.w	r2, r2, #1
 8013cb6:	b292      	uxth	r2, r2
 8013cb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8013cc4:	b29a      	uxth	r2, r3
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	f022 0201 	bic.w	r2, r2, #1
 8013cce:	b292      	uxth	r2, r2
 8013cd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8013cd4:	bf00      	nop
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013cde:	b29b      	uxth	r3, r3
 8013ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d0f6      	beq.n	8013cd6 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013cf0:	b29a      	uxth	r2, r3
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013cfa:	b292      	uxth	r2, r2
 8013cfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8013d00:	2300      	movs	r3, #0
 8013d02:	77fb      	strb	r3, [r7, #31]
 8013d04:	e00f      	b.n	8013d26 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8013d06:	7ffb      	ldrb	r3, [r7, #31]
 8013d08:	687a      	ldr	r2, [r7, #4]
 8013d0a:	6812      	ldr	r2, [r2, #0]
 8013d0c:	4611      	mov	r1, r2
 8013d0e:	7ffa      	ldrb	r2, [r7, #31]
 8013d10:	0092      	lsls	r2, r2, #2
 8013d12:	440a      	add	r2, r1
 8013d14:	005b      	lsls	r3, r3, #1
 8013d16:	3320      	adds	r3, #32
 8013d18:	443b      	add	r3, r7
 8013d1a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8013d1e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8013d20:	7ffb      	ldrb	r3, [r7, #31]
 8013d22:	3301      	adds	r3, #1
 8013d24:	77fb      	strb	r3, [r7, #31]
 8013d26:	7ffb      	ldrb	r3, [r7, #31]
 8013d28:	2b07      	cmp	r3, #7
 8013d2a:	d9ec      	bls.n	8013d06 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8013d34:	b29a      	uxth	r2, r3
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	f042 0208 	orr.w	r2, r2, #8
 8013d3e:	b292      	uxth	r2, r2
 8013d40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013d4c:	b29a      	uxth	r2, r3
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013d56:	b292      	uxth	r2, r2
 8013d58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8013d64:	b29a      	uxth	r2, r3
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	f042 0204 	orr.w	r2, r2, #4
 8013d6e:	b292      	uxth	r2, r2
 8013d70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8013d74:	6878      	ldr	r0, [r7, #4]
 8013d76:	f007 fb6f 	bl	801b458 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8013d7a:	e026      	b.n	8013dca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8013d7c:	69bb      	ldr	r3, [r7, #24]
 8013d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d00f      	beq.n	8013da6 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013d8e:	b29a      	uxth	r2, r3
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8013d98:	b292      	uxth	r2, r2
 8013d9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8013d9e:	6878      	ldr	r0, [r7, #4]
 8013da0:	f007 fb2d 	bl	801b3fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8013da4:	e011      	b.n	8013dca <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8013da6:	69bb      	ldr	r3, [r7, #24]
 8013da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d00c      	beq.n	8013dca <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013db8:	b29a      	uxth	r2, r3
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8013dc2:	b292      	uxth	r2, r2
 8013dc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8013dc8:	bf00      	nop
  }
}
 8013dca:	3720      	adds	r7, #32
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	bd80      	pop	{r7, pc}

08013dd0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b082      	sub	sp, #8
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
 8013dd8:	460b      	mov	r3, r1
 8013dda:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8013de2:	2b01      	cmp	r3, #1
 8013de4:	d101      	bne.n	8013dea <HAL_PCD_SetAddress+0x1a>
 8013de6:	2302      	movs	r3, #2
 8013de8:	e013      	b.n	8013e12 <HAL_PCD_SetAddress+0x42>
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	2201      	movs	r2, #1
 8013dee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	78fa      	ldrb	r2, [r7, #3]
 8013df6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	78fa      	ldrb	r2, [r7, #3]
 8013e00:	4611      	mov	r1, r2
 8013e02:	4618      	mov	r0, r3
 8013e04:	f005 fbc6 	bl	8019594 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8013e10:	2300      	movs	r3, #0
}
 8013e12:	4618      	mov	r0, r3
 8013e14:	3708      	adds	r7, #8
 8013e16:	46bd      	mov	sp, r7
 8013e18:	bd80      	pop	{r7, pc}

08013e1a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8013e1a:	b580      	push	{r7, lr}
 8013e1c:	b084      	sub	sp, #16
 8013e1e:	af00      	add	r7, sp, #0
 8013e20:	6078      	str	r0, [r7, #4]
 8013e22:	4608      	mov	r0, r1
 8013e24:	4611      	mov	r1, r2
 8013e26:	461a      	mov	r2, r3
 8013e28:	4603      	mov	r3, r0
 8013e2a:	70fb      	strb	r3, [r7, #3]
 8013e2c:	460b      	mov	r3, r1
 8013e2e:	803b      	strh	r3, [r7, #0]
 8013e30:	4613      	mov	r3, r2
 8013e32:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8013e34:	2300      	movs	r3, #0
 8013e36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8013e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	da0e      	bge.n	8013e5e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013e40:	78fb      	ldrb	r3, [r7, #3]
 8013e42:	f003 0307 	and.w	r3, r3, #7
 8013e46:	1c5a      	adds	r2, r3, #1
 8013e48:	4613      	mov	r3, r2
 8013e4a:	009b      	lsls	r3, r3, #2
 8013e4c:	4413      	add	r3, r2
 8013e4e:	00db      	lsls	r3, r3, #3
 8013e50:	687a      	ldr	r2, [r7, #4]
 8013e52:	4413      	add	r3, r2
 8013e54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	2201      	movs	r2, #1
 8013e5a:	705a      	strb	r2, [r3, #1]
 8013e5c:	e00e      	b.n	8013e7c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013e5e:	78fb      	ldrb	r3, [r7, #3]
 8013e60:	f003 0207 	and.w	r2, r3, #7
 8013e64:	4613      	mov	r3, r2
 8013e66:	009b      	lsls	r3, r3, #2
 8013e68:	4413      	add	r3, r2
 8013e6a:	00db      	lsls	r3, r3, #3
 8013e6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8013e70:	687a      	ldr	r2, [r7, #4]
 8013e72:	4413      	add	r3, r2
 8013e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	2200      	movs	r2, #0
 8013e7a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8013e7c:	78fb      	ldrb	r3, [r7, #3]
 8013e7e:	f003 0307 	and.w	r3, r3, #7
 8013e82:	b2da      	uxtb	r2, r3
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8013e88:	883a      	ldrh	r2, [r7, #0]
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	78ba      	ldrb	r2, [r7, #2]
 8013e92:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8013e94:	78bb      	ldrb	r3, [r7, #2]
 8013e96:	2b02      	cmp	r3, #2
 8013e98:	d102      	bne.n	8013ea0 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8013ea6:	2b01      	cmp	r3, #1
 8013ea8:	d101      	bne.n	8013eae <HAL_PCD_EP_Open+0x94>
 8013eaa:	2302      	movs	r3, #2
 8013eac:	e00e      	b.n	8013ecc <HAL_PCD_EP_Open+0xb2>
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	2201      	movs	r2, #1
 8013eb2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	68f9      	ldr	r1, [r7, #12]
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	f003 f8f9 	bl	80170b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	2200      	movs	r2, #0
 8013ec6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8013eca:	7afb      	ldrb	r3, [r7, #11]
}
 8013ecc:	4618      	mov	r0, r3
 8013ece:	3710      	adds	r7, #16
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd80      	pop	{r7, pc}

08013ed4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b084      	sub	sp, #16
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
 8013edc:	460b      	mov	r3, r1
 8013ede:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8013ee0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	da0e      	bge.n	8013f06 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013ee8:	78fb      	ldrb	r3, [r7, #3]
 8013eea:	f003 0307 	and.w	r3, r3, #7
 8013eee:	1c5a      	adds	r2, r3, #1
 8013ef0:	4613      	mov	r3, r2
 8013ef2:	009b      	lsls	r3, r3, #2
 8013ef4:	4413      	add	r3, r2
 8013ef6:	00db      	lsls	r3, r3, #3
 8013ef8:	687a      	ldr	r2, [r7, #4]
 8013efa:	4413      	add	r3, r2
 8013efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	2201      	movs	r2, #1
 8013f02:	705a      	strb	r2, [r3, #1]
 8013f04:	e00e      	b.n	8013f24 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013f06:	78fb      	ldrb	r3, [r7, #3]
 8013f08:	f003 0207 	and.w	r2, r3, #7
 8013f0c:	4613      	mov	r3, r2
 8013f0e:	009b      	lsls	r3, r3, #2
 8013f10:	4413      	add	r3, r2
 8013f12:	00db      	lsls	r3, r3, #3
 8013f14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8013f18:	687a      	ldr	r2, [r7, #4]
 8013f1a:	4413      	add	r3, r2
 8013f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	2200      	movs	r2, #0
 8013f22:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8013f24:	78fb      	ldrb	r3, [r7, #3]
 8013f26:	f003 0307 	and.w	r3, r3, #7
 8013f2a:	b2da      	uxtb	r2, r3
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8013f36:	2b01      	cmp	r3, #1
 8013f38:	d101      	bne.n	8013f3e <HAL_PCD_EP_Close+0x6a>
 8013f3a:	2302      	movs	r3, #2
 8013f3c:	e00e      	b.n	8013f5c <HAL_PCD_EP_Close+0x88>
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	2201      	movs	r2, #1
 8013f42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	68f9      	ldr	r1, [r7, #12]
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	f003 fc71 	bl	8017834 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	2200      	movs	r2, #0
 8013f56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8013f5a:	2300      	movs	r3, #0
}
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	3710      	adds	r7, #16
 8013f60:	46bd      	mov	sp, r7
 8013f62:	bd80      	pop	{r7, pc}

08013f64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b086      	sub	sp, #24
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	60f8      	str	r0, [r7, #12]
 8013f6c:	607a      	str	r2, [r7, #4]
 8013f6e:	603b      	str	r3, [r7, #0]
 8013f70:	460b      	mov	r3, r1
 8013f72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013f74:	7afb      	ldrb	r3, [r7, #11]
 8013f76:	f003 0207 	and.w	r2, r3, #7
 8013f7a:	4613      	mov	r3, r2
 8013f7c:	009b      	lsls	r3, r3, #2
 8013f7e:	4413      	add	r3, r2
 8013f80:	00db      	lsls	r3, r3, #3
 8013f82:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8013f86:	68fa      	ldr	r2, [r7, #12]
 8013f88:	4413      	add	r3, r2
 8013f8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8013f8c:	697b      	ldr	r3, [r7, #20]
 8013f8e:	687a      	ldr	r2, [r7, #4]
 8013f90:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8013f92:	697b      	ldr	r3, [r7, #20]
 8013f94:	683a      	ldr	r2, [r7, #0]
 8013f96:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8013f98:	697b      	ldr	r3, [r7, #20]
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8013f9e:	697b      	ldr	r3, [r7, #20]
 8013fa0:	2200      	movs	r2, #0
 8013fa2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013fa4:	7afb      	ldrb	r3, [r7, #11]
 8013fa6:	f003 0307 	and.w	r3, r3, #7
 8013faa:	b2da      	uxtb	r2, r3
 8013fac:	697b      	ldr	r3, [r7, #20]
 8013fae:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	6979      	ldr	r1, [r7, #20]
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f003 fe28 	bl	8017c0c <USB_EPStartXfer>

  return HAL_OK;
 8013fbc:	2300      	movs	r3, #0
}
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	3718      	adds	r7, #24
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd80      	pop	{r7, pc}

08013fc6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8013fc6:	b480      	push	{r7}
 8013fc8:	b083      	sub	sp, #12
 8013fca:	af00      	add	r7, sp, #0
 8013fcc:	6078      	str	r0, [r7, #4]
 8013fce:	460b      	mov	r3, r1
 8013fd0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8013fd2:	78fb      	ldrb	r3, [r7, #3]
 8013fd4:	f003 0207 	and.w	r2, r3, #7
 8013fd8:	6879      	ldr	r1, [r7, #4]
 8013fda:	4613      	mov	r3, r2
 8013fdc:	009b      	lsls	r3, r3, #2
 8013fde:	4413      	add	r3, r2
 8013fe0:	00db      	lsls	r3, r3, #3
 8013fe2:	440b      	add	r3, r1
 8013fe4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8013fe8:	681b      	ldr	r3, [r3, #0]
}
 8013fea:	4618      	mov	r0, r3
 8013fec:	370c      	adds	r7, #12
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	bc80      	pop	{r7}
 8013ff2:	4770      	bx	lr

08013ff4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b086      	sub	sp, #24
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	60f8      	str	r0, [r7, #12]
 8013ffc:	607a      	str	r2, [r7, #4]
 8013ffe:	603b      	str	r3, [r7, #0]
 8014000:	460b      	mov	r3, r1
 8014002:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014004:	7afb      	ldrb	r3, [r7, #11]
 8014006:	f003 0307 	and.w	r3, r3, #7
 801400a:	1c5a      	adds	r2, r3, #1
 801400c:	4613      	mov	r3, r2
 801400e:	009b      	lsls	r3, r3, #2
 8014010:	4413      	add	r3, r2
 8014012:	00db      	lsls	r3, r3, #3
 8014014:	68fa      	ldr	r2, [r7, #12]
 8014016:	4413      	add	r3, r2
 8014018:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801401a:	697b      	ldr	r3, [r7, #20]
 801401c:	687a      	ldr	r2, [r7, #4]
 801401e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8014020:	697b      	ldr	r3, [r7, #20]
 8014022:	683a      	ldr	r2, [r7, #0]
 8014024:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8014026:	697b      	ldr	r3, [r7, #20]
 8014028:	2201      	movs	r2, #1
 801402a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 801402e:	697b      	ldr	r3, [r7, #20]
 8014030:	683a      	ldr	r2, [r7, #0]
 8014032:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8014034:	697b      	ldr	r3, [r7, #20]
 8014036:	2200      	movs	r2, #0
 8014038:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 801403a:	697b      	ldr	r3, [r7, #20]
 801403c:	2201      	movs	r2, #1
 801403e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8014040:	7afb      	ldrb	r3, [r7, #11]
 8014042:	f003 0307 	and.w	r3, r3, #7
 8014046:	b2da      	uxtb	r2, r3
 8014048:	697b      	ldr	r3, [r7, #20]
 801404a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	6979      	ldr	r1, [r7, #20]
 8014052:	4618      	mov	r0, r3
 8014054:	f003 fdda 	bl	8017c0c <USB_EPStartXfer>

  return HAL_OK;
 8014058:	2300      	movs	r3, #0
}
 801405a:	4618      	mov	r0, r3
 801405c:	3718      	adds	r7, #24
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}

08014062 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8014062:	b580      	push	{r7, lr}
 8014064:	b084      	sub	sp, #16
 8014066:	af00      	add	r7, sp, #0
 8014068:	6078      	str	r0, [r7, #4]
 801406a:	460b      	mov	r3, r1
 801406c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 801406e:	78fb      	ldrb	r3, [r7, #3]
 8014070:	f003 0207 	and.w	r2, r3, #7
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	685b      	ldr	r3, [r3, #4]
 8014078:	429a      	cmp	r2, r3
 801407a:	d901      	bls.n	8014080 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 801407c:	2301      	movs	r3, #1
 801407e:	e04c      	b.n	801411a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8014080:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014084:	2b00      	cmp	r3, #0
 8014086:	da0e      	bge.n	80140a6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014088:	78fb      	ldrb	r3, [r7, #3]
 801408a:	f003 0307 	and.w	r3, r3, #7
 801408e:	1c5a      	adds	r2, r3, #1
 8014090:	4613      	mov	r3, r2
 8014092:	009b      	lsls	r3, r3, #2
 8014094:	4413      	add	r3, r2
 8014096:	00db      	lsls	r3, r3, #3
 8014098:	687a      	ldr	r2, [r7, #4]
 801409a:	4413      	add	r3, r2
 801409c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	2201      	movs	r2, #1
 80140a2:	705a      	strb	r2, [r3, #1]
 80140a4:	e00c      	b.n	80140c0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80140a6:	78fa      	ldrb	r2, [r7, #3]
 80140a8:	4613      	mov	r3, r2
 80140aa:	009b      	lsls	r3, r3, #2
 80140ac:	4413      	add	r3, r2
 80140ae:	00db      	lsls	r3, r3, #3
 80140b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80140b4:	687a      	ldr	r2, [r7, #4]
 80140b6:	4413      	add	r3, r2
 80140b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	2200      	movs	r2, #0
 80140be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	2201      	movs	r2, #1
 80140c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80140c6:	78fb      	ldrb	r3, [r7, #3]
 80140c8:	f003 0307 	and.w	r3, r3, #7
 80140cc:	b2da      	uxtb	r2, r3
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80140d8:	2b01      	cmp	r3, #1
 80140da:	d101      	bne.n	80140e0 <HAL_PCD_EP_SetStall+0x7e>
 80140dc:	2302      	movs	r3, #2
 80140de:	e01c      	b.n	801411a <HAL_PCD_EP_SetStall+0xb8>
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	2201      	movs	r2, #1
 80140e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	68f9      	ldr	r1, [r7, #12]
 80140ee:	4618      	mov	r0, r3
 80140f0:	f005 f93d 	bl	801936e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80140f4:	78fb      	ldrb	r3, [r7, #3]
 80140f6:	f003 0307 	and.w	r3, r3, #7
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d108      	bne.n	8014110 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	681a      	ldr	r2, [r3, #0]
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8014108:	4619      	mov	r1, r3
 801410a:	4610      	mov	r0, r2
 801410c:	f005 fa78 	bl	8019600 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	2200      	movs	r2, #0
 8014114:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8014118:	2300      	movs	r3, #0
}
 801411a:	4618      	mov	r0, r3
 801411c:	3710      	adds	r7, #16
 801411e:	46bd      	mov	sp, r7
 8014120:	bd80      	pop	{r7, pc}

08014122 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8014122:	b580      	push	{r7, lr}
 8014124:	b084      	sub	sp, #16
 8014126:	af00      	add	r7, sp, #0
 8014128:	6078      	str	r0, [r7, #4]
 801412a:	460b      	mov	r3, r1
 801412c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801412e:	78fb      	ldrb	r3, [r7, #3]
 8014130:	f003 020f 	and.w	r2, r3, #15
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	685b      	ldr	r3, [r3, #4]
 8014138:	429a      	cmp	r2, r3
 801413a:	d901      	bls.n	8014140 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 801413c:	2301      	movs	r3, #1
 801413e:	e040      	b.n	80141c2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8014140:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014144:	2b00      	cmp	r3, #0
 8014146:	da0e      	bge.n	8014166 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014148:	78fb      	ldrb	r3, [r7, #3]
 801414a:	f003 0307 	and.w	r3, r3, #7
 801414e:	1c5a      	adds	r2, r3, #1
 8014150:	4613      	mov	r3, r2
 8014152:	009b      	lsls	r3, r3, #2
 8014154:	4413      	add	r3, r2
 8014156:	00db      	lsls	r3, r3, #3
 8014158:	687a      	ldr	r2, [r7, #4]
 801415a:	4413      	add	r3, r2
 801415c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	2201      	movs	r2, #1
 8014162:	705a      	strb	r2, [r3, #1]
 8014164:	e00e      	b.n	8014184 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8014166:	78fb      	ldrb	r3, [r7, #3]
 8014168:	f003 0207 	and.w	r2, r3, #7
 801416c:	4613      	mov	r3, r2
 801416e:	009b      	lsls	r3, r3, #2
 8014170:	4413      	add	r3, r2
 8014172:	00db      	lsls	r3, r3, #3
 8014174:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8014178:	687a      	ldr	r2, [r7, #4]
 801417a:	4413      	add	r3, r2
 801417c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	2200      	movs	r2, #0
 8014182:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	2200      	movs	r2, #0
 8014188:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801418a:	78fb      	ldrb	r3, [r7, #3]
 801418c:	f003 0307 	and.w	r3, r3, #7
 8014190:	b2da      	uxtb	r2, r3
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 801419c:	2b01      	cmp	r3, #1
 801419e:	d101      	bne.n	80141a4 <HAL_PCD_EP_ClrStall+0x82>
 80141a0:	2302      	movs	r3, #2
 80141a2:	e00e      	b.n	80141c2 <HAL_PCD_EP_ClrStall+0xa0>
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	2201      	movs	r2, #1
 80141a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	68f9      	ldr	r1, [r7, #12]
 80141b2:	4618      	mov	r0, r3
 80141b4:	f005 f92b 	bl	801940e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	2200      	movs	r2, #0
 80141bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80141c0:	2300      	movs	r3, #0
}
 80141c2:	4618      	mov	r0, r3
 80141c4:	3710      	adds	r7, #16
 80141c6:	46bd      	mov	sp, r7
 80141c8:	bd80      	pop	{r7, pc}

080141ca <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80141ca:	b580      	push	{r7, lr}
 80141cc:	b096      	sub	sp, #88	; 0x58
 80141ce:	af00      	add	r7, sp, #0
 80141d0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80141d2:	e3bf      	b.n	8014954 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80141dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80141e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80141e4:	b2db      	uxtb	r3, r3
 80141e6:	f003 030f 	and.w	r3, r3, #15
 80141ea:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80141ee:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	f040 8179 	bne.w	80144ea <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80141f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80141fc:	f003 0310 	and.w	r3, r3, #16
 8014200:	2b00      	cmp	r3, #0
 8014202:	d152      	bne.n	80142aa <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	881b      	ldrh	r3, [r3, #0]
 801420a:	b29b      	uxth	r3, r3
 801420c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8014210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014214:	81fb      	strh	r3, [r7, #14]
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	681a      	ldr	r2, [r3, #0]
 801421a:	89fb      	ldrh	r3, [r7, #14]
 801421c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014224:	b29b      	uxth	r3, r3
 8014226:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	3328      	adds	r3, #40	; 0x28
 801422c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014236:	b29b      	uxth	r3, r3
 8014238:	461a      	mov	r2, r3
 801423a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801423c:	781b      	ldrb	r3, [r3, #0]
 801423e:	00db      	lsls	r3, r3, #3
 8014240:	4413      	add	r3, r2
 8014242:	3302      	adds	r3, #2
 8014244:	005b      	lsls	r3, r3, #1
 8014246:	687a      	ldr	r2, [r7, #4]
 8014248:	6812      	ldr	r2, [r2, #0]
 801424a:	4413      	add	r3, r2
 801424c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014250:	881b      	ldrh	r3, [r3, #0]
 8014252:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8014256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014258:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 801425a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801425c:	695a      	ldr	r2, [r3, #20]
 801425e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014260:	69db      	ldr	r3, [r3, #28]
 8014262:	441a      	add	r2, r3
 8014264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014266:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8014268:	2100      	movs	r1, #0
 801426a:	6878      	ldr	r0, [r7, #4]
 801426c:	f007 f8ad 	bl	801b3ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014276:	b2db      	uxtb	r3, r3
 8014278:	2b00      	cmp	r3, #0
 801427a:	f000 836b 	beq.w	8014954 <PCD_EP_ISR_Handler+0x78a>
 801427e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014280:	699b      	ldr	r3, [r3, #24]
 8014282:	2b00      	cmp	r3, #0
 8014284:	f040 8366 	bne.w	8014954 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801428e:	b2db      	uxtb	r3, r3
 8014290:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014294:	b2da      	uxtb	r2, r3
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	b292      	uxth	r2, r2
 801429c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	2200      	movs	r2, #0
 80142a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80142a8:	e354      	b.n	8014954 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80142b0:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	881b      	ldrh	r3, [r3, #0]
 80142b8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80142bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80142c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d034      	beq.n	8014332 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80142d0:	b29b      	uxth	r3, r3
 80142d2:	461a      	mov	r2, r3
 80142d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80142d6:	781b      	ldrb	r3, [r3, #0]
 80142d8:	00db      	lsls	r3, r3, #3
 80142da:	4413      	add	r3, r2
 80142dc:	3306      	adds	r3, #6
 80142de:	005b      	lsls	r3, r3, #1
 80142e0:	687a      	ldr	r2, [r7, #4]
 80142e2:	6812      	ldr	r2, [r2, #0]
 80142e4:	4413      	add	r3, r2
 80142e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80142ea:	881b      	ldrh	r3, [r3, #0]
 80142ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80142f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80142f2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	6818      	ldr	r0, [r3, #0]
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80142fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014300:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8014302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014304:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8014306:	b29b      	uxth	r3, r3
 8014308:	f005 f9ca 	bl	80196a0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	881b      	ldrh	r3, [r3, #0]
 8014312:	b29a      	uxth	r2, r3
 8014314:	f640 738f 	movw	r3, #3983	; 0xf8f
 8014318:	4013      	ands	r3, r2
 801431a:	823b      	strh	r3, [r7, #16]
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	8a3a      	ldrh	r2, [r7, #16]
 8014322:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8014326:	b292      	uxth	r2, r2
 8014328:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 801432a:	6878      	ldr	r0, [r7, #4]
 801432c:	f007 f820 	bl	801b370 <HAL_PCD_SetupStageCallback>
 8014330:	e310      	b.n	8014954 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8014332:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014336:	2b00      	cmp	r3, #0
 8014338:	f280 830c 	bge.w	8014954 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	881b      	ldrh	r3, [r3, #0]
 8014342:	b29a      	uxth	r2, r3
 8014344:	f640 738f 	movw	r3, #3983	; 0xf8f
 8014348:	4013      	ands	r3, r2
 801434a:	83fb      	strh	r3, [r7, #30]
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	8bfa      	ldrh	r2, [r7, #30]
 8014352:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8014356:	b292      	uxth	r2, r2
 8014358:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014362:	b29b      	uxth	r3, r3
 8014364:	461a      	mov	r2, r3
 8014366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014368:	781b      	ldrb	r3, [r3, #0]
 801436a:	00db      	lsls	r3, r3, #3
 801436c:	4413      	add	r3, r2
 801436e:	3306      	adds	r3, #6
 8014370:	005b      	lsls	r3, r3, #1
 8014372:	687a      	ldr	r2, [r7, #4]
 8014374:	6812      	ldr	r2, [r2, #0]
 8014376:	4413      	add	r3, r2
 8014378:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801437c:	881b      	ldrh	r3, [r3, #0]
 801437e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8014382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014384:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8014386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014388:	69db      	ldr	r3, [r3, #28]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d019      	beq.n	80143c2 <PCD_EP_ISR_Handler+0x1f8>
 801438e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014390:	695b      	ldr	r3, [r3, #20]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d015      	beq.n	80143c2 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	6818      	ldr	r0, [r3, #0]
 801439a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801439c:	6959      	ldr	r1, [r3, #20]
 801439e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80143a0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80143a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80143a4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80143a6:	b29b      	uxth	r3, r3
 80143a8:	f005 f97a 	bl	80196a0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80143ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80143ae:	695a      	ldr	r2, [r3, #20]
 80143b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80143b2:	69db      	ldr	r3, [r3, #28]
 80143b4:	441a      	add	r2, r3
 80143b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80143b8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80143ba:	2100      	movs	r1, #0
 80143bc:	6878      	ldr	r0, [r7, #4]
 80143be:	f006 ffe9 	bl	801b394 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	881b      	ldrh	r3, [r3, #0]
 80143c8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80143cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80143d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	f040 82bd 	bne.w	8014954 <PCD_EP_ISR_Handler+0x78a>
 80143da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80143de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80143e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80143e6:	f000 82b5 	beq.w	8014954 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	61bb      	str	r3, [r7, #24]
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80143f8:	b29b      	uxth	r3, r3
 80143fa:	461a      	mov	r2, r3
 80143fc:	69bb      	ldr	r3, [r7, #24]
 80143fe:	4413      	add	r3, r2
 8014400:	61bb      	str	r3, [r7, #24]
 8014402:	69bb      	ldr	r3, [r7, #24]
 8014404:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8014408:	617b      	str	r3, [r7, #20]
 801440a:	697b      	ldr	r3, [r7, #20]
 801440c:	881b      	ldrh	r3, [r3, #0]
 801440e:	b29b      	uxth	r3, r3
 8014410:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014414:	b29a      	uxth	r2, r3
 8014416:	697b      	ldr	r3, [r7, #20]
 8014418:	801a      	strh	r2, [r3, #0]
 801441a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801441c:	691b      	ldr	r3, [r3, #16]
 801441e:	2b3e      	cmp	r3, #62	; 0x3e
 8014420:	d91d      	bls.n	801445e <PCD_EP_ISR_Handler+0x294>
 8014422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014424:	691b      	ldr	r3, [r3, #16]
 8014426:	095b      	lsrs	r3, r3, #5
 8014428:	647b      	str	r3, [r7, #68]	; 0x44
 801442a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801442c:	691b      	ldr	r3, [r3, #16]
 801442e:	f003 031f 	and.w	r3, r3, #31
 8014432:	2b00      	cmp	r3, #0
 8014434:	d102      	bne.n	801443c <PCD_EP_ISR_Handler+0x272>
 8014436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014438:	3b01      	subs	r3, #1
 801443a:	647b      	str	r3, [r7, #68]	; 0x44
 801443c:	697b      	ldr	r3, [r7, #20]
 801443e:	881b      	ldrh	r3, [r3, #0]
 8014440:	b29a      	uxth	r2, r3
 8014442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014444:	b29b      	uxth	r3, r3
 8014446:	029b      	lsls	r3, r3, #10
 8014448:	b29b      	uxth	r3, r3
 801444a:	4313      	orrs	r3, r2
 801444c:	b29b      	uxth	r3, r3
 801444e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014456:	b29a      	uxth	r2, r3
 8014458:	697b      	ldr	r3, [r7, #20]
 801445a:	801a      	strh	r2, [r3, #0]
 801445c:	e026      	b.n	80144ac <PCD_EP_ISR_Handler+0x2e2>
 801445e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014460:	691b      	ldr	r3, [r3, #16]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d10a      	bne.n	801447c <PCD_EP_ISR_Handler+0x2b2>
 8014466:	697b      	ldr	r3, [r7, #20]
 8014468:	881b      	ldrh	r3, [r3, #0]
 801446a:	b29b      	uxth	r3, r3
 801446c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014470:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014474:	b29a      	uxth	r2, r3
 8014476:	697b      	ldr	r3, [r7, #20]
 8014478:	801a      	strh	r2, [r3, #0]
 801447a:	e017      	b.n	80144ac <PCD_EP_ISR_Handler+0x2e2>
 801447c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801447e:	691b      	ldr	r3, [r3, #16]
 8014480:	085b      	lsrs	r3, r3, #1
 8014482:	647b      	str	r3, [r7, #68]	; 0x44
 8014484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014486:	691b      	ldr	r3, [r3, #16]
 8014488:	f003 0301 	and.w	r3, r3, #1
 801448c:	2b00      	cmp	r3, #0
 801448e:	d002      	beq.n	8014496 <PCD_EP_ISR_Handler+0x2cc>
 8014490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014492:	3301      	adds	r3, #1
 8014494:	647b      	str	r3, [r7, #68]	; 0x44
 8014496:	697b      	ldr	r3, [r7, #20]
 8014498:	881b      	ldrh	r3, [r3, #0]
 801449a:	b29a      	uxth	r2, r3
 801449c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801449e:	b29b      	uxth	r3, r3
 80144a0:	029b      	lsls	r3, r3, #10
 80144a2:	b29b      	uxth	r3, r3
 80144a4:	4313      	orrs	r3, r2
 80144a6:	b29a      	uxth	r2, r3
 80144a8:	697b      	ldr	r3, [r7, #20]
 80144aa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	881b      	ldrh	r3, [r3, #0]
 80144b2:	b29b      	uxth	r3, r3
 80144b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80144b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80144bc:	827b      	strh	r3, [r7, #18]
 80144be:	8a7b      	ldrh	r3, [r7, #18]
 80144c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80144c4:	827b      	strh	r3, [r7, #18]
 80144c6:	8a7b      	ldrh	r3, [r7, #18]
 80144c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80144cc:	827b      	strh	r3, [r7, #18]
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	681a      	ldr	r2, [r3, #0]
 80144d2:	8a7b      	ldrh	r3, [r7, #18]
 80144d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80144d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80144dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80144e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80144e4:	b29b      	uxth	r3, r3
 80144e6:	8013      	strh	r3, [r2, #0]
 80144e8:	e234      	b.n	8014954 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	461a      	mov	r2, r3
 80144f0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80144f4:	009b      	lsls	r3, r3, #2
 80144f6:	4413      	add	r3, r2
 80144f8:	881b      	ldrh	r3, [r3, #0]
 80144fa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80144fe:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8014502:	2b00      	cmp	r3, #0
 8014504:	f280 80fc 	bge.w	8014700 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	461a      	mov	r2, r3
 801450e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8014512:	009b      	lsls	r3, r3, #2
 8014514:	4413      	add	r3, r2
 8014516:	881b      	ldrh	r3, [r3, #0]
 8014518:	b29a      	uxth	r2, r3
 801451a:	f640 738f 	movw	r3, #3983	; 0xf8f
 801451e:	4013      	ands	r3, r2
 8014520:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	461a      	mov	r2, r3
 801452a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 801452e:	009b      	lsls	r3, r3, #2
 8014530:	4413      	add	r3, r2
 8014532:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8014536:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801453a:	b292      	uxth	r2, r2
 801453c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 801453e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8014542:	4613      	mov	r3, r2
 8014544:	009b      	lsls	r3, r3, #2
 8014546:	4413      	add	r3, r2
 8014548:	00db      	lsls	r3, r3, #3
 801454a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 801454e:	687a      	ldr	r2, [r7, #4]
 8014550:	4413      	add	r3, r2
 8014552:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8014554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014556:	7b1b      	ldrb	r3, [r3, #12]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d125      	bne.n	80145a8 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014564:	b29b      	uxth	r3, r3
 8014566:	461a      	mov	r2, r3
 8014568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801456a:	781b      	ldrb	r3, [r3, #0]
 801456c:	00db      	lsls	r3, r3, #3
 801456e:	4413      	add	r3, r2
 8014570:	3306      	adds	r3, #6
 8014572:	005b      	lsls	r3, r3, #1
 8014574:	687a      	ldr	r2, [r7, #4]
 8014576:	6812      	ldr	r2, [r2, #0]
 8014578:	4413      	add	r3, r2
 801457a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801457e:	881b      	ldrh	r3, [r3, #0]
 8014580:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014584:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8014588:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801458c:	2b00      	cmp	r3, #0
 801458e:	f000 8092 	beq.w	80146b6 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	6818      	ldr	r0, [r3, #0]
 8014596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014598:	6959      	ldr	r1, [r3, #20]
 801459a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801459c:	88da      	ldrh	r2, [r3, #6]
 801459e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80145a2:	f005 f87d 	bl	80196a0 <USB_ReadPMA>
 80145a6:	e086      	b.n	80146b6 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80145a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80145aa:	78db      	ldrb	r3, [r3, #3]
 80145ac:	2b02      	cmp	r3, #2
 80145ae:	d10a      	bne.n	80145c6 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80145b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80145b4:	461a      	mov	r2, r3
 80145b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80145b8:	6878      	ldr	r0, [r7, #4]
 80145ba:	f000 f9d9 	bl	8014970 <HAL_PCD_EP_DB_Receive>
 80145be:	4603      	mov	r3, r0
 80145c0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80145c4:	e077      	b.n	80146b6 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	461a      	mov	r2, r3
 80145cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80145ce:	781b      	ldrb	r3, [r3, #0]
 80145d0:	009b      	lsls	r3, r3, #2
 80145d2:	4413      	add	r3, r2
 80145d4:	881b      	ldrh	r3, [r3, #0]
 80145d6:	b29b      	uxth	r3, r3
 80145d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80145dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80145e0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	461a      	mov	r2, r3
 80145ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80145ec:	781b      	ldrb	r3, [r3, #0]
 80145ee:	009b      	lsls	r3, r3, #2
 80145f0:	441a      	add	r2, r3
 80145f2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80145f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80145fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80145fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014602:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8014606:	b29b      	uxth	r3, r3
 8014608:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	461a      	mov	r2, r3
 8014610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014612:	781b      	ldrb	r3, [r3, #0]
 8014614:	009b      	lsls	r3, r3, #2
 8014616:	4413      	add	r3, r2
 8014618:	881b      	ldrh	r3, [r3, #0]
 801461a:	b29b      	uxth	r3, r3
 801461c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014620:	2b00      	cmp	r3, #0
 8014622:	d024      	beq.n	801466e <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801462c:	b29b      	uxth	r3, r3
 801462e:	461a      	mov	r2, r3
 8014630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014632:	781b      	ldrb	r3, [r3, #0]
 8014634:	00db      	lsls	r3, r3, #3
 8014636:	4413      	add	r3, r2
 8014638:	3302      	adds	r3, #2
 801463a:	005b      	lsls	r3, r3, #1
 801463c:	687a      	ldr	r2, [r7, #4]
 801463e:	6812      	ldr	r2, [r2, #0]
 8014640:	4413      	add	r3, r2
 8014642:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014646:	881b      	ldrh	r3, [r3, #0]
 8014648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801464c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8014650:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8014654:	2b00      	cmp	r3, #0
 8014656:	d02e      	beq.n	80146b6 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	6818      	ldr	r0, [r3, #0]
 801465c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801465e:	6959      	ldr	r1, [r3, #20]
 8014660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014662:	891a      	ldrh	r2, [r3, #8]
 8014664:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8014668:	f005 f81a 	bl	80196a0 <USB_ReadPMA>
 801466c:	e023      	b.n	80146b6 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014676:	b29b      	uxth	r3, r3
 8014678:	461a      	mov	r2, r3
 801467a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801467c:	781b      	ldrb	r3, [r3, #0]
 801467e:	00db      	lsls	r3, r3, #3
 8014680:	4413      	add	r3, r2
 8014682:	3306      	adds	r3, #6
 8014684:	005b      	lsls	r3, r3, #1
 8014686:	687a      	ldr	r2, [r7, #4]
 8014688:	6812      	ldr	r2, [r2, #0]
 801468a:	4413      	add	r3, r2
 801468c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014690:	881b      	ldrh	r3, [r3, #0]
 8014692:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014696:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 801469a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d009      	beq.n	80146b6 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	6818      	ldr	r0, [r3, #0]
 80146a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80146a8:	6959      	ldr	r1, [r3, #20]
 80146aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80146ac:	895a      	ldrh	r2, [r3, #10]
 80146ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80146b2:	f004 fff5 	bl	80196a0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80146b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80146b8:	69da      	ldr	r2, [r3, #28]
 80146ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80146be:	441a      	add	r2, r3
 80146c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80146c2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80146c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80146c6:	695a      	ldr	r2, [r3, #20]
 80146c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80146cc:	441a      	add	r2, r3
 80146ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80146d0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80146d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80146d4:	699b      	ldr	r3, [r3, #24]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d005      	beq.n	80146e6 <PCD_EP_ISR_Handler+0x51c>
 80146da:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80146de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80146e0:	691b      	ldr	r3, [r3, #16]
 80146e2:	429a      	cmp	r2, r3
 80146e4:	d206      	bcs.n	80146f4 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80146e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80146e8:	781b      	ldrb	r3, [r3, #0]
 80146ea:	4619      	mov	r1, r3
 80146ec:	6878      	ldr	r0, [r7, #4]
 80146ee:	f006 fe51 	bl	801b394 <HAL_PCD_DataOutStageCallback>
 80146f2:	e005      	b.n	8014700 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80146fa:	4618      	mov	r0, r3
 80146fc:	f003 fa86 	bl	8017c0c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8014700:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8014704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014708:	2b00      	cmp	r3, #0
 801470a:	f000 8123 	beq.w	8014954 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 801470e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8014712:	1c5a      	adds	r2, r3, #1
 8014714:	4613      	mov	r3, r2
 8014716:	009b      	lsls	r3, r3, #2
 8014718:	4413      	add	r3, r2
 801471a:	00db      	lsls	r3, r3, #3
 801471c:	687a      	ldr	r2, [r7, #4]
 801471e:	4413      	add	r3, r2
 8014720:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	461a      	mov	r2, r3
 8014728:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 801472c:	009b      	lsls	r3, r3, #2
 801472e:	4413      	add	r3, r2
 8014730:	881b      	ldrh	r3, [r3, #0]
 8014732:	b29b      	uxth	r3, r3
 8014734:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8014738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801473c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	461a      	mov	r2, r3
 8014746:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 801474a:	009b      	lsls	r3, r3, #2
 801474c:	441a      	add	r2, r3
 801474e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801475a:	b29b      	uxth	r3, r3
 801475c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 801475e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014760:	78db      	ldrb	r3, [r3, #3]
 8014762:	2b01      	cmp	r3, #1
 8014764:	f040 80a2 	bne.w	80148ac <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8014768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801476a:	2200      	movs	r2, #0
 801476c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 801476e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014770:	7b1b      	ldrb	r3, [r3, #12]
 8014772:	2b00      	cmp	r3, #0
 8014774:	f000 8093 	beq.w	801489e <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8014778:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801477c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014780:	2b00      	cmp	r3, #0
 8014782:	d046      	beq.n	8014812 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014786:	785b      	ldrb	r3, [r3, #1]
 8014788:	2b00      	cmp	r3, #0
 801478a:	d126      	bne.n	80147da <PCD_EP_ISR_Handler+0x610>
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	627b      	str	r3, [r7, #36]	; 0x24
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801479a:	b29b      	uxth	r3, r3
 801479c:	461a      	mov	r2, r3
 801479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147a0:	4413      	add	r3, r2
 80147a2:	627b      	str	r3, [r7, #36]	; 0x24
 80147a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147a6:	781b      	ldrb	r3, [r3, #0]
 80147a8:	011a      	lsls	r2, r3, #4
 80147aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ac:	4413      	add	r3, r2
 80147ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80147b2:	623b      	str	r3, [r7, #32]
 80147b4:	6a3b      	ldr	r3, [r7, #32]
 80147b6:	881b      	ldrh	r3, [r3, #0]
 80147b8:	b29b      	uxth	r3, r3
 80147ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80147be:	b29a      	uxth	r2, r3
 80147c0:	6a3b      	ldr	r3, [r7, #32]
 80147c2:	801a      	strh	r2, [r3, #0]
 80147c4:	6a3b      	ldr	r3, [r7, #32]
 80147c6:	881b      	ldrh	r3, [r3, #0]
 80147c8:	b29b      	uxth	r3, r3
 80147ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80147ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80147d2:	b29a      	uxth	r2, r3
 80147d4:	6a3b      	ldr	r3, [r7, #32]
 80147d6:	801a      	strh	r2, [r3, #0]
 80147d8:	e061      	b.n	801489e <PCD_EP_ISR_Handler+0x6d4>
 80147da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147dc:	785b      	ldrb	r3, [r3, #1]
 80147de:	2b01      	cmp	r3, #1
 80147e0:	d15d      	bne.n	801489e <PCD_EP_ISR_Handler+0x6d4>
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80147f0:	b29b      	uxth	r3, r3
 80147f2:	461a      	mov	r2, r3
 80147f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147f6:	4413      	add	r3, r2
 80147f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80147fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147fc:	781b      	ldrb	r3, [r3, #0]
 80147fe:	011a      	lsls	r2, r3, #4
 8014800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014802:	4413      	add	r3, r2
 8014804:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8014808:	62bb      	str	r3, [r7, #40]	; 0x28
 801480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801480c:	2200      	movs	r2, #0
 801480e:	801a      	strh	r2, [r3, #0]
 8014810:	e045      	b.n	801489e <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801481a:	785b      	ldrb	r3, [r3, #1]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d126      	bne.n	801486e <PCD_EP_ISR_Handler+0x6a4>
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	637b      	str	r3, [r7, #52]	; 0x34
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801482e:	b29b      	uxth	r3, r3
 8014830:	461a      	mov	r2, r3
 8014832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014834:	4413      	add	r3, r2
 8014836:	637b      	str	r3, [r7, #52]	; 0x34
 8014838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801483a:	781b      	ldrb	r3, [r3, #0]
 801483c:	011a      	lsls	r2, r3, #4
 801483e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014840:	4413      	add	r3, r2
 8014842:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8014846:	633b      	str	r3, [r7, #48]	; 0x30
 8014848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801484a:	881b      	ldrh	r3, [r3, #0]
 801484c:	b29b      	uxth	r3, r3
 801484e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014852:	b29a      	uxth	r2, r3
 8014854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014856:	801a      	strh	r2, [r3, #0]
 8014858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801485a:	881b      	ldrh	r3, [r3, #0]
 801485c:	b29b      	uxth	r3, r3
 801485e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014866:	b29a      	uxth	r2, r3
 8014868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801486a:	801a      	strh	r2, [r3, #0]
 801486c:	e017      	b.n	801489e <PCD_EP_ISR_Handler+0x6d4>
 801486e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014870:	785b      	ldrb	r3, [r3, #1]
 8014872:	2b01      	cmp	r3, #1
 8014874:	d113      	bne.n	801489e <PCD_EP_ISR_Handler+0x6d4>
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801487e:	b29b      	uxth	r3, r3
 8014880:	461a      	mov	r2, r3
 8014882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014884:	4413      	add	r3, r2
 8014886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801488a:	781b      	ldrb	r3, [r3, #0]
 801488c:	011a      	lsls	r2, r3, #4
 801488e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014890:	4413      	add	r3, r2
 8014892:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8014896:	63bb      	str	r3, [r7, #56]	; 0x38
 8014898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801489a:	2200      	movs	r2, #0
 801489c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801489e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148a0:	781b      	ldrb	r3, [r3, #0]
 80148a2:	4619      	mov	r1, r3
 80148a4:	6878      	ldr	r0, [r7, #4]
 80148a6:	f006 fd90 	bl	801b3ca <HAL_PCD_DataInStageCallback>
 80148aa:	e053      	b.n	8014954 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80148ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80148b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d146      	bne.n	8014946 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80148c0:	b29b      	uxth	r3, r3
 80148c2:	461a      	mov	r2, r3
 80148c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148c6:	781b      	ldrb	r3, [r3, #0]
 80148c8:	00db      	lsls	r3, r3, #3
 80148ca:	4413      	add	r3, r2
 80148cc:	3302      	adds	r3, #2
 80148ce:	005b      	lsls	r3, r3, #1
 80148d0:	687a      	ldr	r2, [r7, #4]
 80148d2:	6812      	ldr	r2, [r2, #0]
 80148d4:	4413      	add	r3, r2
 80148d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80148da:	881b      	ldrh	r3, [r3, #0]
 80148dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80148e0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80148e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148e6:	699a      	ldr	r2, [r3, #24]
 80148e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80148ec:	429a      	cmp	r2, r3
 80148ee:	d907      	bls.n	8014900 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80148f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148f2:	699a      	ldr	r2, [r3, #24]
 80148f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80148f8:	1ad2      	subs	r2, r2, r3
 80148fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148fc:	619a      	str	r2, [r3, #24]
 80148fe:	e002      	b.n	8014906 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8014900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014902:	2200      	movs	r2, #0
 8014904:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8014906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014908:	699b      	ldr	r3, [r3, #24]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d106      	bne.n	801491c <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801490e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014910:	781b      	ldrb	r3, [r3, #0]
 8014912:	4619      	mov	r1, r3
 8014914:	6878      	ldr	r0, [r7, #4]
 8014916:	f006 fd58 	bl	801b3ca <HAL_PCD_DataInStageCallback>
 801491a:	e01b      	b.n	8014954 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 801491c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801491e:	695a      	ldr	r2, [r3, #20]
 8014920:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014924:	441a      	add	r2, r3
 8014926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014928:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 801492a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801492c:	69da      	ldr	r2, [r3, #28]
 801492e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014932:	441a      	add	r2, r3
 8014934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014936:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801493e:	4618      	mov	r0, r3
 8014940:	f003 f964 	bl	8017c0c <USB_EPStartXfer>
 8014944:	e006      	b.n	8014954 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8014946:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 801494a:	461a      	mov	r2, r3
 801494c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801494e:	6878      	ldr	r0, [r7, #4]
 8014950:	f000 f91b 	bl	8014b8a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801495c:	b29b      	uxth	r3, r3
 801495e:	b21b      	sxth	r3, r3
 8014960:	2b00      	cmp	r3, #0
 8014962:	f6ff ac37 	blt.w	80141d4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8014966:	2300      	movs	r3, #0
}
 8014968:	4618      	mov	r0, r3
 801496a:	3758      	adds	r7, #88	; 0x58
 801496c:	46bd      	mov	sp, r7
 801496e:	bd80      	pop	{r7, pc}

08014970 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b088      	sub	sp, #32
 8014974:	af00      	add	r7, sp, #0
 8014976:	60f8      	str	r0, [r7, #12]
 8014978:	60b9      	str	r1, [r7, #8]
 801497a:	4613      	mov	r3, r2
 801497c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801497e:	88fb      	ldrh	r3, [r7, #6]
 8014980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014984:	2b00      	cmp	r3, #0
 8014986:	d07e      	beq.n	8014a86 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014990:	b29b      	uxth	r3, r3
 8014992:	461a      	mov	r2, r3
 8014994:	68bb      	ldr	r3, [r7, #8]
 8014996:	781b      	ldrb	r3, [r3, #0]
 8014998:	00db      	lsls	r3, r3, #3
 801499a:	4413      	add	r3, r2
 801499c:	3302      	adds	r3, #2
 801499e:	005b      	lsls	r3, r3, #1
 80149a0:	68fa      	ldr	r2, [r7, #12]
 80149a2:	6812      	ldr	r2, [r2, #0]
 80149a4:	4413      	add	r3, r2
 80149a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80149aa:	881b      	ldrh	r3, [r3, #0]
 80149ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80149b0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80149b2:	68bb      	ldr	r3, [r7, #8]
 80149b4:	699a      	ldr	r2, [r3, #24]
 80149b6:	8b7b      	ldrh	r3, [r7, #26]
 80149b8:	429a      	cmp	r2, r3
 80149ba:	d306      	bcc.n	80149ca <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80149bc:	68bb      	ldr	r3, [r7, #8]
 80149be:	699a      	ldr	r2, [r3, #24]
 80149c0:	8b7b      	ldrh	r3, [r7, #26]
 80149c2:	1ad2      	subs	r2, r2, r3
 80149c4:	68bb      	ldr	r3, [r7, #8]
 80149c6:	619a      	str	r2, [r3, #24]
 80149c8:	e002      	b.n	80149d0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80149ca:	68bb      	ldr	r3, [r7, #8]
 80149cc:	2200      	movs	r2, #0
 80149ce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80149d0:	68bb      	ldr	r3, [r7, #8]
 80149d2:	699b      	ldr	r3, [r3, #24]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d123      	bne.n	8014a20 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	461a      	mov	r2, r3
 80149de:	68bb      	ldr	r3, [r7, #8]
 80149e0:	781b      	ldrb	r3, [r3, #0]
 80149e2:	009b      	lsls	r3, r3, #2
 80149e4:	4413      	add	r3, r2
 80149e6:	881b      	ldrh	r3, [r3, #0]
 80149e8:	b29b      	uxth	r3, r3
 80149ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80149ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80149f2:	833b      	strh	r3, [r7, #24]
 80149f4:	8b3b      	ldrh	r3, [r7, #24]
 80149f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80149fa:	833b      	strh	r3, [r7, #24]
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	461a      	mov	r2, r3
 8014a02:	68bb      	ldr	r3, [r7, #8]
 8014a04:	781b      	ldrb	r3, [r3, #0]
 8014a06:	009b      	lsls	r3, r3, #2
 8014a08:	441a      	add	r2, r3
 8014a0a:	8b3b      	ldrh	r3, [r7, #24]
 8014a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014a14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a1c:	b29b      	uxth	r3, r3
 8014a1e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8014a20:	88fb      	ldrh	r3, [r7, #6]
 8014a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d01f      	beq.n	8014a6a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	461a      	mov	r2, r3
 8014a30:	68bb      	ldr	r3, [r7, #8]
 8014a32:	781b      	ldrb	r3, [r3, #0]
 8014a34:	009b      	lsls	r3, r3, #2
 8014a36:	4413      	add	r3, r2
 8014a38:	881b      	ldrh	r3, [r3, #0]
 8014a3a:	b29b      	uxth	r3, r3
 8014a3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014a44:	82fb      	strh	r3, [r7, #22]
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	461a      	mov	r2, r3
 8014a4c:	68bb      	ldr	r3, [r7, #8]
 8014a4e:	781b      	ldrb	r3, [r3, #0]
 8014a50:	009b      	lsls	r3, r3, #2
 8014a52:	441a      	add	r2, r3
 8014a54:	8afb      	ldrh	r3, [r7, #22]
 8014a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014a62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8014a66:	b29b      	uxth	r3, r3
 8014a68:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8014a6a:	8b7b      	ldrh	r3, [r7, #26]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	f000 8087 	beq.w	8014b80 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	6818      	ldr	r0, [r3, #0]
 8014a76:	68bb      	ldr	r3, [r7, #8]
 8014a78:	6959      	ldr	r1, [r3, #20]
 8014a7a:	68bb      	ldr	r3, [r7, #8]
 8014a7c:	891a      	ldrh	r2, [r3, #8]
 8014a7e:	8b7b      	ldrh	r3, [r7, #26]
 8014a80:	f004 fe0e 	bl	80196a0 <USB_ReadPMA>
 8014a84:	e07c      	b.n	8014b80 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014a8e:	b29b      	uxth	r3, r3
 8014a90:	461a      	mov	r2, r3
 8014a92:	68bb      	ldr	r3, [r7, #8]
 8014a94:	781b      	ldrb	r3, [r3, #0]
 8014a96:	00db      	lsls	r3, r3, #3
 8014a98:	4413      	add	r3, r2
 8014a9a:	3306      	adds	r3, #6
 8014a9c:	005b      	lsls	r3, r3, #1
 8014a9e:	68fa      	ldr	r2, [r7, #12]
 8014aa0:	6812      	ldr	r2, [r2, #0]
 8014aa2:	4413      	add	r3, r2
 8014aa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014aa8:	881b      	ldrh	r3, [r3, #0]
 8014aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014aae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8014ab0:	68bb      	ldr	r3, [r7, #8]
 8014ab2:	699a      	ldr	r2, [r3, #24]
 8014ab4:	8b7b      	ldrh	r3, [r7, #26]
 8014ab6:	429a      	cmp	r2, r3
 8014ab8:	d306      	bcc.n	8014ac8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8014aba:	68bb      	ldr	r3, [r7, #8]
 8014abc:	699a      	ldr	r2, [r3, #24]
 8014abe:	8b7b      	ldrh	r3, [r7, #26]
 8014ac0:	1ad2      	subs	r2, r2, r3
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	619a      	str	r2, [r3, #24]
 8014ac6:	e002      	b.n	8014ace <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8014ac8:	68bb      	ldr	r3, [r7, #8]
 8014aca:	2200      	movs	r2, #0
 8014acc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8014ace:	68bb      	ldr	r3, [r7, #8]
 8014ad0:	699b      	ldr	r3, [r3, #24]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d123      	bne.n	8014b1e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	461a      	mov	r2, r3
 8014adc:	68bb      	ldr	r3, [r7, #8]
 8014ade:	781b      	ldrb	r3, [r3, #0]
 8014ae0:	009b      	lsls	r3, r3, #2
 8014ae2:	4413      	add	r3, r2
 8014ae4:	881b      	ldrh	r3, [r3, #0]
 8014ae6:	b29b      	uxth	r3, r3
 8014ae8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014af0:	83fb      	strh	r3, [r7, #30]
 8014af2:	8bfb      	ldrh	r3, [r7, #30]
 8014af4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8014af8:	83fb      	strh	r3, [r7, #30]
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	461a      	mov	r2, r3
 8014b00:	68bb      	ldr	r3, [r7, #8]
 8014b02:	781b      	ldrb	r3, [r3, #0]
 8014b04:	009b      	lsls	r3, r3, #2
 8014b06:	441a      	add	r2, r3
 8014b08:	8bfb      	ldrh	r3, [r7, #30]
 8014b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b1a:	b29b      	uxth	r3, r3
 8014b1c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8014b1e:	88fb      	ldrh	r3, [r7, #6]
 8014b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d11f      	bne.n	8014b68 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	461a      	mov	r2, r3
 8014b2e:	68bb      	ldr	r3, [r7, #8]
 8014b30:	781b      	ldrb	r3, [r3, #0]
 8014b32:	009b      	lsls	r3, r3, #2
 8014b34:	4413      	add	r3, r2
 8014b36:	881b      	ldrh	r3, [r3, #0]
 8014b38:	b29b      	uxth	r3, r3
 8014b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014b42:	83bb      	strh	r3, [r7, #28]
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	461a      	mov	r2, r3
 8014b4a:	68bb      	ldr	r3, [r7, #8]
 8014b4c:	781b      	ldrb	r3, [r3, #0]
 8014b4e:	009b      	lsls	r3, r3, #2
 8014b50:	441a      	add	r2, r3
 8014b52:	8bbb      	ldrh	r3, [r7, #28]
 8014b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014b60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8014b64:	b29b      	uxth	r3, r3
 8014b66:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8014b68:	8b7b      	ldrh	r3, [r7, #26]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d008      	beq.n	8014b80 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	6818      	ldr	r0, [r3, #0]
 8014b72:	68bb      	ldr	r3, [r7, #8]
 8014b74:	6959      	ldr	r1, [r3, #20]
 8014b76:	68bb      	ldr	r3, [r7, #8]
 8014b78:	895a      	ldrh	r2, [r3, #10]
 8014b7a:	8b7b      	ldrh	r3, [r7, #26]
 8014b7c:	f004 fd90 	bl	80196a0 <USB_ReadPMA>
    }
  }

  return count;
 8014b80:	8b7b      	ldrh	r3, [r7, #26]
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	3720      	adds	r7, #32
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}

08014b8a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8014b8a:	b580      	push	{r7, lr}
 8014b8c:	b0a4      	sub	sp, #144	; 0x90
 8014b8e:	af00      	add	r7, sp, #0
 8014b90:	60f8      	str	r0, [r7, #12]
 8014b92:	60b9      	str	r1, [r7, #8]
 8014b94:	4613      	mov	r3, r2
 8014b96:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8014b98:	88fb      	ldrh	r3, [r7, #6]
 8014b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	f000 81dd 	beq.w	8014f5e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014bac:	b29b      	uxth	r3, r3
 8014bae:	461a      	mov	r2, r3
 8014bb0:	68bb      	ldr	r3, [r7, #8]
 8014bb2:	781b      	ldrb	r3, [r3, #0]
 8014bb4:	00db      	lsls	r3, r3, #3
 8014bb6:	4413      	add	r3, r2
 8014bb8:	3302      	adds	r3, #2
 8014bba:	005b      	lsls	r3, r3, #1
 8014bbc:	68fa      	ldr	r2, [r7, #12]
 8014bbe:	6812      	ldr	r2, [r2, #0]
 8014bc0:	4413      	add	r3, r2
 8014bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014bc6:	881b      	ldrh	r3, [r3, #0]
 8014bc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014bcc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	699a      	ldr	r2, [r3, #24]
 8014bd4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8014bd8:	429a      	cmp	r2, r3
 8014bda:	d907      	bls.n	8014bec <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8014bdc:	68bb      	ldr	r3, [r7, #8]
 8014bde:	699a      	ldr	r2, [r3, #24]
 8014be0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8014be4:	1ad2      	subs	r2, r2, r3
 8014be6:	68bb      	ldr	r3, [r7, #8]
 8014be8:	619a      	str	r2, [r3, #24]
 8014bea:	e002      	b.n	8014bf2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8014bec:	68bb      	ldr	r3, [r7, #8]
 8014bee:	2200      	movs	r2, #0
 8014bf0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8014bf2:	68bb      	ldr	r3, [r7, #8]
 8014bf4:	699b      	ldr	r3, [r3, #24]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	f040 80b9 	bne.w	8014d6e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014bfc:	68bb      	ldr	r3, [r7, #8]
 8014bfe:	785b      	ldrb	r3, [r3, #1]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d126      	bne.n	8014c52 <HAL_PCD_EP_DB_Transmit+0xc8>
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014c12:	b29b      	uxth	r3, r3
 8014c14:	461a      	mov	r2, r3
 8014c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c18:	4413      	add	r3, r2
 8014c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014c1c:	68bb      	ldr	r3, [r7, #8]
 8014c1e:	781b      	ldrb	r3, [r3, #0]
 8014c20:	011a      	lsls	r2, r3, #4
 8014c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c24:	4413      	add	r3, r2
 8014c26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8014c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8014c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c2e:	881b      	ldrh	r3, [r3, #0]
 8014c30:	b29b      	uxth	r3, r3
 8014c32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014c36:	b29a      	uxth	r2, r3
 8014c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c3a:	801a      	strh	r2, [r3, #0]
 8014c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c3e:	881b      	ldrh	r3, [r3, #0]
 8014c40:	b29b      	uxth	r3, r3
 8014c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014c4a:	b29a      	uxth	r2, r3
 8014c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c4e:	801a      	strh	r2, [r3, #0]
 8014c50:	e01a      	b.n	8014c88 <HAL_PCD_EP_DB_Transmit+0xfe>
 8014c52:	68bb      	ldr	r3, [r7, #8]
 8014c54:	785b      	ldrb	r3, [r3, #1]
 8014c56:	2b01      	cmp	r3, #1
 8014c58:	d116      	bne.n	8014c88 <HAL_PCD_EP_DB_Transmit+0xfe>
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014c68:	b29b      	uxth	r3, r3
 8014c6a:	461a      	mov	r2, r3
 8014c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c6e:	4413      	add	r3, r2
 8014c70:	637b      	str	r3, [r7, #52]	; 0x34
 8014c72:	68bb      	ldr	r3, [r7, #8]
 8014c74:	781b      	ldrb	r3, [r3, #0]
 8014c76:	011a      	lsls	r2, r3, #4
 8014c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c7a:	4413      	add	r3, r2
 8014c7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8014c80:	633b      	str	r3, [r7, #48]	; 0x30
 8014c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c84:	2200      	movs	r2, #0
 8014c86:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8014c8e:	68bb      	ldr	r3, [r7, #8]
 8014c90:	785b      	ldrb	r3, [r3, #1]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d126      	bne.n	8014ce4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	61fb      	str	r3, [r7, #28]
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014ca4:	b29b      	uxth	r3, r3
 8014ca6:	461a      	mov	r2, r3
 8014ca8:	69fb      	ldr	r3, [r7, #28]
 8014caa:	4413      	add	r3, r2
 8014cac:	61fb      	str	r3, [r7, #28]
 8014cae:	68bb      	ldr	r3, [r7, #8]
 8014cb0:	781b      	ldrb	r3, [r3, #0]
 8014cb2:	011a      	lsls	r2, r3, #4
 8014cb4:	69fb      	ldr	r3, [r7, #28]
 8014cb6:	4413      	add	r3, r2
 8014cb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8014cbc:	61bb      	str	r3, [r7, #24]
 8014cbe:	69bb      	ldr	r3, [r7, #24]
 8014cc0:	881b      	ldrh	r3, [r3, #0]
 8014cc2:	b29b      	uxth	r3, r3
 8014cc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014cc8:	b29a      	uxth	r2, r3
 8014cca:	69bb      	ldr	r3, [r7, #24]
 8014ccc:	801a      	strh	r2, [r3, #0]
 8014cce:	69bb      	ldr	r3, [r7, #24]
 8014cd0:	881b      	ldrh	r3, [r3, #0]
 8014cd2:	b29b      	uxth	r3, r3
 8014cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014cdc:	b29a      	uxth	r2, r3
 8014cde:	69bb      	ldr	r3, [r7, #24]
 8014ce0:	801a      	strh	r2, [r3, #0]
 8014ce2:	e017      	b.n	8014d14 <HAL_PCD_EP_DB_Transmit+0x18a>
 8014ce4:	68bb      	ldr	r3, [r7, #8]
 8014ce6:	785b      	ldrb	r3, [r3, #1]
 8014ce8:	2b01      	cmp	r3, #1
 8014cea:	d113      	bne.n	8014d14 <HAL_PCD_EP_DB_Transmit+0x18a>
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014cf4:	b29b      	uxth	r3, r3
 8014cf6:	461a      	mov	r2, r3
 8014cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cfa:	4413      	add	r3, r2
 8014cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8014cfe:	68bb      	ldr	r3, [r7, #8]
 8014d00:	781b      	ldrb	r3, [r3, #0]
 8014d02:	011a      	lsls	r2, r3, #4
 8014d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d06:	4413      	add	r3, r2
 8014d08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8014d0c:	623b      	str	r3, [r7, #32]
 8014d0e:	6a3b      	ldr	r3, [r7, #32]
 8014d10:	2200      	movs	r2, #0
 8014d12:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8014d14:	68bb      	ldr	r3, [r7, #8]
 8014d16:	781b      	ldrb	r3, [r3, #0]
 8014d18:	4619      	mov	r1, r3
 8014d1a:	68f8      	ldr	r0, [r7, #12]
 8014d1c:	f006 fb55 	bl	801b3ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014d20:	88fb      	ldrh	r3, [r7, #6]
 8014d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	f000 82fc 	beq.w	8015324 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	461a      	mov	r2, r3
 8014d32:	68bb      	ldr	r3, [r7, #8]
 8014d34:	781b      	ldrb	r3, [r3, #0]
 8014d36:	009b      	lsls	r3, r3, #2
 8014d38:	4413      	add	r3, r2
 8014d3a:	881b      	ldrh	r3, [r3, #0]
 8014d3c:	b29b      	uxth	r3, r3
 8014d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014d46:	82fb      	strh	r3, [r7, #22]
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	461a      	mov	r2, r3
 8014d4e:	68bb      	ldr	r3, [r7, #8]
 8014d50:	781b      	ldrb	r3, [r3, #0]
 8014d52:	009b      	lsls	r3, r3, #2
 8014d54:	441a      	add	r2, r3
 8014d56:	8afb      	ldrh	r3, [r7, #22]
 8014d58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014d5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014d60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8014d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d68:	b29b      	uxth	r3, r3
 8014d6a:	8013      	strh	r3, [r2, #0]
 8014d6c:	e2da      	b.n	8015324 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8014d6e:	88fb      	ldrh	r3, [r7, #6]
 8014d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d021      	beq.n	8014dbc <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	461a      	mov	r2, r3
 8014d7e:	68bb      	ldr	r3, [r7, #8]
 8014d80:	781b      	ldrb	r3, [r3, #0]
 8014d82:	009b      	lsls	r3, r3, #2
 8014d84:	4413      	add	r3, r2
 8014d86:	881b      	ldrh	r3, [r3, #0]
 8014d88:	b29b      	uxth	r3, r3
 8014d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014d92:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	461a      	mov	r2, r3
 8014d9c:	68bb      	ldr	r3, [r7, #8]
 8014d9e:	781b      	ldrb	r3, [r3, #0]
 8014da0:	009b      	lsls	r3, r3, #2
 8014da2:	441a      	add	r2, r3
 8014da4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8014da8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014dac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014db0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8014db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014db8:	b29b      	uxth	r3, r3
 8014dba:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8014dbc:	68bb      	ldr	r3, [r7, #8]
 8014dbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014dc2:	2b01      	cmp	r3, #1
 8014dc4:	f040 82ae 	bne.w	8015324 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8014dc8:	68bb      	ldr	r3, [r7, #8]
 8014dca:	695a      	ldr	r2, [r3, #20]
 8014dcc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8014dd0:	441a      	add	r2, r3
 8014dd2:	68bb      	ldr	r3, [r7, #8]
 8014dd4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8014dd6:	68bb      	ldr	r3, [r7, #8]
 8014dd8:	69da      	ldr	r2, [r3, #28]
 8014dda:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8014dde:	441a      	add	r2, r3
 8014de0:	68bb      	ldr	r3, [r7, #8]
 8014de2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8014de4:	68bb      	ldr	r3, [r7, #8]
 8014de6:	6a1a      	ldr	r2, [r3, #32]
 8014de8:	68bb      	ldr	r3, [r7, #8]
 8014dea:	691b      	ldr	r3, [r3, #16]
 8014dec:	429a      	cmp	r2, r3
 8014dee:	d30b      	bcc.n	8014e08 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8014df0:	68bb      	ldr	r3, [r7, #8]
 8014df2:	691b      	ldr	r3, [r3, #16]
 8014df4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8014df8:	68bb      	ldr	r3, [r7, #8]
 8014dfa:	6a1a      	ldr	r2, [r3, #32]
 8014dfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014e00:	1ad2      	subs	r2, r2, r3
 8014e02:	68bb      	ldr	r3, [r7, #8]
 8014e04:	621a      	str	r2, [r3, #32]
 8014e06:	e017      	b.n	8014e38 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8014e08:	68bb      	ldr	r3, [r7, #8]
 8014e0a:	6a1b      	ldr	r3, [r3, #32]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d108      	bne.n	8014e22 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8014e10:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8014e14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8014e18:	68bb      	ldr	r3, [r7, #8]
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8014e20:	e00a      	b.n	8014e38 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8014e22:	68bb      	ldr	r3, [r7, #8]
 8014e24:	2200      	movs	r2, #0
 8014e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8014e2a:	68bb      	ldr	r3, [r7, #8]
 8014e2c:	6a1b      	ldr	r3, [r3, #32]
 8014e2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8014e32:	68bb      	ldr	r3, [r7, #8]
 8014e34:	2200      	movs	r2, #0
 8014e36:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8014e38:	68bb      	ldr	r3, [r7, #8]
 8014e3a:	785b      	ldrb	r3, [r3, #1]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d165      	bne.n	8014f0c <HAL_PCD_EP_DB_Transmit+0x382>
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	681b      	ldr	r3, [r3, #0]
 8014e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014e4e:	b29b      	uxth	r3, r3
 8014e50:	461a      	mov	r2, r3
 8014e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e54:	4413      	add	r3, r2
 8014e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014e58:	68bb      	ldr	r3, [r7, #8]
 8014e5a:	781b      	ldrb	r3, [r3, #0]
 8014e5c:	011a      	lsls	r2, r3, #4
 8014e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e60:	4413      	add	r3, r2
 8014e62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8014e66:	63bb      	str	r3, [r7, #56]	; 0x38
 8014e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e6a:	881b      	ldrh	r3, [r3, #0]
 8014e6c:	b29b      	uxth	r3, r3
 8014e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014e72:	b29a      	uxth	r2, r3
 8014e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e76:	801a      	strh	r2, [r3, #0]
 8014e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014e7c:	2b3e      	cmp	r3, #62	; 0x3e
 8014e7e:	d91d      	bls.n	8014ebc <HAL_PCD_EP_DB_Transmit+0x332>
 8014e80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014e84:	095b      	lsrs	r3, r3, #5
 8014e86:	64bb      	str	r3, [r7, #72]	; 0x48
 8014e88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014e8c:	f003 031f 	and.w	r3, r3, #31
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d102      	bne.n	8014e9a <HAL_PCD_EP_DB_Transmit+0x310>
 8014e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e96:	3b01      	subs	r3, #1
 8014e98:	64bb      	str	r3, [r7, #72]	; 0x48
 8014e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e9c:	881b      	ldrh	r3, [r3, #0]
 8014e9e:	b29a      	uxth	r2, r3
 8014ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ea2:	b29b      	uxth	r3, r3
 8014ea4:	029b      	lsls	r3, r3, #10
 8014ea6:	b29b      	uxth	r3, r3
 8014ea8:	4313      	orrs	r3, r2
 8014eaa:	b29b      	uxth	r3, r3
 8014eac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014eb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014eb4:	b29a      	uxth	r2, r3
 8014eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eb8:	801a      	strh	r2, [r3, #0]
 8014eba:	e044      	b.n	8014f46 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8014ebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d10a      	bne.n	8014eda <HAL_PCD_EP_DB_Transmit+0x350>
 8014ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ec6:	881b      	ldrh	r3, [r3, #0]
 8014ec8:	b29b      	uxth	r3, r3
 8014eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014ed2:	b29a      	uxth	r2, r3
 8014ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ed6:	801a      	strh	r2, [r3, #0]
 8014ed8:	e035      	b.n	8014f46 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8014eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014ede:	085b      	lsrs	r3, r3, #1
 8014ee0:	64bb      	str	r3, [r7, #72]	; 0x48
 8014ee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014ee6:	f003 0301 	and.w	r3, r3, #1
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d002      	beq.n	8014ef4 <HAL_PCD_EP_DB_Transmit+0x36a>
 8014eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014ef0:	3301      	adds	r3, #1
 8014ef2:	64bb      	str	r3, [r7, #72]	; 0x48
 8014ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ef6:	881b      	ldrh	r3, [r3, #0]
 8014ef8:	b29a      	uxth	r2, r3
 8014efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014efc:	b29b      	uxth	r3, r3
 8014efe:	029b      	lsls	r3, r3, #10
 8014f00:	b29b      	uxth	r3, r3
 8014f02:	4313      	orrs	r3, r2
 8014f04:	b29a      	uxth	r2, r3
 8014f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f08:	801a      	strh	r2, [r3, #0]
 8014f0a:	e01c      	b.n	8014f46 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8014f0c:	68bb      	ldr	r3, [r7, #8]
 8014f0e:	785b      	ldrb	r3, [r3, #1]
 8014f10:	2b01      	cmp	r3, #1
 8014f12:	d118      	bne.n	8014f46 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	647b      	str	r3, [r7, #68]	; 0x44
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014f22:	b29b      	uxth	r3, r3
 8014f24:	461a      	mov	r2, r3
 8014f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f28:	4413      	add	r3, r2
 8014f2a:	647b      	str	r3, [r7, #68]	; 0x44
 8014f2c:	68bb      	ldr	r3, [r7, #8]
 8014f2e:	781b      	ldrb	r3, [r3, #0]
 8014f30:	011a      	lsls	r2, r3, #4
 8014f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014f34:	4413      	add	r3, r2
 8014f36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8014f3a:	643b      	str	r3, [r7, #64]	; 0x40
 8014f3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014f40:	b29a      	uxth	r2, r3
 8014f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014f44:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	6818      	ldr	r0, [r3, #0]
 8014f4a:	68bb      	ldr	r3, [r7, #8]
 8014f4c:	6959      	ldr	r1, [r3, #20]
 8014f4e:	68bb      	ldr	r3, [r7, #8]
 8014f50:	891a      	ldrh	r2, [r3, #8]
 8014f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014f56:	b29b      	uxth	r3, r3
 8014f58:	f004 fb5d 	bl	8019616 <USB_WritePMA>
 8014f5c:	e1e2      	b.n	8015324 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014f66:	b29b      	uxth	r3, r3
 8014f68:	461a      	mov	r2, r3
 8014f6a:	68bb      	ldr	r3, [r7, #8]
 8014f6c:	781b      	ldrb	r3, [r3, #0]
 8014f6e:	00db      	lsls	r3, r3, #3
 8014f70:	4413      	add	r3, r2
 8014f72:	3306      	adds	r3, #6
 8014f74:	005b      	lsls	r3, r3, #1
 8014f76:	68fa      	ldr	r2, [r7, #12]
 8014f78:	6812      	ldr	r2, [r2, #0]
 8014f7a:	4413      	add	r3, r2
 8014f7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014f80:	881b      	ldrh	r3, [r3, #0]
 8014f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014f86:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8014f8a:	68bb      	ldr	r3, [r7, #8]
 8014f8c:	699a      	ldr	r2, [r3, #24]
 8014f8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8014f92:	429a      	cmp	r2, r3
 8014f94:	d307      	bcc.n	8014fa6 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8014f96:	68bb      	ldr	r3, [r7, #8]
 8014f98:	699a      	ldr	r2, [r3, #24]
 8014f9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8014f9e:	1ad2      	subs	r2, r2, r3
 8014fa0:	68bb      	ldr	r3, [r7, #8]
 8014fa2:	619a      	str	r2, [r3, #24]
 8014fa4:	e002      	b.n	8014fac <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8014fa6:	68bb      	ldr	r3, [r7, #8]
 8014fa8:	2200      	movs	r2, #0
 8014faa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8014fac:	68bb      	ldr	r3, [r7, #8]
 8014fae:	699b      	ldr	r3, [r3, #24]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	f040 80c0 	bne.w	8015136 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8014fb6:	68bb      	ldr	r3, [r7, #8]
 8014fb8:	785b      	ldrb	r3, [r3, #1]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d126      	bne.n	801500c <HAL_PCD_EP_DB_Transmit+0x482>
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014fcc:	b29b      	uxth	r3, r3
 8014fce:	461a      	mov	r2, r3
 8014fd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014fd2:	4413      	add	r3, r2
 8014fd4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014fd6:	68bb      	ldr	r3, [r7, #8]
 8014fd8:	781b      	ldrb	r3, [r3, #0]
 8014fda:	011a      	lsls	r2, r3, #4
 8014fdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014fde:	4413      	add	r3, r2
 8014fe0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8014fe4:	67bb      	str	r3, [r7, #120]	; 0x78
 8014fe6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014fe8:	881b      	ldrh	r3, [r3, #0]
 8014fea:	b29b      	uxth	r3, r3
 8014fec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014ff0:	b29a      	uxth	r2, r3
 8014ff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014ff4:	801a      	strh	r2, [r3, #0]
 8014ff6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014ff8:	881b      	ldrh	r3, [r3, #0]
 8014ffa:	b29b      	uxth	r3, r3
 8014ffc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8015000:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8015004:	b29a      	uxth	r2, r3
 8015006:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015008:	801a      	strh	r2, [r3, #0]
 801500a:	e01a      	b.n	8015042 <HAL_PCD_EP_DB_Transmit+0x4b8>
 801500c:	68bb      	ldr	r3, [r7, #8]
 801500e:	785b      	ldrb	r3, [r3, #1]
 8015010:	2b01      	cmp	r3, #1
 8015012:	d116      	bne.n	8015042 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	667b      	str	r3, [r7, #100]	; 0x64
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8015022:	b29b      	uxth	r3, r3
 8015024:	461a      	mov	r2, r3
 8015026:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015028:	4413      	add	r3, r2
 801502a:	667b      	str	r3, [r7, #100]	; 0x64
 801502c:	68bb      	ldr	r3, [r7, #8]
 801502e:	781b      	ldrb	r3, [r3, #0]
 8015030:	011a      	lsls	r2, r3, #4
 8015032:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015034:	4413      	add	r3, r2
 8015036:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801503a:	663b      	str	r3, [r7, #96]	; 0x60
 801503c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801503e:	2200      	movs	r2, #0
 8015040:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	677b      	str	r3, [r7, #116]	; 0x74
 8015048:	68bb      	ldr	r3, [r7, #8]
 801504a:	785b      	ldrb	r3, [r3, #1]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d12b      	bne.n	80150a8 <HAL_PCD_EP_DB_Transmit+0x51e>
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801505e:	b29b      	uxth	r3, r3
 8015060:	461a      	mov	r2, r3
 8015062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015064:	4413      	add	r3, r2
 8015066:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015068:	68bb      	ldr	r3, [r7, #8]
 801506a:	781b      	ldrb	r3, [r3, #0]
 801506c:	011a      	lsls	r2, r3, #4
 801506e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015070:	4413      	add	r3, r2
 8015072:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8015076:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801507a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801507e:	881b      	ldrh	r3, [r3, #0]
 8015080:	b29b      	uxth	r3, r3
 8015082:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015086:	b29a      	uxth	r2, r3
 8015088:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801508c:	801a      	strh	r2, [r3, #0]
 801508e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015092:	881b      	ldrh	r3, [r3, #0]
 8015094:	b29b      	uxth	r3, r3
 8015096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801509a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801509e:	b29a      	uxth	r2, r3
 80150a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80150a4:	801a      	strh	r2, [r3, #0]
 80150a6:	e017      	b.n	80150d8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80150a8:	68bb      	ldr	r3, [r7, #8]
 80150aa:	785b      	ldrb	r3, [r3, #1]
 80150ac:	2b01      	cmp	r3, #1
 80150ae:	d113      	bne.n	80150d8 <HAL_PCD_EP_DB_Transmit+0x54e>
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80150b8:	b29b      	uxth	r3, r3
 80150ba:	461a      	mov	r2, r3
 80150bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80150be:	4413      	add	r3, r2
 80150c0:	677b      	str	r3, [r7, #116]	; 0x74
 80150c2:	68bb      	ldr	r3, [r7, #8]
 80150c4:	781b      	ldrb	r3, [r3, #0]
 80150c6:	011a      	lsls	r2, r3, #4
 80150c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80150ca:	4413      	add	r3, r2
 80150cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80150d0:	673b      	str	r3, [r7, #112]	; 0x70
 80150d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80150d4:	2200      	movs	r2, #0
 80150d6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80150d8:	68bb      	ldr	r3, [r7, #8]
 80150da:	781b      	ldrb	r3, [r3, #0]
 80150dc:	4619      	mov	r1, r3
 80150de:	68f8      	ldr	r0, [r7, #12]
 80150e0:	f006 f973 	bl	801b3ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80150e4:	88fb      	ldrh	r3, [r7, #6]
 80150e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	f040 811a 	bne.w	8015324 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	461a      	mov	r2, r3
 80150f6:	68bb      	ldr	r3, [r7, #8]
 80150f8:	781b      	ldrb	r3, [r3, #0]
 80150fa:	009b      	lsls	r3, r3, #2
 80150fc:	4413      	add	r3, r2
 80150fe:	881b      	ldrh	r3, [r3, #0]
 8015100:	b29b      	uxth	r3, r3
 8015102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801510a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	461a      	mov	r2, r3
 8015114:	68bb      	ldr	r3, [r7, #8]
 8015116:	781b      	ldrb	r3, [r3, #0]
 8015118:	009b      	lsls	r3, r3, #2
 801511a:	441a      	add	r2, r3
 801511c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8015120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015128:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801512c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015130:	b29b      	uxth	r3, r3
 8015132:	8013      	strh	r3, [r2, #0]
 8015134:	e0f6      	b.n	8015324 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8015136:	88fb      	ldrh	r3, [r7, #6]
 8015138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801513c:	2b00      	cmp	r3, #0
 801513e:	d121      	bne.n	8015184 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	461a      	mov	r2, r3
 8015146:	68bb      	ldr	r3, [r7, #8]
 8015148:	781b      	ldrb	r3, [r3, #0]
 801514a:	009b      	lsls	r3, r3, #2
 801514c:	4413      	add	r3, r2
 801514e:	881b      	ldrh	r3, [r3, #0]
 8015150:	b29b      	uxth	r3, r3
 8015152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801515a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	461a      	mov	r2, r3
 8015164:	68bb      	ldr	r3, [r7, #8]
 8015166:	781b      	ldrb	r3, [r3, #0]
 8015168:	009b      	lsls	r3, r3, #2
 801516a:	441a      	add	r2, r3
 801516c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015178:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801517c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015180:	b29b      	uxth	r3, r3
 8015182:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8015184:	68bb      	ldr	r3, [r7, #8]
 8015186:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801518a:	2b01      	cmp	r3, #1
 801518c:	f040 80ca 	bne.w	8015324 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8015190:	68bb      	ldr	r3, [r7, #8]
 8015192:	695a      	ldr	r2, [r3, #20]
 8015194:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8015198:	441a      	add	r2, r3
 801519a:	68bb      	ldr	r3, [r7, #8]
 801519c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801519e:	68bb      	ldr	r3, [r7, #8]
 80151a0:	69da      	ldr	r2, [r3, #28]
 80151a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80151a6:	441a      	add	r2, r3
 80151a8:	68bb      	ldr	r3, [r7, #8]
 80151aa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80151ac:	68bb      	ldr	r3, [r7, #8]
 80151ae:	6a1a      	ldr	r2, [r3, #32]
 80151b0:	68bb      	ldr	r3, [r7, #8]
 80151b2:	691b      	ldr	r3, [r3, #16]
 80151b4:	429a      	cmp	r2, r3
 80151b6:	d30b      	bcc.n	80151d0 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80151b8:	68bb      	ldr	r3, [r7, #8]
 80151ba:	691b      	ldr	r3, [r3, #16]
 80151bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80151c0:	68bb      	ldr	r3, [r7, #8]
 80151c2:	6a1a      	ldr	r2, [r3, #32]
 80151c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80151c8:	1ad2      	subs	r2, r2, r3
 80151ca:	68bb      	ldr	r3, [r7, #8]
 80151cc:	621a      	str	r2, [r3, #32]
 80151ce:	e017      	b.n	8015200 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80151d0:	68bb      	ldr	r3, [r7, #8]
 80151d2:	6a1b      	ldr	r3, [r3, #32]
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d108      	bne.n	80151ea <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80151d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80151dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80151e0:	68bb      	ldr	r3, [r7, #8]
 80151e2:	2200      	movs	r2, #0
 80151e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80151e8:	e00a      	b.n	8015200 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80151ea:	68bb      	ldr	r3, [r7, #8]
 80151ec:	6a1b      	ldr	r3, [r3, #32]
 80151ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80151f2:	68bb      	ldr	r3, [r7, #8]
 80151f4:	2200      	movs	r2, #0
 80151f6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80151f8:	68bb      	ldr	r3, [r7, #8]
 80151fa:	2200      	movs	r2, #0
 80151fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	657b      	str	r3, [r7, #84]	; 0x54
 8015206:	68bb      	ldr	r3, [r7, #8]
 8015208:	785b      	ldrb	r3, [r3, #1]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d165      	bne.n	80152da <HAL_PCD_EP_DB_Transmit+0x750>
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801521c:	b29b      	uxth	r3, r3
 801521e:	461a      	mov	r2, r3
 8015220:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015222:	4413      	add	r3, r2
 8015224:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015226:	68bb      	ldr	r3, [r7, #8]
 8015228:	781b      	ldrb	r3, [r3, #0]
 801522a:	011a      	lsls	r2, r3, #4
 801522c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801522e:	4413      	add	r3, r2
 8015230:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8015234:	65bb      	str	r3, [r7, #88]	; 0x58
 8015236:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015238:	881b      	ldrh	r3, [r3, #0]
 801523a:	b29b      	uxth	r3, r3
 801523c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015240:	b29a      	uxth	r2, r3
 8015242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015244:	801a      	strh	r2, [r3, #0]
 8015246:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801524a:	2b3e      	cmp	r3, #62	; 0x3e
 801524c:	d91d      	bls.n	801528a <HAL_PCD_EP_DB_Transmit+0x700>
 801524e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015252:	095b      	lsrs	r3, r3, #5
 8015254:	66bb      	str	r3, [r7, #104]	; 0x68
 8015256:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801525a:	f003 031f 	and.w	r3, r3, #31
 801525e:	2b00      	cmp	r3, #0
 8015260:	d102      	bne.n	8015268 <HAL_PCD_EP_DB_Transmit+0x6de>
 8015262:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015264:	3b01      	subs	r3, #1
 8015266:	66bb      	str	r3, [r7, #104]	; 0x68
 8015268:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801526a:	881b      	ldrh	r3, [r3, #0]
 801526c:	b29a      	uxth	r2, r3
 801526e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015270:	b29b      	uxth	r3, r3
 8015272:	029b      	lsls	r3, r3, #10
 8015274:	b29b      	uxth	r3, r3
 8015276:	4313      	orrs	r3, r2
 8015278:	b29b      	uxth	r3, r3
 801527a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801527e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8015282:	b29a      	uxth	r2, r3
 8015284:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015286:	801a      	strh	r2, [r3, #0]
 8015288:	e041      	b.n	801530e <HAL_PCD_EP_DB_Transmit+0x784>
 801528a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801528e:	2b00      	cmp	r3, #0
 8015290:	d10a      	bne.n	80152a8 <HAL_PCD_EP_DB_Transmit+0x71e>
 8015292:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015294:	881b      	ldrh	r3, [r3, #0]
 8015296:	b29b      	uxth	r3, r3
 8015298:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801529c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80152a0:	b29a      	uxth	r2, r3
 80152a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80152a4:	801a      	strh	r2, [r3, #0]
 80152a6:	e032      	b.n	801530e <HAL_PCD_EP_DB_Transmit+0x784>
 80152a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80152ac:	085b      	lsrs	r3, r3, #1
 80152ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80152b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80152b4:	f003 0301 	and.w	r3, r3, #1
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d002      	beq.n	80152c2 <HAL_PCD_EP_DB_Transmit+0x738>
 80152bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80152be:	3301      	adds	r3, #1
 80152c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80152c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80152c4:	881b      	ldrh	r3, [r3, #0]
 80152c6:	b29a      	uxth	r2, r3
 80152c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80152ca:	b29b      	uxth	r3, r3
 80152cc:	029b      	lsls	r3, r3, #10
 80152ce:	b29b      	uxth	r3, r3
 80152d0:	4313      	orrs	r3, r2
 80152d2:	b29a      	uxth	r2, r3
 80152d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80152d6:	801a      	strh	r2, [r3, #0]
 80152d8:	e019      	b.n	801530e <HAL_PCD_EP_DB_Transmit+0x784>
 80152da:	68bb      	ldr	r3, [r7, #8]
 80152dc:	785b      	ldrb	r3, [r3, #1]
 80152de:	2b01      	cmp	r3, #1
 80152e0:	d115      	bne.n	801530e <HAL_PCD_EP_DB_Transmit+0x784>
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	681b      	ldr	r3, [r3, #0]
 80152e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80152ea:	b29b      	uxth	r3, r3
 80152ec:	461a      	mov	r2, r3
 80152ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80152f0:	4413      	add	r3, r2
 80152f2:	657b      	str	r3, [r7, #84]	; 0x54
 80152f4:	68bb      	ldr	r3, [r7, #8]
 80152f6:	781b      	ldrb	r3, [r3, #0]
 80152f8:	011a      	lsls	r2, r3, #4
 80152fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80152fc:	4413      	add	r3, r2
 80152fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8015302:	653b      	str	r3, [r7, #80]	; 0x50
 8015304:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015308:	b29a      	uxth	r2, r3
 801530a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801530c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	6818      	ldr	r0, [r3, #0]
 8015312:	68bb      	ldr	r3, [r7, #8]
 8015314:	6959      	ldr	r1, [r3, #20]
 8015316:	68bb      	ldr	r3, [r7, #8]
 8015318:	895a      	ldrh	r2, [r3, #10]
 801531a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801531e:	b29b      	uxth	r3, r3
 8015320:	f004 f979 	bl	8019616 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	461a      	mov	r2, r3
 801532a:	68bb      	ldr	r3, [r7, #8]
 801532c:	781b      	ldrb	r3, [r3, #0]
 801532e:	009b      	lsls	r3, r3, #2
 8015330:	4413      	add	r3, r2
 8015332:	881b      	ldrh	r3, [r3, #0]
 8015334:	b29b      	uxth	r3, r3
 8015336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801533a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801533e:	82bb      	strh	r3, [r7, #20]
 8015340:	8abb      	ldrh	r3, [r7, #20]
 8015342:	f083 0310 	eor.w	r3, r3, #16
 8015346:	82bb      	strh	r3, [r7, #20]
 8015348:	8abb      	ldrh	r3, [r7, #20]
 801534a:	f083 0320 	eor.w	r3, r3, #32
 801534e:	82bb      	strh	r3, [r7, #20]
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	461a      	mov	r2, r3
 8015356:	68bb      	ldr	r3, [r7, #8]
 8015358:	781b      	ldrb	r3, [r3, #0]
 801535a:	009b      	lsls	r3, r3, #2
 801535c:	441a      	add	r2, r3
 801535e:	8abb      	ldrh	r3, [r7, #20]
 8015360:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015364:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015368:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801536c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015370:	b29b      	uxth	r3, r3
 8015372:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8015374:	2300      	movs	r3, #0
}
 8015376:	4618      	mov	r0, r3
 8015378:	3790      	adds	r7, #144	; 0x90
 801537a:	46bd      	mov	sp, r7
 801537c:	bd80      	pop	{r7, pc}

0801537e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801537e:	b480      	push	{r7}
 8015380:	b087      	sub	sp, #28
 8015382:	af00      	add	r7, sp, #0
 8015384:	60f8      	str	r0, [r7, #12]
 8015386:	607b      	str	r3, [r7, #4]
 8015388:	460b      	mov	r3, r1
 801538a:	817b      	strh	r3, [r7, #10]
 801538c:	4613      	mov	r3, r2
 801538e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8015390:	897b      	ldrh	r3, [r7, #10]
 8015392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015396:	b29b      	uxth	r3, r3
 8015398:	2b00      	cmp	r3, #0
 801539a:	d00b      	beq.n	80153b4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801539c:	897b      	ldrh	r3, [r7, #10]
 801539e:	f003 0307 	and.w	r3, r3, #7
 80153a2:	1c5a      	adds	r2, r3, #1
 80153a4:	4613      	mov	r3, r2
 80153a6:	009b      	lsls	r3, r3, #2
 80153a8:	4413      	add	r3, r2
 80153aa:	00db      	lsls	r3, r3, #3
 80153ac:	68fa      	ldr	r2, [r7, #12]
 80153ae:	4413      	add	r3, r2
 80153b0:	617b      	str	r3, [r7, #20]
 80153b2:	e009      	b.n	80153c8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80153b4:	897a      	ldrh	r2, [r7, #10]
 80153b6:	4613      	mov	r3, r2
 80153b8:	009b      	lsls	r3, r3, #2
 80153ba:	4413      	add	r3, r2
 80153bc:	00db      	lsls	r3, r3, #3
 80153be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80153c2:	68fa      	ldr	r2, [r7, #12]
 80153c4:	4413      	add	r3, r2
 80153c6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80153c8:	893b      	ldrh	r3, [r7, #8]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d107      	bne.n	80153de <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80153ce:	697b      	ldr	r3, [r7, #20]
 80153d0:	2200      	movs	r2, #0
 80153d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	b29a      	uxth	r2, r3
 80153d8:	697b      	ldr	r3, [r7, #20]
 80153da:	80da      	strh	r2, [r3, #6]
 80153dc:	e00b      	b.n	80153f6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80153de:	697b      	ldr	r3, [r7, #20]
 80153e0:	2201      	movs	r2, #1
 80153e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	b29a      	uxth	r2, r3
 80153e8:	697b      	ldr	r3, [r7, #20]
 80153ea:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	0c1b      	lsrs	r3, r3, #16
 80153f0:	b29a      	uxth	r2, r3
 80153f2:	697b      	ldr	r3, [r7, #20]
 80153f4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80153f6:	2300      	movs	r3, #0
}
 80153f8:	4618      	mov	r0, r3
 80153fa:	371c      	adds	r7, #28
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bc80      	pop	{r7}
 8015400:	4770      	bx	lr
	...

08015404 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8015404:	b580      	push	{r7, lr}
 8015406:	b086      	sub	sp, #24
 8015408:	af00      	add	r7, sp, #0
 801540a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d101      	bne.n	8015416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8015412:	2301      	movs	r3, #1
 8015414:	e272      	b.n	80158fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	f003 0301 	and.w	r3, r3, #1
 801541e:	2b00      	cmp	r3, #0
 8015420:	f000 8087 	beq.w	8015532 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8015424:	4b92      	ldr	r3, [pc, #584]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 8015426:	685b      	ldr	r3, [r3, #4]
 8015428:	f003 030c 	and.w	r3, r3, #12
 801542c:	2b04      	cmp	r3, #4
 801542e:	d00c      	beq.n	801544a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8015430:	4b8f      	ldr	r3, [pc, #572]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 8015432:	685b      	ldr	r3, [r3, #4]
 8015434:	f003 030c 	and.w	r3, r3, #12
 8015438:	2b08      	cmp	r3, #8
 801543a:	d112      	bne.n	8015462 <HAL_RCC_OscConfig+0x5e>
 801543c:	4b8c      	ldr	r3, [pc, #560]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 801543e:	685b      	ldr	r3, [r3, #4]
 8015440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015448:	d10b      	bne.n	8015462 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801544a:	4b89      	ldr	r3, [pc, #548]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015452:	2b00      	cmp	r3, #0
 8015454:	d06c      	beq.n	8015530 <HAL_RCC_OscConfig+0x12c>
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	685b      	ldr	r3, [r3, #4]
 801545a:	2b00      	cmp	r3, #0
 801545c:	d168      	bne.n	8015530 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 801545e:	2301      	movs	r3, #1
 8015460:	e24c      	b.n	80158fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	685b      	ldr	r3, [r3, #4]
 8015466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801546a:	d106      	bne.n	801547a <HAL_RCC_OscConfig+0x76>
 801546c:	4b80      	ldr	r3, [pc, #512]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	4a7f      	ldr	r2, [pc, #508]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 8015472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015476:	6013      	str	r3, [r2, #0]
 8015478:	e02e      	b.n	80154d8 <HAL_RCC_OscConfig+0xd4>
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	685b      	ldr	r3, [r3, #4]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d10c      	bne.n	801549c <HAL_RCC_OscConfig+0x98>
 8015482:	4b7b      	ldr	r3, [pc, #492]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	4a7a      	ldr	r2, [pc, #488]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 8015488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801548c:	6013      	str	r3, [r2, #0]
 801548e:	4b78      	ldr	r3, [pc, #480]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	4a77      	ldr	r2, [pc, #476]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 8015494:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8015498:	6013      	str	r3, [r2, #0]
 801549a:	e01d      	b.n	80154d8 <HAL_RCC_OscConfig+0xd4>
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	685b      	ldr	r3, [r3, #4]
 80154a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80154a4:	d10c      	bne.n	80154c0 <HAL_RCC_OscConfig+0xbc>
 80154a6:	4b72      	ldr	r3, [pc, #456]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	4a71      	ldr	r2, [pc, #452]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 80154ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80154b0:	6013      	str	r3, [r2, #0]
 80154b2:	4b6f      	ldr	r3, [pc, #444]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	4a6e      	ldr	r2, [pc, #440]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 80154b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80154bc:	6013      	str	r3, [r2, #0]
 80154be:	e00b      	b.n	80154d8 <HAL_RCC_OscConfig+0xd4>
 80154c0:	4b6b      	ldr	r3, [pc, #428]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	4a6a      	ldr	r2, [pc, #424]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 80154c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80154ca:	6013      	str	r3, [r2, #0]
 80154cc:	4b68      	ldr	r3, [pc, #416]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	4a67      	ldr	r2, [pc, #412]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 80154d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80154d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	685b      	ldr	r3, [r3, #4]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d013      	beq.n	8015508 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80154e0:	f7f9 f964 	bl	800e7ac <HAL_GetTick>
 80154e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80154e6:	e008      	b.n	80154fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80154e8:	f7f9 f960 	bl	800e7ac <HAL_GetTick>
 80154ec:	4602      	mov	r2, r0
 80154ee:	693b      	ldr	r3, [r7, #16]
 80154f0:	1ad3      	subs	r3, r2, r3
 80154f2:	2b64      	cmp	r3, #100	; 0x64
 80154f4:	d901      	bls.n	80154fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80154f6:	2303      	movs	r3, #3
 80154f8:	e200      	b.n	80158fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80154fa:	4b5d      	ldr	r3, [pc, #372]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015502:	2b00      	cmp	r3, #0
 8015504:	d0f0      	beq.n	80154e8 <HAL_RCC_OscConfig+0xe4>
 8015506:	e014      	b.n	8015532 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015508:	f7f9 f950 	bl	800e7ac <HAL_GetTick>
 801550c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801550e:	e008      	b.n	8015522 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8015510:	f7f9 f94c 	bl	800e7ac <HAL_GetTick>
 8015514:	4602      	mov	r2, r0
 8015516:	693b      	ldr	r3, [r7, #16]
 8015518:	1ad3      	subs	r3, r2, r3
 801551a:	2b64      	cmp	r3, #100	; 0x64
 801551c:	d901      	bls.n	8015522 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 801551e:	2303      	movs	r3, #3
 8015520:	e1ec      	b.n	80158fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8015522:	4b53      	ldr	r3, [pc, #332]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801552a:	2b00      	cmp	r3, #0
 801552c:	d1f0      	bne.n	8015510 <HAL_RCC_OscConfig+0x10c>
 801552e:	e000      	b.n	8015532 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	f003 0302 	and.w	r3, r3, #2
 801553a:	2b00      	cmp	r3, #0
 801553c:	d063      	beq.n	8015606 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 801553e:	4b4c      	ldr	r3, [pc, #304]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 8015540:	685b      	ldr	r3, [r3, #4]
 8015542:	f003 030c 	and.w	r3, r3, #12
 8015546:	2b00      	cmp	r3, #0
 8015548:	d00b      	beq.n	8015562 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 801554a:	4b49      	ldr	r3, [pc, #292]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 801554c:	685b      	ldr	r3, [r3, #4]
 801554e:	f003 030c 	and.w	r3, r3, #12
 8015552:	2b08      	cmp	r3, #8
 8015554:	d11c      	bne.n	8015590 <HAL_RCC_OscConfig+0x18c>
 8015556:	4b46      	ldr	r3, [pc, #280]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 8015558:	685b      	ldr	r3, [r3, #4]
 801555a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801555e:	2b00      	cmp	r3, #0
 8015560:	d116      	bne.n	8015590 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8015562:	4b43      	ldr	r3, [pc, #268]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	f003 0302 	and.w	r3, r3, #2
 801556a:	2b00      	cmp	r3, #0
 801556c:	d005      	beq.n	801557a <HAL_RCC_OscConfig+0x176>
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	691b      	ldr	r3, [r3, #16]
 8015572:	2b01      	cmp	r3, #1
 8015574:	d001      	beq.n	801557a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8015576:	2301      	movs	r3, #1
 8015578:	e1c0      	b.n	80158fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801557a:	4b3d      	ldr	r3, [pc, #244]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	695b      	ldr	r3, [r3, #20]
 8015586:	00db      	lsls	r3, r3, #3
 8015588:	4939      	ldr	r1, [pc, #228]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 801558a:	4313      	orrs	r3, r2
 801558c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801558e:	e03a      	b.n	8015606 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	691b      	ldr	r3, [r3, #16]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d020      	beq.n	80155da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8015598:	4b36      	ldr	r3, [pc, #216]	; (8015674 <HAL_RCC_OscConfig+0x270>)
 801559a:	2201      	movs	r2, #1
 801559c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801559e:	f7f9 f905 	bl	800e7ac <HAL_GetTick>
 80155a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80155a4:	e008      	b.n	80155b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80155a6:	f7f9 f901 	bl	800e7ac <HAL_GetTick>
 80155aa:	4602      	mov	r2, r0
 80155ac:	693b      	ldr	r3, [r7, #16]
 80155ae:	1ad3      	subs	r3, r2, r3
 80155b0:	2b02      	cmp	r3, #2
 80155b2:	d901      	bls.n	80155b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80155b4:	2303      	movs	r3, #3
 80155b6:	e1a1      	b.n	80158fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80155b8:	4b2d      	ldr	r3, [pc, #180]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	f003 0302 	and.w	r3, r3, #2
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d0f0      	beq.n	80155a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80155c4:	4b2a      	ldr	r3, [pc, #168]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	695b      	ldr	r3, [r3, #20]
 80155d0:	00db      	lsls	r3, r3, #3
 80155d2:	4927      	ldr	r1, [pc, #156]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 80155d4:	4313      	orrs	r3, r2
 80155d6:	600b      	str	r3, [r1, #0]
 80155d8:	e015      	b.n	8015606 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80155da:	4b26      	ldr	r3, [pc, #152]	; (8015674 <HAL_RCC_OscConfig+0x270>)
 80155dc:	2200      	movs	r2, #0
 80155de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80155e0:	f7f9 f8e4 	bl	800e7ac <HAL_GetTick>
 80155e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80155e6:	e008      	b.n	80155fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80155e8:	f7f9 f8e0 	bl	800e7ac <HAL_GetTick>
 80155ec:	4602      	mov	r2, r0
 80155ee:	693b      	ldr	r3, [r7, #16]
 80155f0:	1ad3      	subs	r3, r2, r3
 80155f2:	2b02      	cmp	r3, #2
 80155f4:	d901      	bls.n	80155fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80155f6:	2303      	movs	r3, #3
 80155f8:	e180      	b.n	80158fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80155fa:	4b1d      	ldr	r3, [pc, #116]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	f003 0302 	and.w	r3, r3, #2
 8015602:	2b00      	cmp	r3, #0
 8015604:	d1f0      	bne.n	80155e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	f003 0308 	and.w	r3, r3, #8
 801560e:	2b00      	cmp	r3, #0
 8015610:	d03a      	beq.n	8015688 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	699b      	ldr	r3, [r3, #24]
 8015616:	2b00      	cmp	r3, #0
 8015618:	d019      	beq.n	801564e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801561a:	4b17      	ldr	r3, [pc, #92]	; (8015678 <HAL_RCC_OscConfig+0x274>)
 801561c:	2201      	movs	r2, #1
 801561e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015620:	f7f9 f8c4 	bl	800e7ac <HAL_GetTick>
 8015624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8015626:	e008      	b.n	801563a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8015628:	f7f9 f8c0 	bl	800e7ac <HAL_GetTick>
 801562c:	4602      	mov	r2, r0
 801562e:	693b      	ldr	r3, [r7, #16]
 8015630:	1ad3      	subs	r3, r2, r3
 8015632:	2b02      	cmp	r3, #2
 8015634:	d901      	bls.n	801563a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8015636:	2303      	movs	r3, #3
 8015638:	e160      	b.n	80158fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801563a:	4b0d      	ldr	r3, [pc, #52]	; (8015670 <HAL_RCC_OscConfig+0x26c>)
 801563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801563e:	f003 0302 	and.w	r3, r3, #2
 8015642:	2b00      	cmp	r3, #0
 8015644:	d0f0      	beq.n	8015628 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8015646:	2001      	movs	r0, #1
 8015648:	f000 fad0 	bl	8015bec <RCC_Delay>
 801564c:	e01c      	b.n	8015688 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801564e:	4b0a      	ldr	r3, [pc, #40]	; (8015678 <HAL_RCC_OscConfig+0x274>)
 8015650:	2200      	movs	r2, #0
 8015652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015654:	f7f9 f8aa 	bl	800e7ac <HAL_GetTick>
 8015658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801565a:	e00f      	b.n	801567c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801565c:	f7f9 f8a6 	bl	800e7ac <HAL_GetTick>
 8015660:	4602      	mov	r2, r0
 8015662:	693b      	ldr	r3, [r7, #16]
 8015664:	1ad3      	subs	r3, r2, r3
 8015666:	2b02      	cmp	r3, #2
 8015668:	d908      	bls.n	801567c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 801566a:	2303      	movs	r3, #3
 801566c:	e146      	b.n	80158fc <HAL_RCC_OscConfig+0x4f8>
 801566e:	bf00      	nop
 8015670:	40021000 	.word	0x40021000
 8015674:	42420000 	.word	0x42420000
 8015678:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801567c:	4b92      	ldr	r3, [pc, #584]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 801567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015680:	f003 0302 	and.w	r3, r3, #2
 8015684:	2b00      	cmp	r3, #0
 8015686:	d1e9      	bne.n	801565c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	f003 0304 	and.w	r3, r3, #4
 8015690:	2b00      	cmp	r3, #0
 8015692:	f000 80a6 	beq.w	80157e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8015696:	2300      	movs	r3, #0
 8015698:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801569a:	4b8b      	ldr	r3, [pc, #556]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 801569c:	69db      	ldr	r3, [r3, #28]
 801569e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d10d      	bne.n	80156c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80156a6:	4b88      	ldr	r3, [pc, #544]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 80156a8:	69db      	ldr	r3, [r3, #28]
 80156aa:	4a87      	ldr	r2, [pc, #540]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 80156ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80156b0:	61d3      	str	r3, [r2, #28]
 80156b2:	4b85      	ldr	r3, [pc, #532]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 80156b4:	69db      	ldr	r3, [r3, #28]
 80156b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80156ba:	60bb      	str	r3, [r7, #8]
 80156bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80156be:	2301      	movs	r3, #1
 80156c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80156c2:	4b82      	ldr	r3, [pc, #520]	; (80158cc <HAL_RCC_OscConfig+0x4c8>)
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d118      	bne.n	8015700 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80156ce:	4b7f      	ldr	r3, [pc, #508]	; (80158cc <HAL_RCC_OscConfig+0x4c8>)
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	4a7e      	ldr	r2, [pc, #504]	; (80158cc <HAL_RCC_OscConfig+0x4c8>)
 80156d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80156d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80156da:	f7f9 f867 	bl	800e7ac <HAL_GetTick>
 80156de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80156e0:	e008      	b.n	80156f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80156e2:	f7f9 f863 	bl	800e7ac <HAL_GetTick>
 80156e6:	4602      	mov	r2, r0
 80156e8:	693b      	ldr	r3, [r7, #16]
 80156ea:	1ad3      	subs	r3, r2, r3
 80156ec:	2b64      	cmp	r3, #100	; 0x64
 80156ee:	d901      	bls.n	80156f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80156f0:	2303      	movs	r3, #3
 80156f2:	e103      	b.n	80158fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80156f4:	4b75      	ldr	r3, [pc, #468]	; (80158cc <HAL_RCC_OscConfig+0x4c8>)
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d0f0      	beq.n	80156e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	68db      	ldr	r3, [r3, #12]
 8015704:	2b01      	cmp	r3, #1
 8015706:	d106      	bne.n	8015716 <HAL_RCC_OscConfig+0x312>
 8015708:	4b6f      	ldr	r3, [pc, #444]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 801570a:	6a1b      	ldr	r3, [r3, #32]
 801570c:	4a6e      	ldr	r2, [pc, #440]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 801570e:	f043 0301 	orr.w	r3, r3, #1
 8015712:	6213      	str	r3, [r2, #32]
 8015714:	e02d      	b.n	8015772 <HAL_RCC_OscConfig+0x36e>
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	68db      	ldr	r3, [r3, #12]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d10c      	bne.n	8015738 <HAL_RCC_OscConfig+0x334>
 801571e:	4b6a      	ldr	r3, [pc, #424]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 8015720:	6a1b      	ldr	r3, [r3, #32]
 8015722:	4a69      	ldr	r2, [pc, #420]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 8015724:	f023 0301 	bic.w	r3, r3, #1
 8015728:	6213      	str	r3, [r2, #32]
 801572a:	4b67      	ldr	r3, [pc, #412]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 801572c:	6a1b      	ldr	r3, [r3, #32]
 801572e:	4a66      	ldr	r2, [pc, #408]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 8015730:	f023 0304 	bic.w	r3, r3, #4
 8015734:	6213      	str	r3, [r2, #32]
 8015736:	e01c      	b.n	8015772 <HAL_RCC_OscConfig+0x36e>
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	68db      	ldr	r3, [r3, #12]
 801573c:	2b05      	cmp	r3, #5
 801573e:	d10c      	bne.n	801575a <HAL_RCC_OscConfig+0x356>
 8015740:	4b61      	ldr	r3, [pc, #388]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 8015742:	6a1b      	ldr	r3, [r3, #32]
 8015744:	4a60      	ldr	r2, [pc, #384]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 8015746:	f043 0304 	orr.w	r3, r3, #4
 801574a:	6213      	str	r3, [r2, #32]
 801574c:	4b5e      	ldr	r3, [pc, #376]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 801574e:	6a1b      	ldr	r3, [r3, #32]
 8015750:	4a5d      	ldr	r2, [pc, #372]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 8015752:	f043 0301 	orr.w	r3, r3, #1
 8015756:	6213      	str	r3, [r2, #32]
 8015758:	e00b      	b.n	8015772 <HAL_RCC_OscConfig+0x36e>
 801575a:	4b5b      	ldr	r3, [pc, #364]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 801575c:	6a1b      	ldr	r3, [r3, #32]
 801575e:	4a5a      	ldr	r2, [pc, #360]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 8015760:	f023 0301 	bic.w	r3, r3, #1
 8015764:	6213      	str	r3, [r2, #32]
 8015766:	4b58      	ldr	r3, [pc, #352]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 8015768:	6a1b      	ldr	r3, [r3, #32]
 801576a:	4a57      	ldr	r2, [pc, #348]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 801576c:	f023 0304 	bic.w	r3, r3, #4
 8015770:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	68db      	ldr	r3, [r3, #12]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d015      	beq.n	80157a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801577a:	f7f9 f817 	bl	800e7ac <HAL_GetTick>
 801577e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015780:	e00a      	b.n	8015798 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015782:	f7f9 f813 	bl	800e7ac <HAL_GetTick>
 8015786:	4602      	mov	r2, r0
 8015788:	693b      	ldr	r3, [r7, #16]
 801578a:	1ad3      	subs	r3, r2, r3
 801578c:	f241 3288 	movw	r2, #5000	; 0x1388
 8015790:	4293      	cmp	r3, r2
 8015792:	d901      	bls.n	8015798 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8015794:	2303      	movs	r3, #3
 8015796:	e0b1      	b.n	80158fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015798:	4b4b      	ldr	r3, [pc, #300]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 801579a:	6a1b      	ldr	r3, [r3, #32]
 801579c:	f003 0302 	and.w	r3, r3, #2
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d0ee      	beq.n	8015782 <HAL_RCC_OscConfig+0x37e>
 80157a4:	e014      	b.n	80157d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80157a6:	f7f9 f801 	bl	800e7ac <HAL_GetTick>
 80157aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80157ac:	e00a      	b.n	80157c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80157ae:	f7f8 fffd 	bl	800e7ac <HAL_GetTick>
 80157b2:	4602      	mov	r2, r0
 80157b4:	693b      	ldr	r3, [r7, #16]
 80157b6:	1ad3      	subs	r3, r2, r3
 80157b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80157bc:	4293      	cmp	r3, r2
 80157be:	d901      	bls.n	80157c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80157c0:	2303      	movs	r3, #3
 80157c2:	e09b      	b.n	80158fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80157c4:	4b40      	ldr	r3, [pc, #256]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 80157c6:	6a1b      	ldr	r3, [r3, #32]
 80157c8:	f003 0302 	and.w	r3, r3, #2
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d1ee      	bne.n	80157ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80157d0:	7dfb      	ldrb	r3, [r7, #23]
 80157d2:	2b01      	cmp	r3, #1
 80157d4:	d105      	bne.n	80157e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80157d6:	4b3c      	ldr	r3, [pc, #240]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 80157d8:	69db      	ldr	r3, [r3, #28]
 80157da:	4a3b      	ldr	r2, [pc, #236]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 80157dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80157e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	69db      	ldr	r3, [r3, #28]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	f000 8087 	beq.w	80158fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80157ec:	4b36      	ldr	r3, [pc, #216]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 80157ee:	685b      	ldr	r3, [r3, #4]
 80157f0:	f003 030c 	and.w	r3, r3, #12
 80157f4:	2b08      	cmp	r3, #8
 80157f6:	d061      	beq.n	80158bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	69db      	ldr	r3, [r3, #28]
 80157fc:	2b02      	cmp	r3, #2
 80157fe:	d146      	bne.n	801588e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015800:	4b33      	ldr	r3, [pc, #204]	; (80158d0 <HAL_RCC_OscConfig+0x4cc>)
 8015802:	2200      	movs	r2, #0
 8015804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015806:	f7f8 ffd1 	bl	800e7ac <HAL_GetTick>
 801580a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801580c:	e008      	b.n	8015820 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801580e:	f7f8 ffcd 	bl	800e7ac <HAL_GetTick>
 8015812:	4602      	mov	r2, r0
 8015814:	693b      	ldr	r3, [r7, #16]
 8015816:	1ad3      	subs	r3, r2, r3
 8015818:	2b02      	cmp	r3, #2
 801581a:	d901      	bls.n	8015820 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 801581c:	2303      	movs	r3, #3
 801581e:	e06d      	b.n	80158fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8015820:	4b29      	ldr	r3, [pc, #164]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015828:	2b00      	cmp	r3, #0
 801582a:	d1f0      	bne.n	801580e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	6a1b      	ldr	r3, [r3, #32]
 8015830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015834:	d108      	bne.n	8015848 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8015836:	4b24      	ldr	r3, [pc, #144]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 8015838:	685b      	ldr	r3, [r3, #4]
 801583a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	689b      	ldr	r3, [r3, #8]
 8015842:	4921      	ldr	r1, [pc, #132]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 8015844:	4313      	orrs	r3, r2
 8015846:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8015848:	4b1f      	ldr	r3, [pc, #124]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 801584a:	685b      	ldr	r3, [r3, #4]
 801584c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	6a19      	ldr	r1, [r3, #32]
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015858:	430b      	orrs	r3, r1
 801585a:	491b      	ldr	r1, [pc, #108]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 801585c:	4313      	orrs	r3, r2
 801585e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8015860:	4b1b      	ldr	r3, [pc, #108]	; (80158d0 <HAL_RCC_OscConfig+0x4cc>)
 8015862:	2201      	movs	r2, #1
 8015864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015866:	f7f8 ffa1 	bl	800e7ac <HAL_GetTick>
 801586a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 801586c:	e008      	b.n	8015880 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801586e:	f7f8 ff9d 	bl	800e7ac <HAL_GetTick>
 8015872:	4602      	mov	r2, r0
 8015874:	693b      	ldr	r3, [r7, #16]
 8015876:	1ad3      	subs	r3, r2, r3
 8015878:	2b02      	cmp	r3, #2
 801587a:	d901      	bls.n	8015880 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 801587c:	2303      	movs	r3, #3
 801587e:	e03d      	b.n	80158fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8015880:	4b11      	ldr	r3, [pc, #68]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015888:	2b00      	cmp	r3, #0
 801588a:	d0f0      	beq.n	801586e <HAL_RCC_OscConfig+0x46a>
 801588c:	e035      	b.n	80158fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801588e:	4b10      	ldr	r3, [pc, #64]	; (80158d0 <HAL_RCC_OscConfig+0x4cc>)
 8015890:	2200      	movs	r2, #0
 8015892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015894:	f7f8 ff8a 	bl	800e7ac <HAL_GetTick>
 8015898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 801589a:	e008      	b.n	80158ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801589c:	f7f8 ff86 	bl	800e7ac <HAL_GetTick>
 80158a0:	4602      	mov	r2, r0
 80158a2:	693b      	ldr	r3, [r7, #16]
 80158a4:	1ad3      	subs	r3, r2, r3
 80158a6:	2b02      	cmp	r3, #2
 80158a8:	d901      	bls.n	80158ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80158aa:	2303      	movs	r3, #3
 80158ac:	e026      	b.n	80158fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80158ae:	4b06      	ldr	r3, [pc, #24]	; (80158c8 <HAL_RCC_OscConfig+0x4c4>)
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d1f0      	bne.n	801589c <HAL_RCC_OscConfig+0x498>
 80158ba:	e01e      	b.n	80158fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	69db      	ldr	r3, [r3, #28]
 80158c0:	2b01      	cmp	r3, #1
 80158c2:	d107      	bne.n	80158d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80158c4:	2301      	movs	r3, #1
 80158c6:	e019      	b.n	80158fc <HAL_RCC_OscConfig+0x4f8>
 80158c8:	40021000 	.word	0x40021000
 80158cc:	40007000 	.word	0x40007000
 80158d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80158d4:	4b0b      	ldr	r3, [pc, #44]	; (8015904 <HAL_RCC_OscConfig+0x500>)
 80158d6:	685b      	ldr	r3, [r3, #4]
 80158d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	6a1b      	ldr	r3, [r3, #32]
 80158e4:	429a      	cmp	r2, r3
 80158e6:	d106      	bne.n	80158f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80158f2:	429a      	cmp	r2, r3
 80158f4:	d001      	beq.n	80158fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80158f6:	2301      	movs	r3, #1
 80158f8:	e000      	b.n	80158fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80158fa:	2300      	movs	r3, #0
}
 80158fc:	4618      	mov	r0, r3
 80158fe:	3718      	adds	r7, #24
 8015900:	46bd      	mov	sp, r7
 8015902:	bd80      	pop	{r7, pc}
 8015904:	40021000 	.word	0x40021000

08015908 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b084      	sub	sp, #16
 801590c:	af00      	add	r7, sp, #0
 801590e:	6078      	str	r0, [r7, #4]
 8015910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d101      	bne.n	801591c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8015918:	2301      	movs	r3, #1
 801591a:	e0d0      	b.n	8015abe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801591c:	4b6a      	ldr	r3, [pc, #424]	; (8015ac8 <HAL_RCC_ClockConfig+0x1c0>)
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	f003 0307 	and.w	r3, r3, #7
 8015924:	683a      	ldr	r2, [r7, #0]
 8015926:	429a      	cmp	r2, r3
 8015928:	d910      	bls.n	801594c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801592a:	4b67      	ldr	r3, [pc, #412]	; (8015ac8 <HAL_RCC_ClockConfig+0x1c0>)
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	f023 0207 	bic.w	r2, r3, #7
 8015932:	4965      	ldr	r1, [pc, #404]	; (8015ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8015934:	683b      	ldr	r3, [r7, #0]
 8015936:	4313      	orrs	r3, r2
 8015938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801593a:	4b63      	ldr	r3, [pc, #396]	; (8015ac8 <HAL_RCC_ClockConfig+0x1c0>)
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	f003 0307 	and.w	r3, r3, #7
 8015942:	683a      	ldr	r2, [r7, #0]
 8015944:	429a      	cmp	r2, r3
 8015946:	d001      	beq.n	801594c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8015948:	2301      	movs	r3, #1
 801594a:	e0b8      	b.n	8015abe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	f003 0302 	and.w	r3, r3, #2
 8015954:	2b00      	cmp	r3, #0
 8015956:	d020      	beq.n	801599a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	f003 0304 	and.w	r3, r3, #4
 8015960:	2b00      	cmp	r3, #0
 8015962:	d005      	beq.n	8015970 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8015964:	4b59      	ldr	r3, [pc, #356]	; (8015acc <HAL_RCC_ClockConfig+0x1c4>)
 8015966:	685b      	ldr	r3, [r3, #4]
 8015968:	4a58      	ldr	r2, [pc, #352]	; (8015acc <HAL_RCC_ClockConfig+0x1c4>)
 801596a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801596e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	f003 0308 	and.w	r3, r3, #8
 8015978:	2b00      	cmp	r3, #0
 801597a:	d005      	beq.n	8015988 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801597c:	4b53      	ldr	r3, [pc, #332]	; (8015acc <HAL_RCC_ClockConfig+0x1c4>)
 801597e:	685b      	ldr	r3, [r3, #4]
 8015980:	4a52      	ldr	r2, [pc, #328]	; (8015acc <HAL_RCC_ClockConfig+0x1c4>)
 8015982:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8015986:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015988:	4b50      	ldr	r3, [pc, #320]	; (8015acc <HAL_RCC_ClockConfig+0x1c4>)
 801598a:	685b      	ldr	r3, [r3, #4]
 801598c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	689b      	ldr	r3, [r3, #8]
 8015994:	494d      	ldr	r1, [pc, #308]	; (8015acc <HAL_RCC_ClockConfig+0x1c4>)
 8015996:	4313      	orrs	r3, r2
 8015998:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	f003 0301 	and.w	r3, r3, #1
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d040      	beq.n	8015a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	685b      	ldr	r3, [r3, #4]
 80159aa:	2b01      	cmp	r3, #1
 80159ac:	d107      	bne.n	80159be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80159ae:	4b47      	ldr	r3, [pc, #284]	; (8015acc <HAL_RCC_ClockConfig+0x1c4>)
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d115      	bne.n	80159e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80159ba:	2301      	movs	r3, #1
 80159bc:	e07f      	b.n	8015abe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	685b      	ldr	r3, [r3, #4]
 80159c2:	2b02      	cmp	r3, #2
 80159c4:	d107      	bne.n	80159d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80159c6:	4b41      	ldr	r3, [pc, #260]	; (8015acc <HAL_RCC_ClockConfig+0x1c4>)
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d109      	bne.n	80159e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80159d2:	2301      	movs	r3, #1
 80159d4:	e073      	b.n	8015abe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80159d6:	4b3d      	ldr	r3, [pc, #244]	; (8015acc <HAL_RCC_ClockConfig+0x1c4>)
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	f003 0302 	and.w	r3, r3, #2
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d101      	bne.n	80159e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80159e2:	2301      	movs	r3, #1
 80159e4:	e06b      	b.n	8015abe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80159e6:	4b39      	ldr	r3, [pc, #228]	; (8015acc <HAL_RCC_ClockConfig+0x1c4>)
 80159e8:	685b      	ldr	r3, [r3, #4]
 80159ea:	f023 0203 	bic.w	r2, r3, #3
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	685b      	ldr	r3, [r3, #4]
 80159f2:	4936      	ldr	r1, [pc, #216]	; (8015acc <HAL_RCC_ClockConfig+0x1c4>)
 80159f4:	4313      	orrs	r3, r2
 80159f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80159f8:	f7f8 fed8 	bl	800e7ac <HAL_GetTick>
 80159fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80159fe:	e00a      	b.n	8015a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8015a00:	f7f8 fed4 	bl	800e7ac <HAL_GetTick>
 8015a04:	4602      	mov	r2, r0
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	1ad3      	subs	r3, r2, r3
 8015a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8015a0e:	4293      	cmp	r3, r2
 8015a10:	d901      	bls.n	8015a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8015a12:	2303      	movs	r3, #3
 8015a14:	e053      	b.n	8015abe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015a16:	4b2d      	ldr	r3, [pc, #180]	; (8015acc <HAL_RCC_ClockConfig+0x1c4>)
 8015a18:	685b      	ldr	r3, [r3, #4]
 8015a1a:	f003 020c 	and.w	r2, r3, #12
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	685b      	ldr	r3, [r3, #4]
 8015a22:	009b      	lsls	r3, r3, #2
 8015a24:	429a      	cmp	r2, r3
 8015a26:	d1eb      	bne.n	8015a00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8015a28:	4b27      	ldr	r3, [pc, #156]	; (8015ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	f003 0307 	and.w	r3, r3, #7
 8015a30:	683a      	ldr	r2, [r7, #0]
 8015a32:	429a      	cmp	r2, r3
 8015a34:	d210      	bcs.n	8015a58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8015a36:	4b24      	ldr	r3, [pc, #144]	; (8015ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	f023 0207 	bic.w	r2, r3, #7
 8015a3e:	4922      	ldr	r1, [pc, #136]	; (8015ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8015a40:	683b      	ldr	r3, [r7, #0]
 8015a42:	4313      	orrs	r3, r2
 8015a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8015a46:	4b20      	ldr	r3, [pc, #128]	; (8015ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	f003 0307 	and.w	r3, r3, #7
 8015a4e:	683a      	ldr	r2, [r7, #0]
 8015a50:	429a      	cmp	r2, r3
 8015a52:	d001      	beq.n	8015a58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8015a54:	2301      	movs	r3, #1
 8015a56:	e032      	b.n	8015abe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	f003 0304 	and.w	r3, r3, #4
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d008      	beq.n	8015a76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8015a64:	4b19      	ldr	r3, [pc, #100]	; (8015acc <HAL_RCC_ClockConfig+0x1c4>)
 8015a66:	685b      	ldr	r3, [r3, #4]
 8015a68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	68db      	ldr	r3, [r3, #12]
 8015a70:	4916      	ldr	r1, [pc, #88]	; (8015acc <HAL_RCC_ClockConfig+0x1c4>)
 8015a72:	4313      	orrs	r3, r2
 8015a74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	f003 0308 	and.w	r3, r3, #8
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d009      	beq.n	8015a96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8015a82:	4b12      	ldr	r3, [pc, #72]	; (8015acc <HAL_RCC_ClockConfig+0x1c4>)
 8015a84:	685b      	ldr	r3, [r3, #4]
 8015a86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	691b      	ldr	r3, [r3, #16]
 8015a8e:	00db      	lsls	r3, r3, #3
 8015a90:	490e      	ldr	r1, [pc, #56]	; (8015acc <HAL_RCC_ClockConfig+0x1c4>)
 8015a92:	4313      	orrs	r3, r2
 8015a94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8015a96:	f000 f821 	bl	8015adc <HAL_RCC_GetSysClockFreq>
 8015a9a:	4602      	mov	r2, r0
 8015a9c:	4b0b      	ldr	r3, [pc, #44]	; (8015acc <HAL_RCC_ClockConfig+0x1c4>)
 8015a9e:	685b      	ldr	r3, [r3, #4]
 8015aa0:	091b      	lsrs	r3, r3, #4
 8015aa2:	f003 030f 	and.w	r3, r3, #15
 8015aa6:	490a      	ldr	r1, [pc, #40]	; (8015ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8015aa8:	5ccb      	ldrb	r3, [r1, r3]
 8015aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8015aae:	4a09      	ldr	r2, [pc, #36]	; (8015ad4 <HAL_RCC_ClockConfig+0x1cc>)
 8015ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8015ab2:	4b09      	ldr	r3, [pc, #36]	; (8015ad8 <HAL_RCC_ClockConfig+0x1d0>)
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	f7f8 fe36 	bl	800e728 <HAL_InitTick>

  return HAL_OK;
 8015abc:	2300      	movs	r3, #0
}
 8015abe:	4618      	mov	r0, r3
 8015ac0:	3710      	adds	r7, #16
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bd80      	pop	{r7, pc}
 8015ac6:	bf00      	nop
 8015ac8:	40022000 	.word	0x40022000
 8015acc:	40021000 	.word	0x40021000
 8015ad0:	0801ebd8 	.word	0x0801ebd8
 8015ad4:	20000698 	.word	0x20000698
 8015ad8:	2000069c 	.word	0x2000069c

08015adc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8015adc:	b480      	push	{r7}
 8015ade:	b087      	sub	sp, #28
 8015ae0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	60fb      	str	r3, [r7, #12]
 8015ae6:	2300      	movs	r3, #0
 8015ae8:	60bb      	str	r3, [r7, #8]
 8015aea:	2300      	movs	r3, #0
 8015aec:	617b      	str	r3, [r7, #20]
 8015aee:	2300      	movs	r3, #0
 8015af0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8015af2:	2300      	movs	r3, #0
 8015af4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8015af6:	4b1e      	ldr	r3, [pc, #120]	; (8015b70 <HAL_RCC_GetSysClockFreq+0x94>)
 8015af8:	685b      	ldr	r3, [r3, #4]
 8015afa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	f003 030c 	and.w	r3, r3, #12
 8015b02:	2b04      	cmp	r3, #4
 8015b04:	d002      	beq.n	8015b0c <HAL_RCC_GetSysClockFreq+0x30>
 8015b06:	2b08      	cmp	r3, #8
 8015b08:	d003      	beq.n	8015b12 <HAL_RCC_GetSysClockFreq+0x36>
 8015b0a:	e027      	b.n	8015b5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8015b0c:	4b19      	ldr	r3, [pc, #100]	; (8015b74 <HAL_RCC_GetSysClockFreq+0x98>)
 8015b0e:	613b      	str	r3, [r7, #16]
      break;
 8015b10:	e027      	b.n	8015b62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	0c9b      	lsrs	r3, r3, #18
 8015b16:	f003 030f 	and.w	r3, r3, #15
 8015b1a:	4a17      	ldr	r2, [pc, #92]	; (8015b78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8015b1c:	5cd3      	ldrb	r3, [r2, r3]
 8015b1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d010      	beq.n	8015b4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8015b2a:	4b11      	ldr	r3, [pc, #68]	; (8015b70 <HAL_RCC_GetSysClockFreq+0x94>)
 8015b2c:	685b      	ldr	r3, [r3, #4]
 8015b2e:	0c5b      	lsrs	r3, r3, #17
 8015b30:	f003 0301 	and.w	r3, r3, #1
 8015b34:	4a11      	ldr	r2, [pc, #68]	; (8015b7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8015b36:	5cd3      	ldrb	r3, [r2, r3]
 8015b38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	4a0d      	ldr	r2, [pc, #52]	; (8015b74 <HAL_RCC_GetSysClockFreq+0x98>)
 8015b3e:	fb03 f202 	mul.w	r2, r3, r2
 8015b42:	68bb      	ldr	r3, [r7, #8]
 8015b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8015b48:	617b      	str	r3, [r7, #20]
 8015b4a:	e004      	b.n	8015b56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	4a0c      	ldr	r2, [pc, #48]	; (8015b80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8015b50:	fb02 f303 	mul.w	r3, r2, r3
 8015b54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8015b56:	697b      	ldr	r3, [r7, #20]
 8015b58:	613b      	str	r3, [r7, #16]
      break;
 8015b5a:	e002      	b.n	8015b62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8015b5c:	4b09      	ldr	r3, [pc, #36]	; (8015b84 <HAL_RCC_GetSysClockFreq+0xa8>)
 8015b5e:	613b      	str	r3, [r7, #16]
      break;
 8015b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8015b62:	693b      	ldr	r3, [r7, #16]
}
 8015b64:	4618      	mov	r0, r3
 8015b66:	371c      	adds	r7, #28
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	bc80      	pop	{r7}
 8015b6c:	4770      	bx	lr
 8015b6e:	bf00      	nop
 8015b70:	40021000 	.word	0x40021000
 8015b74:	00b71b00 	.word	0x00b71b00
 8015b78:	0801ebf0 	.word	0x0801ebf0
 8015b7c:	0801ec00 	.word	0x0801ec00
 8015b80:	003d0900 	.word	0x003d0900
 8015b84:	007a1200 	.word	0x007a1200

08015b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015b88:	b480      	push	{r7}
 8015b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8015b8c:	4b02      	ldr	r3, [pc, #8]	; (8015b98 <HAL_RCC_GetHCLKFreq+0x10>)
 8015b8e:	681b      	ldr	r3, [r3, #0]
}
 8015b90:	4618      	mov	r0, r3
 8015b92:	46bd      	mov	sp, r7
 8015b94:	bc80      	pop	{r7}
 8015b96:	4770      	bx	lr
 8015b98:	20000698 	.word	0x20000698

08015b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015b9c:	b580      	push	{r7, lr}
 8015b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8015ba0:	f7ff fff2 	bl	8015b88 <HAL_RCC_GetHCLKFreq>
 8015ba4:	4602      	mov	r2, r0
 8015ba6:	4b05      	ldr	r3, [pc, #20]	; (8015bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8015ba8:	685b      	ldr	r3, [r3, #4]
 8015baa:	0a1b      	lsrs	r3, r3, #8
 8015bac:	f003 0307 	and.w	r3, r3, #7
 8015bb0:	4903      	ldr	r1, [pc, #12]	; (8015bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8015bb2:	5ccb      	ldrb	r3, [r1, r3]
 8015bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8015bb8:	4618      	mov	r0, r3
 8015bba:	bd80      	pop	{r7, pc}
 8015bbc:	40021000 	.word	0x40021000
 8015bc0:	0801ebe8 	.word	0x0801ebe8

08015bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015bc4:	b580      	push	{r7, lr}
 8015bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8015bc8:	f7ff ffde 	bl	8015b88 <HAL_RCC_GetHCLKFreq>
 8015bcc:	4602      	mov	r2, r0
 8015bce:	4b05      	ldr	r3, [pc, #20]	; (8015be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8015bd0:	685b      	ldr	r3, [r3, #4]
 8015bd2:	0adb      	lsrs	r3, r3, #11
 8015bd4:	f003 0307 	and.w	r3, r3, #7
 8015bd8:	4903      	ldr	r1, [pc, #12]	; (8015be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8015bda:	5ccb      	ldrb	r3, [r1, r3]
 8015bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8015be0:	4618      	mov	r0, r3
 8015be2:	bd80      	pop	{r7, pc}
 8015be4:	40021000 	.word	0x40021000
 8015be8:	0801ebe8 	.word	0x0801ebe8

08015bec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8015bec:	b480      	push	{r7}
 8015bee:	b085      	sub	sp, #20
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8015bf4:	4b0a      	ldr	r3, [pc, #40]	; (8015c20 <RCC_Delay+0x34>)
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	4a0a      	ldr	r2, [pc, #40]	; (8015c24 <RCC_Delay+0x38>)
 8015bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8015bfe:	0a5b      	lsrs	r3, r3, #9
 8015c00:	687a      	ldr	r2, [r7, #4]
 8015c02:	fb02 f303 	mul.w	r3, r2, r3
 8015c06:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8015c08:	bf00      	nop
  }
  while (Delay --);
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	1e5a      	subs	r2, r3, #1
 8015c0e:	60fa      	str	r2, [r7, #12]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d1f9      	bne.n	8015c08 <RCC_Delay+0x1c>
}
 8015c14:	bf00      	nop
 8015c16:	bf00      	nop
 8015c18:	3714      	adds	r7, #20
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	bc80      	pop	{r7}
 8015c1e:	4770      	bx	lr
 8015c20:	20000698 	.word	0x20000698
 8015c24:	10624dd3 	.word	0x10624dd3

08015c28 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b086      	sub	sp, #24
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8015c30:	2300      	movs	r3, #0
 8015c32:	613b      	str	r3, [r7, #16]
 8015c34:	2300      	movs	r3, #0
 8015c36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	f003 0301 	and.w	r3, r3, #1
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d07d      	beq.n	8015d40 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8015c44:	2300      	movs	r3, #0
 8015c46:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015c48:	4b4f      	ldr	r3, [pc, #316]	; (8015d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8015c4a:	69db      	ldr	r3, [r3, #28]
 8015c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d10d      	bne.n	8015c70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015c54:	4b4c      	ldr	r3, [pc, #304]	; (8015d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8015c56:	69db      	ldr	r3, [r3, #28]
 8015c58:	4a4b      	ldr	r2, [pc, #300]	; (8015d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8015c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015c5e:	61d3      	str	r3, [r2, #28]
 8015c60:	4b49      	ldr	r3, [pc, #292]	; (8015d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8015c62:	69db      	ldr	r3, [r3, #28]
 8015c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015c68:	60bb      	str	r3, [r7, #8]
 8015c6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8015c6c:	2301      	movs	r3, #1
 8015c6e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015c70:	4b46      	ldr	r3, [pc, #280]	; (8015d8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d118      	bne.n	8015cae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015c7c:	4b43      	ldr	r3, [pc, #268]	; (8015d8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	4a42      	ldr	r2, [pc, #264]	; (8015d8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8015c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015c86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015c88:	f7f8 fd90 	bl	800e7ac <HAL_GetTick>
 8015c8c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015c8e:	e008      	b.n	8015ca2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015c90:	f7f8 fd8c 	bl	800e7ac <HAL_GetTick>
 8015c94:	4602      	mov	r2, r0
 8015c96:	693b      	ldr	r3, [r7, #16]
 8015c98:	1ad3      	subs	r3, r2, r3
 8015c9a:	2b64      	cmp	r3, #100	; 0x64
 8015c9c:	d901      	bls.n	8015ca2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8015c9e:	2303      	movs	r3, #3
 8015ca0:	e06d      	b.n	8015d7e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015ca2:	4b3a      	ldr	r3, [pc, #232]	; (8015d8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d0f0      	beq.n	8015c90 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8015cae:	4b36      	ldr	r3, [pc, #216]	; (8015d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8015cb0:	6a1b      	ldr	r3, [r3, #32]
 8015cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015cb6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d02e      	beq.n	8015d1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	685b      	ldr	r3, [r3, #4]
 8015cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015cc6:	68fa      	ldr	r2, [r7, #12]
 8015cc8:	429a      	cmp	r2, r3
 8015cca:	d027      	beq.n	8015d1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8015ccc:	4b2e      	ldr	r3, [pc, #184]	; (8015d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8015cce:	6a1b      	ldr	r3, [r3, #32]
 8015cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015cd4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8015cd6:	4b2e      	ldr	r3, [pc, #184]	; (8015d90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8015cd8:	2201      	movs	r2, #1
 8015cda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8015cdc:	4b2c      	ldr	r3, [pc, #176]	; (8015d90 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8015cde:	2200      	movs	r2, #0
 8015ce0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8015ce2:	4a29      	ldr	r2, [pc, #164]	; (8015d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	f003 0301 	and.w	r3, r3, #1
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d014      	beq.n	8015d1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015cf2:	f7f8 fd5b 	bl	800e7ac <HAL_GetTick>
 8015cf6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015cf8:	e00a      	b.n	8015d10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015cfa:	f7f8 fd57 	bl	800e7ac <HAL_GetTick>
 8015cfe:	4602      	mov	r2, r0
 8015d00:	693b      	ldr	r3, [r7, #16]
 8015d02:	1ad3      	subs	r3, r2, r3
 8015d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8015d08:	4293      	cmp	r3, r2
 8015d0a:	d901      	bls.n	8015d10 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8015d0c:	2303      	movs	r3, #3
 8015d0e:	e036      	b.n	8015d7e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015d10:	4b1d      	ldr	r3, [pc, #116]	; (8015d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8015d12:	6a1b      	ldr	r3, [r3, #32]
 8015d14:	f003 0302 	and.w	r3, r3, #2
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d0ee      	beq.n	8015cfa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015d1c:	4b1a      	ldr	r3, [pc, #104]	; (8015d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8015d1e:	6a1b      	ldr	r3, [r3, #32]
 8015d20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	685b      	ldr	r3, [r3, #4]
 8015d28:	4917      	ldr	r1, [pc, #92]	; (8015d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8015d2a:	4313      	orrs	r3, r2
 8015d2c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8015d2e:	7dfb      	ldrb	r3, [r7, #23]
 8015d30:	2b01      	cmp	r3, #1
 8015d32:	d105      	bne.n	8015d40 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015d34:	4b14      	ldr	r3, [pc, #80]	; (8015d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8015d36:	69db      	ldr	r3, [r3, #28]
 8015d38:	4a13      	ldr	r2, [pc, #76]	; (8015d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8015d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015d3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	f003 0302 	and.w	r3, r3, #2
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d008      	beq.n	8015d5e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8015d4c:	4b0e      	ldr	r3, [pc, #56]	; (8015d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8015d4e:	685b      	ldr	r3, [r3, #4]
 8015d50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	689b      	ldr	r3, [r3, #8]
 8015d58:	490b      	ldr	r1, [pc, #44]	; (8015d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8015d5a:	4313      	orrs	r3, r2
 8015d5c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	f003 0310 	and.w	r3, r3, #16
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d008      	beq.n	8015d7c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8015d6a:	4b07      	ldr	r3, [pc, #28]	; (8015d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8015d6c:	685b      	ldr	r3, [r3, #4]
 8015d6e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	695b      	ldr	r3, [r3, #20]
 8015d76:	4904      	ldr	r1, [pc, #16]	; (8015d88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8015d78:	4313      	orrs	r3, r2
 8015d7a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8015d7c:	2300      	movs	r3, #0
}
 8015d7e:	4618      	mov	r0, r3
 8015d80:	3718      	adds	r7, #24
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bd80      	pop	{r7, pc}
 8015d86:	bf00      	nop
 8015d88:	40021000 	.word	0x40021000
 8015d8c:	40007000 	.word	0x40007000
 8015d90:	42420440 	.word	0x42420440

08015d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b082      	sub	sp, #8
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d101      	bne.n	8015da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015da2:	2301      	movs	r3, #1
 8015da4:	e041      	b.n	8015e2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015dac:	b2db      	uxtb	r3, r3
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d106      	bne.n	8015dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	2200      	movs	r2, #0
 8015db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8015dba:	6878      	ldr	r0, [r7, #4]
 8015dbc:	f7f8 fa02 	bl	800e1c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	2202      	movs	r2, #2
 8015dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	681a      	ldr	r2, [r3, #0]
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	3304      	adds	r3, #4
 8015dd0:	4619      	mov	r1, r3
 8015dd2:	4610      	mov	r0, r2
 8015dd4:	f000 faca 	bl	801636c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	2201      	movs	r2, #1
 8015ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	2201      	movs	r2, #1
 8015de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	2201      	movs	r2, #1
 8015dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	2201      	movs	r2, #1
 8015df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	2201      	movs	r2, #1
 8015dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	2201      	movs	r2, #1
 8015e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	2201      	movs	r2, #1
 8015e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	2201      	movs	r2, #1
 8015e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	2201      	movs	r2, #1
 8015e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	2201      	movs	r2, #1
 8015e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015e28:	2300      	movs	r3, #0
}
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	3708      	adds	r7, #8
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	bd80      	pop	{r7, pc}

08015e32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8015e32:	b580      	push	{r7, lr}
 8015e34:	b082      	sub	sp, #8
 8015e36:	af00      	add	r7, sp, #0
 8015e38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d101      	bne.n	8015e44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8015e40:	2301      	movs	r3, #1
 8015e42:	e041      	b.n	8015ec8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015e4a:	b2db      	uxtb	r3, r3
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d106      	bne.n	8015e5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	2200      	movs	r2, #0
 8015e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8015e58:	6878      	ldr	r0, [r7, #4]
 8015e5a:	f000 f839 	bl	8015ed0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	2202      	movs	r2, #2
 8015e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	681a      	ldr	r2, [r3, #0]
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	3304      	adds	r3, #4
 8015e6e:	4619      	mov	r1, r3
 8015e70:	4610      	mov	r0, r2
 8015e72:	f000 fa7b 	bl	801636c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	2201      	movs	r2, #1
 8015e7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	2201      	movs	r2, #1
 8015e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	2201      	movs	r2, #1
 8015e8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	2201      	movs	r2, #1
 8015e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	2201      	movs	r2, #1
 8015e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	2201      	movs	r2, #1
 8015ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	2201      	movs	r2, #1
 8015eaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	2201      	movs	r2, #1
 8015eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	2201      	movs	r2, #1
 8015eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	2201      	movs	r2, #1
 8015ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015ec6:	2300      	movs	r3, #0
}
 8015ec8:	4618      	mov	r0, r3
 8015eca:	3708      	adds	r7, #8
 8015ecc:	46bd      	mov	sp, r7
 8015ece:	bd80      	pop	{r7, pc}

08015ed0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8015ed0:	b480      	push	{r7}
 8015ed2:	b083      	sub	sp, #12
 8015ed4:	af00      	add	r7, sp, #0
 8015ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8015ed8:	bf00      	nop
 8015eda:	370c      	adds	r7, #12
 8015edc:	46bd      	mov	sp, r7
 8015ede:	bc80      	pop	{r7}
 8015ee0:	4770      	bx	lr
	...

08015ee4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b084      	sub	sp, #16
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	6078      	str	r0, [r7, #4]
 8015eec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8015eee:	683b      	ldr	r3, [r7, #0]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d109      	bne.n	8015f08 <HAL_TIM_PWM_Start+0x24>
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015efa:	b2db      	uxtb	r3, r3
 8015efc:	2b01      	cmp	r3, #1
 8015efe:	bf14      	ite	ne
 8015f00:	2301      	movne	r3, #1
 8015f02:	2300      	moveq	r3, #0
 8015f04:	b2db      	uxtb	r3, r3
 8015f06:	e022      	b.n	8015f4e <HAL_TIM_PWM_Start+0x6a>
 8015f08:	683b      	ldr	r3, [r7, #0]
 8015f0a:	2b04      	cmp	r3, #4
 8015f0c:	d109      	bne.n	8015f22 <HAL_TIM_PWM_Start+0x3e>
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8015f14:	b2db      	uxtb	r3, r3
 8015f16:	2b01      	cmp	r3, #1
 8015f18:	bf14      	ite	ne
 8015f1a:	2301      	movne	r3, #1
 8015f1c:	2300      	moveq	r3, #0
 8015f1e:	b2db      	uxtb	r3, r3
 8015f20:	e015      	b.n	8015f4e <HAL_TIM_PWM_Start+0x6a>
 8015f22:	683b      	ldr	r3, [r7, #0]
 8015f24:	2b08      	cmp	r3, #8
 8015f26:	d109      	bne.n	8015f3c <HAL_TIM_PWM_Start+0x58>
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015f2e:	b2db      	uxtb	r3, r3
 8015f30:	2b01      	cmp	r3, #1
 8015f32:	bf14      	ite	ne
 8015f34:	2301      	movne	r3, #1
 8015f36:	2300      	moveq	r3, #0
 8015f38:	b2db      	uxtb	r3, r3
 8015f3a:	e008      	b.n	8015f4e <HAL_TIM_PWM_Start+0x6a>
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015f42:	b2db      	uxtb	r3, r3
 8015f44:	2b01      	cmp	r3, #1
 8015f46:	bf14      	ite	ne
 8015f48:	2301      	movne	r3, #1
 8015f4a:	2300      	moveq	r3, #0
 8015f4c:	b2db      	uxtb	r3, r3
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d001      	beq.n	8015f56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8015f52:	2301      	movs	r3, #1
 8015f54:	e072      	b.n	801603c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8015f56:	683b      	ldr	r3, [r7, #0]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d104      	bne.n	8015f66 <HAL_TIM_PWM_Start+0x82>
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	2202      	movs	r2, #2
 8015f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8015f64:	e013      	b.n	8015f8e <HAL_TIM_PWM_Start+0xaa>
 8015f66:	683b      	ldr	r3, [r7, #0]
 8015f68:	2b04      	cmp	r3, #4
 8015f6a:	d104      	bne.n	8015f76 <HAL_TIM_PWM_Start+0x92>
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	2202      	movs	r2, #2
 8015f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8015f74:	e00b      	b.n	8015f8e <HAL_TIM_PWM_Start+0xaa>
 8015f76:	683b      	ldr	r3, [r7, #0]
 8015f78:	2b08      	cmp	r3, #8
 8015f7a:	d104      	bne.n	8015f86 <HAL_TIM_PWM_Start+0xa2>
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	2202      	movs	r2, #2
 8015f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8015f84:	e003      	b.n	8015f8e <HAL_TIM_PWM_Start+0xaa>
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	2202      	movs	r2, #2
 8015f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	2201      	movs	r2, #1
 8015f94:	6839      	ldr	r1, [r7, #0]
 8015f96:	4618      	mov	r0, r3
 8015f98:	f000 fca4 	bl	80168e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	4a28      	ldr	r2, [pc, #160]	; (8016044 <HAL_TIM_PWM_Start+0x160>)
 8015fa2:	4293      	cmp	r3, r2
 8015fa4:	d004      	beq.n	8015fb0 <HAL_TIM_PWM_Start+0xcc>
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	4a27      	ldr	r2, [pc, #156]	; (8016048 <HAL_TIM_PWM_Start+0x164>)
 8015fac:	4293      	cmp	r3, r2
 8015fae:	d101      	bne.n	8015fb4 <HAL_TIM_PWM_Start+0xd0>
 8015fb0:	2301      	movs	r3, #1
 8015fb2:	e000      	b.n	8015fb6 <HAL_TIM_PWM_Start+0xd2>
 8015fb4:	2300      	movs	r3, #0
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d007      	beq.n	8015fca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8015fc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	4a1d      	ldr	r2, [pc, #116]	; (8016044 <HAL_TIM_PWM_Start+0x160>)
 8015fd0:	4293      	cmp	r3, r2
 8015fd2:	d018      	beq.n	8016006 <HAL_TIM_PWM_Start+0x122>
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	4a1b      	ldr	r2, [pc, #108]	; (8016048 <HAL_TIM_PWM_Start+0x164>)
 8015fda:	4293      	cmp	r3, r2
 8015fdc:	d013      	beq.n	8016006 <HAL_TIM_PWM_Start+0x122>
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015fe6:	d00e      	beq.n	8016006 <HAL_TIM_PWM_Start+0x122>
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	4a17      	ldr	r2, [pc, #92]	; (801604c <HAL_TIM_PWM_Start+0x168>)
 8015fee:	4293      	cmp	r3, r2
 8015ff0:	d009      	beq.n	8016006 <HAL_TIM_PWM_Start+0x122>
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	4a16      	ldr	r2, [pc, #88]	; (8016050 <HAL_TIM_PWM_Start+0x16c>)
 8015ff8:	4293      	cmp	r3, r2
 8015ffa:	d004      	beq.n	8016006 <HAL_TIM_PWM_Start+0x122>
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	4a14      	ldr	r2, [pc, #80]	; (8016054 <HAL_TIM_PWM_Start+0x170>)
 8016002:	4293      	cmp	r3, r2
 8016004:	d111      	bne.n	801602a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	689b      	ldr	r3, [r3, #8]
 801600c:	f003 0307 	and.w	r3, r3, #7
 8016010:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	2b06      	cmp	r3, #6
 8016016:	d010      	beq.n	801603a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	681a      	ldr	r2, [r3, #0]
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	f042 0201 	orr.w	r2, r2, #1
 8016026:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016028:	e007      	b.n	801603a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	681a      	ldr	r2, [r3, #0]
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	f042 0201 	orr.w	r2, r2, #1
 8016038:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801603a:	2300      	movs	r3, #0
}
 801603c:	4618      	mov	r0, r3
 801603e:	3710      	adds	r7, #16
 8016040:	46bd      	mov	sp, r7
 8016042:	bd80      	pop	{r7, pc}
 8016044:	40012c00 	.word	0x40012c00
 8016048:	40013400 	.word	0x40013400
 801604c:	40000400 	.word	0x40000400
 8016050:	40000800 	.word	0x40000800
 8016054:	40000c00 	.word	0x40000c00

08016058 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b086      	sub	sp, #24
 801605c:	af00      	add	r7, sp, #0
 801605e:	60f8      	str	r0, [r7, #12]
 8016060:	60b9      	str	r1, [r7, #8]
 8016062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8016064:	2300      	movs	r3, #0
 8016066:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801606e:	2b01      	cmp	r3, #1
 8016070:	d101      	bne.n	8016076 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8016072:	2302      	movs	r3, #2
 8016074:	e0ae      	b.n	80161d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	2201      	movs	r2, #1
 801607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	2b0c      	cmp	r3, #12
 8016082:	f200 809f 	bhi.w	80161c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8016086:	a201      	add	r2, pc, #4	; (adr r2, 801608c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8016088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801608c:	080160c1 	.word	0x080160c1
 8016090:	080161c5 	.word	0x080161c5
 8016094:	080161c5 	.word	0x080161c5
 8016098:	080161c5 	.word	0x080161c5
 801609c:	08016101 	.word	0x08016101
 80160a0:	080161c5 	.word	0x080161c5
 80160a4:	080161c5 	.word	0x080161c5
 80160a8:	080161c5 	.word	0x080161c5
 80160ac:	08016143 	.word	0x08016143
 80160b0:	080161c5 	.word	0x080161c5
 80160b4:	080161c5 	.word	0x080161c5
 80160b8:	080161c5 	.word	0x080161c5
 80160bc:	08016183 	.word	0x08016183
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	68b9      	ldr	r1, [r7, #8]
 80160c6:	4618      	mov	r0, r3
 80160c8:	f000 f9ca 	bl	8016460 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	699a      	ldr	r2, [r3, #24]
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	f042 0208 	orr.w	r2, r2, #8
 80160da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	699a      	ldr	r2, [r3, #24]
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	f022 0204 	bic.w	r2, r2, #4
 80160ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	6999      	ldr	r1, [r3, #24]
 80160f2:	68bb      	ldr	r3, [r7, #8]
 80160f4:	691a      	ldr	r2, [r3, #16]
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	430a      	orrs	r2, r1
 80160fc:	619a      	str	r2, [r3, #24]
      break;
 80160fe:	e064      	b.n	80161ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	68b9      	ldr	r1, [r7, #8]
 8016106:	4618      	mov	r0, r3
 8016108:	f000 fa1a 	bl	8016540 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	699a      	ldr	r2, [r3, #24]
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801611a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	699a      	ldr	r2, [r3, #24]
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801612a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	6999      	ldr	r1, [r3, #24]
 8016132:	68bb      	ldr	r3, [r7, #8]
 8016134:	691b      	ldr	r3, [r3, #16]
 8016136:	021a      	lsls	r2, r3, #8
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	430a      	orrs	r2, r1
 801613e:	619a      	str	r2, [r3, #24]
      break;
 8016140:	e043      	b.n	80161ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	68b9      	ldr	r1, [r7, #8]
 8016148:	4618      	mov	r0, r3
 801614a:	f000 fa6d 	bl	8016628 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	69da      	ldr	r2, [r3, #28]
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	f042 0208 	orr.w	r2, r2, #8
 801615c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	69da      	ldr	r2, [r3, #28]
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	f022 0204 	bic.w	r2, r2, #4
 801616c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	69d9      	ldr	r1, [r3, #28]
 8016174:	68bb      	ldr	r3, [r7, #8]
 8016176:	691a      	ldr	r2, [r3, #16]
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	430a      	orrs	r2, r1
 801617e:	61da      	str	r2, [r3, #28]
      break;
 8016180:	e023      	b.n	80161ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	68b9      	ldr	r1, [r7, #8]
 8016188:	4618      	mov	r0, r3
 801618a:	f000 fac1 	bl	8016710 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	69da      	ldr	r2, [r3, #28]
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801619c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	69da      	ldr	r2, [r3, #28]
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80161ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	69d9      	ldr	r1, [r3, #28]
 80161b4:	68bb      	ldr	r3, [r7, #8]
 80161b6:	691b      	ldr	r3, [r3, #16]
 80161b8:	021a      	lsls	r2, r3, #8
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	430a      	orrs	r2, r1
 80161c0:	61da      	str	r2, [r3, #28]
      break;
 80161c2:	e002      	b.n	80161ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80161c4:	2301      	movs	r3, #1
 80161c6:	75fb      	strb	r3, [r7, #23]
      break;
 80161c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	2200      	movs	r2, #0
 80161ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80161d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80161d4:	4618      	mov	r0, r3
 80161d6:	3718      	adds	r7, #24
 80161d8:	46bd      	mov	sp, r7
 80161da:	bd80      	pop	{r7, pc}

080161dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80161dc:	b580      	push	{r7, lr}
 80161de:	b084      	sub	sp, #16
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	6078      	str	r0, [r7, #4]
 80161e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80161e6:	2300      	movs	r3, #0
 80161e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80161f0:	2b01      	cmp	r3, #1
 80161f2:	d101      	bne.n	80161f8 <HAL_TIM_ConfigClockSource+0x1c>
 80161f4:	2302      	movs	r3, #2
 80161f6:	e0b4      	b.n	8016362 <HAL_TIM_ConfigClockSource+0x186>
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	2201      	movs	r2, #1
 80161fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	2202      	movs	r2, #2
 8016204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	689b      	ldr	r3, [r3, #8]
 801620e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8016210:	68bb      	ldr	r3, [r7, #8]
 8016212:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8016216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8016218:	68bb      	ldr	r3, [r7, #8]
 801621a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801621e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	68ba      	ldr	r2, [r7, #8]
 8016226:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8016228:	683b      	ldr	r3, [r7, #0]
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016230:	d03e      	beq.n	80162b0 <HAL_TIM_ConfigClockSource+0xd4>
 8016232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016236:	f200 8087 	bhi.w	8016348 <HAL_TIM_ConfigClockSource+0x16c>
 801623a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801623e:	f000 8086 	beq.w	801634e <HAL_TIM_ConfigClockSource+0x172>
 8016242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016246:	d87f      	bhi.n	8016348 <HAL_TIM_ConfigClockSource+0x16c>
 8016248:	2b70      	cmp	r3, #112	; 0x70
 801624a:	d01a      	beq.n	8016282 <HAL_TIM_ConfigClockSource+0xa6>
 801624c:	2b70      	cmp	r3, #112	; 0x70
 801624e:	d87b      	bhi.n	8016348 <HAL_TIM_ConfigClockSource+0x16c>
 8016250:	2b60      	cmp	r3, #96	; 0x60
 8016252:	d050      	beq.n	80162f6 <HAL_TIM_ConfigClockSource+0x11a>
 8016254:	2b60      	cmp	r3, #96	; 0x60
 8016256:	d877      	bhi.n	8016348 <HAL_TIM_ConfigClockSource+0x16c>
 8016258:	2b50      	cmp	r3, #80	; 0x50
 801625a:	d03c      	beq.n	80162d6 <HAL_TIM_ConfigClockSource+0xfa>
 801625c:	2b50      	cmp	r3, #80	; 0x50
 801625e:	d873      	bhi.n	8016348 <HAL_TIM_ConfigClockSource+0x16c>
 8016260:	2b40      	cmp	r3, #64	; 0x40
 8016262:	d058      	beq.n	8016316 <HAL_TIM_ConfigClockSource+0x13a>
 8016264:	2b40      	cmp	r3, #64	; 0x40
 8016266:	d86f      	bhi.n	8016348 <HAL_TIM_ConfigClockSource+0x16c>
 8016268:	2b30      	cmp	r3, #48	; 0x30
 801626a:	d064      	beq.n	8016336 <HAL_TIM_ConfigClockSource+0x15a>
 801626c:	2b30      	cmp	r3, #48	; 0x30
 801626e:	d86b      	bhi.n	8016348 <HAL_TIM_ConfigClockSource+0x16c>
 8016270:	2b20      	cmp	r3, #32
 8016272:	d060      	beq.n	8016336 <HAL_TIM_ConfigClockSource+0x15a>
 8016274:	2b20      	cmp	r3, #32
 8016276:	d867      	bhi.n	8016348 <HAL_TIM_ConfigClockSource+0x16c>
 8016278:	2b00      	cmp	r3, #0
 801627a:	d05c      	beq.n	8016336 <HAL_TIM_ConfigClockSource+0x15a>
 801627c:	2b10      	cmp	r3, #16
 801627e:	d05a      	beq.n	8016336 <HAL_TIM_ConfigClockSource+0x15a>
 8016280:	e062      	b.n	8016348 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8016286:	683b      	ldr	r3, [r7, #0]
 8016288:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801628a:	683b      	ldr	r3, [r7, #0]
 801628c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801628e:	683b      	ldr	r3, [r7, #0]
 8016290:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8016292:	f000 fb08 	bl	80168a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	689b      	ldr	r3, [r3, #8]
 801629c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801629e:	68bb      	ldr	r3, [r7, #8]
 80162a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80162a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	68ba      	ldr	r2, [r7, #8]
 80162ac:	609a      	str	r2, [r3, #8]
      break;
 80162ae:	e04f      	b.n	8016350 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80162b4:	683b      	ldr	r3, [r7, #0]
 80162b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80162b8:	683b      	ldr	r3, [r7, #0]
 80162ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80162bc:	683b      	ldr	r3, [r7, #0]
 80162be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80162c0:	f000 faf1 	bl	80168a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	689a      	ldr	r2, [r3, #8]
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80162d2:	609a      	str	r2, [r3, #8]
      break;
 80162d4:	e03c      	b.n	8016350 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80162da:	683b      	ldr	r3, [r7, #0]
 80162dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80162de:	683b      	ldr	r3, [r7, #0]
 80162e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80162e2:	461a      	mov	r2, r3
 80162e4:	f000 fa68 	bl	80167b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	2150      	movs	r1, #80	; 0x50
 80162ee:	4618      	mov	r0, r3
 80162f0:	f000 fabf 	bl	8016872 <TIM_ITRx_SetConfig>
      break;
 80162f4:	e02c      	b.n	8016350 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80162fa:	683b      	ldr	r3, [r7, #0]
 80162fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80162fe:	683b      	ldr	r3, [r7, #0]
 8016300:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8016302:	461a      	mov	r2, r3
 8016304:	f000 fa86 	bl	8016814 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	2160      	movs	r1, #96	; 0x60
 801630e:	4618      	mov	r0, r3
 8016310:	f000 faaf 	bl	8016872 <TIM_ITRx_SetConfig>
      break;
 8016314:	e01c      	b.n	8016350 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801631a:	683b      	ldr	r3, [r7, #0]
 801631c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801631e:	683b      	ldr	r3, [r7, #0]
 8016320:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8016322:	461a      	mov	r2, r3
 8016324:	f000 fa48 	bl	80167b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	2140      	movs	r1, #64	; 0x40
 801632e:	4618      	mov	r0, r3
 8016330:	f000 fa9f 	bl	8016872 <TIM_ITRx_SetConfig>
      break;
 8016334:	e00c      	b.n	8016350 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	681a      	ldr	r2, [r3, #0]
 801633a:	683b      	ldr	r3, [r7, #0]
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	4619      	mov	r1, r3
 8016340:	4610      	mov	r0, r2
 8016342:	f000 fa96 	bl	8016872 <TIM_ITRx_SetConfig>
      break;
 8016346:	e003      	b.n	8016350 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8016348:	2301      	movs	r3, #1
 801634a:	73fb      	strb	r3, [r7, #15]
      break;
 801634c:	e000      	b.n	8016350 <HAL_TIM_ConfigClockSource+0x174>
      break;
 801634e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	2201      	movs	r2, #1
 8016354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	2200      	movs	r2, #0
 801635c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8016360:	7bfb      	ldrb	r3, [r7, #15]
}
 8016362:	4618      	mov	r0, r3
 8016364:	3710      	adds	r7, #16
 8016366:	46bd      	mov	sp, r7
 8016368:	bd80      	pop	{r7, pc}
	...

0801636c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801636c:	b480      	push	{r7}
 801636e:	b085      	sub	sp, #20
 8016370:	af00      	add	r7, sp, #0
 8016372:	6078      	str	r0, [r7, #4]
 8016374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	4a33      	ldr	r2, [pc, #204]	; (801644c <TIM_Base_SetConfig+0xe0>)
 8016380:	4293      	cmp	r3, r2
 8016382:	d013      	beq.n	80163ac <TIM_Base_SetConfig+0x40>
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	4a32      	ldr	r2, [pc, #200]	; (8016450 <TIM_Base_SetConfig+0xe4>)
 8016388:	4293      	cmp	r3, r2
 801638a:	d00f      	beq.n	80163ac <TIM_Base_SetConfig+0x40>
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016392:	d00b      	beq.n	80163ac <TIM_Base_SetConfig+0x40>
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	4a2f      	ldr	r2, [pc, #188]	; (8016454 <TIM_Base_SetConfig+0xe8>)
 8016398:	4293      	cmp	r3, r2
 801639a:	d007      	beq.n	80163ac <TIM_Base_SetConfig+0x40>
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	4a2e      	ldr	r2, [pc, #184]	; (8016458 <TIM_Base_SetConfig+0xec>)
 80163a0:	4293      	cmp	r3, r2
 80163a2:	d003      	beq.n	80163ac <TIM_Base_SetConfig+0x40>
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	4a2d      	ldr	r2, [pc, #180]	; (801645c <TIM_Base_SetConfig+0xf0>)
 80163a8:	4293      	cmp	r3, r2
 80163aa:	d108      	bne.n	80163be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80163b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80163b4:	683b      	ldr	r3, [r7, #0]
 80163b6:	685b      	ldr	r3, [r3, #4]
 80163b8:	68fa      	ldr	r2, [r7, #12]
 80163ba:	4313      	orrs	r3, r2
 80163bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	4a22      	ldr	r2, [pc, #136]	; (801644c <TIM_Base_SetConfig+0xe0>)
 80163c2:	4293      	cmp	r3, r2
 80163c4:	d013      	beq.n	80163ee <TIM_Base_SetConfig+0x82>
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	4a21      	ldr	r2, [pc, #132]	; (8016450 <TIM_Base_SetConfig+0xe4>)
 80163ca:	4293      	cmp	r3, r2
 80163cc:	d00f      	beq.n	80163ee <TIM_Base_SetConfig+0x82>
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80163d4:	d00b      	beq.n	80163ee <TIM_Base_SetConfig+0x82>
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	4a1e      	ldr	r2, [pc, #120]	; (8016454 <TIM_Base_SetConfig+0xe8>)
 80163da:	4293      	cmp	r3, r2
 80163dc:	d007      	beq.n	80163ee <TIM_Base_SetConfig+0x82>
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	4a1d      	ldr	r2, [pc, #116]	; (8016458 <TIM_Base_SetConfig+0xec>)
 80163e2:	4293      	cmp	r3, r2
 80163e4:	d003      	beq.n	80163ee <TIM_Base_SetConfig+0x82>
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	4a1c      	ldr	r2, [pc, #112]	; (801645c <TIM_Base_SetConfig+0xf0>)
 80163ea:	4293      	cmp	r3, r2
 80163ec:	d108      	bne.n	8016400 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80163f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80163f6:	683b      	ldr	r3, [r7, #0]
 80163f8:	68db      	ldr	r3, [r3, #12]
 80163fa:	68fa      	ldr	r2, [r7, #12]
 80163fc:	4313      	orrs	r3, r2
 80163fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8016406:	683b      	ldr	r3, [r7, #0]
 8016408:	695b      	ldr	r3, [r3, #20]
 801640a:	4313      	orrs	r3, r2
 801640c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	68fa      	ldr	r2, [r7, #12]
 8016412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016414:	683b      	ldr	r3, [r7, #0]
 8016416:	689a      	ldr	r2, [r3, #8]
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801641c:	683b      	ldr	r3, [r7, #0]
 801641e:	681a      	ldr	r2, [r3, #0]
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	4a09      	ldr	r2, [pc, #36]	; (801644c <TIM_Base_SetConfig+0xe0>)
 8016428:	4293      	cmp	r3, r2
 801642a:	d003      	beq.n	8016434 <TIM_Base_SetConfig+0xc8>
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	4a08      	ldr	r2, [pc, #32]	; (8016450 <TIM_Base_SetConfig+0xe4>)
 8016430:	4293      	cmp	r3, r2
 8016432:	d103      	bne.n	801643c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8016434:	683b      	ldr	r3, [r7, #0]
 8016436:	691a      	ldr	r2, [r3, #16]
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	2201      	movs	r2, #1
 8016440:	615a      	str	r2, [r3, #20]
}
 8016442:	bf00      	nop
 8016444:	3714      	adds	r7, #20
 8016446:	46bd      	mov	sp, r7
 8016448:	bc80      	pop	{r7}
 801644a:	4770      	bx	lr
 801644c:	40012c00 	.word	0x40012c00
 8016450:	40013400 	.word	0x40013400
 8016454:	40000400 	.word	0x40000400
 8016458:	40000800 	.word	0x40000800
 801645c:	40000c00 	.word	0x40000c00

08016460 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016460:	b480      	push	{r7}
 8016462:	b087      	sub	sp, #28
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
 8016468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	6a1b      	ldr	r3, [r3, #32]
 801646e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	6a1b      	ldr	r3, [r3, #32]
 8016474:	f023 0201 	bic.w	r2, r3, #1
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	685b      	ldr	r3, [r3, #4]
 8016480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	699b      	ldr	r3, [r3, #24]
 8016486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801648e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	f023 0303 	bic.w	r3, r3, #3
 8016496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016498:	683b      	ldr	r3, [r7, #0]
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	68fa      	ldr	r2, [r7, #12]
 801649e:	4313      	orrs	r3, r2
 80164a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80164a2:	697b      	ldr	r3, [r7, #20]
 80164a4:	f023 0302 	bic.w	r3, r3, #2
 80164a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80164aa:	683b      	ldr	r3, [r7, #0]
 80164ac:	689b      	ldr	r3, [r3, #8]
 80164ae:	697a      	ldr	r2, [r7, #20]
 80164b0:	4313      	orrs	r3, r2
 80164b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	4a20      	ldr	r2, [pc, #128]	; (8016538 <TIM_OC1_SetConfig+0xd8>)
 80164b8:	4293      	cmp	r3, r2
 80164ba:	d003      	beq.n	80164c4 <TIM_OC1_SetConfig+0x64>
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	4a1f      	ldr	r2, [pc, #124]	; (801653c <TIM_OC1_SetConfig+0xdc>)
 80164c0:	4293      	cmp	r3, r2
 80164c2:	d10c      	bne.n	80164de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80164c4:	697b      	ldr	r3, [r7, #20]
 80164c6:	f023 0308 	bic.w	r3, r3, #8
 80164ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80164cc:	683b      	ldr	r3, [r7, #0]
 80164ce:	68db      	ldr	r3, [r3, #12]
 80164d0:	697a      	ldr	r2, [r7, #20]
 80164d2:	4313      	orrs	r3, r2
 80164d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80164d6:	697b      	ldr	r3, [r7, #20]
 80164d8:	f023 0304 	bic.w	r3, r3, #4
 80164dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	4a15      	ldr	r2, [pc, #84]	; (8016538 <TIM_OC1_SetConfig+0xd8>)
 80164e2:	4293      	cmp	r3, r2
 80164e4:	d003      	beq.n	80164ee <TIM_OC1_SetConfig+0x8e>
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	4a14      	ldr	r2, [pc, #80]	; (801653c <TIM_OC1_SetConfig+0xdc>)
 80164ea:	4293      	cmp	r3, r2
 80164ec:	d111      	bne.n	8016512 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80164ee:	693b      	ldr	r3, [r7, #16]
 80164f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80164f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80164f6:	693b      	ldr	r3, [r7, #16]
 80164f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80164fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80164fe:	683b      	ldr	r3, [r7, #0]
 8016500:	695b      	ldr	r3, [r3, #20]
 8016502:	693a      	ldr	r2, [r7, #16]
 8016504:	4313      	orrs	r3, r2
 8016506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8016508:	683b      	ldr	r3, [r7, #0]
 801650a:	699b      	ldr	r3, [r3, #24]
 801650c:	693a      	ldr	r2, [r7, #16]
 801650e:	4313      	orrs	r3, r2
 8016510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	693a      	ldr	r2, [r7, #16]
 8016516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	68fa      	ldr	r2, [r7, #12]
 801651c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801651e:	683b      	ldr	r3, [r7, #0]
 8016520:	685a      	ldr	r2, [r3, #4]
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	697a      	ldr	r2, [r7, #20]
 801652a:	621a      	str	r2, [r3, #32]
}
 801652c:	bf00      	nop
 801652e:	371c      	adds	r7, #28
 8016530:	46bd      	mov	sp, r7
 8016532:	bc80      	pop	{r7}
 8016534:	4770      	bx	lr
 8016536:	bf00      	nop
 8016538:	40012c00 	.word	0x40012c00
 801653c:	40013400 	.word	0x40013400

08016540 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016540:	b480      	push	{r7}
 8016542:	b087      	sub	sp, #28
 8016544:	af00      	add	r7, sp, #0
 8016546:	6078      	str	r0, [r7, #4]
 8016548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	6a1b      	ldr	r3, [r3, #32]
 801654e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	6a1b      	ldr	r3, [r3, #32]
 8016554:	f023 0210 	bic.w	r2, r3, #16
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	685b      	ldr	r3, [r3, #4]
 8016560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	699b      	ldr	r3, [r3, #24]
 8016566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801656e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016578:	683b      	ldr	r3, [r7, #0]
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	021b      	lsls	r3, r3, #8
 801657e:	68fa      	ldr	r2, [r7, #12]
 8016580:	4313      	orrs	r3, r2
 8016582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8016584:	697b      	ldr	r3, [r7, #20]
 8016586:	f023 0320 	bic.w	r3, r3, #32
 801658a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801658c:	683b      	ldr	r3, [r7, #0]
 801658e:	689b      	ldr	r3, [r3, #8]
 8016590:	011b      	lsls	r3, r3, #4
 8016592:	697a      	ldr	r2, [r7, #20]
 8016594:	4313      	orrs	r3, r2
 8016596:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	4a21      	ldr	r2, [pc, #132]	; (8016620 <TIM_OC2_SetConfig+0xe0>)
 801659c:	4293      	cmp	r3, r2
 801659e:	d003      	beq.n	80165a8 <TIM_OC2_SetConfig+0x68>
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	4a20      	ldr	r2, [pc, #128]	; (8016624 <TIM_OC2_SetConfig+0xe4>)
 80165a4:	4293      	cmp	r3, r2
 80165a6:	d10d      	bne.n	80165c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80165a8:	697b      	ldr	r3, [r7, #20]
 80165aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80165ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80165b0:	683b      	ldr	r3, [r7, #0]
 80165b2:	68db      	ldr	r3, [r3, #12]
 80165b4:	011b      	lsls	r3, r3, #4
 80165b6:	697a      	ldr	r2, [r7, #20]
 80165b8:	4313      	orrs	r3, r2
 80165ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80165bc:	697b      	ldr	r3, [r7, #20]
 80165be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80165c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	4a16      	ldr	r2, [pc, #88]	; (8016620 <TIM_OC2_SetConfig+0xe0>)
 80165c8:	4293      	cmp	r3, r2
 80165ca:	d003      	beq.n	80165d4 <TIM_OC2_SetConfig+0x94>
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	4a15      	ldr	r2, [pc, #84]	; (8016624 <TIM_OC2_SetConfig+0xe4>)
 80165d0:	4293      	cmp	r3, r2
 80165d2:	d113      	bne.n	80165fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80165d4:	693b      	ldr	r3, [r7, #16]
 80165d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80165da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80165dc:	693b      	ldr	r3, [r7, #16]
 80165de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80165e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80165e4:	683b      	ldr	r3, [r7, #0]
 80165e6:	695b      	ldr	r3, [r3, #20]
 80165e8:	009b      	lsls	r3, r3, #2
 80165ea:	693a      	ldr	r2, [r7, #16]
 80165ec:	4313      	orrs	r3, r2
 80165ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80165f0:	683b      	ldr	r3, [r7, #0]
 80165f2:	699b      	ldr	r3, [r3, #24]
 80165f4:	009b      	lsls	r3, r3, #2
 80165f6:	693a      	ldr	r2, [r7, #16]
 80165f8:	4313      	orrs	r3, r2
 80165fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	693a      	ldr	r2, [r7, #16]
 8016600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	68fa      	ldr	r2, [r7, #12]
 8016606:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8016608:	683b      	ldr	r3, [r7, #0]
 801660a:	685a      	ldr	r2, [r3, #4]
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	697a      	ldr	r2, [r7, #20]
 8016614:	621a      	str	r2, [r3, #32]
}
 8016616:	bf00      	nop
 8016618:	371c      	adds	r7, #28
 801661a:	46bd      	mov	sp, r7
 801661c:	bc80      	pop	{r7}
 801661e:	4770      	bx	lr
 8016620:	40012c00 	.word	0x40012c00
 8016624:	40013400 	.word	0x40013400

08016628 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016628:	b480      	push	{r7}
 801662a:	b087      	sub	sp, #28
 801662c:	af00      	add	r7, sp, #0
 801662e:	6078      	str	r0, [r7, #4]
 8016630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	6a1b      	ldr	r3, [r3, #32]
 8016636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	6a1b      	ldr	r3, [r3, #32]
 801663c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	685b      	ldr	r3, [r3, #4]
 8016648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	69db      	ldr	r3, [r3, #28]
 801664e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8016658:	68fb      	ldr	r3, [r7, #12]
 801665a:	f023 0303 	bic.w	r3, r3, #3
 801665e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8016660:	683b      	ldr	r3, [r7, #0]
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	68fa      	ldr	r2, [r7, #12]
 8016666:	4313      	orrs	r3, r2
 8016668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801666a:	697b      	ldr	r3, [r7, #20]
 801666c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8016670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8016672:	683b      	ldr	r3, [r7, #0]
 8016674:	689b      	ldr	r3, [r3, #8]
 8016676:	021b      	lsls	r3, r3, #8
 8016678:	697a      	ldr	r2, [r7, #20]
 801667a:	4313      	orrs	r3, r2
 801667c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	4a21      	ldr	r2, [pc, #132]	; (8016708 <TIM_OC3_SetConfig+0xe0>)
 8016682:	4293      	cmp	r3, r2
 8016684:	d003      	beq.n	801668e <TIM_OC3_SetConfig+0x66>
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	4a20      	ldr	r2, [pc, #128]	; (801670c <TIM_OC3_SetConfig+0xe4>)
 801668a:	4293      	cmp	r3, r2
 801668c:	d10d      	bne.n	80166aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801668e:	697b      	ldr	r3, [r7, #20]
 8016690:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016694:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8016696:	683b      	ldr	r3, [r7, #0]
 8016698:	68db      	ldr	r3, [r3, #12]
 801669a:	021b      	lsls	r3, r3, #8
 801669c:	697a      	ldr	r2, [r7, #20]
 801669e:	4313      	orrs	r3, r2
 80166a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80166a2:	697b      	ldr	r3, [r7, #20]
 80166a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80166a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	4a16      	ldr	r2, [pc, #88]	; (8016708 <TIM_OC3_SetConfig+0xe0>)
 80166ae:	4293      	cmp	r3, r2
 80166b0:	d003      	beq.n	80166ba <TIM_OC3_SetConfig+0x92>
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	4a15      	ldr	r2, [pc, #84]	; (801670c <TIM_OC3_SetConfig+0xe4>)
 80166b6:	4293      	cmp	r3, r2
 80166b8:	d113      	bne.n	80166e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80166ba:	693b      	ldr	r3, [r7, #16]
 80166bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80166c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80166c2:	693b      	ldr	r3, [r7, #16]
 80166c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80166c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80166ca:	683b      	ldr	r3, [r7, #0]
 80166cc:	695b      	ldr	r3, [r3, #20]
 80166ce:	011b      	lsls	r3, r3, #4
 80166d0:	693a      	ldr	r2, [r7, #16]
 80166d2:	4313      	orrs	r3, r2
 80166d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80166d6:	683b      	ldr	r3, [r7, #0]
 80166d8:	699b      	ldr	r3, [r3, #24]
 80166da:	011b      	lsls	r3, r3, #4
 80166dc:	693a      	ldr	r2, [r7, #16]
 80166de:	4313      	orrs	r3, r2
 80166e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	693a      	ldr	r2, [r7, #16]
 80166e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	68fa      	ldr	r2, [r7, #12]
 80166ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80166ee:	683b      	ldr	r3, [r7, #0]
 80166f0:	685a      	ldr	r2, [r3, #4]
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	697a      	ldr	r2, [r7, #20]
 80166fa:	621a      	str	r2, [r3, #32]
}
 80166fc:	bf00      	nop
 80166fe:	371c      	adds	r7, #28
 8016700:	46bd      	mov	sp, r7
 8016702:	bc80      	pop	{r7}
 8016704:	4770      	bx	lr
 8016706:	bf00      	nop
 8016708:	40012c00 	.word	0x40012c00
 801670c:	40013400 	.word	0x40013400

08016710 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8016710:	b480      	push	{r7}
 8016712:	b087      	sub	sp, #28
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]
 8016718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	6a1b      	ldr	r3, [r3, #32]
 801671e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	6a1b      	ldr	r3, [r3, #32]
 8016724:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	685b      	ldr	r3, [r3, #4]
 8016730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	69db      	ldr	r3, [r3, #28]
 8016736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801673e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8016746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8016748:	683b      	ldr	r3, [r7, #0]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	021b      	lsls	r3, r3, #8
 801674e:	68fa      	ldr	r2, [r7, #12]
 8016750:	4313      	orrs	r3, r2
 8016752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8016754:	693b      	ldr	r3, [r7, #16]
 8016756:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801675a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801675c:	683b      	ldr	r3, [r7, #0]
 801675e:	689b      	ldr	r3, [r3, #8]
 8016760:	031b      	lsls	r3, r3, #12
 8016762:	693a      	ldr	r2, [r7, #16]
 8016764:	4313      	orrs	r3, r2
 8016766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	4a11      	ldr	r2, [pc, #68]	; (80167b0 <TIM_OC4_SetConfig+0xa0>)
 801676c:	4293      	cmp	r3, r2
 801676e:	d003      	beq.n	8016778 <TIM_OC4_SetConfig+0x68>
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	4a10      	ldr	r2, [pc, #64]	; (80167b4 <TIM_OC4_SetConfig+0xa4>)
 8016774:	4293      	cmp	r3, r2
 8016776:	d109      	bne.n	801678c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8016778:	697b      	ldr	r3, [r7, #20]
 801677a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801677e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8016780:	683b      	ldr	r3, [r7, #0]
 8016782:	695b      	ldr	r3, [r3, #20]
 8016784:	019b      	lsls	r3, r3, #6
 8016786:	697a      	ldr	r2, [r7, #20]
 8016788:	4313      	orrs	r3, r2
 801678a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	697a      	ldr	r2, [r7, #20]
 8016790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	68fa      	ldr	r2, [r7, #12]
 8016796:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8016798:	683b      	ldr	r3, [r7, #0]
 801679a:	685a      	ldr	r2, [r3, #4]
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	693a      	ldr	r2, [r7, #16]
 80167a4:	621a      	str	r2, [r3, #32]
}
 80167a6:	bf00      	nop
 80167a8:	371c      	adds	r7, #28
 80167aa:	46bd      	mov	sp, r7
 80167ac:	bc80      	pop	{r7}
 80167ae:	4770      	bx	lr
 80167b0:	40012c00 	.word	0x40012c00
 80167b4:	40013400 	.word	0x40013400

080167b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80167b8:	b480      	push	{r7}
 80167ba:	b087      	sub	sp, #28
 80167bc:	af00      	add	r7, sp, #0
 80167be:	60f8      	str	r0, [r7, #12]
 80167c0:	60b9      	str	r1, [r7, #8]
 80167c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	6a1b      	ldr	r3, [r3, #32]
 80167c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	6a1b      	ldr	r3, [r3, #32]
 80167ce:	f023 0201 	bic.w	r2, r3, #1
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	699b      	ldr	r3, [r3, #24]
 80167da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80167dc:	693b      	ldr	r3, [r7, #16]
 80167de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80167e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	011b      	lsls	r3, r3, #4
 80167e8:	693a      	ldr	r2, [r7, #16]
 80167ea:	4313      	orrs	r3, r2
 80167ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80167ee:	697b      	ldr	r3, [r7, #20]
 80167f0:	f023 030a 	bic.w	r3, r3, #10
 80167f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80167f6:	697a      	ldr	r2, [r7, #20]
 80167f8:	68bb      	ldr	r3, [r7, #8]
 80167fa:	4313      	orrs	r3, r2
 80167fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	693a      	ldr	r2, [r7, #16]
 8016802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	697a      	ldr	r2, [r7, #20]
 8016808:	621a      	str	r2, [r3, #32]
}
 801680a:	bf00      	nop
 801680c:	371c      	adds	r7, #28
 801680e:	46bd      	mov	sp, r7
 8016810:	bc80      	pop	{r7}
 8016812:	4770      	bx	lr

08016814 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016814:	b480      	push	{r7}
 8016816:	b087      	sub	sp, #28
 8016818:	af00      	add	r7, sp, #0
 801681a:	60f8      	str	r0, [r7, #12]
 801681c:	60b9      	str	r1, [r7, #8]
 801681e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	6a1b      	ldr	r3, [r3, #32]
 8016824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	6a1b      	ldr	r3, [r3, #32]
 801682a:	f023 0210 	bic.w	r2, r3, #16
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	699b      	ldr	r3, [r3, #24]
 8016836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8016838:	693b      	ldr	r3, [r7, #16]
 801683a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801683e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	031b      	lsls	r3, r3, #12
 8016844:	693a      	ldr	r2, [r7, #16]
 8016846:	4313      	orrs	r3, r2
 8016848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801684a:	697b      	ldr	r3, [r7, #20]
 801684c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8016850:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8016852:	68bb      	ldr	r3, [r7, #8]
 8016854:	011b      	lsls	r3, r3, #4
 8016856:	697a      	ldr	r2, [r7, #20]
 8016858:	4313      	orrs	r3, r2
 801685a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	693a      	ldr	r2, [r7, #16]
 8016860:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	697a      	ldr	r2, [r7, #20]
 8016866:	621a      	str	r2, [r3, #32]
}
 8016868:	bf00      	nop
 801686a:	371c      	adds	r7, #28
 801686c:	46bd      	mov	sp, r7
 801686e:	bc80      	pop	{r7}
 8016870:	4770      	bx	lr

08016872 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8016872:	b480      	push	{r7}
 8016874:	b085      	sub	sp, #20
 8016876:	af00      	add	r7, sp, #0
 8016878:	6078      	str	r0, [r7, #4]
 801687a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	689b      	ldr	r3, [r3, #8]
 8016880:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8016888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801688a:	683a      	ldr	r2, [r7, #0]
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	4313      	orrs	r3, r2
 8016890:	f043 0307 	orr.w	r3, r3, #7
 8016894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	68fa      	ldr	r2, [r7, #12]
 801689a:	609a      	str	r2, [r3, #8]
}
 801689c:	bf00      	nop
 801689e:	3714      	adds	r7, #20
 80168a0:	46bd      	mov	sp, r7
 80168a2:	bc80      	pop	{r7}
 80168a4:	4770      	bx	lr

080168a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80168a6:	b480      	push	{r7}
 80168a8:	b087      	sub	sp, #28
 80168aa:	af00      	add	r7, sp, #0
 80168ac:	60f8      	str	r0, [r7, #12]
 80168ae:	60b9      	str	r1, [r7, #8]
 80168b0:	607a      	str	r2, [r7, #4]
 80168b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	689b      	ldr	r3, [r3, #8]
 80168b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80168ba:	697b      	ldr	r3, [r7, #20]
 80168bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80168c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80168c2:	683b      	ldr	r3, [r7, #0]
 80168c4:	021a      	lsls	r2, r3, #8
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	431a      	orrs	r2, r3
 80168ca:	68bb      	ldr	r3, [r7, #8]
 80168cc:	4313      	orrs	r3, r2
 80168ce:	697a      	ldr	r2, [r7, #20]
 80168d0:	4313      	orrs	r3, r2
 80168d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	697a      	ldr	r2, [r7, #20]
 80168d8:	609a      	str	r2, [r3, #8]
}
 80168da:	bf00      	nop
 80168dc:	371c      	adds	r7, #28
 80168de:	46bd      	mov	sp, r7
 80168e0:	bc80      	pop	{r7}
 80168e2:	4770      	bx	lr

080168e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80168e4:	b480      	push	{r7}
 80168e6:	b087      	sub	sp, #28
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	60f8      	str	r0, [r7, #12]
 80168ec:	60b9      	str	r1, [r7, #8]
 80168ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80168f0:	68bb      	ldr	r3, [r7, #8]
 80168f2:	f003 031f 	and.w	r3, r3, #31
 80168f6:	2201      	movs	r2, #1
 80168f8:	fa02 f303 	lsl.w	r3, r2, r3
 80168fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	6a1a      	ldr	r2, [r3, #32]
 8016902:	697b      	ldr	r3, [r7, #20]
 8016904:	43db      	mvns	r3, r3
 8016906:	401a      	ands	r2, r3
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801690c:	68fb      	ldr	r3, [r7, #12]
 801690e:	6a1a      	ldr	r2, [r3, #32]
 8016910:	68bb      	ldr	r3, [r7, #8]
 8016912:	f003 031f 	and.w	r3, r3, #31
 8016916:	6879      	ldr	r1, [r7, #4]
 8016918:	fa01 f303 	lsl.w	r3, r1, r3
 801691c:	431a      	orrs	r2, r3
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	621a      	str	r2, [r3, #32]
}
 8016922:	bf00      	nop
 8016924:	371c      	adds	r7, #28
 8016926:	46bd      	mov	sp, r7
 8016928:	bc80      	pop	{r7}
 801692a:	4770      	bx	lr

0801692c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801692c:	b480      	push	{r7}
 801692e:	b085      	sub	sp, #20
 8016930:	af00      	add	r7, sp, #0
 8016932:	6078      	str	r0, [r7, #4]
 8016934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801693c:	2b01      	cmp	r3, #1
 801693e:	d101      	bne.n	8016944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8016940:	2302      	movs	r3, #2
 8016942:	e050      	b.n	80169e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	2201      	movs	r2, #1
 8016948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	2202      	movs	r2, #2
 8016950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	685b      	ldr	r3, [r3, #4]
 801695a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	689b      	ldr	r3, [r3, #8]
 8016962:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801696a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801696c:	683b      	ldr	r3, [r7, #0]
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	68fa      	ldr	r2, [r7, #12]
 8016972:	4313      	orrs	r3, r2
 8016974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	68fa      	ldr	r2, [r7, #12]
 801697c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	4a1b      	ldr	r2, [pc, #108]	; (80169f0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8016984:	4293      	cmp	r3, r2
 8016986:	d018      	beq.n	80169ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	4a19      	ldr	r2, [pc, #100]	; (80169f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 801698e:	4293      	cmp	r3, r2
 8016990:	d013      	beq.n	80169ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801699a:	d00e      	beq.n	80169ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	4a15      	ldr	r2, [pc, #84]	; (80169f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80169a2:	4293      	cmp	r3, r2
 80169a4:	d009      	beq.n	80169ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	681b      	ldr	r3, [r3, #0]
 80169aa:	4a14      	ldr	r2, [pc, #80]	; (80169fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80169ac:	4293      	cmp	r3, r2
 80169ae:	d004      	beq.n	80169ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	4a12      	ldr	r2, [pc, #72]	; (8016a00 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80169b6:	4293      	cmp	r3, r2
 80169b8:	d10c      	bne.n	80169d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80169ba:	68bb      	ldr	r3, [r7, #8]
 80169bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80169c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80169c2:	683b      	ldr	r3, [r7, #0]
 80169c4:	685b      	ldr	r3, [r3, #4]
 80169c6:	68ba      	ldr	r2, [r7, #8]
 80169c8:	4313      	orrs	r3, r2
 80169ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	68ba      	ldr	r2, [r7, #8]
 80169d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	2201      	movs	r2, #1
 80169d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	2200      	movs	r2, #0
 80169e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80169e4:	2300      	movs	r3, #0
}
 80169e6:	4618      	mov	r0, r3
 80169e8:	3714      	adds	r7, #20
 80169ea:	46bd      	mov	sp, r7
 80169ec:	bc80      	pop	{r7}
 80169ee:	4770      	bx	lr
 80169f0:	40012c00 	.word	0x40012c00
 80169f4:	40013400 	.word	0x40013400
 80169f8:	40000400 	.word	0x40000400
 80169fc:	40000800 	.word	0x40000800
 8016a00:	40000c00 	.word	0x40000c00

08016a04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b082      	sub	sp, #8
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d101      	bne.n	8016a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8016a12:	2301      	movs	r3, #1
 8016a14:	e042      	b.n	8016a9c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016a1c:	b2db      	uxtb	r3, r3
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d106      	bne.n	8016a30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	2200      	movs	r2, #0
 8016a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8016a2a:	6878      	ldr	r0, [r7, #4]
 8016a2c:	f7f7 fd28 	bl	800e480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	2224      	movs	r2, #36	; 0x24
 8016a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	68da      	ldr	r2, [r3, #12]
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8016a46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8016a48:	6878      	ldr	r0, [r7, #4]
 8016a4a:	f000 fa39 	bl	8016ec0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	691a      	ldr	r2, [r3, #16]
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8016a5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	695a      	ldr	r2, [r3, #20]
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8016a6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	68da      	ldr	r2, [r3, #12]
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8016a7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	2200      	movs	r2, #0
 8016a82:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	2220      	movs	r2, #32
 8016a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	2220      	movs	r2, #32
 8016a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	2200      	movs	r2, #0
 8016a98:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8016a9a:	2300      	movs	r3, #0
}
 8016a9c:	4618      	mov	r0, r3
 8016a9e:	3708      	adds	r7, #8
 8016aa0:	46bd      	mov	sp, r7
 8016aa2:	bd80      	pop	{r7, pc}

08016aa4 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	b082      	sub	sp, #8
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d101      	bne.n	8016ab6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8016ab2:	2301      	movs	r3, #1
 8016ab4:	e04a      	b.n	8016b4c <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016abc:	b2db      	uxtb	r3, r3
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d106      	bne.n	8016ad0 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	2200      	movs	r2, #0
 8016ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8016aca:	6878      	ldr	r0, [r7, #4]
 8016acc:	f7f7 fcd8 	bl	800e480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	2224      	movs	r2, #36	; 0x24
 8016ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	68da      	ldr	r2, [r3, #12]
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8016ae6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8016ae8:	6878      	ldr	r0, [r7, #4]
 8016aea:	f000 f9e9 	bl	8016ec0 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	691a      	ldr	r2, [r3, #16]
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8016afc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	695a      	ldr	r2, [r3, #20]
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8016b0c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	695a      	ldr	r2, [r3, #20]
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	f042 0208 	orr.w	r2, r2, #8
 8016b1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	68da      	ldr	r2, [r3, #12]
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8016b2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	2200      	movs	r2, #0
 8016b32:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	2220      	movs	r2, #32
 8016b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	2220      	movs	r2, #32
 8016b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	2200      	movs	r2, #0
 8016b48:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8016b4a:	2300      	movs	r3, #0
}
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	3708      	adds	r7, #8
 8016b50:	46bd      	mov	sp, r7
 8016b52:	bd80      	pop	{r7, pc}

08016b54 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8016b54:	b580      	push	{r7, lr}
 8016b56:	b082      	sub	sp, #8
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d101      	bne.n	8016b66 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8016b62:	2301      	movs	r3, #1
 8016b64:	e024      	b.n	8016bb0 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	2224      	movs	r2, #36	; 0x24
 8016b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	68da      	ldr	r2, [r3, #12]
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8016b7c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8016b7e:	6878      	ldr	r0, [r7, #4]
 8016b80:	f7f7 fd32 	bl	800e5e8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	2200      	movs	r2, #0
 8016b88:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	2200      	movs	r2, #0
 8016b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	2200      	movs	r2, #0
 8016b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	2200      	movs	r2, #0
 8016b9e:	631a      	str	r2, [r3, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	2200      	movs	r2, #0
 8016ba4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	2200      	movs	r2, #0
 8016baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8016bae:	2300      	movs	r3, #0
}
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	3708      	adds	r7, #8
 8016bb4:	46bd      	mov	sp, r7
 8016bb6:	bd80      	pop	{r7, pc}

08016bb8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b08a      	sub	sp, #40	; 0x28
 8016bbc:	af02      	add	r7, sp, #8
 8016bbe:	60f8      	str	r0, [r7, #12]
 8016bc0:	60b9      	str	r1, [r7, #8]
 8016bc2:	603b      	str	r3, [r7, #0]
 8016bc4:	4613      	mov	r3, r2
 8016bc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8016bc8:	2300      	movs	r3, #0
 8016bca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016bd2:	b2db      	uxtb	r3, r3
 8016bd4:	2b20      	cmp	r3, #32
 8016bd6:	d16d      	bne.n	8016cb4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8016bd8:	68bb      	ldr	r3, [r7, #8]
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d002      	beq.n	8016be4 <HAL_UART_Transmit+0x2c>
 8016bde:	88fb      	ldrh	r3, [r7, #6]
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d101      	bne.n	8016be8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8016be4:	2301      	movs	r3, #1
 8016be6:	e066      	b.n	8016cb6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	2200      	movs	r2, #0
 8016bec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	2221      	movs	r2, #33	; 0x21
 8016bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8016bf6:	f7f7 fdd9 	bl	800e7ac <HAL_GetTick>
 8016bfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	88fa      	ldrh	r2, [r7, #6]
 8016c00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	88fa      	ldrh	r2, [r7, #6]
 8016c06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	689b      	ldr	r3, [r3, #8]
 8016c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016c10:	d108      	bne.n	8016c24 <HAL_UART_Transmit+0x6c>
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	691b      	ldr	r3, [r3, #16]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d104      	bne.n	8016c24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8016c1a:	2300      	movs	r3, #0
 8016c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8016c1e:	68bb      	ldr	r3, [r7, #8]
 8016c20:	61bb      	str	r3, [r7, #24]
 8016c22:	e003      	b.n	8016c2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8016c24:	68bb      	ldr	r3, [r7, #8]
 8016c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8016c28:	2300      	movs	r3, #0
 8016c2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8016c2c:	e02a      	b.n	8016c84 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8016c2e:	683b      	ldr	r3, [r7, #0]
 8016c30:	9300      	str	r3, [sp, #0]
 8016c32:	697b      	ldr	r3, [r7, #20]
 8016c34:	2200      	movs	r2, #0
 8016c36:	2180      	movs	r1, #128	; 0x80
 8016c38:	68f8      	ldr	r0, [r7, #12]
 8016c3a:	f000 f8d2 	bl	8016de2 <UART_WaitOnFlagUntilTimeout>
 8016c3e:	4603      	mov	r3, r0
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d001      	beq.n	8016c48 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8016c44:	2303      	movs	r3, #3
 8016c46:	e036      	b.n	8016cb6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8016c48:	69fb      	ldr	r3, [r7, #28]
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d10b      	bne.n	8016c66 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8016c4e:	69bb      	ldr	r3, [r7, #24]
 8016c50:	881b      	ldrh	r3, [r3, #0]
 8016c52:	461a      	mov	r2, r3
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8016c5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8016c5e:	69bb      	ldr	r3, [r7, #24]
 8016c60:	3302      	adds	r3, #2
 8016c62:	61bb      	str	r3, [r7, #24]
 8016c64:	e007      	b.n	8016c76 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8016c66:	69fb      	ldr	r3, [r7, #28]
 8016c68:	781a      	ldrb	r2, [r3, #0]
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8016c70:	69fb      	ldr	r3, [r7, #28]
 8016c72:	3301      	adds	r3, #1
 8016c74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8016c7a:	b29b      	uxth	r3, r3
 8016c7c:	3b01      	subs	r3, #1
 8016c7e:	b29a      	uxth	r2, r3
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8016c88:	b29b      	uxth	r3, r3
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d1cf      	bne.n	8016c2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8016c8e:	683b      	ldr	r3, [r7, #0]
 8016c90:	9300      	str	r3, [sp, #0]
 8016c92:	697b      	ldr	r3, [r7, #20]
 8016c94:	2200      	movs	r2, #0
 8016c96:	2140      	movs	r1, #64	; 0x40
 8016c98:	68f8      	ldr	r0, [r7, #12]
 8016c9a:	f000 f8a2 	bl	8016de2 <UART_WaitOnFlagUntilTimeout>
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d001      	beq.n	8016ca8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8016ca4:	2303      	movs	r3, #3
 8016ca6:	e006      	b.n	8016cb6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	2220      	movs	r2, #32
 8016cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8016cb0:	2300      	movs	r3, #0
 8016cb2:	e000      	b.n	8016cb6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8016cb4:	2302      	movs	r3, #2
  }
}
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	3720      	adds	r7, #32
 8016cba:	46bd      	mov	sp, r7
 8016cbc:	bd80      	pop	{r7, pc}

08016cbe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016cbe:	b580      	push	{r7, lr}
 8016cc0:	b08a      	sub	sp, #40	; 0x28
 8016cc2:	af02      	add	r7, sp, #8
 8016cc4:	60f8      	str	r0, [r7, #12]
 8016cc6:	60b9      	str	r1, [r7, #8]
 8016cc8:	603b      	str	r3, [r7, #0]
 8016cca:	4613      	mov	r3, r2
 8016ccc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8016cce:	2300      	movs	r3, #0
 8016cd0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016cd8:	b2db      	uxtb	r3, r3
 8016cda:	2b20      	cmp	r3, #32
 8016cdc:	d17c      	bne.n	8016dd8 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8016cde:	68bb      	ldr	r3, [r7, #8]
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d002      	beq.n	8016cea <HAL_UART_Receive+0x2c>
 8016ce4:	88fb      	ldrh	r3, [r7, #6]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d101      	bne.n	8016cee <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8016cea:	2301      	movs	r3, #1
 8016cec:	e075      	b.n	8016dda <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	2200      	movs	r2, #0
 8016cf2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	2222      	movs	r2, #34	; 0x22
 8016cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016cfc:	68fb      	ldr	r3, [r7, #12]
 8016cfe:	2200      	movs	r2, #0
 8016d00:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8016d02:	f7f7 fd53 	bl	800e7ac <HAL_GetTick>
 8016d06:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	88fa      	ldrh	r2, [r7, #6]
 8016d0c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	88fa      	ldrh	r2, [r7, #6]
 8016d12:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	689b      	ldr	r3, [r3, #8]
 8016d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016d1c:	d108      	bne.n	8016d30 <HAL_UART_Receive+0x72>
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	691b      	ldr	r3, [r3, #16]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d104      	bne.n	8016d30 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8016d26:	2300      	movs	r3, #0
 8016d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8016d2a:	68bb      	ldr	r3, [r7, #8]
 8016d2c:	61bb      	str	r3, [r7, #24]
 8016d2e:	e003      	b.n	8016d38 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8016d30:	68bb      	ldr	r3, [r7, #8]
 8016d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8016d34:	2300      	movs	r3, #0
 8016d36:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8016d38:	e043      	b.n	8016dc2 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8016d3a:	683b      	ldr	r3, [r7, #0]
 8016d3c:	9300      	str	r3, [sp, #0]
 8016d3e:	697b      	ldr	r3, [r7, #20]
 8016d40:	2200      	movs	r2, #0
 8016d42:	2120      	movs	r1, #32
 8016d44:	68f8      	ldr	r0, [r7, #12]
 8016d46:	f000 f84c 	bl	8016de2 <UART_WaitOnFlagUntilTimeout>
 8016d4a:	4603      	mov	r3, r0
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d001      	beq.n	8016d54 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8016d50:	2303      	movs	r3, #3
 8016d52:	e042      	b.n	8016dda <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8016d54:	69fb      	ldr	r3, [r7, #28]
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d10c      	bne.n	8016d74 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	685b      	ldr	r3, [r3, #4]
 8016d60:	b29b      	uxth	r3, r3
 8016d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016d66:	b29a      	uxth	r2, r3
 8016d68:	69bb      	ldr	r3, [r7, #24]
 8016d6a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8016d6c:	69bb      	ldr	r3, [r7, #24]
 8016d6e:	3302      	adds	r3, #2
 8016d70:	61bb      	str	r3, [r7, #24]
 8016d72:	e01f      	b.n	8016db4 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	689b      	ldr	r3, [r3, #8]
 8016d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016d7c:	d007      	beq.n	8016d8e <HAL_UART_Receive+0xd0>
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	689b      	ldr	r3, [r3, #8]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d10a      	bne.n	8016d9c <HAL_UART_Receive+0xde>
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	691b      	ldr	r3, [r3, #16]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d106      	bne.n	8016d9c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	685b      	ldr	r3, [r3, #4]
 8016d94:	b2da      	uxtb	r2, r3
 8016d96:	69fb      	ldr	r3, [r7, #28]
 8016d98:	701a      	strb	r2, [r3, #0]
 8016d9a:	e008      	b.n	8016dae <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	685b      	ldr	r3, [r3, #4]
 8016da2:	b2db      	uxtb	r3, r3
 8016da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016da8:	b2da      	uxtb	r2, r3
 8016daa:	69fb      	ldr	r3, [r7, #28]
 8016dac:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8016dae:	69fb      	ldr	r3, [r7, #28]
 8016db0:	3301      	adds	r3, #1
 8016db2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016db8:	b29b      	uxth	r3, r3
 8016dba:	3b01      	subs	r3, #1
 8016dbc:	b29a      	uxth	r2, r3
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016dc6:	b29b      	uxth	r3, r3
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d1b6      	bne.n	8016d3a <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	2220      	movs	r2, #32
 8016dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8016dd4:	2300      	movs	r3, #0
 8016dd6:	e000      	b.n	8016dda <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8016dd8:	2302      	movs	r3, #2
  }
}
 8016dda:	4618      	mov	r0, r3
 8016ddc:	3720      	adds	r7, #32
 8016dde:	46bd      	mov	sp, r7
 8016de0:	bd80      	pop	{r7, pc}

08016de2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8016de2:	b580      	push	{r7, lr}
 8016de4:	b090      	sub	sp, #64	; 0x40
 8016de6:	af00      	add	r7, sp, #0
 8016de8:	60f8      	str	r0, [r7, #12]
 8016dea:	60b9      	str	r1, [r7, #8]
 8016dec:	603b      	str	r3, [r7, #0]
 8016dee:	4613      	mov	r3, r2
 8016df0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016df2:	e050      	b.n	8016e96 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016dfa:	d04c      	beq.n	8016e96 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8016dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d007      	beq.n	8016e12 <UART_WaitOnFlagUntilTimeout+0x30>
 8016e02:	f7f7 fcd3 	bl	800e7ac <HAL_GetTick>
 8016e06:	4602      	mov	r2, r0
 8016e08:	683b      	ldr	r3, [r7, #0]
 8016e0a:	1ad3      	subs	r3, r2, r3
 8016e0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016e0e:	429a      	cmp	r2, r3
 8016e10:	d241      	bcs.n	8016e96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	330c      	adds	r3, #12
 8016e18:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e1c:	e853 3f00 	ldrex	r3, [r3]
 8016e20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8016e28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	330c      	adds	r3, #12
 8016e30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016e32:	637a      	str	r2, [r7, #52]	; 0x34
 8016e34:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016e38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016e3a:	e841 2300 	strex	r3, r2, [r1]
 8016e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8016e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d1e5      	bne.n	8016e12 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	3314      	adds	r3, #20
 8016e4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e4e:	697b      	ldr	r3, [r7, #20]
 8016e50:	e853 3f00 	ldrex	r3, [r3]
 8016e54:	613b      	str	r3, [r7, #16]
   return(result);
 8016e56:	693b      	ldr	r3, [r7, #16]
 8016e58:	f023 0301 	bic.w	r3, r3, #1
 8016e5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	3314      	adds	r3, #20
 8016e64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e66:	623a      	str	r2, [r7, #32]
 8016e68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e6a:	69f9      	ldr	r1, [r7, #28]
 8016e6c:	6a3a      	ldr	r2, [r7, #32]
 8016e6e:	e841 2300 	strex	r3, r2, [r1]
 8016e72:	61bb      	str	r3, [r7, #24]
   return(result);
 8016e74:	69bb      	ldr	r3, [r7, #24]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d1e5      	bne.n	8016e46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	2220      	movs	r2, #32
 8016e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	2220      	movs	r2, #32
 8016e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8016e8a:	68fb      	ldr	r3, [r7, #12]
 8016e8c:	2200      	movs	r2, #0
 8016e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8016e92:	2303      	movs	r3, #3
 8016e94:	e00f      	b.n	8016eb6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	681a      	ldr	r2, [r3, #0]
 8016e9c:	68bb      	ldr	r3, [r7, #8]
 8016e9e:	4013      	ands	r3, r2
 8016ea0:	68ba      	ldr	r2, [r7, #8]
 8016ea2:	429a      	cmp	r2, r3
 8016ea4:	bf0c      	ite	eq
 8016ea6:	2301      	moveq	r3, #1
 8016ea8:	2300      	movne	r3, #0
 8016eaa:	b2db      	uxtb	r3, r3
 8016eac:	461a      	mov	r2, r3
 8016eae:	79fb      	ldrb	r3, [r7, #7]
 8016eb0:	429a      	cmp	r2, r3
 8016eb2:	d09f      	beq.n	8016df4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8016eb4:	2300      	movs	r3, #0
}
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	3740      	adds	r7, #64	; 0x40
 8016eba:	46bd      	mov	sp, r7
 8016ebc:	bd80      	pop	{r7, pc}
	...

08016ec0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016ec0:	b580      	push	{r7, lr}
 8016ec2:	b084      	sub	sp, #16
 8016ec4:	af00      	add	r7, sp, #0
 8016ec6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	691b      	ldr	r3, [r3, #16]
 8016ece:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	68da      	ldr	r2, [r3, #12]
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	430a      	orrs	r2, r1
 8016edc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	689a      	ldr	r2, [r3, #8]
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	691b      	ldr	r3, [r3, #16]
 8016ee6:	431a      	orrs	r2, r3
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	695b      	ldr	r3, [r3, #20]
 8016eec:	4313      	orrs	r3, r2
 8016eee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	68db      	ldr	r3, [r3, #12]
 8016ef6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8016efa:	f023 030c 	bic.w	r3, r3, #12
 8016efe:	687a      	ldr	r2, [r7, #4]
 8016f00:	6812      	ldr	r2, [r2, #0]
 8016f02:	68b9      	ldr	r1, [r7, #8]
 8016f04:	430b      	orrs	r3, r1
 8016f06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	695b      	ldr	r3, [r3, #20]
 8016f0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	699a      	ldr	r2, [r3, #24]
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	430a      	orrs	r2, r1
 8016f1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	681b      	ldr	r3, [r3, #0]
 8016f22:	4a2c      	ldr	r2, [pc, #176]	; (8016fd4 <UART_SetConfig+0x114>)
 8016f24:	4293      	cmp	r3, r2
 8016f26:	d103      	bne.n	8016f30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8016f28:	f7fe fe4c 	bl	8015bc4 <HAL_RCC_GetPCLK2Freq>
 8016f2c:	60f8      	str	r0, [r7, #12]
 8016f2e:	e002      	b.n	8016f36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8016f30:	f7fe fe34 	bl	8015b9c <HAL_RCC_GetPCLK1Freq>
 8016f34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8016f36:	68fa      	ldr	r2, [r7, #12]
 8016f38:	4613      	mov	r3, r2
 8016f3a:	009b      	lsls	r3, r3, #2
 8016f3c:	4413      	add	r3, r2
 8016f3e:	009a      	lsls	r2, r3, #2
 8016f40:	441a      	add	r2, r3
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	685b      	ldr	r3, [r3, #4]
 8016f46:	009b      	lsls	r3, r3, #2
 8016f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8016f4c:	4a22      	ldr	r2, [pc, #136]	; (8016fd8 <UART_SetConfig+0x118>)
 8016f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8016f52:	095b      	lsrs	r3, r3, #5
 8016f54:	0119      	lsls	r1, r3, #4
 8016f56:	68fa      	ldr	r2, [r7, #12]
 8016f58:	4613      	mov	r3, r2
 8016f5a:	009b      	lsls	r3, r3, #2
 8016f5c:	4413      	add	r3, r2
 8016f5e:	009a      	lsls	r2, r3, #2
 8016f60:	441a      	add	r2, r3
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	685b      	ldr	r3, [r3, #4]
 8016f66:	009b      	lsls	r3, r3, #2
 8016f68:	fbb2 f2f3 	udiv	r2, r2, r3
 8016f6c:	4b1a      	ldr	r3, [pc, #104]	; (8016fd8 <UART_SetConfig+0x118>)
 8016f6e:	fba3 0302 	umull	r0, r3, r3, r2
 8016f72:	095b      	lsrs	r3, r3, #5
 8016f74:	2064      	movs	r0, #100	; 0x64
 8016f76:	fb00 f303 	mul.w	r3, r0, r3
 8016f7a:	1ad3      	subs	r3, r2, r3
 8016f7c:	011b      	lsls	r3, r3, #4
 8016f7e:	3332      	adds	r3, #50	; 0x32
 8016f80:	4a15      	ldr	r2, [pc, #84]	; (8016fd8 <UART_SetConfig+0x118>)
 8016f82:	fba2 2303 	umull	r2, r3, r2, r3
 8016f86:	095b      	lsrs	r3, r3, #5
 8016f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016f8c:	4419      	add	r1, r3
 8016f8e:	68fa      	ldr	r2, [r7, #12]
 8016f90:	4613      	mov	r3, r2
 8016f92:	009b      	lsls	r3, r3, #2
 8016f94:	4413      	add	r3, r2
 8016f96:	009a      	lsls	r2, r3, #2
 8016f98:	441a      	add	r2, r3
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	685b      	ldr	r3, [r3, #4]
 8016f9e:	009b      	lsls	r3, r3, #2
 8016fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8016fa4:	4b0c      	ldr	r3, [pc, #48]	; (8016fd8 <UART_SetConfig+0x118>)
 8016fa6:	fba3 0302 	umull	r0, r3, r3, r2
 8016faa:	095b      	lsrs	r3, r3, #5
 8016fac:	2064      	movs	r0, #100	; 0x64
 8016fae:	fb00 f303 	mul.w	r3, r0, r3
 8016fb2:	1ad3      	subs	r3, r2, r3
 8016fb4:	011b      	lsls	r3, r3, #4
 8016fb6:	3332      	adds	r3, #50	; 0x32
 8016fb8:	4a07      	ldr	r2, [pc, #28]	; (8016fd8 <UART_SetConfig+0x118>)
 8016fba:	fba2 2303 	umull	r2, r3, r2, r3
 8016fbe:	095b      	lsrs	r3, r3, #5
 8016fc0:	f003 020f 	and.w	r2, r3, #15
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	440a      	add	r2, r1
 8016fca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8016fcc:	bf00      	nop
 8016fce:	3710      	adds	r7, #16
 8016fd0:	46bd      	mov	sp, r7
 8016fd2:	bd80      	pop	{r7, pc}
 8016fd4:	40013800 	.word	0x40013800
 8016fd8:	51eb851f 	.word	0x51eb851f

08016fdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8016fdc:	b084      	sub	sp, #16
 8016fde:	b480      	push	{r7}
 8016fe0:	b083      	sub	sp, #12
 8016fe2:	af00      	add	r7, sp, #0
 8016fe4:	6078      	str	r0, [r7, #4]
 8016fe6:	f107 0014 	add.w	r0, r7, #20
 8016fea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8016fee:	2300      	movs	r3, #0
}
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	370c      	adds	r7, #12
 8016ff4:	46bd      	mov	sp, r7
 8016ff6:	bc80      	pop	{r7}
 8016ff8:	b004      	add	sp, #16
 8016ffa:	4770      	bx	lr

08016ffc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8016ffc:	b480      	push	{r7}
 8016ffe:	b085      	sub	sp, #20
 8017000:	af00      	add	r7, sp, #0
 8017002:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	2200      	movs	r2, #0
 8017008:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801700c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8017010:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	b29a      	uxth	r2, r3
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801701c:	2300      	movs	r3, #0
}
 801701e:	4618      	mov	r0, r3
 8017020:	3714      	adds	r7, #20
 8017022:	46bd      	mov	sp, r7
 8017024:	bc80      	pop	{r7}
 8017026:	4770      	bx	lr

08017028 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8017028:	b480      	push	{r7}
 801702a:	b085      	sub	sp, #20
 801702c:	af00      	add	r7, sp, #0
 801702e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8017030:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8017034:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801703c:	b29a      	uxth	r2, r3
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	b29b      	uxth	r3, r3
 8017042:	43db      	mvns	r3, r3
 8017044:	b29b      	uxth	r3, r3
 8017046:	4013      	ands	r3, r2
 8017048:	b29a      	uxth	r2, r3
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8017050:	2300      	movs	r3, #0
}
 8017052:	4618      	mov	r0, r3
 8017054:	3714      	adds	r7, #20
 8017056:	46bd      	mov	sp, r7
 8017058:	bc80      	pop	{r7}
 801705a:	4770      	bx	lr

0801705c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 801705c:	b480      	push	{r7}
 801705e:	b083      	sub	sp, #12
 8017060:	af00      	add	r7, sp, #0
 8017062:	6078      	str	r0, [r7, #4]
 8017064:	460b      	mov	r3, r1
 8017066:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8017068:	2300      	movs	r3, #0
}
 801706a:	4618      	mov	r0, r3
 801706c:	370c      	adds	r7, #12
 801706e:	46bd      	mov	sp, r7
 8017070:	bc80      	pop	{r7}
 8017072:	4770      	bx	lr

08017074 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8017074:	b084      	sub	sp, #16
 8017076:	b480      	push	{r7}
 8017078:	b083      	sub	sp, #12
 801707a:	af00      	add	r7, sp, #0
 801707c:	6078      	str	r0, [r7, #4]
 801707e:	f107 0014 	add.w	r0, r7, #20
 8017082:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	2201      	movs	r2, #1
 801708a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	2200      	movs	r2, #0
 8017092:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	2200      	movs	r2, #0
 801709a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	2200      	movs	r2, #0
 80170a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80170a6:	2300      	movs	r3, #0
}
 80170a8:	4618      	mov	r0, r3
 80170aa:	370c      	adds	r7, #12
 80170ac:	46bd      	mov	sp, r7
 80170ae:	bc80      	pop	{r7}
 80170b0:	b004      	add	sp, #16
 80170b2:	4770      	bx	lr

080170b4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80170b4:	b480      	push	{r7}
 80170b6:	b09d      	sub	sp, #116	; 0x74
 80170b8:	af00      	add	r7, sp, #0
 80170ba:	6078      	str	r0, [r7, #4]
 80170bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80170be:	2300      	movs	r3, #0
 80170c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80170c4:	687a      	ldr	r2, [r7, #4]
 80170c6:	683b      	ldr	r3, [r7, #0]
 80170c8:	781b      	ldrb	r3, [r3, #0]
 80170ca:	009b      	lsls	r3, r3, #2
 80170cc:	4413      	add	r3, r2
 80170ce:	881b      	ldrh	r3, [r3, #0]
 80170d0:	b29b      	uxth	r3, r3
 80170d2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80170d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80170da:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80170de:	683b      	ldr	r3, [r7, #0]
 80170e0:	78db      	ldrb	r3, [r3, #3]
 80170e2:	2b03      	cmp	r3, #3
 80170e4:	d81f      	bhi.n	8017126 <USB_ActivateEndpoint+0x72>
 80170e6:	a201      	add	r2, pc, #4	; (adr r2, 80170ec <USB_ActivateEndpoint+0x38>)
 80170e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170ec:	080170fd 	.word	0x080170fd
 80170f0:	08017119 	.word	0x08017119
 80170f4:	0801712f 	.word	0x0801712f
 80170f8:	0801710b 	.word	0x0801710b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80170fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8017100:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017104:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8017108:	e012      	b.n	8017130 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801710a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801710e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8017112:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8017116:	e00b      	b.n	8017130 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8017118:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801711c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8017120:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8017124:	e004      	b.n	8017130 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8017126:	2301      	movs	r3, #1
 8017128:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 801712c:	e000      	b.n	8017130 <USB_ActivateEndpoint+0x7c>
      break;
 801712e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8017130:	687a      	ldr	r2, [r7, #4]
 8017132:	683b      	ldr	r3, [r7, #0]
 8017134:	781b      	ldrb	r3, [r3, #0]
 8017136:	009b      	lsls	r3, r3, #2
 8017138:	441a      	add	r2, r3
 801713a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801713e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8017142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8017146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801714a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801714e:	b29b      	uxth	r3, r3
 8017150:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8017152:	687a      	ldr	r2, [r7, #4]
 8017154:	683b      	ldr	r3, [r7, #0]
 8017156:	781b      	ldrb	r3, [r3, #0]
 8017158:	009b      	lsls	r3, r3, #2
 801715a:	4413      	add	r3, r2
 801715c:	881b      	ldrh	r3, [r3, #0]
 801715e:	b29b      	uxth	r3, r3
 8017160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017168:	b29a      	uxth	r2, r3
 801716a:	683b      	ldr	r3, [r7, #0]
 801716c:	781b      	ldrb	r3, [r3, #0]
 801716e:	b29b      	uxth	r3, r3
 8017170:	4313      	orrs	r3, r2
 8017172:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8017176:	687a      	ldr	r2, [r7, #4]
 8017178:	683b      	ldr	r3, [r7, #0]
 801717a:	781b      	ldrb	r3, [r3, #0]
 801717c:	009b      	lsls	r3, r3, #2
 801717e:	441a      	add	r2, r3
 8017180:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8017184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8017188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801718c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017194:	b29b      	uxth	r3, r3
 8017196:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8017198:	683b      	ldr	r3, [r7, #0]
 801719a:	7b1b      	ldrb	r3, [r3, #12]
 801719c:	2b00      	cmp	r3, #0
 801719e:	f040 8178 	bne.w	8017492 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80171a2:	683b      	ldr	r3, [r7, #0]
 80171a4:	785b      	ldrb	r3, [r3, #1]
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	f000 8084 	beq.w	80172b4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	61bb      	str	r3, [r7, #24]
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80171b6:	b29b      	uxth	r3, r3
 80171b8:	461a      	mov	r2, r3
 80171ba:	69bb      	ldr	r3, [r7, #24]
 80171bc:	4413      	add	r3, r2
 80171be:	61bb      	str	r3, [r7, #24]
 80171c0:	683b      	ldr	r3, [r7, #0]
 80171c2:	781b      	ldrb	r3, [r3, #0]
 80171c4:	011a      	lsls	r2, r3, #4
 80171c6:	69bb      	ldr	r3, [r7, #24]
 80171c8:	4413      	add	r3, r2
 80171ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80171ce:	617b      	str	r3, [r7, #20]
 80171d0:	683b      	ldr	r3, [r7, #0]
 80171d2:	88db      	ldrh	r3, [r3, #6]
 80171d4:	085b      	lsrs	r3, r3, #1
 80171d6:	b29b      	uxth	r3, r3
 80171d8:	005b      	lsls	r3, r3, #1
 80171da:	b29a      	uxth	r2, r3
 80171dc:	697b      	ldr	r3, [r7, #20]
 80171de:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80171e0:	687a      	ldr	r2, [r7, #4]
 80171e2:	683b      	ldr	r3, [r7, #0]
 80171e4:	781b      	ldrb	r3, [r3, #0]
 80171e6:	009b      	lsls	r3, r3, #2
 80171e8:	4413      	add	r3, r2
 80171ea:	881b      	ldrh	r3, [r3, #0]
 80171ec:	827b      	strh	r3, [r7, #18]
 80171ee:	8a7b      	ldrh	r3, [r7, #18]
 80171f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d01b      	beq.n	8017230 <USB_ActivateEndpoint+0x17c>
 80171f8:	687a      	ldr	r2, [r7, #4]
 80171fa:	683b      	ldr	r3, [r7, #0]
 80171fc:	781b      	ldrb	r3, [r3, #0]
 80171fe:	009b      	lsls	r3, r3, #2
 8017200:	4413      	add	r3, r2
 8017202:	881b      	ldrh	r3, [r3, #0]
 8017204:	b29b      	uxth	r3, r3
 8017206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801720a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801720e:	823b      	strh	r3, [r7, #16]
 8017210:	687a      	ldr	r2, [r7, #4]
 8017212:	683b      	ldr	r3, [r7, #0]
 8017214:	781b      	ldrb	r3, [r3, #0]
 8017216:	009b      	lsls	r3, r3, #2
 8017218:	441a      	add	r2, r3
 801721a:	8a3b      	ldrh	r3, [r7, #16]
 801721c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8017220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8017224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017228:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801722c:	b29b      	uxth	r3, r3
 801722e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8017230:	683b      	ldr	r3, [r7, #0]
 8017232:	78db      	ldrb	r3, [r3, #3]
 8017234:	2b01      	cmp	r3, #1
 8017236:	d020      	beq.n	801727a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8017238:	687a      	ldr	r2, [r7, #4]
 801723a:	683b      	ldr	r3, [r7, #0]
 801723c:	781b      	ldrb	r3, [r3, #0]
 801723e:	009b      	lsls	r3, r3, #2
 8017240:	4413      	add	r3, r2
 8017242:	881b      	ldrh	r3, [r3, #0]
 8017244:	b29b      	uxth	r3, r3
 8017246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801724a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801724e:	81bb      	strh	r3, [r7, #12]
 8017250:	89bb      	ldrh	r3, [r7, #12]
 8017252:	f083 0320 	eor.w	r3, r3, #32
 8017256:	81bb      	strh	r3, [r7, #12]
 8017258:	687a      	ldr	r2, [r7, #4]
 801725a:	683b      	ldr	r3, [r7, #0]
 801725c:	781b      	ldrb	r3, [r3, #0]
 801725e:	009b      	lsls	r3, r3, #2
 8017260:	441a      	add	r2, r3
 8017262:	89bb      	ldrh	r3, [r7, #12]
 8017264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8017268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801726c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017274:	b29b      	uxth	r3, r3
 8017276:	8013      	strh	r3, [r2, #0]
 8017278:	e2d5      	b.n	8017826 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801727a:	687a      	ldr	r2, [r7, #4]
 801727c:	683b      	ldr	r3, [r7, #0]
 801727e:	781b      	ldrb	r3, [r3, #0]
 8017280:	009b      	lsls	r3, r3, #2
 8017282:	4413      	add	r3, r2
 8017284:	881b      	ldrh	r3, [r3, #0]
 8017286:	b29b      	uxth	r3, r3
 8017288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801728c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017290:	81fb      	strh	r3, [r7, #14]
 8017292:	687a      	ldr	r2, [r7, #4]
 8017294:	683b      	ldr	r3, [r7, #0]
 8017296:	781b      	ldrb	r3, [r3, #0]
 8017298:	009b      	lsls	r3, r3, #2
 801729a:	441a      	add	r2, r3
 801729c:	89fb      	ldrh	r3, [r7, #14]
 801729e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80172a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80172a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80172aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80172ae:	b29b      	uxth	r3, r3
 80172b0:	8013      	strh	r3, [r2, #0]
 80172b2:	e2b8      	b.n	8017826 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	633b      	str	r3, [r7, #48]	; 0x30
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80172be:	b29b      	uxth	r3, r3
 80172c0:	461a      	mov	r2, r3
 80172c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172c4:	4413      	add	r3, r2
 80172c6:	633b      	str	r3, [r7, #48]	; 0x30
 80172c8:	683b      	ldr	r3, [r7, #0]
 80172ca:	781b      	ldrb	r3, [r3, #0]
 80172cc:	011a      	lsls	r2, r3, #4
 80172ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172d0:	4413      	add	r3, r2
 80172d2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80172d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80172d8:	683b      	ldr	r3, [r7, #0]
 80172da:	88db      	ldrh	r3, [r3, #6]
 80172dc:	085b      	lsrs	r3, r3, #1
 80172de:	b29b      	uxth	r3, r3
 80172e0:	005b      	lsls	r3, r3, #1
 80172e2:	b29a      	uxth	r2, r3
 80172e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172e6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80172f2:	b29b      	uxth	r3, r3
 80172f4:	461a      	mov	r2, r3
 80172f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172f8:	4413      	add	r3, r2
 80172fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80172fc:	683b      	ldr	r3, [r7, #0]
 80172fe:	781b      	ldrb	r3, [r3, #0]
 8017300:	011a      	lsls	r2, r3, #4
 8017302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017304:	4413      	add	r3, r2
 8017306:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801730a:	627b      	str	r3, [r7, #36]	; 0x24
 801730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801730e:	881b      	ldrh	r3, [r3, #0]
 8017310:	b29b      	uxth	r3, r3
 8017312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8017316:	b29a      	uxth	r2, r3
 8017318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801731a:	801a      	strh	r2, [r3, #0]
 801731c:	683b      	ldr	r3, [r7, #0]
 801731e:	691b      	ldr	r3, [r3, #16]
 8017320:	2b3e      	cmp	r3, #62	; 0x3e
 8017322:	d91d      	bls.n	8017360 <USB_ActivateEndpoint+0x2ac>
 8017324:	683b      	ldr	r3, [r7, #0]
 8017326:	691b      	ldr	r3, [r3, #16]
 8017328:	095b      	lsrs	r3, r3, #5
 801732a:	66bb      	str	r3, [r7, #104]	; 0x68
 801732c:	683b      	ldr	r3, [r7, #0]
 801732e:	691b      	ldr	r3, [r3, #16]
 8017330:	f003 031f 	and.w	r3, r3, #31
 8017334:	2b00      	cmp	r3, #0
 8017336:	d102      	bne.n	801733e <USB_ActivateEndpoint+0x28a>
 8017338:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801733a:	3b01      	subs	r3, #1
 801733c:	66bb      	str	r3, [r7, #104]	; 0x68
 801733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017340:	881b      	ldrh	r3, [r3, #0]
 8017342:	b29a      	uxth	r2, r3
 8017344:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017346:	b29b      	uxth	r3, r3
 8017348:	029b      	lsls	r3, r3, #10
 801734a:	b29b      	uxth	r3, r3
 801734c:	4313      	orrs	r3, r2
 801734e:	b29b      	uxth	r3, r3
 8017350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8017354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8017358:	b29a      	uxth	r2, r3
 801735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801735c:	801a      	strh	r2, [r3, #0]
 801735e:	e026      	b.n	80173ae <USB_ActivateEndpoint+0x2fa>
 8017360:	683b      	ldr	r3, [r7, #0]
 8017362:	691b      	ldr	r3, [r3, #16]
 8017364:	2b00      	cmp	r3, #0
 8017366:	d10a      	bne.n	801737e <USB_ActivateEndpoint+0x2ca>
 8017368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801736a:	881b      	ldrh	r3, [r3, #0]
 801736c:	b29b      	uxth	r3, r3
 801736e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8017372:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8017376:	b29a      	uxth	r2, r3
 8017378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801737a:	801a      	strh	r2, [r3, #0]
 801737c:	e017      	b.n	80173ae <USB_ActivateEndpoint+0x2fa>
 801737e:	683b      	ldr	r3, [r7, #0]
 8017380:	691b      	ldr	r3, [r3, #16]
 8017382:	085b      	lsrs	r3, r3, #1
 8017384:	66bb      	str	r3, [r7, #104]	; 0x68
 8017386:	683b      	ldr	r3, [r7, #0]
 8017388:	691b      	ldr	r3, [r3, #16]
 801738a:	f003 0301 	and.w	r3, r3, #1
 801738e:	2b00      	cmp	r3, #0
 8017390:	d002      	beq.n	8017398 <USB_ActivateEndpoint+0x2e4>
 8017392:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017394:	3301      	adds	r3, #1
 8017396:	66bb      	str	r3, [r7, #104]	; 0x68
 8017398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801739a:	881b      	ldrh	r3, [r3, #0]
 801739c:	b29a      	uxth	r2, r3
 801739e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80173a0:	b29b      	uxth	r3, r3
 80173a2:	029b      	lsls	r3, r3, #10
 80173a4:	b29b      	uxth	r3, r3
 80173a6:	4313      	orrs	r3, r2
 80173a8:	b29a      	uxth	r2, r3
 80173aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80173ae:	687a      	ldr	r2, [r7, #4]
 80173b0:	683b      	ldr	r3, [r7, #0]
 80173b2:	781b      	ldrb	r3, [r3, #0]
 80173b4:	009b      	lsls	r3, r3, #2
 80173b6:	4413      	add	r3, r2
 80173b8:	881b      	ldrh	r3, [r3, #0]
 80173ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80173bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80173be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d01b      	beq.n	80173fe <USB_ActivateEndpoint+0x34a>
 80173c6:	687a      	ldr	r2, [r7, #4]
 80173c8:	683b      	ldr	r3, [r7, #0]
 80173ca:	781b      	ldrb	r3, [r3, #0]
 80173cc:	009b      	lsls	r3, r3, #2
 80173ce:	4413      	add	r3, r2
 80173d0:	881b      	ldrh	r3, [r3, #0]
 80173d2:	b29b      	uxth	r3, r3
 80173d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80173d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80173dc:	843b      	strh	r3, [r7, #32]
 80173de:	687a      	ldr	r2, [r7, #4]
 80173e0:	683b      	ldr	r3, [r7, #0]
 80173e2:	781b      	ldrb	r3, [r3, #0]
 80173e4:	009b      	lsls	r3, r3, #2
 80173e6:	441a      	add	r2, r3
 80173e8:	8c3b      	ldrh	r3, [r7, #32]
 80173ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80173ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80173f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80173f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80173fa:	b29b      	uxth	r3, r3
 80173fc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80173fe:	683b      	ldr	r3, [r7, #0]
 8017400:	781b      	ldrb	r3, [r3, #0]
 8017402:	2b00      	cmp	r3, #0
 8017404:	d124      	bne.n	8017450 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8017406:	687a      	ldr	r2, [r7, #4]
 8017408:	683b      	ldr	r3, [r7, #0]
 801740a:	781b      	ldrb	r3, [r3, #0]
 801740c:	009b      	lsls	r3, r3, #2
 801740e:	4413      	add	r3, r2
 8017410:	881b      	ldrh	r3, [r3, #0]
 8017412:	b29b      	uxth	r3, r3
 8017414:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8017418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801741c:	83bb      	strh	r3, [r7, #28]
 801741e:	8bbb      	ldrh	r3, [r7, #28]
 8017420:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8017424:	83bb      	strh	r3, [r7, #28]
 8017426:	8bbb      	ldrh	r3, [r7, #28]
 8017428:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801742c:	83bb      	strh	r3, [r7, #28]
 801742e:	687a      	ldr	r2, [r7, #4]
 8017430:	683b      	ldr	r3, [r7, #0]
 8017432:	781b      	ldrb	r3, [r3, #0]
 8017434:	009b      	lsls	r3, r3, #2
 8017436:	441a      	add	r2, r3
 8017438:	8bbb      	ldrh	r3, [r7, #28]
 801743a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801743e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8017442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801744a:	b29b      	uxth	r3, r3
 801744c:	8013      	strh	r3, [r2, #0]
 801744e:	e1ea      	b.n	8017826 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8017450:	687a      	ldr	r2, [r7, #4]
 8017452:	683b      	ldr	r3, [r7, #0]
 8017454:	781b      	ldrb	r3, [r3, #0]
 8017456:	009b      	lsls	r3, r3, #2
 8017458:	4413      	add	r3, r2
 801745a:	881b      	ldrh	r3, [r3, #0]
 801745c:	b29b      	uxth	r3, r3
 801745e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8017462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017466:	83fb      	strh	r3, [r7, #30]
 8017468:	8bfb      	ldrh	r3, [r7, #30]
 801746a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801746e:	83fb      	strh	r3, [r7, #30]
 8017470:	687a      	ldr	r2, [r7, #4]
 8017472:	683b      	ldr	r3, [r7, #0]
 8017474:	781b      	ldrb	r3, [r3, #0]
 8017476:	009b      	lsls	r3, r3, #2
 8017478:	441a      	add	r2, r3
 801747a:	8bfb      	ldrh	r3, [r7, #30]
 801747c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8017480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8017484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801748c:	b29b      	uxth	r3, r3
 801748e:	8013      	strh	r3, [r2, #0]
 8017490:	e1c9      	b.n	8017826 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8017492:	683b      	ldr	r3, [r7, #0]
 8017494:	78db      	ldrb	r3, [r3, #3]
 8017496:	2b02      	cmp	r3, #2
 8017498:	d11e      	bne.n	80174d8 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801749a:	687a      	ldr	r2, [r7, #4]
 801749c:	683b      	ldr	r3, [r7, #0]
 801749e:	781b      	ldrb	r3, [r3, #0]
 80174a0:	009b      	lsls	r3, r3, #2
 80174a2:	4413      	add	r3, r2
 80174a4:	881b      	ldrh	r3, [r3, #0]
 80174a6:	b29b      	uxth	r3, r3
 80174a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80174ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80174b0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80174b4:	687a      	ldr	r2, [r7, #4]
 80174b6:	683b      	ldr	r3, [r7, #0]
 80174b8:	781b      	ldrb	r3, [r3, #0]
 80174ba:	009b      	lsls	r3, r3, #2
 80174bc:	441a      	add	r2, r3
 80174be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80174c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80174c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80174ca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80174ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80174d2:	b29b      	uxth	r3, r3
 80174d4:	8013      	strh	r3, [r2, #0]
 80174d6:	e01d      	b.n	8017514 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80174d8:	687a      	ldr	r2, [r7, #4]
 80174da:	683b      	ldr	r3, [r7, #0]
 80174dc:	781b      	ldrb	r3, [r3, #0]
 80174de:	009b      	lsls	r3, r3, #2
 80174e0:	4413      	add	r3, r2
 80174e2:	881b      	ldrh	r3, [r3, #0]
 80174e4:	b29b      	uxth	r3, r3
 80174e6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80174ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80174ee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80174f2:	687a      	ldr	r2, [r7, #4]
 80174f4:	683b      	ldr	r3, [r7, #0]
 80174f6:	781b      	ldrb	r3, [r3, #0]
 80174f8:	009b      	lsls	r3, r3, #2
 80174fa:	441a      	add	r2, r3
 80174fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8017500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8017504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8017508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801750c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017510:	b29b      	uxth	r3, r3
 8017512:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801751e:	b29b      	uxth	r3, r3
 8017520:	461a      	mov	r2, r3
 8017522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017524:	4413      	add	r3, r2
 8017526:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017528:	683b      	ldr	r3, [r7, #0]
 801752a:	781b      	ldrb	r3, [r3, #0]
 801752c:	011a      	lsls	r2, r3, #4
 801752e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017530:	4413      	add	r3, r2
 8017532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8017536:	65bb      	str	r3, [r7, #88]	; 0x58
 8017538:	683b      	ldr	r3, [r7, #0]
 801753a:	891b      	ldrh	r3, [r3, #8]
 801753c:	085b      	lsrs	r3, r3, #1
 801753e:	b29b      	uxth	r3, r3
 8017540:	005b      	lsls	r3, r3, #1
 8017542:	b29a      	uxth	r2, r3
 8017544:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017546:	801a      	strh	r2, [r3, #0]
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	657b      	str	r3, [r7, #84]	; 0x54
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8017552:	b29b      	uxth	r3, r3
 8017554:	461a      	mov	r2, r3
 8017556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017558:	4413      	add	r3, r2
 801755a:	657b      	str	r3, [r7, #84]	; 0x54
 801755c:	683b      	ldr	r3, [r7, #0]
 801755e:	781b      	ldrb	r3, [r3, #0]
 8017560:	011a      	lsls	r2, r3, #4
 8017562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017564:	4413      	add	r3, r2
 8017566:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 801756a:	653b      	str	r3, [r7, #80]	; 0x50
 801756c:	683b      	ldr	r3, [r7, #0]
 801756e:	895b      	ldrh	r3, [r3, #10]
 8017570:	085b      	lsrs	r3, r3, #1
 8017572:	b29b      	uxth	r3, r3
 8017574:	005b      	lsls	r3, r3, #1
 8017576:	b29a      	uxth	r2, r3
 8017578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801757a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 801757c:	683b      	ldr	r3, [r7, #0]
 801757e:	785b      	ldrb	r3, [r3, #1]
 8017580:	2b00      	cmp	r3, #0
 8017582:	f040 8093 	bne.w	80176ac <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8017586:	687a      	ldr	r2, [r7, #4]
 8017588:	683b      	ldr	r3, [r7, #0]
 801758a:	781b      	ldrb	r3, [r3, #0]
 801758c:	009b      	lsls	r3, r3, #2
 801758e:	4413      	add	r3, r2
 8017590:	881b      	ldrh	r3, [r3, #0]
 8017592:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8017596:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801759a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d01b      	beq.n	80175da <USB_ActivateEndpoint+0x526>
 80175a2:	687a      	ldr	r2, [r7, #4]
 80175a4:	683b      	ldr	r3, [r7, #0]
 80175a6:	781b      	ldrb	r3, [r3, #0]
 80175a8:	009b      	lsls	r3, r3, #2
 80175aa:	4413      	add	r3, r2
 80175ac:	881b      	ldrh	r3, [r3, #0]
 80175ae:	b29b      	uxth	r3, r3
 80175b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80175b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80175b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80175ba:	687a      	ldr	r2, [r7, #4]
 80175bc:	683b      	ldr	r3, [r7, #0]
 80175be:	781b      	ldrb	r3, [r3, #0]
 80175c0:	009b      	lsls	r3, r3, #2
 80175c2:	441a      	add	r2, r3
 80175c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80175c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80175ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80175ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80175d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80175d6:	b29b      	uxth	r3, r3
 80175d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80175da:	687a      	ldr	r2, [r7, #4]
 80175dc:	683b      	ldr	r3, [r7, #0]
 80175de:	781b      	ldrb	r3, [r3, #0]
 80175e0:	009b      	lsls	r3, r3, #2
 80175e2:	4413      	add	r3, r2
 80175e4:	881b      	ldrh	r3, [r3, #0]
 80175e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80175e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80175ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d01b      	beq.n	801762a <USB_ActivateEndpoint+0x576>
 80175f2:	687a      	ldr	r2, [r7, #4]
 80175f4:	683b      	ldr	r3, [r7, #0]
 80175f6:	781b      	ldrb	r3, [r3, #0]
 80175f8:	009b      	lsls	r3, r3, #2
 80175fa:	4413      	add	r3, r2
 80175fc:	881b      	ldrh	r3, [r3, #0]
 80175fe:	b29b      	uxth	r3, r3
 8017600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017608:	877b      	strh	r3, [r7, #58]	; 0x3a
 801760a:	687a      	ldr	r2, [r7, #4]
 801760c:	683b      	ldr	r3, [r7, #0]
 801760e:	781b      	ldrb	r3, [r3, #0]
 8017610:	009b      	lsls	r3, r3, #2
 8017612:	441a      	add	r2, r3
 8017614:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801761a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801761e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017622:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8017626:	b29b      	uxth	r3, r3
 8017628:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801762a:	687a      	ldr	r2, [r7, #4]
 801762c:	683b      	ldr	r3, [r7, #0]
 801762e:	781b      	ldrb	r3, [r3, #0]
 8017630:	009b      	lsls	r3, r3, #2
 8017632:	4413      	add	r3, r2
 8017634:	881b      	ldrh	r3, [r3, #0]
 8017636:	b29b      	uxth	r3, r3
 8017638:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801763c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017640:	873b      	strh	r3, [r7, #56]	; 0x38
 8017642:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017644:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8017648:	873b      	strh	r3, [r7, #56]	; 0x38
 801764a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801764c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8017650:	873b      	strh	r3, [r7, #56]	; 0x38
 8017652:	687a      	ldr	r2, [r7, #4]
 8017654:	683b      	ldr	r3, [r7, #0]
 8017656:	781b      	ldrb	r3, [r3, #0]
 8017658:	009b      	lsls	r3, r3, #2
 801765a:	441a      	add	r2, r3
 801765c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801765e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8017662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8017666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801766a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801766e:	b29b      	uxth	r3, r3
 8017670:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8017672:	687a      	ldr	r2, [r7, #4]
 8017674:	683b      	ldr	r3, [r7, #0]
 8017676:	781b      	ldrb	r3, [r3, #0]
 8017678:	009b      	lsls	r3, r3, #2
 801767a:	4413      	add	r3, r2
 801767c:	881b      	ldrh	r3, [r3, #0]
 801767e:	b29b      	uxth	r3, r3
 8017680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017688:	86fb      	strh	r3, [r7, #54]	; 0x36
 801768a:	687a      	ldr	r2, [r7, #4]
 801768c:	683b      	ldr	r3, [r7, #0]
 801768e:	781b      	ldrb	r3, [r3, #0]
 8017690:	009b      	lsls	r3, r3, #2
 8017692:	441a      	add	r2, r3
 8017694:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801769a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801769e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80176a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80176a6:	b29b      	uxth	r3, r3
 80176a8:	8013      	strh	r3, [r2, #0]
 80176aa:	e0bc      	b.n	8017826 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80176ac:	687a      	ldr	r2, [r7, #4]
 80176ae:	683b      	ldr	r3, [r7, #0]
 80176b0:	781b      	ldrb	r3, [r3, #0]
 80176b2:	009b      	lsls	r3, r3, #2
 80176b4:	4413      	add	r3, r2
 80176b6:	881b      	ldrh	r3, [r3, #0]
 80176b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80176bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80176c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d01d      	beq.n	8017704 <USB_ActivateEndpoint+0x650>
 80176c8:	687a      	ldr	r2, [r7, #4]
 80176ca:	683b      	ldr	r3, [r7, #0]
 80176cc:	781b      	ldrb	r3, [r3, #0]
 80176ce:	009b      	lsls	r3, r3, #2
 80176d0:	4413      	add	r3, r2
 80176d2:	881b      	ldrh	r3, [r3, #0]
 80176d4:	b29b      	uxth	r3, r3
 80176d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80176da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80176de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80176e2:	687a      	ldr	r2, [r7, #4]
 80176e4:	683b      	ldr	r3, [r7, #0]
 80176e6:	781b      	ldrb	r3, [r3, #0]
 80176e8:	009b      	lsls	r3, r3, #2
 80176ea:	441a      	add	r2, r3
 80176ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80176f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80176f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80176f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80176fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017700:	b29b      	uxth	r3, r3
 8017702:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8017704:	687a      	ldr	r2, [r7, #4]
 8017706:	683b      	ldr	r3, [r7, #0]
 8017708:	781b      	ldrb	r3, [r3, #0]
 801770a:	009b      	lsls	r3, r3, #2
 801770c:	4413      	add	r3, r2
 801770e:	881b      	ldrh	r3, [r3, #0]
 8017710:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8017714:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8017718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801771c:	2b00      	cmp	r3, #0
 801771e:	d01d      	beq.n	801775c <USB_ActivateEndpoint+0x6a8>
 8017720:	687a      	ldr	r2, [r7, #4]
 8017722:	683b      	ldr	r3, [r7, #0]
 8017724:	781b      	ldrb	r3, [r3, #0]
 8017726:	009b      	lsls	r3, r3, #2
 8017728:	4413      	add	r3, r2
 801772a:	881b      	ldrh	r3, [r3, #0]
 801772c:	b29b      	uxth	r3, r3
 801772e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017736:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801773a:	687a      	ldr	r2, [r7, #4]
 801773c:	683b      	ldr	r3, [r7, #0]
 801773e:	781b      	ldrb	r3, [r3, #0]
 8017740:	009b      	lsls	r3, r3, #2
 8017742:	441a      	add	r2, r3
 8017744:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8017748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801774c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8017750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017754:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8017758:	b29b      	uxth	r3, r3
 801775a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801775c:	683b      	ldr	r3, [r7, #0]
 801775e:	78db      	ldrb	r3, [r3, #3]
 8017760:	2b01      	cmp	r3, #1
 8017762:	d024      	beq.n	80177ae <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8017764:	687a      	ldr	r2, [r7, #4]
 8017766:	683b      	ldr	r3, [r7, #0]
 8017768:	781b      	ldrb	r3, [r3, #0]
 801776a:	009b      	lsls	r3, r3, #2
 801776c:	4413      	add	r3, r2
 801776e:	881b      	ldrh	r3, [r3, #0]
 8017770:	b29b      	uxth	r3, r3
 8017772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801777a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801777e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017782:	f083 0320 	eor.w	r3, r3, #32
 8017786:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801778a:	687a      	ldr	r2, [r7, #4]
 801778c:	683b      	ldr	r3, [r7, #0]
 801778e:	781b      	ldrb	r3, [r3, #0]
 8017790:	009b      	lsls	r3, r3, #2
 8017792:	441a      	add	r2, r3
 8017794:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801779c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80177a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80177a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80177a8:	b29b      	uxth	r3, r3
 80177aa:	8013      	strh	r3, [r2, #0]
 80177ac:	e01d      	b.n	80177ea <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80177ae:	687a      	ldr	r2, [r7, #4]
 80177b0:	683b      	ldr	r3, [r7, #0]
 80177b2:	781b      	ldrb	r3, [r3, #0]
 80177b4:	009b      	lsls	r3, r3, #2
 80177b6:	4413      	add	r3, r2
 80177b8:	881b      	ldrh	r3, [r3, #0]
 80177ba:	b29b      	uxth	r3, r3
 80177bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80177c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80177c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80177c8:	687a      	ldr	r2, [r7, #4]
 80177ca:	683b      	ldr	r3, [r7, #0]
 80177cc:	781b      	ldrb	r3, [r3, #0]
 80177ce:	009b      	lsls	r3, r3, #2
 80177d0:	441a      	add	r2, r3
 80177d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80177d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80177da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80177de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80177e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80177e6:	b29b      	uxth	r3, r3
 80177e8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80177ea:	687a      	ldr	r2, [r7, #4]
 80177ec:	683b      	ldr	r3, [r7, #0]
 80177ee:	781b      	ldrb	r3, [r3, #0]
 80177f0:	009b      	lsls	r3, r3, #2
 80177f2:	4413      	add	r3, r2
 80177f4:	881b      	ldrh	r3, [r3, #0]
 80177f6:	b29b      	uxth	r3, r3
 80177f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80177fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017800:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017804:	687a      	ldr	r2, [r7, #4]
 8017806:	683b      	ldr	r3, [r7, #0]
 8017808:	781b      	ldrb	r3, [r3, #0]
 801780a:	009b      	lsls	r3, r3, #2
 801780c:	441a      	add	r2, r3
 801780e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8017816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801781a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801781e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017822:	b29b      	uxth	r3, r3
 8017824:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8017826:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 801782a:	4618      	mov	r0, r3
 801782c:	3774      	adds	r7, #116	; 0x74
 801782e:	46bd      	mov	sp, r7
 8017830:	bc80      	pop	{r7}
 8017832:	4770      	bx	lr

08017834 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8017834:	b480      	push	{r7}
 8017836:	b08d      	sub	sp, #52	; 0x34
 8017838:	af00      	add	r7, sp, #0
 801783a:	6078      	str	r0, [r7, #4]
 801783c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801783e:	683b      	ldr	r3, [r7, #0]
 8017840:	7b1b      	ldrb	r3, [r3, #12]
 8017842:	2b00      	cmp	r3, #0
 8017844:	f040 808e 	bne.w	8017964 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8017848:	683b      	ldr	r3, [r7, #0]
 801784a:	785b      	ldrb	r3, [r3, #1]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d044      	beq.n	80178da <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8017850:	687a      	ldr	r2, [r7, #4]
 8017852:	683b      	ldr	r3, [r7, #0]
 8017854:	781b      	ldrb	r3, [r3, #0]
 8017856:	009b      	lsls	r3, r3, #2
 8017858:	4413      	add	r3, r2
 801785a:	881b      	ldrh	r3, [r3, #0]
 801785c:	81bb      	strh	r3, [r7, #12]
 801785e:	89bb      	ldrh	r3, [r7, #12]
 8017860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017864:	2b00      	cmp	r3, #0
 8017866:	d01b      	beq.n	80178a0 <USB_DeactivateEndpoint+0x6c>
 8017868:	687a      	ldr	r2, [r7, #4]
 801786a:	683b      	ldr	r3, [r7, #0]
 801786c:	781b      	ldrb	r3, [r3, #0]
 801786e:	009b      	lsls	r3, r3, #2
 8017870:	4413      	add	r3, r2
 8017872:	881b      	ldrh	r3, [r3, #0]
 8017874:	b29b      	uxth	r3, r3
 8017876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801787a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801787e:	817b      	strh	r3, [r7, #10]
 8017880:	687a      	ldr	r2, [r7, #4]
 8017882:	683b      	ldr	r3, [r7, #0]
 8017884:	781b      	ldrb	r3, [r3, #0]
 8017886:	009b      	lsls	r3, r3, #2
 8017888:	441a      	add	r2, r3
 801788a:	897b      	ldrh	r3, [r7, #10]
 801788c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8017890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8017894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017898:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801789c:	b29b      	uxth	r3, r3
 801789e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80178a0:	687a      	ldr	r2, [r7, #4]
 80178a2:	683b      	ldr	r3, [r7, #0]
 80178a4:	781b      	ldrb	r3, [r3, #0]
 80178a6:	009b      	lsls	r3, r3, #2
 80178a8:	4413      	add	r3, r2
 80178aa:	881b      	ldrh	r3, [r3, #0]
 80178ac:	b29b      	uxth	r3, r3
 80178ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80178b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80178b6:	813b      	strh	r3, [r7, #8]
 80178b8:	687a      	ldr	r2, [r7, #4]
 80178ba:	683b      	ldr	r3, [r7, #0]
 80178bc:	781b      	ldrb	r3, [r3, #0]
 80178be:	009b      	lsls	r3, r3, #2
 80178c0:	441a      	add	r2, r3
 80178c2:	893b      	ldrh	r3, [r7, #8]
 80178c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80178c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80178cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80178d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80178d4:	b29b      	uxth	r3, r3
 80178d6:	8013      	strh	r3, [r2, #0]
 80178d8:	e192      	b.n	8017c00 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80178da:	687a      	ldr	r2, [r7, #4]
 80178dc:	683b      	ldr	r3, [r7, #0]
 80178de:	781b      	ldrb	r3, [r3, #0]
 80178e0:	009b      	lsls	r3, r3, #2
 80178e2:	4413      	add	r3, r2
 80178e4:	881b      	ldrh	r3, [r3, #0]
 80178e6:	827b      	strh	r3, [r7, #18]
 80178e8:	8a7b      	ldrh	r3, [r7, #18]
 80178ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d01b      	beq.n	801792a <USB_DeactivateEndpoint+0xf6>
 80178f2:	687a      	ldr	r2, [r7, #4]
 80178f4:	683b      	ldr	r3, [r7, #0]
 80178f6:	781b      	ldrb	r3, [r3, #0]
 80178f8:	009b      	lsls	r3, r3, #2
 80178fa:	4413      	add	r3, r2
 80178fc:	881b      	ldrh	r3, [r3, #0]
 80178fe:	b29b      	uxth	r3, r3
 8017900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017908:	823b      	strh	r3, [r7, #16]
 801790a:	687a      	ldr	r2, [r7, #4]
 801790c:	683b      	ldr	r3, [r7, #0]
 801790e:	781b      	ldrb	r3, [r3, #0]
 8017910:	009b      	lsls	r3, r3, #2
 8017912:	441a      	add	r2, r3
 8017914:	8a3b      	ldrh	r3, [r7, #16]
 8017916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801791a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801791e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8017922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017926:	b29b      	uxth	r3, r3
 8017928:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801792a:	687a      	ldr	r2, [r7, #4]
 801792c:	683b      	ldr	r3, [r7, #0]
 801792e:	781b      	ldrb	r3, [r3, #0]
 8017930:	009b      	lsls	r3, r3, #2
 8017932:	4413      	add	r3, r2
 8017934:	881b      	ldrh	r3, [r3, #0]
 8017936:	b29b      	uxth	r3, r3
 8017938:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801793c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017940:	81fb      	strh	r3, [r7, #14]
 8017942:	687a      	ldr	r2, [r7, #4]
 8017944:	683b      	ldr	r3, [r7, #0]
 8017946:	781b      	ldrb	r3, [r3, #0]
 8017948:	009b      	lsls	r3, r3, #2
 801794a:	441a      	add	r2, r3
 801794c:	89fb      	ldrh	r3, [r7, #14]
 801794e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8017952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8017956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801795a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801795e:	b29b      	uxth	r3, r3
 8017960:	8013      	strh	r3, [r2, #0]
 8017962:	e14d      	b.n	8017c00 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8017964:	683b      	ldr	r3, [r7, #0]
 8017966:	785b      	ldrb	r3, [r3, #1]
 8017968:	2b00      	cmp	r3, #0
 801796a:	f040 80a5 	bne.w	8017ab8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801796e:	687a      	ldr	r2, [r7, #4]
 8017970:	683b      	ldr	r3, [r7, #0]
 8017972:	781b      	ldrb	r3, [r3, #0]
 8017974:	009b      	lsls	r3, r3, #2
 8017976:	4413      	add	r3, r2
 8017978:	881b      	ldrh	r3, [r3, #0]
 801797a:	843b      	strh	r3, [r7, #32]
 801797c:	8c3b      	ldrh	r3, [r7, #32]
 801797e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017982:	2b00      	cmp	r3, #0
 8017984:	d01b      	beq.n	80179be <USB_DeactivateEndpoint+0x18a>
 8017986:	687a      	ldr	r2, [r7, #4]
 8017988:	683b      	ldr	r3, [r7, #0]
 801798a:	781b      	ldrb	r3, [r3, #0]
 801798c:	009b      	lsls	r3, r3, #2
 801798e:	4413      	add	r3, r2
 8017990:	881b      	ldrh	r3, [r3, #0]
 8017992:	b29b      	uxth	r3, r3
 8017994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801799c:	83fb      	strh	r3, [r7, #30]
 801799e:	687a      	ldr	r2, [r7, #4]
 80179a0:	683b      	ldr	r3, [r7, #0]
 80179a2:	781b      	ldrb	r3, [r3, #0]
 80179a4:	009b      	lsls	r3, r3, #2
 80179a6:	441a      	add	r2, r3
 80179a8:	8bfb      	ldrh	r3, [r7, #30]
 80179aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80179ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80179b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80179b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80179ba:	b29b      	uxth	r3, r3
 80179bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80179be:	687a      	ldr	r2, [r7, #4]
 80179c0:	683b      	ldr	r3, [r7, #0]
 80179c2:	781b      	ldrb	r3, [r3, #0]
 80179c4:	009b      	lsls	r3, r3, #2
 80179c6:	4413      	add	r3, r2
 80179c8:	881b      	ldrh	r3, [r3, #0]
 80179ca:	83bb      	strh	r3, [r7, #28]
 80179cc:	8bbb      	ldrh	r3, [r7, #28]
 80179ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d01b      	beq.n	8017a0e <USB_DeactivateEndpoint+0x1da>
 80179d6:	687a      	ldr	r2, [r7, #4]
 80179d8:	683b      	ldr	r3, [r7, #0]
 80179da:	781b      	ldrb	r3, [r3, #0]
 80179dc:	009b      	lsls	r3, r3, #2
 80179de:	4413      	add	r3, r2
 80179e0:	881b      	ldrh	r3, [r3, #0]
 80179e2:	b29b      	uxth	r3, r3
 80179e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80179e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80179ec:	837b      	strh	r3, [r7, #26]
 80179ee:	687a      	ldr	r2, [r7, #4]
 80179f0:	683b      	ldr	r3, [r7, #0]
 80179f2:	781b      	ldrb	r3, [r3, #0]
 80179f4:	009b      	lsls	r3, r3, #2
 80179f6:	441a      	add	r2, r3
 80179f8:	8b7b      	ldrh	r3, [r7, #26]
 80179fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80179fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8017a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017a06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8017a0a:	b29b      	uxth	r3, r3
 8017a0c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8017a0e:	687a      	ldr	r2, [r7, #4]
 8017a10:	683b      	ldr	r3, [r7, #0]
 8017a12:	781b      	ldrb	r3, [r3, #0]
 8017a14:	009b      	lsls	r3, r3, #2
 8017a16:	4413      	add	r3, r2
 8017a18:	881b      	ldrh	r3, [r3, #0]
 8017a1a:	b29b      	uxth	r3, r3
 8017a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017a24:	833b      	strh	r3, [r7, #24]
 8017a26:	687a      	ldr	r2, [r7, #4]
 8017a28:	683b      	ldr	r3, [r7, #0]
 8017a2a:	781b      	ldrb	r3, [r3, #0]
 8017a2c:	009b      	lsls	r3, r3, #2
 8017a2e:	441a      	add	r2, r3
 8017a30:	8b3b      	ldrh	r3, [r7, #24]
 8017a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8017a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8017a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017a3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8017a42:	b29b      	uxth	r3, r3
 8017a44:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8017a46:	687a      	ldr	r2, [r7, #4]
 8017a48:	683b      	ldr	r3, [r7, #0]
 8017a4a:	781b      	ldrb	r3, [r3, #0]
 8017a4c:	009b      	lsls	r3, r3, #2
 8017a4e:	4413      	add	r3, r2
 8017a50:	881b      	ldrh	r3, [r3, #0]
 8017a52:	b29b      	uxth	r3, r3
 8017a54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8017a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017a5c:	82fb      	strh	r3, [r7, #22]
 8017a5e:	687a      	ldr	r2, [r7, #4]
 8017a60:	683b      	ldr	r3, [r7, #0]
 8017a62:	781b      	ldrb	r3, [r3, #0]
 8017a64:	009b      	lsls	r3, r3, #2
 8017a66:	441a      	add	r2, r3
 8017a68:	8afb      	ldrh	r3, [r7, #22]
 8017a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8017a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8017a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017a7a:	b29b      	uxth	r3, r3
 8017a7c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8017a7e:	687a      	ldr	r2, [r7, #4]
 8017a80:	683b      	ldr	r3, [r7, #0]
 8017a82:	781b      	ldrb	r3, [r3, #0]
 8017a84:	009b      	lsls	r3, r3, #2
 8017a86:	4413      	add	r3, r2
 8017a88:	881b      	ldrh	r3, [r3, #0]
 8017a8a:	b29b      	uxth	r3, r3
 8017a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017a94:	82bb      	strh	r3, [r7, #20]
 8017a96:	687a      	ldr	r2, [r7, #4]
 8017a98:	683b      	ldr	r3, [r7, #0]
 8017a9a:	781b      	ldrb	r3, [r3, #0]
 8017a9c:	009b      	lsls	r3, r3, #2
 8017a9e:	441a      	add	r2, r3
 8017aa0:	8abb      	ldrh	r3, [r7, #20]
 8017aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8017aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8017aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017ab2:	b29b      	uxth	r3, r3
 8017ab4:	8013      	strh	r3, [r2, #0]
 8017ab6:	e0a3      	b.n	8017c00 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8017ab8:	687a      	ldr	r2, [r7, #4]
 8017aba:	683b      	ldr	r3, [r7, #0]
 8017abc:	781b      	ldrb	r3, [r3, #0]
 8017abe:	009b      	lsls	r3, r3, #2
 8017ac0:	4413      	add	r3, r2
 8017ac2:	881b      	ldrh	r3, [r3, #0]
 8017ac4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8017ac6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d01b      	beq.n	8017b08 <USB_DeactivateEndpoint+0x2d4>
 8017ad0:	687a      	ldr	r2, [r7, #4]
 8017ad2:	683b      	ldr	r3, [r7, #0]
 8017ad4:	781b      	ldrb	r3, [r3, #0]
 8017ad6:	009b      	lsls	r3, r3, #2
 8017ad8:	4413      	add	r3, r2
 8017ada:	881b      	ldrh	r3, [r3, #0]
 8017adc:	b29b      	uxth	r3, r3
 8017ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017ae6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8017ae8:	687a      	ldr	r2, [r7, #4]
 8017aea:	683b      	ldr	r3, [r7, #0]
 8017aec:	781b      	ldrb	r3, [r3, #0]
 8017aee:	009b      	lsls	r3, r3, #2
 8017af0:	441a      	add	r2, r3
 8017af2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8017af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8017afc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8017b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017b04:	b29b      	uxth	r3, r3
 8017b06:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8017b08:	687a      	ldr	r2, [r7, #4]
 8017b0a:	683b      	ldr	r3, [r7, #0]
 8017b0c:	781b      	ldrb	r3, [r3, #0]
 8017b0e:	009b      	lsls	r3, r3, #2
 8017b10:	4413      	add	r3, r2
 8017b12:	881b      	ldrh	r3, [r3, #0]
 8017b14:	857b      	strh	r3, [r7, #42]	; 0x2a
 8017b16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	d01b      	beq.n	8017b58 <USB_DeactivateEndpoint+0x324>
 8017b20:	687a      	ldr	r2, [r7, #4]
 8017b22:	683b      	ldr	r3, [r7, #0]
 8017b24:	781b      	ldrb	r3, [r3, #0]
 8017b26:	009b      	lsls	r3, r3, #2
 8017b28:	4413      	add	r3, r2
 8017b2a:	881b      	ldrh	r3, [r3, #0]
 8017b2c:	b29b      	uxth	r3, r3
 8017b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017b36:	853b      	strh	r3, [r7, #40]	; 0x28
 8017b38:	687a      	ldr	r2, [r7, #4]
 8017b3a:	683b      	ldr	r3, [r7, #0]
 8017b3c:	781b      	ldrb	r3, [r3, #0]
 8017b3e:	009b      	lsls	r3, r3, #2
 8017b40:	441a      	add	r2, r3
 8017b42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8017b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8017b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8017b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017b50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8017b54:	b29b      	uxth	r3, r3
 8017b56:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8017b58:	687a      	ldr	r2, [r7, #4]
 8017b5a:	683b      	ldr	r3, [r7, #0]
 8017b5c:	781b      	ldrb	r3, [r3, #0]
 8017b5e:	009b      	lsls	r3, r3, #2
 8017b60:	4413      	add	r3, r2
 8017b62:	881b      	ldrh	r3, [r3, #0]
 8017b64:	b29b      	uxth	r3, r3
 8017b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017b6e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017b70:	687a      	ldr	r2, [r7, #4]
 8017b72:	683b      	ldr	r3, [r7, #0]
 8017b74:	781b      	ldrb	r3, [r3, #0]
 8017b76:	009b      	lsls	r3, r3, #2
 8017b78:	441a      	add	r2, r3
 8017b7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8017b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8017b84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8017b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017b8c:	b29b      	uxth	r3, r3
 8017b8e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8017b90:	687a      	ldr	r2, [r7, #4]
 8017b92:	683b      	ldr	r3, [r7, #0]
 8017b94:	781b      	ldrb	r3, [r3, #0]
 8017b96:	009b      	lsls	r3, r3, #2
 8017b98:	4413      	add	r3, r2
 8017b9a:	881b      	ldrh	r3, [r3, #0]
 8017b9c:	b29b      	uxth	r3, r3
 8017b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017ba6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8017ba8:	687a      	ldr	r2, [r7, #4]
 8017baa:	683b      	ldr	r3, [r7, #0]
 8017bac:	781b      	ldrb	r3, [r3, #0]
 8017bae:	009b      	lsls	r3, r3, #2
 8017bb0:	441a      	add	r2, r3
 8017bb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8017bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8017bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017bc4:	b29b      	uxth	r3, r3
 8017bc6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8017bc8:	687a      	ldr	r2, [r7, #4]
 8017bca:	683b      	ldr	r3, [r7, #0]
 8017bcc:	781b      	ldrb	r3, [r3, #0]
 8017bce:	009b      	lsls	r3, r3, #2
 8017bd0:	4413      	add	r3, r2
 8017bd2:	881b      	ldrh	r3, [r3, #0]
 8017bd4:	b29b      	uxth	r3, r3
 8017bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8017bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017bde:	847b      	strh	r3, [r7, #34]	; 0x22
 8017be0:	687a      	ldr	r2, [r7, #4]
 8017be2:	683b      	ldr	r3, [r7, #0]
 8017be4:	781b      	ldrb	r3, [r3, #0]
 8017be6:	009b      	lsls	r3, r3, #2
 8017be8:	441a      	add	r2, r3
 8017bea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017bec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8017bf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8017bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017bfc:	b29b      	uxth	r3, r3
 8017bfe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8017c00:	2300      	movs	r3, #0
}
 8017c02:	4618      	mov	r0, r3
 8017c04:	3734      	adds	r7, #52	; 0x34
 8017c06:	46bd      	mov	sp, r7
 8017c08:	bc80      	pop	{r7}
 8017c0a:	4770      	bx	lr

08017c0c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8017c0c:	b580      	push	{r7, lr}
 8017c0e:	b0c2      	sub	sp, #264	; 0x108
 8017c10:	af00      	add	r7, sp, #0
 8017c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017c16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017c1a:	6018      	str	r0, [r3, #0]
 8017c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017c24:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8017c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	785b      	ldrb	r3, [r3, #1]
 8017c32:	2b01      	cmp	r3, #1
 8017c34:	f040 86b7 	bne.w	80189a6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8017c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	699a      	ldr	r2, [r3, #24]
 8017c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	691b      	ldr	r3, [r3, #16]
 8017c50:	429a      	cmp	r2, r3
 8017c52:	d908      	bls.n	8017c66 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8017c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	691b      	ldr	r3, [r3, #16]
 8017c60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8017c64:	e007      	b.n	8017c76 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8017c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017c6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	699b      	ldr	r3, [r3, #24]
 8017c72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8017c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	7b1b      	ldrb	r3, [r3, #12]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d13a      	bne.n	8017cfc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8017c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017c8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	6959      	ldr	r1, [r3, #20]
 8017c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	88da      	ldrh	r2, [r3, #6]
 8017c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017ca2:	b29b      	uxth	r3, r3
 8017ca4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8017ca8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8017cac:	6800      	ldr	r0, [r0, #0]
 8017cae:	f001 fcb2 	bl	8019616 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8017cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017cb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	613b      	str	r3, [r7, #16]
 8017cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017cc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8017ccc:	b29b      	uxth	r3, r3
 8017cce:	461a      	mov	r2, r3
 8017cd0:	693b      	ldr	r3, [r7, #16]
 8017cd2:	4413      	add	r3, r2
 8017cd4:	613b      	str	r3, [r7, #16]
 8017cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017cda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	781b      	ldrb	r3, [r3, #0]
 8017ce2:	011a      	lsls	r2, r3, #4
 8017ce4:	693b      	ldr	r3, [r7, #16]
 8017ce6:	4413      	add	r3, r2
 8017ce8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8017cec:	60fb      	str	r3, [r7, #12]
 8017cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017cf2:	b29a      	uxth	r2, r3
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	801a      	strh	r2, [r3, #0]
 8017cf8:	f000 be1f 	b.w	801893a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8017cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	78db      	ldrb	r3, [r3, #3]
 8017d08:	2b02      	cmp	r3, #2
 8017d0a:	f040 8462 	bne.w	80185d2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8017d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	6a1a      	ldr	r2, [r3, #32]
 8017d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	691b      	ldr	r3, [r3, #16]
 8017d26:	429a      	cmp	r2, r3
 8017d28:	f240 83df 	bls.w	80184ea <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8017d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017d30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017d34:	681a      	ldr	r2, [r3, #0]
 8017d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	781b      	ldrb	r3, [r3, #0]
 8017d42:	009b      	lsls	r3, r3, #2
 8017d44:	4413      	add	r3, r2
 8017d46:	881b      	ldrh	r3, [r3, #0]
 8017d48:	b29b      	uxth	r3, r3
 8017d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017d52:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8017d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017d5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017d5e:	681a      	ldr	r2, [r3, #0]
 8017d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	781b      	ldrb	r3, [r3, #0]
 8017d6c:	009b      	lsls	r3, r3, #2
 8017d6e:	441a      	add	r2, r3
 8017d70:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8017d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8017d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8017d7c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8017d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017d84:	b29b      	uxth	r3, r3
 8017d86:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8017d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	6a1a      	ldr	r2, [r3, #32]
 8017d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017d98:	1ad2      	subs	r2, r2, r3
 8017d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017d9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8017da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017daa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017dae:	681a      	ldr	r2, [r3, #0]
 8017db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017db8:	681b      	ldr	r3, [r3, #0]
 8017dba:	781b      	ldrb	r3, [r3, #0]
 8017dbc:	009b      	lsls	r3, r3, #2
 8017dbe:	4413      	add	r3, r2
 8017dc0:	881b      	ldrh	r3, [r3, #0]
 8017dc2:	b29b      	uxth	r3, r3
 8017dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	f000 81c7 	beq.w	801815c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8017dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017dd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	633b      	str	r3, [r7, #48]	; 0x30
 8017dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	785b      	ldrb	r3, [r3, #1]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d177      	bne.n	8017eda <USB_EPStartXfer+0x2ce>
 8017dea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017dee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8017df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017dfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017dfe:	681b      	ldr	r3, [r3, #0]
 8017e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8017e04:	b29b      	uxth	r3, r3
 8017e06:	461a      	mov	r2, r3
 8017e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e0a:	4413      	add	r3, r2
 8017e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8017e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017e16:	681b      	ldr	r3, [r3, #0]
 8017e18:	781b      	ldrb	r3, [r3, #0]
 8017e1a:	011a      	lsls	r2, r3, #4
 8017e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e1e:	4413      	add	r3, r2
 8017e20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8017e24:	627b      	str	r3, [r7, #36]	; 0x24
 8017e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e28:	881b      	ldrh	r3, [r3, #0]
 8017e2a:	b29b      	uxth	r3, r3
 8017e2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8017e30:	b29a      	uxth	r2, r3
 8017e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e34:	801a      	strh	r2, [r3, #0]
 8017e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017e3a:	2b3e      	cmp	r3, #62	; 0x3e
 8017e3c:	d921      	bls.n	8017e82 <USB_EPStartXfer+0x276>
 8017e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017e42:	095b      	lsrs	r3, r3, #5
 8017e44:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8017e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017e4c:	f003 031f 	and.w	r3, r3, #31
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d104      	bne.n	8017e5e <USB_EPStartXfer+0x252>
 8017e54:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8017e58:	3b01      	subs	r3, #1
 8017e5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8017e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e60:	881b      	ldrh	r3, [r3, #0]
 8017e62:	b29a      	uxth	r2, r3
 8017e64:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8017e68:	b29b      	uxth	r3, r3
 8017e6a:	029b      	lsls	r3, r3, #10
 8017e6c:	b29b      	uxth	r3, r3
 8017e6e:	4313      	orrs	r3, r2
 8017e70:	b29b      	uxth	r3, r3
 8017e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8017e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8017e7a:	b29a      	uxth	r2, r3
 8017e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e7e:	801a      	strh	r2, [r3, #0]
 8017e80:	e050      	b.n	8017f24 <USB_EPStartXfer+0x318>
 8017e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d10a      	bne.n	8017ea0 <USB_EPStartXfer+0x294>
 8017e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e8c:	881b      	ldrh	r3, [r3, #0]
 8017e8e:	b29b      	uxth	r3, r3
 8017e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8017e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8017e98:	b29a      	uxth	r2, r3
 8017e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e9c:	801a      	strh	r2, [r3, #0]
 8017e9e:	e041      	b.n	8017f24 <USB_EPStartXfer+0x318>
 8017ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017ea4:	085b      	lsrs	r3, r3, #1
 8017ea6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8017eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017eae:	f003 0301 	and.w	r3, r3, #1
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d004      	beq.n	8017ec0 <USB_EPStartXfer+0x2b4>
 8017eb6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8017eba:	3301      	adds	r3, #1
 8017ebc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8017ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ec2:	881b      	ldrh	r3, [r3, #0]
 8017ec4:	b29a      	uxth	r2, r3
 8017ec6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8017eca:	b29b      	uxth	r3, r3
 8017ecc:	029b      	lsls	r3, r3, #10
 8017ece:	b29b      	uxth	r3, r3
 8017ed0:	4313      	orrs	r3, r2
 8017ed2:	b29a      	uxth	r2, r3
 8017ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ed6:	801a      	strh	r2, [r3, #0]
 8017ed8:	e024      	b.n	8017f24 <USB_EPStartXfer+0x318>
 8017eda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017ede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	785b      	ldrb	r3, [r3, #1]
 8017ee6:	2b01      	cmp	r3, #1
 8017ee8:	d11c      	bne.n	8017f24 <USB_EPStartXfer+0x318>
 8017eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017eee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8017ef8:	b29b      	uxth	r3, r3
 8017efa:	461a      	mov	r2, r3
 8017efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017efe:	4413      	add	r3, r2
 8017f00:	633b      	str	r3, [r7, #48]	; 0x30
 8017f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017f06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	781b      	ldrb	r3, [r3, #0]
 8017f0e:	011a      	lsls	r2, r3, #4
 8017f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f12:	4413      	add	r3, r2
 8017f14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8017f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017f1e:	b29a      	uxth	r2, r3
 8017f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8017f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	895b      	ldrh	r3, [r3, #10]
 8017f30:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8017f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	6959      	ldr	r1, [r3, #20]
 8017f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017f44:	b29b      	uxth	r3, r3
 8017f46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8017f4a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8017f4e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8017f52:	6800      	ldr	r0, [r0, #0]
 8017f54:	f001 fb5f 	bl	8019616 <USB_WritePMA>
            ep->xfer_buff += len;
 8017f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	695a      	ldr	r2, [r3, #20]
 8017f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017f68:	441a      	add	r2, r3
 8017f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8017f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017f7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	6a1a      	ldr	r2, [r3, #32]
 8017f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	691b      	ldr	r3, [r3, #16]
 8017f8e:	429a      	cmp	r2, r3
 8017f90:	d90f      	bls.n	8017fb2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8017f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	6a1a      	ldr	r2, [r3, #32]
 8017f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017fa2:	1ad2      	subs	r2, r2, r3
 8017fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017fa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	621a      	str	r2, [r3, #32]
 8017fb0:	e00e      	b.n	8017fd0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8017fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	6a1b      	ldr	r3, [r3, #32]
 8017fbe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8017fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017fc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	2200      	movs	r2, #0
 8017fce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8017fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017fd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	785b      	ldrb	r3, [r3, #1]
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d177      	bne.n	80180d0 <USB_EPStartXfer+0x4c4>
 8017fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017fe4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	61bb      	str	r3, [r7, #24]
 8017fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017ff0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8017ffa:	b29b      	uxth	r3, r3
 8017ffc:	461a      	mov	r2, r3
 8017ffe:	69bb      	ldr	r3, [r7, #24]
 8018000:	4413      	add	r3, r2
 8018002:	61bb      	str	r3, [r7, #24]
 8018004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	781b      	ldrb	r3, [r3, #0]
 8018010:	011a      	lsls	r2, r3, #4
 8018012:	69bb      	ldr	r3, [r7, #24]
 8018014:	4413      	add	r3, r2
 8018016:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801801a:	617b      	str	r3, [r7, #20]
 801801c:	697b      	ldr	r3, [r7, #20]
 801801e:	881b      	ldrh	r3, [r3, #0]
 8018020:	b29b      	uxth	r3, r3
 8018022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8018026:	b29a      	uxth	r2, r3
 8018028:	697b      	ldr	r3, [r7, #20]
 801802a:	801a      	strh	r2, [r3, #0]
 801802c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018030:	2b3e      	cmp	r3, #62	; 0x3e
 8018032:	d921      	bls.n	8018078 <USB_EPStartXfer+0x46c>
 8018034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018038:	095b      	lsrs	r3, r3, #5
 801803a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801803e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018042:	f003 031f 	and.w	r3, r3, #31
 8018046:	2b00      	cmp	r3, #0
 8018048:	d104      	bne.n	8018054 <USB_EPStartXfer+0x448>
 801804a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801804e:	3b01      	subs	r3, #1
 8018050:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8018054:	697b      	ldr	r3, [r7, #20]
 8018056:	881b      	ldrh	r3, [r3, #0]
 8018058:	b29a      	uxth	r2, r3
 801805a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801805e:	b29b      	uxth	r3, r3
 8018060:	029b      	lsls	r3, r3, #10
 8018062:	b29b      	uxth	r3, r3
 8018064:	4313      	orrs	r3, r2
 8018066:	b29b      	uxth	r3, r3
 8018068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801806c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8018070:	b29a      	uxth	r2, r3
 8018072:	697b      	ldr	r3, [r7, #20]
 8018074:	801a      	strh	r2, [r3, #0]
 8018076:	e056      	b.n	8018126 <USB_EPStartXfer+0x51a>
 8018078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801807c:	2b00      	cmp	r3, #0
 801807e:	d10a      	bne.n	8018096 <USB_EPStartXfer+0x48a>
 8018080:	697b      	ldr	r3, [r7, #20]
 8018082:	881b      	ldrh	r3, [r3, #0]
 8018084:	b29b      	uxth	r3, r3
 8018086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801808a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801808e:	b29a      	uxth	r2, r3
 8018090:	697b      	ldr	r3, [r7, #20]
 8018092:	801a      	strh	r2, [r3, #0]
 8018094:	e047      	b.n	8018126 <USB_EPStartXfer+0x51a>
 8018096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801809a:	085b      	lsrs	r3, r3, #1
 801809c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80180a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80180a4:	f003 0301 	and.w	r3, r3, #1
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d004      	beq.n	80180b6 <USB_EPStartXfer+0x4aa>
 80180ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80180b0:	3301      	adds	r3, #1
 80180b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80180b6:	697b      	ldr	r3, [r7, #20]
 80180b8:	881b      	ldrh	r3, [r3, #0]
 80180ba:	b29a      	uxth	r2, r3
 80180bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80180c0:	b29b      	uxth	r3, r3
 80180c2:	029b      	lsls	r3, r3, #10
 80180c4:	b29b      	uxth	r3, r3
 80180c6:	4313      	orrs	r3, r2
 80180c8:	b29a      	uxth	r2, r3
 80180ca:	697b      	ldr	r3, [r7, #20]
 80180cc:	801a      	strh	r2, [r3, #0]
 80180ce:	e02a      	b.n	8018126 <USB_EPStartXfer+0x51a>
 80180d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80180d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80180d8:	681b      	ldr	r3, [r3, #0]
 80180da:	785b      	ldrb	r3, [r3, #1]
 80180dc:	2b01      	cmp	r3, #1
 80180de:	d122      	bne.n	8018126 <USB_EPStartXfer+0x51a>
 80180e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80180e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80180e8:	681b      	ldr	r3, [r3, #0]
 80180ea:	623b      	str	r3, [r7, #32]
 80180ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80180f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80180fa:	b29b      	uxth	r3, r3
 80180fc:	461a      	mov	r2, r3
 80180fe:	6a3b      	ldr	r3, [r7, #32]
 8018100:	4413      	add	r3, r2
 8018102:	623b      	str	r3, [r7, #32]
 8018104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	781b      	ldrb	r3, [r3, #0]
 8018110:	011a      	lsls	r2, r3, #4
 8018112:	6a3b      	ldr	r3, [r7, #32]
 8018114:	4413      	add	r3, r2
 8018116:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801811a:	61fb      	str	r3, [r7, #28]
 801811c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018120:	b29a      	uxth	r2, r3
 8018122:	69fb      	ldr	r3, [r7, #28]
 8018124:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8018126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801812a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	891b      	ldrh	r3, [r3, #8]
 8018132:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8018136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801813a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	6959      	ldr	r1, [r3, #20]
 8018142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018146:	b29b      	uxth	r3, r3
 8018148:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801814c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8018150:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8018154:	6800      	ldr	r0, [r0, #0]
 8018156:	f001 fa5e 	bl	8019616 <USB_WritePMA>
 801815a:	e3ee      	b.n	801893a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801815c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	785b      	ldrb	r3, [r3, #1]
 8018168:	2b00      	cmp	r3, #0
 801816a:	d177      	bne.n	801825c <USB_EPStartXfer+0x650>
 801816c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018170:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	64bb      	str	r3, [r7, #72]	; 0x48
 8018178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801817c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018180:	681b      	ldr	r3, [r3, #0]
 8018182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8018186:	b29b      	uxth	r3, r3
 8018188:	461a      	mov	r2, r3
 801818a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801818c:	4413      	add	r3, r2
 801818e:	64bb      	str	r3, [r7, #72]	; 0x48
 8018190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	781b      	ldrb	r3, [r3, #0]
 801819c:	011a      	lsls	r2, r3, #4
 801819e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80181a0:	4413      	add	r3, r2
 80181a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80181a6:	647b      	str	r3, [r7, #68]	; 0x44
 80181a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181aa:	881b      	ldrh	r3, [r3, #0]
 80181ac:	b29b      	uxth	r3, r3
 80181ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80181b2:	b29a      	uxth	r2, r3
 80181b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181b6:	801a      	strh	r2, [r3, #0]
 80181b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80181bc:	2b3e      	cmp	r3, #62	; 0x3e
 80181be:	d921      	bls.n	8018204 <USB_EPStartXfer+0x5f8>
 80181c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80181c4:	095b      	lsrs	r3, r3, #5
 80181c6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80181ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80181ce:	f003 031f 	and.w	r3, r3, #31
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d104      	bne.n	80181e0 <USB_EPStartXfer+0x5d4>
 80181d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80181da:	3b01      	subs	r3, #1
 80181dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80181e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181e2:	881b      	ldrh	r3, [r3, #0]
 80181e4:	b29a      	uxth	r2, r3
 80181e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80181ea:	b29b      	uxth	r3, r3
 80181ec:	029b      	lsls	r3, r3, #10
 80181ee:	b29b      	uxth	r3, r3
 80181f0:	4313      	orrs	r3, r2
 80181f2:	b29b      	uxth	r3, r3
 80181f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80181f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80181fc:	b29a      	uxth	r2, r3
 80181fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018200:	801a      	strh	r2, [r3, #0]
 8018202:	e056      	b.n	80182b2 <USB_EPStartXfer+0x6a6>
 8018204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018208:	2b00      	cmp	r3, #0
 801820a:	d10a      	bne.n	8018222 <USB_EPStartXfer+0x616>
 801820c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801820e:	881b      	ldrh	r3, [r3, #0]
 8018210:	b29b      	uxth	r3, r3
 8018212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8018216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801821a:	b29a      	uxth	r2, r3
 801821c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801821e:	801a      	strh	r2, [r3, #0]
 8018220:	e047      	b.n	80182b2 <USB_EPStartXfer+0x6a6>
 8018222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018226:	085b      	lsrs	r3, r3, #1
 8018228:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801822c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018230:	f003 0301 	and.w	r3, r3, #1
 8018234:	2b00      	cmp	r3, #0
 8018236:	d004      	beq.n	8018242 <USB_EPStartXfer+0x636>
 8018238:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801823c:	3301      	adds	r3, #1
 801823e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8018242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018244:	881b      	ldrh	r3, [r3, #0]
 8018246:	b29a      	uxth	r2, r3
 8018248:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801824c:	b29b      	uxth	r3, r3
 801824e:	029b      	lsls	r3, r3, #10
 8018250:	b29b      	uxth	r3, r3
 8018252:	4313      	orrs	r3, r2
 8018254:	b29a      	uxth	r2, r3
 8018256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018258:	801a      	strh	r2, [r3, #0]
 801825a:	e02a      	b.n	80182b2 <USB_EPStartXfer+0x6a6>
 801825c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	785b      	ldrb	r3, [r3, #1]
 8018268:	2b01      	cmp	r3, #1
 801826a:	d122      	bne.n	80182b2 <USB_EPStartXfer+0x6a6>
 801826c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	653b      	str	r3, [r7, #80]	; 0x50
 8018278:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801827c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018280:	681b      	ldr	r3, [r3, #0]
 8018282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8018286:	b29b      	uxth	r3, r3
 8018288:	461a      	mov	r2, r3
 801828a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801828c:	4413      	add	r3, r2
 801828e:	653b      	str	r3, [r7, #80]	; 0x50
 8018290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018298:	681b      	ldr	r3, [r3, #0]
 801829a:	781b      	ldrb	r3, [r3, #0]
 801829c:	011a      	lsls	r2, r3, #4
 801829e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80182a0:	4413      	add	r3, r2
 80182a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80182a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80182a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80182ac:	b29a      	uxth	r2, r3
 80182ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80182b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80182b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80182b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	891b      	ldrh	r3, [r3, #8]
 80182be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80182c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80182c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	6959      	ldr	r1, [r3, #20]
 80182ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80182d2:	b29b      	uxth	r3, r3
 80182d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80182d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80182dc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80182e0:	6800      	ldr	r0, [r0, #0]
 80182e2:	f001 f998 	bl	8019616 <USB_WritePMA>
            ep->xfer_buff += len;
 80182e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80182ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	695a      	ldr	r2, [r3, #20]
 80182f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80182f6:	441a      	add	r2, r3
 80182f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80182fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8018304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	6a1a      	ldr	r2, [r3, #32]
 8018310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	691b      	ldr	r3, [r3, #16]
 801831c:	429a      	cmp	r2, r3
 801831e:	d90f      	bls.n	8018340 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8018320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	6a1a      	ldr	r2, [r3, #32]
 801832c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018330:	1ad2      	subs	r2, r2, r3
 8018332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	621a      	str	r2, [r3, #32]
 801833e:	e00e      	b.n	801835e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8018340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	6a1b      	ldr	r3, [r3, #32]
 801834c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8018350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	2200      	movs	r2, #0
 801835c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801835e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018362:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	643b      	str	r3, [r7, #64]	; 0x40
 801836a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801836e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	785b      	ldrb	r3, [r3, #1]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d177      	bne.n	801846a <USB_EPStartXfer+0x85e>
 801837a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801837e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	63bb      	str	r3, [r7, #56]	; 0x38
 8018386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801838a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8018394:	b29b      	uxth	r3, r3
 8018396:	461a      	mov	r2, r3
 8018398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801839a:	4413      	add	r3, r2
 801839c:	63bb      	str	r3, [r7, #56]	; 0x38
 801839e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80183a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	781b      	ldrb	r3, [r3, #0]
 80183aa:	011a      	lsls	r2, r3, #4
 80183ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183ae:	4413      	add	r3, r2
 80183b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80183b4:	637b      	str	r3, [r7, #52]	; 0x34
 80183b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183b8:	881b      	ldrh	r3, [r3, #0]
 80183ba:	b29b      	uxth	r3, r3
 80183bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80183c0:	b29a      	uxth	r2, r3
 80183c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183c4:	801a      	strh	r2, [r3, #0]
 80183c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80183ca:	2b3e      	cmp	r3, #62	; 0x3e
 80183cc:	d921      	bls.n	8018412 <USB_EPStartXfer+0x806>
 80183ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80183d2:	095b      	lsrs	r3, r3, #5
 80183d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80183d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80183dc:	f003 031f 	and.w	r3, r3, #31
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d104      	bne.n	80183ee <USB_EPStartXfer+0x7e2>
 80183e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80183e8:	3b01      	subs	r3, #1
 80183ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80183ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80183f0:	881b      	ldrh	r3, [r3, #0]
 80183f2:	b29a      	uxth	r2, r3
 80183f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80183f8:	b29b      	uxth	r3, r3
 80183fa:	029b      	lsls	r3, r3, #10
 80183fc:	b29b      	uxth	r3, r3
 80183fe:	4313      	orrs	r3, r2
 8018400:	b29b      	uxth	r3, r3
 8018402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8018406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801840a:	b29a      	uxth	r2, r3
 801840c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801840e:	801a      	strh	r2, [r3, #0]
 8018410:	e050      	b.n	80184b4 <USB_EPStartXfer+0x8a8>
 8018412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018416:	2b00      	cmp	r3, #0
 8018418:	d10a      	bne.n	8018430 <USB_EPStartXfer+0x824>
 801841a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801841c:	881b      	ldrh	r3, [r3, #0]
 801841e:	b29b      	uxth	r3, r3
 8018420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8018424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8018428:	b29a      	uxth	r2, r3
 801842a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801842c:	801a      	strh	r2, [r3, #0]
 801842e:	e041      	b.n	80184b4 <USB_EPStartXfer+0x8a8>
 8018430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018434:	085b      	lsrs	r3, r3, #1
 8018436:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801843a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801843e:	f003 0301 	and.w	r3, r3, #1
 8018442:	2b00      	cmp	r3, #0
 8018444:	d004      	beq.n	8018450 <USB_EPStartXfer+0x844>
 8018446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801844a:	3301      	adds	r3, #1
 801844c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8018450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018452:	881b      	ldrh	r3, [r3, #0]
 8018454:	b29a      	uxth	r2, r3
 8018456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801845a:	b29b      	uxth	r3, r3
 801845c:	029b      	lsls	r3, r3, #10
 801845e:	b29b      	uxth	r3, r3
 8018460:	4313      	orrs	r3, r2
 8018462:	b29a      	uxth	r2, r3
 8018464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018466:	801a      	strh	r2, [r3, #0]
 8018468:	e024      	b.n	80184b4 <USB_EPStartXfer+0x8a8>
 801846a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801846e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	785b      	ldrb	r3, [r3, #1]
 8018476:	2b01      	cmp	r3, #1
 8018478:	d11c      	bne.n	80184b4 <USB_EPStartXfer+0x8a8>
 801847a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801847e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8018488:	b29b      	uxth	r3, r3
 801848a:	461a      	mov	r2, r3
 801848c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801848e:	4413      	add	r3, r2
 8018490:	643b      	str	r3, [r7, #64]	; 0x40
 8018492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	781b      	ldrb	r3, [r3, #0]
 801849e:	011a      	lsls	r2, r3, #4
 80184a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184a2:	4413      	add	r3, r2
 80184a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80184a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80184aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80184ae:	b29a      	uxth	r2, r3
 80184b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80184b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80184b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	895b      	ldrh	r3, [r3, #10]
 80184c0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80184c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80184c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	6959      	ldr	r1, [r3, #20]
 80184d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80184d4:	b29b      	uxth	r3, r3
 80184d6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80184da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80184de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80184e2:	6800      	ldr	r0, [r0, #0]
 80184e4:	f001 f897 	bl	8019616 <USB_WritePMA>
 80184e8:	e227      	b.n	801893a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80184ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80184ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	6a1b      	ldr	r3, [r3, #32]
 80184f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80184fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80184fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018502:	681a      	ldr	r2, [r3, #0]
 8018504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	781b      	ldrb	r3, [r3, #0]
 8018510:	009b      	lsls	r3, r3, #2
 8018512:	4413      	add	r3, r2
 8018514:	881b      	ldrh	r3, [r3, #0]
 8018516:	b29b      	uxth	r3, r3
 8018518:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 801851c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018520:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8018524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018528:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801852c:	681a      	ldr	r2, [r3, #0]
 801852e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	781b      	ldrb	r3, [r3, #0]
 801853a:	009b      	lsls	r3, r3, #2
 801853c:	441a      	add	r2, r3
 801853e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8018542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8018546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801854a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801854e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018552:	b29b      	uxth	r3, r3
 8018554:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8018556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801855a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018566:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8018570:	b29b      	uxth	r3, r3
 8018572:	461a      	mov	r2, r3
 8018574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018576:	4413      	add	r3, r2
 8018578:	65fb      	str	r3, [r7, #92]	; 0x5c
 801857a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801857e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	781b      	ldrb	r3, [r3, #0]
 8018586:	011a      	lsls	r2, r3, #4
 8018588:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801858a:	4413      	add	r3, r2
 801858c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8018590:	65bb      	str	r3, [r7, #88]	; 0x58
 8018592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018596:	b29a      	uxth	r2, r3
 8018598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801859a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801859c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80185a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80185a4:	681b      	ldr	r3, [r3, #0]
 80185a6:	891b      	ldrh	r3, [r3, #8]
 80185a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80185ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80185b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	6959      	ldr	r1, [r3, #20]
 80185b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80185bc:	b29b      	uxth	r3, r3
 80185be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80185c2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80185c6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80185ca:	6800      	ldr	r0, [r0, #0]
 80185cc:	f001 f823 	bl	8019616 <USB_WritePMA>
 80185d0:	e1b3      	b.n	801893a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80185d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80185d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	6a1a      	ldr	r2, [r3, #32]
 80185de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80185e2:	1ad2      	subs	r2, r2, r3
 80185e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80185e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80185f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80185f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80185f8:	681a      	ldr	r2, [r3, #0]
 80185fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80185fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	781b      	ldrb	r3, [r3, #0]
 8018606:	009b      	lsls	r3, r3, #2
 8018608:	4413      	add	r3, r2
 801860a:	881b      	ldrh	r3, [r3, #0]
 801860c:	b29b      	uxth	r3, r3
 801860e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018612:	2b00      	cmp	r3, #0
 8018614:	f000 80c6 	beq.w	80187a4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8018618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801861c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	673b      	str	r3, [r7, #112]	; 0x70
 8018624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	785b      	ldrb	r3, [r3, #1]
 8018630:	2b00      	cmp	r3, #0
 8018632:	d177      	bne.n	8018724 <USB_EPStartXfer+0xb18>
 8018634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018638:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801863c:	681b      	ldr	r3, [r3, #0]
 801863e:	66bb      	str	r3, [r7, #104]	; 0x68
 8018640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018644:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801864e:	b29b      	uxth	r3, r3
 8018650:	461a      	mov	r2, r3
 8018652:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018654:	4413      	add	r3, r2
 8018656:	66bb      	str	r3, [r7, #104]	; 0x68
 8018658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801865c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	781b      	ldrb	r3, [r3, #0]
 8018664:	011a      	lsls	r2, r3, #4
 8018666:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018668:	4413      	add	r3, r2
 801866a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 801866e:	667b      	str	r3, [r7, #100]	; 0x64
 8018670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018672:	881b      	ldrh	r3, [r3, #0]
 8018674:	b29b      	uxth	r3, r3
 8018676:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801867a:	b29a      	uxth	r2, r3
 801867c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801867e:	801a      	strh	r2, [r3, #0]
 8018680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018684:	2b3e      	cmp	r3, #62	; 0x3e
 8018686:	d921      	bls.n	80186cc <USB_EPStartXfer+0xac0>
 8018688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801868c:	095b      	lsrs	r3, r3, #5
 801868e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8018692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018696:	f003 031f 	and.w	r3, r3, #31
 801869a:	2b00      	cmp	r3, #0
 801869c:	d104      	bne.n	80186a8 <USB_EPStartXfer+0xa9c>
 801869e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80186a2:	3b01      	subs	r3, #1
 80186a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80186a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80186aa:	881b      	ldrh	r3, [r3, #0]
 80186ac:	b29a      	uxth	r2, r3
 80186ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80186b2:	b29b      	uxth	r3, r3
 80186b4:	029b      	lsls	r3, r3, #10
 80186b6:	b29b      	uxth	r3, r3
 80186b8:	4313      	orrs	r3, r2
 80186ba:	b29b      	uxth	r3, r3
 80186bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80186c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80186c4:	b29a      	uxth	r2, r3
 80186c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80186c8:	801a      	strh	r2, [r3, #0]
 80186ca:	e050      	b.n	801876e <USB_EPStartXfer+0xb62>
 80186cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d10a      	bne.n	80186ea <USB_EPStartXfer+0xade>
 80186d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80186d6:	881b      	ldrh	r3, [r3, #0]
 80186d8:	b29b      	uxth	r3, r3
 80186da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80186de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80186e2:	b29a      	uxth	r2, r3
 80186e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80186e6:	801a      	strh	r2, [r3, #0]
 80186e8:	e041      	b.n	801876e <USB_EPStartXfer+0xb62>
 80186ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80186ee:	085b      	lsrs	r3, r3, #1
 80186f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80186f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80186f8:	f003 0301 	and.w	r3, r3, #1
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d004      	beq.n	801870a <USB_EPStartXfer+0xafe>
 8018700:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8018704:	3301      	adds	r3, #1
 8018706:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801870a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801870c:	881b      	ldrh	r3, [r3, #0]
 801870e:	b29a      	uxth	r2, r3
 8018710:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8018714:	b29b      	uxth	r3, r3
 8018716:	029b      	lsls	r3, r3, #10
 8018718:	b29b      	uxth	r3, r3
 801871a:	4313      	orrs	r3, r2
 801871c:	b29a      	uxth	r2, r3
 801871e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8018720:	801a      	strh	r2, [r3, #0]
 8018722:	e024      	b.n	801876e <USB_EPStartXfer+0xb62>
 8018724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	785b      	ldrb	r3, [r3, #1]
 8018730:	2b01      	cmp	r3, #1
 8018732:	d11c      	bne.n	801876e <USB_EPStartXfer+0xb62>
 8018734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018738:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8018742:	b29b      	uxth	r3, r3
 8018744:	461a      	mov	r2, r3
 8018746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018748:	4413      	add	r3, r2
 801874a:	673b      	str	r3, [r7, #112]	; 0x70
 801874c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	781b      	ldrb	r3, [r3, #0]
 8018758:	011a      	lsls	r2, r3, #4
 801875a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801875c:	4413      	add	r3, r2
 801875e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8018762:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018768:	b29a      	uxth	r2, r3
 801876a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801876c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801876e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	895b      	ldrh	r3, [r3, #10]
 801877a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801877e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	6959      	ldr	r1, [r3, #20]
 801878a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801878e:	b29b      	uxth	r3, r3
 8018790:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8018794:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8018798:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801879c:	6800      	ldr	r0, [r0, #0]
 801879e:	f000 ff3a 	bl	8019616 <USB_WritePMA>
 80187a2:	e0ca      	b.n	801893a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80187a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80187a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	785b      	ldrb	r3, [r3, #1]
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d177      	bne.n	80188a4 <USB_EPStartXfer+0xc98>
 80187b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80187b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80187c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80187c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80187c8:	681b      	ldr	r3, [r3, #0]
 80187ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80187ce:	b29b      	uxth	r3, r3
 80187d0:	461a      	mov	r2, r3
 80187d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80187d4:	4413      	add	r3, r2
 80187d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80187d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80187dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	781b      	ldrb	r3, [r3, #0]
 80187e4:	011a      	lsls	r2, r3, #4
 80187e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80187e8:	4413      	add	r3, r2
 80187ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80187ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80187f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80187f2:	881b      	ldrh	r3, [r3, #0]
 80187f4:	b29b      	uxth	r3, r3
 80187f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80187fa:	b29a      	uxth	r2, r3
 80187fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80187fe:	801a      	strh	r2, [r3, #0]
 8018800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018804:	2b3e      	cmp	r3, #62	; 0x3e
 8018806:	d921      	bls.n	801884c <USB_EPStartXfer+0xc40>
 8018808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801880c:	095b      	lsrs	r3, r3, #5
 801880e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8018812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018816:	f003 031f 	and.w	r3, r3, #31
 801881a:	2b00      	cmp	r3, #0
 801881c:	d104      	bne.n	8018828 <USB_EPStartXfer+0xc1c>
 801881e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8018822:	3b01      	subs	r3, #1
 8018824:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8018828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801882a:	881b      	ldrh	r3, [r3, #0]
 801882c:	b29a      	uxth	r2, r3
 801882e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8018832:	b29b      	uxth	r3, r3
 8018834:	029b      	lsls	r3, r3, #10
 8018836:	b29b      	uxth	r3, r3
 8018838:	4313      	orrs	r3, r2
 801883a:	b29b      	uxth	r3, r3
 801883c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8018840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8018844:	b29a      	uxth	r2, r3
 8018846:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018848:	801a      	strh	r2, [r3, #0]
 801884a:	e05c      	b.n	8018906 <USB_EPStartXfer+0xcfa>
 801884c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018850:	2b00      	cmp	r3, #0
 8018852:	d10a      	bne.n	801886a <USB_EPStartXfer+0xc5e>
 8018854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018856:	881b      	ldrh	r3, [r3, #0]
 8018858:	b29b      	uxth	r3, r3
 801885a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801885e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8018862:	b29a      	uxth	r2, r3
 8018864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018866:	801a      	strh	r2, [r3, #0]
 8018868:	e04d      	b.n	8018906 <USB_EPStartXfer+0xcfa>
 801886a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801886e:	085b      	lsrs	r3, r3, #1
 8018870:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8018874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018878:	f003 0301 	and.w	r3, r3, #1
 801887c:	2b00      	cmp	r3, #0
 801887e:	d004      	beq.n	801888a <USB_EPStartXfer+0xc7e>
 8018880:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8018884:	3301      	adds	r3, #1
 8018886:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801888a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801888c:	881b      	ldrh	r3, [r3, #0]
 801888e:	b29a      	uxth	r2, r3
 8018890:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8018894:	b29b      	uxth	r3, r3
 8018896:	029b      	lsls	r3, r3, #10
 8018898:	b29b      	uxth	r3, r3
 801889a:	4313      	orrs	r3, r2
 801889c:	b29a      	uxth	r2, r3
 801889e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80188a0:	801a      	strh	r2, [r3, #0]
 80188a2:	e030      	b.n	8018906 <USB_EPStartXfer+0xcfa>
 80188a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80188a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	785b      	ldrb	r3, [r3, #1]
 80188b0:	2b01      	cmp	r3, #1
 80188b2:	d128      	bne.n	8018906 <USB_EPStartXfer+0xcfa>
 80188b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80188b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80188c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80188c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80188d0:	b29b      	uxth	r3, r3
 80188d2:	461a      	mov	r2, r3
 80188d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80188d8:	4413      	add	r3, r2
 80188da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80188de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80188e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	781b      	ldrb	r3, [r3, #0]
 80188ea:	011a      	lsls	r2, r3, #4
 80188ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80188f0:	4413      	add	r3, r2
 80188f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80188f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80188fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80188fe:	b29a      	uxth	r2, r3
 8018900:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018904:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8018906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801890a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	891b      	ldrh	r3, [r3, #8]
 8018912:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8018916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801891a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	6959      	ldr	r1, [r3, #20]
 8018922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018926:	b29b      	uxth	r3, r3
 8018928:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801892c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8018930:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8018934:	6800      	ldr	r0, [r0, #0]
 8018936:	f000 fe6e 	bl	8019616 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801893a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801893e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018942:	681a      	ldr	r2, [r3, #0]
 8018944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	781b      	ldrb	r3, [r3, #0]
 8018950:	009b      	lsls	r3, r3, #2
 8018952:	4413      	add	r3, r2
 8018954:	881b      	ldrh	r3, [r3, #0]
 8018956:	b29b      	uxth	r3, r3
 8018958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801895c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018960:	817b      	strh	r3, [r7, #10]
 8018962:	897b      	ldrh	r3, [r7, #10]
 8018964:	f083 0310 	eor.w	r3, r3, #16
 8018968:	817b      	strh	r3, [r7, #10]
 801896a:	897b      	ldrh	r3, [r7, #10]
 801896c:	f083 0320 	eor.w	r3, r3, #32
 8018970:	817b      	strh	r3, [r7, #10]
 8018972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801897a:	681a      	ldr	r2, [r3, #0]
 801897c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	781b      	ldrb	r3, [r3, #0]
 8018988:	009b      	lsls	r3, r3, #2
 801898a:	441a      	add	r2, r3
 801898c:	897b      	ldrh	r3, [r7, #10]
 801898e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8018992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8018996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801899a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801899e:	b29b      	uxth	r3, r3
 80189a0:	8013      	strh	r3, [r2, #0]
 80189a2:	f000 bcde 	b.w	8019362 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80189a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80189aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	7b1b      	ldrb	r3, [r3, #12]
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	f040 80bb 	bne.w	8018b2e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80189b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80189bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	699a      	ldr	r2, [r3, #24]
 80189c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80189c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	691b      	ldr	r3, [r3, #16]
 80189d0:	429a      	cmp	r2, r3
 80189d2:	d917      	bls.n	8018a04 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80189d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80189d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	691b      	ldr	r3, [r3, #16]
 80189e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80189e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80189e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80189ec:	681b      	ldr	r3, [r3, #0]
 80189ee:	699a      	ldr	r2, [r3, #24]
 80189f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80189f4:	1ad2      	subs	r2, r2, r3
 80189f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80189fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	619a      	str	r2, [r3, #24]
 8018a02:	e00e      	b.n	8018a22 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8018a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	699b      	ldr	r3, [r3, #24]
 8018a10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8018a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	2200      	movs	r2, #0
 8018a20:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8018a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018a26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8018a30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018a34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8018a3e:	b29b      	uxth	r3, r3
 8018a40:	461a      	mov	r2, r3
 8018a42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018a46:	4413      	add	r3, r2
 8018a48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8018a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	781b      	ldrb	r3, [r3, #0]
 8018a58:	011a      	lsls	r2, r3, #4
 8018a5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018a5e:	4413      	add	r3, r2
 8018a60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8018a64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8018a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018a6c:	881b      	ldrh	r3, [r3, #0]
 8018a6e:	b29b      	uxth	r3, r3
 8018a70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8018a74:	b29a      	uxth	r2, r3
 8018a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018a7a:	801a      	strh	r2, [r3, #0]
 8018a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018a80:	2b3e      	cmp	r3, #62	; 0x3e
 8018a82:	d924      	bls.n	8018ace <USB_EPStartXfer+0xec2>
 8018a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018a88:	095b      	lsrs	r3, r3, #5
 8018a8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8018a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018a92:	f003 031f 	and.w	r3, r3, #31
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d104      	bne.n	8018aa4 <USB_EPStartXfer+0xe98>
 8018a9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018a9e:	3b01      	subs	r3, #1
 8018aa0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8018aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018aa8:	881b      	ldrh	r3, [r3, #0]
 8018aaa:	b29a      	uxth	r2, r3
 8018aac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018ab0:	b29b      	uxth	r3, r3
 8018ab2:	029b      	lsls	r3, r3, #10
 8018ab4:	b29b      	uxth	r3, r3
 8018ab6:	4313      	orrs	r3, r2
 8018ab8:	b29b      	uxth	r3, r3
 8018aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8018abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8018ac2:	b29a      	uxth	r2, r3
 8018ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018ac8:	801a      	strh	r2, [r3, #0]
 8018aca:	f000 bc10 	b.w	80192ee <USB_EPStartXfer+0x16e2>
 8018ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d10c      	bne.n	8018af0 <USB_EPStartXfer+0xee4>
 8018ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018ada:	881b      	ldrh	r3, [r3, #0]
 8018adc:	b29b      	uxth	r3, r3
 8018ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8018ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8018ae6:	b29a      	uxth	r2, r3
 8018ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018aec:	801a      	strh	r2, [r3, #0]
 8018aee:	e3fe      	b.n	80192ee <USB_EPStartXfer+0x16e2>
 8018af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018af4:	085b      	lsrs	r3, r3, #1
 8018af6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8018afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018afe:	f003 0301 	and.w	r3, r3, #1
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d004      	beq.n	8018b10 <USB_EPStartXfer+0xf04>
 8018b06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018b0a:	3301      	adds	r3, #1
 8018b0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8018b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018b14:	881b      	ldrh	r3, [r3, #0]
 8018b16:	b29a      	uxth	r2, r3
 8018b18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018b1c:	b29b      	uxth	r3, r3
 8018b1e:	029b      	lsls	r3, r3, #10
 8018b20:	b29b      	uxth	r3, r3
 8018b22:	4313      	orrs	r3, r2
 8018b24:	b29a      	uxth	r2, r3
 8018b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018b2a:	801a      	strh	r2, [r3, #0]
 8018b2c:	e3df      	b.n	80192ee <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8018b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	78db      	ldrb	r3, [r3, #3]
 8018b3a:	2b02      	cmp	r3, #2
 8018b3c:	f040 8218 	bne.w	8018f70 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8018b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	785b      	ldrb	r3, [r3, #1]
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	f040 809d 	bne.w	8018c8c <USB_EPStartXfer+0x1080>
 8018b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018b56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8018b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018b64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8018b6e:	b29b      	uxth	r3, r3
 8018b70:	461a      	mov	r2, r3
 8018b72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018b76:	4413      	add	r3, r2
 8018b78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8018b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018b80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	781b      	ldrb	r3, [r3, #0]
 8018b88:	011a      	lsls	r2, r3, #4
 8018b8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018b8e:	4413      	add	r3, r2
 8018b90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8018b94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8018b98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018b9c:	881b      	ldrh	r3, [r3, #0]
 8018b9e:	b29b      	uxth	r3, r3
 8018ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8018ba4:	b29a      	uxth	r2, r3
 8018ba6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018baa:	801a      	strh	r2, [r3, #0]
 8018bac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018bb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	691b      	ldr	r3, [r3, #16]
 8018bb8:	2b3e      	cmp	r3, #62	; 0x3e
 8018bba:	d92b      	bls.n	8018c14 <USB_EPStartXfer+0x1008>
 8018bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	691b      	ldr	r3, [r3, #16]
 8018bc8:	095b      	lsrs	r3, r3, #5
 8018bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8018bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	691b      	ldr	r3, [r3, #16]
 8018bda:	f003 031f 	and.w	r3, r3, #31
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d104      	bne.n	8018bec <USB_EPStartXfer+0xfe0>
 8018be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018be6:	3b01      	subs	r3, #1
 8018be8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8018bec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018bf0:	881b      	ldrh	r3, [r3, #0]
 8018bf2:	b29a      	uxth	r2, r3
 8018bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018bf8:	b29b      	uxth	r3, r3
 8018bfa:	029b      	lsls	r3, r3, #10
 8018bfc:	b29b      	uxth	r3, r3
 8018bfe:	4313      	orrs	r3, r2
 8018c00:	b29b      	uxth	r3, r3
 8018c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8018c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8018c0a:	b29a      	uxth	r2, r3
 8018c0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018c10:	801a      	strh	r2, [r3, #0]
 8018c12:	e070      	b.n	8018cf6 <USB_EPStartXfer+0x10ea>
 8018c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018c18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	691b      	ldr	r3, [r3, #16]
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d10c      	bne.n	8018c3e <USB_EPStartXfer+0x1032>
 8018c24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018c28:	881b      	ldrh	r3, [r3, #0]
 8018c2a:	b29b      	uxth	r3, r3
 8018c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8018c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8018c34:	b29a      	uxth	r2, r3
 8018c36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018c3a:	801a      	strh	r2, [r3, #0]
 8018c3c:	e05b      	b.n	8018cf6 <USB_EPStartXfer+0x10ea>
 8018c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018c42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	691b      	ldr	r3, [r3, #16]
 8018c4a:	085b      	lsrs	r3, r3, #1
 8018c4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8018c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	691b      	ldr	r3, [r3, #16]
 8018c5c:	f003 0301 	and.w	r3, r3, #1
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d004      	beq.n	8018c6e <USB_EPStartXfer+0x1062>
 8018c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018c68:	3301      	adds	r3, #1
 8018c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8018c6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018c72:	881b      	ldrh	r3, [r3, #0]
 8018c74:	b29a      	uxth	r2, r3
 8018c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018c7a:	b29b      	uxth	r3, r3
 8018c7c:	029b      	lsls	r3, r3, #10
 8018c7e:	b29b      	uxth	r3, r3
 8018c80:	4313      	orrs	r3, r2
 8018c82:	b29a      	uxth	r2, r3
 8018c84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018c88:	801a      	strh	r2, [r3, #0]
 8018c8a:	e034      	b.n	8018cf6 <USB_EPStartXfer+0x10ea>
 8018c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	785b      	ldrb	r3, [r3, #1]
 8018c98:	2b01      	cmp	r3, #1
 8018c9a:	d12c      	bne.n	8018cf6 <USB_EPStartXfer+0x10ea>
 8018c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018ca0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8018caa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018cae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8018cb8:	b29b      	uxth	r3, r3
 8018cba:	461a      	mov	r2, r3
 8018cbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018cc0:	4413      	add	r3, r2
 8018cc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8018cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	781b      	ldrb	r3, [r3, #0]
 8018cd2:	011a      	lsls	r2, r3, #4
 8018cd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018cd8:	4413      	add	r3, r2
 8018cda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8018cde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8018ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018ce6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	691b      	ldr	r3, [r3, #16]
 8018cee:	b29a      	uxth	r2, r3
 8018cf0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018cf4:	801a      	strh	r2, [r3, #0]
 8018cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018cfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8018d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	785b      	ldrb	r3, [r3, #1]
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	f040 809d 	bne.w	8018e50 <USB_EPStartXfer+0x1244>
 8018d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018d1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8018d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018d28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018d2c:	681b      	ldr	r3, [r3, #0]
 8018d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8018d32:	b29b      	uxth	r3, r3
 8018d34:	461a      	mov	r2, r3
 8018d36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018d3a:	4413      	add	r3, r2
 8018d3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8018d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	781b      	ldrb	r3, [r3, #0]
 8018d4c:	011a      	lsls	r2, r3, #4
 8018d4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018d52:	4413      	add	r3, r2
 8018d54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8018d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8018d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018d60:	881b      	ldrh	r3, [r3, #0]
 8018d62:	b29b      	uxth	r3, r3
 8018d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8018d68:	b29a      	uxth	r2, r3
 8018d6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018d6e:	801a      	strh	r2, [r3, #0]
 8018d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018d78:	681b      	ldr	r3, [r3, #0]
 8018d7a:	691b      	ldr	r3, [r3, #16]
 8018d7c:	2b3e      	cmp	r3, #62	; 0x3e
 8018d7e:	d92b      	bls.n	8018dd8 <USB_EPStartXfer+0x11cc>
 8018d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	691b      	ldr	r3, [r3, #16]
 8018d8c:	095b      	lsrs	r3, r3, #5
 8018d8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8018d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	691b      	ldr	r3, [r3, #16]
 8018d9e:	f003 031f 	and.w	r3, r3, #31
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d104      	bne.n	8018db0 <USB_EPStartXfer+0x11a4>
 8018da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018daa:	3b01      	subs	r3, #1
 8018dac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8018db0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018db4:	881b      	ldrh	r3, [r3, #0]
 8018db6:	b29a      	uxth	r2, r3
 8018db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018dbc:	b29b      	uxth	r3, r3
 8018dbe:	029b      	lsls	r3, r3, #10
 8018dc0:	b29b      	uxth	r3, r3
 8018dc2:	4313      	orrs	r3, r2
 8018dc4:	b29b      	uxth	r3, r3
 8018dc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8018dca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8018dce:	b29a      	uxth	r2, r3
 8018dd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018dd4:	801a      	strh	r2, [r3, #0]
 8018dd6:	e069      	b.n	8018eac <USB_EPStartXfer+0x12a0>
 8018dd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018ddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	691b      	ldr	r3, [r3, #16]
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d10c      	bne.n	8018e02 <USB_EPStartXfer+0x11f6>
 8018de8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018dec:	881b      	ldrh	r3, [r3, #0]
 8018dee:	b29b      	uxth	r3, r3
 8018df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8018df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8018df8:	b29a      	uxth	r2, r3
 8018dfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018dfe:	801a      	strh	r2, [r3, #0]
 8018e00:	e054      	b.n	8018eac <USB_EPStartXfer+0x12a0>
 8018e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018e06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	691b      	ldr	r3, [r3, #16]
 8018e0e:	085b      	lsrs	r3, r3, #1
 8018e10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8018e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	691b      	ldr	r3, [r3, #16]
 8018e20:	f003 0301 	and.w	r3, r3, #1
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	d004      	beq.n	8018e32 <USB_EPStartXfer+0x1226>
 8018e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018e2c:	3301      	adds	r3, #1
 8018e2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8018e32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018e36:	881b      	ldrh	r3, [r3, #0]
 8018e38:	b29a      	uxth	r2, r3
 8018e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018e3e:	b29b      	uxth	r3, r3
 8018e40:	029b      	lsls	r3, r3, #10
 8018e42:	b29b      	uxth	r3, r3
 8018e44:	4313      	orrs	r3, r2
 8018e46:	b29a      	uxth	r2, r3
 8018e48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018e4c:	801a      	strh	r2, [r3, #0]
 8018e4e:	e02d      	b.n	8018eac <USB_EPStartXfer+0x12a0>
 8018e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	785b      	ldrb	r3, [r3, #1]
 8018e5c:	2b01      	cmp	r3, #1
 8018e5e:	d125      	bne.n	8018eac <USB_EPStartXfer+0x12a0>
 8018e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018e64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8018e6e:	b29b      	uxth	r3, r3
 8018e70:	461a      	mov	r2, r3
 8018e72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018e76:	4413      	add	r3, r2
 8018e78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8018e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018e84:	681b      	ldr	r3, [r3, #0]
 8018e86:	781b      	ldrb	r3, [r3, #0]
 8018e88:	011a      	lsls	r2, r3, #4
 8018e8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018e8e:	4413      	add	r3, r2
 8018e90:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8018e94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8018e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	691b      	ldr	r3, [r3, #16]
 8018ea4:	b29a      	uxth	r2, r3
 8018ea6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018eaa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8018eac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018eb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	69db      	ldr	r3, [r3, #28]
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	f000 8218 	beq.w	80192ee <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8018ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018ec2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018ec6:	681a      	ldr	r2, [r3, #0]
 8018ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	781b      	ldrb	r3, [r3, #0]
 8018ed4:	009b      	lsls	r3, r3, #2
 8018ed6:	4413      	add	r3, r2
 8018ed8:	881b      	ldrh	r3, [r3, #0]
 8018eda:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8018ede:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8018ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d005      	beq.n	8018ef6 <USB_EPStartXfer+0x12ea>
 8018eea:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8018eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d10d      	bne.n	8018f12 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8018ef6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8018efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	f040 81f5 	bne.w	80192ee <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8018f04:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8018f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	f040 81ee 	bne.w	80192ee <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8018f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018f16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018f1a:	681a      	ldr	r2, [r3, #0]
 8018f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018f20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	781b      	ldrb	r3, [r3, #0]
 8018f28:	009b      	lsls	r3, r3, #2
 8018f2a:	4413      	add	r3, r2
 8018f2c:	881b      	ldrh	r3, [r3, #0]
 8018f2e:	b29b      	uxth	r3, r3
 8018f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8018f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018f38:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8018f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018f40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8018f44:	681a      	ldr	r2, [r3, #0]
 8018f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018f4e:	681b      	ldr	r3, [r3, #0]
 8018f50:	781b      	ldrb	r3, [r3, #0]
 8018f52:	009b      	lsls	r3, r3, #2
 8018f54:	441a      	add	r2, r3
 8018f56:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8018f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8018f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8018f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8018f66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8018f6a:	b29b      	uxth	r3, r3
 8018f6c:	8013      	strh	r3, [r2, #0]
 8018f6e:	e1be      	b.n	80192ee <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8018f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	78db      	ldrb	r3, [r3, #3]
 8018f7c:	2b01      	cmp	r3, #1
 8018f7e:	f040 81b4 	bne.w	80192ea <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8018f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	699a      	ldr	r2, [r3, #24]
 8018f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018f96:	681b      	ldr	r3, [r3, #0]
 8018f98:	691b      	ldr	r3, [r3, #16]
 8018f9a:	429a      	cmp	r2, r3
 8018f9c:	d917      	bls.n	8018fce <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8018f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018fa6:	681b      	ldr	r3, [r3, #0]
 8018fa8:	691b      	ldr	r3, [r3, #16]
 8018faa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8018fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018fb6:	681b      	ldr	r3, [r3, #0]
 8018fb8:	699a      	ldr	r2, [r3, #24]
 8018fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8018fbe:	1ad2      	subs	r2, r2, r3
 8018fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	619a      	str	r2, [r3, #24]
 8018fcc:	e00e      	b.n	8018fec <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8018fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018fd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018fd6:	681b      	ldr	r3, [r3, #0]
 8018fd8:	699b      	ldr	r3, [r3, #24]
 8018fda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8018fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018fe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	2200      	movs	r2, #0
 8018fea:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8018fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8018ff4:	681b      	ldr	r3, [r3, #0]
 8018ff6:	785b      	ldrb	r3, [r3, #1]
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	f040 8085 	bne.w	8019108 <USB_EPStartXfer+0x14fc>
 8018ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8019002:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801900c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8019010:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8019014:	681b      	ldr	r3, [r3, #0]
 8019016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801901a:	b29b      	uxth	r3, r3
 801901c:	461a      	mov	r2, r3
 801901e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8019022:	4413      	add	r3, r2
 8019024:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8019028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801902c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8019030:	681b      	ldr	r3, [r3, #0]
 8019032:	781b      	ldrb	r3, [r3, #0]
 8019034:	011a      	lsls	r2, r3, #4
 8019036:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801903a:	4413      	add	r3, r2
 801903c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8019040:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8019044:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8019048:	881b      	ldrh	r3, [r3, #0]
 801904a:	b29b      	uxth	r3, r3
 801904c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019050:	b29a      	uxth	r2, r3
 8019052:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8019056:	801a      	strh	r2, [r3, #0]
 8019058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801905c:	2b3e      	cmp	r3, #62	; 0x3e
 801905e:	d923      	bls.n	80190a8 <USB_EPStartXfer+0x149c>
 8019060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8019064:	095b      	lsrs	r3, r3, #5
 8019066:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801906a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801906e:	f003 031f 	and.w	r3, r3, #31
 8019072:	2b00      	cmp	r3, #0
 8019074:	d104      	bne.n	8019080 <USB_EPStartXfer+0x1474>
 8019076:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801907a:	3b01      	subs	r3, #1
 801907c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8019080:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8019084:	881b      	ldrh	r3, [r3, #0]
 8019086:	b29a      	uxth	r2, r3
 8019088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801908c:	b29b      	uxth	r3, r3
 801908e:	029b      	lsls	r3, r3, #10
 8019090:	b29b      	uxth	r3, r3
 8019092:	4313      	orrs	r3, r2
 8019094:	b29b      	uxth	r3, r3
 8019096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801909a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801909e:	b29a      	uxth	r2, r3
 80190a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80190a4:	801a      	strh	r2, [r3, #0]
 80190a6:	e060      	b.n	801916a <USB_EPStartXfer+0x155e>
 80190a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d10c      	bne.n	80190ca <USB_EPStartXfer+0x14be>
 80190b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80190b4:	881b      	ldrh	r3, [r3, #0]
 80190b6:	b29b      	uxth	r3, r3
 80190b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80190bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80190c0:	b29a      	uxth	r2, r3
 80190c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80190c6:	801a      	strh	r2, [r3, #0]
 80190c8:	e04f      	b.n	801916a <USB_EPStartXfer+0x155e>
 80190ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80190ce:	085b      	lsrs	r3, r3, #1
 80190d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80190d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80190d8:	f003 0301 	and.w	r3, r3, #1
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d004      	beq.n	80190ea <USB_EPStartXfer+0x14de>
 80190e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80190e4:	3301      	adds	r3, #1
 80190e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80190ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80190ee:	881b      	ldrh	r3, [r3, #0]
 80190f0:	b29a      	uxth	r2, r3
 80190f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80190f6:	b29b      	uxth	r3, r3
 80190f8:	029b      	lsls	r3, r3, #10
 80190fa:	b29b      	uxth	r3, r3
 80190fc:	4313      	orrs	r3, r2
 80190fe:	b29a      	uxth	r2, r3
 8019100:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8019104:	801a      	strh	r2, [r3, #0]
 8019106:	e030      	b.n	801916a <USB_EPStartXfer+0x155e>
 8019108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801910c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8019110:	681b      	ldr	r3, [r3, #0]
 8019112:	785b      	ldrb	r3, [r3, #1]
 8019114:	2b01      	cmp	r3, #1
 8019116:	d128      	bne.n	801916a <USB_EPStartXfer+0x155e>
 8019118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801911c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8019120:	681b      	ldr	r3, [r3, #0]
 8019122:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8019126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801912a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801912e:	681b      	ldr	r3, [r3, #0]
 8019130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8019134:	b29b      	uxth	r3, r3
 8019136:	461a      	mov	r2, r3
 8019138:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801913c:	4413      	add	r3, r2
 801913e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8019142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8019146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801914a:	681b      	ldr	r3, [r3, #0]
 801914c:	781b      	ldrb	r3, [r3, #0]
 801914e:	011a      	lsls	r2, r3, #4
 8019150:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8019154:	4413      	add	r3, r2
 8019156:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801915a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801915e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8019162:	b29a      	uxth	r2, r3
 8019164:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8019168:	801a      	strh	r2, [r3, #0]
 801916a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801916e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8019178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801917c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	785b      	ldrb	r3, [r3, #1]
 8019184:	2b00      	cmp	r3, #0
 8019186:	f040 8085 	bne.w	8019294 <USB_EPStartXfer+0x1688>
 801918a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801918e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8019192:	681b      	ldr	r3, [r3, #0]
 8019194:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8019198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801919c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80191a6:	b29b      	uxth	r3, r3
 80191a8:	461a      	mov	r2, r3
 80191aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80191ae:	4413      	add	r3, r2
 80191b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80191b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80191b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	781b      	ldrb	r3, [r3, #0]
 80191c0:	011a      	lsls	r2, r3, #4
 80191c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80191c6:	4413      	add	r3, r2
 80191c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80191cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80191d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80191d4:	881b      	ldrh	r3, [r3, #0]
 80191d6:	b29b      	uxth	r3, r3
 80191d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80191dc:	b29a      	uxth	r2, r3
 80191de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80191e2:	801a      	strh	r2, [r3, #0]
 80191e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80191e8:	2b3e      	cmp	r3, #62	; 0x3e
 80191ea:	d923      	bls.n	8019234 <USB_EPStartXfer+0x1628>
 80191ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80191f0:	095b      	lsrs	r3, r3, #5
 80191f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80191f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80191fa:	f003 031f 	and.w	r3, r3, #31
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d104      	bne.n	801920c <USB_EPStartXfer+0x1600>
 8019202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8019206:	3b01      	subs	r3, #1
 8019208:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801920c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8019210:	881b      	ldrh	r3, [r3, #0]
 8019212:	b29a      	uxth	r2, r3
 8019214:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8019218:	b29b      	uxth	r3, r3
 801921a:	029b      	lsls	r3, r3, #10
 801921c:	b29b      	uxth	r3, r3
 801921e:	4313      	orrs	r3, r2
 8019220:	b29b      	uxth	r3, r3
 8019222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8019226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801922a:	b29a      	uxth	r2, r3
 801922c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8019230:	801a      	strh	r2, [r3, #0]
 8019232:	e05c      	b.n	80192ee <USB_EPStartXfer+0x16e2>
 8019234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8019238:	2b00      	cmp	r3, #0
 801923a:	d10c      	bne.n	8019256 <USB_EPStartXfer+0x164a>
 801923c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8019240:	881b      	ldrh	r3, [r3, #0]
 8019242:	b29b      	uxth	r3, r3
 8019244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8019248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801924c:	b29a      	uxth	r2, r3
 801924e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8019252:	801a      	strh	r2, [r3, #0]
 8019254:	e04b      	b.n	80192ee <USB_EPStartXfer+0x16e2>
 8019256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801925a:	085b      	lsrs	r3, r3, #1
 801925c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8019260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8019264:	f003 0301 	and.w	r3, r3, #1
 8019268:	2b00      	cmp	r3, #0
 801926a:	d004      	beq.n	8019276 <USB_EPStartXfer+0x166a>
 801926c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8019270:	3301      	adds	r3, #1
 8019272:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8019276:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801927a:	881b      	ldrh	r3, [r3, #0]
 801927c:	b29a      	uxth	r2, r3
 801927e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8019282:	b29b      	uxth	r3, r3
 8019284:	029b      	lsls	r3, r3, #10
 8019286:	b29b      	uxth	r3, r3
 8019288:	4313      	orrs	r3, r2
 801928a:	b29a      	uxth	r2, r3
 801928c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8019290:	801a      	strh	r2, [r3, #0]
 8019292:	e02c      	b.n	80192ee <USB_EPStartXfer+0x16e2>
 8019294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8019298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	785b      	ldrb	r3, [r3, #1]
 80192a0:	2b01      	cmp	r3, #1
 80192a2:	d124      	bne.n	80192ee <USB_EPStartXfer+0x16e2>
 80192a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80192a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80192b2:	b29b      	uxth	r3, r3
 80192b4:	461a      	mov	r2, r3
 80192b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80192ba:	4413      	add	r3, r2
 80192bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80192c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80192c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	781b      	ldrb	r3, [r3, #0]
 80192cc:	011a      	lsls	r2, r3, #4
 80192ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80192d2:	4413      	add	r3, r2
 80192d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80192d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80192dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80192e0:	b29a      	uxth	r2, r3
 80192e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80192e6:	801a      	strh	r2, [r3, #0]
 80192e8:	e001      	b.n	80192ee <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80192ea:	2301      	movs	r3, #1
 80192ec:	e03a      	b.n	8019364 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80192ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80192f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80192f6:	681a      	ldr	r2, [r3, #0]
 80192f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80192fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	781b      	ldrb	r3, [r3, #0]
 8019304:	009b      	lsls	r3, r3, #2
 8019306:	4413      	add	r3, r2
 8019308:	881b      	ldrh	r3, [r3, #0]
 801930a:	b29b      	uxth	r3, r3
 801930c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8019310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019314:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8019318:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801931c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8019320:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8019324:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8019328:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801932c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8019330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8019334:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8019338:	681a      	ldr	r2, [r3, #0]
 801933a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801933e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	781b      	ldrb	r3, [r3, #0]
 8019346:	009b      	lsls	r3, r3, #2
 8019348:	441a      	add	r2, r3
 801934a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801934e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8019352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8019356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801935a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801935e:	b29b      	uxth	r3, r3
 8019360:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8019362:	2300      	movs	r3, #0
}
 8019364:	4618      	mov	r0, r3
 8019366:	f507 7784 	add.w	r7, r7, #264	; 0x108
 801936a:	46bd      	mov	sp, r7
 801936c:	bd80      	pop	{r7, pc}

0801936e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801936e:	b480      	push	{r7}
 8019370:	b085      	sub	sp, #20
 8019372:	af00      	add	r7, sp, #0
 8019374:	6078      	str	r0, [r7, #4]
 8019376:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8019378:	683b      	ldr	r3, [r7, #0]
 801937a:	785b      	ldrb	r3, [r3, #1]
 801937c:	2b00      	cmp	r3, #0
 801937e:	d020      	beq.n	80193c2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8019380:	687a      	ldr	r2, [r7, #4]
 8019382:	683b      	ldr	r3, [r7, #0]
 8019384:	781b      	ldrb	r3, [r3, #0]
 8019386:	009b      	lsls	r3, r3, #2
 8019388:	4413      	add	r3, r2
 801938a:	881b      	ldrh	r3, [r3, #0]
 801938c:	b29b      	uxth	r3, r3
 801938e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8019392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019396:	81bb      	strh	r3, [r7, #12]
 8019398:	89bb      	ldrh	r3, [r7, #12]
 801939a:	f083 0310 	eor.w	r3, r3, #16
 801939e:	81bb      	strh	r3, [r7, #12]
 80193a0:	687a      	ldr	r2, [r7, #4]
 80193a2:	683b      	ldr	r3, [r7, #0]
 80193a4:	781b      	ldrb	r3, [r3, #0]
 80193a6:	009b      	lsls	r3, r3, #2
 80193a8:	441a      	add	r2, r3
 80193aa:	89bb      	ldrh	r3, [r7, #12]
 80193ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80193b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80193b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80193b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80193bc:	b29b      	uxth	r3, r3
 80193be:	8013      	strh	r3, [r2, #0]
 80193c0:	e01f      	b.n	8019402 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80193c2:	687a      	ldr	r2, [r7, #4]
 80193c4:	683b      	ldr	r3, [r7, #0]
 80193c6:	781b      	ldrb	r3, [r3, #0]
 80193c8:	009b      	lsls	r3, r3, #2
 80193ca:	4413      	add	r3, r2
 80193cc:	881b      	ldrh	r3, [r3, #0]
 80193ce:	b29b      	uxth	r3, r3
 80193d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80193d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80193d8:	81fb      	strh	r3, [r7, #14]
 80193da:	89fb      	ldrh	r3, [r7, #14]
 80193dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80193e0:	81fb      	strh	r3, [r7, #14]
 80193e2:	687a      	ldr	r2, [r7, #4]
 80193e4:	683b      	ldr	r3, [r7, #0]
 80193e6:	781b      	ldrb	r3, [r3, #0]
 80193e8:	009b      	lsls	r3, r3, #2
 80193ea:	441a      	add	r2, r3
 80193ec:	89fb      	ldrh	r3, [r7, #14]
 80193ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80193f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80193f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80193fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80193fe:	b29b      	uxth	r3, r3
 8019400:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8019402:	2300      	movs	r3, #0
}
 8019404:	4618      	mov	r0, r3
 8019406:	3714      	adds	r7, #20
 8019408:	46bd      	mov	sp, r7
 801940a:	bc80      	pop	{r7}
 801940c:	4770      	bx	lr

0801940e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801940e:	b480      	push	{r7}
 8019410:	b087      	sub	sp, #28
 8019412:	af00      	add	r7, sp, #0
 8019414:	6078      	str	r0, [r7, #4]
 8019416:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8019418:	683b      	ldr	r3, [r7, #0]
 801941a:	7b1b      	ldrb	r3, [r3, #12]
 801941c:	2b00      	cmp	r3, #0
 801941e:	f040 809d 	bne.w	801955c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8019422:	683b      	ldr	r3, [r7, #0]
 8019424:	785b      	ldrb	r3, [r3, #1]
 8019426:	2b00      	cmp	r3, #0
 8019428:	d04c      	beq.n	80194c4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801942a:	687a      	ldr	r2, [r7, #4]
 801942c:	683b      	ldr	r3, [r7, #0]
 801942e:	781b      	ldrb	r3, [r3, #0]
 8019430:	009b      	lsls	r3, r3, #2
 8019432:	4413      	add	r3, r2
 8019434:	881b      	ldrh	r3, [r3, #0]
 8019436:	823b      	strh	r3, [r7, #16]
 8019438:	8a3b      	ldrh	r3, [r7, #16]
 801943a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801943e:	2b00      	cmp	r3, #0
 8019440:	d01b      	beq.n	801947a <USB_EPClearStall+0x6c>
 8019442:	687a      	ldr	r2, [r7, #4]
 8019444:	683b      	ldr	r3, [r7, #0]
 8019446:	781b      	ldrb	r3, [r3, #0]
 8019448:	009b      	lsls	r3, r3, #2
 801944a:	4413      	add	r3, r2
 801944c:	881b      	ldrh	r3, [r3, #0]
 801944e:	b29b      	uxth	r3, r3
 8019450:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8019454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019458:	81fb      	strh	r3, [r7, #14]
 801945a:	687a      	ldr	r2, [r7, #4]
 801945c:	683b      	ldr	r3, [r7, #0]
 801945e:	781b      	ldrb	r3, [r3, #0]
 8019460:	009b      	lsls	r3, r3, #2
 8019462:	441a      	add	r2, r3
 8019464:	89fb      	ldrh	r3, [r7, #14]
 8019466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801946a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801946e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8019472:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8019476:	b29b      	uxth	r3, r3
 8019478:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801947a:	683b      	ldr	r3, [r7, #0]
 801947c:	78db      	ldrb	r3, [r3, #3]
 801947e:	2b01      	cmp	r3, #1
 8019480:	d06c      	beq.n	801955c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8019482:	687a      	ldr	r2, [r7, #4]
 8019484:	683b      	ldr	r3, [r7, #0]
 8019486:	781b      	ldrb	r3, [r3, #0]
 8019488:	009b      	lsls	r3, r3, #2
 801948a:	4413      	add	r3, r2
 801948c:	881b      	ldrh	r3, [r3, #0]
 801948e:	b29b      	uxth	r3, r3
 8019490:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8019494:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019498:	81bb      	strh	r3, [r7, #12]
 801949a:	89bb      	ldrh	r3, [r7, #12]
 801949c:	f083 0320 	eor.w	r3, r3, #32
 80194a0:	81bb      	strh	r3, [r7, #12]
 80194a2:	687a      	ldr	r2, [r7, #4]
 80194a4:	683b      	ldr	r3, [r7, #0]
 80194a6:	781b      	ldrb	r3, [r3, #0]
 80194a8:	009b      	lsls	r3, r3, #2
 80194aa:	441a      	add	r2, r3
 80194ac:	89bb      	ldrh	r3, [r7, #12]
 80194ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80194b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80194b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80194ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80194be:	b29b      	uxth	r3, r3
 80194c0:	8013      	strh	r3, [r2, #0]
 80194c2:	e04b      	b.n	801955c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80194c4:	687a      	ldr	r2, [r7, #4]
 80194c6:	683b      	ldr	r3, [r7, #0]
 80194c8:	781b      	ldrb	r3, [r3, #0]
 80194ca:	009b      	lsls	r3, r3, #2
 80194cc:	4413      	add	r3, r2
 80194ce:	881b      	ldrh	r3, [r3, #0]
 80194d0:	82fb      	strh	r3, [r7, #22]
 80194d2:	8afb      	ldrh	r3, [r7, #22]
 80194d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80194d8:	2b00      	cmp	r3, #0
 80194da:	d01b      	beq.n	8019514 <USB_EPClearStall+0x106>
 80194dc:	687a      	ldr	r2, [r7, #4]
 80194de:	683b      	ldr	r3, [r7, #0]
 80194e0:	781b      	ldrb	r3, [r3, #0]
 80194e2:	009b      	lsls	r3, r3, #2
 80194e4:	4413      	add	r3, r2
 80194e6:	881b      	ldrh	r3, [r3, #0]
 80194e8:	b29b      	uxth	r3, r3
 80194ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80194ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80194f2:	82bb      	strh	r3, [r7, #20]
 80194f4:	687a      	ldr	r2, [r7, #4]
 80194f6:	683b      	ldr	r3, [r7, #0]
 80194f8:	781b      	ldrb	r3, [r3, #0]
 80194fa:	009b      	lsls	r3, r3, #2
 80194fc:	441a      	add	r2, r3
 80194fe:	8abb      	ldrh	r3, [r7, #20]
 8019500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8019504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8019508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801950c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019510:	b29b      	uxth	r3, r3
 8019512:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019514:	687a      	ldr	r2, [r7, #4]
 8019516:	683b      	ldr	r3, [r7, #0]
 8019518:	781b      	ldrb	r3, [r3, #0]
 801951a:	009b      	lsls	r3, r3, #2
 801951c:	4413      	add	r3, r2
 801951e:	881b      	ldrh	r3, [r3, #0]
 8019520:	b29b      	uxth	r3, r3
 8019522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8019526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801952a:	827b      	strh	r3, [r7, #18]
 801952c:	8a7b      	ldrh	r3, [r7, #18]
 801952e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8019532:	827b      	strh	r3, [r7, #18]
 8019534:	8a7b      	ldrh	r3, [r7, #18]
 8019536:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801953a:	827b      	strh	r3, [r7, #18]
 801953c:	687a      	ldr	r2, [r7, #4]
 801953e:	683b      	ldr	r3, [r7, #0]
 8019540:	781b      	ldrb	r3, [r3, #0]
 8019542:	009b      	lsls	r3, r3, #2
 8019544:	441a      	add	r2, r3
 8019546:	8a7b      	ldrh	r3, [r7, #18]
 8019548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801954c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8019550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8019554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019558:	b29b      	uxth	r3, r3
 801955a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 801955c:	2300      	movs	r3, #0
}
 801955e:	4618      	mov	r0, r3
 8019560:	371c      	adds	r7, #28
 8019562:	46bd      	mov	sp, r7
 8019564:	bc80      	pop	{r7}
 8019566:	4770      	bx	lr

08019568 <USB_StopDevice>:
  * @brief  USB_StopDevice Stop the usb device mode
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_StopDevice(USB_TypeDef *USBx)
{
 8019568:	b480      	push	{r7}
 801956a:	b083      	sub	sp, #12
 801956c:	af00      	add	r7, sp, #0
 801956e:	6078      	str	r0, [r7, #4]
  /* disable all interrupts and force USB reset */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	2201      	movs	r2, #1
 8019574:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* clear interrupt status register */
  USBx->ISTR = 0U;
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	2200      	movs	r2, #0
 801957c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* switch-off device */
  USBx->CNTR = (uint16_t)(USB_CNTR_FRES | USB_CNTR_PDWN);
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	2203      	movs	r2, #3
 8019584:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8019588:	2300      	movs	r3, #0
}
 801958a:	4618      	mov	r0, r3
 801958c:	370c      	adds	r7, #12
 801958e:	46bd      	mov	sp, r7
 8019590:	bc80      	pop	{r7}
 8019592:	4770      	bx	lr

08019594 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8019594:	b480      	push	{r7}
 8019596:	b083      	sub	sp, #12
 8019598:	af00      	add	r7, sp, #0
 801959a:	6078      	str	r0, [r7, #4]
 801959c:	460b      	mov	r3, r1
 801959e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80195a0:	78fb      	ldrb	r3, [r7, #3]
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d103      	bne.n	80195ae <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	2280      	movs	r2, #128	; 0x80
 80195aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80195ae:	2300      	movs	r3, #0
}
 80195b0:	4618      	mov	r0, r3
 80195b2:	370c      	adds	r7, #12
 80195b4:	46bd      	mov	sp, r7
 80195b6:	bc80      	pop	{r7}
 80195b8:	4770      	bx	lr

080195ba <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80195ba:	b480      	push	{r7}
 80195bc:	b083      	sub	sp, #12
 80195be:	af00      	add	r7, sp, #0
 80195c0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80195c2:	2300      	movs	r3, #0
}
 80195c4:	4618      	mov	r0, r3
 80195c6:	370c      	adds	r7, #12
 80195c8:	46bd      	mov	sp, r7
 80195ca:	bc80      	pop	{r7}
 80195cc:	4770      	bx	lr

080195ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80195ce:	b480      	push	{r7}
 80195d0:	b083      	sub	sp, #12
 80195d2:	af00      	add	r7, sp, #0
 80195d4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80195d6:	2300      	movs	r3, #0
}
 80195d8:	4618      	mov	r0, r3
 80195da:	370c      	adds	r7, #12
 80195dc:	46bd      	mov	sp, r7
 80195de:	bc80      	pop	{r7}
 80195e0:	4770      	bx	lr

080195e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80195e2:	b480      	push	{r7}
 80195e4:	b085      	sub	sp, #20
 80195e6:	af00      	add	r7, sp, #0
 80195e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80195f0:	b29b      	uxth	r3, r3
 80195f2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80195f4:	68fb      	ldr	r3, [r7, #12]
}
 80195f6:	4618      	mov	r0, r3
 80195f8:	3714      	adds	r7, #20
 80195fa:	46bd      	mov	sp, r7
 80195fc:	bc80      	pop	{r7}
 80195fe:	4770      	bx	lr

08019600 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8019600:	b480      	push	{r7}
 8019602:	b083      	sub	sp, #12
 8019604:	af00      	add	r7, sp, #0
 8019606:	6078      	str	r0, [r7, #4]
 8019608:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 801960a:	2300      	movs	r3, #0
}
 801960c:	4618      	mov	r0, r3
 801960e:	370c      	adds	r7, #12
 8019610:	46bd      	mov	sp, r7
 8019612:	bc80      	pop	{r7}
 8019614:	4770      	bx	lr

08019616 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8019616:	b480      	push	{r7}
 8019618:	b08b      	sub	sp, #44	; 0x2c
 801961a:	af00      	add	r7, sp, #0
 801961c:	60f8      	str	r0, [r7, #12]
 801961e:	60b9      	str	r1, [r7, #8]
 8019620:	4611      	mov	r1, r2
 8019622:	461a      	mov	r2, r3
 8019624:	460b      	mov	r3, r1
 8019626:	80fb      	strh	r3, [r7, #6]
 8019628:	4613      	mov	r3, r2
 801962a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801962c:	88bb      	ldrh	r3, [r7, #4]
 801962e:	3301      	adds	r3, #1
 8019630:	085b      	lsrs	r3, r3, #1
 8019632:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8019634:	68fb      	ldr	r3, [r7, #12]
 8019636:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8019638:	68bb      	ldr	r3, [r7, #8]
 801963a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801963c:	88fb      	ldrh	r3, [r7, #6]
 801963e:	005a      	lsls	r2, r3, #1
 8019640:	697b      	ldr	r3, [r7, #20]
 8019642:	4413      	add	r3, r2
 8019644:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8019648:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801964a:	69bb      	ldr	r3, [r7, #24]
 801964c:	627b      	str	r3, [r7, #36]	; 0x24
 801964e:	e01e      	b.n	801968e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8019650:	69fb      	ldr	r3, [r7, #28]
 8019652:	781b      	ldrb	r3, [r3, #0]
 8019654:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8019656:	69fb      	ldr	r3, [r7, #28]
 8019658:	3301      	adds	r3, #1
 801965a:	781b      	ldrb	r3, [r3, #0]
 801965c:	021b      	lsls	r3, r3, #8
 801965e:	b21a      	sxth	r2, r3
 8019660:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019664:	4313      	orrs	r3, r2
 8019666:	b21b      	sxth	r3, r3
 8019668:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 801966a:	6a3b      	ldr	r3, [r7, #32]
 801966c:	8a7a      	ldrh	r2, [r7, #18]
 801966e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8019670:	6a3b      	ldr	r3, [r7, #32]
 8019672:	3302      	adds	r3, #2
 8019674:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8019676:	6a3b      	ldr	r3, [r7, #32]
 8019678:	3302      	adds	r3, #2
 801967a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 801967c:	69fb      	ldr	r3, [r7, #28]
 801967e:	3301      	adds	r3, #1
 8019680:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8019682:	69fb      	ldr	r3, [r7, #28]
 8019684:	3301      	adds	r3, #1
 8019686:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8019688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801968a:	3b01      	subs	r3, #1
 801968c:	627b      	str	r3, [r7, #36]	; 0x24
 801968e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019690:	2b00      	cmp	r3, #0
 8019692:	d1dd      	bne.n	8019650 <USB_WritePMA+0x3a>
  }
}
 8019694:	bf00      	nop
 8019696:	bf00      	nop
 8019698:	372c      	adds	r7, #44	; 0x2c
 801969a:	46bd      	mov	sp, r7
 801969c:	bc80      	pop	{r7}
 801969e:	4770      	bx	lr

080196a0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80196a0:	b480      	push	{r7}
 80196a2:	b08b      	sub	sp, #44	; 0x2c
 80196a4:	af00      	add	r7, sp, #0
 80196a6:	60f8      	str	r0, [r7, #12]
 80196a8:	60b9      	str	r1, [r7, #8]
 80196aa:	4611      	mov	r1, r2
 80196ac:	461a      	mov	r2, r3
 80196ae:	460b      	mov	r3, r1
 80196b0:	80fb      	strh	r3, [r7, #6]
 80196b2:	4613      	mov	r3, r2
 80196b4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80196b6:	88bb      	ldrh	r3, [r7, #4]
 80196b8:	085b      	lsrs	r3, r3, #1
 80196ba:	b29b      	uxth	r3, r3
 80196bc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80196c2:	68bb      	ldr	r3, [r7, #8]
 80196c4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80196c6:	88fb      	ldrh	r3, [r7, #6]
 80196c8:	005a      	lsls	r2, r3, #1
 80196ca:	697b      	ldr	r3, [r7, #20]
 80196cc:	4413      	add	r3, r2
 80196ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80196d2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80196d4:	69bb      	ldr	r3, [r7, #24]
 80196d6:	627b      	str	r3, [r7, #36]	; 0x24
 80196d8:	e01b      	b.n	8019712 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80196da:	6a3b      	ldr	r3, [r7, #32]
 80196dc:	881b      	ldrh	r3, [r3, #0]
 80196de:	b29b      	uxth	r3, r3
 80196e0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80196e2:	6a3b      	ldr	r3, [r7, #32]
 80196e4:	3302      	adds	r3, #2
 80196e6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80196e8:	693b      	ldr	r3, [r7, #16]
 80196ea:	b2da      	uxtb	r2, r3
 80196ec:	69fb      	ldr	r3, [r7, #28]
 80196ee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80196f0:	69fb      	ldr	r3, [r7, #28]
 80196f2:	3301      	adds	r3, #1
 80196f4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80196f6:	693b      	ldr	r3, [r7, #16]
 80196f8:	0a1b      	lsrs	r3, r3, #8
 80196fa:	b2da      	uxtb	r2, r3
 80196fc:	69fb      	ldr	r3, [r7, #28]
 80196fe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8019700:	69fb      	ldr	r3, [r7, #28]
 8019702:	3301      	adds	r3, #1
 8019704:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8019706:	6a3b      	ldr	r3, [r7, #32]
 8019708:	3302      	adds	r3, #2
 801970a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 801970c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801970e:	3b01      	subs	r3, #1
 8019710:	627b      	str	r3, [r7, #36]	; 0x24
 8019712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019714:	2b00      	cmp	r3, #0
 8019716:	d1e0      	bne.n	80196da <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8019718:	88bb      	ldrh	r3, [r7, #4]
 801971a:	f003 0301 	and.w	r3, r3, #1
 801971e:	b29b      	uxth	r3, r3
 8019720:	2b00      	cmp	r3, #0
 8019722:	d007      	beq.n	8019734 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8019724:	6a3b      	ldr	r3, [r7, #32]
 8019726:	881b      	ldrh	r3, [r3, #0]
 8019728:	b29b      	uxth	r3, r3
 801972a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801972c:	693b      	ldr	r3, [r7, #16]
 801972e:	b2da      	uxtb	r2, r3
 8019730:	69fb      	ldr	r3, [r7, #28]
 8019732:	701a      	strb	r2, [r3, #0]
  }
}
 8019734:	bf00      	nop
 8019736:	372c      	adds	r7, #44	; 0x2c
 8019738:	46bd      	mov	sp, r7
 801973a:	bc80      	pop	{r7}
 801973c:	4770      	bx	lr

0801973e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801973e:	b580      	push	{r7, lr}
 8019740:	b084      	sub	sp, #16
 8019742:	af00      	add	r7, sp, #0
 8019744:	6078      	str	r0, [r7, #4]
 8019746:	460b      	mov	r3, r1
 8019748:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801974a:	2300      	movs	r3, #0
 801974c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	7c1b      	ldrb	r3, [r3, #16]
 8019752:	2b00      	cmp	r3, #0
 8019754:	d115      	bne.n	8019782 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8019756:	f44f 7300 	mov.w	r3, #512	; 0x200
 801975a:	2202      	movs	r2, #2
 801975c:	2181      	movs	r1, #129	; 0x81
 801975e:	6878      	ldr	r0, [r7, #4]
 8019760:	f001 ff4d 	bl	801b5fe <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	2201      	movs	r2, #1
 8019768:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801976a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801976e:	2202      	movs	r2, #2
 8019770:	2101      	movs	r1, #1
 8019772:	6878      	ldr	r0, [r7, #4]
 8019774:	f001 ff43 	bl	801b5fe <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	2201      	movs	r2, #1
 801977c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8019780:	e012      	b.n	80197a8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8019782:	2340      	movs	r3, #64	; 0x40
 8019784:	2202      	movs	r2, #2
 8019786:	2181      	movs	r1, #129	; 0x81
 8019788:	6878      	ldr	r0, [r7, #4]
 801978a:	f001 ff38 	bl	801b5fe <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	2201      	movs	r2, #1
 8019792:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8019794:	2340      	movs	r3, #64	; 0x40
 8019796:	2202      	movs	r2, #2
 8019798:	2101      	movs	r1, #1
 801979a:	6878      	ldr	r0, [r7, #4]
 801979c:	f001 ff2f 	bl	801b5fe <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	2201      	movs	r2, #1
 80197a4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80197a8:	2308      	movs	r3, #8
 80197aa:	2203      	movs	r2, #3
 80197ac:	2182      	movs	r1, #130	; 0x82
 80197ae:	6878      	ldr	r0, [r7, #4]
 80197b0:	f001 ff25 	bl	801b5fe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	2201      	movs	r2, #1
 80197b8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80197ba:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80197be:	f002 f845 	bl	801b84c <USBD_static_malloc>
 80197c2:	4602      	mov	r2, r0
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d102      	bne.n	80197da <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80197d4:	2301      	movs	r3, #1
 80197d6:	73fb      	strb	r3, [r7, #15]
 80197d8:	e026      	b.n	8019828 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80197e0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80197ec:	68bb      	ldr	r3, [r7, #8]
 80197ee:	2200      	movs	r2, #0
 80197f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80197f4:	68bb      	ldr	r3, [r7, #8]
 80197f6:	2200      	movs	r2, #0
 80197f8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	7c1b      	ldrb	r3, [r3, #16]
 8019800:	2b00      	cmp	r3, #0
 8019802:	d109      	bne.n	8019818 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8019804:	68bb      	ldr	r3, [r7, #8]
 8019806:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801980a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801980e:	2101      	movs	r1, #1
 8019810:	6878      	ldr	r0, [r7, #4]
 8019812:	f001 ffe5 	bl	801b7e0 <USBD_LL_PrepareReceive>
 8019816:	e007      	b.n	8019828 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8019818:	68bb      	ldr	r3, [r7, #8]
 801981a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801981e:	2340      	movs	r3, #64	; 0x40
 8019820:	2101      	movs	r1, #1
 8019822:	6878      	ldr	r0, [r7, #4]
 8019824:	f001 ffdc 	bl	801b7e0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8019828:	7bfb      	ldrb	r3, [r7, #15]
}
 801982a:	4618      	mov	r0, r3
 801982c:	3710      	adds	r7, #16
 801982e:	46bd      	mov	sp, r7
 8019830:	bd80      	pop	{r7, pc}

08019832 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8019832:	b580      	push	{r7, lr}
 8019834:	b084      	sub	sp, #16
 8019836:	af00      	add	r7, sp, #0
 8019838:	6078      	str	r0, [r7, #4]
 801983a:	460b      	mov	r3, r1
 801983c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801983e:	2300      	movs	r3, #0
 8019840:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8019842:	2181      	movs	r1, #129	; 0x81
 8019844:	6878      	ldr	r0, [r7, #4]
 8019846:	f001 ff00 	bl	801b64a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	2200      	movs	r2, #0
 801984e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8019850:	2101      	movs	r1, #1
 8019852:	6878      	ldr	r0, [r7, #4]
 8019854:	f001 fef9 	bl	801b64a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	2200      	movs	r2, #0
 801985c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8019860:	2182      	movs	r1, #130	; 0x82
 8019862:	6878      	ldr	r0, [r7, #4]
 8019864:	f001 fef1 	bl	801b64a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	2200      	movs	r2, #0
 801986c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019874:	2b00      	cmp	r3, #0
 8019876:	d00e      	beq.n	8019896 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801987e:	685b      	ldr	r3, [r3, #4]
 8019880:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019888:	4618      	mov	r0, r3
 801988a:	f001 ffeb 	bl	801b864 <USBD_static_free>
    pdev->pClassData = NULL;
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	2200      	movs	r2, #0
 8019892:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8019896:	7bfb      	ldrb	r3, [r7, #15]
}
 8019898:	4618      	mov	r0, r3
 801989a:	3710      	adds	r7, #16
 801989c:	46bd      	mov	sp, r7
 801989e:	bd80      	pop	{r7, pc}

080198a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80198a0:	b580      	push	{r7, lr}
 80198a2:	b086      	sub	sp, #24
 80198a4:	af00      	add	r7, sp, #0
 80198a6:	6078      	str	r0, [r7, #4]
 80198a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80198b0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80198b2:	2300      	movs	r3, #0
 80198b4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80198b6:	2300      	movs	r3, #0
 80198b8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80198ba:	2300      	movs	r3, #0
 80198bc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80198be:	683b      	ldr	r3, [r7, #0]
 80198c0:	781b      	ldrb	r3, [r3, #0]
 80198c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d039      	beq.n	801993e <USBD_CDC_Setup+0x9e>
 80198ca:	2b20      	cmp	r3, #32
 80198cc:	d17f      	bne.n	80199ce <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80198ce:	683b      	ldr	r3, [r7, #0]
 80198d0:	88db      	ldrh	r3, [r3, #6]
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	d029      	beq.n	801992a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80198d6:	683b      	ldr	r3, [r7, #0]
 80198d8:	781b      	ldrb	r3, [r3, #0]
 80198da:	b25b      	sxtb	r3, r3
 80198dc:	2b00      	cmp	r3, #0
 80198de:	da11      	bge.n	8019904 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80198e6:	689b      	ldr	r3, [r3, #8]
 80198e8:	683a      	ldr	r2, [r7, #0]
 80198ea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80198ec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80198ee:	683a      	ldr	r2, [r7, #0]
 80198f0:	88d2      	ldrh	r2, [r2, #6]
 80198f2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80198f4:	6939      	ldr	r1, [r7, #16]
 80198f6:	683b      	ldr	r3, [r7, #0]
 80198f8:	88db      	ldrh	r3, [r3, #6]
 80198fa:	461a      	mov	r2, r3
 80198fc:	6878      	ldr	r0, [r7, #4]
 80198fe:	f001 fa3c 	bl	801ad7a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8019902:	e06b      	b.n	80199dc <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8019904:	683b      	ldr	r3, [r7, #0]
 8019906:	785a      	ldrb	r2, [r3, #1]
 8019908:	693b      	ldr	r3, [r7, #16]
 801990a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801990e:	683b      	ldr	r3, [r7, #0]
 8019910:	88db      	ldrh	r3, [r3, #6]
 8019912:	b2da      	uxtb	r2, r3
 8019914:	693b      	ldr	r3, [r7, #16]
 8019916:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801991a:	6939      	ldr	r1, [r7, #16]
 801991c:	683b      	ldr	r3, [r7, #0]
 801991e:	88db      	ldrh	r3, [r3, #6]
 8019920:	461a      	mov	r2, r3
 8019922:	6878      	ldr	r0, [r7, #4]
 8019924:	f001 fa57 	bl	801add6 <USBD_CtlPrepareRx>
      break;
 8019928:	e058      	b.n	80199dc <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8019930:	689b      	ldr	r3, [r3, #8]
 8019932:	683a      	ldr	r2, [r7, #0]
 8019934:	7850      	ldrb	r0, [r2, #1]
 8019936:	2200      	movs	r2, #0
 8019938:	6839      	ldr	r1, [r7, #0]
 801993a:	4798      	blx	r3
      break;
 801993c:	e04e      	b.n	80199dc <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801993e:	683b      	ldr	r3, [r7, #0]
 8019940:	785b      	ldrb	r3, [r3, #1]
 8019942:	2b0b      	cmp	r3, #11
 8019944:	d02e      	beq.n	80199a4 <USBD_CDC_Setup+0x104>
 8019946:	2b0b      	cmp	r3, #11
 8019948:	dc38      	bgt.n	80199bc <USBD_CDC_Setup+0x11c>
 801994a:	2b00      	cmp	r3, #0
 801994c:	d002      	beq.n	8019954 <USBD_CDC_Setup+0xb4>
 801994e:	2b0a      	cmp	r3, #10
 8019950:	d014      	beq.n	801997c <USBD_CDC_Setup+0xdc>
 8019952:	e033      	b.n	80199bc <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801995a:	2b03      	cmp	r3, #3
 801995c:	d107      	bne.n	801996e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801995e:	f107 030c 	add.w	r3, r7, #12
 8019962:	2202      	movs	r2, #2
 8019964:	4619      	mov	r1, r3
 8019966:	6878      	ldr	r0, [r7, #4]
 8019968:	f001 fa07 	bl	801ad7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801996c:	e02e      	b.n	80199cc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 801996e:	6839      	ldr	r1, [r7, #0]
 8019970:	6878      	ldr	r0, [r7, #4]
 8019972:	f001 f998 	bl	801aca6 <USBD_CtlError>
            ret = USBD_FAIL;
 8019976:	2302      	movs	r3, #2
 8019978:	75fb      	strb	r3, [r7, #23]
          break;
 801997a:	e027      	b.n	80199cc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8019982:	2b03      	cmp	r3, #3
 8019984:	d107      	bne.n	8019996 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8019986:	f107 030f 	add.w	r3, r7, #15
 801998a:	2201      	movs	r2, #1
 801998c:	4619      	mov	r1, r3
 801998e:	6878      	ldr	r0, [r7, #4]
 8019990:	f001 f9f3 	bl	801ad7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8019994:	e01a      	b.n	80199cc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8019996:	6839      	ldr	r1, [r7, #0]
 8019998:	6878      	ldr	r0, [r7, #4]
 801999a:	f001 f984 	bl	801aca6 <USBD_CtlError>
            ret = USBD_FAIL;
 801999e:	2302      	movs	r3, #2
 80199a0:	75fb      	strb	r3, [r7, #23]
          break;
 80199a2:	e013      	b.n	80199cc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80199aa:	2b03      	cmp	r3, #3
 80199ac:	d00d      	beq.n	80199ca <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80199ae:	6839      	ldr	r1, [r7, #0]
 80199b0:	6878      	ldr	r0, [r7, #4]
 80199b2:	f001 f978 	bl	801aca6 <USBD_CtlError>
            ret = USBD_FAIL;
 80199b6:	2302      	movs	r3, #2
 80199b8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80199ba:	e006      	b.n	80199ca <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80199bc:	6839      	ldr	r1, [r7, #0]
 80199be:	6878      	ldr	r0, [r7, #4]
 80199c0:	f001 f971 	bl	801aca6 <USBD_CtlError>
          ret = USBD_FAIL;
 80199c4:	2302      	movs	r3, #2
 80199c6:	75fb      	strb	r3, [r7, #23]
          break;
 80199c8:	e000      	b.n	80199cc <USBD_CDC_Setup+0x12c>
          break;
 80199ca:	bf00      	nop
      }
      break;
 80199cc:	e006      	b.n	80199dc <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80199ce:	6839      	ldr	r1, [r7, #0]
 80199d0:	6878      	ldr	r0, [r7, #4]
 80199d2:	f001 f968 	bl	801aca6 <USBD_CtlError>
      ret = USBD_FAIL;
 80199d6:	2302      	movs	r3, #2
 80199d8:	75fb      	strb	r3, [r7, #23]
      break;
 80199da:	bf00      	nop
  }

  return ret;
 80199dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80199de:	4618      	mov	r0, r3
 80199e0:	3718      	adds	r7, #24
 80199e2:	46bd      	mov	sp, r7
 80199e4:	bd80      	pop	{r7, pc}

080199e6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80199e6:	b580      	push	{r7, lr}
 80199e8:	b084      	sub	sp, #16
 80199ea:	af00      	add	r7, sp, #0
 80199ec:	6078      	str	r0, [r7, #4]
 80199ee:	460b      	mov	r3, r1
 80199f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80199f8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019a00:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d03a      	beq.n	8019a82 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8019a0c:	78fa      	ldrb	r2, [r7, #3]
 8019a0e:	6879      	ldr	r1, [r7, #4]
 8019a10:	4613      	mov	r3, r2
 8019a12:	009b      	lsls	r3, r3, #2
 8019a14:	4413      	add	r3, r2
 8019a16:	009b      	lsls	r3, r3, #2
 8019a18:	440b      	add	r3, r1
 8019a1a:	331c      	adds	r3, #28
 8019a1c:	681b      	ldr	r3, [r3, #0]
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	d029      	beq.n	8019a76 <USBD_CDC_DataIn+0x90>
 8019a22:	78fa      	ldrb	r2, [r7, #3]
 8019a24:	6879      	ldr	r1, [r7, #4]
 8019a26:	4613      	mov	r3, r2
 8019a28:	009b      	lsls	r3, r3, #2
 8019a2a:	4413      	add	r3, r2
 8019a2c:	009b      	lsls	r3, r3, #2
 8019a2e:	440b      	add	r3, r1
 8019a30:	331c      	adds	r3, #28
 8019a32:	681a      	ldr	r2, [r3, #0]
 8019a34:	78f9      	ldrb	r1, [r7, #3]
 8019a36:	68b8      	ldr	r0, [r7, #8]
 8019a38:	460b      	mov	r3, r1
 8019a3a:	009b      	lsls	r3, r3, #2
 8019a3c:	440b      	add	r3, r1
 8019a3e:	00db      	lsls	r3, r3, #3
 8019a40:	4403      	add	r3, r0
 8019a42:	3338      	adds	r3, #56	; 0x38
 8019a44:	681b      	ldr	r3, [r3, #0]
 8019a46:	fbb2 f1f3 	udiv	r1, r2, r3
 8019a4a:	fb01 f303 	mul.w	r3, r1, r3
 8019a4e:	1ad3      	subs	r3, r2, r3
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	d110      	bne.n	8019a76 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8019a54:	78fa      	ldrb	r2, [r7, #3]
 8019a56:	6879      	ldr	r1, [r7, #4]
 8019a58:	4613      	mov	r3, r2
 8019a5a:	009b      	lsls	r3, r3, #2
 8019a5c:	4413      	add	r3, r2
 8019a5e:	009b      	lsls	r3, r3, #2
 8019a60:	440b      	add	r3, r1
 8019a62:	331c      	adds	r3, #28
 8019a64:	2200      	movs	r2, #0
 8019a66:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8019a68:	78f9      	ldrb	r1, [r7, #3]
 8019a6a:	2300      	movs	r3, #0
 8019a6c:	2200      	movs	r2, #0
 8019a6e:	6878      	ldr	r0, [r7, #4]
 8019a70:	f001 fe93 	bl	801b79a <USBD_LL_Transmit>
 8019a74:	e003      	b.n	8019a7e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8019a76:	68fb      	ldr	r3, [r7, #12]
 8019a78:	2200      	movs	r2, #0
 8019a7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8019a7e:	2300      	movs	r3, #0
 8019a80:	e000      	b.n	8019a84 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8019a82:	2302      	movs	r3, #2
  }
}
 8019a84:	4618      	mov	r0, r3
 8019a86:	3710      	adds	r7, #16
 8019a88:	46bd      	mov	sp, r7
 8019a8a:	bd80      	pop	{r7, pc}

08019a8c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8019a8c:	b580      	push	{r7, lr}
 8019a8e:	b084      	sub	sp, #16
 8019a90:	af00      	add	r7, sp, #0
 8019a92:	6078      	str	r0, [r7, #4]
 8019a94:	460b      	mov	r3, r1
 8019a96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019a9e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8019aa0:	78fb      	ldrb	r3, [r7, #3]
 8019aa2:	4619      	mov	r1, r3
 8019aa4:	6878      	ldr	r0, [r7, #4]
 8019aa6:	f001 febe 	bl	801b826 <USBD_LL_GetRxDataSize>
 8019aaa:	4602      	mov	r2, r0
 8019aac:	68fb      	ldr	r3, [r7, #12]
 8019aae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	d00d      	beq.n	8019ad8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8019ac2:	68db      	ldr	r3, [r3, #12]
 8019ac4:	68fa      	ldr	r2, [r7, #12]
 8019ac6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8019aca:	68fa      	ldr	r2, [r7, #12]
 8019acc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8019ad0:	4611      	mov	r1, r2
 8019ad2:	4798      	blx	r3

    return USBD_OK;
 8019ad4:	2300      	movs	r3, #0
 8019ad6:	e000      	b.n	8019ada <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8019ad8:	2302      	movs	r3, #2
  }
}
 8019ada:	4618      	mov	r0, r3
 8019adc:	3710      	adds	r7, #16
 8019ade:	46bd      	mov	sp, r7
 8019ae0:	bd80      	pop	{r7, pc}

08019ae2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8019ae2:	b580      	push	{r7, lr}
 8019ae4:	b084      	sub	sp, #16
 8019ae6:	af00      	add	r7, sp, #0
 8019ae8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019af0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	d015      	beq.n	8019b28 <USBD_CDC_EP0_RxReady+0x46>
 8019afc:	68fb      	ldr	r3, [r7, #12]
 8019afe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8019b02:	2bff      	cmp	r3, #255	; 0xff
 8019b04:	d010      	beq.n	8019b28 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8019b0c:	689b      	ldr	r3, [r3, #8]
 8019b0e:	68fa      	ldr	r2, [r7, #12]
 8019b10:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8019b14:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8019b16:	68fa      	ldr	r2, [r7, #12]
 8019b18:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8019b1c:	b292      	uxth	r2, r2
 8019b1e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	22ff      	movs	r2, #255	; 0xff
 8019b24:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8019b28:	2300      	movs	r3, #0
}
 8019b2a:	4618      	mov	r0, r3
 8019b2c:	3710      	adds	r7, #16
 8019b2e:	46bd      	mov	sp, r7
 8019b30:	bd80      	pop	{r7, pc}
	...

08019b34 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8019b34:	b480      	push	{r7}
 8019b36:	b083      	sub	sp, #12
 8019b38:	af00      	add	r7, sp, #0
 8019b3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	2243      	movs	r2, #67	; 0x43
 8019b40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8019b42:	4b03      	ldr	r3, [pc, #12]	; (8019b50 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8019b44:	4618      	mov	r0, r3
 8019b46:	370c      	adds	r7, #12
 8019b48:	46bd      	mov	sp, r7
 8019b4a:	bc80      	pop	{r7}
 8019b4c:	4770      	bx	lr
 8019b4e:	bf00      	nop
 8019b50:	2000072c 	.word	0x2000072c

08019b54 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8019b54:	b480      	push	{r7}
 8019b56:	b083      	sub	sp, #12
 8019b58:	af00      	add	r7, sp, #0
 8019b5a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	2243      	movs	r2, #67	; 0x43
 8019b60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8019b62:	4b03      	ldr	r3, [pc, #12]	; (8019b70 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8019b64:	4618      	mov	r0, r3
 8019b66:	370c      	adds	r7, #12
 8019b68:	46bd      	mov	sp, r7
 8019b6a:	bc80      	pop	{r7}
 8019b6c:	4770      	bx	lr
 8019b6e:	bf00      	nop
 8019b70:	200006e8 	.word	0x200006e8

08019b74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8019b74:	b480      	push	{r7}
 8019b76:	b083      	sub	sp, #12
 8019b78:	af00      	add	r7, sp, #0
 8019b7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	2243      	movs	r2, #67	; 0x43
 8019b80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8019b82:	4b03      	ldr	r3, [pc, #12]	; (8019b90 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8019b84:	4618      	mov	r0, r3
 8019b86:	370c      	adds	r7, #12
 8019b88:	46bd      	mov	sp, r7
 8019b8a:	bc80      	pop	{r7}
 8019b8c:	4770      	bx	lr
 8019b8e:	bf00      	nop
 8019b90:	20000770 	.word	0x20000770

08019b94 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8019b94:	b480      	push	{r7}
 8019b96:	b083      	sub	sp, #12
 8019b98:	af00      	add	r7, sp, #0
 8019b9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	220a      	movs	r2, #10
 8019ba0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8019ba2:	4b03      	ldr	r3, [pc, #12]	; (8019bb0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	370c      	adds	r7, #12
 8019ba8:	46bd      	mov	sp, r7
 8019baa:	bc80      	pop	{r7}
 8019bac:	4770      	bx	lr
 8019bae:	bf00      	nop
 8019bb0:	200006a4 	.word	0x200006a4

08019bb4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8019bb4:	b480      	push	{r7}
 8019bb6:	b085      	sub	sp, #20
 8019bb8:	af00      	add	r7, sp, #0
 8019bba:	6078      	str	r0, [r7, #4]
 8019bbc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8019bbe:	2302      	movs	r3, #2
 8019bc0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8019bc2:	683b      	ldr	r3, [r7, #0]
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d005      	beq.n	8019bd4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	683a      	ldr	r2, [r7, #0]
 8019bcc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8019bd0:	2300      	movs	r3, #0
 8019bd2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8019bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8019bd6:	4618      	mov	r0, r3
 8019bd8:	3714      	adds	r7, #20
 8019bda:	46bd      	mov	sp, r7
 8019bdc:	bc80      	pop	{r7}
 8019bde:	4770      	bx	lr

08019be0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8019be0:	b480      	push	{r7}
 8019be2:	b087      	sub	sp, #28
 8019be4:	af00      	add	r7, sp, #0
 8019be6:	60f8      	str	r0, [r7, #12]
 8019be8:	60b9      	str	r1, [r7, #8]
 8019bea:	4613      	mov	r3, r2
 8019bec:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019bee:	68fb      	ldr	r3, [r7, #12]
 8019bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019bf4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8019bf6:	697b      	ldr	r3, [r7, #20]
 8019bf8:	68ba      	ldr	r2, [r7, #8]
 8019bfa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8019bfe:	88fa      	ldrh	r2, [r7, #6]
 8019c00:	697b      	ldr	r3, [r7, #20]
 8019c02:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8019c06:	2300      	movs	r3, #0
}
 8019c08:	4618      	mov	r0, r3
 8019c0a:	371c      	adds	r7, #28
 8019c0c:	46bd      	mov	sp, r7
 8019c0e:	bc80      	pop	{r7}
 8019c10:	4770      	bx	lr

08019c12 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8019c12:	b480      	push	{r7}
 8019c14:	b085      	sub	sp, #20
 8019c16:	af00      	add	r7, sp, #0
 8019c18:	6078      	str	r0, [r7, #4]
 8019c1a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019c22:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8019c24:	68fb      	ldr	r3, [r7, #12]
 8019c26:	683a      	ldr	r2, [r7, #0]
 8019c28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8019c2c:	2300      	movs	r3, #0
}
 8019c2e:	4618      	mov	r0, r3
 8019c30:	3714      	adds	r7, #20
 8019c32:	46bd      	mov	sp, r7
 8019c34:	bc80      	pop	{r7}
 8019c36:	4770      	bx	lr

08019c38 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8019c38:	b580      	push	{r7, lr}
 8019c3a:	b084      	sub	sp, #16
 8019c3c:	af00      	add	r7, sp, #0
 8019c3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019c46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d01c      	beq.n	8019c8c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8019c52:	68fb      	ldr	r3, [r7, #12]
 8019c54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d115      	bne.n	8019c88 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	2201      	movs	r2, #1
 8019c60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8019c64:	68fb      	ldr	r3, [r7, #12]
 8019c66:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8019c74:	68fb      	ldr	r3, [r7, #12]
 8019c76:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8019c7a:	b29b      	uxth	r3, r3
 8019c7c:	2181      	movs	r1, #129	; 0x81
 8019c7e:	6878      	ldr	r0, [r7, #4]
 8019c80:	f001 fd8b 	bl	801b79a <USBD_LL_Transmit>

      return USBD_OK;
 8019c84:	2300      	movs	r3, #0
 8019c86:	e002      	b.n	8019c8e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8019c88:	2301      	movs	r3, #1
 8019c8a:	e000      	b.n	8019c8e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8019c8c:	2302      	movs	r3, #2
  }
}
 8019c8e:	4618      	mov	r0, r3
 8019c90:	3710      	adds	r7, #16
 8019c92:	46bd      	mov	sp, r7
 8019c94:	bd80      	pop	{r7, pc}

08019c96 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8019c96:	b580      	push	{r7, lr}
 8019c98:	b084      	sub	sp, #16
 8019c9a:	af00      	add	r7, sp, #0
 8019c9c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019ca4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	d017      	beq.n	8019ce0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	7c1b      	ldrb	r3, [r3, #16]
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	d109      	bne.n	8019ccc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8019cb8:	68fb      	ldr	r3, [r7, #12]
 8019cba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8019cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019cc2:	2101      	movs	r1, #1
 8019cc4:	6878      	ldr	r0, [r7, #4]
 8019cc6:	f001 fd8b 	bl	801b7e0 <USBD_LL_PrepareReceive>
 8019cca:	e007      	b.n	8019cdc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8019ccc:	68fb      	ldr	r3, [r7, #12]
 8019cce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8019cd2:	2340      	movs	r3, #64	; 0x40
 8019cd4:	2101      	movs	r1, #1
 8019cd6:	6878      	ldr	r0, [r7, #4]
 8019cd8:	f001 fd82 	bl	801b7e0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8019cdc:	2300      	movs	r3, #0
 8019cde:	e000      	b.n	8019ce2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8019ce0:	2302      	movs	r3, #2
  }
}
 8019ce2:	4618      	mov	r0, r3
 8019ce4:	3710      	adds	r7, #16
 8019ce6:	46bd      	mov	sp, r7
 8019ce8:	bd80      	pop	{r7, pc}

08019cea <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8019cea:	b580      	push	{r7, lr}
 8019cec:	b084      	sub	sp, #16
 8019cee:	af00      	add	r7, sp, #0
 8019cf0:	60f8      	str	r0, [r7, #12]
 8019cf2:	60b9      	str	r1, [r7, #8]
 8019cf4:	4613      	mov	r3, r2
 8019cf6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8019cf8:	68fb      	ldr	r3, [r7, #12]
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d101      	bne.n	8019d02 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8019cfe:	2302      	movs	r3, #2
 8019d00:	e01a      	b.n	8019d38 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8019d02:	68fb      	ldr	r3, [r7, #12]
 8019d04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d003      	beq.n	8019d14 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8019d0c:	68fb      	ldr	r3, [r7, #12]
 8019d0e:	2200      	movs	r2, #0
 8019d10:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8019d14:	68bb      	ldr	r3, [r7, #8]
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d003      	beq.n	8019d22 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	68ba      	ldr	r2, [r7, #8]
 8019d1e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8019d22:	68fb      	ldr	r3, [r7, #12]
 8019d24:	2201      	movs	r2, #1
 8019d26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8019d2a:	68fb      	ldr	r3, [r7, #12]
 8019d2c:	79fa      	ldrb	r2, [r7, #7]
 8019d2e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8019d30:	68f8      	ldr	r0, [r7, #12]
 8019d32:	f001 fbb9 	bl	801b4a8 <USBD_LL_Init>

  return USBD_OK;
 8019d36:	2300      	movs	r3, #0
}
 8019d38:	4618      	mov	r0, r3
 8019d3a:	3710      	adds	r7, #16
 8019d3c:	46bd      	mov	sp, r7
 8019d3e:	bd80      	pop	{r7, pc}

08019d40 <USBD_DeInit>:
*         Re-Initialize th device library
* @param  pdev: device instance
* @retval status: status
*/
USBD_StatusTypeDef USBD_DeInit(USBD_HandleTypeDef *pdev)
{
 8019d40:	b580      	push	{r7, lr}
 8019d42:	b082      	sub	sp, #8
 8019d44:	af00      	add	r7, sp, #0
 8019d46:	6078      	str	r0, [r7, #4]
  /* Set Default State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	2201      	movs	r2, #1
 8019d4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019d56:	685b      	ldr	r3, [r3, #4]
 8019d58:	687a      	ldr	r2, [r7, #4]
 8019d5a:	6852      	ldr	r2, [r2, #4]
 8019d5c:	b2d2      	uxtb	r2, r2
 8019d5e:	4611      	mov	r1, r2
 8019d60:	6878      	ldr	r0, [r7, #4]
 8019d62:	4798      	blx	r3

  /* Stop the low level driver  */
  USBD_LL_Stop(pdev);
 8019d64:	6878      	ldr	r0, [r7, #4]
 8019d66:	f001 fc2f 	bl	801b5c8 <USBD_LL_Stop>

  /* Initialize low level driver */
  USBD_LL_DeInit(pdev);
 8019d6a:	6878      	ldr	r0, [r7, #4]
 8019d6c:	f001 fbf6 	bl	801b55c <USBD_LL_DeInit>

  return USBD_OK;
 8019d70:	2300      	movs	r3, #0
}
 8019d72:	4618      	mov	r0, r3
 8019d74:	3708      	adds	r7, #8
 8019d76:	46bd      	mov	sp, r7
 8019d78:	bd80      	pop	{r7, pc}

08019d7a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8019d7a:	b480      	push	{r7}
 8019d7c:	b085      	sub	sp, #20
 8019d7e:	af00      	add	r7, sp, #0
 8019d80:	6078      	str	r0, [r7, #4]
 8019d82:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8019d84:	2300      	movs	r3, #0
 8019d86:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8019d88:	683b      	ldr	r3, [r7, #0]
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	d006      	beq.n	8019d9c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	683a      	ldr	r2, [r7, #0]
 8019d92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8019d96:	2300      	movs	r3, #0
 8019d98:	73fb      	strb	r3, [r7, #15]
 8019d9a:	e001      	b.n	8019da0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8019d9c:	2302      	movs	r3, #2
 8019d9e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8019da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8019da2:	4618      	mov	r0, r3
 8019da4:	3714      	adds	r7, #20
 8019da6:	46bd      	mov	sp, r7
 8019da8:	bc80      	pop	{r7}
 8019daa:	4770      	bx	lr

08019dac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8019dac:	b580      	push	{r7, lr}
 8019dae:	b082      	sub	sp, #8
 8019db0:	af00      	add	r7, sp, #0
 8019db2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8019db4:	6878      	ldr	r0, [r7, #4]
 8019db6:	f001 fbec 	bl	801b592 <USBD_LL_Start>

  return USBD_OK;
 8019dba:	2300      	movs	r3, #0
}
 8019dbc:	4618      	mov	r0, r3
 8019dbe:	3708      	adds	r7, #8
 8019dc0:	46bd      	mov	sp, r7
 8019dc2:	bd80      	pop	{r7, pc}

08019dc4 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8019dc4:	b580      	push	{r7, lr}
 8019dc6:	b082      	sub	sp, #8
 8019dc8:	af00      	add	r7, sp, #0
 8019dca:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019dd2:	685b      	ldr	r3, [r3, #4]
 8019dd4:	687a      	ldr	r2, [r7, #4]
 8019dd6:	6852      	ldr	r2, [r2, #4]
 8019dd8:	b2d2      	uxtb	r2, r2
 8019dda:	4611      	mov	r1, r2
 8019ddc:	6878      	ldr	r0, [r7, #4]
 8019dde:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 8019de0:	6878      	ldr	r0, [r7, #4]
 8019de2:	f001 fbf1 	bl	801b5c8 <USBD_LL_Stop>

  return USBD_OK;
 8019de6:	2300      	movs	r3, #0
}
 8019de8:	4618      	mov	r0, r3
 8019dea:	3708      	adds	r7, #8
 8019dec:	46bd      	mov	sp, r7
 8019dee:	bd80      	pop	{r7, pc}

08019df0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8019df0:	b480      	push	{r7}
 8019df2:	b083      	sub	sp, #12
 8019df4:	af00      	add	r7, sp, #0
 8019df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8019df8:	2300      	movs	r3, #0
}
 8019dfa:	4618      	mov	r0, r3
 8019dfc:	370c      	adds	r7, #12
 8019dfe:	46bd      	mov	sp, r7
 8019e00:	bc80      	pop	{r7}
 8019e02:	4770      	bx	lr

08019e04 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8019e04:	b580      	push	{r7, lr}
 8019e06:	b084      	sub	sp, #16
 8019e08:	af00      	add	r7, sp, #0
 8019e0a:	6078      	str	r0, [r7, #4]
 8019e0c:	460b      	mov	r3, r1
 8019e0e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8019e10:	2302      	movs	r3, #2
 8019e12:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d00c      	beq.n	8019e38 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	78fa      	ldrb	r2, [r7, #3]
 8019e28:	4611      	mov	r1, r2
 8019e2a:	6878      	ldr	r0, [r7, #4]
 8019e2c:	4798      	blx	r3
 8019e2e:	4603      	mov	r3, r0
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d101      	bne.n	8019e38 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8019e34:	2300      	movs	r3, #0
 8019e36:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8019e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8019e3a:	4618      	mov	r0, r3
 8019e3c:	3710      	adds	r7, #16
 8019e3e:	46bd      	mov	sp, r7
 8019e40:	bd80      	pop	{r7, pc}

08019e42 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8019e42:	b580      	push	{r7, lr}
 8019e44:	b082      	sub	sp, #8
 8019e46:	af00      	add	r7, sp, #0
 8019e48:	6078      	str	r0, [r7, #4]
 8019e4a:	460b      	mov	r3, r1
 8019e4c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019e54:	685b      	ldr	r3, [r3, #4]
 8019e56:	78fa      	ldrb	r2, [r7, #3]
 8019e58:	4611      	mov	r1, r2
 8019e5a:	6878      	ldr	r0, [r7, #4]
 8019e5c:	4798      	blx	r3

  return USBD_OK;
 8019e5e:	2300      	movs	r3, #0
}
 8019e60:	4618      	mov	r0, r3
 8019e62:	3708      	adds	r7, #8
 8019e64:	46bd      	mov	sp, r7
 8019e66:	bd80      	pop	{r7, pc}

08019e68 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8019e68:	b580      	push	{r7, lr}
 8019e6a:	b082      	sub	sp, #8
 8019e6c:	af00      	add	r7, sp, #0
 8019e6e:	6078      	str	r0, [r7, #4]
 8019e70:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8019e78:	6839      	ldr	r1, [r7, #0]
 8019e7a:	4618      	mov	r0, r3
 8019e7c:	f000 fed7 	bl	801ac2e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	2201      	movs	r2, #1
 8019e84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8019e88:	687b      	ldr	r3, [r7, #4]
 8019e8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8019e8e:	461a      	mov	r2, r3
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8019e9c:	f003 031f 	and.w	r3, r3, #31
 8019ea0:	2b02      	cmp	r3, #2
 8019ea2:	d016      	beq.n	8019ed2 <USBD_LL_SetupStage+0x6a>
 8019ea4:	2b02      	cmp	r3, #2
 8019ea6:	d81c      	bhi.n	8019ee2 <USBD_LL_SetupStage+0x7a>
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d002      	beq.n	8019eb2 <USBD_LL_SetupStage+0x4a>
 8019eac:	2b01      	cmp	r3, #1
 8019eae:	d008      	beq.n	8019ec2 <USBD_LL_SetupStage+0x5a>
 8019eb0:	e017      	b.n	8019ee2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8019eb8:	4619      	mov	r1, r3
 8019eba:	6878      	ldr	r0, [r7, #4]
 8019ebc:	f000 f9ca 	bl	801a254 <USBD_StdDevReq>
      break;
 8019ec0:	e01a      	b.n	8019ef8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8019ec8:	4619      	mov	r1, r3
 8019eca:	6878      	ldr	r0, [r7, #4]
 8019ecc:	f000 fa2c 	bl	801a328 <USBD_StdItfReq>
      break;
 8019ed0:	e012      	b.n	8019ef8 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8019ed8:	4619      	mov	r1, r3
 8019eda:	6878      	ldr	r0, [r7, #4]
 8019edc:	f000 fa6c 	bl	801a3b8 <USBD_StdEPReq>
      break;
 8019ee0:	e00a      	b.n	8019ef8 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8019ee8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8019eec:	b2db      	uxtb	r3, r3
 8019eee:	4619      	mov	r1, r3
 8019ef0:	6878      	ldr	r0, [r7, #4]
 8019ef2:	f001 fbc9 	bl	801b688 <USBD_LL_StallEP>
      break;
 8019ef6:	bf00      	nop
  }

  return USBD_OK;
 8019ef8:	2300      	movs	r3, #0
}
 8019efa:	4618      	mov	r0, r3
 8019efc:	3708      	adds	r7, #8
 8019efe:	46bd      	mov	sp, r7
 8019f00:	bd80      	pop	{r7, pc}

08019f02 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8019f02:	b580      	push	{r7, lr}
 8019f04:	b086      	sub	sp, #24
 8019f06:	af00      	add	r7, sp, #0
 8019f08:	60f8      	str	r0, [r7, #12]
 8019f0a:	460b      	mov	r3, r1
 8019f0c:	607a      	str	r2, [r7, #4]
 8019f0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8019f10:	7afb      	ldrb	r3, [r7, #11]
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d14b      	bne.n	8019fae <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8019f16:	68fb      	ldr	r3, [r7, #12]
 8019f18:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8019f1c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8019f1e:	68fb      	ldr	r3, [r7, #12]
 8019f20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8019f24:	2b03      	cmp	r3, #3
 8019f26:	d134      	bne.n	8019f92 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8019f28:	697b      	ldr	r3, [r7, #20]
 8019f2a:	68da      	ldr	r2, [r3, #12]
 8019f2c:	697b      	ldr	r3, [r7, #20]
 8019f2e:	691b      	ldr	r3, [r3, #16]
 8019f30:	429a      	cmp	r2, r3
 8019f32:	d919      	bls.n	8019f68 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8019f34:	697b      	ldr	r3, [r7, #20]
 8019f36:	68da      	ldr	r2, [r3, #12]
 8019f38:	697b      	ldr	r3, [r7, #20]
 8019f3a:	691b      	ldr	r3, [r3, #16]
 8019f3c:	1ad2      	subs	r2, r2, r3
 8019f3e:	697b      	ldr	r3, [r7, #20]
 8019f40:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8019f42:	697b      	ldr	r3, [r7, #20]
 8019f44:	68da      	ldr	r2, [r3, #12]
 8019f46:	697b      	ldr	r3, [r7, #20]
 8019f48:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8019f4a:	429a      	cmp	r2, r3
 8019f4c:	d203      	bcs.n	8019f56 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8019f4e:	697b      	ldr	r3, [r7, #20]
 8019f50:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8019f52:	b29b      	uxth	r3, r3
 8019f54:	e002      	b.n	8019f5c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8019f56:	697b      	ldr	r3, [r7, #20]
 8019f58:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8019f5a:	b29b      	uxth	r3, r3
 8019f5c:	461a      	mov	r2, r3
 8019f5e:	6879      	ldr	r1, [r7, #4]
 8019f60:	68f8      	ldr	r0, [r7, #12]
 8019f62:	f000 ff56 	bl	801ae12 <USBD_CtlContinueRx>
 8019f66:	e038      	b.n	8019fda <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8019f68:	68fb      	ldr	r3, [r7, #12]
 8019f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019f6e:	691b      	ldr	r3, [r3, #16]
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	d00a      	beq.n	8019f8a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8019f74:	68fb      	ldr	r3, [r7, #12]
 8019f76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8019f7a:	2b03      	cmp	r3, #3
 8019f7c:	d105      	bne.n	8019f8a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8019f7e:	68fb      	ldr	r3, [r7, #12]
 8019f80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019f84:	691b      	ldr	r3, [r3, #16]
 8019f86:	68f8      	ldr	r0, [r7, #12]
 8019f88:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8019f8a:	68f8      	ldr	r0, [r7, #12]
 8019f8c:	f000 ff53 	bl	801ae36 <USBD_CtlSendStatus>
 8019f90:	e023      	b.n	8019fda <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8019f92:	68fb      	ldr	r3, [r7, #12]
 8019f94:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8019f98:	2b05      	cmp	r3, #5
 8019f9a:	d11e      	bne.n	8019fda <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	2200      	movs	r2, #0
 8019fa0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8019fa4:	2100      	movs	r1, #0
 8019fa6:	68f8      	ldr	r0, [r7, #12]
 8019fa8:	f001 fb6e 	bl	801b688 <USBD_LL_StallEP>
 8019fac:	e015      	b.n	8019fda <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8019fae:	68fb      	ldr	r3, [r7, #12]
 8019fb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019fb4:	699b      	ldr	r3, [r3, #24]
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d00d      	beq.n	8019fd6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8019fba:	68fb      	ldr	r3, [r7, #12]
 8019fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8019fc0:	2b03      	cmp	r3, #3
 8019fc2:	d108      	bne.n	8019fd6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8019fc4:	68fb      	ldr	r3, [r7, #12]
 8019fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8019fca:	699b      	ldr	r3, [r3, #24]
 8019fcc:	7afa      	ldrb	r2, [r7, #11]
 8019fce:	4611      	mov	r1, r2
 8019fd0:	68f8      	ldr	r0, [r7, #12]
 8019fd2:	4798      	blx	r3
 8019fd4:	e001      	b.n	8019fda <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8019fd6:	2302      	movs	r3, #2
 8019fd8:	e000      	b.n	8019fdc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8019fda:	2300      	movs	r3, #0
}
 8019fdc:	4618      	mov	r0, r3
 8019fde:	3718      	adds	r7, #24
 8019fe0:	46bd      	mov	sp, r7
 8019fe2:	bd80      	pop	{r7, pc}

08019fe4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8019fe4:	b580      	push	{r7, lr}
 8019fe6:	b086      	sub	sp, #24
 8019fe8:	af00      	add	r7, sp, #0
 8019fea:	60f8      	str	r0, [r7, #12]
 8019fec:	460b      	mov	r3, r1
 8019fee:	607a      	str	r2, [r7, #4]
 8019ff0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8019ff2:	7afb      	ldrb	r3, [r7, #11]
 8019ff4:	2b00      	cmp	r3, #0
 8019ff6:	d17f      	bne.n	801a0f8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8019ff8:	68fb      	ldr	r3, [r7, #12]
 8019ffa:	3314      	adds	r3, #20
 8019ffc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8019ffe:	68fb      	ldr	r3, [r7, #12]
 801a000:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801a004:	2b02      	cmp	r3, #2
 801a006:	d15c      	bne.n	801a0c2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 801a008:	697b      	ldr	r3, [r7, #20]
 801a00a:	68da      	ldr	r2, [r3, #12]
 801a00c:	697b      	ldr	r3, [r7, #20]
 801a00e:	691b      	ldr	r3, [r3, #16]
 801a010:	429a      	cmp	r2, r3
 801a012:	d915      	bls.n	801a040 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 801a014:	697b      	ldr	r3, [r7, #20]
 801a016:	68da      	ldr	r2, [r3, #12]
 801a018:	697b      	ldr	r3, [r7, #20]
 801a01a:	691b      	ldr	r3, [r3, #16]
 801a01c:	1ad2      	subs	r2, r2, r3
 801a01e:	697b      	ldr	r3, [r7, #20]
 801a020:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801a022:	697b      	ldr	r3, [r7, #20]
 801a024:	68db      	ldr	r3, [r3, #12]
 801a026:	b29b      	uxth	r3, r3
 801a028:	461a      	mov	r2, r3
 801a02a:	6879      	ldr	r1, [r7, #4]
 801a02c:	68f8      	ldr	r0, [r7, #12]
 801a02e:	f000 fec0 	bl	801adb2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a032:	2300      	movs	r3, #0
 801a034:	2200      	movs	r2, #0
 801a036:	2100      	movs	r1, #0
 801a038:	68f8      	ldr	r0, [r7, #12]
 801a03a:	f001 fbd1 	bl	801b7e0 <USBD_LL_PrepareReceive>
 801a03e:	e04e      	b.n	801a0de <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801a040:	697b      	ldr	r3, [r7, #20]
 801a042:	689b      	ldr	r3, [r3, #8]
 801a044:	697a      	ldr	r2, [r7, #20]
 801a046:	6912      	ldr	r2, [r2, #16]
 801a048:	fbb3 f1f2 	udiv	r1, r3, r2
 801a04c:	fb01 f202 	mul.w	r2, r1, r2
 801a050:	1a9b      	subs	r3, r3, r2
 801a052:	2b00      	cmp	r3, #0
 801a054:	d11c      	bne.n	801a090 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 801a056:	697b      	ldr	r3, [r7, #20]
 801a058:	689a      	ldr	r2, [r3, #8]
 801a05a:	697b      	ldr	r3, [r7, #20]
 801a05c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801a05e:	429a      	cmp	r2, r3
 801a060:	d316      	bcc.n	801a090 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 801a062:	697b      	ldr	r3, [r7, #20]
 801a064:	689a      	ldr	r2, [r3, #8]
 801a066:	68fb      	ldr	r3, [r7, #12]
 801a068:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801a06c:	429a      	cmp	r2, r3
 801a06e:	d20f      	bcs.n	801a090 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801a070:	2200      	movs	r2, #0
 801a072:	2100      	movs	r1, #0
 801a074:	68f8      	ldr	r0, [r7, #12]
 801a076:	f000 fe9c 	bl	801adb2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801a07a:	68fb      	ldr	r3, [r7, #12]
 801a07c:	2200      	movs	r2, #0
 801a07e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a082:	2300      	movs	r3, #0
 801a084:	2200      	movs	r2, #0
 801a086:	2100      	movs	r1, #0
 801a088:	68f8      	ldr	r0, [r7, #12]
 801a08a:	f001 fba9 	bl	801b7e0 <USBD_LL_PrepareReceive>
 801a08e:	e026      	b.n	801a0de <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801a090:	68fb      	ldr	r3, [r7, #12]
 801a092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a096:	68db      	ldr	r3, [r3, #12]
 801a098:	2b00      	cmp	r3, #0
 801a09a:	d00a      	beq.n	801a0b2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801a09c:	68fb      	ldr	r3, [r7, #12]
 801a09e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801a0a2:	2b03      	cmp	r3, #3
 801a0a4:	d105      	bne.n	801a0b2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801a0a6:	68fb      	ldr	r3, [r7, #12]
 801a0a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a0ac:	68db      	ldr	r3, [r3, #12]
 801a0ae:	68f8      	ldr	r0, [r7, #12]
 801a0b0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801a0b2:	2180      	movs	r1, #128	; 0x80
 801a0b4:	68f8      	ldr	r0, [r7, #12]
 801a0b6:	f001 fae7 	bl	801b688 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801a0ba:	68f8      	ldr	r0, [r7, #12]
 801a0bc:	f000 fece 	bl	801ae5c <USBD_CtlReceiveStatus>
 801a0c0:	e00d      	b.n	801a0de <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801a0c8:	2b04      	cmp	r3, #4
 801a0ca:	d004      	beq.n	801a0d6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801a0cc:	68fb      	ldr	r3, [r7, #12]
 801a0ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d103      	bne.n	801a0de <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801a0d6:	2180      	movs	r1, #128	; 0x80
 801a0d8:	68f8      	ldr	r0, [r7, #12]
 801a0da:	f001 fad5 	bl	801b688 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801a0e4:	2b01      	cmp	r3, #1
 801a0e6:	d11d      	bne.n	801a124 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 801a0e8:	68f8      	ldr	r0, [r7, #12]
 801a0ea:	f7ff fe81 	bl	8019df0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801a0ee:	68fb      	ldr	r3, [r7, #12]
 801a0f0:	2200      	movs	r2, #0
 801a0f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801a0f6:	e015      	b.n	801a124 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a0fe:	695b      	ldr	r3, [r3, #20]
 801a100:	2b00      	cmp	r3, #0
 801a102:	d00d      	beq.n	801a120 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801a104:	68fb      	ldr	r3, [r7, #12]
 801a106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 801a10a:	2b03      	cmp	r3, #3
 801a10c:	d108      	bne.n	801a120 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801a10e:	68fb      	ldr	r3, [r7, #12]
 801a110:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a114:	695b      	ldr	r3, [r3, #20]
 801a116:	7afa      	ldrb	r2, [r7, #11]
 801a118:	4611      	mov	r1, r2
 801a11a:	68f8      	ldr	r0, [r7, #12]
 801a11c:	4798      	blx	r3
 801a11e:	e001      	b.n	801a124 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801a120:	2302      	movs	r3, #2
 801a122:	e000      	b.n	801a126 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 801a124:	2300      	movs	r3, #0
}
 801a126:	4618      	mov	r0, r3
 801a128:	3718      	adds	r7, #24
 801a12a:	46bd      	mov	sp, r7
 801a12c:	bd80      	pop	{r7, pc}

0801a12e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801a12e:	b580      	push	{r7, lr}
 801a130:	b082      	sub	sp, #8
 801a132:	af00      	add	r7, sp, #0
 801a134:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801a136:	2340      	movs	r3, #64	; 0x40
 801a138:	2200      	movs	r2, #0
 801a13a:	2100      	movs	r1, #0
 801a13c:	6878      	ldr	r0, [r7, #4]
 801a13e:	f001 fa5e 	bl	801b5fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	2201      	movs	r2, #1
 801a146:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	2240      	movs	r2, #64	; 0x40
 801a14e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801a152:	2340      	movs	r3, #64	; 0x40
 801a154:	2200      	movs	r2, #0
 801a156:	2180      	movs	r1, #128	; 0x80
 801a158:	6878      	ldr	r0, [r7, #4]
 801a15a:	f001 fa50 	bl	801b5fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	2201      	movs	r2, #1
 801a162:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	2240      	movs	r2, #64	; 0x40
 801a168:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	2201      	movs	r2, #1
 801a16e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	2200      	movs	r2, #0
 801a176:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	2200      	movs	r2, #0
 801a17e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	2200      	movs	r2, #0
 801a184:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801a18e:	2b00      	cmp	r3, #0
 801a190:	d009      	beq.n	801a1a6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a198:	685b      	ldr	r3, [r3, #4]
 801a19a:	687a      	ldr	r2, [r7, #4]
 801a19c:	6852      	ldr	r2, [r2, #4]
 801a19e:	b2d2      	uxtb	r2, r2
 801a1a0:	4611      	mov	r1, r2
 801a1a2:	6878      	ldr	r0, [r7, #4]
 801a1a4:	4798      	blx	r3
  }

  return USBD_OK;
 801a1a6:	2300      	movs	r3, #0
}
 801a1a8:	4618      	mov	r0, r3
 801a1aa:	3708      	adds	r7, #8
 801a1ac:	46bd      	mov	sp, r7
 801a1ae:	bd80      	pop	{r7, pc}

0801a1b0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801a1b0:	b480      	push	{r7}
 801a1b2:	b083      	sub	sp, #12
 801a1b4:	af00      	add	r7, sp, #0
 801a1b6:	6078      	str	r0, [r7, #4]
 801a1b8:	460b      	mov	r3, r1
 801a1ba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	78fa      	ldrb	r2, [r7, #3]
 801a1c0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801a1c2:	2300      	movs	r3, #0
}
 801a1c4:	4618      	mov	r0, r3
 801a1c6:	370c      	adds	r7, #12
 801a1c8:	46bd      	mov	sp, r7
 801a1ca:	bc80      	pop	{r7}
 801a1cc:	4770      	bx	lr

0801a1ce <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801a1ce:	b480      	push	{r7}
 801a1d0:	b083      	sub	sp, #12
 801a1d2:	af00      	add	r7, sp, #0
 801a1d4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	2204      	movs	r2, #4
 801a1e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801a1ea:	2300      	movs	r3, #0
}
 801a1ec:	4618      	mov	r0, r3
 801a1ee:	370c      	adds	r7, #12
 801a1f0:	46bd      	mov	sp, r7
 801a1f2:	bc80      	pop	{r7}
 801a1f4:	4770      	bx	lr

0801a1f6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801a1f6:	b480      	push	{r7}
 801a1f8:	b083      	sub	sp, #12
 801a1fa:	af00      	add	r7, sp, #0
 801a1fc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a204:	2b04      	cmp	r3, #4
 801a206:	d105      	bne.n	801a214 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801a214:	2300      	movs	r3, #0
}
 801a216:	4618      	mov	r0, r3
 801a218:	370c      	adds	r7, #12
 801a21a:	46bd      	mov	sp, r7
 801a21c:	bc80      	pop	{r7}
 801a21e:	4770      	bx	lr

0801a220 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801a220:	b580      	push	{r7, lr}
 801a222:	b082      	sub	sp, #8
 801a224:	af00      	add	r7, sp, #0
 801a226:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a22e:	2b03      	cmp	r3, #3
 801a230:	d10b      	bne.n	801a24a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a238:	69db      	ldr	r3, [r3, #28]
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	d005      	beq.n	801a24a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a244:	69db      	ldr	r3, [r3, #28]
 801a246:	6878      	ldr	r0, [r7, #4]
 801a248:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a24a:	2300      	movs	r3, #0
}
 801a24c:	4618      	mov	r0, r3
 801a24e:	3708      	adds	r7, #8
 801a250:	46bd      	mov	sp, r7
 801a252:	bd80      	pop	{r7, pc}

0801a254 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801a254:	b580      	push	{r7, lr}
 801a256:	b084      	sub	sp, #16
 801a258:	af00      	add	r7, sp, #0
 801a25a:	6078      	str	r0, [r7, #4]
 801a25c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a25e:	2300      	movs	r3, #0
 801a260:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a262:	683b      	ldr	r3, [r7, #0]
 801a264:	781b      	ldrb	r3, [r3, #0]
 801a266:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a26a:	2b40      	cmp	r3, #64	; 0x40
 801a26c:	d005      	beq.n	801a27a <USBD_StdDevReq+0x26>
 801a26e:	2b40      	cmp	r3, #64	; 0x40
 801a270:	d84f      	bhi.n	801a312 <USBD_StdDevReq+0xbe>
 801a272:	2b00      	cmp	r3, #0
 801a274:	d009      	beq.n	801a28a <USBD_StdDevReq+0x36>
 801a276:	2b20      	cmp	r3, #32
 801a278:	d14b      	bne.n	801a312 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a280:	689b      	ldr	r3, [r3, #8]
 801a282:	6839      	ldr	r1, [r7, #0]
 801a284:	6878      	ldr	r0, [r7, #4]
 801a286:	4798      	blx	r3
      break;
 801a288:	e048      	b.n	801a31c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a28a:	683b      	ldr	r3, [r7, #0]
 801a28c:	785b      	ldrb	r3, [r3, #1]
 801a28e:	2b09      	cmp	r3, #9
 801a290:	d839      	bhi.n	801a306 <USBD_StdDevReq+0xb2>
 801a292:	a201      	add	r2, pc, #4	; (adr r2, 801a298 <USBD_StdDevReq+0x44>)
 801a294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a298:	0801a2e9 	.word	0x0801a2e9
 801a29c:	0801a2fd 	.word	0x0801a2fd
 801a2a0:	0801a307 	.word	0x0801a307
 801a2a4:	0801a2f3 	.word	0x0801a2f3
 801a2a8:	0801a307 	.word	0x0801a307
 801a2ac:	0801a2cb 	.word	0x0801a2cb
 801a2b0:	0801a2c1 	.word	0x0801a2c1
 801a2b4:	0801a307 	.word	0x0801a307
 801a2b8:	0801a2df 	.word	0x0801a2df
 801a2bc:	0801a2d5 	.word	0x0801a2d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801a2c0:	6839      	ldr	r1, [r7, #0]
 801a2c2:	6878      	ldr	r0, [r7, #4]
 801a2c4:	f000 f9dc 	bl	801a680 <USBD_GetDescriptor>
          break;
 801a2c8:	e022      	b.n	801a310 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801a2ca:	6839      	ldr	r1, [r7, #0]
 801a2cc:	6878      	ldr	r0, [r7, #4]
 801a2ce:	f000 fb3f 	bl	801a950 <USBD_SetAddress>
          break;
 801a2d2:	e01d      	b.n	801a310 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801a2d4:	6839      	ldr	r1, [r7, #0]
 801a2d6:	6878      	ldr	r0, [r7, #4]
 801a2d8:	f000 fb7e 	bl	801a9d8 <USBD_SetConfig>
          break;
 801a2dc:	e018      	b.n	801a310 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801a2de:	6839      	ldr	r1, [r7, #0]
 801a2e0:	6878      	ldr	r0, [r7, #4]
 801a2e2:	f000 fc07 	bl	801aaf4 <USBD_GetConfig>
          break;
 801a2e6:	e013      	b.n	801a310 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801a2e8:	6839      	ldr	r1, [r7, #0]
 801a2ea:	6878      	ldr	r0, [r7, #4]
 801a2ec:	f000 fc37 	bl	801ab5e <USBD_GetStatus>
          break;
 801a2f0:	e00e      	b.n	801a310 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801a2f2:	6839      	ldr	r1, [r7, #0]
 801a2f4:	6878      	ldr	r0, [r7, #4]
 801a2f6:	f000 fc65 	bl	801abc4 <USBD_SetFeature>
          break;
 801a2fa:	e009      	b.n	801a310 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801a2fc:	6839      	ldr	r1, [r7, #0]
 801a2fe:	6878      	ldr	r0, [r7, #4]
 801a300:	f000 fc74 	bl	801abec <USBD_ClrFeature>
          break;
 801a304:	e004      	b.n	801a310 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 801a306:	6839      	ldr	r1, [r7, #0]
 801a308:	6878      	ldr	r0, [r7, #4]
 801a30a:	f000 fccc 	bl	801aca6 <USBD_CtlError>
          break;
 801a30e:	bf00      	nop
      }
      break;
 801a310:	e004      	b.n	801a31c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 801a312:	6839      	ldr	r1, [r7, #0]
 801a314:	6878      	ldr	r0, [r7, #4]
 801a316:	f000 fcc6 	bl	801aca6 <USBD_CtlError>
      break;
 801a31a:	bf00      	nop
  }

  return ret;
 801a31c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a31e:	4618      	mov	r0, r3
 801a320:	3710      	adds	r7, #16
 801a322:	46bd      	mov	sp, r7
 801a324:	bd80      	pop	{r7, pc}
 801a326:	bf00      	nop

0801a328 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801a328:	b580      	push	{r7, lr}
 801a32a:	b084      	sub	sp, #16
 801a32c:	af00      	add	r7, sp, #0
 801a32e:	6078      	str	r0, [r7, #4]
 801a330:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a332:	2300      	movs	r3, #0
 801a334:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a336:	683b      	ldr	r3, [r7, #0]
 801a338:	781b      	ldrb	r3, [r3, #0]
 801a33a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a33e:	2b40      	cmp	r3, #64	; 0x40
 801a340:	d005      	beq.n	801a34e <USBD_StdItfReq+0x26>
 801a342:	2b40      	cmp	r3, #64	; 0x40
 801a344:	d82e      	bhi.n	801a3a4 <USBD_StdItfReq+0x7c>
 801a346:	2b00      	cmp	r3, #0
 801a348:	d001      	beq.n	801a34e <USBD_StdItfReq+0x26>
 801a34a:	2b20      	cmp	r3, #32
 801a34c:	d12a      	bne.n	801a3a4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a354:	3b01      	subs	r3, #1
 801a356:	2b02      	cmp	r3, #2
 801a358:	d81d      	bhi.n	801a396 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801a35a:	683b      	ldr	r3, [r7, #0]
 801a35c:	889b      	ldrh	r3, [r3, #4]
 801a35e:	b2db      	uxtb	r3, r3
 801a360:	2b01      	cmp	r3, #1
 801a362:	d813      	bhi.n	801a38c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a36a:	689b      	ldr	r3, [r3, #8]
 801a36c:	6839      	ldr	r1, [r7, #0]
 801a36e:	6878      	ldr	r0, [r7, #4]
 801a370:	4798      	blx	r3
 801a372:	4603      	mov	r3, r0
 801a374:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801a376:	683b      	ldr	r3, [r7, #0]
 801a378:	88db      	ldrh	r3, [r3, #6]
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d110      	bne.n	801a3a0 <USBD_StdItfReq+0x78>
 801a37e:	7bfb      	ldrb	r3, [r7, #15]
 801a380:	2b00      	cmp	r3, #0
 801a382:	d10d      	bne.n	801a3a0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 801a384:	6878      	ldr	r0, [r7, #4]
 801a386:	f000 fd56 	bl	801ae36 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801a38a:	e009      	b.n	801a3a0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 801a38c:	6839      	ldr	r1, [r7, #0]
 801a38e:	6878      	ldr	r0, [r7, #4]
 801a390:	f000 fc89 	bl	801aca6 <USBD_CtlError>
          break;
 801a394:	e004      	b.n	801a3a0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 801a396:	6839      	ldr	r1, [r7, #0]
 801a398:	6878      	ldr	r0, [r7, #4]
 801a39a:	f000 fc84 	bl	801aca6 <USBD_CtlError>
          break;
 801a39e:	e000      	b.n	801a3a2 <USBD_StdItfReq+0x7a>
          break;
 801a3a0:	bf00      	nop
      }
      break;
 801a3a2:	e004      	b.n	801a3ae <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 801a3a4:	6839      	ldr	r1, [r7, #0]
 801a3a6:	6878      	ldr	r0, [r7, #4]
 801a3a8:	f000 fc7d 	bl	801aca6 <USBD_CtlError>
      break;
 801a3ac:	bf00      	nop
  }

  return USBD_OK;
 801a3ae:	2300      	movs	r3, #0
}
 801a3b0:	4618      	mov	r0, r3
 801a3b2:	3710      	adds	r7, #16
 801a3b4:	46bd      	mov	sp, r7
 801a3b6:	bd80      	pop	{r7, pc}

0801a3b8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801a3b8:	b580      	push	{r7, lr}
 801a3ba:	b084      	sub	sp, #16
 801a3bc:	af00      	add	r7, sp, #0
 801a3be:	6078      	str	r0, [r7, #4]
 801a3c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801a3c2:	2300      	movs	r3, #0
 801a3c4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 801a3c6:	683b      	ldr	r3, [r7, #0]
 801a3c8:	889b      	ldrh	r3, [r3, #4]
 801a3ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a3cc:	683b      	ldr	r3, [r7, #0]
 801a3ce:	781b      	ldrb	r3, [r3, #0]
 801a3d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a3d4:	2b40      	cmp	r3, #64	; 0x40
 801a3d6:	d007      	beq.n	801a3e8 <USBD_StdEPReq+0x30>
 801a3d8:	2b40      	cmp	r3, #64	; 0x40
 801a3da:	f200 8146 	bhi.w	801a66a <USBD_StdEPReq+0x2b2>
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d00a      	beq.n	801a3f8 <USBD_StdEPReq+0x40>
 801a3e2:	2b20      	cmp	r3, #32
 801a3e4:	f040 8141 	bne.w	801a66a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a3ee:	689b      	ldr	r3, [r3, #8]
 801a3f0:	6839      	ldr	r1, [r7, #0]
 801a3f2:	6878      	ldr	r0, [r7, #4]
 801a3f4:	4798      	blx	r3
      break;
 801a3f6:	e13d      	b.n	801a674 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801a3f8:	683b      	ldr	r3, [r7, #0]
 801a3fa:	781b      	ldrb	r3, [r3, #0]
 801a3fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a400:	2b20      	cmp	r3, #32
 801a402:	d10a      	bne.n	801a41a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a40a:	689b      	ldr	r3, [r3, #8]
 801a40c:	6839      	ldr	r1, [r7, #0]
 801a40e:	6878      	ldr	r0, [r7, #4]
 801a410:	4798      	blx	r3
 801a412:	4603      	mov	r3, r0
 801a414:	73fb      	strb	r3, [r7, #15]

        return ret;
 801a416:	7bfb      	ldrb	r3, [r7, #15]
 801a418:	e12d      	b.n	801a676 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 801a41a:	683b      	ldr	r3, [r7, #0]
 801a41c:	785b      	ldrb	r3, [r3, #1]
 801a41e:	2b03      	cmp	r3, #3
 801a420:	d007      	beq.n	801a432 <USBD_StdEPReq+0x7a>
 801a422:	2b03      	cmp	r3, #3
 801a424:	f300 811b 	bgt.w	801a65e <USBD_StdEPReq+0x2a6>
 801a428:	2b00      	cmp	r3, #0
 801a42a:	d072      	beq.n	801a512 <USBD_StdEPReq+0x15a>
 801a42c:	2b01      	cmp	r3, #1
 801a42e:	d03a      	beq.n	801a4a6 <USBD_StdEPReq+0xee>
 801a430:	e115      	b.n	801a65e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a438:	2b02      	cmp	r3, #2
 801a43a:	d002      	beq.n	801a442 <USBD_StdEPReq+0x8a>
 801a43c:	2b03      	cmp	r3, #3
 801a43e:	d015      	beq.n	801a46c <USBD_StdEPReq+0xb4>
 801a440:	e02b      	b.n	801a49a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a442:	7bbb      	ldrb	r3, [r7, #14]
 801a444:	2b00      	cmp	r3, #0
 801a446:	d00c      	beq.n	801a462 <USBD_StdEPReq+0xaa>
 801a448:	7bbb      	ldrb	r3, [r7, #14]
 801a44a:	2b80      	cmp	r3, #128	; 0x80
 801a44c:	d009      	beq.n	801a462 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801a44e:	7bbb      	ldrb	r3, [r7, #14]
 801a450:	4619      	mov	r1, r3
 801a452:	6878      	ldr	r0, [r7, #4]
 801a454:	f001 f918 	bl	801b688 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801a458:	2180      	movs	r1, #128	; 0x80
 801a45a:	6878      	ldr	r0, [r7, #4]
 801a45c:	f001 f914 	bl	801b688 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a460:	e020      	b.n	801a4a4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 801a462:	6839      	ldr	r1, [r7, #0]
 801a464:	6878      	ldr	r0, [r7, #4]
 801a466:	f000 fc1e 	bl	801aca6 <USBD_CtlError>
              break;
 801a46a:	e01b      	b.n	801a4a4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a46c:	683b      	ldr	r3, [r7, #0]
 801a46e:	885b      	ldrh	r3, [r3, #2]
 801a470:	2b00      	cmp	r3, #0
 801a472:	d10e      	bne.n	801a492 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 801a474:	7bbb      	ldrb	r3, [r7, #14]
 801a476:	2b00      	cmp	r3, #0
 801a478:	d00b      	beq.n	801a492 <USBD_StdEPReq+0xda>
 801a47a:	7bbb      	ldrb	r3, [r7, #14]
 801a47c:	2b80      	cmp	r3, #128	; 0x80
 801a47e:	d008      	beq.n	801a492 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801a480:	683b      	ldr	r3, [r7, #0]
 801a482:	88db      	ldrh	r3, [r3, #6]
 801a484:	2b00      	cmp	r3, #0
 801a486:	d104      	bne.n	801a492 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801a488:	7bbb      	ldrb	r3, [r7, #14]
 801a48a:	4619      	mov	r1, r3
 801a48c:	6878      	ldr	r0, [r7, #4]
 801a48e:	f001 f8fb 	bl	801b688 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801a492:	6878      	ldr	r0, [r7, #4]
 801a494:	f000 fccf 	bl	801ae36 <USBD_CtlSendStatus>

              break;
 801a498:	e004      	b.n	801a4a4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 801a49a:	6839      	ldr	r1, [r7, #0]
 801a49c:	6878      	ldr	r0, [r7, #4]
 801a49e:	f000 fc02 	bl	801aca6 <USBD_CtlError>
              break;
 801a4a2:	bf00      	nop
          }
          break;
 801a4a4:	e0e0      	b.n	801a668 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a4ac:	2b02      	cmp	r3, #2
 801a4ae:	d002      	beq.n	801a4b6 <USBD_StdEPReq+0xfe>
 801a4b0:	2b03      	cmp	r3, #3
 801a4b2:	d015      	beq.n	801a4e0 <USBD_StdEPReq+0x128>
 801a4b4:	e026      	b.n	801a504 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a4b6:	7bbb      	ldrb	r3, [r7, #14]
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d00c      	beq.n	801a4d6 <USBD_StdEPReq+0x11e>
 801a4bc:	7bbb      	ldrb	r3, [r7, #14]
 801a4be:	2b80      	cmp	r3, #128	; 0x80
 801a4c0:	d009      	beq.n	801a4d6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801a4c2:	7bbb      	ldrb	r3, [r7, #14]
 801a4c4:	4619      	mov	r1, r3
 801a4c6:	6878      	ldr	r0, [r7, #4]
 801a4c8:	f001 f8de 	bl	801b688 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801a4cc:	2180      	movs	r1, #128	; 0x80
 801a4ce:	6878      	ldr	r0, [r7, #4]
 801a4d0:	f001 f8da 	bl	801b688 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a4d4:	e01c      	b.n	801a510 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 801a4d6:	6839      	ldr	r1, [r7, #0]
 801a4d8:	6878      	ldr	r0, [r7, #4]
 801a4da:	f000 fbe4 	bl	801aca6 <USBD_CtlError>
              break;
 801a4de:	e017      	b.n	801a510 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a4e0:	683b      	ldr	r3, [r7, #0]
 801a4e2:	885b      	ldrh	r3, [r3, #2]
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	d112      	bne.n	801a50e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801a4e8:	7bbb      	ldrb	r3, [r7, #14]
 801a4ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	d004      	beq.n	801a4fc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801a4f2:	7bbb      	ldrb	r3, [r7, #14]
 801a4f4:	4619      	mov	r1, r3
 801a4f6:	6878      	ldr	r0, [r7, #4]
 801a4f8:	f001 f8e5 	bl	801b6c6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801a4fc:	6878      	ldr	r0, [r7, #4]
 801a4fe:	f000 fc9a 	bl	801ae36 <USBD_CtlSendStatus>
              }
              break;
 801a502:	e004      	b.n	801a50e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 801a504:	6839      	ldr	r1, [r7, #0]
 801a506:	6878      	ldr	r0, [r7, #4]
 801a508:	f000 fbcd 	bl	801aca6 <USBD_CtlError>
              break;
 801a50c:	e000      	b.n	801a510 <USBD_StdEPReq+0x158>
              break;
 801a50e:	bf00      	nop
          }
          break;
 801a510:	e0aa      	b.n	801a668 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a518:	2b02      	cmp	r3, #2
 801a51a:	d002      	beq.n	801a522 <USBD_StdEPReq+0x16a>
 801a51c:	2b03      	cmp	r3, #3
 801a51e:	d032      	beq.n	801a586 <USBD_StdEPReq+0x1ce>
 801a520:	e097      	b.n	801a652 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a522:	7bbb      	ldrb	r3, [r7, #14]
 801a524:	2b00      	cmp	r3, #0
 801a526:	d007      	beq.n	801a538 <USBD_StdEPReq+0x180>
 801a528:	7bbb      	ldrb	r3, [r7, #14]
 801a52a:	2b80      	cmp	r3, #128	; 0x80
 801a52c:	d004      	beq.n	801a538 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 801a52e:	6839      	ldr	r1, [r7, #0]
 801a530:	6878      	ldr	r0, [r7, #4]
 801a532:	f000 fbb8 	bl	801aca6 <USBD_CtlError>
                break;
 801a536:	e091      	b.n	801a65c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a538:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	da0b      	bge.n	801a558 <USBD_StdEPReq+0x1a0>
 801a540:	7bbb      	ldrb	r3, [r7, #14]
 801a542:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a546:	4613      	mov	r3, r2
 801a548:	009b      	lsls	r3, r3, #2
 801a54a:	4413      	add	r3, r2
 801a54c:	009b      	lsls	r3, r3, #2
 801a54e:	3310      	adds	r3, #16
 801a550:	687a      	ldr	r2, [r7, #4]
 801a552:	4413      	add	r3, r2
 801a554:	3304      	adds	r3, #4
 801a556:	e00b      	b.n	801a570 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801a558:	7bbb      	ldrb	r3, [r7, #14]
 801a55a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a55e:	4613      	mov	r3, r2
 801a560:	009b      	lsls	r3, r3, #2
 801a562:	4413      	add	r3, r2
 801a564:	009b      	lsls	r3, r3, #2
 801a566:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801a56a:	687a      	ldr	r2, [r7, #4]
 801a56c:	4413      	add	r3, r2
 801a56e:	3304      	adds	r3, #4
 801a570:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801a572:	68bb      	ldr	r3, [r7, #8]
 801a574:	2200      	movs	r2, #0
 801a576:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801a578:	68bb      	ldr	r3, [r7, #8]
 801a57a:	2202      	movs	r2, #2
 801a57c:	4619      	mov	r1, r3
 801a57e:	6878      	ldr	r0, [r7, #4]
 801a580:	f000 fbfb 	bl	801ad7a <USBD_CtlSendData>
              break;
 801a584:	e06a      	b.n	801a65c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801a586:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	da11      	bge.n	801a5b2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801a58e:	7bbb      	ldrb	r3, [r7, #14]
 801a590:	f003 020f 	and.w	r2, r3, #15
 801a594:	6879      	ldr	r1, [r7, #4]
 801a596:	4613      	mov	r3, r2
 801a598:	009b      	lsls	r3, r3, #2
 801a59a:	4413      	add	r3, r2
 801a59c:	009b      	lsls	r3, r3, #2
 801a59e:	440b      	add	r3, r1
 801a5a0:	3318      	adds	r3, #24
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d117      	bne.n	801a5d8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 801a5a8:	6839      	ldr	r1, [r7, #0]
 801a5aa:	6878      	ldr	r0, [r7, #4]
 801a5ac:	f000 fb7b 	bl	801aca6 <USBD_CtlError>
                  break;
 801a5b0:	e054      	b.n	801a65c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801a5b2:	7bbb      	ldrb	r3, [r7, #14]
 801a5b4:	f003 020f 	and.w	r2, r3, #15
 801a5b8:	6879      	ldr	r1, [r7, #4]
 801a5ba:	4613      	mov	r3, r2
 801a5bc:	009b      	lsls	r3, r3, #2
 801a5be:	4413      	add	r3, r2
 801a5c0:	009b      	lsls	r3, r3, #2
 801a5c2:	440b      	add	r3, r1
 801a5c4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d104      	bne.n	801a5d8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 801a5ce:	6839      	ldr	r1, [r7, #0]
 801a5d0:	6878      	ldr	r0, [r7, #4]
 801a5d2:	f000 fb68 	bl	801aca6 <USBD_CtlError>
                  break;
 801a5d6:	e041      	b.n	801a65c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a5d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	da0b      	bge.n	801a5f8 <USBD_StdEPReq+0x240>
 801a5e0:	7bbb      	ldrb	r3, [r7, #14]
 801a5e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a5e6:	4613      	mov	r3, r2
 801a5e8:	009b      	lsls	r3, r3, #2
 801a5ea:	4413      	add	r3, r2
 801a5ec:	009b      	lsls	r3, r3, #2
 801a5ee:	3310      	adds	r3, #16
 801a5f0:	687a      	ldr	r2, [r7, #4]
 801a5f2:	4413      	add	r3, r2
 801a5f4:	3304      	adds	r3, #4
 801a5f6:	e00b      	b.n	801a610 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801a5f8:	7bbb      	ldrb	r3, [r7, #14]
 801a5fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a5fe:	4613      	mov	r3, r2
 801a600:	009b      	lsls	r3, r3, #2
 801a602:	4413      	add	r3, r2
 801a604:	009b      	lsls	r3, r3, #2
 801a606:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801a60a:	687a      	ldr	r2, [r7, #4]
 801a60c:	4413      	add	r3, r2
 801a60e:	3304      	adds	r3, #4
 801a610:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801a612:	7bbb      	ldrb	r3, [r7, #14]
 801a614:	2b00      	cmp	r3, #0
 801a616:	d002      	beq.n	801a61e <USBD_StdEPReq+0x266>
 801a618:	7bbb      	ldrb	r3, [r7, #14]
 801a61a:	2b80      	cmp	r3, #128	; 0x80
 801a61c:	d103      	bne.n	801a626 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 801a61e:	68bb      	ldr	r3, [r7, #8]
 801a620:	2200      	movs	r2, #0
 801a622:	601a      	str	r2, [r3, #0]
 801a624:	e00e      	b.n	801a644 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801a626:	7bbb      	ldrb	r3, [r7, #14]
 801a628:	4619      	mov	r1, r3
 801a62a:	6878      	ldr	r0, [r7, #4]
 801a62c:	f001 f86a 	bl	801b704 <USBD_LL_IsStallEP>
 801a630:	4603      	mov	r3, r0
 801a632:	2b00      	cmp	r3, #0
 801a634:	d003      	beq.n	801a63e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 801a636:	68bb      	ldr	r3, [r7, #8]
 801a638:	2201      	movs	r2, #1
 801a63a:	601a      	str	r2, [r3, #0]
 801a63c:	e002      	b.n	801a644 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 801a63e:	68bb      	ldr	r3, [r7, #8]
 801a640:	2200      	movs	r2, #0
 801a642:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801a644:	68bb      	ldr	r3, [r7, #8]
 801a646:	2202      	movs	r2, #2
 801a648:	4619      	mov	r1, r3
 801a64a:	6878      	ldr	r0, [r7, #4]
 801a64c:	f000 fb95 	bl	801ad7a <USBD_CtlSendData>
              break;
 801a650:	e004      	b.n	801a65c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 801a652:	6839      	ldr	r1, [r7, #0]
 801a654:	6878      	ldr	r0, [r7, #4]
 801a656:	f000 fb26 	bl	801aca6 <USBD_CtlError>
              break;
 801a65a:	bf00      	nop
          }
          break;
 801a65c:	e004      	b.n	801a668 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 801a65e:	6839      	ldr	r1, [r7, #0]
 801a660:	6878      	ldr	r0, [r7, #4]
 801a662:	f000 fb20 	bl	801aca6 <USBD_CtlError>
          break;
 801a666:	bf00      	nop
      }
      break;
 801a668:	e004      	b.n	801a674 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 801a66a:	6839      	ldr	r1, [r7, #0]
 801a66c:	6878      	ldr	r0, [r7, #4]
 801a66e:	f000 fb1a 	bl	801aca6 <USBD_CtlError>
      break;
 801a672:	bf00      	nop
  }

  return ret;
 801a674:	7bfb      	ldrb	r3, [r7, #15]
}
 801a676:	4618      	mov	r0, r3
 801a678:	3710      	adds	r7, #16
 801a67a:	46bd      	mov	sp, r7
 801a67c:	bd80      	pop	{r7, pc}
	...

0801a680 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801a680:	b580      	push	{r7, lr}
 801a682:	b084      	sub	sp, #16
 801a684:	af00      	add	r7, sp, #0
 801a686:	6078      	str	r0, [r7, #4]
 801a688:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801a68a:	2300      	movs	r3, #0
 801a68c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801a68e:	2300      	movs	r3, #0
 801a690:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801a692:	2300      	movs	r3, #0
 801a694:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801a696:	683b      	ldr	r3, [r7, #0]
 801a698:	885b      	ldrh	r3, [r3, #2]
 801a69a:	0a1b      	lsrs	r3, r3, #8
 801a69c:	b29b      	uxth	r3, r3
 801a69e:	3b01      	subs	r3, #1
 801a6a0:	2b06      	cmp	r3, #6
 801a6a2:	f200 8128 	bhi.w	801a8f6 <USBD_GetDescriptor+0x276>
 801a6a6:	a201      	add	r2, pc, #4	; (adr r2, 801a6ac <USBD_GetDescriptor+0x2c>)
 801a6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a6ac:	0801a6c9 	.word	0x0801a6c9
 801a6b0:	0801a6e1 	.word	0x0801a6e1
 801a6b4:	0801a721 	.word	0x0801a721
 801a6b8:	0801a8f7 	.word	0x0801a8f7
 801a6bc:	0801a8f7 	.word	0x0801a8f7
 801a6c0:	0801a897 	.word	0x0801a897
 801a6c4:	0801a8c3 	.word	0x0801a8c3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	687a      	ldr	r2, [r7, #4]
 801a6d2:	7c12      	ldrb	r2, [r2, #16]
 801a6d4:	f107 0108 	add.w	r1, r7, #8
 801a6d8:	4610      	mov	r0, r2
 801a6da:	4798      	blx	r3
 801a6dc:	60f8      	str	r0, [r7, #12]
      break;
 801a6de:	e112      	b.n	801a906 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	7c1b      	ldrb	r3, [r3, #16]
 801a6e4:	2b00      	cmp	r3, #0
 801a6e6:	d10d      	bne.n	801a704 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a6ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a6f0:	f107 0208 	add.w	r2, r7, #8
 801a6f4:	4610      	mov	r0, r2
 801a6f6:	4798      	blx	r3
 801a6f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801a6fa:	68fb      	ldr	r3, [r7, #12]
 801a6fc:	3301      	adds	r3, #1
 801a6fe:	2202      	movs	r2, #2
 801a700:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801a702:	e100      	b.n	801a906 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a70c:	f107 0208 	add.w	r2, r7, #8
 801a710:	4610      	mov	r0, r2
 801a712:	4798      	blx	r3
 801a714:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801a716:	68fb      	ldr	r3, [r7, #12]
 801a718:	3301      	adds	r3, #1
 801a71a:	2202      	movs	r2, #2
 801a71c:	701a      	strb	r2, [r3, #0]
      break;
 801a71e:	e0f2      	b.n	801a906 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801a720:	683b      	ldr	r3, [r7, #0]
 801a722:	885b      	ldrh	r3, [r3, #2]
 801a724:	b2db      	uxtb	r3, r3
 801a726:	2b05      	cmp	r3, #5
 801a728:	f200 80ac 	bhi.w	801a884 <USBD_GetDescriptor+0x204>
 801a72c:	a201      	add	r2, pc, #4	; (adr r2, 801a734 <USBD_GetDescriptor+0xb4>)
 801a72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a732:	bf00      	nop
 801a734:	0801a74d 	.word	0x0801a74d
 801a738:	0801a781 	.word	0x0801a781
 801a73c:	0801a7b5 	.word	0x0801a7b5
 801a740:	0801a7e9 	.word	0x0801a7e9
 801a744:	0801a81d 	.word	0x0801a81d
 801a748:	0801a851 	.word	0x0801a851
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801a752:	685b      	ldr	r3, [r3, #4]
 801a754:	2b00      	cmp	r3, #0
 801a756:	d00b      	beq.n	801a770 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801a75e:	685b      	ldr	r3, [r3, #4]
 801a760:	687a      	ldr	r2, [r7, #4]
 801a762:	7c12      	ldrb	r2, [r2, #16]
 801a764:	f107 0108 	add.w	r1, r7, #8
 801a768:	4610      	mov	r0, r2
 801a76a:	4798      	blx	r3
 801a76c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a76e:	e091      	b.n	801a894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801a770:	6839      	ldr	r1, [r7, #0]
 801a772:	6878      	ldr	r0, [r7, #4]
 801a774:	f000 fa97 	bl	801aca6 <USBD_CtlError>
            err++;
 801a778:	7afb      	ldrb	r3, [r7, #11]
 801a77a:	3301      	adds	r3, #1
 801a77c:	72fb      	strb	r3, [r7, #11]
          break;
 801a77e:	e089      	b.n	801a894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801a786:	689b      	ldr	r3, [r3, #8]
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d00b      	beq.n	801a7a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801a792:	689b      	ldr	r3, [r3, #8]
 801a794:	687a      	ldr	r2, [r7, #4]
 801a796:	7c12      	ldrb	r2, [r2, #16]
 801a798:	f107 0108 	add.w	r1, r7, #8
 801a79c:	4610      	mov	r0, r2
 801a79e:	4798      	blx	r3
 801a7a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a7a2:	e077      	b.n	801a894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801a7a4:	6839      	ldr	r1, [r7, #0]
 801a7a6:	6878      	ldr	r0, [r7, #4]
 801a7a8:	f000 fa7d 	bl	801aca6 <USBD_CtlError>
            err++;
 801a7ac:	7afb      	ldrb	r3, [r7, #11]
 801a7ae:	3301      	adds	r3, #1
 801a7b0:	72fb      	strb	r3, [r7, #11]
          break;
 801a7b2:	e06f      	b.n	801a894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801a7ba:	68db      	ldr	r3, [r3, #12]
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	d00b      	beq.n	801a7d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801a7c6:	68db      	ldr	r3, [r3, #12]
 801a7c8:	687a      	ldr	r2, [r7, #4]
 801a7ca:	7c12      	ldrb	r2, [r2, #16]
 801a7cc:	f107 0108 	add.w	r1, r7, #8
 801a7d0:	4610      	mov	r0, r2
 801a7d2:	4798      	blx	r3
 801a7d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a7d6:	e05d      	b.n	801a894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801a7d8:	6839      	ldr	r1, [r7, #0]
 801a7da:	6878      	ldr	r0, [r7, #4]
 801a7dc:	f000 fa63 	bl	801aca6 <USBD_CtlError>
            err++;
 801a7e0:	7afb      	ldrb	r3, [r7, #11]
 801a7e2:	3301      	adds	r3, #1
 801a7e4:	72fb      	strb	r3, [r7, #11]
          break;
 801a7e6:	e055      	b.n	801a894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801a7ee:	691b      	ldr	r3, [r3, #16]
 801a7f0:	2b00      	cmp	r3, #0
 801a7f2:	d00b      	beq.n	801a80c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801a7fa:	691b      	ldr	r3, [r3, #16]
 801a7fc:	687a      	ldr	r2, [r7, #4]
 801a7fe:	7c12      	ldrb	r2, [r2, #16]
 801a800:	f107 0108 	add.w	r1, r7, #8
 801a804:	4610      	mov	r0, r2
 801a806:	4798      	blx	r3
 801a808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a80a:	e043      	b.n	801a894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801a80c:	6839      	ldr	r1, [r7, #0]
 801a80e:	6878      	ldr	r0, [r7, #4]
 801a810:	f000 fa49 	bl	801aca6 <USBD_CtlError>
            err++;
 801a814:	7afb      	ldrb	r3, [r7, #11]
 801a816:	3301      	adds	r3, #1
 801a818:	72fb      	strb	r3, [r7, #11]
          break;
 801a81a:	e03b      	b.n	801a894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801a822:	695b      	ldr	r3, [r3, #20]
 801a824:	2b00      	cmp	r3, #0
 801a826:	d00b      	beq.n	801a840 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801a82e:	695b      	ldr	r3, [r3, #20]
 801a830:	687a      	ldr	r2, [r7, #4]
 801a832:	7c12      	ldrb	r2, [r2, #16]
 801a834:	f107 0108 	add.w	r1, r7, #8
 801a838:	4610      	mov	r0, r2
 801a83a:	4798      	blx	r3
 801a83c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a83e:	e029      	b.n	801a894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801a840:	6839      	ldr	r1, [r7, #0]
 801a842:	6878      	ldr	r0, [r7, #4]
 801a844:	f000 fa2f 	bl	801aca6 <USBD_CtlError>
            err++;
 801a848:	7afb      	ldrb	r3, [r7, #11]
 801a84a:	3301      	adds	r3, #1
 801a84c:	72fb      	strb	r3, [r7, #11]
          break;
 801a84e:	e021      	b.n	801a894 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801a856:	699b      	ldr	r3, [r3, #24]
 801a858:	2b00      	cmp	r3, #0
 801a85a:	d00b      	beq.n	801a874 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801a862:	699b      	ldr	r3, [r3, #24]
 801a864:	687a      	ldr	r2, [r7, #4]
 801a866:	7c12      	ldrb	r2, [r2, #16]
 801a868:	f107 0108 	add.w	r1, r7, #8
 801a86c:	4610      	mov	r0, r2
 801a86e:	4798      	blx	r3
 801a870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a872:	e00f      	b.n	801a894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801a874:	6839      	ldr	r1, [r7, #0]
 801a876:	6878      	ldr	r0, [r7, #4]
 801a878:	f000 fa15 	bl	801aca6 <USBD_CtlError>
            err++;
 801a87c:	7afb      	ldrb	r3, [r7, #11]
 801a87e:	3301      	adds	r3, #1
 801a880:	72fb      	strb	r3, [r7, #11]
          break;
 801a882:	e007      	b.n	801a894 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801a884:	6839      	ldr	r1, [r7, #0]
 801a886:	6878      	ldr	r0, [r7, #4]
 801a888:	f000 fa0d 	bl	801aca6 <USBD_CtlError>
          err++;
 801a88c:	7afb      	ldrb	r3, [r7, #11]
 801a88e:	3301      	adds	r3, #1
 801a890:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 801a892:	e038      	b.n	801a906 <USBD_GetDescriptor+0x286>
 801a894:	e037      	b.n	801a906 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	7c1b      	ldrb	r3, [r3, #16]
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d109      	bne.n	801a8b2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a8a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a8a6:	f107 0208 	add.w	r2, r7, #8
 801a8aa:	4610      	mov	r0, r2
 801a8ac:	4798      	blx	r3
 801a8ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801a8b0:	e029      	b.n	801a906 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801a8b2:	6839      	ldr	r1, [r7, #0]
 801a8b4:	6878      	ldr	r0, [r7, #4]
 801a8b6:	f000 f9f6 	bl	801aca6 <USBD_CtlError>
        err++;
 801a8ba:	7afb      	ldrb	r3, [r7, #11]
 801a8bc:	3301      	adds	r3, #1
 801a8be:	72fb      	strb	r3, [r7, #11]
      break;
 801a8c0:	e021      	b.n	801a906 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	7c1b      	ldrb	r3, [r3, #16]
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	d10d      	bne.n	801a8e6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801a8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a8d2:	f107 0208 	add.w	r2, r7, #8
 801a8d6:	4610      	mov	r0, r2
 801a8d8:	4798      	blx	r3
 801a8da:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801a8dc:	68fb      	ldr	r3, [r7, #12]
 801a8de:	3301      	adds	r3, #1
 801a8e0:	2207      	movs	r2, #7
 801a8e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801a8e4:	e00f      	b.n	801a906 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801a8e6:	6839      	ldr	r1, [r7, #0]
 801a8e8:	6878      	ldr	r0, [r7, #4]
 801a8ea:	f000 f9dc 	bl	801aca6 <USBD_CtlError>
        err++;
 801a8ee:	7afb      	ldrb	r3, [r7, #11]
 801a8f0:	3301      	adds	r3, #1
 801a8f2:	72fb      	strb	r3, [r7, #11]
      break;
 801a8f4:	e007      	b.n	801a906 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801a8f6:	6839      	ldr	r1, [r7, #0]
 801a8f8:	6878      	ldr	r0, [r7, #4]
 801a8fa:	f000 f9d4 	bl	801aca6 <USBD_CtlError>
      err++;
 801a8fe:	7afb      	ldrb	r3, [r7, #11]
 801a900:	3301      	adds	r3, #1
 801a902:	72fb      	strb	r3, [r7, #11]
      break;
 801a904:	bf00      	nop
  }

  if (err != 0U)
 801a906:	7afb      	ldrb	r3, [r7, #11]
 801a908:	2b00      	cmp	r3, #0
 801a90a:	d11c      	bne.n	801a946 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801a90c:	893b      	ldrh	r3, [r7, #8]
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d011      	beq.n	801a936 <USBD_GetDescriptor+0x2b6>
 801a912:	683b      	ldr	r3, [r7, #0]
 801a914:	88db      	ldrh	r3, [r3, #6]
 801a916:	2b00      	cmp	r3, #0
 801a918:	d00d      	beq.n	801a936 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 801a91a:	683b      	ldr	r3, [r7, #0]
 801a91c:	88da      	ldrh	r2, [r3, #6]
 801a91e:	893b      	ldrh	r3, [r7, #8]
 801a920:	4293      	cmp	r3, r2
 801a922:	bf28      	it	cs
 801a924:	4613      	movcs	r3, r2
 801a926:	b29b      	uxth	r3, r3
 801a928:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801a92a:	893b      	ldrh	r3, [r7, #8]
 801a92c:	461a      	mov	r2, r3
 801a92e:	68f9      	ldr	r1, [r7, #12]
 801a930:	6878      	ldr	r0, [r7, #4]
 801a932:	f000 fa22 	bl	801ad7a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801a936:	683b      	ldr	r3, [r7, #0]
 801a938:	88db      	ldrh	r3, [r3, #6]
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d104      	bne.n	801a948 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 801a93e:	6878      	ldr	r0, [r7, #4]
 801a940:	f000 fa79 	bl	801ae36 <USBD_CtlSendStatus>
 801a944:	e000      	b.n	801a948 <USBD_GetDescriptor+0x2c8>
    return;
 801a946:	bf00      	nop
    }
  }
}
 801a948:	3710      	adds	r7, #16
 801a94a:	46bd      	mov	sp, r7
 801a94c:	bd80      	pop	{r7, pc}
 801a94e:	bf00      	nop

0801a950 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801a950:	b580      	push	{r7, lr}
 801a952:	b084      	sub	sp, #16
 801a954:	af00      	add	r7, sp, #0
 801a956:	6078      	str	r0, [r7, #4]
 801a958:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801a95a:	683b      	ldr	r3, [r7, #0]
 801a95c:	889b      	ldrh	r3, [r3, #4]
 801a95e:	2b00      	cmp	r3, #0
 801a960:	d130      	bne.n	801a9c4 <USBD_SetAddress+0x74>
 801a962:	683b      	ldr	r3, [r7, #0]
 801a964:	88db      	ldrh	r3, [r3, #6]
 801a966:	2b00      	cmp	r3, #0
 801a968:	d12c      	bne.n	801a9c4 <USBD_SetAddress+0x74>
 801a96a:	683b      	ldr	r3, [r7, #0]
 801a96c:	885b      	ldrh	r3, [r3, #2]
 801a96e:	2b7f      	cmp	r3, #127	; 0x7f
 801a970:	d828      	bhi.n	801a9c4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801a972:	683b      	ldr	r3, [r7, #0]
 801a974:	885b      	ldrh	r3, [r3, #2]
 801a976:	b2db      	uxtb	r3, r3
 801a978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a97c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801a984:	2b03      	cmp	r3, #3
 801a986:	d104      	bne.n	801a992 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 801a988:	6839      	ldr	r1, [r7, #0]
 801a98a:	6878      	ldr	r0, [r7, #4]
 801a98c:	f000 f98b 	bl	801aca6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a990:	e01d      	b.n	801a9ce <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	7bfa      	ldrb	r2, [r7, #15]
 801a996:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801a99a:	7bfb      	ldrb	r3, [r7, #15]
 801a99c:	4619      	mov	r1, r3
 801a99e:	6878      	ldr	r0, [r7, #4]
 801a9a0:	f000 fedc 	bl	801b75c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801a9a4:	6878      	ldr	r0, [r7, #4]
 801a9a6:	f000 fa46 	bl	801ae36 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801a9aa:	7bfb      	ldrb	r3, [r7, #15]
 801a9ac:	2b00      	cmp	r3, #0
 801a9ae:	d004      	beq.n	801a9ba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	2202      	movs	r2, #2
 801a9b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a9b8:	e009      	b.n	801a9ce <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	2201      	movs	r2, #1
 801a9be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a9c2:	e004      	b.n	801a9ce <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801a9c4:	6839      	ldr	r1, [r7, #0]
 801a9c6:	6878      	ldr	r0, [r7, #4]
 801a9c8:	f000 f96d 	bl	801aca6 <USBD_CtlError>
  }
}
 801a9cc:	bf00      	nop
 801a9ce:	bf00      	nop
 801a9d0:	3710      	adds	r7, #16
 801a9d2:	46bd      	mov	sp, r7
 801a9d4:	bd80      	pop	{r7, pc}
	...

0801a9d8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801a9d8:	b580      	push	{r7, lr}
 801a9da:	b082      	sub	sp, #8
 801a9dc:	af00      	add	r7, sp, #0
 801a9de:	6078      	str	r0, [r7, #4]
 801a9e0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801a9e2:	683b      	ldr	r3, [r7, #0]
 801a9e4:	885b      	ldrh	r3, [r3, #2]
 801a9e6:	b2da      	uxtb	r2, r3
 801a9e8:	4b41      	ldr	r3, [pc, #260]	; (801aaf0 <USBD_SetConfig+0x118>)
 801a9ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801a9ec:	4b40      	ldr	r3, [pc, #256]	; (801aaf0 <USBD_SetConfig+0x118>)
 801a9ee:	781b      	ldrb	r3, [r3, #0]
 801a9f0:	2b01      	cmp	r3, #1
 801a9f2:	d904      	bls.n	801a9fe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 801a9f4:	6839      	ldr	r1, [r7, #0]
 801a9f6:	6878      	ldr	r0, [r7, #4]
 801a9f8:	f000 f955 	bl	801aca6 <USBD_CtlError>
 801a9fc:	e075      	b.n	801aaea <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801aa04:	2b02      	cmp	r3, #2
 801aa06:	d002      	beq.n	801aa0e <USBD_SetConfig+0x36>
 801aa08:	2b03      	cmp	r3, #3
 801aa0a:	d023      	beq.n	801aa54 <USBD_SetConfig+0x7c>
 801aa0c:	e062      	b.n	801aad4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801aa0e:	4b38      	ldr	r3, [pc, #224]	; (801aaf0 <USBD_SetConfig+0x118>)
 801aa10:	781b      	ldrb	r3, [r3, #0]
 801aa12:	2b00      	cmp	r3, #0
 801aa14:	d01a      	beq.n	801aa4c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 801aa16:	4b36      	ldr	r3, [pc, #216]	; (801aaf0 <USBD_SetConfig+0x118>)
 801aa18:	781b      	ldrb	r3, [r3, #0]
 801aa1a:	461a      	mov	r2, r3
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	2203      	movs	r2, #3
 801aa24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801aa28:	4b31      	ldr	r3, [pc, #196]	; (801aaf0 <USBD_SetConfig+0x118>)
 801aa2a:	781b      	ldrb	r3, [r3, #0]
 801aa2c:	4619      	mov	r1, r3
 801aa2e:	6878      	ldr	r0, [r7, #4]
 801aa30:	f7ff f9e8 	bl	8019e04 <USBD_SetClassConfig>
 801aa34:	4603      	mov	r3, r0
 801aa36:	2b02      	cmp	r3, #2
 801aa38:	d104      	bne.n	801aa44 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 801aa3a:	6839      	ldr	r1, [r7, #0]
 801aa3c:	6878      	ldr	r0, [r7, #4]
 801aa3e:	f000 f932 	bl	801aca6 <USBD_CtlError>
            return;
 801aa42:	e052      	b.n	801aaea <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 801aa44:	6878      	ldr	r0, [r7, #4]
 801aa46:	f000 f9f6 	bl	801ae36 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801aa4a:	e04e      	b.n	801aaea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801aa4c:	6878      	ldr	r0, [r7, #4]
 801aa4e:	f000 f9f2 	bl	801ae36 <USBD_CtlSendStatus>
        break;
 801aa52:	e04a      	b.n	801aaea <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801aa54:	4b26      	ldr	r3, [pc, #152]	; (801aaf0 <USBD_SetConfig+0x118>)
 801aa56:	781b      	ldrb	r3, [r3, #0]
 801aa58:	2b00      	cmp	r3, #0
 801aa5a:	d112      	bne.n	801aa82 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	2202      	movs	r2, #2
 801aa60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 801aa64:	4b22      	ldr	r3, [pc, #136]	; (801aaf0 <USBD_SetConfig+0x118>)
 801aa66:	781b      	ldrb	r3, [r3, #0]
 801aa68:	461a      	mov	r2, r3
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801aa6e:	4b20      	ldr	r3, [pc, #128]	; (801aaf0 <USBD_SetConfig+0x118>)
 801aa70:	781b      	ldrb	r3, [r3, #0]
 801aa72:	4619      	mov	r1, r3
 801aa74:	6878      	ldr	r0, [r7, #4]
 801aa76:	f7ff f9e4 	bl	8019e42 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801aa7a:	6878      	ldr	r0, [r7, #4]
 801aa7c:	f000 f9db 	bl	801ae36 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801aa80:	e033      	b.n	801aaea <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 801aa82:	4b1b      	ldr	r3, [pc, #108]	; (801aaf0 <USBD_SetConfig+0x118>)
 801aa84:	781b      	ldrb	r3, [r3, #0]
 801aa86:	461a      	mov	r2, r3
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	685b      	ldr	r3, [r3, #4]
 801aa8c:	429a      	cmp	r2, r3
 801aa8e:	d01d      	beq.n	801aacc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	685b      	ldr	r3, [r3, #4]
 801aa94:	b2db      	uxtb	r3, r3
 801aa96:	4619      	mov	r1, r3
 801aa98:	6878      	ldr	r0, [r7, #4]
 801aa9a:	f7ff f9d2 	bl	8019e42 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801aa9e:	4b14      	ldr	r3, [pc, #80]	; (801aaf0 <USBD_SetConfig+0x118>)
 801aaa0:	781b      	ldrb	r3, [r3, #0]
 801aaa2:	461a      	mov	r2, r3
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801aaa8:	4b11      	ldr	r3, [pc, #68]	; (801aaf0 <USBD_SetConfig+0x118>)
 801aaaa:	781b      	ldrb	r3, [r3, #0]
 801aaac:	4619      	mov	r1, r3
 801aaae:	6878      	ldr	r0, [r7, #4]
 801aab0:	f7ff f9a8 	bl	8019e04 <USBD_SetClassConfig>
 801aab4:	4603      	mov	r3, r0
 801aab6:	2b02      	cmp	r3, #2
 801aab8:	d104      	bne.n	801aac4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 801aaba:	6839      	ldr	r1, [r7, #0]
 801aabc:	6878      	ldr	r0, [r7, #4]
 801aabe:	f000 f8f2 	bl	801aca6 <USBD_CtlError>
            return;
 801aac2:	e012      	b.n	801aaea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801aac4:	6878      	ldr	r0, [r7, #4]
 801aac6:	f000 f9b6 	bl	801ae36 <USBD_CtlSendStatus>
        break;
 801aaca:	e00e      	b.n	801aaea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801aacc:	6878      	ldr	r0, [r7, #4]
 801aace:	f000 f9b2 	bl	801ae36 <USBD_CtlSendStatus>
        break;
 801aad2:	e00a      	b.n	801aaea <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 801aad4:	6839      	ldr	r1, [r7, #0]
 801aad6:	6878      	ldr	r0, [r7, #4]
 801aad8:	f000 f8e5 	bl	801aca6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801aadc:	4b04      	ldr	r3, [pc, #16]	; (801aaf0 <USBD_SetConfig+0x118>)
 801aade:	781b      	ldrb	r3, [r3, #0]
 801aae0:	4619      	mov	r1, r3
 801aae2:	6878      	ldr	r0, [r7, #4]
 801aae4:	f7ff f9ad 	bl	8019e42 <USBD_ClrClassConfig>
        break;
 801aae8:	bf00      	nop
    }
  }
}
 801aaea:	3708      	adds	r7, #8
 801aaec:	46bd      	mov	sp, r7
 801aaee:	bd80      	pop	{r7, pc}
 801aaf0:	200028c4 	.word	0x200028c4

0801aaf4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801aaf4:	b580      	push	{r7, lr}
 801aaf6:	b082      	sub	sp, #8
 801aaf8:	af00      	add	r7, sp, #0
 801aafa:	6078      	str	r0, [r7, #4]
 801aafc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801aafe:	683b      	ldr	r3, [r7, #0]
 801ab00:	88db      	ldrh	r3, [r3, #6]
 801ab02:	2b01      	cmp	r3, #1
 801ab04:	d004      	beq.n	801ab10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801ab06:	6839      	ldr	r1, [r7, #0]
 801ab08:	6878      	ldr	r0, [r7, #4]
 801ab0a:	f000 f8cc 	bl	801aca6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801ab0e:	e022      	b.n	801ab56 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ab16:	2b02      	cmp	r3, #2
 801ab18:	dc02      	bgt.n	801ab20 <USBD_GetConfig+0x2c>
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	dc03      	bgt.n	801ab26 <USBD_GetConfig+0x32>
 801ab1e:	e015      	b.n	801ab4c <USBD_GetConfig+0x58>
 801ab20:	2b03      	cmp	r3, #3
 801ab22:	d00b      	beq.n	801ab3c <USBD_GetConfig+0x48>
 801ab24:	e012      	b.n	801ab4c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	2200      	movs	r2, #0
 801ab2a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	3308      	adds	r3, #8
 801ab30:	2201      	movs	r2, #1
 801ab32:	4619      	mov	r1, r3
 801ab34:	6878      	ldr	r0, [r7, #4]
 801ab36:	f000 f920 	bl	801ad7a <USBD_CtlSendData>
        break;
 801ab3a:	e00c      	b.n	801ab56 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	3304      	adds	r3, #4
 801ab40:	2201      	movs	r2, #1
 801ab42:	4619      	mov	r1, r3
 801ab44:	6878      	ldr	r0, [r7, #4]
 801ab46:	f000 f918 	bl	801ad7a <USBD_CtlSendData>
        break;
 801ab4a:	e004      	b.n	801ab56 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 801ab4c:	6839      	ldr	r1, [r7, #0]
 801ab4e:	6878      	ldr	r0, [r7, #4]
 801ab50:	f000 f8a9 	bl	801aca6 <USBD_CtlError>
        break;
 801ab54:	bf00      	nop
}
 801ab56:	bf00      	nop
 801ab58:	3708      	adds	r7, #8
 801ab5a:	46bd      	mov	sp, r7
 801ab5c:	bd80      	pop	{r7, pc}

0801ab5e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ab5e:	b580      	push	{r7, lr}
 801ab60:	b082      	sub	sp, #8
 801ab62:	af00      	add	r7, sp, #0
 801ab64:	6078      	str	r0, [r7, #4]
 801ab66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ab6e:	3b01      	subs	r3, #1
 801ab70:	2b02      	cmp	r3, #2
 801ab72:	d81e      	bhi.n	801abb2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801ab74:	683b      	ldr	r3, [r7, #0]
 801ab76:	88db      	ldrh	r3, [r3, #6]
 801ab78:	2b02      	cmp	r3, #2
 801ab7a:	d004      	beq.n	801ab86 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 801ab7c:	6839      	ldr	r1, [r7, #0]
 801ab7e:	6878      	ldr	r0, [r7, #4]
 801ab80:	f000 f891 	bl	801aca6 <USBD_CtlError>
        break;
 801ab84:	e01a      	b.n	801abbc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	2201      	movs	r2, #1
 801ab8a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801ab92:	2b00      	cmp	r3, #0
 801ab94:	d005      	beq.n	801aba2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	68db      	ldr	r3, [r3, #12]
 801ab9a:	f043 0202 	orr.w	r2, r3, #2
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	330c      	adds	r3, #12
 801aba6:	2202      	movs	r2, #2
 801aba8:	4619      	mov	r1, r3
 801abaa:	6878      	ldr	r0, [r7, #4]
 801abac:	f000 f8e5 	bl	801ad7a <USBD_CtlSendData>
      break;
 801abb0:	e004      	b.n	801abbc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 801abb2:	6839      	ldr	r1, [r7, #0]
 801abb4:	6878      	ldr	r0, [r7, #4]
 801abb6:	f000 f876 	bl	801aca6 <USBD_CtlError>
      break;
 801abba:	bf00      	nop
  }
}
 801abbc:	bf00      	nop
 801abbe:	3708      	adds	r7, #8
 801abc0:	46bd      	mov	sp, r7
 801abc2:	bd80      	pop	{r7, pc}

0801abc4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801abc4:	b580      	push	{r7, lr}
 801abc6:	b082      	sub	sp, #8
 801abc8:	af00      	add	r7, sp, #0
 801abca:	6078      	str	r0, [r7, #4]
 801abcc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801abce:	683b      	ldr	r3, [r7, #0]
 801abd0:	885b      	ldrh	r3, [r3, #2]
 801abd2:	2b01      	cmp	r3, #1
 801abd4:	d106      	bne.n	801abe4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	2201      	movs	r2, #1
 801abda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 801abde:	6878      	ldr	r0, [r7, #4]
 801abe0:	f000 f929 	bl	801ae36 <USBD_CtlSendStatus>
  }
}
 801abe4:	bf00      	nop
 801abe6:	3708      	adds	r7, #8
 801abe8:	46bd      	mov	sp, r7
 801abea:	bd80      	pop	{r7, pc}

0801abec <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801abec:	b580      	push	{r7, lr}
 801abee:	b082      	sub	sp, #8
 801abf0:	af00      	add	r7, sp, #0
 801abf2:	6078      	str	r0, [r7, #4]
 801abf4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801abfc:	3b01      	subs	r3, #1
 801abfe:	2b02      	cmp	r3, #2
 801ac00:	d80b      	bhi.n	801ac1a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801ac02:	683b      	ldr	r3, [r7, #0]
 801ac04:	885b      	ldrh	r3, [r3, #2]
 801ac06:	2b01      	cmp	r3, #1
 801ac08:	d10c      	bne.n	801ac24 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	2200      	movs	r2, #0
 801ac0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 801ac12:	6878      	ldr	r0, [r7, #4]
 801ac14:	f000 f90f 	bl	801ae36 <USBD_CtlSendStatus>
      }
      break;
 801ac18:	e004      	b.n	801ac24 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801ac1a:	6839      	ldr	r1, [r7, #0]
 801ac1c:	6878      	ldr	r0, [r7, #4]
 801ac1e:	f000 f842 	bl	801aca6 <USBD_CtlError>
      break;
 801ac22:	e000      	b.n	801ac26 <USBD_ClrFeature+0x3a>
      break;
 801ac24:	bf00      	nop
  }
}
 801ac26:	bf00      	nop
 801ac28:	3708      	adds	r7, #8
 801ac2a:	46bd      	mov	sp, r7
 801ac2c:	bd80      	pop	{r7, pc}

0801ac2e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801ac2e:	b480      	push	{r7}
 801ac30:	b083      	sub	sp, #12
 801ac32:	af00      	add	r7, sp, #0
 801ac34:	6078      	str	r0, [r7, #4]
 801ac36:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801ac38:	683b      	ldr	r3, [r7, #0]
 801ac3a:	781a      	ldrb	r2, [r3, #0]
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801ac40:	683b      	ldr	r3, [r7, #0]
 801ac42:	785a      	ldrb	r2, [r3, #1]
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801ac48:	683b      	ldr	r3, [r7, #0]
 801ac4a:	3302      	adds	r3, #2
 801ac4c:	781b      	ldrb	r3, [r3, #0]
 801ac4e:	b29a      	uxth	r2, r3
 801ac50:	683b      	ldr	r3, [r7, #0]
 801ac52:	3303      	adds	r3, #3
 801ac54:	781b      	ldrb	r3, [r3, #0]
 801ac56:	b29b      	uxth	r3, r3
 801ac58:	021b      	lsls	r3, r3, #8
 801ac5a:	b29b      	uxth	r3, r3
 801ac5c:	4413      	add	r3, r2
 801ac5e:	b29a      	uxth	r2, r3
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801ac64:	683b      	ldr	r3, [r7, #0]
 801ac66:	3304      	adds	r3, #4
 801ac68:	781b      	ldrb	r3, [r3, #0]
 801ac6a:	b29a      	uxth	r2, r3
 801ac6c:	683b      	ldr	r3, [r7, #0]
 801ac6e:	3305      	adds	r3, #5
 801ac70:	781b      	ldrb	r3, [r3, #0]
 801ac72:	b29b      	uxth	r3, r3
 801ac74:	021b      	lsls	r3, r3, #8
 801ac76:	b29b      	uxth	r3, r3
 801ac78:	4413      	add	r3, r2
 801ac7a:	b29a      	uxth	r2, r3
 801ac7c:	687b      	ldr	r3, [r7, #4]
 801ac7e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801ac80:	683b      	ldr	r3, [r7, #0]
 801ac82:	3306      	adds	r3, #6
 801ac84:	781b      	ldrb	r3, [r3, #0]
 801ac86:	b29a      	uxth	r2, r3
 801ac88:	683b      	ldr	r3, [r7, #0]
 801ac8a:	3307      	adds	r3, #7
 801ac8c:	781b      	ldrb	r3, [r3, #0]
 801ac8e:	b29b      	uxth	r3, r3
 801ac90:	021b      	lsls	r3, r3, #8
 801ac92:	b29b      	uxth	r3, r3
 801ac94:	4413      	add	r3, r2
 801ac96:	b29a      	uxth	r2, r3
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	80da      	strh	r2, [r3, #6]

}
 801ac9c:	bf00      	nop
 801ac9e:	370c      	adds	r7, #12
 801aca0:	46bd      	mov	sp, r7
 801aca2:	bc80      	pop	{r7}
 801aca4:	4770      	bx	lr

0801aca6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801aca6:	b580      	push	{r7, lr}
 801aca8:	b082      	sub	sp, #8
 801acaa:	af00      	add	r7, sp, #0
 801acac:	6078      	str	r0, [r7, #4]
 801acae:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801acb0:	2180      	movs	r1, #128	; 0x80
 801acb2:	6878      	ldr	r0, [r7, #4]
 801acb4:	f000 fce8 	bl	801b688 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801acb8:	2100      	movs	r1, #0
 801acba:	6878      	ldr	r0, [r7, #4]
 801acbc:	f000 fce4 	bl	801b688 <USBD_LL_StallEP>
}
 801acc0:	bf00      	nop
 801acc2:	3708      	adds	r7, #8
 801acc4:	46bd      	mov	sp, r7
 801acc6:	bd80      	pop	{r7, pc}

0801acc8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801acc8:	b580      	push	{r7, lr}
 801acca:	b086      	sub	sp, #24
 801accc:	af00      	add	r7, sp, #0
 801acce:	60f8      	str	r0, [r7, #12]
 801acd0:	60b9      	str	r1, [r7, #8]
 801acd2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801acd4:	2300      	movs	r3, #0
 801acd6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 801acd8:	68fb      	ldr	r3, [r7, #12]
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d032      	beq.n	801ad44 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801acde:	68f8      	ldr	r0, [r7, #12]
 801ace0:	f000 f834 	bl	801ad4c <USBD_GetLen>
 801ace4:	4603      	mov	r3, r0
 801ace6:	3301      	adds	r3, #1
 801ace8:	b29b      	uxth	r3, r3
 801acea:	005b      	lsls	r3, r3, #1
 801acec:	b29a      	uxth	r2, r3
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801acf2:	7dfb      	ldrb	r3, [r7, #23]
 801acf4:	1c5a      	adds	r2, r3, #1
 801acf6:	75fa      	strb	r2, [r7, #23]
 801acf8:	461a      	mov	r2, r3
 801acfa:	68bb      	ldr	r3, [r7, #8]
 801acfc:	4413      	add	r3, r2
 801acfe:	687a      	ldr	r2, [r7, #4]
 801ad00:	7812      	ldrb	r2, [r2, #0]
 801ad02:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801ad04:	7dfb      	ldrb	r3, [r7, #23]
 801ad06:	1c5a      	adds	r2, r3, #1
 801ad08:	75fa      	strb	r2, [r7, #23]
 801ad0a:	461a      	mov	r2, r3
 801ad0c:	68bb      	ldr	r3, [r7, #8]
 801ad0e:	4413      	add	r3, r2
 801ad10:	2203      	movs	r2, #3
 801ad12:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801ad14:	e012      	b.n	801ad3c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 801ad16:	68fb      	ldr	r3, [r7, #12]
 801ad18:	1c5a      	adds	r2, r3, #1
 801ad1a:	60fa      	str	r2, [r7, #12]
 801ad1c:	7dfa      	ldrb	r2, [r7, #23]
 801ad1e:	1c51      	adds	r1, r2, #1
 801ad20:	75f9      	strb	r1, [r7, #23]
 801ad22:	4611      	mov	r1, r2
 801ad24:	68ba      	ldr	r2, [r7, #8]
 801ad26:	440a      	add	r2, r1
 801ad28:	781b      	ldrb	r3, [r3, #0]
 801ad2a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801ad2c:	7dfb      	ldrb	r3, [r7, #23]
 801ad2e:	1c5a      	adds	r2, r3, #1
 801ad30:	75fa      	strb	r2, [r7, #23]
 801ad32:	461a      	mov	r2, r3
 801ad34:	68bb      	ldr	r3, [r7, #8]
 801ad36:	4413      	add	r3, r2
 801ad38:	2200      	movs	r2, #0
 801ad3a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801ad3c:	68fb      	ldr	r3, [r7, #12]
 801ad3e:	781b      	ldrb	r3, [r3, #0]
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	d1e8      	bne.n	801ad16 <USBD_GetString+0x4e>
    }
  }
}
 801ad44:	bf00      	nop
 801ad46:	3718      	adds	r7, #24
 801ad48:	46bd      	mov	sp, r7
 801ad4a:	bd80      	pop	{r7, pc}

0801ad4c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801ad4c:	b480      	push	{r7}
 801ad4e:	b085      	sub	sp, #20
 801ad50:	af00      	add	r7, sp, #0
 801ad52:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801ad54:	2300      	movs	r3, #0
 801ad56:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 801ad58:	e005      	b.n	801ad66 <USBD_GetLen+0x1a>
  {
    len++;
 801ad5a:	7bfb      	ldrb	r3, [r7, #15]
 801ad5c:	3301      	adds	r3, #1
 801ad5e:	73fb      	strb	r3, [r7, #15]
    buf++;
 801ad60:	687b      	ldr	r3, [r7, #4]
 801ad62:	3301      	adds	r3, #1
 801ad64:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	781b      	ldrb	r3, [r3, #0]
 801ad6a:	2b00      	cmp	r3, #0
 801ad6c:	d1f5      	bne.n	801ad5a <USBD_GetLen+0xe>
  }

  return len;
 801ad6e:	7bfb      	ldrb	r3, [r7, #15]
}
 801ad70:	4618      	mov	r0, r3
 801ad72:	3714      	adds	r7, #20
 801ad74:	46bd      	mov	sp, r7
 801ad76:	bc80      	pop	{r7}
 801ad78:	4770      	bx	lr

0801ad7a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801ad7a:	b580      	push	{r7, lr}
 801ad7c:	b084      	sub	sp, #16
 801ad7e:	af00      	add	r7, sp, #0
 801ad80:	60f8      	str	r0, [r7, #12]
 801ad82:	60b9      	str	r1, [r7, #8]
 801ad84:	4613      	mov	r3, r2
 801ad86:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801ad88:	68fb      	ldr	r3, [r7, #12]
 801ad8a:	2202      	movs	r2, #2
 801ad8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801ad90:	88fa      	ldrh	r2, [r7, #6]
 801ad92:	68fb      	ldr	r3, [r7, #12]
 801ad94:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801ad96:	88fa      	ldrh	r2, [r7, #6]
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801ad9c:	88fb      	ldrh	r3, [r7, #6]
 801ad9e:	68ba      	ldr	r2, [r7, #8]
 801ada0:	2100      	movs	r1, #0
 801ada2:	68f8      	ldr	r0, [r7, #12]
 801ada4:	f000 fcf9 	bl	801b79a <USBD_LL_Transmit>

  return USBD_OK;
 801ada8:	2300      	movs	r3, #0
}
 801adaa:	4618      	mov	r0, r3
 801adac:	3710      	adds	r7, #16
 801adae:	46bd      	mov	sp, r7
 801adb0:	bd80      	pop	{r7, pc}

0801adb2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801adb2:	b580      	push	{r7, lr}
 801adb4:	b084      	sub	sp, #16
 801adb6:	af00      	add	r7, sp, #0
 801adb8:	60f8      	str	r0, [r7, #12]
 801adba:	60b9      	str	r1, [r7, #8]
 801adbc:	4613      	mov	r3, r2
 801adbe:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801adc0:	88fb      	ldrh	r3, [r7, #6]
 801adc2:	68ba      	ldr	r2, [r7, #8]
 801adc4:	2100      	movs	r1, #0
 801adc6:	68f8      	ldr	r0, [r7, #12]
 801adc8:	f000 fce7 	bl	801b79a <USBD_LL_Transmit>

  return USBD_OK;
 801adcc:	2300      	movs	r3, #0
}
 801adce:	4618      	mov	r0, r3
 801add0:	3710      	adds	r7, #16
 801add2:	46bd      	mov	sp, r7
 801add4:	bd80      	pop	{r7, pc}

0801add6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801add6:	b580      	push	{r7, lr}
 801add8:	b084      	sub	sp, #16
 801adda:	af00      	add	r7, sp, #0
 801addc:	60f8      	str	r0, [r7, #12]
 801adde:	60b9      	str	r1, [r7, #8]
 801ade0:	4613      	mov	r3, r2
 801ade2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801ade4:	68fb      	ldr	r3, [r7, #12]
 801ade6:	2203      	movs	r2, #3
 801ade8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801adec:	88fa      	ldrh	r2, [r7, #6]
 801adee:	68fb      	ldr	r3, [r7, #12]
 801adf0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 801adf4:	88fa      	ldrh	r2, [r7, #6]
 801adf6:	68fb      	ldr	r3, [r7, #12]
 801adf8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801adfc:	88fb      	ldrh	r3, [r7, #6]
 801adfe:	68ba      	ldr	r2, [r7, #8]
 801ae00:	2100      	movs	r1, #0
 801ae02:	68f8      	ldr	r0, [r7, #12]
 801ae04:	f000 fcec 	bl	801b7e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801ae08:	2300      	movs	r3, #0
}
 801ae0a:	4618      	mov	r0, r3
 801ae0c:	3710      	adds	r7, #16
 801ae0e:	46bd      	mov	sp, r7
 801ae10:	bd80      	pop	{r7, pc}

0801ae12 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801ae12:	b580      	push	{r7, lr}
 801ae14:	b084      	sub	sp, #16
 801ae16:	af00      	add	r7, sp, #0
 801ae18:	60f8      	str	r0, [r7, #12]
 801ae1a:	60b9      	str	r1, [r7, #8]
 801ae1c:	4613      	mov	r3, r2
 801ae1e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801ae20:	88fb      	ldrh	r3, [r7, #6]
 801ae22:	68ba      	ldr	r2, [r7, #8]
 801ae24:	2100      	movs	r1, #0
 801ae26:	68f8      	ldr	r0, [r7, #12]
 801ae28:	f000 fcda 	bl	801b7e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801ae2c:	2300      	movs	r3, #0
}
 801ae2e:	4618      	mov	r0, r3
 801ae30:	3710      	adds	r7, #16
 801ae32:	46bd      	mov	sp, r7
 801ae34:	bd80      	pop	{r7, pc}

0801ae36 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801ae36:	b580      	push	{r7, lr}
 801ae38:	b082      	sub	sp, #8
 801ae3a:	af00      	add	r7, sp, #0
 801ae3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	2204      	movs	r2, #4
 801ae42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801ae46:	2300      	movs	r3, #0
 801ae48:	2200      	movs	r2, #0
 801ae4a:	2100      	movs	r1, #0
 801ae4c:	6878      	ldr	r0, [r7, #4]
 801ae4e:	f000 fca4 	bl	801b79a <USBD_LL_Transmit>

  return USBD_OK;
 801ae52:	2300      	movs	r3, #0
}
 801ae54:	4618      	mov	r0, r3
 801ae56:	3708      	adds	r7, #8
 801ae58:	46bd      	mov	sp, r7
 801ae5a:	bd80      	pop	{r7, pc}

0801ae5c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801ae5c:	b580      	push	{r7, lr}
 801ae5e:	b082      	sub	sp, #8
 801ae60:	af00      	add	r7, sp, #0
 801ae62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	2205      	movs	r2, #5
 801ae68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801ae6c:	2300      	movs	r3, #0
 801ae6e:	2200      	movs	r2, #0
 801ae70:	2100      	movs	r1, #0
 801ae72:	6878      	ldr	r0, [r7, #4]
 801ae74:	f000 fcb4 	bl	801b7e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801ae78:	2300      	movs	r3, #0
}
 801ae7a:	4618      	mov	r0, r3
 801ae7c:	3708      	adds	r7, #8
 801ae7e:	46bd      	mov	sp, r7
 801ae80:	bd80      	pop	{r7, pc}
	...

0801ae84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801ae84:	b580      	push	{r7, lr}
 801ae86:	b086      	sub	sp, #24
 801ae88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
	 /* Rendering hardware reset harmless (no need to replug USB cable): */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801ae8a:	f107 0308 	add.w	r3, r7, #8
 801ae8e:	2200      	movs	r2, #0
 801ae90:	601a      	str	r2, [r3, #0]
 801ae92:	605a      	str	r2, [r3, #4]
 801ae94:	609a      	str	r2, [r3, #8]
 801ae96:	60da      	str	r2, [r3, #12]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 801ae98:	4b25      	ldr	r3, [pc, #148]	; (801af30 <MX_USB_DEVICE_Init+0xac>)
 801ae9a:	699b      	ldr	r3, [r3, #24]
 801ae9c:	4a24      	ldr	r2, [pc, #144]	; (801af30 <MX_USB_DEVICE_Init+0xac>)
 801ae9e:	f043 0304 	orr.w	r3, r3, #4
 801aea2:	6193      	str	r3, [r2, #24]
 801aea4:	4b22      	ldr	r3, [pc, #136]	; (801af30 <MX_USB_DEVICE_Init+0xac>)
 801aea6:	699b      	ldr	r3, [r3, #24]
 801aea8:	f003 0304 	and.w	r3, r3, #4
 801aeac:	607b      	str	r3, [r7, #4]
 801aeae:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 801aeb0:	2200      	movs	r2, #0
 801aeb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801aeb6:	481f      	ldr	r0, [pc, #124]	; (801af34 <MX_USB_DEVICE_Init+0xb0>)
 801aeb8:	f7f5 fb35 	bl	8010526 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PA12, a.k.a. USB_DP */
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 801aebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801aec0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801aec2:	2301      	movs	r3, #1
 801aec4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801aec6:	2300      	movs	r3, #0
 801aec8:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801aeca:	2302      	movs	r3, #2
 801aecc:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801aece:	f107 0308 	add.w	r3, r7, #8
 801aed2:	4619      	mov	r1, r3
 801aed4:	4817      	ldr	r0, [pc, #92]	; (801af34 <MX_USB_DEVICE_Init+0xb0>)
 801aed6:	f7f5 f8af 	bl	8010038 <HAL_GPIO_Init>

	  HAL_Delay(5);
 801aeda:	2005      	movs	r0, #5
 801aedc:	f7f3 fc70 	bl	800e7c0 <HAL_Delay>
	  /* Hardware reset rendered harmless! */
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801aee0:	2200      	movs	r2, #0
 801aee2:	4915      	ldr	r1, [pc, #84]	; (801af38 <MX_USB_DEVICE_Init+0xb4>)
 801aee4:	4815      	ldr	r0, [pc, #84]	; (801af3c <MX_USB_DEVICE_Init+0xb8>)
 801aee6:	f7fe ff00 	bl	8019cea <USBD_Init>
 801aeea:	4603      	mov	r3, r0
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d001      	beq.n	801aef4 <MX_USB_DEVICE_Init+0x70>
  {
    Error_Handler();
 801aef0:	f7f1 fd02 	bl	800c8f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801aef4:	4912      	ldr	r1, [pc, #72]	; (801af40 <MX_USB_DEVICE_Init+0xbc>)
 801aef6:	4811      	ldr	r0, [pc, #68]	; (801af3c <MX_USB_DEVICE_Init+0xb8>)
 801aef8:	f7fe ff3f 	bl	8019d7a <USBD_RegisterClass>
 801aefc:	4603      	mov	r3, r0
 801aefe:	2b00      	cmp	r3, #0
 801af00:	d001      	beq.n	801af06 <MX_USB_DEVICE_Init+0x82>
  {
    Error_Handler();
 801af02:	f7f1 fcf9 	bl	800c8f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801af06:	490f      	ldr	r1, [pc, #60]	; (801af44 <MX_USB_DEVICE_Init+0xc0>)
 801af08:	480c      	ldr	r0, [pc, #48]	; (801af3c <MX_USB_DEVICE_Init+0xb8>)
 801af0a:	f7fe fe53 	bl	8019bb4 <USBD_CDC_RegisterInterface>
 801af0e:	4603      	mov	r3, r0
 801af10:	2b00      	cmp	r3, #0
 801af12:	d001      	beq.n	801af18 <MX_USB_DEVICE_Init+0x94>
  {
    Error_Handler();
 801af14:	f7f1 fcf0 	bl	800c8f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801af18:	4808      	ldr	r0, [pc, #32]	; (801af3c <MX_USB_DEVICE_Init+0xb8>)
 801af1a:	f7fe ff47 	bl	8019dac <USBD_Start>
 801af1e:	4603      	mov	r3, r0
 801af20:	2b00      	cmp	r3, #0
 801af22:	d001      	beq.n	801af28 <MX_USB_DEVICE_Init+0xa4>
  {
    Error_Handler();
 801af24:	f7f1 fce8 	bl	800c8f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801af28:	bf00      	nop
 801af2a:	3718      	adds	r7, #24
 801af2c:	46bd      	mov	sp, r7
 801af2e:	bd80      	pop	{r7, pc}
 801af30:	40021000 	.word	0x40021000
 801af34:	40010800 	.word	0x40010800
 801af38:	200007cc 	.word	0x200007cc
 801af3c:	200028c8 	.word	0x200028c8
 801af40:	200006b0 	.word	0x200006b0
 801af44:	200007b4 	.word	0x200007b4

0801af48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801af48:	b580      	push	{r7, lr}
 801af4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801af4c:	2200      	movs	r2, #0
 801af4e:	4905      	ldr	r1, [pc, #20]	; (801af64 <CDC_Init_FS+0x1c>)
 801af50:	4805      	ldr	r0, [pc, #20]	; (801af68 <CDC_Init_FS+0x20>)
 801af52:	f7fe fe45 	bl	8019be0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801af56:	4905      	ldr	r1, [pc, #20]	; (801af6c <CDC_Init_FS+0x24>)
 801af58:	4803      	ldr	r0, [pc, #12]	; (801af68 <CDC_Init_FS+0x20>)
 801af5a:	f7fe fe5a 	bl	8019c12 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801af5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801af60:	4618      	mov	r0, r3
 801af62:	bd80      	pop	{r7, pc}
 801af64:	20002f8c 	.word	0x20002f8c
 801af68:	200028c8 	.word	0x200028c8
 801af6c:	20002b8c 	.word	0x20002b8c

0801af70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801af70:	b480      	push	{r7}
 801af72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801af74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801af76:	4618      	mov	r0, r3
 801af78:	46bd      	mov	sp, r7
 801af7a:	bc80      	pop	{r7}
 801af7c:	4770      	bx	lr
	...

0801af80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801af80:	b480      	push	{r7}
 801af82:	b083      	sub	sp, #12
 801af84:	af00      	add	r7, sp, #0
 801af86:	4603      	mov	r3, r0
 801af88:	6039      	str	r1, [r7, #0]
 801af8a:	71fb      	strb	r3, [r7, #7]
 801af8c:	4613      	mov	r3, r2
 801af8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801af90:	79fb      	ldrb	r3, [r7, #7]
 801af92:	2b23      	cmp	r3, #35	; 0x23
 801af94:	d85c      	bhi.n	801b050 <CDC_Control_FS+0xd0>
 801af96:	a201      	add	r2, pc, #4	; (adr r2, 801af9c <CDC_Control_FS+0x1c>)
 801af98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af9c:	0801b051 	.word	0x0801b051
 801afa0:	0801b051 	.word	0x0801b051
 801afa4:	0801b051 	.word	0x0801b051
 801afa8:	0801b051 	.word	0x0801b051
 801afac:	0801b051 	.word	0x0801b051
 801afb0:	0801b051 	.word	0x0801b051
 801afb4:	0801b051 	.word	0x0801b051
 801afb8:	0801b051 	.word	0x0801b051
 801afbc:	0801b051 	.word	0x0801b051
 801afc0:	0801b051 	.word	0x0801b051
 801afc4:	0801b051 	.word	0x0801b051
 801afc8:	0801b051 	.word	0x0801b051
 801afcc:	0801b051 	.word	0x0801b051
 801afd0:	0801b051 	.word	0x0801b051
 801afd4:	0801b051 	.word	0x0801b051
 801afd8:	0801b051 	.word	0x0801b051
 801afdc:	0801b051 	.word	0x0801b051
 801afe0:	0801b051 	.word	0x0801b051
 801afe4:	0801b051 	.word	0x0801b051
 801afe8:	0801b051 	.word	0x0801b051
 801afec:	0801b051 	.word	0x0801b051
 801aff0:	0801b051 	.word	0x0801b051
 801aff4:	0801b051 	.word	0x0801b051
 801aff8:	0801b051 	.word	0x0801b051
 801affc:	0801b051 	.word	0x0801b051
 801b000:	0801b051 	.word	0x0801b051
 801b004:	0801b051 	.word	0x0801b051
 801b008:	0801b051 	.word	0x0801b051
 801b00c:	0801b051 	.word	0x0801b051
 801b010:	0801b051 	.word	0x0801b051
 801b014:	0801b051 	.word	0x0801b051
 801b018:	0801b051 	.word	0x0801b051
 801b01c:	0801b02d 	.word	0x0801b02d
 801b020:	0801b03f 	.word	0x0801b03f
 801b024:	0801b051 	.word	0x0801b051
 801b028:	0801b051 	.word	0x0801b051
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit
                    = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };
    case CDC_SET_LINE_CODING:
        	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 801b02c:	4b0c      	ldr	r3, [pc, #48]	; (801b060 <CDC_Control_FS+0xe0>)
 801b02e:	683a      	ldr	r2, [r7, #0]
 801b030:	6810      	ldr	r0, [r2, #0]
 801b032:	6018      	str	r0, [r3, #0]
 801b034:	8891      	ldrh	r1, [r2, #4]
 801b036:	7992      	ldrb	r2, [r2, #6]
 801b038:	8099      	strh	r1, [r3, #4]
 801b03a:	719a      	strb	r2, [r3, #6]
    break;
 801b03c:	e009      	b.n	801b052 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
        	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 801b03e:	683b      	ldr	r3, [r7, #0]
 801b040:	4a07      	ldr	r2, [pc, #28]	; (801b060 <CDC_Control_FS+0xe0>)
 801b042:	6810      	ldr	r0, [r2, #0]
 801b044:	6018      	str	r0, [r3, #0]
 801b046:	8891      	ldrh	r1, [r2, #4]
 801b048:	7992      	ldrb	r2, [r2, #6]
 801b04a:	8099      	strh	r1, [r3, #4]
 801b04c:	719a      	strb	r2, [r3, #6]
    break;
 801b04e:	e000      	b.n	801b052 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801b050:	bf00      	nop
  }

  return (USBD_OK);
 801b052:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801b054:	4618      	mov	r0, r3
 801b056:	370c      	adds	r7, #12
 801b058:	46bd      	mov	sp, r7
 801b05a:	bc80      	pop	{r7}
 801b05c:	4770      	bx	lr
 801b05e:	bf00      	nop
 801b060:	200007c4 	.word	0x200007c4

0801b064 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801b064:	b580      	push	{r7, lr}
 801b066:	b082      	sub	sp, #8
 801b068:	af00      	add	r7, sp, #0
 801b06a:	6078      	str	r0, [r7, #4]
 801b06c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801b06e:	6879      	ldr	r1, [r7, #4]
 801b070:	4808      	ldr	r0, [pc, #32]	; (801b094 <CDC_Receive_FS+0x30>)
 801b072:	f7fe fdce 	bl	8019c12 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801b076:	4807      	ldr	r0, [pc, #28]	; (801b094 <CDC_Receive_FS+0x30>)
 801b078:	f7fe fe0d 	bl	8019c96 <USBD_CDC_ReceivePacket>
  CDC_ReveiveCallback(Buf, Len[0]); // My callback function
 801b07c:	683b      	ldr	r3, [r7, #0]
 801b07e:	681b      	ldr	r3, [r3, #0]
 801b080:	b2db      	uxtb	r3, r3
 801b082:	4619      	mov	r1, r3
 801b084:	6878      	ldr	r0, [r7, #4]
 801b086:	f7f1 fa1d 	bl	800c4c4 <CDC_ReveiveCallback>

  return (USBD_OK);
 801b08a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801b08c:	4618      	mov	r0, r3
 801b08e:	3708      	adds	r7, #8
 801b090:	46bd      	mov	sp, r7
 801b092:	bd80      	pop	{r7, pc}
 801b094:	200028c8 	.word	0x200028c8

0801b098 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801b098:	b580      	push	{r7, lr}
 801b09a:	b084      	sub	sp, #16
 801b09c:	af00      	add	r7, sp, #0
 801b09e:	6078      	str	r0, [r7, #4]
 801b0a0:	460b      	mov	r3, r1
 801b0a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801b0a4:	2300      	movs	r3, #0
 801b0a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801b0a8:	4b0d      	ldr	r3, [pc, #52]	; (801b0e0 <CDC_Transmit_FS+0x48>)
 801b0aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801b0ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801b0b0:	68bb      	ldr	r3, [r7, #8]
 801b0b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d001      	beq.n	801b0be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801b0ba:	2301      	movs	r3, #1
 801b0bc:	e00b      	b.n	801b0d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801b0be:	887b      	ldrh	r3, [r7, #2]
 801b0c0:	461a      	mov	r2, r3
 801b0c2:	6879      	ldr	r1, [r7, #4]
 801b0c4:	4806      	ldr	r0, [pc, #24]	; (801b0e0 <CDC_Transmit_FS+0x48>)
 801b0c6:	f7fe fd8b 	bl	8019be0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801b0ca:	4805      	ldr	r0, [pc, #20]	; (801b0e0 <CDC_Transmit_FS+0x48>)
 801b0cc:	f7fe fdb4 	bl	8019c38 <USBD_CDC_TransmitPacket>
 801b0d0:	4603      	mov	r3, r0
 801b0d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801b0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 801b0d6:	4618      	mov	r0, r3
 801b0d8:	3710      	adds	r7, #16
 801b0da:	46bd      	mov	sp, r7
 801b0dc:	bd80      	pop	{r7, pc}
 801b0de:	bf00      	nop
 801b0e0:	200028c8 	.word	0x200028c8

0801b0e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b0e4:	b480      	push	{r7}
 801b0e6:	b083      	sub	sp, #12
 801b0e8:	af00      	add	r7, sp, #0
 801b0ea:	4603      	mov	r3, r0
 801b0ec:	6039      	str	r1, [r7, #0]
 801b0ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801b0f0:	683b      	ldr	r3, [r7, #0]
 801b0f2:	2212      	movs	r2, #18
 801b0f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801b0f6:	4b03      	ldr	r3, [pc, #12]	; (801b104 <USBD_FS_DeviceDescriptor+0x20>)
}
 801b0f8:	4618      	mov	r0, r3
 801b0fa:	370c      	adds	r7, #12
 801b0fc:	46bd      	mov	sp, r7
 801b0fe:	bc80      	pop	{r7}
 801b100:	4770      	bx	lr
 801b102:	bf00      	nop
 801b104:	200007e8 	.word	0x200007e8

0801b108 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b108:	b480      	push	{r7}
 801b10a:	b083      	sub	sp, #12
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	4603      	mov	r3, r0
 801b110:	6039      	str	r1, [r7, #0]
 801b112:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801b114:	683b      	ldr	r3, [r7, #0]
 801b116:	2204      	movs	r2, #4
 801b118:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801b11a:	4b03      	ldr	r3, [pc, #12]	; (801b128 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801b11c:	4618      	mov	r0, r3
 801b11e:	370c      	adds	r7, #12
 801b120:	46bd      	mov	sp, r7
 801b122:	bc80      	pop	{r7}
 801b124:	4770      	bx	lr
 801b126:	bf00      	nop
 801b128:	200007fc 	.word	0x200007fc

0801b12c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b12c:	b580      	push	{r7, lr}
 801b12e:	b082      	sub	sp, #8
 801b130:	af00      	add	r7, sp, #0
 801b132:	4603      	mov	r3, r0
 801b134:	6039      	str	r1, [r7, #0]
 801b136:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b138:	79fb      	ldrb	r3, [r7, #7]
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	d105      	bne.n	801b14a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b13e:	683a      	ldr	r2, [r7, #0]
 801b140:	4907      	ldr	r1, [pc, #28]	; (801b160 <USBD_FS_ProductStrDescriptor+0x34>)
 801b142:	4808      	ldr	r0, [pc, #32]	; (801b164 <USBD_FS_ProductStrDescriptor+0x38>)
 801b144:	f7ff fdc0 	bl	801acc8 <USBD_GetString>
 801b148:	e004      	b.n	801b154 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b14a:	683a      	ldr	r2, [r7, #0]
 801b14c:	4904      	ldr	r1, [pc, #16]	; (801b160 <USBD_FS_ProductStrDescriptor+0x34>)
 801b14e:	4805      	ldr	r0, [pc, #20]	; (801b164 <USBD_FS_ProductStrDescriptor+0x38>)
 801b150:	f7ff fdba 	bl	801acc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801b154:	4b02      	ldr	r3, [pc, #8]	; (801b160 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801b156:	4618      	mov	r0, r3
 801b158:	3708      	adds	r7, #8
 801b15a:	46bd      	mov	sp, r7
 801b15c:	bd80      	pop	{r7, pc}
 801b15e:	bf00      	nop
 801b160:	2000338c 	.word	0x2000338c
 801b164:	0801e9ac 	.word	0x0801e9ac

0801b168 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b168:	b580      	push	{r7, lr}
 801b16a:	b082      	sub	sp, #8
 801b16c:	af00      	add	r7, sp, #0
 801b16e:	4603      	mov	r3, r0
 801b170:	6039      	str	r1, [r7, #0]
 801b172:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801b174:	683a      	ldr	r2, [r7, #0]
 801b176:	4904      	ldr	r1, [pc, #16]	; (801b188 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801b178:	4804      	ldr	r0, [pc, #16]	; (801b18c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801b17a:	f7ff fda5 	bl	801acc8 <USBD_GetString>
  return USBD_StrDesc;
 801b17e:	4b02      	ldr	r3, [pc, #8]	; (801b188 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801b180:	4618      	mov	r0, r3
 801b182:	3708      	adds	r7, #8
 801b184:	46bd      	mov	sp, r7
 801b186:	bd80      	pop	{r7, pc}
 801b188:	2000338c 	.word	0x2000338c
 801b18c:	0801e9c4 	.word	0x0801e9c4

0801b190 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b190:	b580      	push	{r7, lr}
 801b192:	b082      	sub	sp, #8
 801b194:	af00      	add	r7, sp, #0
 801b196:	4603      	mov	r3, r0
 801b198:	6039      	str	r1, [r7, #0]
 801b19a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801b19c:	683b      	ldr	r3, [r7, #0]
 801b19e:	221a      	movs	r2, #26
 801b1a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801b1a2:	f000 f843 	bl	801b22c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801b1a6:	4b02      	ldr	r3, [pc, #8]	; (801b1b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801b1a8:	4618      	mov	r0, r3
 801b1aa:	3708      	adds	r7, #8
 801b1ac:	46bd      	mov	sp, r7
 801b1ae:	bd80      	pop	{r7, pc}
 801b1b0:	20000800 	.word	0x20000800

0801b1b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b1b4:	b580      	push	{r7, lr}
 801b1b6:	b082      	sub	sp, #8
 801b1b8:	af00      	add	r7, sp, #0
 801b1ba:	4603      	mov	r3, r0
 801b1bc:	6039      	str	r1, [r7, #0]
 801b1be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801b1c0:	79fb      	ldrb	r3, [r7, #7]
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d105      	bne.n	801b1d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b1c6:	683a      	ldr	r2, [r7, #0]
 801b1c8:	4907      	ldr	r1, [pc, #28]	; (801b1e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b1ca:	4808      	ldr	r0, [pc, #32]	; (801b1ec <USBD_FS_ConfigStrDescriptor+0x38>)
 801b1cc:	f7ff fd7c 	bl	801acc8 <USBD_GetString>
 801b1d0:	e004      	b.n	801b1dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b1d2:	683a      	ldr	r2, [r7, #0]
 801b1d4:	4904      	ldr	r1, [pc, #16]	; (801b1e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 801b1d6:	4805      	ldr	r0, [pc, #20]	; (801b1ec <USBD_FS_ConfigStrDescriptor+0x38>)
 801b1d8:	f7ff fd76 	bl	801acc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801b1dc:	4b02      	ldr	r3, [pc, #8]	; (801b1e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801b1de:	4618      	mov	r0, r3
 801b1e0:	3708      	adds	r7, #8
 801b1e2:	46bd      	mov	sp, r7
 801b1e4:	bd80      	pop	{r7, pc}
 801b1e6:	bf00      	nop
 801b1e8:	2000338c 	.word	0x2000338c
 801b1ec:	0801e9d0 	.word	0x0801e9d0

0801b1f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b1f0:	b580      	push	{r7, lr}
 801b1f2:	b082      	sub	sp, #8
 801b1f4:	af00      	add	r7, sp, #0
 801b1f6:	4603      	mov	r3, r0
 801b1f8:	6039      	str	r1, [r7, #0]
 801b1fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801b1fc:	79fb      	ldrb	r3, [r7, #7]
 801b1fe:	2b00      	cmp	r3, #0
 801b200:	d105      	bne.n	801b20e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b202:	683a      	ldr	r2, [r7, #0]
 801b204:	4907      	ldr	r1, [pc, #28]	; (801b224 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b206:	4808      	ldr	r0, [pc, #32]	; (801b228 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b208:	f7ff fd5e 	bl	801acc8 <USBD_GetString>
 801b20c:	e004      	b.n	801b218 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b20e:	683a      	ldr	r2, [r7, #0]
 801b210:	4904      	ldr	r1, [pc, #16]	; (801b224 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801b212:	4805      	ldr	r0, [pc, #20]	; (801b228 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801b214:	f7ff fd58 	bl	801acc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801b218:	4b02      	ldr	r3, [pc, #8]	; (801b224 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801b21a:	4618      	mov	r0, r3
 801b21c:	3708      	adds	r7, #8
 801b21e:	46bd      	mov	sp, r7
 801b220:	bd80      	pop	{r7, pc}
 801b222:	bf00      	nop
 801b224:	2000338c 	.word	0x2000338c
 801b228:	0801e9dc 	.word	0x0801e9dc

0801b22c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801b22c:	b580      	push	{r7, lr}
 801b22e:	b084      	sub	sp, #16
 801b230:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801b232:	4b0f      	ldr	r3, [pc, #60]	; (801b270 <Get_SerialNum+0x44>)
 801b234:	681b      	ldr	r3, [r3, #0]
 801b236:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801b238:	4b0e      	ldr	r3, [pc, #56]	; (801b274 <Get_SerialNum+0x48>)
 801b23a:	681b      	ldr	r3, [r3, #0]
 801b23c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801b23e:	4b0e      	ldr	r3, [pc, #56]	; (801b278 <Get_SerialNum+0x4c>)
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801b244:	68fa      	ldr	r2, [r7, #12]
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	4413      	add	r3, r2
 801b24a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801b24c:	68fb      	ldr	r3, [r7, #12]
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d009      	beq.n	801b266 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801b252:	2208      	movs	r2, #8
 801b254:	4909      	ldr	r1, [pc, #36]	; (801b27c <Get_SerialNum+0x50>)
 801b256:	68f8      	ldr	r0, [r7, #12]
 801b258:	f000 f814 	bl	801b284 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801b25c:	2204      	movs	r2, #4
 801b25e:	4908      	ldr	r1, [pc, #32]	; (801b280 <Get_SerialNum+0x54>)
 801b260:	68b8      	ldr	r0, [r7, #8]
 801b262:	f000 f80f 	bl	801b284 <IntToUnicode>
  }
}
 801b266:	bf00      	nop
 801b268:	3710      	adds	r7, #16
 801b26a:	46bd      	mov	sp, r7
 801b26c:	bd80      	pop	{r7, pc}
 801b26e:	bf00      	nop
 801b270:	1ffff7e8 	.word	0x1ffff7e8
 801b274:	1ffff7ec 	.word	0x1ffff7ec
 801b278:	1ffff7f0 	.word	0x1ffff7f0
 801b27c:	20000802 	.word	0x20000802
 801b280:	20000812 	.word	0x20000812

0801b284 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801b284:	b480      	push	{r7}
 801b286:	b087      	sub	sp, #28
 801b288:	af00      	add	r7, sp, #0
 801b28a:	60f8      	str	r0, [r7, #12]
 801b28c:	60b9      	str	r1, [r7, #8]
 801b28e:	4613      	mov	r3, r2
 801b290:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801b292:	2300      	movs	r3, #0
 801b294:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801b296:	2300      	movs	r3, #0
 801b298:	75fb      	strb	r3, [r7, #23]
 801b29a:	e027      	b.n	801b2ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801b29c:	68fb      	ldr	r3, [r7, #12]
 801b29e:	0f1b      	lsrs	r3, r3, #28
 801b2a0:	2b09      	cmp	r3, #9
 801b2a2:	d80b      	bhi.n	801b2bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801b2a4:	68fb      	ldr	r3, [r7, #12]
 801b2a6:	0f1b      	lsrs	r3, r3, #28
 801b2a8:	b2da      	uxtb	r2, r3
 801b2aa:	7dfb      	ldrb	r3, [r7, #23]
 801b2ac:	005b      	lsls	r3, r3, #1
 801b2ae:	4619      	mov	r1, r3
 801b2b0:	68bb      	ldr	r3, [r7, #8]
 801b2b2:	440b      	add	r3, r1
 801b2b4:	3230      	adds	r2, #48	; 0x30
 801b2b6:	b2d2      	uxtb	r2, r2
 801b2b8:	701a      	strb	r2, [r3, #0]
 801b2ba:	e00a      	b.n	801b2d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801b2bc:	68fb      	ldr	r3, [r7, #12]
 801b2be:	0f1b      	lsrs	r3, r3, #28
 801b2c0:	b2da      	uxtb	r2, r3
 801b2c2:	7dfb      	ldrb	r3, [r7, #23]
 801b2c4:	005b      	lsls	r3, r3, #1
 801b2c6:	4619      	mov	r1, r3
 801b2c8:	68bb      	ldr	r3, [r7, #8]
 801b2ca:	440b      	add	r3, r1
 801b2cc:	3237      	adds	r2, #55	; 0x37
 801b2ce:	b2d2      	uxtb	r2, r2
 801b2d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801b2d2:	68fb      	ldr	r3, [r7, #12]
 801b2d4:	011b      	lsls	r3, r3, #4
 801b2d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801b2d8:	7dfb      	ldrb	r3, [r7, #23]
 801b2da:	005b      	lsls	r3, r3, #1
 801b2dc:	3301      	adds	r3, #1
 801b2de:	68ba      	ldr	r2, [r7, #8]
 801b2e0:	4413      	add	r3, r2
 801b2e2:	2200      	movs	r2, #0
 801b2e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801b2e6:	7dfb      	ldrb	r3, [r7, #23]
 801b2e8:	3301      	adds	r3, #1
 801b2ea:	75fb      	strb	r3, [r7, #23]
 801b2ec:	7dfa      	ldrb	r2, [r7, #23]
 801b2ee:	79fb      	ldrb	r3, [r7, #7]
 801b2f0:	429a      	cmp	r2, r3
 801b2f2:	d3d3      	bcc.n	801b29c <IntToUnicode+0x18>
  }
}
 801b2f4:	bf00      	nop
 801b2f6:	bf00      	nop
 801b2f8:	371c      	adds	r7, #28
 801b2fa:	46bd      	mov	sp, r7
 801b2fc:	bc80      	pop	{r7}
 801b2fe:	4770      	bx	lr

0801b300 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801b300:	b480      	push	{r7}
 801b302:	b085      	sub	sp, #20
 801b304:	af00      	add	r7, sp, #0
 801b306:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	681b      	ldr	r3, [r3, #0]
 801b30c:	4a09      	ldr	r2, [pc, #36]	; (801b334 <HAL_PCD_MspInit+0x34>)
 801b30e:	4293      	cmp	r3, r2
 801b310:	d10b      	bne.n	801b32a <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801b312:	4b09      	ldr	r3, [pc, #36]	; (801b338 <HAL_PCD_MspInit+0x38>)
 801b314:	69db      	ldr	r3, [r3, #28]
 801b316:	4a08      	ldr	r2, [pc, #32]	; (801b338 <HAL_PCD_MspInit+0x38>)
 801b318:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801b31c:	61d3      	str	r3, [r2, #28]
 801b31e:	4b06      	ldr	r3, [pc, #24]	; (801b338 <HAL_PCD_MspInit+0x38>)
 801b320:	69db      	ldr	r3, [r3, #28]
 801b322:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801b326:	60fb      	str	r3, [r7, #12]
 801b328:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801b32a:	bf00      	nop
 801b32c:	3714      	adds	r7, #20
 801b32e:	46bd      	mov	sp, r7
 801b330:	bc80      	pop	{r7}
 801b332:	4770      	bx	lr
 801b334:	40005c00 	.word	0x40005c00
 801b338:	40021000 	.word	0x40021000

0801b33c <HAL_PCD_MspDeInit>:

void HAL_PCD_MspDeInit(PCD_HandleTypeDef* pcdHandle)
{
 801b33c:	b580      	push	{r7, lr}
 801b33e:	b082      	sub	sp, #8
 801b340:	af00      	add	r7, sp, #0
 801b342:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	4a07      	ldr	r2, [pc, #28]	; (801b368 <HAL_PCD_MspDeInit+0x2c>)
 801b34a:	4293      	cmp	r3, r2
 801b34c:	d108      	bne.n	801b360 <HAL_PCD_MspDeInit+0x24>
  {
  /* USER CODE BEGIN USB_MspDeInit 0 */

  /* USER CODE END USB_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USB_CLK_DISABLE();
 801b34e:	4b07      	ldr	r3, [pc, #28]	; (801b36c <HAL_PCD_MspDeInit+0x30>)
 801b350:	69db      	ldr	r3, [r3, #28]
 801b352:	4a06      	ldr	r2, [pc, #24]	; (801b36c <HAL_PCD_MspDeInit+0x30>)
 801b354:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801b358:	61d3      	str	r3, [r2, #28]

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(USB_LP_CAN1_RX0_IRQn);
 801b35a:	2014      	movs	r0, #20
 801b35c:	f7f4 f949 	bl	800f5f2 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USB_MspDeInit 1 */

  /* USER CODE END USB_MspDeInit 1 */
  }
}
 801b360:	bf00      	nop
 801b362:	3708      	adds	r7, #8
 801b364:	46bd      	mov	sp, r7
 801b366:	bd80      	pop	{r7, pc}
 801b368:	40005c00 	.word	0x40005c00
 801b36c:	40021000 	.word	0x40021000

0801b370 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b370:	b580      	push	{r7, lr}
 801b372:	b082      	sub	sp, #8
 801b374:	af00      	add	r7, sp, #0
 801b376:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 801b384:	4619      	mov	r1, r3
 801b386:	4610      	mov	r0, r2
 801b388:	f7fe fd6e 	bl	8019e68 <USBD_LL_SetupStage>
}
 801b38c:	bf00      	nop
 801b38e:	3708      	adds	r7, #8
 801b390:	46bd      	mov	sp, r7
 801b392:	bd80      	pop	{r7, pc}

0801b394 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b394:	b580      	push	{r7, lr}
 801b396:	b082      	sub	sp, #8
 801b398:	af00      	add	r7, sp, #0
 801b39a:	6078      	str	r0, [r7, #4]
 801b39c:	460b      	mov	r3, r1
 801b39e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 801b3a6:	78fa      	ldrb	r2, [r7, #3]
 801b3a8:	6879      	ldr	r1, [r7, #4]
 801b3aa:	4613      	mov	r3, r2
 801b3ac:	009b      	lsls	r3, r3, #2
 801b3ae:	4413      	add	r3, r2
 801b3b0:	00db      	lsls	r3, r3, #3
 801b3b2:	440b      	add	r3, r1
 801b3b4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801b3b8:	681a      	ldr	r2, [r3, #0]
 801b3ba:	78fb      	ldrb	r3, [r7, #3]
 801b3bc:	4619      	mov	r1, r3
 801b3be:	f7fe fda0 	bl	8019f02 <USBD_LL_DataOutStage>
}
 801b3c2:	bf00      	nop
 801b3c4:	3708      	adds	r7, #8
 801b3c6:	46bd      	mov	sp, r7
 801b3c8:	bd80      	pop	{r7, pc}

0801b3ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b3ca:	b580      	push	{r7, lr}
 801b3cc:	b082      	sub	sp, #8
 801b3ce:	af00      	add	r7, sp, #0
 801b3d0:	6078      	str	r0, [r7, #4]
 801b3d2:	460b      	mov	r3, r1
 801b3d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 801b3dc:	78fa      	ldrb	r2, [r7, #3]
 801b3de:	6879      	ldr	r1, [r7, #4]
 801b3e0:	4613      	mov	r3, r2
 801b3e2:	009b      	lsls	r3, r3, #2
 801b3e4:	4413      	add	r3, r2
 801b3e6:	00db      	lsls	r3, r3, #3
 801b3e8:	440b      	add	r3, r1
 801b3ea:	333c      	adds	r3, #60	; 0x3c
 801b3ec:	681a      	ldr	r2, [r3, #0]
 801b3ee:	78fb      	ldrb	r3, [r7, #3]
 801b3f0:	4619      	mov	r1, r3
 801b3f2:	f7fe fdf7 	bl	8019fe4 <USBD_LL_DataInStage>
}
 801b3f6:	bf00      	nop
 801b3f8:	3708      	adds	r7, #8
 801b3fa:	46bd      	mov	sp, r7
 801b3fc:	bd80      	pop	{r7, pc}

0801b3fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b3fe:	b580      	push	{r7, lr}
 801b400:	b082      	sub	sp, #8
 801b402:	af00      	add	r7, sp, #0
 801b404:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 801b40c:	4618      	mov	r0, r3
 801b40e:	f7fe ff07 	bl	801a220 <USBD_LL_SOF>
}
 801b412:	bf00      	nop
 801b414:	3708      	adds	r7, #8
 801b416:	46bd      	mov	sp, r7
 801b418:	bd80      	pop	{r7, pc}

0801b41a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b41a:	b580      	push	{r7, lr}
 801b41c:	b084      	sub	sp, #16
 801b41e:	af00      	add	r7, sp, #0
 801b420:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801b422:	2301      	movs	r3, #1
 801b424:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	689b      	ldr	r3, [r3, #8]
 801b42a:	2b02      	cmp	r3, #2
 801b42c:	d001      	beq.n	801b432 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801b42e:	f7f1 fa63 	bl	800c8f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 801b438:	7bfa      	ldrb	r2, [r7, #15]
 801b43a:	4611      	mov	r1, r2
 801b43c:	4618      	mov	r0, r3
 801b43e:	f7fe feb7 	bl	801a1b0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 801b448:	4618      	mov	r0, r3
 801b44a:	f7fe fe70 	bl	801a12e <USBD_LL_Reset>
}
 801b44e:	bf00      	nop
 801b450:	3710      	adds	r7, #16
 801b452:	46bd      	mov	sp, r7
 801b454:	bd80      	pop	{r7, pc}
	...

0801b458 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b458:	b580      	push	{r7, lr}
 801b45a:	b082      	sub	sp, #8
 801b45c:	af00      	add	r7, sp, #0
 801b45e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 801b466:	4618      	mov	r0, r3
 801b468:	f7fe feb1 	bl	801a1ce <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	699b      	ldr	r3, [r3, #24]
 801b470:	2b00      	cmp	r3, #0
 801b472:	d005      	beq.n	801b480 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801b474:	4b04      	ldr	r3, [pc, #16]	; (801b488 <HAL_PCD_SuspendCallback+0x30>)
 801b476:	691b      	ldr	r3, [r3, #16]
 801b478:	4a03      	ldr	r2, [pc, #12]	; (801b488 <HAL_PCD_SuspendCallback+0x30>)
 801b47a:	f043 0306 	orr.w	r3, r3, #6
 801b47e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801b480:	bf00      	nop
 801b482:	3708      	adds	r7, #8
 801b484:	46bd      	mov	sp, r7
 801b486:	bd80      	pop	{r7, pc}
 801b488:	e000ed00 	.word	0xe000ed00

0801b48c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b48c:	b580      	push	{r7, lr}
 801b48e:	b082      	sub	sp, #8
 801b490:	af00      	add	r7, sp, #0
 801b492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 801b49a:	4618      	mov	r0, r3
 801b49c:	f7fe feab 	bl	801a1f6 <USBD_LL_Resume>
}
 801b4a0:	bf00      	nop
 801b4a2:	3708      	adds	r7, #8
 801b4a4:	46bd      	mov	sp, r7
 801b4a6:	bd80      	pop	{r7, pc}

0801b4a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801b4a8:	b580      	push	{r7, lr}
 801b4aa:	b082      	sub	sp, #8
 801b4ac:	af00      	add	r7, sp, #0
 801b4ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801b4b0:	4a28      	ldr	r2, [pc, #160]	; (801b554 <USBD_LL_Init+0xac>)
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	4a26      	ldr	r2, [pc, #152]	; (801b554 <USBD_LL_Init+0xac>)
 801b4bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 801b4c0:	4b24      	ldr	r3, [pc, #144]	; (801b554 <USBD_LL_Init+0xac>)
 801b4c2:	4a25      	ldr	r2, [pc, #148]	; (801b558 <USBD_LL_Init+0xb0>)
 801b4c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801b4c6:	4b23      	ldr	r3, [pc, #140]	; (801b554 <USBD_LL_Init+0xac>)
 801b4c8:	2208      	movs	r2, #8
 801b4ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801b4cc:	4b21      	ldr	r3, [pc, #132]	; (801b554 <USBD_LL_Init+0xac>)
 801b4ce:	2202      	movs	r2, #2
 801b4d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801b4d2:	4b20      	ldr	r3, [pc, #128]	; (801b554 <USBD_LL_Init+0xac>)
 801b4d4:	2200      	movs	r2, #0
 801b4d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801b4d8:	4b1e      	ldr	r3, [pc, #120]	; (801b554 <USBD_LL_Init+0xac>)
 801b4da:	2200      	movs	r2, #0
 801b4dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801b4de:	4b1d      	ldr	r3, [pc, #116]	; (801b554 <USBD_LL_Init+0xac>)
 801b4e0:	2200      	movs	r2, #0
 801b4e2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801b4e4:	481b      	ldr	r0, [pc, #108]	; (801b554 <USBD_LL_Init+0xac>)
 801b4e6:	f7f8 f9d5 	bl	8013894 <HAL_PCD_Init>
 801b4ea:	4603      	mov	r3, r0
 801b4ec:	2b00      	cmp	r3, #0
 801b4ee:	d001      	beq.n	801b4f4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 801b4f0:	f7f1 fa02 	bl	800c8f8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801b4fa:	2318      	movs	r3, #24
 801b4fc:	2200      	movs	r2, #0
 801b4fe:	2100      	movs	r1, #0
 801b500:	f7f9 ff3d 	bl	801537e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801b50a:	2358      	movs	r3, #88	; 0x58
 801b50c:	2200      	movs	r2, #0
 801b50e:	2180      	movs	r1, #128	; 0x80
 801b510:	f7f9 ff35 	bl	801537e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801b514:	687b      	ldr	r3, [r7, #4]
 801b516:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801b51a:	23c0      	movs	r3, #192	; 0xc0
 801b51c:	2200      	movs	r2, #0
 801b51e:	2181      	movs	r1, #129	; 0x81
 801b520:	f7f9 ff2d 	bl	801537e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801b52a:	f44f 7388 	mov.w	r3, #272	; 0x110
 801b52e:	2200      	movs	r2, #0
 801b530:	2101      	movs	r1, #1
 801b532:	f7f9 ff24 	bl	801537e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801b53c:	f44f 7380 	mov.w	r3, #256	; 0x100
 801b540:	2200      	movs	r2, #0
 801b542:	2182      	movs	r1, #130	; 0x82
 801b544:	f7f9 ff1b 	bl	801537e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801b548:	2300      	movs	r3, #0
}
 801b54a:	4618      	mov	r0, r3
 801b54c:	3708      	adds	r7, #8
 801b54e:	46bd      	mov	sp, r7
 801b550:	bd80      	pop	{r7, pc}
 801b552:	bf00      	nop
 801b554:	2000358c 	.word	0x2000358c
 801b558:	40005c00 	.word	0x40005c00

0801b55c <USBD_LL_DeInit>:
  * @brief  De-Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_DeInit(USBD_HandleTypeDef *pdev)
{
 801b55c:	b580      	push	{r7, lr}
 801b55e:	b084      	sub	sp, #16
 801b560:	af00      	add	r7, sp, #0
 801b562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b564:	2300      	movs	r3, #0
 801b566:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b568:	2300      	movs	r3, #0
 801b56a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_DeInit(pdev->pData);
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801b572:	4618      	mov	r0, r3
 801b574:	f7f8 fa8d 	bl	8013a92 <HAL_PCD_DeInit>
 801b578:	4603      	mov	r3, r0
 801b57a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b57c:	7bfb      	ldrb	r3, [r7, #15]
 801b57e:	4618      	mov	r0, r3
 801b580:	f000 f984 	bl	801b88c <USBD_Get_USB_Status>
 801b584:	4603      	mov	r3, r0
 801b586:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b588:	7bbb      	ldrb	r3, [r7, #14]
}
 801b58a:	4618      	mov	r0, r3
 801b58c:	3710      	adds	r7, #16
 801b58e:	46bd      	mov	sp, r7
 801b590:	bd80      	pop	{r7, pc}

0801b592 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801b592:	b580      	push	{r7, lr}
 801b594:	b084      	sub	sp, #16
 801b596:	af00      	add	r7, sp, #0
 801b598:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b59a:	2300      	movs	r3, #0
 801b59c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b59e:	2300      	movs	r3, #0
 801b5a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801b5a2:	687b      	ldr	r3, [r7, #4]
 801b5a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801b5a8:	4618      	mov	r0, r3
 801b5aa:	f7f8 fa95 	bl	8013ad8 <HAL_PCD_Start>
 801b5ae:	4603      	mov	r3, r0
 801b5b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b5b2:	7bfb      	ldrb	r3, [r7, #15]
 801b5b4:	4618      	mov	r0, r3
 801b5b6:	f000 f969 	bl	801b88c <USBD_Get_USB_Status>
 801b5ba:	4603      	mov	r3, r0
 801b5bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b5be:	7bbb      	ldrb	r3, [r7, #14]
}
 801b5c0:	4618      	mov	r0, r3
 801b5c2:	3710      	adds	r7, #16
 801b5c4:	46bd      	mov	sp, r7
 801b5c6:	bd80      	pop	{r7, pc}

0801b5c8 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 801b5c8:	b580      	push	{r7, lr}
 801b5ca:	b084      	sub	sp, #16
 801b5cc:	af00      	add	r7, sp, #0
 801b5ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b5d0:	2300      	movs	r3, #0
 801b5d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b5d4:	2300      	movs	r3, #0
 801b5d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801b5de:	4618      	mov	r0, r3
 801b5e0:	f7f8 faa0 	bl	8013b24 <HAL_PCD_Stop>
 801b5e4:	4603      	mov	r3, r0
 801b5e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b5e8:	7bfb      	ldrb	r3, [r7, #15]
 801b5ea:	4618      	mov	r0, r3
 801b5ec:	f000 f94e 	bl	801b88c <USBD_Get_USB_Status>
 801b5f0:	4603      	mov	r3, r0
 801b5f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b5f4:	7bbb      	ldrb	r3, [r7, #14]
}
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	3710      	adds	r7, #16
 801b5fa:	46bd      	mov	sp, r7
 801b5fc:	bd80      	pop	{r7, pc}

0801b5fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801b5fe:	b580      	push	{r7, lr}
 801b600:	b084      	sub	sp, #16
 801b602:	af00      	add	r7, sp, #0
 801b604:	6078      	str	r0, [r7, #4]
 801b606:	4608      	mov	r0, r1
 801b608:	4611      	mov	r1, r2
 801b60a:	461a      	mov	r2, r3
 801b60c:	4603      	mov	r3, r0
 801b60e:	70fb      	strb	r3, [r7, #3]
 801b610:	460b      	mov	r3, r1
 801b612:	70bb      	strb	r3, [r7, #2]
 801b614:	4613      	mov	r3, r2
 801b616:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b618:	2300      	movs	r3, #0
 801b61a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b61c:	2300      	movs	r3, #0
 801b61e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801b626:	78bb      	ldrb	r3, [r7, #2]
 801b628:	883a      	ldrh	r2, [r7, #0]
 801b62a:	78f9      	ldrb	r1, [r7, #3]
 801b62c:	f7f8 fbf5 	bl	8013e1a <HAL_PCD_EP_Open>
 801b630:	4603      	mov	r3, r0
 801b632:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b634:	7bfb      	ldrb	r3, [r7, #15]
 801b636:	4618      	mov	r0, r3
 801b638:	f000 f928 	bl	801b88c <USBD_Get_USB_Status>
 801b63c:	4603      	mov	r3, r0
 801b63e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b640:	7bbb      	ldrb	r3, [r7, #14]
}
 801b642:	4618      	mov	r0, r3
 801b644:	3710      	adds	r7, #16
 801b646:	46bd      	mov	sp, r7
 801b648:	bd80      	pop	{r7, pc}

0801b64a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b64a:	b580      	push	{r7, lr}
 801b64c:	b084      	sub	sp, #16
 801b64e:	af00      	add	r7, sp, #0
 801b650:	6078      	str	r0, [r7, #4]
 801b652:	460b      	mov	r3, r1
 801b654:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b656:	2300      	movs	r3, #0
 801b658:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b65a:	2300      	movs	r3, #0
 801b65c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801b65e:	687b      	ldr	r3, [r7, #4]
 801b660:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801b664:	78fa      	ldrb	r2, [r7, #3]
 801b666:	4611      	mov	r1, r2
 801b668:	4618      	mov	r0, r3
 801b66a:	f7f8 fc33 	bl	8013ed4 <HAL_PCD_EP_Close>
 801b66e:	4603      	mov	r3, r0
 801b670:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b672:	7bfb      	ldrb	r3, [r7, #15]
 801b674:	4618      	mov	r0, r3
 801b676:	f000 f909 	bl	801b88c <USBD_Get_USB_Status>
 801b67a:	4603      	mov	r3, r0
 801b67c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b67e:	7bbb      	ldrb	r3, [r7, #14]
}
 801b680:	4618      	mov	r0, r3
 801b682:	3710      	adds	r7, #16
 801b684:	46bd      	mov	sp, r7
 801b686:	bd80      	pop	{r7, pc}

0801b688 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b688:	b580      	push	{r7, lr}
 801b68a:	b084      	sub	sp, #16
 801b68c:	af00      	add	r7, sp, #0
 801b68e:	6078      	str	r0, [r7, #4]
 801b690:	460b      	mov	r3, r1
 801b692:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b694:	2300      	movs	r3, #0
 801b696:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b698:	2300      	movs	r3, #0
 801b69a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801b69c:	687b      	ldr	r3, [r7, #4]
 801b69e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801b6a2:	78fa      	ldrb	r2, [r7, #3]
 801b6a4:	4611      	mov	r1, r2
 801b6a6:	4618      	mov	r0, r3
 801b6a8:	f7f8 fcdb 	bl	8014062 <HAL_PCD_EP_SetStall>
 801b6ac:	4603      	mov	r3, r0
 801b6ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b6b0:	7bfb      	ldrb	r3, [r7, #15]
 801b6b2:	4618      	mov	r0, r3
 801b6b4:	f000 f8ea 	bl	801b88c <USBD_Get_USB_Status>
 801b6b8:	4603      	mov	r3, r0
 801b6ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b6bc:	7bbb      	ldrb	r3, [r7, #14]
}
 801b6be:	4618      	mov	r0, r3
 801b6c0:	3710      	adds	r7, #16
 801b6c2:	46bd      	mov	sp, r7
 801b6c4:	bd80      	pop	{r7, pc}

0801b6c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b6c6:	b580      	push	{r7, lr}
 801b6c8:	b084      	sub	sp, #16
 801b6ca:	af00      	add	r7, sp, #0
 801b6cc:	6078      	str	r0, [r7, #4]
 801b6ce:	460b      	mov	r3, r1
 801b6d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b6d2:	2300      	movs	r3, #0
 801b6d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b6d6:	2300      	movs	r3, #0
 801b6d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801b6e0:	78fa      	ldrb	r2, [r7, #3]
 801b6e2:	4611      	mov	r1, r2
 801b6e4:	4618      	mov	r0, r3
 801b6e6:	f7f8 fd1c 	bl	8014122 <HAL_PCD_EP_ClrStall>
 801b6ea:	4603      	mov	r3, r0
 801b6ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b6ee:	7bfb      	ldrb	r3, [r7, #15]
 801b6f0:	4618      	mov	r0, r3
 801b6f2:	f000 f8cb 	bl	801b88c <USBD_Get_USB_Status>
 801b6f6:	4603      	mov	r3, r0
 801b6f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b6fa:	7bbb      	ldrb	r3, [r7, #14]
}
 801b6fc:	4618      	mov	r0, r3
 801b6fe:	3710      	adds	r7, #16
 801b700:	46bd      	mov	sp, r7
 801b702:	bd80      	pop	{r7, pc}

0801b704 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b704:	b480      	push	{r7}
 801b706:	b085      	sub	sp, #20
 801b708:	af00      	add	r7, sp, #0
 801b70a:	6078      	str	r0, [r7, #4]
 801b70c:	460b      	mov	r3, r1
 801b70e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801b716:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801b718:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	da0c      	bge.n	801b73a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801b720:	78fb      	ldrb	r3, [r7, #3]
 801b722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b726:	68f9      	ldr	r1, [r7, #12]
 801b728:	1c5a      	adds	r2, r3, #1
 801b72a:	4613      	mov	r3, r2
 801b72c:	009b      	lsls	r3, r3, #2
 801b72e:	4413      	add	r3, r2
 801b730:	00db      	lsls	r3, r3, #3
 801b732:	440b      	add	r3, r1
 801b734:	3302      	adds	r3, #2
 801b736:	781b      	ldrb	r3, [r3, #0]
 801b738:	e00b      	b.n	801b752 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801b73a:	78fb      	ldrb	r3, [r7, #3]
 801b73c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b740:	68f9      	ldr	r1, [r7, #12]
 801b742:	4613      	mov	r3, r2
 801b744:	009b      	lsls	r3, r3, #2
 801b746:	4413      	add	r3, r2
 801b748:	00db      	lsls	r3, r3, #3
 801b74a:	440b      	add	r3, r1
 801b74c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 801b750:	781b      	ldrb	r3, [r3, #0]
  }
}
 801b752:	4618      	mov	r0, r3
 801b754:	3714      	adds	r7, #20
 801b756:	46bd      	mov	sp, r7
 801b758:	bc80      	pop	{r7}
 801b75a:	4770      	bx	lr

0801b75c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801b75c:	b580      	push	{r7, lr}
 801b75e:	b084      	sub	sp, #16
 801b760:	af00      	add	r7, sp, #0
 801b762:	6078      	str	r0, [r7, #4]
 801b764:	460b      	mov	r3, r1
 801b766:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b768:	2300      	movs	r3, #0
 801b76a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b76c:	2300      	movs	r3, #0
 801b76e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801b770:	687b      	ldr	r3, [r7, #4]
 801b772:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801b776:	78fa      	ldrb	r2, [r7, #3]
 801b778:	4611      	mov	r1, r2
 801b77a:	4618      	mov	r0, r3
 801b77c:	f7f8 fb28 	bl	8013dd0 <HAL_PCD_SetAddress>
 801b780:	4603      	mov	r3, r0
 801b782:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b784:	7bfb      	ldrb	r3, [r7, #15]
 801b786:	4618      	mov	r0, r3
 801b788:	f000 f880 	bl	801b88c <USBD_Get_USB_Status>
 801b78c:	4603      	mov	r3, r0
 801b78e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801b790:	7bbb      	ldrb	r3, [r7, #14]
}
 801b792:	4618      	mov	r0, r3
 801b794:	3710      	adds	r7, #16
 801b796:	46bd      	mov	sp, r7
 801b798:	bd80      	pop	{r7, pc}

0801b79a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801b79a:	b580      	push	{r7, lr}
 801b79c:	b086      	sub	sp, #24
 801b79e:	af00      	add	r7, sp, #0
 801b7a0:	60f8      	str	r0, [r7, #12]
 801b7a2:	607a      	str	r2, [r7, #4]
 801b7a4:	461a      	mov	r2, r3
 801b7a6:	460b      	mov	r3, r1
 801b7a8:	72fb      	strb	r3, [r7, #11]
 801b7aa:	4613      	mov	r3, r2
 801b7ac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b7ae:	2300      	movs	r3, #0
 801b7b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b7b2:	2300      	movs	r3, #0
 801b7b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801b7b6:	68fb      	ldr	r3, [r7, #12]
 801b7b8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801b7bc:	893b      	ldrh	r3, [r7, #8]
 801b7be:	7af9      	ldrb	r1, [r7, #11]
 801b7c0:	687a      	ldr	r2, [r7, #4]
 801b7c2:	f7f8 fc17 	bl	8013ff4 <HAL_PCD_EP_Transmit>
 801b7c6:	4603      	mov	r3, r0
 801b7c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b7ca:	7dfb      	ldrb	r3, [r7, #23]
 801b7cc:	4618      	mov	r0, r3
 801b7ce:	f000 f85d 	bl	801b88c <USBD_Get_USB_Status>
 801b7d2:	4603      	mov	r3, r0
 801b7d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b7d6:	7dbb      	ldrb	r3, [r7, #22]
}
 801b7d8:	4618      	mov	r0, r3
 801b7da:	3718      	adds	r7, #24
 801b7dc:	46bd      	mov	sp, r7
 801b7de:	bd80      	pop	{r7, pc}

0801b7e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801b7e0:	b580      	push	{r7, lr}
 801b7e2:	b086      	sub	sp, #24
 801b7e4:	af00      	add	r7, sp, #0
 801b7e6:	60f8      	str	r0, [r7, #12]
 801b7e8:	607a      	str	r2, [r7, #4]
 801b7ea:	461a      	mov	r2, r3
 801b7ec:	460b      	mov	r3, r1
 801b7ee:	72fb      	strb	r3, [r7, #11]
 801b7f0:	4613      	mov	r3, r2
 801b7f2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b7f4:	2300      	movs	r3, #0
 801b7f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b7f8:	2300      	movs	r3, #0
 801b7fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801b7fc:	68fb      	ldr	r3, [r7, #12]
 801b7fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801b802:	893b      	ldrh	r3, [r7, #8]
 801b804:	7af9      	ldrb	r1, [r7, #11]
 801b806:	687a      	ldr	r2, [r7, #4]
 801b808:	f7f8 fbac 	bl	8013f64 <HAL_PCD_EP_Receive>
 801b80c:	4603      	mov	r3, r0
 801b80e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b810:	7dfb      	ldrb	r3, [r7, #23]
 801b812:	4618      	mov	r0, r3
 801b814:	f000 f83a 	bl	801b88c <USBD_Get_USB_Status>
 801b818:	4603      	mov	r3, r0
 801b81a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801b81c:	7dbb      	ldrb	r3, [r7, #22]
}
 801b81e:	4618      	mov	r0, r3
 801b820:	3718      	adds	r7, #24
 801b822:	46bd      	mov	sp, r7
 801b824:	bd80      	pop	{r7, pc}

0801b826 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b826:	b580      	push	{r7, lr}
 801b828:	b082      	sub	sp, #8
 801b82a:	af00      	add	r7, sp, #0
 801b82c:	6078      	str	r0, [r7, #4]
 801b82e:	460b      	mov	r3, r1
 801b830:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801b838:	78fa      	ldrb	r2, [r7, #3]
 801b83a:	4611      	mov	r1, r2
 801b83c:	4618      	mov	r0, r3
 801b83e:	f7f8 fbc2 	bl	8013fc6 <HAL_PCD_EP_GetRxCount>
 801b842:	4603      	mov	r3, r0
}
 801b844:	4618      	mov	r0, r3
 801b846:	3708      	adds	r7, #8
 801b848:	46bd      	mov	sp, r7
 801b84a:	bd80      	pop	{r7, pc}

0801b84c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801b84c:	b480      	push	{r7}
 801b84e:	b083      	sub	sp, #12
 801b850:	af00      	add	r7, sp, #0
 801b852:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801b854:	4b02      	ldr	r3, [pc, #8]	; (801b860 <USBD_static_malloc+0x14>)
}
 801b856:	4618      	mov	r0, r3
 801b858:	370c      	adds	r7, #12
 801b85a:	46bd      	mov	sp, r7
 801b85c:	bc80      	pop	{r7}
 801b85e:	4770      	bx	lr
 801b860:	2000387c 	.word	0x2000387c

0801b864 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801b864:	b480      	push	{r7}
 801b866:	b083      	sub	sp, #12
 801b868:	af00      	add	r7, sp, #0
 801b86a:	6078      	str	r0, [r7, #4]

}
 801b86c:	bf00      	nop
 801b86e:	370c      	adds	r7, #12
 801b870:	46bd      	mov	sp, r7
 801b872:	bc80      	pop	{r7}
 801b874:	4770      	bx	lr

0801b876 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b876:	b480      	push	{r7}
 801b878:	b083      	sub	sp, #12
 801b87a:	af00      	add	r7, sp, #0
 801b87c:	6078      	str	r0, [r7, #4]
 801b87e:	460b      	mov	r3, r1
 801b880:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 801b882:	bf00      	nop
 801b884:	370c      	adds	r7, #12
 801b886:	46bd      	mov	sp, r7
 801b888:	bc80      	pop	{r7}
 801b88a:	4770      	bx	lr

0801b88c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801b88c:	b480      	push	{r7}
 801b88e:	b085      	sub	sp, #20
 801b890:	af00      	add	r7, sp, #0
 801b892:	4603      	mov	r3, r0
 801b894:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b896:	2300      	movs	r3, #0
 801b898:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801b89a:	79fb      	ldrb	r3, [r7, #7]
 801b89c:	2b03      	cmp	r3, #3
 801b89e:	d817      	bhi.n	801b8d0 <USBD_Get_USB_Status+0x44>
 801b8a0:	a201      	add	r2, pc, #4	; (adr r2, 801b8a8 <USBD_Get_USB_Status+0x1c>)
 801b8a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b8a6:	bf00      	nop
 801b8a8:	0801b8b9 	.word	0x0801b8b9
 801b8ac:	0801b8bf 	.word	0x0801b8bf
 801b8b0:	0801b8c5 	.word	0x0801b8c5
 801b8b4:	0801b8cb 	.word	0x0801b8cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801b8b8:	2300      	movs	r3, #0
 801b8ba:	73fb      	strb	r3, [r7, #15]
    break;
 801b8bc:	e00b      	b.n	801b8d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801b8be:	2302      	movs	r3, #2
 801b8c0:	73fb      	strb	r3, [r7, #15]
    break;
 801b8c2:	e008      	b.n	801b8d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801b8c4:	2301      	movs	r3, #1
 801b8c6:	73fb      	strb	r3, [r7, #15]
    break;
 801b8c8:	e005      	b.n	801b8d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801b8ca:	2302      	movs	r3, #2
 801b8cc:	73fb      	strb	r3, [r7, #15]
    break;
 801b8ce:	e002      	b.n	801b8d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801b8d0:	2302      	movs	r3, #2
 801b8d2:	73fb      	strb	r3, [r7, #15]
    break;
 801b8d4:	bf00      	nop
  }
  return usb_status;
 801b8d6:	7bfb      	ldrb	r3, [r7, #15]
}
 801b8d8:	4618      	mov	r0, r3
 801b8da:	3714      	adds	r7, #20
 801b8dc:	46bd      	mov	sp, r7
 801b8de:	bc80      	pop	{r7}
 801b8e0:	4770      	bx	lr
 801b8e2:	bf00      	nop

0801b8e4 <atoi>:
 801b8e4:	220a      	movs	r2, #10
 801b8e6:	2100      	movs	r1, #0
 801b8e8:	f000 b87e 	b.w	801b9e8 <strtol>

0801b8ec <_strtol_l.constprop.0>:
 801b8ec:	2b01      	cmp	r3, #1
 801b8ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b8f2:	4686      	mov	lr, r0
 801b8f4:	4690      	mov	r8, r2
 801b8f6:	d001      	beq.n	801b8fc <_strtol_l.constprop.0+0x10>
 801b8f8:	2b24      	cmp	r3, #36	; 0x24
 801b8fa:	d906      	bls.n	801b90a <_strtol_l.constprop.0+0x1e>
 801b8fc:	f000 fe9e 	bl	801c63c <__errno>
 801b900:	2316      	movs	r3, #22
 801b902:	6003      	str	r3, [r0, #0]
 801b904:	2000      	movs	r0, #0
 801b906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b90a:	460d      	mov	r5, r1
 801b90c:	4835      	ldr	r0, [pc, #212]	; (801b9e4 <_strtol_l.constprop.0+0xf8>)
 801b90e:	462a      	mov	r2, r5
 801b910:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b914:	5d06      	ldrb	r6, [r0, r4]
 801b916:	f016 0608 	ands.w	r6, r6, #8
 801b91a:	d1f8      	bne.n	801b90e <_strtol_l.constprop.0+0x22>
 801b91c:	2c2d      	cmp	r4, #45	; 0x2d
 801b91e:	d12e      	bne.n	801b97e <_strtol_l.constprop.0+0x92>
 801b920:	2601      	movs	r6, #1
 801b922:	782c      	ldrb	r4, [r5, #0]
 801b924:	1c95      	adds	r5, r2, #2
 801b926:	2b00      	cmp	r3, #0
 801b928:	d057      	beq.n	801b9da <_strtol_l.constprop.0+0xee>
 801b92a:	2b10      	cmp	r3, #16
 801b92c:	d109      	bne.n	801b942 <_strtol_l.constprop.0+0x56>
 801b92e:	2c30      	cmp	r4, #48	; 0x30
 801b930:	d107      	bne.n	801b942 <_strtol_l.constprop.0+0x56>
 801b932:	782a      	ldrb	r2, [r5, #0]
 801b934:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801b938:	2a58      	cmp	r2, #88	; 0x58
 801b93a:	d149      	bne.n	801b9d0 <_strtol_l.constprop.0+0xe4>
 801b93c:	2310      	movs	r3, #16
 801b93e:	786c      	ldrb	r4, [r5, #1]
 801b940:	3502      	adds	r5, #2
 801b942:	2200      	movs	r2, #0
 801b944:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 801b948:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b94c:	fbbc f9f3 	udiv	r9, ip, r3
 801b950:	4610      	mov	r0, r2
 801b952:	fb03 ca19 	mls	sl, r3, r9, ip
 801b956:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801b95a:	2f09      	cmp	r7, #9
 801b95c:	d814      	bhi.n	801b988 <_strtol_l.constprop.0+0x9c>
 801b95e:	463c      	mov	r4, r7
 801b960:	42a3      	cmp	r3, r4
 801b962:	dd20      	ble.n	801b9a6 <_strtol_l.constprop.0+0xba>
 801b964:	1c57      	adds	r7, r2, #1
 801b966:	d007      	beq.n	801b978 <_strtol_l.constprop.0+0x8c>
 801b968:	4581      	cmp	r9, r0
 801b96a:	d319      	bcc.n	801b9a0 <_strtol_l.constprop.0+0xb4>
 801b96c:	d101      	bne.n	801b972 <_strtol_l.constprop.0+0x86>
 801b96e:	45a2      	cmp	sl, r4
 801b970:	db16      	blt.n	801b9a0 <_strtol_l.constprop.0+0xb4>
 801b972:	2201      	movs	r2, #1
 801b974:	fb00 4003 	mla	r0, r0, r3, r4
 801b978:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b97c:	e7eb      	b.n	801b956 <_strtol_l.constprop.0+0x6a>
 801b97e:	2c2b      	cmp	r4, #43	; 0x2b
 801b980:	bf04      	itt	eq
 801b982:	782c      	ldrbeq	r4, [r5, #0]
 801b984:	1c95      	addeq	r5, r2, #2
 801b986:	e7ce      	b.n	801b926 <_strtol_l.constprop.0+0x3a>
 801b988:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801b98c:	2f19      	cmp	r7, #25
 801b98e:	d801      	bhi.n	801b994 <_strtol_l.constprop.0+0xa8>
 801b990:	3c37      	subs	r4, #55	; 0x37
 801b992:	e7e5      	b.n	801b960 <_strtol_l.constprop.0+0x74>
 801b994:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801b998:	2f19      	cmp	r7, #25
 801b99a:	d804      	bhi.n	801b9a6 <_strtol_l.constprop.0+0xba>
 801b99c:	3c57      	subs	r4, #87	; 0x57
 801b99e:	e7df      	b.n	801b960 <_strtol_l.constprop.0+0x74>
 801b9a0:	f04f 32ff 	mov.w	r2, #4294967295
 801b9a4:	e7e8      	b.n	801b978 <_strtol_l.constprop.0+0x8c>
 801b9a6:	1c53      	adds	r3, r2, #1
 801b9a8:	d108      	bne.n	801b9bc <_strtol_l.constprop.0+0xd0>
 801b9aa:	2322      	movs	r3, #34	; 0x22
 801b9ac:	4660      	mov	r0, ip
 801b9ae:	f8ce 3000 	str.w	r3, [lr]
 801b9b2:	f1b8 0f00 	cmp.w	r8, #0
 801b9b6:	d0a6      	beq.n	801b906 <_strtol_l.constprop.0+0x1a>
 801b9b8:	1e69      	subs	r1, r5, #1
 801b9ba:	e006      	b.n	801b9ca <_strtol_l.constprop.0+0xde>
 801b9bc:	b106      	cbz	r6, 801b9c0 <_strtol_l.constprop.0+0xd4>
 801b9be:	4240      	negs	r0, r0
 801b9c0:	f1b8 0f00 	cmp.w	r8, #0
 801b9c4:	d09f      	beq.n	801b906 <_strtol_l.constprop.0+0x1a>
 801b9c6:	2a00      	cmp	r2, #0
 801b9c8:	d1f6      	bne.n	801b9b8 <_strtol_l.constprop.0+0xcc>
 801b9ca:	f8c8 1000 	str.w	r1, [r8]
 801b9ce:	e79a      	b.n	801b906 <_strtol_l.constprop.0+0x1a>
 801b9d0:	2430      	movs	r4, #48	; 0x30
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	d1b5      	bne.n	801b942 <_strtol_l.constprop.0+0x56>
 801b9d6:	2308      	movs	r3, #8
 801b9d8:	e7b3      	b.n	801b942 <_strtol_l.constprop.0+0x56>
 801b9da:	2c30      	cmp	r4, #48	; 0x30
 801b9dc:	d0a9      	beq.n	801b932 <_strtol_l.constprop.0+0x46>
 801b9de:	230a      	movs	r3, #10
 801b9e0:	e7af      	b.n	801b942 <_strtol_l.constprop.0+0x56>
 801b9e2:	bf00      	nop
 801b9e4:	0801ec03 	.word	0x0801ec03

0801b9e8 <strtol>:
 801b9e8:	4613      	mov	r3, r2
 801b9ea:	460a      	mov	r2, r1
 801b9ec:	4601      	mov	r1, r0
 801b9ee:	4802      	ldr	r0, [pc, #8]	; (801b9f8 <strtol+0x10>)
 801b9f0:	6800      	ldr	r0, [r0, #0]
 801b9f2:	f7ff bf7b 	b.w	801b8ec <_strtol_l.constprop.0>
 801b9f6:	bf00      	nop
 801b9f8:	20000874 	.word	0x20000874

0801b9fc <__cvt>:
 801b9fc:	2b00      	cmp	r3, #0
 801b9fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ba02:	461f      	mov	r7, r3
 801ba04:	bfbb      	ittet	lt
 801ba06:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 801ba0a:	461f      	movlt	r7, r3
 801ba0c:	2300      	movge	r3, #0
 801ba0e:	232d      	movlt	r3, #45	; 0x2d
 801ba10:	b088      	sub	sp, #32
 801ba12:	4614      	mov	r4, r2
 801ba14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ba16:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801ba18:	7013      	strb	r3, [r2, #0]
 801ba1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ba1c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 801ba20:	f023 0820 	bic.w	r8, r3, #32
 801ba24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801ba28:	d005      	beq.n	801ba36 <__cvt+0x3a>
 801ba2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801ba2e:	d100      	bne.n	801ba32 <__cvt+0x36>
 801ba30:	3501      	adds	r5, #1
 801ba32:	2302      	movs	r3, #2
 801ba34:	e000      	b.n	801ba38 <__cvt+0x3c>
 801ba36:	2303      	movs	r3, #3
 801ba38:	aa07      	add	r2, sp, #28
 801ba3a:	9204      	str	r2, [sp, #16]
 801ba3c:	aa06      	add	r2, sp, #24
 801ba3e:	e9cd a202 	strd	sl, r2, [sp, #8]
 801ba42:	e9cd 3500 	strd	r3, r5, [sp]
 801ba46:	4622      	mov	r2, r4
 801ba48:	463b      	mov	r3, r7
 801ba4a:	f000 fed9 	bl	801c800 <_dtoa_r>
 801ba4e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801ba52:	4606      	mov	r6, r0
 801ba54:	d102      	bne.n	801ba5c <__cvt+0x60>
 801ba56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ba58:	07db      	lsls	r3, r3, #31
 801ba5a:	d522      	bpl.n	801baa2 <__cvt+0xa6>
 801ba5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801ba60:	eb06 0905 	add.w	r9, r6, r5
 801ba64:	d110      	bne.n	801ba88 <__cvt+0x8c>
 801ba66:	7833      	ldrb	r3, [r6, #0]
 801ba68:	2b30      	cmp	r3, #48	; 0x30
 801ba6a:	d10a      	bne.n	801ba82 <__cvt+0x86>
 801ba6c:	2200      	movs	r2, #0
 801ba6e:	2300      	movs	r3, #0
 801ba70:	4620      	mov	r0, r4
 801ba72:	4639      	mov	r1, r7
 801ba74:	f7ed f804 	bl	8008a80 <__aeabi_dcmpeq>
 801ba78:	b918      	cbnz	r0, 801ba82 <__cvt+0x86>
 801ba7a:	f1c5 0501 	rsb	r5, r5, #1
 801ba7e:	f8ca 5000 	str.w	r5, [sl]
 801ba82:	f8da 3000 	ldr.w	r3, [sl]
 801ba86:	4499      	add	r9, r3
 801ba88:	2200      	movs	r2, #0
 801ba8a:	2300      	movs	r3, #0
 801ba8c:	4620      	mov	r0, r4
 801ba8e:	4639      	mov	r1, r7
 801ba90:	f7ec fff6 	bl	8008a80 <__aeabi_dcmpeq>
 801ba94:	b108      	cbz	r0, 801ba9a <__cvt+0x9e>
 801ba96:	f8cd 901c 	str.w	r9, [sp, #28]
 801ba9a:	2230      	movs	r2, #48	; 0x30
 801ba9c:	9b07      	ldr	r3, [sp, #28]
 801ba9e:	454b      	cmp	r3, r9
 801baa0:	d307      	bcc.n	801bab2 <__cvt+0xb6>
 801baa2:	4630      	mov	r0, r6
 801baa4:	9b07      	ldr	r3, [sp, #28]
 801baa6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801baa8:	1b9b      	subs	r3, r3, r6
 801baaa:	6013      	str	r3, [r2, #0]
 801baac:	b008      	add	sp, #32
 801baae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bab2:	1c59      	adds	r1, r3, #1
 801bab4:	9107      	str	r1, [sp, #28]
 801bab6:	701a      	strb	r2, [r3, #0]
 801bab8:	e7f0      	b.n	801ba9c <__cvt+0xa0>

0801baba <__exponent>:
 801baba:	4603      	mov	r3, r0
 801babc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801babe:	2900      	cmp	r1, #0
 801bac0:	f803 2b02 	strb.w	r2, [r3], #2
 801bac4:	bfb6      	itet	lt
 801bac6:	222d      	movlt	r2, #45	; 0x2d
 801bac8:	222b      	movge	r2, #43	; 0x2b
 801baca:	4249      	neglt	r1, r1
 801bacc:	2909      	cmp	r1, #9
 801bace:	7042      	strb	r2, [r0, #1]
 801bad0:	dd2a      	ble.n	801bb28 <__exponent+0x6e>
 801bad2:	f10d 0207 	add.w	r2, sp, #7
 801bad6:	4617      	mov	r7, r2
 801bad8:	260a      	movs	r6, #10
 801bada:	fb91 f5f6 	sdiv	r5, r1, r6
 801bade:	4694      	mov	ip, r2
 801bae0:	fb06 1415 	mls	r4, r6, r5, r1
 801bae4:	3430      	adds	r4, #48	; 0x30
 801bae6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801baea:	460c      	mov	r4, r1
 801baec:	2c63      	cmp	r4, #99	; 0x63
 801baee:	4629      	mov	r1, r5
 801baf0:	f102 32ff 	add.w	r2, r2, #4294967295
 801baf4:	dcf1      	bgt.n	801bada <__exponent+0x20>
 801baf6:	3130      	adds	r1, #48	; 0x30
 801baf8:	f1ac 0402 	sub.w	r4, ip, #2
 801bafc:	f802 1c01 	strb.w	r1, [r2, #-1]
 801bb00:	4622      	mov	r2, r4
 801bb02:	1c41      	adds	r1, r0, #1
 801bb04:	42ba      	cmp	r2, r7
 801bb06:	d30a      	bcc.n	801bb1e <__exponent+0x64>
 801bb08:	f10d 0209 	add.w	r2, sp, #9
 801bb0c:	eba2 020c 	sub.w	r2, r2, ip
 801bb10:	42bc      	cmp	r4, r7
 801bb12:	bf88      	it	hi
 801bb14:	2200      	movhi	r2, #0
 801bb16:	4413      	add	r3, r2
 801bb18:	1a18      	subs	r0, r3, r0
 801bb1a:	b003      	add	sp, #12
 801bb1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb1e:	f812 5b01 	ldrb.w	r5, [r2], #1
 801bb22:	f801 5f01 	strb.w	r5, [r1, #1]!
 801bb26:	e7ed      	b.n	801bb04 <__exponent+0x4a>
 801bb28:	2330      	movs	r3, #48	; 0x30
 801bb2a:	3130      	adds	r1, #48	; 0x30
 801bb2c:	7083      	strb	r3, [r0, #2]
 801bb2e:	70c1      	strb	r1, [r0, #3]
 801bb30:	1d03      	adds	r3, r0, #4
 801bb32:	e7f1      	b.n	801bb18 <__exponent+0x5e>

0801bb34 <_printf_float>:
 801bb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb38:	b091      	sub	sp, #68	; 0x44
 801bb3a:	460c      	mov	r4, r1
 801bb3c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 801bb40:	4616      	mov	r6, r2
 801bb42:	461f      	mov	r7, r3
 801bb44:	4605      	mov	r5, r0
 801bb46:	f000 fd2f 	bl	801c5a8 <_localeconv_r>
 801bb4a:	6803      	ldr	r3, [r0, #0]
 801bb4c:	4618      	mov	r0, r3
 801bb4e:	9309      	str	r3, [sp, #36]	; 0x24
 801bb50:	f7ec fb6a 	bl	8008228 <strlen>
 801bb54:	2300      	movs	r3, #0
 801bb56:	930e      	str	r3, [sp, #56]	; 0x38
 801bb58:	f8d8 3000 	ldr.w	r3, [r8]
 801bb5c:	900a      	str	r0, [sp, #40]	; 0x28
 801bb5e:	3307      	adds	r3, #7
 801bb60:	f023 0307 	bic.w	r3, r3, #7
 801bb64:	f103 0208 	add.w	r2, r3, #8
 801bb68:	f894 9018 	ldrb.w	r9, [r4, #24]
 801bb6c:	f8d4 b000 	ldr.w	fp, [r4]
 801bb70:	f8c8 2000 	str.w	r2, [r8]
 801bb74:	e9d3 a800 	ldrd	sl, r8, [r3]
 801bb78:	4652      	mov	r2, sl
 801bb7a:	4643      	mov	r3, r8
 801bb7c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801bb80:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 801bb84:	930b      	str	r3, [sp, #44]	; 0x2c
 801bb86:	f04f 32ff 	mov.w	r2, #4294967295
 801bb8a:	4650      	mov	r0, sl
 801bb8c:	4b9c      	ldr	r3, [pc, #624]	; (801be00 <_printf_float+0x2cc>)
 801bb8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bb90:	f7ec ffa8 	bl	8008ae4 <__aeabi_dcmpun>
 801bb94:	bb70      	cbnz	r0, 801bbf4 <_printf_float+0xc0>
 801bb96:	f04f 32ff 	mov.w	r2, #4294967295
 801bb9a:	4650      	mov	r0, sl
 801bb9c:	4b98      	ldr	r3, [pc, #608]	; (801be00 <_printf_float+0x2cc>)
 801bb9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bba0:	f7ec ff82 	bl	8008aa8 <__aeabi_dcmple>
 801bba4:	bb30      	cbnz	r0, 801bbf4 <_printf_float+0xc0>
 801bba6:	2200      	movs	r2, #0
 801bba8:	2300      	movs	r3, #0
 801bbaa:	4650      	mov	r0, sl
 801bbac:	4641      	mov	r1, r8
 801bbae:	f7ec ff71 	bl	8008a94 <__aeabi_dcmplt>
 801bbb2:	b110      	cbz	r0, 801bbba <_printf_float+0x86>
 801bbb4:	232d      	movs	r3, #45	; 0x2d
 801bbb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bbba:	4a92      	ldr	r2, [pc, #584]	; (801be04 <_printf_float+0x2d0>)
 801bbbc:	4b92      	ldr	r3, [pc, #584]	; (801be08 <_printf_float+0x2d4>)
 801bbbe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801bbc2:	bf94      	ite	ls
 801bbc4:	4690      	movls	r8, r2
 801bbc6:	4698      	movhi	r8, r3
 801bbc8:	2303      	movs	r3, #3
 801bbca:	f04f 0a00 	mov.w	sl, #0
 801bbce:	6123      	str	r3, [r4, #16]
 801bbd0:	f02b 0304 	bic.w	r3, fp, #4
 801bbd4:	6023      	str	r3, [r4, #0]
 801bbd6:	4633      	mov	r3, r6
 801bbd8:	4621      	mov	r1, r4
 801bbda:	4628      	mov	r0, r5
 801bbdc:	9700      	str	r7, [sp, #0]
 801bbde:	aa0f      	add	r2, sp, #60	; 0x3c
 801bbe0:	f000 f9d6 	bl	801bf90 <_printf_common>
 801bbe4:	3001      	adds	r0, #1
 801bbe6:	f040 8090 	bne.w	801bd0a <_printf_float+0x1d6>
 801bbea:	f04f 30ff 	mov.w	r0, #4294967295
 801bbee:	b011      	add	sp, #68	; 0x44
 801bbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbf4:	4652      	mov	r2, sl
 801bbf6:	4643      	mov	r3, r8
 801bbf8:	4650      	mov	r0, sl
 801bbfa:	4641      	mov	r1, r8
 801bbfc:	f7ec ff72 	bl	8008ae4 <__aeabi_dcmpun>
 801bc00:	b148      	cbz	r0, 801bc16 <_printf_float+0xe2>
 801bc02:	f1b8 0f00 	cmp.w	r8, #0
 801bc06:	bfb8      	it	lt
 801bc08:	232d      	movlt	r3, #45	; 0x2d
 801bc0a:	4a80      	ldr	r2, [pc, #512]	; (801be0c <_printf_float+0x2d8>)
 801bc0c:	bfb8      	it	lt
 801bc0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801bc12:	4b7f      	ldr	r3, [pc, #508]	; (801be10 <_printf_float+0x2dc>)
 801bc14:	e7d3      	b.n	801bbbe <_printf_float+0x8a>
 801bc16:	6863      	ldr	r3, [r4, #4]
 801bc18:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801bc1c:	1c5a      	adds	r2, r3, #1
 801bc1e:	d142      	bne.n	801bca6 <_printf_float+0x172>
 801bc20:	2306      	movs	r3, #6
 801bc22:	6063      	str	r3, [r4, #4]
 801bc24:	2200      	movs	r2, #0
 801bc26:	9206      	str	r2, [sp, #24]
 801bc28:	aa0e      	add	r2, sp, #56	; 0x38
 801bc2a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 801bc2e:	aa0d      	add	r2, sp, #52	; 0x34
 801bc30:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 801bc34:	9203      	str	r2, [sp, #12]
 801bc36:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 801bc3a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801bc3e:	6023      	str	r3, [r4, #0]
 801bc40:	6863      	ldr	r3, [r4, #4]
 801bc42:	4652      	mov	r2, sl
 801bc44:	9300      	str	r3, [sp, #0]
 801bc46:	4628      	mov	r0, r5
 801bc48:	4643      	mov	r3, r8
 801bc4a:	910b      	str	r1, [sp, #44]	; 0x2c
 801bc4c:	f7ff fed6 	bl	801b9fc <__cvt>
 801bc50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bc52:	4680      	mov	r8, r0
 801bc54:	2947      	cmp	r1, #71	; 0x47
 801bc56:	990d      	ldr	r1, [sp, #52]	; 0x34
 801bc58:	d108      	bne.n	801bc6c <_printf_float+0x138>
 801bc5a:	1cc8      	adds	r0, r1, #3
 801bc5c:	db02      	blt.n	801bc64 <_printf_float+0x130>
 801bc5e:	6863      	ldr	r3, [r4, #4]
 801bc60:	4299      	cmp	r1, r3
 801bc62:	dd40      	ble.n	801bce6 <_printf_float+0x1b2>
 801bc64:	f1a9 0902 	sub.w	r9, r9, #2
 801bc68:	fa5f f989 	uxtb.w	r9, r9
 801bc6c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801bc70:	d81f      	bhi.n	801bcb2 <_printf_float+0x17e>
 801bc72:	464a      	mov	r2, r9
 801bc74:	3901      	subs	r1, #1
 801bc76:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801bc7a:	910d      	str	r1, [sp, #52]	; 0x34
 801bc7c:	f7ff ff1d 	bl	801baba <__exponent>
 801bc80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bc82:	4682      	mov	sl, r0
 801bc84:	1813      	adds	r3, r2, r0
 801bc86:	2a01      	cmp	r2, #1
 801bc88:	6123      	str	r3, [r4, #16]
 801bc8a:	dc02      	bgt.n	801bc92 <_printf_float+0x15e>
 801bc8c:	6822      	ldr	r2, [r4, #0]
 801bc8e:	07d2      	lsls	r2, r2, #31
 801bc90:	d501      	bpl.n	801bc96 <_printf_float+0x162>
 801bc92:	3301      	adds	r3, #1
 801bc94:	6123      	str	r3, [r4, #16]
 801bc96:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	d09b      	beq.n	801bbd6 <_printf_float+0xa2>
 801bc9e:	232d      	movs	r3, #45	; 0x2d
 801bca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bca4:	e797      	b.n	801bbd6 <_printf_float+0xa2>
 801bca6:	2947      	cmp	r1, #71	; 0x47
 801bca8:	d1bc      	bne.n	801bc24 <_printf_float+0xf0>
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	d1ba      	bne.n	801bc24 <_printf_float+0xf0>
 801bcae:	2301      	movs	r3, #1
 801bcb0:	e7b7      	b.n	801bc22 <_printf_float+0xee>
 801bcb2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801bcb6:	d118      	bne.n	801bcea <_printf_float+0x1b6>
 801bcb8:	2900      	cmp	r1, #0
 801bcba:	6863      	ldr	r3, [r4, #4]
 801bcbc:	dd0b      	ble.n	801bcd6 <_printf_float+0x1a2>
 801bcbe:	6121      	str	r1, [r4, #16]
 801bcc0:	b913      	cbnz	r3, 801bcc8 <_printf_float+0x194>
 801bcc2:	6822      	ldr	r2, [r4, #0]
 801bcc4:	07d0      	lsls	r0, r2, #31
 801bcc6:	d502      	bpl.n	801bcce <_printf_float+0x19a>
 801bcc8:	3301      	adds	r3, #1
 801bcca:	440b      	add	r3, r1
 801bccc:	6123      	str	r3, [r4, #16]
 801bcce:	f04f 0a00 	mov.w	sl, #0
 801bcd2:	65a1      	str	r1, [r4, #88]	; 0x58
 801bcd4:	e7df      	b.n	801bc96 <_printf_float+0x162>
 801bcd6:	b913      	cbnz	r3, 801bcde <_printf_float+0x1aa>
 801bcd8:	6822      	ldr	r2, [r4, #0]
 801bcda:	07d2      	lsls	r2, r2, #31
 801bcdc:	d501      	bpl.n	801bce2 <_printf_float+0x1ae>
 801bcde:	3302      	adds	r3, #2
 801bce0:	e7f4      	b.n	801bccc <_printf_float+0x198>
 801bce2:	2301      	movs	r3, #1
 801bce4:	e7f2      	b.n	801bccc <_printf_float+0x198>
 801bce6:	f04f 0967 	mov.w	r9, #103	; 0x67
 801bcea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bcec:	4299      	cmp	r1, r3
 801bcee:	db05      	blt.n	801bcfc <_printf_float+0x1c8>
 801bcf0:	6823      	ldr	r3, [r4, #0]
 801bcf2:	6121      	str	r1, [r4, #16]
 801bcf4:	07d8      	lsls	r0, r3, #31
 801bcf6:	d5ea      	bpl.n	801bcce <_printf_float+0x19a>
 801bcf8:	1c4b      	adds	r3, r1, #1
 801bcfa:	e7e7      	b.n	801bccc <_printf_float+0x198>
 801bcfc:	2900      	cmp	r1, #0
 801bcfe:	bfcc      	ite	gt
 801bd00:	2201      	movgt	r2, #1
 801bd02:	f1c1 0202 	rsble	r2, r1, #2
 801bd06:	4413      	add	r3, r2
 801bd08:	e7e0      	b.n	801bccc <_printf_float+0x198>
 801bd0a:	6823      	ldr	r3, [r4, #0]
 801bd0c:	055a      	lsls	r2, r3, #21
 801bd0e:	d407      	bmi.n	801bd20 <_printf_float+0x1ec>
 801bd10:	6923      	ldr	r3, [r4, #16]
 801bd12:	4642      	mov	r2, r8
 801bd14:	4631      	mov	r1, r6
 801bd16:	4628      	mov	r0, r5
 801bd18:	47b8      	blx	r7
 801bd1a:	3001      	adds	r0, #1
 801bd1c:	d12b      	bne.n	801bd76 <_printf_float+0x242>
 801bd1e:	e764      	b.n	801bbea <_printf_float+0xb6>
 801bd20:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801bd24:	f240 80dd 	bls.w	801bee2 <_printf_float+0x3ae>
 801bd28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801bd2c:	2200      	movs	r2, #0
 801bd2e:	2300      	movs	r3, #0
 801bd30:	f7ec fea6 	bl	8008a80 <__aeabi_dcmpeq>
 801bd34:	2800      	cmp	r0, #0
 801bd36:	d033      	beq.n	801bda0 <_printf_float+0x26c>
 801bd38:	2301      	movs	r3, #1
 801bd3a:	4631      	mov	r1, r6
 801bd3c:	4628      	mov	r0, r5
 801bd3e:	4a35      	ldr	r2, [pc, #212]	; (801be14 <_printf_float+0x2e0>)
 801bd40:	47b8      	blx	r7
 801bd42:	3001      	adds	r0, #1
 801bd44:	f43f af51 	beq.w	801bbea <_printf_float+0xb6>
 801bd48:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801bd4c:	429a      	cmp	r2, r3
 801bd4e:	db02      	blt.n	801bd56 <_printf_float+0x222>
 801bd50:	6823      	ldr	r3, [r4, #0]
 801bd52:	07d8      	lsls	r0, r3, #31
 801bd54:	d50f      	bpl.n	801bd76 <_printf_float+0x242>
 801bd56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bd5a:	4631      	mov	r1, r6
 801bd5c:	4628      	mov	r0, r5
 801bd5e:	47b8      	blx	r7
 801bd60:	3001      	adds	r0, #1
 801bd62:	f43f af42 	beq.w	801bbea <_printf_float+0xb6>
 801bd66:	f04f 0800 	mov.w	r8, #0
 801bd6a:	f104 091a 	add.w	r9, r4, #26
 801bd6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd70:	3b01      	subs	r3, #1
 801bd72:	4543      	cmp	r3, r8
 801bd74:	dc09      	bgt.n	801bd8a <_printf_float+0x256>
 801bd76:	6823      	ldr	r3, [r4, #0]
 801bd78:	079b      	lsls	r3, r3, #30
 801bd7a:	f100 8104 	bmi.w	801bf86 <_printf_float+0x452>
 801bd7e:	68e0      	ldr	r0, [r4, #12]
 801bd80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bd82:	4298      	cmp	r0, r3
 801bd84:	bfb8      	it	lt
 801bd86:	4618      	movlt	r0, r3
 801bd88:	e731      	b.n	801bbee <_printf_float+0xba>
 801bd8a:	2301      	movs	r3, #1
 801bd8c:	464a      	mov	r2, r9
 801bd8e:	4631      	mov	r1, r6
 801bd90:	4628      	mov	r0, r5
 801bd92:	47b8      	blx	r7
 801bd94:	3001      	adds	r0, #1
 801bd96:	f43f af28 	beq.w	801bbea <_printf_float+0xb6>
 801bd9a:	f108 0801 	add.w	r8, r8, #1
 801bd9e:	e7e6      	b.n	801bd6e <_printf_float+0x23a>
 801bda0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	dc38      	bgt.n	801be18 <_printf_float+0x2e4>
 801bda6:	2301      	movs	r3, #1
 801bda8:	4631      	mov	r1, r6
 801bdaa:	4628      	mov	r0, r5
 801bdac:	4a19      	ldr	r2, [pc, #100]	; (801be14 <_printf_float+0x2e0>)
 801bdae:	47b8      	blx	r7
 801bdb0:	3001      	adds	r0, #1
 801bdb2:	f43f af1a 	beq.w	801bbea <_printf_float+0xb6>
 801bdb6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 801bdba:	4313      	orrs	r3, r2
 801bdbc:	d102      	bne.n	801bdc4 <_printf_float+0x290>
 801bdbe:	6823      	ldr	r3, [r4, #0]
 801bdc0:	07d9      	lsls	r1, r3, #31
 801bdc2:	d5d8      	bpl.n	801bd76 <_printf_float+0x242>
 801bdc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bdc8:	4631      	mov	r1, r6
 801bdca:	4628      	mov	r0, r5
 801bdcc:	47b8      	blx	r7
 801bdce:	3001      	adds	r0, #1
 801bdd0:	f43f af0b 	beq.w	801bbea <_printf_float+0xb6>
 801bdd4:	f04f 0900 	mov.w	r9, #0
 801bdd8:	f104 0a1a 	add.w	sl, r4, #26
 801bddc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bdde:	425b      	negs	r3, r3
 801bde0:	454b      	cmp	r3, r9
 801bde2:	dc01      	bgt.n	801bde8 <_printf_float+0x2b4>
 801bde4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bde6:	e794      	b.n	801bd12 <_printf_float+0x1de>
 801bde8:	2301      	movs	r3, #1
 801bdea:	4652      	mov	r2, sl
 801bdec:	4631      	mov	r1, r6
 801bdee:	4628      	mov	r0, r5
 801bdf0:	47b8      	blx	r7
 801bdf2:	3001      	adds	r0, #1
 801bdf4:	f43f aef9 	beq.w	801bbea <_printf_float+0xb6>
 801bdf8:	f109 0901 	add.w	r9, r9, #1
 801bdfc:	e7ee      	b.n	801bddc <_printf_float+0x2a8>
 801bdfe:	bf00      	nop
 801be00:	7fefffff 	.word	0x7fefffff
 801be04:	0801ed03 	.word	0x0801ed03
 801be08:	0801ed07 	.word	0x0801ed07
 801be0c:	0801ed0b 	.word	0x0801ed0b
 801be10:	0801ed0f 	.word	0x0801ed0f
 801be14:	0801ed13 	.word	0x0801ed13
 801be18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801be1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801be1c:	429a      	cmp	r2, r3
 801be1e:	bfa8      	it	ge
 801be20:	461a      	movge	r2, r3
 801be22:	2a00      	cmp	r2, #0
 801be24:	4691      	mov	r9, r2
 801be26:	dc37      	bgt.n	801be98 <_printf_float+0x364>
 801be28:	f04f 0b00 	mov.w	fp, #0
 801be2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801be30:	f104 021a 	add.w	r2, r4, #26
 801be34:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801be38:	ebaa 0309 	sub.w	r3, sl, r9
 801be3c:	455b      	cmp	r3, fp
 801be3e:	dc33      	bgt.n	801bea8 <_printf_float+0x374>
 801be40:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801be44:	429a      	cmp	r2, r3
 801be46:	db3b      	blt.n	801bec0 <_printf_float+0x38c>
 801be48:	6823      	ldr	r3, [r4, #0]
 801be4a:	07da      	lsls	r2, r3, #31
 801be4c:	d438      	bmi.n	801bec0 <_printf_float+0x38c>
 801be4e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 801be52:	eba2 0903 	sub.w	r9, r2, r3
 801be56:	eba2 020a 	sub.w	r2, r2, sl
 801be5a:	4591      	cmp	r9, r2
 801be5c:	bfa8      	it	ge
 801be5e:	4691      	movge	r9, r2
 801be60:	f1b9 0f00 	cmp.w	r9, #0
 801be64:	dc34      	bgt.n	801bed0 <_printf_float+0x39c>
 801be66:	f04f 0800 	mov.w	r8, #0
 801be6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801be6e:	f104 0a1a 	add.w	sl, r4, #26
 801be72:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801be76:	1a9b      	subs	r3, r3, r2
 801be78:	eba3 0309 	sub.w	r3, r3, r9
 801be7c:	4543      	cmp	r3, r8
 801be7e:	f77f af7a 	ble.w	801bd76 <_printf_float+0x242>
 801be82:	2301      	movs	r3, #1
 801be84:	4652      	mov	r2, sl
 801be86:	4631      	mov	r1, r6
 801be88:	4628      	mov	r0, r5
 801be8a:	47b8      	blx	r7
 801be8c:	3001      	adds	r0, #1
 801be8e:	f43f aeac 	beq.w	801bbea <_printf_float+0xb6>
 801be92:	f108 0801 	add.w	r8, r8, #1
 801be96:	e7ec      	b.n	801be72 <_printf_float+0x33e>
 801be98:	4613      	mov	r3, r2
 801be9a:	4631      	mov	r1, r6
 801be9c:	4642      	mov	r2, r8
 801be9e:	4628      	mov	r0, r5
 801bea0:	47b8      	blx	r7
 801bea2:	3001      	adds	r0, #1
 801bea4:	d1c0      	bne.n	801be28 <_printf_float+0x2f4>
 801bea6:	e6a0      	b.n	801bbea <_printf_float+0xb6>
 801bea8:	2301      	movs	r3, #1
 801beaa:	4631      	mov	r1, r6
 801beac:	4628      	mov	r0, r5
 801beae:	920b      	str	r2, [sp, #44]	; 0x2c
 801beb0:	47b8      	blx	r7
 801beb2:	3001      	adds	r0, #1
 801beb4:	f43f ae99 	beq.w	801bbea <_printf_float+0xb6>
 801beb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801beba:	f10b 0b01 	add.w	fp, fp, #1
 801bebe:	e7b9      	b.n	801be34 <_printf_float+0x300>
 801bec0:	4631      	mov	r1, r6
 801bec2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bec6:	4628      	mov	r0, r5
 801bec8:	47b8      	blx	r7
 801beca:	3001      	adds	r0, #1
 801becc:	d1bf      	bne.n	801be4e <_printf_float+0x31a>
 801bece:	e68c      	b.n	801bbea <_printf_float+0xb6>
 801bed0:	464b      	mov	r3, r9
 801bed2:	4631      	mov	r1, r6
 801bed4:	4628      	mov	r0, r5
 801bed6:	eb08 020a 	add.w	r2, r8, sl
 801beda:	47b8      	blx	r7
 801bedc:	3001      	adds	r0, #1
 801bede:	d1c2      	bne.n	801be66 <_printf_float+0x332>
 801bee0:	e683      	b.n	801bbea <_printf_float+0xb6>
 801bee2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bee4:	2a01      	cmp	r2, #1
 801bee6:	dc01      	bgt.n	801beec <_printf_float+0x3b8>
 801bee8:	07db      	lsls	r3, r3, #31
 801beea:	d539      	bpl.n	801bf60 <_printf_float+0x42c>
 801beec:	2301      	movs	r3, #1
 801beee:	4642      	mov	r2, r8
 801bef0:	4631      	mov	r1, r6
 801bef2:	4628      	mov	r0, r5
 801bef4:	47b8      	blx	r7
 801bef6:	3001      	adds	r0, #1
 801bef8:	f43f ae77 	beq.w	801bbea <_printf_float+0xb6>
 801befc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bf00:	4631      	mov	r1, r6
 801bf02:	4628      	mov	r0, r5
 801bf04:	47b8      	blx	r7
 801bf06:	3001      	adds	r0, #1
 801bf08:	f43f ae6f 	beq.w	801bbea <_printf_float+0xb6>
 801bf0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801bf10:	2200      	movs	r2, #0
 801bf12:	2300      	movs	r3, #0
 801bf14:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 801bf18:	f7ec fdb2 	bl	8008a80 <__aeabi_dcmpeq>
 801bf1c:	b9d8      	cbnz	r0, 801bf56 <_printf_float+0x422>
 801bf1e:	f109 33ff 	add.w	r3, r9, #4294967295
 801bf22:	f108 0201 	add.w	r2, r8, #1
 801bf26:	4631      	mov	r1, r6
 801bf28:	4628      	mov	r0, r5
 801bf2a:	47b8      	blx	r7
 801bf2c:	3001      	adds	r0, #1
 801bf2e:	d10e      	bne.n	801bf4e <_printf_float+0x41a>
 801bf30:	e65b      	b.n	801bbea <_printf_float+0xb6>
 801bf32:	2301      	movs	r3, #1
 801bf34:	464a      	mov	r2, r9
 801bf36:	4631      	mov	r1, r6
 801bf38:	4628      	mov	r0, r5
 801bf3a:	47b8      	blx	r7
 801bf3c:	3001      	adds	r0, #1
 801bf3e:	f43f ae54 	beq.w	801bbea <_printf_float+0xb6>
 801bf42:	f108 0801 	add.w	r8, r8, #1
 801bf46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf48:	3b01      	subs	r3, #1
 801bf4a:	4543      	cmp	r3, r8
 801bf4c:	dcf1      	bgt.n	801bf32 <_printf_float+0x3fe>
 801bf4e:	4653      	mov	r3, sl
 801bf50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801bf54:	e6de      	b.n	801bd14 <_printf_float+0x1e0>
 801bf56:	f04f 0800 	mov.w	r8, #0
 801bf5a:	f104 091a 	add.w	r9, r4, #26
 801bf5e:	e7f2      	b.n	801bf46 <_printf_float+0x412>
 801bf60:	2301      	movs	r3, #1
 801bf62:	4642      	mov	r2, r8
 801bf64:	e7df      	b.n	801bf26 <_printf_float+0x3f2>
 801bf66:	2301      	movs	r3, #1
 801bf68:	464a      	mov	r2, r9
 801bf6a:	4631      	mov	r1, r6
 801bf6c:	4628      	mov	r0, r5
 801bf6e:	47b8      	blx	r7
 801bf70:	3001      	adds	r0, #1
 801bf72:	f43f ae3a 	beq.w	801bbea <_printf_float+0xb6>
 801bf76:	f108 0801 	add.w	r8, r8, #1
 801bf7a:	68e3      	ldr	r3, [r4, #12]
 801bf7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801bf7e:	1a5b      	subs	r3, r3, r1
 801bf80:	4543      	cmp	r3, r8
 801bf82:	dcf0      	bgt.n	801bf66 <_printf_float+0x432>
 801bf84:	e6fb      	b.n	801bd7e <_printf_float+0x24a>
 801bf86:	f04f 0800 	mov.w	r8, #0
 801bf8a:	f104 0919 	add.w	r9, r4, #25
 801bf8e:	e7f4      	b.n	801bf7a <_printf_float+0x446>

0801bf90 <_printf_common>:
 801bf90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bf94:	4616      	mov	r6, r2
 801bf96:	4699      	mov	r9, r3
 801bf98:	688a      	ldr	r2, [r1, #8]
 801bf9a:	690b      	ldr	r3, [r1, #16]
 801bf9c:	4607      	mov	r7, r0
 801bf9e:	4293      	cmp	r3, r2
 801bfa0:	bfb8      	it	lt
 801bfa2:	4613      	movlt	r3, r2
 801bfa4:	6033      	str	r3, [r6, #0]
 801bfa6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801bfaa:	460c      	mov	r4, r1
 801bfac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801bfb0:	b10a      	cbz	r2, 801bfb6 <_printf_common+0x26>
 801bfb2:	3301      	adds	r3, #1
 801bfb4:	6033      	str	r3, [r6, #0]
 801bfb6:	6823      	ldr	r3, [r4, #0]
 801bfb8:	0699      	lsls	r1, r3, #26
 801bfba:	bf42      	ittt	mi
 801bfbc:	6833      	ldrmi	r3, [r6, #0]
 801bfbe:	3302      	addmi	r3, #2
 801bfc0:	6033      	strmi	r3, [r6, #0]
 801bfc2:	6825      	ldr	r5, [r4, #0]
 801bfc4:	f015 0506 	ands.w	r5, r5, #6
 801bfc8:	d106      	bne.n	801bfd8 <_printf_common+0x48>
 801bfca:	f104 0a19 	add.w	sl, r4, #25
 801bfce:	68e3      	ldr	r3, [r4, #12]
 801bfd0:	6832      	ldr	r2, [r6, #0]
 801bfd2:	1a9b      	subs	r3, r3, r2
 801bfd4:	42ab      	cmp	r3, r5
 801bfd6:	dc2b      	bgt.n	801c030 <_printf_common+0xa0>
 801bfd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801bfdc:	1e13      	subs	r3, r2, #0
 801bfde:	6822      	ldr	r2, [r4, #0]
 801bfe0:	bf18      	it	ne
 801bfe2:	2301      	movne	r3, #1
 801bfe4:	0692      	lsls	r2, r2, #26
 801bfe6:	d430      	bmi.n	801c04a <_printf_common+0xba>
 801bfe8:	4649      	mov	r1, r9
 801bfea:	4638      	mov	r0, r7
 801bfec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bff0:	47c0      	blx	r8
 801bff2:	3001      	adds	r0, #1
 801bff4:	d023      	beq.n	801c03e <_printf_common+0xae>
 801bff6:	6823      	ldr	r3, [r4, #0]
 801bff8:	6922      	ldr	r2, [r4, #16]
 801bffa:	f003 0306 	and.w	r3, r3, #6
 801bffe:	2b04      	cmp	r3, #4
 801c000:	bf14      	ite	ne
 801c002:	2500      	movne	r5, #0
 801c004:	6833      	ldreq	r3, [r6, #0]
 801c006:	f04f 0600 	mov.w	r6, #0
 801c00a:	bf08      	it	eq
 801c00c:	68e5      	ldreq	r5, [r4, #12]
 801c00e:	f104 041a 	add.w	r4, r4, #26
 801c012:	bf08      	it	eq
 801c014:	1aed      	subeq	r5, r5, r3
 801c016:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801c01a:	bf08      	it	eq
 801c01c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c020:	4293      	cmp	r3, r2
 801c022:	bfc4      	itt	gt
 801c024:	1a9b      	subgt	r3, r3, r2
 801c026:	18ed      	addgt	r5, r5, r3
 801c028:	42b5      	cmp	r5, r6
 801c02a:	d11a      	bne.n	801c062 <_printf_common+0xd2>
 801c02c:	2000      	movs	r0, #0
 801c02e:	e008      	b.n	801c042 <_printf_common+0xb2>
 801c030:	2301      	movs	r3, #1
 801c032:	4652      	mov	r2, sl
 801c034:	4649      	mov	r1, r9
 801c036:	4638      	mov	r0, r7
 801c038:	47c0      	blx	r8
 801c03a:	3001      	adds	r0, #1
 801c03c:	d103      	bne.n	801c046 <_printf_common+0xb6>
 801c03e:	f04f 30ff 	mov.w	r0, #4294967295
 801c042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c046:	3501      	adds	r5, #1
 801c048:	e7c1      	b.n	801bfce <_printf_common+0x3e>
 801c04a:	2030      	movs	r0, #48	; 0x30
 801c04c:	18e1      	adds	r1, r4, r3
 801c04e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c052:	1c5a      	adds	r2, r3, #1
 801c054:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c058:	4422      	add	r2, r4
 801c05a:	3302      	adds	r3, #2
 801c05c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c060:	e7c2      	b.n	801bfe8 <_printf_common+0x58>
 801c062:	2301      	movs	r3, #1
 801c064:	4622      	mov	r2, r4
 801c066:	4649      	mov	r1, r9
 801c068:	4638      	mov	r0, r7
 801c06a:	47c0      	blx	r8
 801c06c:	3001      	adds	r0, #1
 801c06e:	d0e6      	beq.n	801c03e <_printf_common+0xae>
 801c070:	3601      	adds	r6, #1
 801c072:	e7d9      	b.n	801c028 <_printf_common+0x98>

0801c074 <_printf_i>:
 801c074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c078:	7e0f      	ldrb	r7, [r1, #24]
 801c07a:	4691      	mov	r9, r2
 801c07c:	2f78      	cmp	r7, #120	; 0x78
 801c07e:	4680      	mov	r8, r0
 801c080:	460c      	mov	r4, r1
 801c082:	469a      	mov	sl, r3
 801c084:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c086:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c08a:	d807      	bhi.n	801c09c <_printf_i+0x28>
 801c08c:	2f62      	cmp	r7, #98	; 0x62
 801c08e:	d80a      	bhi.n	801c0a6 <_printf_i+0x32>
 801c090:	2f00      	cmp	r7, #0
 801c092:	f000 80d5 	beq.w	801c240 <_printf_i+0x1cc>
 801c096:	2f58      	cmp	r7, #88	; 0x58
 801c098:	f000 80c1 	beq.w	801c21e <_printf_i+0x1aa>
 801c09c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c0a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c0a4:	e03a      	b.n	801c11c <_printf_i+0xa8>
 801c0a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c0aa:	2b15      	cmp	r3, #21
 801c0ac:	d8f6      	bhi.n	801c09c <_printf_i+0x28>
 801c0ae:	a101      	add	r1, pc, #4	; (adr r1, 801c0b4 <_printf_i+0x40>)
 801c0b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c0b4:	0801c10d 	.word	0x0801c10d
 801c0b8:	0801c121 	.word	0x0801c121
 801c0bc:	0801c09d 	.word	0x0801c09d
 801c0c0:	0801c09d 	.word	0x0801c09d
 801c0c4:	0801c09d 	.word	0x0801c09d
 801c0c8:	0801c09d 	.word	0x0801c09d
 801c0cc:	0801c121 	.word	0x0801c121
 801c0d0:	0801c09d 	.word	0x0801c09d
 801c0d4:	0801c09d 	.word	0x0801c09d
 801c0d8:	0801c09d 	.word	0x0801c09d
 801c0dc:	0801c09d 	.word	0x0801c09d
 801c0e0:	0801c227 	.word	0x0801c227
 801c0e4:	0801c14d 	.word	0x0801c14d
 801c0e8:	0801c1e1 	.word	0x0801c1e1
 801c0ec:	0801c09d 	.word	0x0801c09d
 801c0f0:	0801c09d 	.word	0x0801c09d
 801c0f4:	0801c249 	.word	0x0801c249
 801c0f8:	0801c09d 	.word	0x0801c09d
 801c0fc:	0801c14d 	.word	0x0801c14d
 801c100:	0801c09d 	.word	0x0801c09d
 801c104:	0801c09d 	.word	0x0801c09d
 801c108:	0801c1e9 	.word	0x0801c1e9
 801c10c:	682b      	ldr	r3, [r5, #0]
 801c10e:	1d1a      	adds	r2, r3, #4
 801c110:	681b      	ldr	r3, [r3, #0]
 801c112:	602a      	str	r2, [r5, #0]
 801c114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c11c:	2301      	movs	r3, #1
 801c11e:	e0a0      	b.n	801c262 <_printf_i+0x1ee>
 801c120:	6820      	ldr	r0, [r4, #0]
 801c122:	682b      	ldr	r3, [r5, #0]
 801c124:	0607      	lsls	r7, r0, #24
 801c126:	f103 0104 	add.w	r1, r3, #4
 801c12a:	6029      	str	r1, [r5, #0]
 801c12c:	d501      	bpl.n	801c132 <_printf_i+0xbe>
 801c12e:	681e      	ldr	r6, [r3, #0]
 801c130:	e003      	b.n	801c13a <_printf_i+0xc6>
 801c132:	0646      	lsls	r6, r0, #25
 801c134:	d5fb      	bpl.n	801c12e <_printf_i+0xba>
 801c136:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c13a:	2e00      	cmp	r6, #0
 801c13c:	da03      	bge.n	801c146 <_printf_i+0xd2>
 801c13e:	232d      	movs	r3, #45	; 0x2d
 801c140:	4276      	negs	r6, r6
 801c142:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c146:	230a      	movs	r3, #10
 801c148:	4859      	ldr	r0, [pc, #356]	; (801c2b0 <_printf_i+0x23c>)
 801c14a:	e012      	b.n	801c172 <_printf_i+0xfe>
 801c14c:	682b      	ldr	r3, [r5, #0]
 801c14e:	6820      	ldr	r0, [r4, #0]
 801c150:	1d19      	adds	r1, r3, #4
 801c152:	6029      	str	r1, [r5, #0]
 801c154:	0605      	lsls	r5, r0, #24
 801c156:	d501      	bpl.n	801c15c <_printf_i+0xe8>
 801c158:	681e      	ldr	r6, [r3, #0]
 801c15a:	e002      	b.n	801c162 <_printf_i+0xee>
 801c15c:	0641      	lsls	r1, r0, #25
 801c15e:	d5fb      	bpl.n	801c158 <_printf_i+0xe4>
 801c160:	881e      	ldrh	r6, [r3, #0]
 801c162:	2f6f      	cmp	r7, #111	; 0x6f
 801c164:	bf0c      	ite	eq
 801c166:	2308      	moveq	r3, #8
 801c168:	230a      	movne	r3, #10
 801c16a:	4851      	ldr	r0, [pc, #324]	; (801c2b0 <_printf_i+0x23c>)
 801c16c:	2100      	movs	r1, #0
 801c16e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c172:	6865      	ldr	r5, [r4, #4]
 801c174:	2d00      	cmp	r5, #0
 801c176:	bfa8      	it	ge
 801c178:	6821      	ldrge	r1, [r4, #0]
 801c17a:	60a5      	str	r5, [r4, #8]
 801c17c:	bfa4      	itt	ge
 801c17e:	f021 0104 	bicge.w	r1, r1, #4
 801c182:	6021      	strge	r1, [r4, #0]
 801c184:	b90e      	cbnz	r6, 801c18a <_printf_i+0x116>
 801c186:	2d00      	cmp	r5, #0
 801c188:	d04b      	beq.n	801c222 <_printf_i+0x1ae>
 801c18a:	4615      	mov	r5, r2
 801c18c:	fbb6 f1f3 	udiv	r1, r6, r3
 801c190:	fb03 6711 	mls	r7, r3, r1, r6
 801c194:	5dc7      	ldrb	r7, [r0, r7]
 801c196:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c19a:	4637      	mov	r7, r6
 801c19c:	42bb      	cmp	r3, r7
 801c19e:	460e      	mov	r6, r1
 801c1a0:	d9f4      	bls.n	801c18c <_printf_i+0x118>
 801c1a2:	2b08      	cmp	r3, #8
 801c1a4:	d10b      	bne.n	801c1be <_printf_i+0x14a>
 801c1a6:	6823      	ldr	r3, [r4, #0]
 801c1a8:	07de      	lsls	r6, r3, #31
 801c1aa:	d508      	bpl.n	801c1be <_printf_i+0x14a>
 801c1ac:	6923      	ldr	r3, [r4, #16]
 801c1ae:	6861      	ldr	r1, [r4, #4]
 801c1b0:	4299      	cmp	r1, r3
 801c1b2:	bfde      	ittt	le
 801c1b4:	2330      	movle	r3, #48	; 0x30
 801c1b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c1ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 801c1be:	1b52      	subs	r2, r2, r5
 801c1c0:	6122      	str	r2, [r4, #16]
 801c1c2:	464b      	mov	r3, r9
 801c1c4:	4621      	mov	r1, r4
 801c1c6:	4640      	mov	r0, r8
 801c1c8:	f8cd a000 	str.w	sl, [sp]
 801c1cc:	aa03      	add	r2, sp, #12
 801c1ce:	f7ff fedf 	bl	801bf90 <_printf_common>
 801c1d2:	3001      	adds	r0, #1
 801c1d4:	d14a      	bne.n	801c26c <_printf_i+0x1f8>
 801c1d6:	f04f 30ff 	mov.w	r0, #4294967295
 801c1da:	b004      	add	sp, #16
 801c1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c1e0:	6823      	ldr	r3, [r4, #0]
 801c1e2:	f043 0320 	orr.w	r3, r3, #32
 801c1e6:	6023      	str	r3, [r4, #0]
 801c1e8:	2778      	movs	r7, #120	; 0x78
 801c1ea:	4832      	ldr	r0, [pc, #200]	; (801c2b4 <_printf_i+0x240>)
 801c1ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c1f0:	6823      	ldr	r3, [r4, #0]
 801c1f2:	6829      	ldr	r1, [r5, #0]
 801c1f4:	061f      	lsls	r7, r3, #24
 801c1f6:	f851 6b04 	ldr.w	r6, [r1], #4
 801c1fa:	d402      	bmi.n	801c202 <_printf_i+0x18e>
 801c1fc:	065f      	lsls	r7, r3, #25
 801c1fe:	bf48      	it	mi
 801c200:	b2b6      	uxthmi	r6, r6
 801c202:	07df      	lsls	r7, r3, #31
 801c204:	bf48      	it	mi
 801c206:	f043 0320 	orrmi.w	r3, r3, #32
 801c20a:	6029      	str	r1, [r5, #0]
 801c20c:	bf48      	it	mi
 801c20e:	6023      	strmi	r3, [r4, #0]
 801c210:	b91e      	cbnz	r6, 801c21a <_printf_i+0x1a6>
 801c212:	6823      	ldr	r3, [r4, #0]
 801c214:	f023 0320 	bic.w	r3, r3, #32
 801c218:	6023      	str	r3, [r4, #0]
 801c21a:	2310      	movs	r3, #16
 801c21c:	e7a6      	b.n	801c16c <_printf_i+0xf8>
 801c21e:	4824      	ldr	r0, [pc, #144]	; (801c2b0 <_printf_i+0x23c>)
 801c220:	e7e4      	b.n	801c1ec <_printf_i+0x178>
 801c222:	4615      	mov	r5, r2
 801c224:	e7bd      	b.n	801c1a2 <_printf_i+0x12e>
 801c226:	682b      	ldr	r3, [r5, #0]
 801c228:	6826      	ldr	r6, [r4, #0]
 801c22a:	1d18      	adds	r0, r3, #4
 801c22c:	6961      	ldr	r1, [r4, #20]
 801c22e:	6028      	str	r0, [r5, #0]
 801c230:	0635      	lsls	r5, r6, #24
 801c232:	681b      	ldr	r3, [r3, #0]
 801c234:	d501      	bpl.n	801c23a <_printf_i+0x1c6>
 801c236:	6019      	str	r1, [r3, #0]
 801c238:	e002      	b.n	801c240 <_printf_i+0x1cc>
 801c23a:	0670      	lsls	r0, r6, #25
 801c23c:	d5fb      	bpl.n	801c236 <_printf_i+0x1c2>
 801c23e:	8019      	strh	r1, [r3, #0]
 801c240:	2300      	movs	r3, #0
 801c242:	4615      	mov	r5, r2
 801c244:	6123      	str	r3, [r4, #16]
 801c246:	e7bc      	b.n	801c1c2 <_printf_i+0x14e>
 801c248:	682b      	ldr	r3, [r5, #0]
 801c24a:	2100      	movs	r1, #0
 801c24c:	1d1a      	adds	r2, r3, #4
 801c24e:	602a      	str	r2, [r5, #0]
 801c250:	681d      	ldr	r5, [r3, #0]
 801c252:	6862      	ldr	r2, [r4, #4]
 801c254:	4628      	mov	r0, r5
 801c256:	f000 fa1d 	bl	801c694 <memchr>
 801c25a:	b108      	cbz	r0, 801c260 <_printf_i+0x1ec>
 801c25c:	1b40      	subs	r0, r0, r5
 801c25e:	6060      	str	r0, [r4, #4]
 801c260:	6863      	ldr	r3, [r4, #4]
 801c262:	6123      	str	r3, [r4, #16]
 801c264:	2300      	movs	r3, #0
 801c266:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c26a:	e7aa      	b.n	801c1c2 <_printf_i+0x14e>
 801c26c:	462a      	mov	r2, r5
 801c26e:	4649      	mov	r1, r9
 801c270:	4640      	mov	r0, r8
 801c272:	6923      	ldr	r3, [r4, #16]
 801c274:	47d0      	blx	sl
 801c276:	3001      	adds	r0, #1
 801c278:	d0ad      	beq.n	801c1d6 <_printf_i+0x162>
 801c27a:	6823      	ldr	r3, [r4, #0]
 801c27c:	079b      	lsls	r3, r3, #30
 801c27e:	d413      	bmi.n	801c2a8 <_printf_i+0x234>
 801c280:	68e0      	ldr	r0, [r4, #12]
 801c282:	9b03      	ldr	r3, [sp, #12]
 801c284:	4298      	cmp	r0, r3
 801c286:	bfb8      	it	lt
 801c288:	4618      	movlt	r0, r3
 801c28a:	e7a6      	b.n	801c1da <_printf_i+0x166>
 801c28c:	2301      	movs	r3, #1
 801c28e:	4632      	mov	r2, r6
 801c290:	4649      	mov	r1, r9
 801c292:	4640      	mov	r0, r8
 801c294:	47d0      	blx	sl
 801c296:	3001      	adds	r0, #1
 801c298:	d09d      	beq.n	801c1d6 <_printf_i+0x162>
 801c29a:	3501      	adds	r5, #1
 801c29c:	68e3      	ldr	r3, [r4, #12]
 801c29e:	9903      	ldr	r1, [sp, #12]
 801c2a0:	1a5b      	subs	r3, r3, r1
 801c2a2:	42ab      	cmp	r3, r5
 801c2a4:	dcf2      	bgt.n	801c28c <_printf_i+0x218>
 801c2a6:	e7eb      	b.n	801c280 <_printf_i+0x20c>
 801c2a8:	2500      	movs	r5, #0
 801c2aa:	f104 0619 	add.w	r6, r4, #25
 801c2ae:	e7f5      	b.n	801c29c <_printf_i+0x228>
 801c2b0:	0801ed15 	.word	0x0801ed15
 801c2b4:	0801ed26 	.word	0x0801ed26

0801c2b8 <std>:
 801c2b8:	2300      	movs	r3, #0
 801c2ba:	b510      	push	{r4, lr}
 801c2bc:	4604      	mov	r4, r0
 801c2be:	e9c0 3300 	strd	r3, r3, [r0]
 801c2c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c2c6:	6083      	str	r3, [r0, #8]
 801c2c8:	8181      	strh	r1, [r0, #12]
 801c2ca:	6643      	str	r3, [r0, #100]	; 0x64
 801c2cc:	81c2      	strh	r2, [r0, #14]
 801c2ce:	6183      	str	r3, [r0, #24]
 801c2d0:	4619      	mov	r1, r3
 801c2d2:	2208      	movs	r2, #8
 801c2d4:	305c      	adds	r0, #92	; 0x5c
 801c2d6:	f000 f902 	bl	801c4de <memset>
 801c2da:	4b05      	ldr	r3, [pc, #20]	; (801c2f0 <std+0x38>)
 801c2dc:	6224      	str	r4, [r4, #32]
 801c2de:	6263      	str	r3, [r4, #36]	; 0x24
 801c2e0:	4b04      	ldr	r3, [pc, #16]	; (801c2f4 <std+0x3c>)
 801c2e2:	62a3      	str	r3, [r4, #40]	; 0x28
 801c2e4:	4b04      	ldr	r3, [pc, #16]	; (801c2f8 <std+0x40>)
 801c2e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c2e8:	4b04      	ldr	r3, [pc, #16]	; (801c2fc <std+0x44>)
 801c2ea:	6323      	str	r3, [r4, #48]	; 0x30
 801c2ec:	bd10      	pop	{r4, pc}
 801c2ee:	bf00      	nop
 801c2f0:	0801c459 	.word	0x0801c459
 801c2f4:	0801c47b 	.word	0x0801c47b
 801c2f8:	0801c4b3 	.word	0x0801c4b3
 801c2fc:	0801c4d7 	.word	0x0801c4d7

0801c300 <stdio_exit_handler>:
 801c300:	4a02      	ldr	r2, [pc, #8]	; (801c30c <stdio_exit_handler+0xc>)
 801c302:	4903      	ldr	r1, [pc, #12]	; (801c310 <stdio_exit_handler+0x10>)
 801c304:	4803      	ldr	r0, [pc, #12]	; (801c314 <stdio_exit_handler+0x14>)
 801c306:	f000 b869 	b.w	801c3dc <_fwalk_sglue>
 801c30a:	bf00      	nop
 801c30c:	2000081c 	.word	0x2000081c
 801c310:	0801e065 	.word	0x0801e065
 801c314:	20000828 	.word	0x20000828

0801c318 <cleanup_stdio>:
 801c318:	6841      	ldr	r1, [r0, #4]
 801c31a:	4b0c      	ldr	r3, [pc, #48]	; (801c34c <cleanup_stdio+0x34>)
 801c31c:	b510      	push	{r4, lr}
 801c31e:	4299      	cmp	r1, r3
 801c320:	4604      	mov	r4, r0
 801c322:	d001      	beq.n	801c328 <cleanup_stdio+0x10>
 801c324:	f001 fe9e 	bl	801e064 <_fflush_r>
 801c328:	68a1      	ldr	r1, [r4, #8]
 801c32a:	4b09      	ldr	r3, [pc, #36]	; (801c350 <cleanup_stdio+0x38>)
 801c32c:	4299      	cmp	r1, r3
 801c32e:	d002      	beq.n	801c336 <cleanup_stdio+0x1e>
 801c330:	4620      	mov	r0, r4
 801c332:	f001 fe97 	bl	801e064 <_fflush_r>
 801c336:	68e1      	ldr	r1, [r4, #12]
 801c338:	4b06      	ldr	r3, [pc, #24]	; (801c354 <cleanup_stdio+0x3c>)
 801c33a:	4299      	cmp	r1, r3
 801c33c:	d004      	beq.n	801c348 <cleanup_stdio+0x30>
 801c33e:	4620      	mov	r0, r4
 801c340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c344:	f001 be8e 	b.w	801e064 <_fflush_r>
 801c348:	bd10      	pop	{r4, pc}
 801c34a:	bf00      	nop
 801c34c:	20003a9c 	.word	0x20003a9c
 801c350:	20003b04 	.word	0x20003b04
 801c354:	20003b6c 	.word	0x20003b6c

0801c358 <global_stdio_init.part.0>:
 801c358:	b510      	push	{r4, lr}
 801c35a:	4b0b      	ldr	r3, [pc, #44]	; (801c388 <global_stdio_init.part.0+0x30>)
 801c35c:	4c0b      	ldr	r4, [pc, #44]	; (801c38c <global_stdio_init.part.0+0x34>)
 801c35e:	4a0c      	ldr	r2, [pc, #48]	; (801c390 <global_stdio_init.part.0+0x38>)
 801c360:	4620      	mov	r0, r4
 801c362:	601a      	str	r2, [r3, #0]
 801c364:	2104      	movs	r1, #4
 801c366:	2200      	movs	r2, #0
 801c368:	f7ff ffa6 	bl	801c2b8 <std>
 801c36c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801c370:	2201      	movs	r2, #1
 801c372:	2109      	movs	r1, #9
 801c374:	f7ff ffa0 	bl	801c2b8 <std>
 801c378:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801c37c:	2202      	movs	r2, #2
 801c37e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c382:	2112      	movs	r1, #18
 801c384:	f7ff bf98 	b.w	801c2b8 <std>
 801c388:	20003bd4 	.word	0x20003bd4
 801c38c:	20003a9c 	.word	0x20003a9c
 801c390:	0801c301 	.word	0x0801c301

0801c394 <__sfp_lock_acquire>:
 801c394:	4801      	ldr	r0, [pc, #4]	; (801c39c <__sfp_lock_acquire+0x8>)
 801c396:	f000 b97b 	b.w	801c690 <__retarget_lock_acquire_recursive>
 801c39a:	bf00      	nop
 801c39c:	20003bdd 	.word	0x20003bdd

0801c3a0 <__sfp_lock_release>:
 801c3a0:	4801      	ldr	r0, [pc, #4]	; (801c3a8 <__sfp_lock_release+0x8>)
 801c3a2:	f000 b976 	b.w	801c692 <__retarget_lock_release_recursive>
 801c3a6:	bf00      	nop
 801c3a8:	20003bdd 	.word	0x20003bdd

0801c3ac <__sinit>:
 801c3ac:	b510      	push	{r4, lr}
 801c3ae:	4604      	mov	r4, r0
 801c3b0:	f7ff fff0 	bl	801c394 <__sfp_lock_acquire>
 801c3b4:	6a23      	ldr	r3, [r4, #32]
 801c3b6:	b11b      	cbz	r3, 801c3c0 <__sinit+0x14>
 801c3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c3bc:	f7ff bff0 	b.w	801c3a0 <__sfp_lock_release>
 801c3c0:	4b04      	ldr	r3, [pc, #16]	; (801c3d4 <__sinit+0x28>)
 801c3c2:	6223      	str	r3, [r4, #32]
 801c3c4:	4b04      	ldr	r3, [pc, #16]	; (801c3d8 <__sinit+0x2c>)
 801c3c6:	681b      	ldr	r3, [r3, #0]
 801c3c8:	2b00      	cmp	r3, #0
 801c3ca:	d1f5      	bne.n	801c3b8 <__sinit+0xc>
 801c3cc:	f7ff ffc4 	bl	801c358 <global_stdio_init.part.0>
 801c3d0:	e7f2      	b.n	801c3b8 <__sinit+0xc>
 801c3d2:	bf00      	nop
 801c3d4:	0801c319 	.word	0x0801c319
 801c3d8:	20003bd4 	.word	0x20003bd4

0801c3dc <_fwalk_sglue>:
 801c3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c3e0:	4607      	mov	r7, r0
 801c3e2:	4688      	mov	r8, r1
 801c3e4:	4614      	mov	r4, r2
 801c3e6:	2600      	movs	r6, #0
 801c3e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c3ec:	f1b9 0901 	subs.w	r9, r9, #1
 801c3f0:	d505      	bpl.n	801c3fe <_fwalk_sglue+0x22>
 801c3f2:	6824      	ldr	r4, [r4, #0]
 801c3f4:	2c00      	cmp	r4, #0
 801c3f6:	d1f7      	bne.n	801c3e8 <_fwalk_sglue+0xc>
 801c3f8:	4630      	mov	r0, r6
 801c3fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c3fe:	89ab      	ldrh	r3, [r5, #12]
 801c400:	2b01      	cmp	r3, #1
 801c402:	d907      	bls.n	801c414 <_fwalk_sglue+0x38>
 801c404:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c408:	3301      	adds	r3, #1
 801c40a:	d003      	beq.n	801c414 <_fwalk_sglue+0x38>
 801c40c:	4629      	mov	r1, r5
 801c40e:	4638      	mov	r0, r7
 801c410:	47c0      	blx	r8
 801c412:	4306      	orrs	r6, r0
 801c414:	3568      	adds	r5, #104	; 0x68
 801c416:	e7e9      	b.n	801c3ec <_fwalk_sglue+0x10>

0801c418 <siprintf>:
 801c418:	b40e      	push	{r1, r2, r3}
 801c41a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c41e:	b500      	push	{lr}
 801c420:	b09c      	sub	sp, #112	; 0x70
 801c422:	ab1d      	add	r3, sp, #116	; 0x74
 801c424:	9002      	str	r0, [sp, #8]
 801c426:	9006      	str	r0, [sp, #24]
 801c428:	9107      	str	r1, [sp, #28]
 801c42a:	9104      	str	r1, [sp, #16]
 801c42c:	4808      	ldr	r0, [pc, #32]	; (801c450 <siprintf+0x38>)
 801c42e:	4909      	ldr	r1, [pc, #36]	; (801c454 <siprintf+0x3c>)
 801c430:	f853 2b04 	ldr.w	r2, [r3], #4
 801c434:	9105      	str	r1, [sp, #20]
 801c436:	6800      	ldr	r0, [r0, #0]
 801c438:	a902      	add	r1, sp, #8
 801c43a:	9301      	str	r3, [sp, #4]
 801c43c:	f001 fc92 	bl	801dd64 <_svfiprintf_r>
 801c440:	2200      	movs	r2, #0
 801c442:	9b02      	ldr	r3, [sp, #8]
 801c444:	701a      	strb	r2, [r3, #0]
 801c446:	b01c      	add	sp, #112	; 0x70
 801c448:	f85d eb04 	ldr.w	lr, [sp], #4
 801c44c:	b003      	add	sp, #12
 801c44e:	4770      	bx	lr
 801c450:	20000874 	.word	0x20000874
 801c454:	ffff0208 	.word	0xffff0208

0801c458 <__sread>:
 801c458:	b510      	push	{r4, lr}
 801c45a:	460c      	mov	r4, r1
 801c45c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c460:	f000 f8c8 	bl	801c5f4 <_read_r>
 801c464:	2800      	cmp	r0, #0
 801c466:	bfab      	itete	ge
 801c468:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c46a:	89a3      	ldrhlt	r3, [r4, #12]
 801c46c:	181b      	addge	r3, r3, r0
 801c46e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c472:	bfac      	ite	ge
 801c474:	6563      	strge	r3, [r4, #84]	; 0x54
 801c476:	81a3      	strhlt	r3, [r4, #12]
 801c478:	bd10      	pop	{r4, pc}

0801c47a <__swrite>:
 801c47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c47e:	461f      	mov	r7, r3
 801c480:	898b      	ldrh	r3, [r1, #12]
 801c482:	4605      	mov	r5, r0
 801c484:	05db      	lsls	r3, r3, #23
 801c486:	460c      	mov	r4, r1
 801c488:	4616      	mov	r6, r2
 801c48a:	d505      	bpl.n	801c498 <__swrite+0x1e>
 801c48c:	2302      	movs	r3, #2
 801c48e:	2200      	movs	r2, #0
 801c490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c494:	f000 f89c 	bl	801c5d0 <_lseek_r>
 801c498:	89a3      	ldrh	r3, [r4, #12]
 801c49a:	4632      	mov	r2, r6
 801c49c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c4a0:	81a3      	strh	r3, [r4, #12]
 801c4a2:	4628      	mov	r0, r5
 801c4a4:	463b      	mov	r3, r7
 801c4a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c4aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c4ae:	f000 b8b3 	b.w	801c618 <_write_r>

0801c4b2 <__sseek>:
 801c4b2:	b510      	push	{r4, lr}
 801c4b4:	460c      	mov	r4, r1
 801c4b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c4ba:	f000 f889 	bl	801c5d0 <_lseek_r>
 801c4be:	1c43      	adds	r3, r0, #1
 801c4c0:	89a3      	ldrh	r3, [r4, #12]
 801c4c2:	bf15      	itete	ne
 801c4c4:	6560      	strne	r0, [r4, #84]	; 0x54
 801c4c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c4ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c4ce:	81a3      	strheq	r3, [r4, #12]
 801c4d0:	bf18      	it	ne
 801c4d2:	81a3      	strhne	r3, [r4, #12]
 801c4d4:	bd10      	pop	{r4, pc}

0801c4d6 <__sclose>:
 801c4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c4da:	f000 b869 	b.w	801c5b0 <_close_r>

0801c4de <memset>:
 801c4de:	4603      	mov	r3, r0
 801c4e0:	4402      	add	r2, r0
 801c4e2:	4293      	cmp	r3, r2
 801c4e4:	d100      	bne.n	801c4e8 <memset+0xa>
 801c4e6:	4770      	bx	lr
 801c4e8:	f803 1b01 	strb.w	r1, [r3], #1
 801c4ec:	e7f9      	b.n	801c4e2 <memset+0x4>
	...

0801c4f0 <strtok>:
 801c4f0:	4b16      	ldr	r3, [pc, #88]	; (801c54c <strtok+0x5c>)
 801c4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c4f6:	681f      	ldr	r7, [r3, #0]
 801c4f8:	4605      	mov	r5, r0
 801c4fa:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801c4fc:	460e      	mov	r6, r1
 801c4fe:	b9ec      	cbnz	r4, 801c53c <strtok+0x4c>
 801c500:	2050      	movs	r0, #80	; 0x50
 801c502:	f000 ffa9 	bl	801d458 <malloc>
 801c506:	4602      	mov	r2, r0
 801c508:	6478      	str	r0, [r7, #68]	; 0x44
 801c50a:	b920      	cbnz	r0, 801c516 <strtok+0x26>
 801c50c:	215b      	movs	r1, #91	; 0x5b
 801c50e:	4b10      	ldr	r3, [pc, #64]	; (801c550 <strtok+0x60>)
 801c510:	4810      	ldr	r0, [pc, #64]	; (801c554 <strtok+0x64>)
 801c512:	f000 f8cd 	bl	801c6b0 <__assert_func>
 801c516:	e9c0 4400 	strd	r4, r4, [r0]
 801c51a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801c51e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801c522:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801c526:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801c52a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801c52e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801c532:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801c536:	6184      	str	r4, [r0, #24]
 801c538:	7704      	strb	r4, [r0, #28]
 801c53a:	6244      	str	r4, [r0, #36]	; 0x24
 801c53c:	4631      	mov	r1, r6
 801c53e:	4628      	mov	r0, r5
 801c540:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c542:	2301      	movs	r3, #1
 801c544:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c548:	f000 b806 	b.w	801c558 <__strtok_r>
 801c54c:	20000874 	.word	0x20000874
 801c550:	0801ed37 	.word	0x0801ed37
 801c554:	0801ed4e 	.word	0x0801ed4e

0801c558 <__strtok_r>:
 801c558:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c55a:	b908      	cbnz	r0, 801c560 <__strtok_r+0x8>
 801c55c:	6810      	ldr	r0, [r2, #0]
 801c55e:	b188      	cbz	r0, 801c584 <__strtok_r+0x2c>
 801c560:	4604      	mov	r4, r0
 801c562:	460f      	mov	r7, r1
 801c564:	4620      	mov	r0, r4
 801c566:	f814 5b01 	ldrb.w	r5, [r4], #1
 801c56a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801c56e:	b91e      	cbnz	r6, 801c578 <__strtok_r+0x20>
 801c570:	b965      	cbnz	r5, 801c58c <__strtok_r+0x34>
 801c572:	4628      	mov	r0, r5
 801c574:	6015      	str	r5, [r2, #0]
 801c576:	e005      	b.n	801c584 <__strtok_r+0x2c>
 801c578:	42b5      	cmp	r5, r6
 801c57a:	d1f6      	bne.n	801c56a <__strtok_r+0x12>
 801c57c:	2b00      	cmp	r3, #0
 801c57e:	d1f0      	bne.n	801c562 <__strtok_r+0xa>
 801c580:	6014      	str	r4, [r2, #0]
 801c582:	7003      	strb	r3, [r0, #0]
 801c584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c586:	461c      	mov	r4, r3
 801c588:	e00c      	b.n	801c5a4 <__strtok_r+0x4c>
 801c58a:	b915      	cbnz	r5, 801c592 <__strtok_r+0x3a>
 801c58c:	460e      	mov	r6, r1
 801c58e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c592:	f816 5b01 	ldrb.w	r5, [r6], #1
 801c596:	42ab      	cmp	r3, r5
 801c598:	d1f7      	bne.n	801c58a <__strtok_r+0x32>
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	d0f3      	beq.n	801c586 <__strtok_r+0x2e>
 801c59e:	2300      	movs	r3, #0
 801c5a0:	f804 3c01 	strb.w	r3, [r4, #-1]
 801c5a4:	6014      	str	r4, [r2, #0]
 801c5a6:	e7ed      	b.n	801c584 <__strtok_r+0x2c>

0801c5a8 <_localeconv_r>:
 801c5a8:	4800      	ldr	r0, [pc, #0]	; (801c5ac <_localeconv_r+0x4>)
 801c5aa:	4770      	bx	lr
 801c5ac:	20000968 	.word	0x20000968

0801c5b0 <_close_r>:
 801c5b0:	b538      	push	{r3, r4, r5, lr}
 801c5b2:	2300      	movs	r3, #0
 801c5b4:	4d05      	ldr	r5, [pc, #20]	; (801c5cc <_close_r+0x1c>)
 801c5b6:	4604      	mov	r4, r0
 801c5b8:	4608      	mov	r0, r1
 801c5ba:	602b      	str	r3, [r5, #0]
 801c5bc:	f7f1 fc04 	bl	800ddc8 <_close>
 801c5c0:	1c43      	adds	r3, r0, #1
 801c5c2:	d102      	bne.n	801c5ca <_close_r+0x1a>
 801c5c4:	682b      	ldr	r3, [r5, #0]
 801c5c6:	b103      	cbz	r3, 801c5ca <_close_r+0x1a>
 801c5c8:	6023      	str	r3, [r4, #0]
 801c5ca:	bd38      	pop	{r3, r4, r5, pc}
 801c5cc:	20003bd8 	.word	0x20003bd8

0801c5d0 <_lseek_r>:
 801c5d0:	b538      	push	{r3, r4, r5, lr}
 801c5d2:	4604      	mov	r4, r0
 801c5d4:	4608      	mov	r0, r1
 801c5d6:	4611      	mov	r1, r2
 801c5d8:	2200      	movs	r2, #0
 801c5da:	4d05      	ldr	r5, [pc, #20]	; (801c5f0 <_lseek_r+0x20>)
 801c5dc:	602a      	str	r2, [r5, #0]
 801c5de:	461a      	mov	r2, r3
 801c5e0:	f7f1 fc16 	bl	800de10 <_lseek>
 801c5e4:	1c43      	adds	r3, r0, #1
 801c5e6:	d102      	bne.n	801c5ee <_lseek_r+0x1e>
 801c5e8:	682b      	ldr	r3, [r5, #0]
 801c5ea:	b103      	cbz	r3, 801c5ee <_lseek_r+0x1e>
 801c5ec:	6023      	str	r3, [r4, #0]
 801c5ee:	bd38      	pop	{r3, r4, r5, pc}
 801c5f0:	20003bd8 	.word	0x20003bd8

0801c5f4 <_read_r>:
 801c5f4:	b538      	push	{r3, r4, r5, lr}
 801c5f6:	4604      	mov	r4, r0
 801c5f8:	4608      	mov	r0, r1
 801c5fa:	4611      	mov	r1, r2
 801c5fc:	2200      	movs	r2, #0
 801c5fe:	4d05      	ldr	r5, [pc, #20]	; (801c614 <_read_r+0x20>)
 801c600:	602a      	str	r2, [r5, #0]
 801c602:	461a      	mov	r2, r3
 801c604:	f7f1 fba7 	bl	800dd56 <_read>
 801c608:	1c43      	adds	r3, r0, #1
 801c60a:	d102      	bne.n	801c612 <_read_r+0x1e>
 801c60c:	682b      	ldr	r3, [r5, #0]
 801c60e:	b103      	cbz	r3, 801c612 <_read_r+0x1e>
 801c610:	6023      	str	r3, [r4, #0]
 801c612:	bd38      	pop	{r3, r4, r5, pc}
 801c614:	20003bd8 	.word	0x20003bd8

0801c618 <_write_r>:
 801c618:	b538      	push	{r3, r4, r5, lr}
 801c61a:	4604      	mov	r4, r0
 801c61c:	4608      	mov	r0, r1
 801c61e:	4611      	mov	r1, r2
 801c620:	2200      	movs	r2, #0
 801c622:	4d05      	ldr	r5, [pc, #20]	; (801c638 <_write_r+0x20>)
 801c624:	602a      	str	r2, [r5, #0]
 801c626:	461a      	mov	r2, r3
 801c628:	f7f1 fbb2 	bl	800dd90 <_write>
 801c62c:	1c43      	adds	r3, r0, #1
 801c62e:	d102      	bne.n	801c636 <_write_r+0x1e>
 801c630:	682b      	ldr	r3, [r5, #0]
 801c632:	b103      	cbz	r3, 801c636 <_write_r+0x1e>
 801c634:	6023      	str	r3, [r4, #0]
 801c636:	bd38      	pop	{r3, r4, r5, pc}
 801c638:	20003bd8 	.word	0x20003bd8

0801c63c <__errno>:
 801c63c:	4b01      	ldr	r3, [pc, #4]	; (801c644 <__errno+0x8>)
 801c63e:	6818      	ldr	r0, [r3, #0]
 801c640:	4770      	bx	lr
 801c642:	bf00      	nop
 801c644:	20000874 	.word	0x20000874

0801c648 <__libc_init_array>:
 801c648:	b570      	push	{r4, r5, r6, lr}
 801c64a:	2600      	movs	r6, #0
 801c64c:	4d0c      	ldr	r5, [pc, #48]	; (801c680 <__libc_init_array+0x38>)
 801c64e:	4c0d      	ldr	r4, [pc, #52]	; (801c684 <__libc_init_array+0x3c>)
 801c650:	1b64      	subs	r4, r4, r5
 801c652:	10a4      	asrs	r4, r4, #2
 801c654:	42a6      	cmp	r6, r4
 801c656:	d109      	bne.n	801c66c <__libc_init_array+0x24>
 801c658:	f002 f886 	bl	801e768 <_init>
 801c65c:	2600      	movs	r6, #0
 801c65e:	4d0a      	ldr	r5, [pc, #40]	; (801c688 <__libc_init_array+0x40>)
 801c660:	4c0a      	ldr	r4, [pc, #40]	; (801c68c <__libc_init_array+0x44>)
 801c662:	1b64      	subs	r4, r4, r5
 801c664:	10a4      	asrs	r4, r4, #2
 801c666:	42a6      	cmp	r6, r4
 801c668:	d105      	bne.n	801c676 <__libc_init_array+0x2e>
 801c66a:	bd70      	pop	{r4, r5, r6, pc}
 801c66c:	f855 3b04 	ldr.w	r3, [r5], #4
 801c670:	4798      	blx	r3
 801c672:	3601      	adds	r6, #1
 801c674:	e7ee      	b.n	801c654 <__libc_init_array+0xc>
 801c676:	f855 3b04 	ldr.w	r3, [r5], #4
 801c67a:	4798      	blx	r3
 801c67c:	3601      	adds	r6, #1
 801c67e:	e7f2      	b.n	801c666 <__libc_init_array+0x1e>
 801c680:	0801efd0 	.word	0x0801efd0
 801c684:	0801efd0 	.word	0x0801efd0
 801c688:	0801efd0 	.word	0x0801efd0
 801c68c:	0801efd4 	.word	0x0801efd4

0801c690 <__retarget_lock_acquire_recursive>:
 801c690:	4770      	bx	lr

0801c692 <__retarget_lock_release_recursive>:
 801c692:	4770      	bx	lr

0801c694 <memchr>:
 801c694:	4603      	mov	r3, r0
 801c696:	b510      	push	{r4, lr}
 801c698:	b2c9      	uxtb	r1, r1
 801c69a:	4402      	add	r2, r0
 801c69c:	4293      	cmp	r3, r2
 801c69e:	4618      	mov	r0, r3
 801c6a0:	d101      	bne.n	801c6a6 <memchr+0x12>
 801c6a2:	2000      	movs	r0, #0
 801c6a4:	e003      	b.n	801c6ae <memchr+0x1a>
 801c6a6:	7804      	ldrb	r4, [r0, #0]
 801c6a8:	3301      	adds	r3, #1
 801c6aa:	428c      	cmp	r4, r1
 801c6ac:	d1f6      	bne.n	801c69c <memchr+0x8>
 801c6ae:	bd10      	pop	{r4, pc}

0801c6b0 <__assert_func>:
 801c6b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c6b2:	4614      	mov	r4, r2
 801c6b4:	461a      	mov	r2, r3
 801c6b6:	4b09      	ldr	r3, [pc, #36]	; (801c6dc <__assert_func+0x2c>)
 801c6b8:	4605      	mov	r5, r0
 801c6ba:	681b      	ldr	r3, [r3, #0]
 801c6bc:	68d8      	ldr	r0, [r3, #12]
 801c6be:	b14c      	cbz	r4, 801c6d4 <__assert_func+0x24>
 801c6c0:	4b07      	ldr	r3, [pc, #28]	; (801c6e0 <__assert_func+0x30>)
 801c6c2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c6c6:	9100      	str	r1, [sp, #0]
 801c6c8:	462b      	mov	r3, r5
 801c6ca:	4906      	ldr	r1, [pc, #24]	; (801c6e4 <__assert_func+0x34>)
 801c6cc:	f001 fcf2 	bl	801e0b4 <fiprintf>
 801c6d0:	f001 fd3a 	bl	801e148 <abort>
 801c6d4:	4b04      	ldr	r3, [pc, #16]	; (801c6e8 <__assert_func+0x38>)
 801c6d6:	461c      	mov	r4, r3
 801c6d8:	e7f3      	b.n	801c6c2 <__assert_func+0x12>
 801c6da:	bf00      	nop
 801c6dc:	20000874 	.word	0x20000874
 801c6e0:	0801eda8 	.word	0x0801eda8
 801c6e4:	0801edb5 	.word	0x0801edb5
 801c6e8:	0801ede3 	.word	0x0801ede3

0801c6ec <quorem>:
 801c6ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6f0:	6903      	ldr	r3, [r0, #16]
 801c6f2:	690c      	ldr	r4, [r1, #16]
 801c6f4:	4607      	mov	r7, r0
 801c6f6:	42a3      	cmp	r3, r4
 801c6f8:	db7f      	blt.n	801c7fa <quorem+0x10e>
 801c6fa:	3c01      	subs	r4, #1
 801c6fc:	f100 0514 	add.w	r5, r0, #20
 801c700:	f101 0814 	add.w	r8, r1, #20
 801c704:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c708:	9301      	str	r3, [sp, #4]
 801c70a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c70e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c712:	3301      	adds	r3, #1
 801c714:	429a      	cmp	r2, r3
 801c716:	fbb2 f6f3 	udiv	r6, r2, r3
 801c71a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c71e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c722:	d331      	bcc.n	801c788 <quorem+0x9c>
 801c724:	f04f 0e00 	mov.w	lr, #0
 801c728:	4640      	mov	r0, r8
 801c72a:	46ac      	mov	ip, r5
 801c72c:	46f2      	mov	sl, lr
 801c72e:	f850 2b04 	ldr.w	r2, [r0], #4
 801c732:	b293      	uxth	r3, r2
 801c734:	fb06 e303 	mla	r3, r6, r3, lr
 801c738:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c73c:	0c1a      	lsrs	r2, r3, #16
 801c73e:	b29b      	uxth	r3, r3
 801c740:	fb06 220e 	mla	r2, r6, lr, r2
 801c744:	ebaa 0303 	sub.w	r3, sl, r3
 801c748:	f8dc a000 	ldr.w	sl, [ip]
 801c74c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c750:	fa1f fa8a 	uxth.w	sl, sl
 801c754:	4453      	add	r3, sl
 801c756:	f8dc a000 	ldr.w	sl, [ip]
 801c75a:	b292      	uxth	r2, r2
 801c75c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801c760:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c764:	b29b      	uxth	r3, r3
 801c766:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c76a:	4581      	cmp	r9, r0
 801c76c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c770:	f84c 3b04 	str.w	r3, [ip], #4
 801c774:	d2db      	bcs.n	801c72e <quorem+0x42>
 801c776:	f855 300b 	ldr.w	r3, [r5, fp]
 801c77a:	b92b      	cbnz	r3, 801c788 <quorem+0x9c>
 801c77c:	9b01      	ldr	r3, [sp, #4]
 801c77e:	3b04      	subs	r3, #4
 801c780:	429d      	cmp	r5, r3
 801c782:	461a      	mov	r2, r3
 801c784:	d32d      	bcc.n	801c7e2 <quorem+0xf6>
 801c786:	613c      	str	r4, [r7, #16]
 801c788:	4638      	mov	r0, r7
 801c78a:	f001 f993 	bl	801dab4 <__mcmp>
 801c78e:	2800      	cmp	r0, #0
 801c790:	db23      	blt.n	801c7da <quorem+0xee>
 801c792:	4629      	mov	r1, r5
 801c794:	2000      	movs	r0, #0
 801c796:	3601      	adds	r6, #1
 801c798:	f858 2b04 	ldr.w	r2, [r8], #4
 801c79c:	f8d1 c000 	ldr.w	ip, [r1]
 801c7a0:	b293      	uxth	r3, r2
 801c7a2:	1ac3      	subs	r3, r0, r3
 801c7a4:	0c12      	lsrs	r2, r2, #16
 801c7a6:	fa1f f08c 	uxth.w	r0, ip
 801c7aa:	4403      	add	r3, r0
 801c7ac:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801c7b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c7b4:	b29b      	uxth	r3, r3
 801c7b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c7ba:	45c1      	cmp	r9, r8
 801c7bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 801c7c0:	f841 3b04 	str.w	r3, [r1], #4
 801c7c4:	d2e8      	bcs.n	801c798 <quorem+0xac>
 801c7c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c7ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c7ce:	b922      	cbnz	r2, 801c7da <quorem+0xee>
 801c7d0:	3b04      	subs	r3, #4
 801c7d2:	429d      	cmp	r5, r3
 801c7d4:	461a      	mov	r2, r3
 801c7d6:	d30a      	bcc.n	801c7ee <quorem+0x102>
 801c7d8:	613c      	str	r4, [r7, #16]
 801c7da:	4630      	mov	r0, r6
 801c7dc:	b003      	add	sp, #12
 801c7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7e2:	6812      	ldr	r2, [r2, #0]
 801c7e4:	3b04      	subs	r3, #4
 801c7e6:	2a00      	cmp	r2, #0
 801c7e8:	d1cd      	bne.n	801c786 <quorem+0x9a>
 801c7ea:	3c01      	subs	r4, #1
 801c7ec:	e7c8      	b.n	801c780 <quorem+0x94>
 801c7ee:	6812      	ldr	r2, [r2, #0]
 801c7f0:	3b04      	subs	r3, #4
 801c7f2:	2a00      	cmp	r2, #0
 801c7f4:	d1f0      	bne.n	801c7d8 <quorem+0xec>
 801c7f6:	3c01      	subs	r4, #1
 801c7f8:	e7eb      	b.n	801c7d2 <quorem+0xe6>
 801c7fa:	2000      	movs	r0, #0
 801c7fc:	e7ee      	b.n	801c7dc <quorem+0xf0>
	...

0801c800 <_dtoa_r>:
 801c800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c804:	4616      	mov	r6, r2
 801c806:	461f      	mov	r7, r3
 801c808:	69c4      	ldr	r4, [r0, #28]
 801c80a:	b099      	sub	sp, #100	; 0x64
 801c80c:	4605      	mov	r5, r0
 801c80e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801c812:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 801c816:	b974      	cbnz	r4, 801c836 <_dtoa_r+0x36>
 801c818:	2010      	movs	r0, #16
 801c81a:	f000 fe1d 	bl	801d458 <malloc>
 801c81e:	4602      	mov	r2, r0
 801c820:	61e8      	str	r0, [r5, #28]
 801c822:	b920      	cbnz	r0, 801c82e <_dtoa_r+0x2e>
 801c824:	21ef      	movs	r1, #239	; 0xef
 801c826:	4bac      	ldr	r3, [pc, #688]	; (801cad8 <_dtoa_r+0x2d8>)
 801c828:	48ac      	ldr	r0, [pc, #688]	; (801cadc <_dtoa_r+0x2dc>)
 801c82a:	f7ff ff41 	bl	801c6b0 <__assert_func>
 801c82e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c832:	6004      	str	r4, [r0, #0]
 801c834:	60c4      	str	r4, [r0, #12]
 801c836:	69eb      	ldr	r3, [r5, #28]
 801c838:	6819      	ldr	r1, [r3, #0]
 801c83a:	b151      	cbz	r1, 801c852 <_dtoa_r+0x52>
 801c83c:	685a      	ldr	r2, [r3, #4]
 801c83e:	2301      	movs	r3, #1
 801c840:	4093      	lsls	r3, r2
 801c842:	604a      	str	r2, [r1, #4]
 801c844:	608b      	str	r3, [r1, #8]
 801c846:	4628      	mov	r0, r5
 801c848:	f000 fefa 	bl	801d640 <_Bfree>
 801c84c:	2200      	movs	r2, #0
 801c84e:	69eb      	ldr	r3, [r5, #28]
 801c850:	601a      	str	r2, [r3, #0]
 801c852:	1e3b      	subs	r3, r7, #0
 801c854:	bfaf      	iteee	ge
 801c856:	2300      	movge	r3, #0
 801c858:	2201      	movlt	r2, #1
 801c85a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c85e:	9305      	strlt	r3, [sp, #20]
 801c860:	bfa8      	it	ge
 801c862:	f8c8 3000 	strge.w	r3, [r8]
 801c866:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801c86a:	4b9d      	ldr	r3, [pc, #628]	; (801cae0 <_dtoa_r+0x2e0>)
 801c86c:	bfb8      	it	lt
 801c86e:	f8c8 2000 	strlt.w	r2, [r8]
 801c872:	ea33 0309 	bics.w	r3, r3, r9
 801c876:	d119      	bne.n	801c8ac <_dtoa_r+0xac>
 801c878:	f242 730f 	movw	r3, #9999	; 0x270f
 801c87c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801c87e:	6013      	str	r3, [r2, #0]
 801c880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c884:	4333      	orrs	r3, r6
 801c886:	f000 8589 	beq.w	801d39c <_dtoa_r+0xb9c>
 801c88a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c88c:	b953      	cbnz	r3, 801c8a4 <_dtoa_r+0xa4>
 801c88e:	4b95      	ldr	r3, [pc, #596]	; (801cae4 <_dtoa_r+0x2e4>)
 801c890:	e023      	b.n	801c8da <_dtoa_r+0xda>
 801c892:	4b95      	ldr	r3, [pc, #596]	; (801cae8 <_dtoa_r+0x2e8>)
 801c894:	9303      	str	r3, [sp, #12]
 801c896:	3308      	adds	r3, #8
 801c898:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801c89a:	6013      	str	r3, [r2, #0]
 801c89c:	9803      	ldr	r0, [sp, #12]
 801c89e:	b019      	add	sp, #100	; 0x64
 801c8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8a4:	4b8f      	ldr	r3, [pc, #572]	; (801cae4 <_dtoa_r+0x2e4>)
 801c8a6:	9303      	str	r3, [sp, #12]
 801c8a8:	3303      	adds	r3, #3
 801c8aa:	e7f5      	b.n	801c898 <_dtoa_r+0x98>
 801c8ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801c8b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 801c8b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c8b8:	2200      	movs	r2, #0
 801c8ba:	2300      	movs	r3, #0
 801c8bc:	f7ec f8e0 	bl	8008a80 <__aeabi_dcmpeq>
 801c8c0:	4680      	mov	r8, r0
 801c8c2:	b160      	cbz	r0, 801c8de <_dtoa_r+0xde>
 801c8c4:	2301      	movs	r3, #1
 801c8c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801c8c8:	6013      	str	r3, [r2, #0]
 801c8ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c8cc:	2b00      	cmp	r3, #0
 801c8ce:	f000 8562 	beq.w	801d396 <_dtoa_r+0xb96>
 801c8d2:	4b86      	ldr	r3, [pc, #536]	; (801caec <_dtoa_r+0x2ec>)
 801c8d4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801c8d6:	6013      	str	r3, [r2, #0]
 801c8d8:	3b01      	subs	r3, #1
 801c8da:	9303      	str	r3, [sp, #12]
 801c8dc:	e7de      	b.n	801c89c <_dtoa_r+0x9c>
 801c8de:	ab16      	add	r3, sp, #88	; 0x58
 801c8e0:	9301      	str	r3, [sp, #4]
 801c8e2:	ab17      	add	r3, sp, #92	; 0x5c
 801c8e4:	9300      	str	r3, [sp, #0]
 801c8e6:	4628      	mov	r0, r5
 801c8e8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801c8ec:	f001 f98a 	bl	801dc04 <__d2b>
 801c8f0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801c8f4:	4682      	mov	sl, r0
 801c8f6:	2c00      	cmp	r4, #0
 801c8f8:	d07e      	beq.n	801c9f8 <_dtoa_r+0x1f8>
 801c8fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c8fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c900:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801c904:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c908:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801c90c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801c910:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801c914:	4619      	mov	r1, r3
 801c916:	2200      	movs	r2, #0
 801c918:	4b75      	ldr	r3, [pc, #468]	; (801caf0 <_dtoa_r+0x2f0>)
 801c91a:	f7eb fc91 	bl	8008240 <__aeabi_dsub>
 801c91e:	a368      	add	r3, pc, #416	; (adr r3, 801cac0 <_dtoa_r+0x2c0>)
 801c920:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c924:	f7eb fe44 	bl	80085b0 <__aeabi_dmul>
 801c928:	a367      	add	r3, pc, #412	; (adr r3, 801cac8 <_dtoa_r+0x2c8>)
 801c92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c92e:	f7eb fc89 	bl	8008244 <__adddf3>
 801c932:	4606      	mov	r6, r0
 801c934:	4620      	mov	r0, r4
 801c936:	460f      	mov	r7, r1
 801c938:	f7eb fdd0 	bl	80084dc <__aeabi_i2d>
 801c93c:	a364      	add	r3, pc, #400	; (adr r3, 801cad0 <_dtoa_r+0x2d0>)
 801c93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c942:	f7eb fe35 	bl	80085b0 <__aeabi_dmul>
 801c946:	4602      	mov	r2, r0
 801c948:	460b      	mov	r3, r1
 801c94a:	4630      	mov	r0, r6
 801c94c:	4639      	mov	r1, r7
 801c94e:	f7eb fc79 	bl	8008244 <__adddf3>
 801c952:	4606      	mov	r6, r0
 801c954:	460f      	mov	r7, r1
 801c956:	f7ec f8db 	bl	8008b10 <__aeabi_d2iz>
 801c95a:	2200      	movs	r2, #0
 801c95c:	4683      	mov	fp, r0
 801c95e:	2300      	movs	r3, #0
 801c960:	4630      	mov	r0, r6
 801c962:	4639      	mov	r1, r7
 801c964:	f7ec f896 	bl	8008a94 <__aeabi_dcmplt>
 801c968:	b148      	cbz	r0, 801c97e <_dtoa_r+0x17e>
 801c96a:	4658      	mov	r0, fp
 801c96c:	f7eb fdb6 	bl	80084dc <__aeabi_i2d>
 801c970:	4632      	mov	r2, r6
 801c972:	463b      	mov	r3, r7
 801c974:	f7ec f884 	bl	8008a80 <__aeabi_dcmpeq>
 801c978:	b908      	cbnz	r0, 801c97e <_dtoa_r+0x17e>
 801c97a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c97e:	f1bb 0f16 	cmp.w	fp, #22
 801c982:	d857      	bhi.n	801ca34 <_dtoa_r+0x234>
 801c984:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c988:	4b5a      	ldr	r3, [pc, #360]	; (801caf4 <_dtoa_r+0x2f4>)
 801c98a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c992:	f7ec f87f 	bl	8008a94 <__aeabi_dcmplt>
 801c996:	2800      	cmp	r0, #0
 801c998:	d04e      	beq.n	801ca38 <_dtoa_r+0x238>
 801c99a:	2300      	movs	r3, #0
 801c99c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c9a0:	930f      	str	r3, [sp, #60]	; 0x3c
 801c9a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c9a4:	1b1b      	subs	r3, r3, r4
 801c9a6:	1e5a      	subs	r2, r3, #1
 801c9a8:	bf46      	itte	mi
 801c9aa:	f1c3 0901 	rsbmi	r9, r3, #1
 801c9ae:	2300      	movmi	r3, #0
 801c9b0:	f04f 0900 	movpl.w	r9, #0
 801c9b4:	9209      	str	r2, [sp, #36]	; 0x24
 801c9b6:	bf48      	it	mi
 801c9b8:	9309      	strmi	r3, [sp, #36]	; 0x24
 801c9ba:	f1bb 0f00 	cmp.w	fp, #0
 801c9be:	db3d      	blt.n	801ca3c <_dtoa_r+0x23c>
 801c9c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c9c2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801c9c6:	445b      	add	r3, fp
 801c9c8:	9309      	str	r3, [sp, #36]	; 0x24
 801c9ca:	2300      	movs	r3, #0
 801c9cc:	930a      	str	r3, [sp, #40]	; 0x28
 801c9ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c9d0:	2b09      	cmp	r3, #9
 801c9d2:	d867      	bhi.n	801caa4 <_dtoa_r+0x2a4>
 801c9d4:	2b05      	cmp	r3, #5
 801c9d6:	bfc4      	itt	gt
 801c9d8:	3b04      	subgt	r3, #4
 801c9da:	9322      	strgt	r3, [sp, #136]	; 0x88
 801c9dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c9de:	bfc8      	it	gt
 801c9e0:	2400      	movgt	r4, #0
 801c9e2:	f1a3 0302 	sub.w	r3, r3, #2
 801c9e6:	bfd8      	it	le
 801c9e8:	2401      	movle	r4, #1
 801c9ea:	2b03      	cmp	r3, #3
 801c9ec:	f200 8086 	bhi.w	801cafc <_dtoa_r+0x2fc>
 801c9f0:	e8df f003 	tbb	[pc, r3]
 801c9f4:	5637392c 	.word	0x5637392c
 801c9f8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 801c9fc:	441c      	add	r4, r3
 801c9fe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 801ca02:	2b20      	cmp	r3, #32
 801ca04:	bfc1      	itttt	gt
 801ca06:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801ca0a:	fa09 f903 	lslgt.w	r9, r9, r3
 801ca0e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 801ca12:	fa26 f303 	lsrgt.w	r3, r6, r3
 801ca16:	bfd6      	itet	le
 801ca18:	f1c3 0320 	rsble	r3, r3, #32
 801ca1c:	ea49 0003 	orrgt.w	r0, r9, r3
 801ca20:	fa06 f003 	lslle.w	r0, r6, r3
 801ca24:	f7eb fd4a 	bl	80084bc <__aeabi_ui2d>
 801ca28:	2201      	movs	r2, #1
 801ca2a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801ca2e:	3c01      	subs	r4, #1
 801ca30:	9213      	str	r2, [sp, #76]	; 0x4c
 801ca32:	e76f      	b.n	801c914 <_dtoa_r+0x114>
 801ca34:	2301      	movs	r3, #1
 801ca36:	e7b3      	b.n	801c9a0 <_dtoa_r+0x1a0>
 801ca38:	900f      	str	r0, [sp, #60]	; 0x3c
 801ca3a:	e7b2      	b.n	801c9a2 <_dtoa_r+0x1a2>
 801ca3c:	f1cb 0300 	rsb	r3, fp, #0
 801ca40:	930a      	str	r3, [sp, #40]	; 0x28
 801ca42:	2300      	movs	r3, #0
 801ca44:	eba9 090b 	sub.w	r9, r9, fp
 801ca48:	930e      	str	r3, [sp, #56]	; 0x38
 801ca4a:	e7c0      	b.n	801c9ce <_dtoa_r+0x1ce>
 801ca4c:	2300      	movs	r3, #0
 801ca4e:	930b      	str	r3, [sp, #44]	; 0x2c
 801ca50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	dc55      	bgt.n	801cb02 <_dtoa_r+0x302>
 801ca56:	2301      	movs	r3, #1
 801ca58:	461a      	mov	r2, r3
 801ca5a:	9306      	str	r3, [sp, #24]
 801ca5c:	9308      	str	r3, [sp, #32]
 801ca5e:	9223      	str	r2, [sp, #140]	; 0x8c
 801ca60:	e00b      	b.n	801ca7a <_dtoa_r+0x27a>
 801ca62:	2301      	movs	r3, #1
 801ca64:	e7f3      	b.n	801ca4e <_dtoa_r+0x24e>
 801ca66:	2300      	movs	r3, #0
 801ca68:	930b      	str	r3, [sp, #44]	; 0x2c
 801ca6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ca6c:	445b      	add	r3, fp
 801ca6e:	9306      	str	r3, [sp, #24]
 801ca70:	3301      	adds	r3, #1
 801ca72:	2b01      	cmp	r3, #1
 801ca74:	9308      	str	r3, [sp, #32]
 801ca76:	bfb8      	it	lt
 801ca78:	2301      	movlt	r3, #1
 801ca7a:	2100      	movs	r1, #0
 801ca7c:	2204      	movs	r2, #4
 801ca7e:	69e8      	ldr	r0, [r5, #28]
 801ca80:	f102 0614 	add.w	r6, r2, #20
 801ca84:	429e      	cmp	r6, r3
 801ca86:	d940      	bls.n	801cb0a <_dtoa_r+0x30a>
 801ca88:	6041      	str	r1, [r0, #4]
 801ca8a:	4628      	mov	r0, r5
 801ca8c:	f000 fd98 	bl	801d5c0 <_Balloc>
 801ca90:	9003      	str	r0, [sp, #12]
 801ca92:	2800      	cmp	r0, #0
 801ca94:	d13c      	bne.n	801cb10 <_dtoa_r+0x310>
 801ca96:	4602      	mov	r2, r0
 801ca98:	f240 11af 	movw	r1, #431	; 0x1af
 801ca9c:	4b16      	ldr	r3, [pc, #88]	; (801caf8 <_dtoa_r+0x2f8>)
 801ca9e:	e6c3      	b.n	801c828 <_dtoa_r+0x28>
 801caa0:	2301      	movs	r3, #1
 801caa2:	e7e1      	b.n	801ca68 <_dtoa_r+0x268>
 801caa4:	2401      	movs	r4, #1
 801caa6:	2300      	movs	r3, #0
 801caa8:	940b      	str	r4, [sp, #44]	; 0x2c
 801caaa:	9322      	str	r3, [sp, #136]	; 0x88
 801caac:	f04f 33ff 	mov.w	r3, #4294967295
 801cab0:	2200      	movs	r2, #0
 801cab2:	9306      	str	r3, [sp, #24]
 801cab4:	9308      	str	r3, [sp, #32]
 801cab6:	2312      	movs	r3, #18
 801cab8:	e7d1      	b.n	801ca5e <_dtoa_r+0x25e>
 801caba:	bf00      	nop
 801cabc:	f3af 8000 	nop.w
 801cac0:	636f4361 	.word	0x636f4361
 801cac4:	3fd287a7 	.word	0x3fd287a7
 801cac8:	8b60c8b3 	.word	0x8b60c8b3
 801cacc:	3fc68a28 	.word	0x3fc68a28
 801cad0:	509f79fb 	.word	0x509f79fb
 801cad4:	3fd34413 	.word	0x3fd34413
 801cad8:	0801ed37 	.word	0x0801ed37
 801cadc:	0801edf1 	.word	0x0801edf1
 801cae0:	7ff00000 	.word	0x7ff00000
 801cae4:	0801eded 	.word	0x0801eded
 801cae8:	0801ede4 	.word	0x0801ede4
 801caec:	0801ed14 	.word	0x0801ed14
 801caf0:	3ff80000 	.word	0x3ff80000
 801caf4:	0801eee0 	.word	0x0801eee0
 801caf8:	0801ee49 	.word	0x0801ee49
 801cafc:	2301      	movs	r3, #1
 801cafe:	930b      	str	r3, [sp, #44]	; 0x2c
 801cb00:	e7d4      	b.n	801caac <_dtoa_r+0x2ac>
 801cb02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cb04:	9306      	str	r3, [sp, #24]
 801cb06:	9308      	str	r3, [sp, #32]
 801cb08:	e7b7      	b.n	801ca7a <_dtoa_r+0x27a>
 801cb0a:	3101      	adds	r1, #1
 801cb0c:	0052      	lsls	r2, r2, #1
 801cb0e:	e7b7      	b.n	801ca80 <_dtoa_r+0x280>
 801cb10:	69eb      	ldr	r3, [r5, #28]
 801cb12:	9a03      	ldr	r2, [sp, #12]
 801cb14:	601a      	str	r2, [r3, #0]
 801cb16:	9b08      	ldr	r3, [sp, #32]
 801cb18:	2b0e      	cmp	r3, #14
 801cb1a:	f200 80a8 	bhi.w	801cc6e <_dtoa_r+0x46e>
 801cb1e:	2c00      	cmp	r4, #0
 801cb20:	f000 80a5 	beq.w	801cc6e <_dtoa_r+0x46e>
 801cb24:	f1bb 0f00 	cmp.w	fp, #0
 801cb28:	dd34      	ble.n	801cb94 <_dtoa_r+0x394>
 801cb2a:	4b9a      	ldr	r3, [pc, #616]	; (801cd94 <_dtoa_r+0x594>)
 801cb2c:	f00b 020f 	and.w	r2, fp, #15
 801cb30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cb34:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801cb38:	e9d3 3400 	ldrd	r3, r4, [r3]
 801cb3c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801cb40:	ea4f 142b 	mov.w	r4, fp, asr #4
 801cb44:	d016      	beq.n	801cb74 <_dtoa_r+0x374>
 801cb46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801cb4a:	4b93      	ldr	r3, [pc, #588]	; (801cd98 <_dtoa_r+0x598>)
 801cb4c:	2703      	movs	r7, #3
 801cb4e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801cb52:	f7eb fe57 	bl	8008804 <__aeabi_ddiv>
 801cb56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cb5a:	f004 040f 	and.w	r4, r4, #15
 801cb5e:	4e8e      	ldr	r6, [pc, #568]	; (801cd98 <_dtoa_r+0x598>)
 801cb60:	b954      	cbnz	r4, 801cb78 <_dtoa_r+0x378>
 801cb62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801cb66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801cb6a:	f7eb fe4b 	bl	8008804 <__aeabi_ddiv>
 801cb6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cb72:	e029      	b.n	801cbc8 <_dtoa_r+0x3c8>
 801cb74:	2702      	movs	r7, #2
 801cb76:	e7f2      	b.n	801cb5e <_dtoa_r+0x35e>
 801cb78:	07e1      	lsls	r1, r4, #31
 801cb7a:	d508      	bpl.n	801cb8e <_dtoa_r+0x38e>
 801cb7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801cb80:	e9d6 2300 	ldrd	r2, r3, [r6]
 801cb84:	f7eb fd14 	bl	80085b0 <__aeabi_dmul>
 801cb88:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801cb8c:	3701      	adds	r7, #1
 801cb8e:	1064      	asrs	r4, r4, #1
 801cb90:	3608      	adds	r6, #8
 801cb92:	e7e5      	b.n	801cb60 <_dtoa_r+0x360>
 801cb94:	f000 80a5 	beq.w	801cce2 <_dtoa_r+0x4e2>
 801cb98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801cb9c:	f1cb 0400 	rsb	r4, fp, #0
 801cba0:	4b7c      	ldr	r3, [pc, #496]	; (801cd94 <_dtoa_r+0x594>)
 801cba2:	f004 020f 	and.w	r2, r4, #15
 801cba6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbae:	f7eb fcff 	bl	80085b0 <__aeabi_dmul>
 801cbb2:	2702      	movs	r7, #2
 801cbb4:	2300      	movs	r3, #0
 801cbb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cbba:	4e77      	ldr	r6, [pc, #476]	; (801cd98 <_dtoa_r+0x598>)
 801cbbc:	1124      	asrs	r4, r4, #4
 801cbbe:	2c00      	cmp	r4, #0
 801cbc0:	f040 8084 	bne.w	801cccc <_dtoa_r+0x4cc>
 801cbc4:	2b00      	cmp	r3, #0
 801cbc6:	d1d2      	bne.n	801cb6e <_dtoa_r+0x36e>
 801cbc8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801cbcc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801cbd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cbd2:	2b00      	cmp	r3, #0
 801cbd4:	f000 8087 	beq.w	801cce6 <_dtoa_r+0x4e6>
 801cbd8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801cbdc:	2200      	movs	r2, #0
 801cbde:	4b6f      	ldr	r3, [pc, #444]	; (801cd9c <_dtoa_r+0x59c>)
 801cbe0:	f7eb ff58 	bl	8008a94 <__aeabi_dcmplt>
 801cbe4:	2800      	cmp	r0, #0
 801cbe6:	d07e      	beq.n	801cce6 <_dtoa_r+0x4e6>
 801cbe8:	9b08      	ldr	r3, [sp, #32]
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	d07b      	beq.n	801cce6 <_dtoa_r+0x4e6>
 801cbee:	9b06      	ldr	r3, [sp, #24]
 801cbf0:	2b00      	cmp	r3, #0
 801cbf2:	dd38      	ble.n	801cc66 <_dtoa_r+0x466>
 801cbf4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801cbf8:	2200      	movs	r2, #0
 801cbfa:	4b69      	ldr	r3, [pc, #420]	; (801cda0 <_dtoa_r+0x5a0>)
 801cbfc:	f7eb fcd8 	bl	80085b0 <__aeabi_dmul>
 801cc00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cc04:	9c06      	ldr	r4, [sp, #24]
 801cc06:	f10b 38ff 	add.w	r8, fp, #4294967295
 801cc0a:	3701      	adds	r7, #1
 801cc0c:	4638      	mov	r0, r7
 801cc0e:	f7eb fc65 	bl	80084dc <__aeabi_i2d>
 801cc12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cc16:	f7eb fccb 	bl	80085b0 <__aeabi_dmul>
 801cc1a:	2200      	movs	r2, #0
 801cc1c:	4b61      	ldr	r3, [pc, #388]	; (801cda4 <_dtoa_r+0x5a4>)
 801cc1e:	f7eb fb11 	bl	8008244 <__adddf3>
 801cc22:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801cc26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801cc2a:	9611      	str	r6, [sp, #68]	; 0x44
 801cc2c:	2c00      	cmp	r4, #0
 801cc2e:	d15d      	bne.n	801ccec <_dtoa_r+0x4ec>
 801cc30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801cc34:	2200      	movs	r2, #0
 801cc36:	4b5c      	ldr	r3, [pc, #368]	; (801cda8 <_dtoa_r+0x5a8>)
 801cc38:	f7eb fb02 	bl	8008240 <__aeabi_dsub>
 801cc3c:	4602      	mov	r2, r0
 801cc3e:	460b      	mov	r3, r1
 801cc40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801cc44:	4633      	mov	r3, r6
 801cc46:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cc48:	f7eb ff42 	bl	8008ad0 <__aeabi_dcmpgt>
 801cc4c:	2800      	cmp	r0, #0
 801cc4e:	f040 8295 	bne.w	801d17c <_dtoa_r+0x97c>
 801cc52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801cc56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cc58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801cc5c:	f7eb ff1a 	bl	8008a94 <__aeabi_dcmplt>
 801cc60:	2800      	cmp	r0, #0
 801cc62:	f040 8289 	bne.w	801d178 <_dtoa_r+0x978>
 801cc66:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 801cc6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801cc6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801cc70:	2b00      	cmp	r3, #0
 801cc72:	f2c0 8151 	blt.w	801cf18 <_dtoa_r+0x718>
 801cc76:	f1bb 0f0e 	cmp.w	fp, #14
 801cc7a:	f300 814d 	bgt.w	801cf18 <_dtoa_r+0x718>
 801cc7e:	4b45      	ldr	r3, [pc, #276]	; (801cd94 <_dtoa_r+0x594>)
 801cc80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801cc84:	e9d3 3400 	ldrd	r3, r4, [r3]
 801cc88:	e9cd 3406 	strd	r3, r4, [sp, #24]
 801cc8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801cc8e:	2b00      	cmp	r3, #0
 801cc90:	f280 80da 	bge.w	801ce48 <_dtoa_r+0x648>
 801cc94:	9b08      	ldr	r3, [sp, #32]
 801cc96:	2b00      	cmp	r3, #0
 801cc98:	f300 80d6 	bgt.w	801ce48 <_dtoa_r+0x648>
 801cc9c:	f040 826b 	bne.w	801d176 <_dtoa_r+0x976>
 801cca0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801cca4:	2200      	movs	r2, #0
 801cca6:	4b40      	ldr	r3, [pc, #256]	; (801cda8 <_dtoa_r+0x5a8>)
 801cca8:	f7eb fc82 	bl	80085b0 <__aeabi_dmul>
 801ccac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ccb0:	f7eb ff04 	bl	8008abc <__aeabi_dcmpge>
 801ccb4:	9c08      	ldr	r4, [sp, #32]
 801ccb6:	4626      	mov	r6, r4
 801ccb8:	2800      	cmp	r0, #0
 801ccba:	f040 8241 	bne.w	801d140 <_dtoa_r+0x940>
 801ccbe:	2331      	movs	r3, #49	; 0x31
 801ccc0:	9f03      	ldr	r7, [sp, #12]
 801ccc2:	f10b 0b01 	add.w	fp, fp, #1
 801ccc6:	f807 3b01 	strb.w	r3, [r7], #1
 801ccca:	e23d      	b.n	801d148 <_dtoa_r+0x948>
 801cccc:	07e2      	lsls	r2, r4, #31
 801ccce:	d505      	bpl.n	801ccdc <_dtoa_r+0x4dc>
 801ccd0:	e9d6 2300 	ldrd	r2, r3, [r6]
 801ccd4:	f7eb fc6c 	bl	80085b0 <__aeabi_dmul>
 801ccd8:	2301      	movs	r3, #1
 801ccda:	3701      	adds	r7, #1
 801ccdc:	1064      	asrs	r4, r4, #1
 801ccde:	3608      	adds	r6, #8
 801cce0:	e76d      	b.n	801cbbe <_dtoa_r+0x3be>
 801cce2:	2702      	movs	r7, #2
 801cce4:	e770      	b.n	801cbc8 <_dtoa_r+0x3c8>
 801cce6:	46d8      	mov	r8, fp
 801cce8:	9c08      	ldr	r4, [sp, #32]
 801ccea:	e78f      	b.n	801cc0c <_dtoa_r+0x40c>
 801ccec:	9903      	ldr	r1, [sp, #12]
 801ccee:	4b29      	ldr	r3, [pc, #164]	; (801cd94 <_dtoa_r+0x594>)
 801ccf0:	4421      	add	r1, r4
 801ccf2:	9112      	str	r1, [sp, #72]	; 0x48
 801ccf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ccf6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ccfa:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 801ccfe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801cd02:	2900      	cmp	r1, #0
 801cd04:	d054      	beq.n	801cdb0 <_dtoa_r+0x5b0>
 801cd06:	2000      	movs	r0, #0
 801cd08:	4928      	ldr	r1, [pc, #160]	; (801cdac <_dtoa_r+0x5ac>)
 801cd0a:	f7eb fd7b 	bl	8008804 <__aeabi_ddiv>
 801cd0e:	463b      	mov	r3, r7
 801cd10:	4632      	mov	r2, r6
 801cd12:	f7eb fa95 	bl	8008240 <__aeabi_dsub>
 801cd16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801cd1a:	9f03      	ldr	r7, [sp, #12]
 801cd1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801cd20:	f7eb fef6 	bl	8008b10 <__aeabi_d2iz>
 801cd24:	4604      	mov	r4, r0
 801cd26:	f7eb fbd9 	bl	80084dc <__aeabi_i2d>
 801cd2a:	4602      	mov	r2, r0
 801cd2c:	460b      	mov	r3, r1
 801cd2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801cd32:	f7eb fa85 	bl	8008240 <__aeabi_dsub>
 801cd36:	4602      	mov	r2, r0
 801cd38:	460b      	mov	r3, r1
 801cd3a:	3430      	adds	r4, #48	; 0x30
 801cd3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801cd40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801cd44:	f807 4b01 	strb.w	r4, [r7], #1
 801cd48:	f7eb fea4 	bl	8008a94 <__aeabi_dcmplt>
 801cd4c:	2800      	cmp	r0, #0
 801cd4e:	d173      	bne.n	801ce38 <_dtoa_r+0x638>
 801cd50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801cd54:	2000      	movs	r0, #0
 801cd56:	4911      	ldr	r1, [pc, #68]	; (801cd9c <_dtoa_r+0x59c>)
 801cd58:	f7eb fa72 	bl	8008240 <__aeabi_dsub>
 801cd5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801cd60:	f7eb fe98 	bl	8008a94 <__aeabi_dcmplt>
 801cd64:	2800      	cmp	r0, #0
 801cd66:	f040 80b6 	bne.w	801ced6 <_dtoa_r+0x6d6>
 801cd6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cd6c:	429f      	cmp	r7, r3
 801cd6e:	f43f af7a 	beq.w	801cc66 <_dtoa_r+0x466>
 801cd72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801cd76:	2200      	movs	r2, #0
 801cd78:	4b09      	ldr	r3, [pc, #36]	; (801cda0 <_dtoa_r+0x5a0>)
 801cd7a:	f7eb fc19 	bl	80085b0 <__aeabi_dmul>
 801cd7e:	2200      	movs	r2, #0
 801cd80:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801cd84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801cd88:	4b05      	ldr	r3, [pc, #20]	; (801cda0 <_dtoa_r+0x5a0>)
 801cd8a:	f7eb fc11 	bl	80085b0 <__aeabi_dmul>
 801cd8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cd92:	e7c3      	b.n	801cd1c <_dtoa_r+0x51c>
 801cd94:	0801eee0 	.word	0x0801eee0
 801cd98:	0801eeb8 	.word	0x0801eeb8
 801cd9c:	3ff00000 	.word	0x3ff00000
 801cda0:	40240000 	.word	0x40240000
 801cda4:	401c0000 	.word	0x401c0000
 801cda8:	40140000 	.word	0x40140000
 801cdac:	3fe00000 	.word	0x3fe00000
 801cdb0:	4630      	mov	r0, r6
 801cdb2:	4639      	mov	r1, r7
 801cdb4:	f7eb fbfc 	bl	80085b0 <__aeabi_dmul>
 801cdb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cdba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801cdbe:	9c03      	ldr	r4, [sp, #12]
 801cdc0:	9314      	str	r3, [sp, #80]	; 0x50
 801cdc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801cdc6:	f7eb fea3 	bl	8008b10 <__aeabi_d2iz>
 801cdca:	9015      	str	r0, [sp, #84]	; 0x54
 801cdcc:	f7eb fb86 	bl	80084dc <__aeabi_i2d>
 801cdd0:	4602      	mov	r2, r0
 801cdd2:	460b      	mov	r3, r1
 801cdd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801cdd8:	f7eb fa32 	bl	8008240 <__aeabi_dsub>
 801cddc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cdde:	4606      	mov	r6, r0
 801cde0:	3330      	adds	r3, #48	; 0x30
 801cde2:	f804 3b01 	strb.w	r3, [r4], #1
 801cde6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cde8:	460f      	mov	r7, r1
 801cdea:	429c      	cmp	r4, r3
 801cdec:	f04f 0200 	mov.w	r2, #0
 801cdf0:	d124      	bne.n	801ce3c <_dtoa_r+0x63c>
 801cdf2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801cdf6:	4baf      	ldr	r3, [pc, #700]	; (801d0b4 <_dtoa_r+0x8b4>)
 801cdf8:	f7eb fa24 	bl	8008244 <__adddf3>
 801cdfc:	4602      	mov	r2, r0
 801cdfe:	460b      	mov	r3, r1
 801ce00:	4630      	mov	r0, r6
 801ce02:	4639      	mov	r1, r7
 801ce04:	f7eb fe64 	bl	8008ad0 <__aeabi_dcmpgt>
 801ce08:	2800      	cmp	r0, #0
 801ce0a:	d163      	bne.n	801ced4 <_dtoa_r+0x6d4>
 801ce0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801ce10:	2000      	movs	r0, #0
 801ce12:	49a8      	ldr	r1, [pc, #672]	; (801d0b4 <_dtoa_r+0x8b4>)
 801ce14:	f7eb fa14 	bl	8008240 <__aeabi_dsub>
 801ce18:	4602      	mov	r2, r0
 801ce1a:	460b      	mov	r3, r1
 801ce1c:	4630      	mov	r0, r6
 801ce1e:	4639      	mov	r1, r7
 801ce20:	f7eb fe38 	bl	8008a94 <__aeabi_dcmplt>
 801ce24:	2800      	cmp	r0, #0
 801ce26:	f43f af1e 	beq.w	801cc66 <_dtoa_r+0x466>
 801ce2a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801ce2c:	1e7b      	subs	r3, r7, #1
 801ce2e:	9314      	str	r3, [sp, #80]	; 0x50
 801ce30:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801ce34:	2b30      	cmp	r3, #48	; 0x30
 801ce36:	d0f8      	beq.n	801ce2a <_dtoa_r+0x62a>
 801ce38:	46c3      	mov	fp, r8
 801ce3a:	e03b      	b.n	801ceb4 <_dtoa_r+0x6b4>
 801ce3c:	4b9e      	ldr	r3, [pc, #632]	; (801d0b8 <_dtoa_r+0x8b8>)
 801ce3e:	f7eb fbb7 	bl	80085b0 <__aeabi_dmul>
 801ce42:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ce46:	e7bc      	b.n	801cdc2 <_dtoa_r+0x5c2>
 801ce48:	9f03      	ldr	r7, [sp, #12]
 801ce4a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801ce4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ce52:	4640      	mov	r0, r8
 801ce54:	4649      	mov	r1, r9
 801ce56:	f7eb fcd5 	bl	8008804 <__aeabi_ddiv>
 801ce5a:	f7eb fe59 	bl	8008b10 <__aeabi_d2iz>
 801ce5e:	4604      	mov	r4, r0
 801ce60:	f7eb fb3c 	bl	80084dc <__aeabi_i2d>
 801ce64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ce68:	f7eb fba2 	bl	80085b0 <__aeabi_dmul>
 801ce6c:	4602      	mov	r2, r0
 801ce6e:	460b      	mov	r3, r1
 801ce70:	4640      	mov	r0, r8
 801ce72:	4649      	mov	r1, r9
 801ce74:	f7eb f9e4 	bl	8008240 <__aeabi_dsub>
 801ce78:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801ce7c:	f807 6b01 	strb.w	r6, [r7], #1
 801ce80:	9e03      	ldr	r6, [sp, #12]
 801ce82:	f8dd c020 	ldr.w	ip, [sp, #32]
 801ce86:	1bbe      	subs	r6, r7, r6
 801ce88:	45b4      	cmp	ip, r6
 801ce8a:	4602      	mov	r2, r0
 801ce8c:	460b      	mov	r3, r1
 801ce8e:	d136      	bne.n	801cefe <_dtoa_r+0x6fe>
 801ce90:	f7eb f9d8 	bl	8008244 <__adddf3>
 801ce94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ce98:	4680      	mov	r8, r0
 801ce9a:	4689      	mov	r9, r1
 801ce9c:	f7eb fe18 	bl	8008ad0 <__aeabi_dcmpgt>
 801cea0:	bb58      	cbnz	r0, 801cefa <_dtoa_r+0x6fa>
 801cea2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cea6:	4640      	mov	r0, r8
 801cea8:	4649      	mov	r1, r9
 801ceaa:	f7eb fde9 	bl	8008a80 <__aeabi_dcmpeq>
 801ceae:	b108      	cbz	r0, 801ceb4 <_dtoa_r+0x6b4>
 801ceb0:	07e3      	lsls	r3, r4, #31
 801ceb2:	d422      	bmi.n	801cefa <_dtoa_r+0x6fa>
 801ceb4:	4651      	mov	r1, sl
 801ceb6:	4628      	mov	r0, r5
 801ceb8:	f000 fbc2 	bl	801d640 <_Bfree>
 801cebc:	2300      	movs	r3, #0
 801cebe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801cec0:	703b      	strb	r3, [r7, #0]
 801cec2:	f10b 0301 	add.w	r3, fp, #1
 801cec6:	6013      	str	r3, [r2, #0]
 801cec8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ceca:	2b00      	cmp	r3, #0
 801cecc:	f43f ace6 	beq.w	801c89c <_dtoa_r+0x9c>
 801ced0:	601f      	str	r7, [r3, #0]
 801ced2:	e4e3      	b.n	801c89c <_dtoa_r+0x9c>
 801ced4:	4627      	mov	r7, r4
 801ced6:	463b      	mov	r3, r7
 801ced8:	461f      	mov	r7, r3
 801ceda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cede:	2a39      	cmp	r2, #57	; 0x39
 801cee0:	d107      	bne.n	801cef2 <_dtoa_r+0x6f2>
 801cee2:	9a03      	ldr	r2, [sp, #12]
 801cee4:	429a      	cmp	r2, r3
 801cee6:	d1f7      	bne.n	801ced8 <_dtoa_r+0x6d8>
 801cee8:	2230      	movs	r2, #48	; 0x30
 801ceea:	9903      	ldr	r1, [sp, #12]
 801ceec:	f108 0801 	add.w	r8, r8, #1
 801cef0:	700a      	strb	r2, [r1, #0]
 801cef2:	781a      	ldrb	r2, [r3, #0]
 801cef4:	3201      	adds	r2, #1
 801cef6:	701a      	strb	r2, [r3, #0]
 801cef8:	e79e      	b.n	801ce38 <_dtoa_r+0x638>
 801cefa:	46d8      	mov	r8, fp
 801cefc:	e7eb      	b.n	801ced6 <_dtoa_r+0x6d6>
 801cefe:	2200      	movs	r2, #0
 801cf00:	4b6d      	ldr	r3, [pc, #436]	; (801d0b8 <_dtoa_r+0x8b8>)
 801cf02:	f7eb fb55 	bl	80085b0 <__aeabi_dmul>
 801cf06:	2200      	movs	r2, #0
 801cf08:	2300      	movs	r3, #0
 801cf0a:	4680      	mov	r8, r0
 801cf0c:	4689      	mov	r9, r1
 801cf0e:	f7eb fdb7 	bl	8008a80 <__aeabi_dcmpeq>
 801cf12:	2800      	cmp	r0, #0
 801cf14:	d09b      	beq.n	801ce4e <_dtoa_r+0x64e>
 801cf16:	e7cd      	b.n	801ceb4 <_dtoa_r+0x6b4>
 801cf18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cf1a:	2a00      	cmp	r2, #0
 801cf1c:	f000 80c4 	beq.w	801d0a8 <_dtoa_r+0x8a8>
 801cf20:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801cf22:	2a01      	cmp	r2, #1
 801cf24:	f300 80a8 	bgt.w	801d078 <_dtoa_r+0x878>
 801cf28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cf2a:	2a00      	cmp	r2, #0
 801cf2c:	f000 80a0 	beq.w	801d070 <_dtoa_r+0x870>
 801cf30:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801cf34:	464f      	mov	r7, r9
 801cf36:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801cf38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cf3a:	2101      	movs	r1, #1
 801cf3c:	441a      	add	r2, r3
 801cf3e:	4628      	mov	r0, r5
 801cf40:	4499      	add	r9, r3
 801cf42:	9209      	str	r2, [sp, #36]	; 0x24
 801cf44:	f000 fc32 	bl	801d7ac <__i2b>
 801cf48:	4606      	mov	r6, r0
 801cf4a:	b15f      	cbz	r7, 801cf64 <_dtoa_r+0x764>
 801cf4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cf4e:	2b00      	cmp	r3, #0
 801cf50:	dd08      	ble.n	801cf64 <_dtoa_r+0x764>
 801cf52:	42bb      	cmp	r3, r7
 801cf54:	bfa8      	it	ge
 801cf56:	463b      	movge	r3, r7
 801cf58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cf5a:	eba9 0903 	sub.w	r9, r9, r3
 801cf5e:	1aff      	subs	r7, r7, r3
 801cf60:	1ad3      	subs	r3, r2, r3
 801cf62:	9309      	str	r3, [sp, #36]	; 0x24
 801cf64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cf66:	b1f3      	cbz	r3, 801cfa6 <_dtoa_r+0x7a6>
 801cf68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cf6a:	2b00      	cmp	r3, #0
 801cf6c:	f000 80a0 	beq.w	801d0b0 <_dtoa_r+0x8b0>
 801cf70:	2c00      	cmp	r4, #0
 801cf72:	dd10      	ble.n	801cf96 <_dtoa_r+0x796>
 801cf74:	4631      	mov	r1, r6
 801cf76:	4622      	mov	r2, r4
 801cf78:	4628      	mov	r0, r5
 801cf7a:	f000 fcd5 	bl	801d928 <__pow5mult>
 801cf7e:	4652      	mov	r2, sl
 801cf80:	4601      	mov	r1, r0
 801cf82:	4606      	mov	r6, r0
 801cf84:	4628      	mov	r0, r5
 801cf86:	f000 fc27 	bl	801d7d8 <__multiply>
 801cf8a:	4680      	mov	r8, r0
 801cf8c:	4651      	mov	r1, sl
 801cf8e:	4628      	mov	r0, r5
 801cf90:	f000 fb56 	bl	801d640 <_Bfree>
 801cf94:	46c2      	mov	sl, r8
 801cf96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cf98:	1b1a      	subs	r2, r3, r4
 801cf9a:	d004      	beq.n	801cfa6 <_dtoa_r+0x7a6>
 801cf9c:	4651      	mov	r1, sl
 801cf9e:	4628      	mov	r0, r5
 801cfa0:	f000 fcc2 	bl	801d928 <__pow5mult>
 801cfa4:	4682      	mov	sl, r0
 801cfa6:	2101      	movs	r1, #1
 801cfa8:	4628      	mov	r0, r5
 801cfaa:	f000 fbff 	bl	801d7ac <__i2b>
 801cfae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cfb0:	4604      	mov	r4, r0
 801cfb2:	2b00      	cmp	r3, #0
 801cfb4:	f340 8082 	ble.w	801d0bc <_dtoa_r+0x8bc>
 801cfb8:	461a      	mov	r2, r3
 801cfba:	4601      	mov	r1, r0
 801cfbc:	4628      	mov	r0, r5
 801cfbe:	f000 fcb3 	bl	801d928 <__pow5mult>
 801cfc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801cfc4:	4604      	mov	r4, r0
 801cfc6:	2b01      	cmp	r3, #1
 801cfc8:	dd7b      	ble.n	801d0c2 <_dtoa_r+0x8c2>
 801cfca:	f04f 0800 	mov.w	r8, #0
 801cfce:	6923      	ldr	r3, [r4, #16]
 801cfd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801cfd4:	6918      	ldr	r0, [r3, #16]
 801cfd6:	f000 fb9b 	bl	801d710 <__hi0bits>
 801cfda:	f1c0 0020 	rsb	r0, r0, #32
 801cfde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cfe0:	4418      	add	r0, r3
 801cfe2:	f010 001f 	ands.w	r0, r0, #31
 801cfe6:	f000 8092 	beq.w	801d10e <_dtoa_r+0x90e>
 801cfea:	f1c0 0320 	rsb	r3, r0, #32
 801cfee:	2b04      	cmp	r3, #4
 801cff0:	f340 8085 	ble.w	801d0fe <_dtoa_r+0x8fe>
 801cff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cff6:	f1c0 001c 	rsb	r0, r0, #28
 801cffa:	4403      	add	r3, r0
 801cffc:	4481      	add	r9, r0
 801cffe:	4407      	add	r7, r0
 801d000:	9309      	str	r3, [sp, #36]	; 0x24
 801d002:	f1b9 0f00 	cmp.w	r9, #0
 801d006:	dd05      	ble.n	801d014 <_dtoa_r+0x814>
 801d008:	4651      	mov	r1, sl
 801d00a:	464a      	mov	r2, r9
 801d00c:	4628      	mov	r0, r5
 801d00e:	f000 fce5 	bl	801d9dc <__lshift>
 801d012:	4682      	mov	sl, r0
 801d014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d016:	2b00      	cmp	r3, #0
 801d018:	dd05      	ble.n	801d026 <_dtoa_r+0x826>
 801d01a:	4621      	mov	r1, r4
 801d01c:	461a      	mov	r2, r3
 801d01e:	4628      	mov	r0, r5
 801d020:	f000 fcdc 	bl	801d9dc <__lshift>
 801d024:	4604      	mov	r4, r0
 801d026:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d028:	2b00      	cmp	r3, #0
 801d02a:	d072      	beq.n	801d112 <_dtoa_r+0x912>
 801d02c:	4621      	mov	r1, r4
 801d02e:	4650      	mov	r0, sl
 801d030:	f000 fd40 	bl	801dab4 <__mcmp>
 801d034:	2800      	cmp	r0, #0
 801d036:	da6c      	bge.n	801d112 <_dtoa_r+0x912>
 801d038:	2300      	movs	r3, #0
 801d03a:	4651      	mov	r1, sl
 801d03c:	220a      	movs	r2, #10
 801d03e:	4628      	mov	r0, r5
 801d040:	f000 fb20 	bl	801d684 <__multadd>
 801d044:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d046:	4682      	mov	sl, r0
 801d048:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d04c:	2b00      	cmp	r3, #0
 801d04e:	f000 81ac 	beq.w	801d3aa <_dtoa_r+0xbaa>
 801d052:	2300      	movs	r3, #0
 801d054:	4631      	mov	r1, r6
 801d056:	220a      	movs	r2, #10
 801d058:	4628      	mov	r0, r5
 801d05a:	f000 fb13 	bl	801d684 <__multadd>
 801d05e:	9b06      	ldr	r3, [sp, #24]
 801d060:	4606      	mov	r6, r0
 801d062:	2b00      	cmp	r3, #0
 801d064:	f300 8093 	bgt.w	801d18e <_dtoa_r+0x98e>
 801d068:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d06a:	2b02      	cmp	r3, #2
 801d06c:	dc59      	bgt.n	801d122 <_dtoa_r+0x922>
 801d06e:	e08e      	b.n	801d18e <_dtoa_r+0x98e>
 801d070:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d072:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801d076:	e75d      	b.n	801cf34 <_dtoa_r+0x734>
 801d078:	9b08      	ldr	r3, [sp, #32]
 801d07a:	1e5c      	subs	r4, r3, #1
 801d07c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d07e:	42a3      	cmp	r3, r4
 801d080:	bfbf      	itttt	lt
 801d082:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801d084:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801d086:	1ae3      	sublt	r3, r4, r3
 801d088:	18d2      	addlt	r2, r2, r3
 801d08a:	bfa8      	it	ge
 801d08c:	1b1c      	subge	r4, r3, r4
 801d08e:	9b08      	ldr	r3, [sp, #32]
 801d090:	bfbe      	ittt	lt
 801d092:	940a      	strlt	r4, [sp, #40]	; 0x28
 801d094:	920e      	strlt	r2, [sp, #56]	; 0x38
 801d096:	2400      	movlt	r4, #0
 801d098:	2b00      	cmp	r3, #0
 801d09a:	bfb5      	itete	lt
 801d09c:	eba9 0703 	sublt.w	r7, r9, r3
 801d0a0:	464f      	movge	r7, r9
 801d0a2:	2300      	movlt	r3, #0
 801d0a4:	9b08      	ldrge	r3, [sp, #32]
 801d0a6:	e747      	b.n	801cf38 <_dtoa_r+0x738>
 801d0a8:	464f      	mov	r7, r9
 801d0aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801d0ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801d0ae:	e74c      	b.n	801cf4a <_dtoa_r+0x74a>
 801d0b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d0b2:	e773      	b.n	801cf9c <_dtoa_r+0x79c>
 801d0b4:	3fe00000 	.word	0x3fe00000
 801d0b8:	40240000 	.word	0x40240000
 801d0bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d0be:	2b01      	cmp	r3, #1
 801d0c0:	dc18      	bgt.n	801d0f4 <_dtoa_r+0x8f4>
 801d0c2:	9b04      	ldr	r3, [sp, #16]
 801d0c4:	b9b3      	cbnz	r3, 801d0f4 <_dtoa_r+0x8f4>
 801d0c6:	9b05      	ldr	r3, [sp, #20]
 801d0c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d0cc:	b993      	cbnz	r3, 801d0f4 <_dtoa_r+0x8f4>
 801d0ce:	9b05      	ldr	r3, [sp, #20]
 801d0d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d0d4:	0d1b      	lsrs	r3, r3, #20
 801d0d6:	051b      	lsls	r3, r3, #20
 801d0d8:	b17b      	cbz	r3, 801d0fa <_dtoa_r+0x8fa>
 801d0da:	f04f 0801 	mov.w	r8, #1
 801d0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d0e0:	f109 0901 	add.w	r9, r9, #1
 801d0e4:	3301      	adds	r3, #1
 801d0e6:	9309      	str	r3, [sp, #36]	; 0x24
 801d0e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d0ea:	2b00      	cmp	r3, #0
 801d0ec:	f47f af6f 	bne.w	801cfce <_dtoa_r+0x7ce>
 801d0f0:	2001      	movs	r0, #1
 801d0f2:	e774      	b.n	801cfde <_dtoa_r+0x7de>
 801d0f4:	f04f 0800 	mov.w	r8, #0
 801d0f8:	e7f6      	b.n	801d0e8 <_dtoa_r+0x8e8>
 801d0fa:	4698      	mov	r8, r3
 801d0fc:	e7f4      	b.n	801d0e8 <_dtoa_r+0x8e8>
 801d0fe:	d080      	beq.n	801d002 <_dtoa_r+0x802>
 801d100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d102:	331c      	adds	r3, #28
 801d104:	441a      	add	r2, r3
 801d106:	4499      	add	r9, r3
 801d108:	441f      	add	r7, r3
 801d10a:	9209      	str	r2, [sp, #36]	; 0x24
 801d10c:	e779      	b.n	801d002 <_dtoa_r+0x802>
 801d10e:	4603      	mov	r3, r0
 801d110:	e7f6      	b.n	801d100 <_dtoa_r+0x900>
 801d112:	9b08      	ldr	r3, [sp, #32]
 801d114:	2b00      	cmp	r3, #0
 801d116:	dc34      	bgt.n	801d182 <_dtoa_r+0x982>
 801d118:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d11a:	2b02      	cmp	r3, #2
 801d11c:	dd31      	ble.n	801d182 <_dtoa_r+0x982>
 801d11e:	9b08      	ldr	r3, [sp, #32]
 801d120:	9306      	str	r3, [sp, #24]
 801d122:	9b06      	ldr	r3, [sp, #24]
 801d124:	b963      	cbnz	r3, 801d140 <_dtoa_r+0x940>
 801d126:	4621      	mov	r1, r4
 801d128:	2205      	movs	r2, #5
 801d12a:	4628      	mov	r0, r5
 801d12c:	f000 faaa 	bl	801d684 <__multadd>
 801d130:	4601      	mov	r1, r0
 801d132:	4604      	mov	r4, r0
 801d134:	4650      	mov	r0, sl
 801d136:	f000 fcbd 	bl	801dab4 <__mcmp>
 801d13a:	2800      	cmp	r0, #0
 801d13c:	f73f adbf 	bgt.w	801ccbe <_dtoa_r+0x4be>
 801d140:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d142:	9f03      	ldr	r7, [sp, #12]
 801d144:	ea6f 0b03 	mvn.w	fp, r3
 801d148:	f04f 0800 	mov.w	r8, #0
 801d14c:	4621      	mov	r1, r4
 801d14e:	4628      	mov	r0, r5
 801d150:	f000 fa76 	bl	801d640 <_Bfree>
 801d154:	2e00      	cmp	r6, #0
 801d156:	f43f aead 	beq.w	801ceb4 <_dtoa_r+0x6b4>
 801d15a:	f1b8 0f00 	cmp.w	r8, #0
 801d15e:	d005      	beq.n	801d16c <_dtoa_r+0x96c>
 801d160:	45b0      	cmp	r8, r6
 801d162:	d003      	beq.n	801d16c <_dtoa_r+0x96c>
 801d164:	4641      	mov	r1, r8
 801d166:	4628      	mov	r0, r5
 801d168:	f000 fa6a 	bl	801d640 <_Bfree>
 801d16c:	4631      	mov	r1, r6
 801d16e:	4628      	mov	r0, r5
 801d170:	f000 fa66 	bl	801d640 <_Bfree>
 801d174:	e69e      	b.n	801ceb4 <_dtoa_r+0x6b4>
 801d176:	2400      	movs	r4, #0
 801d178:	4626      	mov	r6, r4
 801d17a:	e7e1      	b.n	801d140 <_dtoa_r+0x940>
 801d17c:	46c3      	mov	fp, r8
 801d17e:	4626      	mov	r6, r4
 801d180:	e59d      	b.n	801ccbe <_dtoa_r+0x4be>
 801d182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d184:	2b00      	cmp	r3, #0
 801d186:	f000 80c8 	beq.w	801d31a <_dtoa_r+0xb1a>
 801d18a:	9b08      	ldr	r3, [sp, #32]
 801d18c:	9306      	str	r3, [sp, #24]
 801d18e:	2f00      	cmp	r7, #0
 801d190:	dd05      	ble.n	801d19e <_dtoa_r+0x99e>
 801d192:	4631      	mov	r1, r6
 801d194:	463a      	mov	r2, r7
 801d196:	4628      	mov	r0, r5
 801d198:	f000 fc20 	bl	801d9dc <__lshift>
 801d19c:	4606      	mov	r6, r0
 801d19e:	f1b8 0f00 	cmp.w	r8, #0
 801d1a2:	d05b      	beq.n	801d25c <_dtoa_r+0xa5c>
 801d1a4:	4628      	mov	r0, r5
 801d1a6:	6871      	ldr	r1, [r6, #4]
 801d1a8:	f000 fa0a 	bl	801d5c0 <_Balloc>
 801d1ac:	4607      	mov	r7, r0
 801d1ae:	b928      	cbnz	r0, 801d1bc <_dtoa_r+0x9bc>
 801d1b0:	4602      	mov	r2, r0
 801d1b2:	f240 21ef 	movw	r1, #751	; 0x2ef
 801d1b6:	4b81      	ldr	r3, [pc, #516]	; (801d3bc <_dtoa_r+0xbbc>)
 801d1b8:	f7ff bb36 	b.w	801c828 <_dtoa_r+0x28>
 801d1bc:	6932      	ldr	r2, [r6, #16]
 801d1be:	f106 010c 	add.w	r1, r6, #12
 801d1c2:	3202      	adds	r2, #2
 801d1c4:	0092      	lsls	r2, r2, #2
 801d1c6:	300c      	adds	r0, #12
 801d1c8:	f000 ffb0 	bl	801e12c <memcpy>
 801d1cc:	2201      	movs	r2, #1
 801d1ce:	4639      	mov	r1, r7
 801d1d0:	4628      	mov	r0, r5
 801d1d2:	f000 fc03 	bl	801d9dc <__lshift>
 801d1d6:	46b0      	mov	r8, r6
 801d1d8:	4606      	mov	r6, r0
 801d1da:	9b03      	ldr	r3, [sp, #12]
 801d1dc:	9a03      	ldr	r2, [sp, #12]
 801d1de:	3301      	adds	r3, #1
 801d1e0:	9308      	str	r3, [sp, #32]
 801d1e2:	9b06      	ldr	r3, [sp, #24]
 801d1e4:	4413      	add	r3, r2
 801d1e6:	930b      	str	r3, [sp, #44]	; 0x2c
 801d1e8:	9b04      	ldr	r3, [sp, #16]
 801d1ea:	f003 0301 	and.w	r3, r3, #1
 801d1ee:	930a      	str	r3, [sp, #40]	; 0x28
 801d1f0:	9b08      	ldr	r3, [sp, #32]
 801d1f2:	4621      	mov	r1, r4
 801d1f4:	3b01      	subs	r3, #1
 801d1f6:	4650      	mov	r0, sl
 801d1f8:	9304      	str	r3, [sp, #16]
 801d1fa:	f7ff fa77 	bl	801c6ec <quorem>
 801d1fe:	4641      	mov	r1, r8
 801d200:	9006      	str	r0, [sp, #24]
 801d202:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801d206:	4650      	mov	r0, sl
 801d208:	f000 fc54 	bl	801dab4 <__mcmp>
 801d20c:	4632      	mov	r2, r6
 801d20e:	9009      	str	r0, [sp, #36]	; 0x24
 801d210:	4621      	mov	r1, r4
 801d212:	4628      	mov	r0, r5
 801d214:	f000 fc6a 	bl	801daec <__mdiff>
 801d218:	68c2      	ldr	r2, [r0, #12]
 801d21a:	4607      	mov	r7, r0
 801d21c:	bb02      	cbnz	r2, 801d260 <_dtoa_r+0xa60>
 801d21e:	4601      	mov	r1, r0
 801d220:	4650      	mov	r0, sl
 801d222:	f000 fc47 	bl	801dab4 <__mcmp>
 801d226:	4602      	mov	r2, r0
 801d228:	4639      	mov	r1, r7
 801d22a:	4628      	mov	r0, r5
 801d22c:	920c      	str	r2, [sp, #48]	; 0x30
 801d22e:	f000 fa07 	bl	801d640 <_Bfree>
 801d232:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d234:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d236:	9f08      	ldr	r7, [sp, #32]
 801d238:	ea43 0102 	orr.w	r1, r3, r2
 801d23c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d23e:	4319      	orrs	r1, r3
 801d240:	d110      	bne.n	801d264 <_dtoa_r+0xa64>
 801d242:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801d246:	d029      	beq.n	801d29c <_dtoa_r+0xa9c>
 801d248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	dd02      	ble.n	801d254 <_dtoa_r+0xa54>
 801d24e:	9b06      	ldr	r3, [sp, #24]
 801d250:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801d254:	9b04      	ldr	r3, [sp, #16]
 801d256:	f883 9000 	strb.w	r9, [r3]
 801d25a:	e777      	b.n	801d14c <_dtoa_r+0x94c>
 801d25c:	4630      	mov	r0, r6
 801d25e:	e7ba      	b.n	801d1d6 <_dtoa_r+0x9d6>
 801d260:	2201      	movs	r2, #1
 801d262:	e7e1      	b.n	801d228 <_dtoa_r+0xa28>
 801d264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d266:	2b00      	cmp	r3, #0
 801d268:	db04      	blt.n	801d274 <_dtoa_r+0xa74>
 801d26a:	9922      	ldr	r1, [sp, #136]	; 0x88
 801d26c:	430b      	orrs	r3, r1
 801d26e:	990a      	ldr	r1, [sp, #40]	; 0x28
 801d270:	430b      	orrs	r3, r1
 801d272:	d120      	bne.n	801d2b6 <_dtoa_r+0xab6>
 801d274:	2a00      	cmp	r2, #0
 801d276:	dded      	ble.n	801d254 <_dtoa_r+0xa54>
 801d278:	4651      	mov	r1, sl
 801d27a:	2201      	movs	r2, #1
 801d27c:	4628      	mov	r0, r5
 801d27e:	f000 fbad 	bl	801d9dc <__lshift>
 801d282:	4621      	mov	r1, r4
 801d284:	4682      	mov	sl, r0
 801d286:	f000 fc15 	bl	801dab4 <__mcmp>
 801d28a:	2800      	cmp	r0, #0
 801d28c:	dc03      	bgt.n	801d296 <_dtoa_r+0xa96>
 801d28e:	d1e1      	bne.n	801d254 <_dtoa_r+0xa54>
 801d290:	f019 0f01 	tst.w	r9, #1
 801d294:	d0de      	beq.n	801d254 <_dtoa_r+0xa54>
 801d296:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801d29a:	d1d8      	bne.n	801d24e <_dtoa_r+0xa4e>
 801d29c:	2339      	movs	r3, #57	; 0x39
 801d29e:	9a04      	ldr	r2, [sp, #16]
 801d2a0:	7013      	strb	r3, [r2, #0]
 801d2a2:	463b      	mov	r3, r7
 801d2a4:	461f      	mov	r7, r3
 801d2a6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 801d2aa:	3b01      	subs	r3, #1
 801d2ac:	2a39      	cmp	r2, #57	; 0x39
 801d2ae:	d06b      	beq.n	801d388 <_dtoa_r+0xb88>
 801d2b0:	3201      	adds	r2, #1
 801d2b2:	701a      	strb	r2, [r3, #0]
 801d2b4:	e74a      	b.n	801d14c <_dtoa_r+0x94c>
 801d2b6:	2a00      	cmp	r2, #0
 801d2b8:	dd07      	ble.n	801d2ca <_dtoa_r+0xaca>
 801d2ba:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801d2be:	d0ed      	beq.n	801d29c <_dtoa_r+0xa9c>
 801d2c0:	9a04      	ldr	r2, [sp, #16]
 801d2c2:	f109 0301 	add.w	r3, r9, #1
 801d2c6:	7013      	strb	r3, [r2, #0]
 801d2c8:	e740      	b.n	801d14c <_dtoa_r+0x94c>
 801d2ca:	9b08      	ldr	r3, [sp, #32]
 801d2cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d2ce:	f803 9c01 	strb.w	r9, [r3, #-1]
 801d2d2:	4293      	cmp	r3, r2
 801d2d4:	d042      	beq.n	801d35c <_dtoa_r+0xb5c>
 801d2d6:	4651      	mov	r1, sl
 801d2d8:	2300      	movs	r3, #0
 801d2da:	220a      	movs	r2, #10
 801d2dc:	4628      	mov	r0, r5
 801d2de:	f000 f9d1 	bl	801d684 <__multadd>
 801d2e2:	45b0      	cmp	r8, r6
 801d2e4:	4682      	mov	sl, r0
 801d2e6:	f04f 0300 	mov.w	r3, #0
 801d2ea:	f04f 020a 	mov.w	r2, #10
 801d2ee:	4641      	mov	r1, r8
 801d2f0:	4628      	mov	r0, r5
 801d2f2:	d107      	bne.n	801d304 <_dtoa_r+0xb04>
 801d2f4:	f000 f9c6 	bl	801d684 <__multadd>
 801d2f8:	4680      	mov	r8, r0
 801d2fa:	4606      	mov	r6, r0
 801d2fc:	9b08      	ldr	r3, [sp, #32]
 801d2fe:	3301      	adds	r3, #1
 801d300:	9308      	str	r3, [sp, #32]
 801d302:	e775      	b.n	801d1f0 <_dtoa_r+0x9f0>
 801d304:	f000 f9be 	bl	801d684 <__multadd>
 801d308:	4631      	mov	r1, r6
 801d30a:	4680      	mov	r8, r0
 801d30c:	2300      	movs	r3, #0
 801d30e:	220a      	movs	r2, #10
 801d310:	4628      	mov	r0, r5
 801d312:	f000 f9b7 	bl	801d684 <__multadd>
 801d316:	4606      	mov	r6, r0
 801d318:	e7f0      	b.n	801d2fc <_dtoa_r+0xafc>
 801d31a:	9b08      	ldr	r3, [sp, #32]
 801d31c:	9306      	str	r3, [sp, #24]
 801d31e:	9f03      	ldr	r7, [sp, #12]
 801d320:	4621      	mov	r1, r4
 801d322:	4650      	mov	r0, sl
 801d324:	f7ff f9e2 	bl	801c6ec <quorem>
 801d328:	9b03      	ldr	r3, [sp, #12]
 801d32a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801d32e:	f807 9b01 	strb.w	r9, [r7], #1
 801d332:	1afa      	subs	r2, r7, r3
 801d334:	9b06      	ldr	r3, [sp, #24]
 801d336:	4293      	cmp	r3, r2
 801d338:	dd07      	ble.n	801d34a <_dtoa_r+0xb4a>
 801d33a:	4651      	mov	r1, sl
 801d33c:	2300      	movs	r3, #0
 801d33e:	220a      	movs	r2, #10
 801d340:	4628      	mov	r0, r5
 801d342:	f000 f99f 	bl	801d684 <__multadd>
 801d346:	4682      	mov	sl, r0
 801d348:	e7ea      	b.n	801d320 <_dtoa_r+0xb20>
 801d34a:	9b06      	ldr	r3, [sp, #24]
 801d34c:	f04f 0800 	mov.w	r8, #0
 801d350:	2b00      	cmp	r3, #0
 801d352:	bfcc      	ite	gt
 801d354:	461f      	movgt	r7, r3
 801d356:	2701      	movle	r7, #1
 801d358:	9b03      	ldr	r3, [sp, #12]
 801d35a:	441f      	add	r7, r3
 801d35c:	4651      	mov	r1, sl
 801d35e:	2201      	movs	r2, #1
 801d360:	4628      	mov	r0, r5
 801d362:	f000 fb3b 	bl	801d9dc <__lshift>
 801d366:	4621      	mov	r1, r4
 801d368:	4682      	mov	sl, r0
 801d36a:	f000 fba3 	bl	801dab4 <__mcmp>
 801d36e:	2800      	cmp	r0, #0
 801d370:	dc97      	bgt.n	801d2a2 <_dtoa_r+0xaa2>
 801d372:	d102      	bne.n	801d37a <_dtoa_r+0xb7a>
 801d374:	f019 0f01 	tst.w	r9, #1
 801d378:	d193      	bne.n	801d2a2 <_dtoa_r+0xaa2>
 801d37a:	463b      	mov	r3, r7
 801d37c:	461f      	mov	r7, r3
 801d37e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d382:	2a30      	cmp	r2, #48	; 0x30
 801d384:	d0fa      	beq.n	801d37c <_dtoa_r+0xb7c>
 801d386:	e6e1      	b.n	801d14c <_dtoa_r+0x94c>
 801d388:	9a03      	ldr	r2, [sp, #12]
 801d38a:	429a      	cmp	r2, r3
 801d38c:	d18a      	bne.n	801d2a4 <_dtoa_r+0xaa4>
 801d38e:	2331      	movs	r3, #49	; 0x31
 801d390:	f10b 0b01 	add.w	fp, fp, #1
 801d394:	e797      	b.n	801d2c6 <_dtoa_r+0xac6>
 801d396:	4b0a      	ldr	r3, [pc, #40]	; (801d3c0 <_dtoa_r+0xbc0>)
 801d398:	f7ff ba9f 	b.w	801c8da <_dtoa_r+0xda>
 801d39c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d39e:	2b00      	cmp	r3, #0
 801d3a0:	f47f aa77 	bne.w	801c892 <_dtoa_r+0x92>
 801d3a4:	4b07      	ldr	r3, [pc, #28]	; (801d3c4 <_dtoa_r+0xbc4>)
 801d3a6:	f7ff ba98 	b.w	801c8da <_dtoa_r+0xda>
 801d3aa:	9b06      	ldr	r3, [sp, #24]
 801d3ac:	2b00      	cmp	r3, #0
 801d3ae:	dcb6      	bgt.n	801d31e <_dtoa_r+0xb1e>
 801d3b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d3b2:	2b02      	cmp	r3, #2
 801d3b4:	f73f aeb5 	bgt.w	801d122 <_dtoa_r+0x922>
 801d3b8:	e7b1      	b.n	801d31e <_dtoa_r+0xb1e>
 801d3ba:	bf00      	nop
 801d3bc:	0801ee49 	.word	0x0801ee49
 801d3c0:	0801ed13 	.word	0x0801ed13
 801d3c4:	0801ede4 	.word	0x0801ede4

0801d3c8 <_free_r>:
 801d3c8:	b538      	push	{r3, r4, r5, lr}
 801d3ca:	4605      	mov	r5, r0
 801d3cc:	2900      	cmp	r1, #0
 801d3ce:	d040      	beq.n	801d452 <_free_r+0x8a>
 801d3d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d3d4:	1f0c      	subs	r4, r1, #4
 801d3d6:	2b00      	cmp	r3, #0
 801d3d8:	bfb8      	it	lt
 801d3da:	18e4      	addlt	r4, r4, r3
 801d3dc:	f000 f8e4 	bl	801d5a8 <__malloc_lock>
 801d3e0:	4a1c      	ldr	r2, [pc, #112]	; (801d454 <_free_r+0x8c>)
 801d3e2:	6813      	ldr	r3, [r2, #0]
 801d3e4:	b933      	cbnz	r3, 801d3f4 <_free_r+0x2c>
 801d3e6:	6063      	str	r3, [r4, #4]
 801d3e8:	6014      	str	r4, [r2, #0]
 801d3ea:	4628      	mov	r0, r5
 801d3ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d3f0:	f000 b8e0 	b.w	801d5b4 <__malloc_unlock>
 801d3f4:	42a3      	cmp	r3, r4
 801d3f6:	d908      	bls.n	801d40a <_free_r+0x42>
 801d3f8:	6820      	ldr	r0, [r4, #0]
 801d3fa:	1821      	adds	r1, r4, r0
 801d3fc:	428b      	cmp	r3, r1
 801d3fe:	bf01      	itttt	eq
 801d400:	6819      	ldreq	r1, [r3, #0]
 801d402:	685b      	ldreq	r3, [r3, #4]
 801d404:	1809      	addeq	r1, r1, r0
 801d406:	6021      	streq	r1, [r4, #0]
 801d408:	e7ed      	b.n	801d3e6 <_free_r+0x1e>
 801d40a:	461a      	mov	r2, r3
 801d40c:	685b      	ldr	r3, [r3, #4]
 801d40e:	b10b      	cbz	r3, 801d414 <_free_r+0x4c>
 801d410:	42a3      	cmp	r3, r4
 801d412:	d9fa      	bls.n	801d40a <_free_r+0x42>
 801d414:	6811      	ldr	r1, [r2, #0]
 801d416:	1850      	adds	r0, r2, r1
 801d418:	42a0      	cmp	r0, r4
 801d41a:	d10b      	bne.n	801d434 <_free_r+0x6c>
 801d41c:	6820      	ldr	r0, [r4, #0]
 801d41e:	4401      	add	r1, r0
 801d420:	1850      	adds	r0, r2, r1
 801d422:	4283      	cmp	r3, r0
 801d424:	6011      	str	r1, [r2, #0]
 801d426:	d1e0      	bne.n	801d3ea <_free_r+0x22>
 801d428:	6818      	ldr	r0, [r3, #0]
 801d42a:	685b      	ldr	r3, [r3, #4]
 801d42c:	4408      	add	r0, r1
 801d42e:	6010      	str	r0, [r2, #0]
 801d430:	6053      	str	r3, [r2, #4]
 801d432:	e7da      	b.n	801d3ea <_free_r+0x22>
 801d434:	d902      	bls.n	801d43c <_free_r+0x74>
 801d436:	230c      	movs	r3, #12
 801d438:	602b      	str	r3, [r5, #0]
 801d43a:	e7d6      	b.n	801d3ea <_free_r+0x22>
 801d43c:	6820      	ldr	r0, [r4, #0]
 801d43e:	1821      	adds	r1, r4, r0
 801d440:	428b      	cmp	r3, r1
 801d442:	bf01      	itttt	eq
 801d444:	6819      	ldreq	r1, [r3, #0]
 801d446:	685b      	ldreq	r3, [r3, #4]
 801d448:	1809      	addeq	r1, r1, r0
 801d44a:	6021      	streq	r1, [r4, #0]
 801d44c:	6063      	str	r3, [r4, #4]
 801d44e:	6054      	str	r4, [r2, #4]
 801d450:	e7cb      	b.n	801d3ea <_free_r+0x22>
 801d452:	bd38      	pop	{r3, r4, r5, pc}
 801d454:	20003be0 	.word	0x20003be0

0801d458 <malloc>:
 801d458:	4b02      	ldr	r3, [pc, #8]	; (801d464 <malloc+0xc>)
 801d45a:	4601      	mov	r1, r0
 801d45c:	6818      	ldr	r0, [r3, #0]
 801d45e:	f000 b823 	b.w	801d4a8 <_malloc_r>
 801d462:	bf00      	nop
 801d464:	20000874 	.word	0x20000874

0801d468 <sbrk_aligned>:
 801d468:	b570      	push	{r4, r5, r6, lr}
 801d46a:	4e0e      	ldr	r6, [pc, #56]	; (801d4a4 <sbrk_aligned+0x3c>)
 801d46c:	460c      	mov	r4, r1
 801d46e:	6831      	ldr	r1, [r6, #0]
 801d470:	4605      	mov	r5, r0
 801d472:	b911      	cbnz	r1, 801d47a <sbrk_aligned+0x12>
 801d474:	f000 fe4a 	bl	801e10c <_sbrk_r>
 801d478:	6030      	str	r0, [r6, #0]
 801d47a:	4621      	mov	r1, r4
 801d47c:	4628      	mov	r0, r5
 801d47e:	f000 fe45 	bl	801e10c <_sbrk_r>
 801d482:	1c43      	adds	r3, r0, #1
 801d484:	d00a      	beq.n	801d49c <sbrk_aligned+0x34>
 801d486:	1cc4      	adds	r4, r0, #3
 801d488:	f024 0403 	bic.w	r4, r4, #3
 801d48c:	42a0      	cmp	r0, r4
 801d48e:	d007      	beq.n	801d4a0 <sbrk_aligned+0x38>
 801d490:	1a21      	subs	r1, r4, r0
 801d492:	4628      	mov	r0, r5
 801d494:	f000 fe3a 	bl	801e10c <_sbrk_r>
 801d498:	3001      	adds	r0, #1
 801d49a:	d101      	bne.n	801d4a0 <sbrk_aligned+0x38>
 801d49c:	f04f 34ff 	mov.w	r4, #4294967295
 801d4a0:	4620      	mov	r0, r4
 801d4a2:	bd70      	pop	{r4, r5, r6, pc}
 801d4a4:	20003be4 	.word	0x20003be4

0801d4a8 <_malloc_r>:
 801d4a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d4ac:	1ccd      	adds	r5, r1, #3
 801d4ae:	f025 0503 	bic.w	r5, r5, #3
 801d4b2:	3508      	adds	r5, #8
 801d4b4:	2d0c      	cmp	r5, #12
 801d4b6:	bf38      	it	cc
 801d4b8:	250c      	movcc	r5, #12
 801d4ba:	2d00      	cmp	r5, #0
 801d4bc:	4607      	mov	r7, r0
 801d4be:	db01      	blt.n	801d4c4 <_malloc_r+0x1c>
 801d4c0:	42a9      	cmp	r1, r5
 801d4c2:	d905      	bls.n	801d4d0 <_malloc_r+0x28>
 801d4c4:	230c      	movs	r3, #12
 801d4c6:	2600      	movs	r6, #0
 801d4c8:	603b      	str	r3, [r7, #0]
 801d4ca:	4630      	mov	r0, r6
 801d4cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d4d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801d5a4 <_malloc_r+0xfc>
 801d4d4:	f000 f868 	bl	801d5a8 <__malloc_lock>
 801d4d8:	f8d8 3000 	ldr.w	r3, [r8]
 801d4dc:	461c      	mov	r4, r3
 801d4de:	bb5c      	cbnz	r4, 801d538 <_malloc_r+0x90>
 801d4e0:	4629      	mov	r1, r5
 801d4e2:	4638      	mov	r0, r7
 801d4e4:	f7ff ffc0 	bl	801d468 <sbrk_aligned>
 801d4e8:	1c43      	adds	r3, r0, #1
 801d4ea:	4604      	mov	r4, r0
 801d4ec:	d155      	bne.n	801d59a <_malloc_r+0xf2>
 801d4ee:	f8d8 4000 	ldr.w	r4, [r8]
 801d4f2:	4626      	mov	r6, r4
 801d4f4:	2e00      	cmp	r6, #0
 801d4f6:	d145      	bne.n	801d584 <_malloc_r+0xdc>
 801d4f8:	2c00      	cmp	r4, #0
 801d4fa:	d048      	beq.n	801d58e <_malloc_r+0xe6>
 801d4fc:	6823      	ldr	r3, [r4, #0]
 801d4fe:	4631      	mov	r1, r6
 801d500:	4638      	mov	r0, r7
 801d502:	eb04 0903 	add.w	r9, r4, r3
 801d506:	f000 fe01 	bl	801e10c <_sbrk_r>
 801d50a:	4581      	cmp	r9, r0
 801d50c:	d13f      	bne.n	801d58e <_malloc_r+0xe6>
 801d50e:	6821      	ldr	r1, [r4, #0]
 801d510:	4638      	mov	r0, r7
 801d512:	1a6d      	subs	r5, r5, r1
 801d514:	4629      	mov	r1, r5
 801d516:	f7ff ffa7 	bl	801d468 <sbrk_aligned>
 801d51a:	3001      	adds	r0, #1
 801d51c:	d037      	beq.n	801d58e <_malloc_r+0xe6>
 801d51e:	6823      	ldr	r3, [r4, #0]
 801d520:	442b      	add	r3, r5
 801d522:	6023      	str	r3, [r4, #0]
 801d524:	f8d8 3000 	ldr.w	r3, [r8]
 801d528:	2b00      	cmp	r3, #0
 801d52a:	d038      	beq.n	801d59e <_malloc_r+0xf6>
 801d52c:	685a      	ldr	r2, [r3, #4]
 801d52e:	42a2      	cmp	r2, r4
 801d530:	d12b      	bne.n	801d58a <_malloc_r+0xe2>
 801d532:	2200      	movs	r2, #0
 801d534:	605a      	str	r2, [r3, #4]
 801d536:	e00f      	b.n	801d558 <_malloc_r+0xb0>
 801d538:	6822      	ldr	r2, [r4, #0]
 801d53a:	1b52      	subs	r2, r2, r5
 801d53c:	d41f      	bmi.n	801d57e <_malloc_r+0xd6>
 801d53e:	2a0b      	cmp	r2, #11
 801d540:	d917      	bls.n	801d572 <_malloc_r+0xca>
 801d542:	1961      	adds	r1, r4, r5
 801d544:	42a3      	cmp	r3, r4
 801d546:	6025      	str	r5, [r4, #0]
 801d548:	bf18      	it	ne
 801d54a:	6059      	strne	r1, [r3, #4]
 801d54c:	6863      	ldr	r3, [r4, #4]
 801d54e:	bf08      	it	eq
 801d550:	f8c8 1000 	streq.w	r1, [r8]
 801d554:	5162      	str	r2, [r4, r5]
 801d556:	604b      	str	r3, [r1, #4]
 801d558:	4638      	mov	r0, r7
 801d55a:	f104 060b 	add.w	r6, r4, #11
 801d55e:	f000 f829 	bl	801d5b4 <__malloc_unlock>
 801d562:	f026 0607 	bic.w	r6, r6, #7
 801d566:	1d23      	adds	r3, r4, #4
 801d568:	1af2      	subs	r2, r6, r3
 801d56a:	d0ae      	beq.n	801d4ca <_malloc_r+0x22>
 801d56c:	1b9b      	subs	r3, r3, r6
 801d56e:	50a3      	str	r3, [r4, r2]
 801d570:	e7ab      	b.n	801d4ca <_malloc_r+0x22>
 801d572:	42a3      	cmp	r3, r4
 801d574:	6862      	ldr	r2, [r4, #4]
 801d576:	d1dd      	bne.n	801d534 <_malloc_r+0x8c>
 801d578:	f8c8 2000 	str.w	r2, [r8]
 801d57c:	e7ec      	b.n	801d558 <_malloc_r+0xb0>
 801d57e:	4623      	mov	r3, r4
 801d580:	6864      	ldr	r4, [r4, #4]
 801d582:	e7ac      	b.n	801d4de <_malloc_r+0x36>
 801d584:	4634      	mov	r4, r6
 801d586:	6876      	ldr	r6, [r6, #4]
 801d588:	e7b4      	b.n	801d4f4 <_malloc_r+0x4c>
 801d58a:	4613      	mov	r3, r2
 801d58c:	e7cc      	b.n	801d528 <_malloc_r+0x80>
 801d58e:	230c      	movs	r3, #12
 801d590:	4638      	mov	r0, r7
 801d592:	603b      	str	r3, [r7, #0]
 801d594:	f000 f80e 	bl	801d5b4 <__malloc_unlock>
 801d598:	e797      	b.n	801d4ca <_malloc_r+0x22>
 801d59a:	6025      	str	r5, [r4, #0]
 801d59c:	e7dc      	b.n	801d558 <_malloc_r+0xb0>
 801d59e:	605b      	str	r3, [r3, #4]
 801d5a0:	deff      	udf	#255	; 0xff
 801d5a2:	bf00      	nop
 801d5a4:	20003be0 	.word	0x20003be0

0801d5a8 <__malloc_lock>:
 801d5a8:	4801      	ldr	r0, [pc, #4]	; (801d5b0 <__malloc_lock+0x8>)
 801d5aa:	f7ff b871 	b.w	801c690 <__retarget_lock_acquire_recursive>
 801d5ae:	bf00      	nop
 801d5b0:	20003bdc 	.word	0x20003bdc

0801d5b4 <__malloc_unlock>:
 801d5b4:	4801      	ldr	r0, [pc, #4]	; (801d5bc <__malloc_unlock+0x8>)
 801d5b6:	f7ff b86c 	b.w	801c692 <__retarget_lock_release_recursive>
 801d5ba:	bf00      	nop
 801d5bc:	20003bdc 	.word	0x20003bdc

0801d5c0 <_Balloc>:
 801d5c0:	b570      	push	{r4, r5, r6, lr}
 801d5c2:	69c6      	ldr	r6, [r0, #28]
 801d5c4:	4604      	mov	r4, r0
 801d5c6:	460d      	mov	r5, r1
 801d5c8:	b976      	cbnz	r6, 801d5e8 <_Balloc+0x28>
 801d5ca:	2010      	movs	r0, #16
 801d5cc:	f7ff ff44 	bl	801d458 <malloc>
 801d5d0:	4602      	mov	r2, r0
 801d5d2:	61e0      	str	r0, [r4, #28]
 801d5d4:	b920      	cbnz	r0, 801d5e0 <_Balloc+0x20>
 801d5d6:	216b      	movs	r1, #107	; 0x6b
 801d5d8:	4b17      	ldr	r3, [pc, #92]	; (801d638 <_Balloc+0x78>)
 801d5da:	4818      	ldr	r0, [pc, #96]	; (801d63c <_Balloc+0x7c>)
 801d5dc:	f7ff f868 	bl	801c6b0 <__assert_func>
 801d5e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d5e4:	6006      	str	r6, [r0, #0]
 801d5e6:	60c6      	str	r6, [r0, #12]
 801d5e8:	69e6      	ldr	r6, [r4, #28]
 801d5ea:	68f3      	ldr	r3, [r6, #12]
 801d5ec:	b183      	cbz	r3, 801d610 <_Balloc+0x50>
 801d5ee:	69e3      	ldr	r3, [r4, #28]
 801d5f0:	68db      	ldr	r3, [r3, #12]
 801d5f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d5f6:	b9b8      	cbnz	r0, 801d628 <_Balloc+0x68>
 801d5f8:	2101      	movs	r1, #1
 801d5fa:	fa01 f605 	lsl.w	r6, r1, r5
 801d5fe:	1d72      	adds	r2, r6, #5
 801d600:	4620      	mov	r0, r4
 801d602:	0092      	lsls	r2, r2, #2
 801d604:	f000 fda7 	bl	801e156 <_calloc_r>
 801d608:	b160      	cbz	r0, 801d624 <_Balloc+0x64>
 801d60a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d60e:	e00e      	b.n	801d62e <_Balloc+0x6e>
 801d610:	2221      	movs	r2, #33	; 0x21
 801d612:	2104      	movs	r1, #4
 801d614:	4620      	mov	r0, r4
 801d616:	f000 fd9e 	bl	801e156 <_calloc_r>
 801d61a:	69e3      	ldr	r3, [r4, #28]
 801d61c:	60f0      	str	r0, [r6, #12]
 801d61e:	68db      	ldr	r3, [r3, #12]
 801d620:	2b00      	cmp	r3, #0
 801d622:	d1e4      	bne.n	801d5ee <_Balloc+0x2e>
 801d624:	2000      	movs	r0, #0
 801d626:	bd70      	pop	{r4, r5, r6, pc}
 801d628:	6802      	ldr	r2, [r0, #0]
 801d62a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d62e:	2300      	movs	r3, #0
 801d630:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d634:	e7f7      	b.n	801d626 <_Balloc+0x66>
 801d636:	bf00      	nop
 801d638:	0801ed37 	.word	0x0801ed37
 801d63c:	0801ee5a 	.word	0x0801ee5a

0801d640 <_Bfree>:
 801d640:	b570      	push	{r4, r5, r6, lr}
 801d642:	69c6      	ldr	r6, [r0, #28]
 801d644:	4605      	mov	r5, r0
 801d646:	460c      	mov	r4, r1
 801d648:	b976      	cbnz	r6, 801d668 <_Bfree+0x28>
 801d64a:	2010      	movs	r0, #16
 801d64c:	f7ff ff04 	bl	801d458 <malloc>
 801d650:	4602      	mov	r2, r0
 801d652:	61e8      	str	r0, [r5, #28]
 801d654:	b920      	cbnz	r0, 801d660 <_Bfree+0x20>
 801d656:	218f      	movs	r1, #143	; 0x8f
 801d658:	4b08      	ldr	r3, [pc, #32]	; (801d67c <_Bfree+0x3c>)
 801d65a:	4809      	ldr	r0, [pc, #36]	; (801d680 <_Bfree+0x40>)
 801d65c:	f7ff f828 	bl	801c6b0 <__assert_func>
 801d660:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d664:	6006      	str	r6, [r0, #0]
 801d666:	60c6      	str	r6, [r0, #12]
 801d668:	b13c      	cbz	r4, 801d67a <_Bfree+0x3a>
 801d66a:	69eb      	ldr	r3, [r5, #28]
 801d66c:	6862      	ldr	r2, [r4, #4]
 801d66e:	68db      	ldr	r3, [r3, #12]
 801d670:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d674:	6021      	str	r1, [r4, #0]
 801d676:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d67a:	bd70      	pop	{r4, r5, r6, pc}
 801d67c:	0801ed37 	.word	0x0801ed37
 801d680:	0801ee5a 	.word	0x0801ee5a

0801d684 <__multadd>:
 801d684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d688:	4607      	mov	r7, r0
 801d68a:	460c      	mov	r4, r1
 801d68c:	461e      	mov	r6, r3
 801d68e:	2000      	movs	r0, #0
 801d690:	690d      	ldr	r5, [r1, #16]
 801d692:	f101 0c14 	add.w	ip, r1, #20
 801d696:	f8dc 3000 	ldr.w	r3, [ip]
 801d69a:	3001      	adds	r0, #1
 801d69c:	b299      	uxth	r1, r3
 801d69e:	fb02 6101 	mla	r1, r2, r1, r6
 801d6a2:	0c1e      	lsrs	r6, r3, #16
 801d6a4:	0c0b      	lsrs	r3, r1, #16
 801d6a6:	fb02 3306 	mla	r3, r2, r6, r3
 801d6aa:	b289      	uxth	r1, r1
 801d6ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d6b0:	4285      	cmp	r5, r0
 801d6b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d6b6:	f84c 1b04 	str.w	r1, [ip], #4
 801d6ba:	dcec      	bgt.n	801d696 <__multadd+0x12>
 801d6bc:	b30e      	cbz	r6, 801d702 <__multadd+0x7e>
 801d6be:	68a3      	ldr	r3, [r4, #8]
 801d6c0:	42ab      	cmp	r3, r5
 801d6c2:	dc19      	bgt.n	801d6f8 <__multadd+0x74>
 801d6c4:	6861      	ldr	r1, [r4, #4]
 801d6c6:	4638      	mov	r0, r7
 801d6c8:	3101      	adds	r1, #1
 801d6ca:	f7ff ff79 	bl	801d5c0 <_Balloc>
 801d6ce:	4680      	mov	r8, r0
 801d6d0:	b928      	cbnz	r0, 801d6de <__multadd+0x5a>
 801d6d2:	4602      	mov	r2, r0
 801d6d4:	21ba      	movs	r1, #186	; 0xba
 801d6d6:	4b0c      	ldr	r3, [pc, #48]	; (801d708 <__multadd+0x84>)
 801d6d8:	480c      	ldr	r0, [pc, #48]	; (801d70c <__multadd+0x88>)
 801d6da:	f7fe ffe9 	bl	801c6b0 <__assert_func>
 801d6de:	6922      	ldr	r2, [r4, #16]
 801d6e0:	f104 010c 	add.w	r1, r4, #12
 801d6e4:	3202      	adds	r2, #2
 801d6e6:	0092      	lsls	r2, r2, #2
 801d6e8:	300c      	adds	r0, #12
 801d6ea:	f000 fd1f 	bl	801e12c <memcpy>
 801d6ee:	4621      	mov	r1, r4
 801d6f0:	4638      	mov	r0, r7
 801d6f2:	f7ff ffa5 	bl	801d640 <_Bfree>
 801d6f6:	4644      	mov	r4, r8
 801d6f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d6fc:	3501      	adds	r5, #1
 801d6fe:	615e      	str	r6, [r3, #20]
 801d700:	6125      	str	r5, [r4, #16]
 801d702:	4620      	mov	r0, r4
 801d704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d708:	0801ee49 	.word	0x0801ee49
 801d70c:	0801ee5a 	.word	0x0801ee5a

0801d710 <__hi0bits>:
 801d710:	0c02      	lsrs	r2, r0, #16
 801d712:	0412      	lsls	r2, r2, #16
 801d714:	4603      	mov	r3, r0
 801d716:	b9ca      	cbnz	r2, 801d74c <__hi0bits+0x3c>
 801d718:	0403      	lsls	r3, r0, #16
 801d71a:	2010      	movs	r0, #16
 801d71c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801d720:	bf04      	itt	eq
 801d722:	021b      	lsleq	r3, r3, #8
 801d724:	3008      	addeq	r0, #8
 801d726:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801d72a:	bf04      	itt	eq
 801d72c:	011b      	lsleq	r3, r3, #4
 801d72e:	3004      	addeq	r0, #4
 801d730:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801d734:	bf04      	itt	eq
 801d736:	009b      	lsleq	r3, r3, #2
 801d738:	3002      	addeq	r0, #2
 801d73a:	2b00      	cmp	r3, #0
 801d73c:	db05      	blt.n	801d74a <__hi0bits+0x3a>
 801d73e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801d742:	f100 0001 	add.w	r0, r0, #1
 801d746:	bf08      	it	eq
 801d748:	2020      	moveq	r0, #32
 801d74a:	4770      	bx	lr
 801d74c:	2000      	movs	r0, #0
 801d74e:	e7e5      	b.n	801d71c <__hi0bits+0xc>

0801d750 <__lo0bits>:
 801d750:	6803      	ldr	r3, [r0, #0]
 801d752:	4602      	mov	r2, r0
 801d754:	f013 0007 	ands.w	r0, r3, #7
 801d758:	d00b      	beq.n	801d772 <__lo0bits+0x22>
 801d75a:	07d9      	lsls	r1, r3, #31
 801d75c:	d421      	bmi.n	801d7a2 <__lo0bits+0x52>
 801d75e:	0798      	lsls	r0, r3, #30
 801d760:	bf49      	itett	mi
 801d762:	085b      	lsrmi	r3, r3, #1
 801d764:	089b      	lsrpl	r3, r3, #2
 801d766:	2001      	movmi	r0, #1
 801d768:	6013      	strmi	r3, [r2, #0]
 801d76a:	bf5c      	itt	pl
 801d76c:	2002      	movpl	r0, #2
 801d76e:	6013      	strpl	r3, [r2, #0]
 801d770:	4770      	bx	lr
 801d772:	b299      	uxth	r1, r3
 801d774:	b909      	cbnz	r1, 801d77a <__lo0bits+0x2a>
 801d776:	2010      	movs	r0, #16
 801d778:	0c1b      	lsrs	r3, r3, #16
 801d77a:	b2d9      	uxtb	r1, r3
 801d77c:	b909      	cbnz	r1, 801d782 <__lo0bits+0x32>
 801d77e:	3008      	adds	r0, #8
 801d780:	0a1b      	lsrs	r3, r3, #8
 801d782:	0719      	lsls	r1, r3, #28
 801d784:	bf04      	itt	eq
 801d786:	091b      	lsreq	r3, r3, #4
 801d788:	3004      	addeq	r0, #4
 801d78a:	0799      	lsls	r1, r3, #30
 801d78c:	bf04      	itt	eq
 801d78e:	089b      	lsreq	r3, r3, #2
 801d790:	3002      	addeq	r0, #2
 801d792:	07d9      	lsls	r1, r3, #31
 801d794:	d403      	bmi.n	801d79e <__lo0bits+0x4e>
 801d796:	085b      	lsrs	r3, r3, #1
 801d798:	f100 0001 	add.w	r0, r0, #1
 801d79c:	d003      	beq.n	801d7a6 <__lo0bits+0x56>
 801d79e:	6013      	str	r3, [r2, #0]
 801d7a0:	4770      	bx	lr
 801d7a2:	2000      	movs	r0, #0
 801d7a4:	4770      	bx	lr
 801d7a6:	2020      	movs	r0, #32
 801d7a8:	4770      	bx	lr
	...

0801d7ac <__i2b>:
 801d7ac:	b510      	push	{r4, lr}
 801d7ae:	460c      	mov	r4, r1
 801d7b0:	2101      	movs	r1, #1
 801d7b2:	f7ff ff05 	bl	801d5c0 <_Balloc>
 801d7b6:	4602      	mov	r2, r0
 801d7b8:	b928      	cbnz	r0, 801d7c6 <__i2b+0x1a>
 801d7ba:	f240 1145 	movw	r1, #325	; 0x145
 801d7be:	4b04      	ldr	r3, [pc, #16]	; (801d7d0 <__i2b+0x24>)
 801d7c0:	4804      	ldr	r0, [pc, #16]	; (801d7d4 <__i2b+0x28>)
 801d7c2:	f7fe ff75 	bl	801c6b0 <__assert_func>
 801d7c6:	2301      	movs	r3, #1
 801d7c8:	6144      	str	r4, [r0, #20]
 801d7ca:	6103      	str	r3, [r0, #16]
 801d7cc:	bd10      	pop	{r4, pc}
 801d7ce:	bf00      	nop
 801d7d0:	0801ee49 	.word	0x0801ee49
 801d7d4:	0801ee5a 	.word	0x0801ee5a

0801d7d8 <__multiply>:
 801d7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7dc:	4691      	mov	r9, r2
 801d7de:	690a      	ldr	r2, [r1, #16]
 801d7e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d7e4:	460c      	mov	r4, r1
 801d7e6:	429a      	cmp	r2, r3
 801d7e8:	bfbe      	ittt	lt
 801d7ea:	460b      	movlt	r3, r1
 801d7ec:	464c      	movlt	r4, r9
 801d7ee:	4699      	movlt	r9, r3
 801d7f0:	6927      	ldr	r7, [r4, #16]
 801d7f2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d7f6:	68a3      	ldr	r3, [r4, #8]
 801d7f8:	6861      	ldr	r1, [r4, #4]
 801d7fa:	eb07 060a 	add.w	r6, r7, sl
 801d7fe:	42b3      	cmp	r3, r6
 801d800:	b085      	sub	sp, #20
 801d802:	bfb8      	it	lt
 801d804:	3101      	addlt	r1, #1
 801d806:	f7ff fedb 	bl	801d5c0 <_Balloc>
 801d80a:	b930      	cbnz	r0, 801d81a <__multiply+0x42>
 801d80c:	4602      	mov	r2, r0
 801d80e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801d812:	4b43      	ldr	r3, [pc, #268]	; (801d920 <__multiply+0x148>)
 801d814:	4843      	ldr	r0, [pc, #268]	; (801d924 <__multiply+0x14c>)
 801d816:	f7fe ff4b 	bl	801c6b0 <__assert_func>
 801d81a:	f100 0514 	add.w	r5, r0, #20
 801d81e:	462b      	mov	r3, r5
 801d820:	2200      	movs	r2, #0
 801d822:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801d826:	4543      	cmp	r3, r8
 801d828:	d321      	bcc.n	801d86e <__multiply+0x96>
 801d82a:	f104 0314 	add.w	r3, r4, #20
 801d82e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801d832:	f109 0314 	add.w	r3, r9, #20
 801d836:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801d83a:	9202      	str	r2, [sp, #8]
 801d83c:	1b3a      	subs	r2, r7, r4
 801d83e:	3a15      	subs	r2, #21
 801d840:	f022 0203 	bic.w	r2, r2, #3
 801d844:	3204      	adds	r2, #4
 801d846:	f104 0115 	add.w	r1, r4, #21
 801d84a:	428f      	cmp	r7, r1
 801d84c:	bf38      	it	cc
 801d84e:	2204      	movcc	r2, #4
 801d850:	9201      	str	r2, [sp, #4]
 801d852:	9a02      	ldr	r2, [sp, #8]
 801d854:	9303      	str	r3, [sp, #12]
 801d856:	429a      	cmp	r2, r3
 801d858:	d80c      	bhi.n	801d874 <__multiply+0x9c>
 801d85a:	2e00      	cmp	r6, #0
 801d85c:	dd03      	ble.n	801d866 <__multiply+0x8e>
 801d85e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d862:	2b00      	cmp	r3, #0
 801d864:	d05a      	beq.n	801d91c <__multiply+0x144>
 801d866:	6106      	str	r6, [r0, #16]
 801d868:	b005      	add	sp, #20
 801d86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d86e:	f843 2b04 	str.w	r2, [r3], #4
 801d872:	e7d8      	b.n	801d826 <__multiply+0x4e>
 801d874:	f8b3 a000 	ldrh.w	sl, [r3]
 801d878:	f1ba 0f00 	cmp.w	sl, #0
 801d87c:	d023      	beq.n	801d8c6 <__multiply+0xee>
 801d87e:	46a9      	mov	r9, r5
 801d880:	f04f 0c00 	mov.w	ip, #0
 801d884:	f104 0e14 	add.w	lr, r4, #20
 801d888:	f85e 2b04 	ldr.w	r2, [lr], #4
 801d88c:	f8d9 1000 	ldr.w	r1, [r9]
 801d890:	fa1f fb82 	uxth.w	fp, r2
 801d894:	b289      	uxth	r1, r1
 801d896:	fb0a 110b 	mla	r1, sl, fp, r1
 801d89a:	4461      	add	r1, ip
 801d89c:	f8d9 c000 	ldr.w	ip, [r9]
 801d8a0:	0c12      	lsrs	r2, r2, #16
 801d8a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801d8a6:	fb0a c202 	mla	r2, sl, r2, ip
 801d8aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d8ae:	b289      	uxth	r1, r1
 801d8b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d8b4:	4577      	cmp	r7, lr
 801d8b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d8ba:	f849 1b04 	str.w	r1, [r9], #4
 801d8be:	d8e3      	bhi.n	801d888 <__multiply+0xb0>
 801d8c0:	9a01      	ldr	r2, [sp, #4]
 801d8c2:	f845 c002 	str.w	ip, [r5, r2]
 801d8c6:	9a03      	ldr	r2, [sp, #12]
 801d8c8:	3304      	adds	r3, #4
 801d8ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d8ce:	f1b9 0f00 	cmp.w	r9, #0
 801d8d2:	d021      	beq.n	801d918 <__multiply+0x140>
 801d8d4:	46ae      	mov	lr, r5
 801d8d6:	f04f 0a00 	mov.w	sl, #0
 801d8da:	6829      	ldr	r1, [r5, #0]
 801d8dc:	f104 0c14 	add.w	ip, r4, #20
 801d8e0:	f8bc b000 	ldrh.w	fp, [ip]
 801d8e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801d8e8:	b289      	uxth	r1, r1
 801d8ea:	fb09 220b 	mla	r2, r9, fp, r2
 801d8ee:	4452      	add	r2, sl
 801d8f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d8f4:	f84e 1b04 	str.w	r1, [lr], #4
 801d8f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 801d8fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d900:	f8be 1000 	ldrh.w	r1, [lr]
 801d904:	4567      	cmp	r7, ip
 801d906:	fb09 110a 	mla	r1, r9, sl, r1
 801d90a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801d90e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d912:	d8e5      	bhi.n	801d8e0 <__multiply+0x108>
 801d914:	9a01      	ldr	r2, [sp, #4]
 801d916:	50a9      	str	r1, [r5, r2]
 801d918:	3504      	adds	r5, #4
 801d91a:	e79a      	b.n	801d852 <__multiply+0x7a>
 801d91c:	3e01      	subs	r6, #1
 801d91e:	e79c      	b.n	801d85a <__multiply+0x82>
 801d920:	0801ee49 	.word	0x0801ee49
 801d924:	0801ee5a 	.word	0x0801ee5a

0801d928 <__pow5mult>:
 801d928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d92c:	4615      	mov	r5, r2
 801d92e:	f012 0203 	ands.w	r2, r2, #3
 801d932:	4606      	mov	r6, r0
 801d934:	460f      	mov	r7, r1
 801d936:	d007      	beq.n	801d948 <__pow5mult+0x20>
 801d938:	4c25      	ldr	r4, [pc, #148]	; (801d9d0 <__pow5mult+0xa8>)
 801d93a:	3a01      	subs	r2, #1
 801d93c:	2300      	movs	r3, #0
 801d93e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d942:	f7ff fe9f 	bl	801d684 <__multadd>
 801d946:	4607      	mov	r7, r0
 801d948:	10ad      	asrs	r5, r5, #2
 801d94a:	d03d      	beq.n	801d9c8 <__pow5mult+0xa0>
 801d94c:	69f4      	ldr	r4, [r6, #28]
 801d94e:	b97c      	cbnz	r4, 801d970 <__pow5mult+0x48>
 801d950:	2010      	movs	r0, #16
 801d952:	f7ff fd81 	bl	801d458 <malloc>
 801d956:	4602      	mov	r2, r0
 801d958:	61f0      	str	r0, [r6, #28]
 801d95a:	b928      	cbnz	r0, 801d968 <__pow5mult+0x40>
 801d95c:	f240 11b3 	movw	r1, #435	; 0x1b3
 801d960:	4b1c      	ldr	r3, [pc, #112]	; (801d9d4 <__pow5mult+0xac>)
 801d962:	481d      	ldr	r0, [pc, #116]	; (801d9d8 <__pow5mult+0xb0>)
 801d964:	f7fe fea4 	bl	801c6b0 <__assert_func>
 801d968:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d96c:	6004      	str	r4, [r0, #0]
 801d96e:	60c4      	str	r4, [r0, #12]
 801d970:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801d974:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d978:	b94c      	cbnz	r4, 801d98e <__pow5mult+0x66>
 801d97a:	f240 2171 	movw	r1, #625	; 0x271
 801d97e:	4630      	mov	r0, r6
 801d980:	f7ff ff14 	bl	801d7ac <__i2b>
 801d984:	2300      	movs	r3, #0
 801d986:	4604      	mov	r4, r0
 801d988:	f8c8 0008 	str.w	r0, [r8, #8]
 801d98c:	6003      	str	r3, [r0, #0]
 801d98e:	f04f 0900 	mov.w	r9, #0
 801d992:	07eb      	lsls	r3, r5, #31
 801d994:	d50a      	bpl.n	801d9ac <__pow5mult+0x84>
 801d996:	4639      	mov	r1, r7
 801d998:	4622      	mov	r2, r4
 801d99a:	4630      	mov	r0, r6
 801d99c:	f7ff ff1c 	bl	801d7d8 <__multiply>
 801d9a0:	4680      	mov	r8, r0
 801d9a2:	4639      	mov	r1, r7
 801d9a4:	4630      	mov	r0, r6
 801d9a6:	f7ff fe4b 	bl	801d640 <_Bfree>
 801d9aa:	4647      	mov	r7, r8
 801d9ac:	106d      	asrs	r5, r5, #1
 801d9ae:	d00b      	beq.n	801d9c8 <__pow5mult+0xa0>
 801d9b0:	6820      	ldr	r0, [r4, #0]
 801d9b2:	b938      	cbnz	r0, 801d9c4 <__pow5mult+0x9c>
 801d9b4:	4622      	mov	r2, r4
 801d9b6:	4621      	mov	r1, r4
 801d9b8:	4630      	mov	r0, r6
 801d9ba:	f7ff ff0d 	bl	801d7d8 <__multiply>
 801d9be:	6020      	str	r0, [r4, #0]
 801d9c0:	f8c0 9000 	str.w	r9, [r0]
 801d9c4:	4604      	mov	r4, r0
 801d9c6:	e7e4      	b.n	801d992 <__pow5mult+0x6a>
 801d9c8:	4638      	mov	r0, r7
 801d9ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d9ce:	bf00      	nop
 801d9d0:	0801efa8 	.word	0x0801efa8
 801d9d4:	0801ed37 	.word	0x0801ed37
 801d9d8:	0801ee5a 	.word	0x0801ee5a

0801d9dc <__lshift>:
 801d9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d9e0:	460c      	mov	r4, r1
 801d9e2:	4607      	mov	r7, r0
 801d9e4:	4691      	mov	r9, r2
 801d9e6:	6923      	ldr	r3, [r4, #16]
 801d9e8:	6849      	ldr	r1, [r1, #4]
 801d9ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d9ee:	68a3      	ldr	r3, [r4, #8]
 801d9f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d9f4:	f108 0601 	add.w	r6, r8, #1
 801d9f8:	42b3      	cmp	r3, r6
 801d9fa:	db0b      	blt.n	801da14 <__lshift+0x38>
 801d9fc:	4638      	mov	r0, r7
 801d9fe:	f7ff fddf 	bl	801d5c0 <_Balloc>
 801da02:	4605      	mov	r5, r0
 801da04:	b948      	cbnz	r0, 801da1a <__lshift+0x3e>
 801da06:	4602      	mov	r2, r0
 801da08:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801da0c:	4b27      	ldr	r3, [pc, #156]	; (801daac <__lshift+0xd0>)
 801da0e:	4828      	ldr	r0, [pc, #160]	; (801dab0 <__lshift+0xd4>)
 801da10:	f7fe fe4e 	bl	801c6b0 <__assert_func>
 801da14:	3101      	adds	r1, #1
 801da16:	005b      	lsls	r3, r3, #1
 801da18:	e7ee      	b.n	801d9f8 <__lshift+0x1c>
 801da1a:	2300      	movs	r3, #0
 801da1c:	f100 0114 	add.w	r1, r0, #20
 801da20:	f100 0210 	add.w	r2, r0, #16
 801da24:	4618      	mov	r0, r3
 801da26:	4553      	cmp	r3, sl
 801da28:	db33      	blt.n	801da92 <__lshift+0xb6>
 801da2a:	6920      	ldr	r0, [r4, #16]
 801da2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801da30:	f104 0314 	add.w	r3, r4, #20
 801da34:	f019 091f 	ands.w	r9, r9, #31
 801da38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801da3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801da40:	d02b      	beq.n	801da9a <__lshift+0xbe>
 801da42:	468a      	mov	sl, r1
 801da44:	2200      	movs	r2, #0
 801da46:	f1c9 0e20 	rsb	lr, r9, #32
 801da4a:	6818      	ldr	r0, [r3, #0]
 801da4c:	fa00 f009 	lsl.w	r0, r0, r9
 801da50:	4310      	orrs	r0, r2
 801da52:	f84a 0b04 	str.w	r0, [sl], #4
 801da56:	f853 2b04 	ldr.w	r2, [r3], #4
 801da5a:	459c      	cmp	ip, r3
 801da5c:	fa22 f20e 	lsr.w	r2, r2, lr
 801da60:	d8f3      	bhi.n	801da4a <__lshift+0x6e>
 801da62:	ebac 0304 	sub.w	r3, ip, r4
 801da66:	3b15      	subs	r3, #21
 801da68:	f023 0303 	bic.w	r3, r3, #3
 801da6c:	3304      	adds	r3, #4
 801da6e:	f104 0015 	add.w	r0, r4, #21
 801da72:	4584      	cmp	ip, r0
 801da74:	bf38      	it	cc
 801da76:	2304      	movcc	r3, #4
 801da78:	50ca      	str	r2, [r1, r3]
 801da7a:	b10a      	cbz	r2, 801da80 <__lshift+0xa4>
 801da7c:	f108 0602 	add.w	r6, r8, #2
 801da80:	3e01      	subs	r6, #1
 801da82:	4638      	mov	r0, r7
 801da84:	4621      	mov	r1, r4
 801da86:	612e      	str	r6, [r5, #16]
 801da88:	f7ff fdda 	bl	801d640 <_Bfree>
 801da8c:	4628      	mov	r0, r5
 801da8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801da92:	f842 0f04 	str.w	r0, [r2, #4]!
 801da96:	3301      	adds	r3, #1
 801da98:	e7c5      	b.n	801da26 <__lshift+0x4a>
 801da9a:	3904      	subs	r1, #4
 801da9c:	f853 2b04 	ldr.w	r2, [r3], #4
 801daa0:	459c      	cmp	ip, r3
 801daa2:	f841 2f04 	str.w	r2, [r1, #4]!
 801daa6:	d8f9      	bhi.n	801da9c <__lshift+0xc0>
 801daa8:	e7ea      	b.n	801da80 <__lshift+0xa4>
 801daaa:	bf00      	nop
 801daac:	0801ee49 	.word	0x0801ee49
 801dab0:	0801ee5a 	.word	0x0801ee5a

0801dab4 <__mcmp>:
 801dab4:	4603      	mov	r3, r0
 801dab6:	690a      	ldr	r2, [r1, #16]
 801dab8:	6900      	ldr	r0, [r0, #16]
 801daba:	b530      	push	{r4, r5, lr}
 801dabc:	1a80      	subs	r0, r0, r2
 801dabe:	d10d      	bne.n	801dadc <__mcmp+0x28>
 801dac0:	3314      	adds	r3, #20
 801dac2:	3114      	adds	r1, #20
 801dac4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801dac8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801dacc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801dad0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801dad4:	4295      	cmp	r5, r2
 801dad6:	d002      	beq.n	801dade <__mcmp+0x2a>
 801dad8:	d304      	bcc.n	801dae4 <__mcmp+0x30>
 801dada:	2001      	movs	r0, #1
 801dadc:	bd30      	pop	{r4, r5, pc}
 801dade:	42a3      	cmp	r3, r4
 801dae0:	d3f4      	bcc.n	801dacc <__mcmp+0x18>
 801dae2:	e7fb      	b.n	801dadc <__mcmp+0x28>
 801dae4:	f04f 30ff 	mov.w	r0, #4294967295
 801dae8:	e7f8      	b.n	801dadc <__mcmp+0x28>
	...

0801daec <__mdiff>:
 801daec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801daf0:	460d      	mov	r5, r1
 801daf2:	4607      	mov	r7, r0
 801daf4:	4611      	mov	r1, r2
 801daf6:	4628      	mov	r0, r5
 801daf8:	4614      	mov	r4, r2
 801dafa:	f7ff ffdb 	bl	801dab4 <__mcmp>
 801dafe:	1e06      	subs	r6, r0, #0
 801db00:	d111      	bne.n	801db26 <__mdiff+0x3a>
 801db02:	4631      	mov	r1, r6
 801db04:	4638      	mov	r0, r7
 801db06:	f7ff fd5b 	bl	801d5c0 <_Balloc>
 801db0a:	4602      	mov	r2, r0
 801db0c:	b928      	cbnz	r0, 801db1a <__mdiff+0x2e>
 801db0e:	f240 2137 	movw	r1, #567	; 0x237
 801db12:	4b3a      	ldr	r3, [pc, #232]	; (801dbfc <__mdiff+0x110>)
 801db14:	483a      	ldr	r0, [pc, #232]	; (801dc00 <__mdiff+0x114>)
 801db16:	f7fe fdcb 	bl	801c6b0 <__assert_func>
 801db1a:	2301      	movs	r3, #1
 801db1c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801db20:	4610      	mov	r0, r2
 801db22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db26:	bfa4      	itt	ge
 801db28:	4623      	movge	r3, r4
 801db2a:	462c      	movge	r4, r5
 801db2c:	4638      	mov	r0, r7
 801db2e:	6861      	ldr	r1, [r4, #4]
 801db30:	bfa6      	itte	ge
 801db32:	461d      	movge	r5, r3
 801db34:	2600      	movge	r6, #0
 801db36:	2601      	movlt	r6, #1
 801db38:	f7ff fd42 	bl	801d5c0 <_Balloc>
 801db3c:	4602      	mov	r2, r0
 801db3e:	b918      	cbnz	r0, 801db48 <__mdiff+0x5c>
 801db40:	f240 2145 	movw	r1, #581	; 0x245
 801db44:	4b2d      	ldr	r3, [pc, #180]	; (801dbfc <__mdiff+0x110>)
 801db46:	e7e5      	b.n	801db14 <__mdiff+0x28>
 801db48:	f102 0814 	add.w	r8, r2, #20
 801db4c:	46c2      	mov	sl, r8
 801db4e:	f04f 0c00 	mov.w	ip, #0
 801db52:	6927      	ldr	r7, [r4, #16]
 801db54:	60c6      	str	r6, [r0, #12]
 801db56:	692e      	ldr	r6, [r5, #16]
 801db58:	f104 0014 	add.w	r0, r4, #20
 801db5c:	f105 0914 	add.w	r9, r5, #20
 801db60:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 801db64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801db68:	3410      	adds	r4, #16
 801db6a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801db6e:	f859 3b04 	ldr.w	r3, [r9], #4
 801db72:	fa1f f18b 	uxth.w	r1, fp
 801db76:	4461      	add	r1, ip
 801db78:	fa1f fc83 	uxth.w	ip, r3
 801db7c:	0c1b      	lsrs	r3, r3, #16
 801db7e:	eba1 010c 	sub.w	r1, r1, ip
 801db82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801db86:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801db8a:	b289      	uxth	r1, r1
 801db8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801db90:	454e      	cmp	r6, r9
 801db92:	ea4f 4c23 	mov.w	ip, r3, asr #16
 801db96:	f84a 1b04 	str.w	r1, [sl], #4
 801db9a:	d8e6      	bhi.n	801db6a <__mdiff+0x7e>
 801db9c:	1b73      	subs	r3, r6, r5
 801db9e:	3b15      	subs	r3, #21
 801dba0:	f023 0303 	bic.w	r3, r3, #3
 801dba4:	3515      	adds	r5, #21
 801dba6:	3304      	adds	r3, #4
 801dba8:	42ae      	cmp	r6, r5
 801dbaa:	bf38      	it	cc
 801dbac:	2304      	movcc	r3, #4
 801dbae:	4418      	add	r0, r3
 801dbb0:	4443      	add	r3, r8
 801dbb2:	461e      	mov	r6, r3
 801dbb4:	4605      	mov	r5, r0
 801dbb6:	4575      	cmp	r5, lr
 801dbb8:	d30e      	bcc.n	801dbd8 <__mdiff+0xec>
 801dbba:	f10e 0103 	add.w	r1, lr, #3
 801dbbe:	1a09      	subs	r1, r1, r0
 801dbc0:	f021 0103 	bic.w	r1, r1, #3
 801dbc4:	3803      	subs	r0, #3
 801dbc6:	4586      	cmp	lr, r0
 801dbc8:	bf38      	it	cc
 801dbca:	2100      	movcc	r1, #0
 801dbcc:	440b      	add	r3, r1
 801dbce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801dbd2:	b189      	cbz	r1, 801dbf8 <__mdiff+0x10c>
 801dbd4:	6117      	str	r7, [r2, #16]
 801dbd6:	e7a3      	b.n	801db20 <__mdiff+0x34>
 801dbd8:	f855 8b04 	ldr.w	r8, [r5], #4
 801dbdc:	fa1f f188 	uxth.w	r1, r8
 801dbe0:	4461      	add	r1, ip
 801dbe2:	140c      	asrs	r4, r1, #16
 801dbe4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801dbe8:	b289      	uxth	r1, r1
 801dbea:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801dbee:	ea4f 4c24 	mov.w	ip, r4, asr #16
 801dbf2:	f846 1b04 	str.w	r1, [r6], #4
 801dbf6:	e7de      	b.n	801dbb6 <__mdiff+0xca>
 801dbf8:	3f01      	subs	r7, #1
 801dbfa:	e7e8      	b.n	801dbce <__mdiff+0xe2>
 801dbfc:	0801ee49 	.word	0x0801ee49
 801dc00:	0801ee5a 	.word	0x0801ee5a

0801dc04 <__d2b>:
 801dc04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dc06:	2101      	movs	r1, #1
 801dc08:	4617      	mov	r7, r2
 801dc0a:	461c      	mov	r4, r3
 801dc0c:	9e08      	ldr	r6, [sp, #32]
 801dc0e:	f7ff fcd7 	bl	801d5c0 <_Balloc>
 801dc12:	4605      	mov	r5, r0
 801dc14:	b930      	cbnz	r0, 801dc24 <__d2b+0x20>
 801dc16:	4602      	mov	r2, r0
 801dc18:	f240 310f 	movw	r1, #783	; 0x30f
 801dc1c:	4b22      	ldr	r3, [pc, #136]	; (801dca8 <__d2b+0xa4>)
 801dc1e:	4823      	ldr	r0, [pc, #140]	; (801dcac <__d2b+0xa8>)
 801dc20:	f7fe fd46 	bl	801c6b0 <__assert_func>
 801dc24:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801dc28:	f3c4 540a 	ubfx	r4, r4, #20, #11
 801dc2c:	bb24      	cbnz	r4, 801dc78 <__d2b+0x74>
 801dc2e:	2f00      	cmp	r7, #0
 801dc30:	9301      	str	r3, [sp, #4]
 801dc32:	d026      	beq.n	801dc82 <__d2b+0x7e>
 801dc34:	4668      	mov	r0, sp
 801dc36:	9700      	str	r7, [sp, #0]
 801dc38:	f7ff fd8a 	bl	801d750 <__lo0bits>
 801dc3c:	e9dd 1200 	ldrd	r1, r2, [sp]
 801dc40:	b1e8      	cbz	r0, 801dc7e <__d2b+0x7a>
 801dc42:	f1c0 0320 	rsb	r3, r0, #32
 801dc46:	fa02 f303 	lsl.w	r3, r2, r3
 801dc4a:	430b      	orrs	r3, r1
 801dc4c:	40c2      	lsrs	r2, r0
 801dc4e:	616b      	str	r3, [r5, #20]
 801dc50:	9201      	str	r2, [sp, #4]
 801dc52:	9b01      	ldr	r3, [sp, #4]
 801dc54:	2b00      	cmp	r3, #0
 801dc56:	bf14      	ite	ne
 801dc58:	2102      	movne	r1, #2
 801dc5a:	2101      	moveq	r1, #1
 801dc5c:	61ab      	str	r3, [r5, #24]
 801dc5e:	6129      	str	r1, [r5, #16]
 801dc60:	b1bc      	cbz	r4, 801dc92 <__d2b+0x8e>
 801dc62:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801dc66:	4404      	add	r4, r0
 801dc68:	6034      	str	r4, [r6, #0]
 801dc6a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801dc6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc70:	6018      	str	r0, [r3, #0]
 801dc72:	4628      	mov	r0, r5
 801dc74:	b003      	add	sp, #12
 801dc76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dc78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801dc7c:	e7d7      	b.n	801dc2e <__d2b+0x2a>
 801dc7e:	6169      	str	r1, [r5, #20]
 801dc80:	e7e7      	b.n	801dc52 <__d2b+0x4e>
 801dc82:	a801      	add	r0, sp, #4
 801dc84:	f7ff fd64 	bl	801d750 <__lo0bits>
 801dc88:	9b01      	ldr	r3, [sp, #4]
 801dc8a:	2101      	movs	r1, #1
 801dc8c:	616b      	str	r3, [r5, #20]
 801dc8e:	3020      	adds	r0, #32
 801dc90:	e7e5      	b.n	801dc5e <__d2b+0x5a>
 801dc92:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801dc96:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 801dc9a:	6030      	str	r0, [r6, #0]
 801dc9c:	6918      	ldr	r0, [r3, #16]
 801dc9e:	f7ff fd37 	bl	801d710 <__hi0bits>
 801dca2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801dca6:	e7e2      	b.n	801dc6e <__d2b+0x6a>
 801dca8:	0801ee49 	.word	0x0801ee49
 801dcac:	0801ee5a 	.word	0x0801ee5a

0801dcb0 <__ssputs_r>:
 801dcb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dcb4:	461f      	mov	r7, r3
 801dcb6:	688e      	ldr	r6, [r1, #8]
 801dcb8:	4682      	mov	sl, r0
 801dcba:	42be      	cmp	r6, r7
 801dcbc:	460c      	mov	r4, r1
 801dcbe:	4690      	mov	r8, r2
 801dcc0:	680b      	ldr	r3, [r1, #0]
 801dcc2:	d82c      	bhi.n	801dd1e <__ssputs_r+0x6e>
 801dcc4:	898a      	ldrh	r2, [r1, #12]
 801dcc6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801dcca:	d026      	beq.n	801dd1a <__ssputs_r+0x6a>
 801dccc:	6965      	ldr	r5, [r4, #20]
 801dcce:	6909      	ldr	r1, [r1, #16]
 801dcd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dcd4:	eba3 0901 	sub.w	r9, r3, r1
 801dcd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801dcdc:	1c7b      	adds	r3, r7, #1
 801dcde:	444b      	add	r3, r9
 801dce0:	106d      	asrs	r5, r5, #1
 801dce2:	429d      	cmp	r5, r3
 801dce4:	bf38      	it	cc
 801dce6:	461d      	movcc	r5, r3
 801dce8:	0553      	lsls	r3, r2, #21
 801dcea:	d527      	bpl.n	801dd3c <__ssputs_r+0x8c>
 801dcec:	4629      	mov	r1, r5
 801dcee:	f7ff fbdb 	bl	801d4a8 <_malloc_r>
 801dcf2:	4606      	mov	r6, r0
 801dcf4:	b360      	cbz	r0, 801dd50 <__ssputs_r+0xa0>
 801dcf6:	464a      	mov	r2, r9
 801dcf8:	6921      	ldr	r1, [r4, #16]
 801dcfa:	f000 fa17 	bl	801e12c <memcpy>
 801dcfe:	89a3      	ldrh	r3, [r4, #12]
 801dd00:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801dd04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dd08:	81a3      	strh	r3, [r4, #12]
 801dd0a:	6126      	str	r6, [r4, #16]
 801dd0c:	444e      	add	r6, r9
 801dd0e:	6026      	str	r6, [r4, #0]
 801dd10:	463e      	mov	r6, r7
 801dd12:	6165      	str	r5, [r4, #20]
 801dd14:	eba5 0509 	sub.w	r5, r5, r9
 801dd18:	60a5      	str	r5, [r4, #8]
 801dd1a:	42be      	cmp	r6, r7
 801dd1c:	d900      	bls.n	801dd20 <__ssputs_r+0x70>
 801dd1e:	463e      	mov	r6, r7
 801dd20:	4632      	mov	r2, r6
 801dd22:	4641      	mov	r1, r8
 801dd24:	6820      	ldr	r0, [r4, #0]
 801dd26:	f000 f9d7 	bl	801e0d8 <memmove>
 801dd2a:	2000      	movs	r0, #0
 801dd2c:	68a3      	ldr	r3, [r4, #8]
 801dd2e:	1b9b      	subs	r3, r3, r6
 801dd30:	60a3      	str	r3, [r4, #8]
 801dd32:	6823      	ldr	r3, [r4, #0]
 801dd34:	4433      	add	r3, r6
 801dd36:	6023      	str	r3, [r4, #0]
 801dd38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dd3c:	462a      	mov	r2, r5
 801dd3e:	f000 fa30 	bl	801e1a2 <_realloc_r>
 801dd42:	4606      	mov	r6, r0
 801dd44:	2800      	cmp	r0, #0
 801dd46:	d1e0      	bne.n	801dd0a <__ssputs_r+0x5a>
 801dd48:	4650      	mov	r0, sl
 801dd4a:	6921      	ldr	r1, [r4, #16]
 801dd4c:	f7ff fb3c 	bl	801d3c8 <_free_r>
 801dd50:	230c      	movs	r3, #12
 801dd52:	f8ca 3000 	str.w	r3, [sl]
 801dd56:	89a3      	ldrh	r3, [r4, #12]
 801dd58:	f04f 30ff 	mov.w	r0, #4294967295
 801dd5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dd60:	81a3      	strh	r3, [r4, #12]
 801dd62:	e7e9      	b.n	801dd38 <__ssputs_r+0x88>

0801dd64 <_svfiprintf_r>:
 801dd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd68:	4698      	mov	r8, r3
 801dd6a:	898b      	ldrh	r3, [r1, #12]
 801dd6c:	4607      	mov	r7, r0
 801dd6e:	061b      	lsls	r3, r3, #24
 801dd70:	460d      	mov	r5, r1
 801dd72:	4614      	mov	r4, r2
 801dd74:	b09d      	sub	sp, #116	; 0x74
 801dd76:	d50e      	bpl.n	801dd96 <_svfiprintf_r+0x32>
 801dd78:	690b      	ldr	r3, [r1, #16]
 801dd7a:	b963      	cbnz	r3, 801dd96 <_svfiprintf_r+0x32>
 801dd7c:	2140      	movs	r1, #64	; 0x40
 801dd7e:	f7ff fb93 	bl	801d4a8 <_malloc_r>
 801dd82:	6028      	str	r0, [r5, #0]
 801dd84:	6128      	str	r0, [r5, #16]
 801dd86:	b920      	cbnz	r0, 801dd92 <_svfiprintf_r+0x2e>
 801dd88:	230c      	movs	r3, #12
 801dd8a:	603b      	str	r3, [r7, #0]
 801dd8c:	f04f 30ff 	mov.w	r0, #4294967295
 801dd90:	e0d0      	b.n	801df34 <_svfiprintf_r+0x1d0>
 801dd92:	2340      	movs	r3, #64	; 0x40
 801dd94:	616b      	str	r3, [r5, #20]
 801dd96:	2300      	movs	r3, #0
 801dd98:	9309      	str	r3, [sp, #36]	; 0x24
 801dd9a:	2320      	movs	r3, #32
 801dd9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801dda0:	2330      	movs	r3, #48	; 0x30
 801dda2:	f04f 0901 	mov.w	r9, #1
 801dda6:	f8cd 800c 	str.w	r8, [sp, #12]
 801ddaa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 801df4c <_svfiprintf_r+0x1e8>
 801ddae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ddb2:	4623      	mov	r3, r4
 801ddb4:	469a      	mov	sl, r3
 801ddb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ddba:	b10a      	cbz	r2, 801ddc0 <_svfiprintf_r+0x5c>
 801ddbc:	2a25      	cmp	r2, #37	; 0x25
 801ddbe:	d1f9      	bne.n	801ddb4 <_svfiprintf_r+0x50>
 801ddc0:	ebba 0b04 	subs.w	fp, sl, r4
 801ddc4:	d00b      	beq.n	801ddde <_svfiprintf_r+0x7a>
 801ddc6:	465b      	mov	r3, fp
 801ddc8:	4622      	mov	r2, r4
 801ddca:	4629      	mov	r1, r5
 801ddcc:	4638      	mov	r0, r7
 801ddce:	f7ff ff6f 	bl	801dcb0 <__ssputs_r>
 801ddd2:	3001      	adds	r0, #1
 801ddd4:	f000 80a9 	beq.w	801df2a <_svfiprintf_r+0x1c6>
 801ddd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ddda:	445a      	add	r2, fp
 801dddc:	9209      	str	r2, [sp, #36]	; 0x24
 801ddde:	f89a 3000 	ldrb.w	r3, [sl]
 801dde2:	2b00      	cmp	r3, #0
 801dde4:	f000 80a1 	beq.w	801df2a <_svfiprintf_r+0x1c6>
 801dde8:	2300      	movs	r3, #0
 801ddea:	f04f 32ff 	mov.w	r2, #4294967295
 801ddee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ddf2:	f10a 0a01 	add.w	sl, sl, #1
 801ddf6:	9304      	str	r3, [sp, #16]
 801ddf8:	9307      	str	r3, [sp, #28]
 801ddfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ddfe:	931a      	str	r3, [sp, #104]	; 0x68
 801de00:	4654      	mov	r4, sl
 801de02:	2205      	movs	r2, #5
 801de04:	f814 1b01 	ldrb.w	r1, [r4], #1
 801de08:	4850      	ldr	r0, [pc, #320]	; (801df4c <_svfiprintf_r+0x1e8>)
 801de0a:	f7fe fc43 	bl	801c694 <memchr>
 801de0e:	9a04      	ldr	r2, [sp, #16]
 801de10:	b9d8      	cbnz	r0, 801de4a <_svfiprintf_r+0xe6>
 801de12:	06d0      	lsls	r0, r2, #27
 801de14:	bf44      	itt	mi
 801de16:	2320      	movmi	r3, #32
 801de18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801de1c:	0711      	lsls	r1, r2, #28
 801de1e:	bf44      	itt	mi
 801de20:	232b      	movmi	r3, #43	; 0x2b
 801de22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801de26:	f89a 3000 	ldrb.w	r3, [sl]
 801de2a:	2b2a      	cmp	r3, #42	; 0x2a
 801de2c:	d015      	beq.n	801de5a <_svfiprintf_r+0xf6>
 801de2e:	4654      	mov	r4, sl
 801de30:	2000      	movs	r0, #0
 801de32:	f04f 0c0a 	mov.w	ip, #10
 801de36:	9a07      	ldr	r2, [sp, #28]
 801de38:	4621      	mov	r1, r4
 801de3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801de3e:	3b30      	subs	r3, #48	; 0x30
 801de40:	2b09      	cmp	r3, #9
 801de42:	d94d      	bls.n	801dee0 <_svfiprintf_r+0x17c>
 801de44:	b1b0      	cbz	r0, 801de74 <_svfiprintf_r+0x110>
 801de46:	9207      	str	r2, [sp, #28]
 801de48:	e014      	b.n	801de74 <_svfiprintf_r+0x110>
 801de4a:	eba0 0308 	sub.w	r3, r0, r8
 801de4e:	fa09 f303 	lsl.w	r3, r9, r3
 801de52:	4313      	orrs	r3, r2
 801de54:	46a2      	mov	sl, r4
 801de56:	9304      	str	r3, [sp, #16]
 801de58:	e7d2      	b.n	801de00 <_svfiprintf_r+0x9c>
 801de5a:	9b03      	ldr	r3, [sp, #12]
 801de5c:	1d19      	adds	r1, r3, #4
 801de5e:	681b      	ldr	r3, [r3, #0]
 801de60:	9103      	str	r1, [sp, #12]
 801de62:	2b00      	cmp	r3, #0
 801de64:	bfbb      	ittet	lt
 801de66:	425b      	neglt	r3, r3
 801de68:	f042 0202 	orrlt.w	r2, r2, #2
 801de6c:	9307      	strge	r3, [sp, #28]
 801de6e:	9307      	strlt	r3, [sp, #28]
 801de70:	bfb8      	it	lt
 801de72:	9204      	strlt	r2, [sp, #16]
 801de74:	7823      	ldrb	r3, [r4, #0]
 801de76:	2b2e      	cmp	r3, #46	; 0x2e
 801de78:	d10c      	bne.n	801de94 <_svfiprintf_r+0x130>
 801de7a:	7863      	ldrb	r3, [r4, #1]
 801de7c:	2b2a      	cmp	r3, #42	; 0x2a
 801de7e:	d134      	bne.n	801deea <_svfiprintf_r+0x186>
 801de80:	9b03      	ldr	r3, [sp, #12]
 801de82:	3402      	adds	r4, #2
 801de84:	1d1a      	adds	r2, r3, #4
 801de86:	681b      	ldr	r3, [r3, #0]
 801de88:	9203      	str	r2, [sp, #12]
 801de8a:	2b00      	cmp	r3, #0
 801de8c:	bfb8      	it	lt
 801de8e:	f04f 33ff 	movlt.w	r3, #4294967295
 801de92:	9305      	str	r3, [sp, #20]
 801de94:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 801df50 <_svfiprintf_r+0x1ec>
 801de98:	2203      	movs	r2, #3
 801de9a:	4650      	mov	r0, sl
 801de9c:	7821      	ldrb	r1, [r4, #0]
 801de9e:	f7fe fbf9 	bl	801c694 <memchr>
 801dea2:	b138      	cbz	r0, 801deb4 <_svfiprintf_r+0x150>
 801dea4:	2240      	movs	r2, #64	; 0x40
 801dea6:	9b04      	ldr	r3, [sp, #16]
 801dea8:	eba0 000a 	sub.w	r0, r0, sl
 801deac:	4082      	lsls	r2, r0
 801deae:	4313      	orrs	r3, r2
 801deb0:	3401      	adds	r4, #1
 801deb2:	9304      	str	r3, [sp, #16]
 801deb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801deb8:	2206      	movs	r2, #6
 801deba:	4826      	ldr	r0, [pc, #152]	; (801df54 <_svfiprintf_r+0x1f0>)
 801debc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dec0:	f7fe fbe8 	bl	801c694 <memchr>
 801dec4:	2800      	cmp	r0, #0
 801dec6:	d038      	beq.n	801df3a <_svfiprintf_r+0x1d6>
 801dec8:	4b23      	ldr	r3, [pc, #140]	; (801df58 <_svfiprintf_r+0x1f4>)
 801deca:	bb1b      	cbnz	r3, 801df14 <_svfiprintf_r+0x1b0>
 801decc:	9b03      	ldr	r3, [sp, #12]
 801dece:	3307      	adds	r3, #7
 801ded0:	f023 0307 	bic.w	r3, r3, #7
 801ded4:	3308      	adds	r3, #8
 801ded6:	9303      	str	r3, [sp, #12]
 801ded8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801deda:	4433      	add	r3, r6
 801dedc:	9309      	str	r3, [sp, #36]	; 0x24
 801dede:	e768      	b.n	801ddb2 <_svfiprintf_r+0x4e>
 801dee0:	460c      	mov	r4, r1
 801dee2:	2001      	movs	r0, #1
 801dee4:	fb0c 3202 	mla	r2, ip, r2, r3
 801dee8:	e7a6      	b.n	801de38 <_svfiprintf_r+0xd4>
 801deea:	2300      	movs	r3, #0
 801deec:	f04f 0c0a 	mov.w	ip, #10
 801def0:	4619      	mov	r1, r3
 801def2:	3401      	adds	r4, #1
 801def4:	9305      	str	r3, [sp, #20]
 801def6:	4620      	mov	r0, r4
 801def8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801defc:	3a30      	subs	r2, #48	; 0x30
 801defe:	2a09      	cmp	r2, #9
 801df00:	d903      	bls.n	801df0a <_svfiprintf_r+0x1a6>
 801df02:	2b00      	cmp	r3, #0
 801df04:	d0c6      	beq.n	801de94 <_svfiprintf_r+0x130>
 801df06:	9105      	str	r1, [sp, #20]
 801df08:	e7c4      	b.n	801de94 <_svfiprintf_r+0x130>
 801df0a:	4604      	mov	r4, r0
 801df0c:	2301      	movs	r3, #1
 801df0e:	fb0c 2101 	mla	r1, ip, r1, r2
 801df12:	e7f0      	b.n	801def6 <_svfiprintf_r+0x192>
 801df14:	ab03      	add	r3, sp, #12
 801df16:	9300      	str	r3, [sp, #0]
 801df18:	462a      	mov	r2, r5
 801df1a:	4638      	mov	r0, r7
 801df1c:	4b0f      	ldr	r3, [pc, #60]	; (801df5c <_svfiprintf_r+0x1f8>)
 801df1e:	a904      	add	r1, sp, #16
 801df20:	f7fd fe08 	bl	801bb34 <_printf_float>
 801df24:	1c42      	adds	r2, r0, #1
 801df26:	4606      	mov	r6, r0
 801df28:	d1d6      	bne.n	801ded8 <_svfiprintf_r+0x174>
 801df2a:	89ab      	ldrh	r3, [r5, #12]
 801df2c:	065b      	lsls	r3, r3, #25
 801df2e:	f53f af2d 	bmi.w	801dd8c <_svfiprintf_r+0x28>
 801df32:	9809      	ldr	r0, [sp, #36]	; 0x24
 801df34:	b01d      	add	sp, #116	; 0x74
 801df36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df3a:	ab03      	add	r3, sp, #12
 801df3c:	9300      	str	r3, [sp, #0]
 801df3e:	462a      	mov	r2, r5
 801df40:	4638      	mov	r0, r7
 801df42:	4b06      	ldr	r3, [pc, #24]	; (801df5c <_svfiprintf_r+0x1f8>)
 801df44:	a904      	add	r1, sp, #16
 801df46:	f7fe f895 	bl	801c074 <_printf_i>
 801df4a:	e7eb      	b.n	801df24 <_svfiprintf_r+0x1c0>
 801df4c:	0801efb4 	.word	0x0801efb4
 801df50:	0801efba 	.word	0x0801efba
 801df54:	0801efbe 	.word	0x0801efbe
 801df58:	0801bb35 	.word	0x0801bb35
 801df5c:	0801dcb1 	.word	0x0801dcb1

0801df60 <__sflush_r>:
 801df60:	898a      	ldrh	r2, [r1, #12]
 801df62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df64:	4605      	mov	r5, r0
 801df66:	0710      	lsls	r0, r2, #28
 801df68:	460c      	mov	r4, r1
 801df6a:	d457      	bmi.n	801e01c <__sflush_r+0xbc>
 801df6c:	684b      	ldr	r3, [r1, #4]
 801df6e:	2b00      	cmp	r3, #0
 801df70:	dc04      	bgt.n	801df7c <__sflush_r+0x1c>
 801df72:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801df74:	2b00      	cmp	r3, #0
 801df76:	dc01      	bgt.n	801df7c <__sflush_r+0x1c>
 801df78:	2000      	movs	r0, #0
 801df7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801df7e:	2e00      	cmp	r6, #0
 801df80:	d0fa      	beq.n	801df78 <__sflush_r+0x18>
 801df82:	2300      	movs	r3, #0
 801df84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801df88:	682f      	ldr	r7, [r5, #0]
 801df8a:	6a21      	ldr	r1, [r4, #32]
 801df8c:	602b      	str	r3, [r5, #0]
 801df8e:	d032      	beq.n	801dff6 <__sflush_r+0x96>
 801df90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801df92:	89a3      	ldrh	r3, [r4, #12]
 801df94:	075a      	lsls	r2, r3, #29
 801df96:	d505      	bpl.n	801dfa4 <__sflush_r+0x44>
 801df98:	6863      	ldr	r3, [r4, #4]
 801df9a:	1ac0      	subs	r0, r0, r3
 801df9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801df9e:	b10b      	cbz	r3, 801dfa4 <__sflush_r+0x44>
 801dfa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dfa2:	1ac0      	subs	r0, r0, r3
 801dfa4:	2300      	movs	r3, #0
 801dfa6:	4602      	mov	r2, r0
 801dfa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dfaa:	4628      	mov	r0, r5
 801dfac:	6a21      	ldr	r1, [r4, #32]
 801dfae:	47b0      	blx	r6
 801dfb0:	1c43      	adds	r3, r0, #1
 801dfb2:	89a3      	ldrh	r3, [r4, #12]
 801dfb4:	d106      	bne.n	801dfc4 <__sflush_r+0x64>
 801dfb6:	6829      	ldr	r1, [r5, #0]
 801dfb8:	291d      	cmp	r1, #29
 801dfba:	d82b      	bhi.n	801e014 <__sflush_r+0xb4>
 801dfbc:	4a28      	ldr	r2, [pc, #160]	; (801e060 <__sflush_r+0x100>)
 801dfbe:	410a      	asrs	r2, r1
 801dfc0:	07d6      	lsls	r6, r2, #31
 801dfc2:	d427      	bmi.n	801e014 <__sflush_r+0xb4>
 801dfc4:	2200      	movs	r2, #0
 801dfc6:	6062      	str	r2, [r4, #4]
 801dfc8:	6922      	ldr	r2, [r4, #16]
 801dfca:	04d9      	lsls	r1, r3, #19
 801dfcc:	6022      	str	r2, [r4, #0]
 801dfce:	d504      	bpl.n	801dfda <__sflush_r+0x7a>
 801dfd0:	1c42      	adds	r2, r0, #1
 801dfd2:	d101      	bne.n	801dfd8 <__sflush_r+0x78>
 801dfd4:	682b      	ldr	r3, [r5, #0]
 801dfd6:	b903      	cbnz	r3, 801dfda <__sflush_r+0x7a>
 801dfd8:	6560      	str	r0, [r4, #84]	; 0x54
 801dfda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dfdc:	602f      	str	r7, [r5, #0]
 801dfde:	2900      	cmp	r1, #0
 801dfe0:	d0ca      	beq.n	801df78 <__sflush_r+0x18>
 801dfe2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dfe6:	4299      	cmp	r1, r3
 801dfe8:	d002      	beq.n	801dff0 <__sflush_r+0x90>
 801dfea:	4628      	mov	r0, r5
 801dfec:	f7ff f9ec 	bl	801d3c8 <_free_r>
 801dff0:	2000      	movs	r0, #0
 801dff2:	6360      	str	r0, [r4, #52]	; 0x34
 801dff4:	e7c1      	b.n	801df7a <__sflush_r+0x1a>
 801dff6:	2301      	movs	r3, #1
 801dff8:	4628      	mov	r0, r5
 801dffa:	47b0      	blx	r6
 801dffc:	1c41      	adds	r1, r0, #1
 801dffe:	d1c8      	bne.n	801df92 <__sflush_r+0x32>
 801e000:	682b      	ldr	r3, [r5, #0]
 801e002:	2b00      	cmp	r3, #0
 801e004:	d0c5      	beq.n	801df92 <__sflush_r+0x32>
 801e006:	2b1d      	cmp	r3, #29
 801e008:	d001      	beq.n	801e00e <__sflush_r+0xae>
 801e00a:	2b16      	cmp	r3, #22
 801e00c:	d101      	bne.n	801e012 <__sflush_r+0xb2>
 801e00e:	602f      	str	r7, [r5, #0]
 801e010:	e7b2      	b.n	801df78 <__sflush_r+0x18>
 801e012:	89a3      	ldrh	r3, [r4, #12]
 801e014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e018:	81a3      	strh	r3, [r4, #12]
 801e01a:	e7ae      	b.n	801df7a <__sflush_r+0x1a>
 801e01c:	690f      	ldr	r7, [r1, #16]
 801e01e:	2f00      	cmp	r7, #0
 801e020:	d0aa      	beq.n	801df78 <__sflush_r+0x18>
 801e022:	0793      	lsls	r3, r2, #30
 801e024:	bf18      	it	ne
 801e026:	2300      	movne	r3, #0
 801e028:	680e      	ldr	r6, [r1, #0]
 801e02a:	bf08      	it	eq
 801e02c:	694b      	ldreq	r3, [r1, #20]
 801e02e:	1bf6      	subs	r6, r6, r7
 801e030:	600f      	str	r7, [r1, #0]
 801e032:	608b      	str	r3, [r1, #8]
 801e034:	2e00      	cmp	r6, #0
 801e036:	dd9f      	ble.n	801df78 <__sflush_r+0x18>
 801e038:	4633      	mov	r3, r6
 801e03a:	463a      	mov	r2, r7
 801e03c:	4628      	mov	r0, r5
 801e03e:	6a21      	ldr	r1, [r4, #32]
 801e040:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 801e044:	47e0      	blx	ip
 801e046:	2800      	cmp	r0, #0
 801e048:	dc06      	bgt.n	801e058 <__sflush_r+0xf8>
 801e04a:	89a3      	ldrh	r3, [r4, #12]
 801e04c:	f04f 30ff 	mov.w	r0, #4294967295
 801e050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e054:	81a3      	strh	r3, [r4, #12]
 801e056:	e790      	b.n	801df7a <__sflush_r+0x1a>
 801e058:	4407      	add	r7, r0
 801e05a:	1a36      	subs	r6, r6, r0
 801e05c:	e7ea      	b.n	801e034 <__sflush_r+0xd4>
 801e05e:	bf00      	nop
 801e060:	dfbffffe 	.word	0xdfbffffe

0801e064 <_fflush_r>:
 801e064:	b538      	push	{r3, r4, r5, lr}
 801e066:	690b      	ldr	r3, [r1, #16]
 801e068:	4605      	mov	r5, r0
 801e06a:	460c      	mov	r4, r1
 801e06c:	b913      	cbnz	r3, 801e074 <_fflush_r+0x10>
 801e06e:	2500      	movs	r5, #0
 801e070:	4628      	mov	r0, r5
 801e072:	bd38      	pop	{r3, r4, r5, pc}
 801e074:	b118      	cbz	r0, 801e07e <_fflush_r+0x1a>
 801e076:	6a03      	ldr	r3, [r0, #32]
 801e078:	b90b      	cbnz	r3, 801e07e <_fflush_r+0x1a>
 801e07a:	f7fe f997 	bl	801c3ac <__sinit>
 801e07e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e082:	2b00      	cmp	r3, #0
 801e084:	d0f3      	beq.n	801e06e <_fflush_r+0xa>
 801e086:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e088:	07d0      	lsls	r0, r2, #31
 801e08a:	d404      	bmi.n	801e096 <_fflush_r+0x32>
 801e08c:	0599      	lsls	r1, r3, #22
 801e08e:	d402      	bmi.n	801e096 <_fflush_r+0x32>
 801e090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e092:	f7fe fafd 	bl	801c690 <__retarget_lock_acquire_recursive>
 801e096:	4628      	mov	r0, r5
 801e098:	4621      	mov	r1, r4
 801e09a:	f7ff ff61 	bl	801df60 <__sflush_r>
 801e09e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e0a0:	4605      	mov	r5, r0
 801e0a2:	07da      	lsls	r2, r3, #31
 801e0a4:	d4e4      	bmi.n	801e070 <_fflush_r+0xc>
 801e0a6:	89a3      	ldrh	r3, [r4, #12]
 801e0a8:	059b      	lsls	r3, r3, #22
 801e0aa:	d4e1      	bmi.n	801e070 <_fflush_r+0xc>
 801e0ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e0ae:	f7fe faf0 	bl	801c692 <__retarget_lock_release_recursive>
 801e0b2:	e7dd      	b.n	801e070 <_fflush_r+0xc>

0801e0b4 <fiprintf>:
 801e0b4:	b40e      	push	{r1, r2, r3}
 801e0b6:	b503      	push	{r0, r1, lr}
 801e0b8:	4601      	mov	r1, r0
 801e0ba:	ab03      	add	r3, sp, #12
 801e0bc:	4805      	ldr	r0, [pc, #20]	; (801e0d4 <fiprintf+0x20>)
 801e0be:	f853 2b04 	ldr.w	r2, [r3], #4
 801e0c2:	6800      	ldr	r0, [r0, #0]
 801e0c4:	9301      	str	r3, [sp, #4]
 801e0c6:	f000 f8cf 	bl	801e268 <_vfiprintf_r>
 801e0ca:	b002      	add	sp, #8
 801e0cc:	f85d eb04 	ldr.w	lr, [sp], #4
 801e0d0:	b003      	add	sp, #12
 801e0d2:	4770      	bx	lr
 801e0d4:	20000874 	.word	0x20000874

0801e0d8 <memmove>:
 801e0d8:	4288      	cmp	r0, r1
 801e0da:	b510      	push	{r4, lr}
 801e0dc:	eb01 0402 	add.w	r4, r1, r2
 801e0e0:	d902      	bls.n	801e0e8 <memmove+0x10>
 801e0e2:	4284      	cmp	r4, r0
 801e0e4:	4623      	mov	r3, r4
 801e0e6:	d807      	bhi.n	801e0f8 <memmove+0x20>
 801e0e8:	1e43      	subs	r3, r0, #1
 801e0ea:	42a1      	cmp	r1, r4
 801e0ec:	d008      	beq.n	801e100 <memmove+0x28>
 801e0ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e0f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e0f6:	e7f8      	b.n	801e0ea <memmove+0x12>
 801e0f8:	4601      	mov	r1, r0
 801e0fa:	4402      	add	r2, r0
 801e0fc:	428a      	cmp	r2, r1
 801e0fe:	d100      	bne.n	801e102 <memmove+0x2a>
 801e100:	bd10      	pop	{r4, pc}
 801e102:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e106:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e10a:	e7f7      	b.n	801e0fc <memmove+0x24>

0801e10c <_sbrk_r>:
 801e10c:	b538      	push	{r3, r4, r5, lr}
 801e10e:	2300      	movs	r3, #0
 801e110:	4d05      	ldr	r5, [pc, #20]	; (801e128 <_sbrk_r+0x1c>)
 801e112:	4604      	mov	r4, r0
 801e114:	4608      	mov	r0, r1
 801e116:	602b      	str	r3, [r5, #0]
 801e118:	f7ef fe86 	bl	800de28 <_sbrk>
 801e11c:	1c43      	adds	r3, r0, #1
 801e11e:	d102      	bne.n	801e126 <_sbrk_r+0x1a>
 801e120:	682b      	ldr	r3, [r5, #0]
 801e122:	b103      	cbz	r3, 801e126 <_sbrk_r+0x1a>
 801e124:	6023      	str	r3, [r4, #0]
 801e126:	bd38      	pop	{r3, r4, r5, pc}
 801e128:	20003bd8 	.word	0x20003bd8

0801e12c <memcpy>:
 801e12c:	440a      	add	r2, r1
 801e12e:	4291      	cmp	r1, r2
 801e130:	f100 33ff 	add.w	r3, r0, #4294967295
 801e134:	d100      	bne.n	801e138 <memcpy+0xc>
 801e136:	4770      	bx	lr
 801e138:	b510      	push	{r4, lr}
 801e13a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e13e:	4291      	cmp	r1, r2
 801e140:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e144:	d1f9      	bne.n	801e13a <memcpy+0xe>
 801e146:	bd10      	pop	{r4, pc}

0801e148 <abort>:
 801e148:	2006      	movs	r0, #6
 801e14a:	b508      	push	{r3, lr}
 801e14c:	f000 fa64 	bl	801e618 <raise>
 801e150:	2001      	movs	r0, #1
 801e152:	f7ef fdf6 	bl	800dd42 <_exit>

0801e156 <_calloc_r>:
 801e156:	b570      	push	{r4, r5, r6, lr}
 801e158:	fba1 5402 	umull	r5, r4, r1, r2
 801e15c:	b934      	cbnz	r4, 801e16c <_calloc_r+0x16>
 801e15e:	4629      	mov	r1, r5
 801e160:	f7ff f9a2 	bl	801d4a8 <_malloc_r>
 801e164:	4606      	mov	r6, r0
 801e166:	b928      	cbnz	r0, 801e174 <_calloc_r+0x1e>
 801e168:	4630      	mov	r0, r6
 801e16a:	bd70      	pop	{r4, r5, r6, pc}
 801e16c:	220c      	movs	r2, #12
 801e16e:	2600      	movs	r6, #0
 801e170:	6002      	str	r2, [r0, #0]
 801e172:	e7f9      	b.n	801e168 <_calloc_r+0x12>
 801e174:	462a      	mov	r2, r5
 801e176:	4621      	mov	r1, r4
 801e178:	f7fe f9b1 	bl	801c4de <memset>
 801e17c:	e7f4      	b.n	801e168 <_calloc_r+0x12>

0801e17e <__ascii_mbtowc>:
 801e17e:	b082      	sub	sp, #8
 801e180:	b901      	cbnz	r1, 801e184 <__ascii_mbtowc+0x6>
 801e182:	a901      	add	r1, sp, #4
 801e184:	b142      	cbz	r2, 801e198 <__ascii_mbtowc+0x1a>
 801e186:	b14b      	cbz	r3, 801e19c <__ascii_mbtowc+0x1e>
 801e188:	7813      	ldrb	r3, [r2, #0]
 801e18a:	600b      	str	r3, [r1, #0]
 801e18c:	7812      	ldrb	r2, [r2, #0]
 801e18e:	1e10      	subs	r0, r2, #0
 801e190:	bf18      	it	ne
 801e192:	2001      	movne	r0, #1
 801e194:	b002      	add	sp, #8
 801e196:	4770      	bx	lr
 801e198:	4610      	mov	r0, r2
 801e19a:	e7fb      	b.n	801e194 <__ascii_mbtowc+0x16>
 801e19c:	f06f 0001 	mvn.w	r0, #1
 801e1a0:	e7f8      	b.n	801e194 <__ascii_mbtowc+0x16>

0801e1a2 <_realloc_r>:
 801e1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1a6:	4680      	mov	r8, r0
 801e1a8:	4614      	mov	r4, r2
 801e1aa:	460e      	mov	r6, r1
 801e1ac:	b921      	cbnz	r1, 801e1b8 <_realloc_r+0x16>
 801e1ae:	4611      	mov	r1, r2
 801e1b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e1b4:	f7ff b978 	b.w	801d4a8 <_malloc_r>
 801e1b8:	b92a      	cbnz	r2, 801e1c6 <_realloc_r+0x24>
 801e1ba:	f7ff f905 	bl	801d3c8 <_free_r>
 801e1be:	4625      	mov	r5, r4
 801e1c0:	4628      	mov	r0, r5
 801e1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1c6:	f000 fa43 	bl	801e650 <_malloc_usable_size_r>
 801e1ca:	4284      	cmp	r4, r0
 801e1cc:	4607      	mov	r7, r0
 801e1ce:	d802      	bhi.n	801e1d6 <_realloc_r+0x34>
 801e1d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801e1d4:	d812      	bhi.n	801e1fc <_realloc_r+0x5a>
 801e1d6:	4621      	mov	r1, r4
 801e1d8:	4640      	mov	r0, r8
 801e1da:	f7ff f965 	bl	801d4a8 <_malloc_r>
 801e1de:	4605      	mov	r5, r0
 801e1e0:	2800      	cmp	r0, #0
 801e1e2:	d0ed      	beq.n	801e1c0 <_realloc_r+0x1e>
 801e1e4:	42bc      	cmp	r4, r7
 801e1e6:	4622      	mov	r2, r4
 801e1e8:	4631      	mov	r1, r6
 801e1ea:	bf28      	it	cs
 801e1ec:	463a      	movcs	r2, r7
 801e1ee:	f7ff ff9d 	bl	801e12c <memcpy>
 801e1f2:	4631      	mov	r1, r6
 801e1f4:	4640      	mov	r0, r8
 801e1f6:	f7ff f8e7 	bl	801d3c8 <_free_r>
 801e1fa:	e7e1      	b.n	801e1c0 <_realloc_r+0x1e>
 801e1fc:	4635      	mov	r5, r6
 801e1fe:	e7df      	b.n	801e1c0 <_realloc_r+0x1e>

0801e200 <__ascii_wctomb>:
 801e200:	4603      	mov	r3, r0
 801e202:	4608      	mov	r0, r1
 801e204:	b141      	cbz	r1, 801e218 <__ascii_wctomb+0x18>
 801e206:	2aff      	cmp	r2, #255	; 0xff
 801e208:	d904      	bls.n	801e214 <__ascii_wctomb+0x14>
 801e20a:	228a      	movs	r2, #138	; 0x8a
 801e20c:	f04f 30ff 	mov.w	r0, #4294967295
 801e210:	601a      	str	r2, [r3, #0]
 801e212:	4770      	bx	lr
 801e214:	2001      	movs	r0, #1
 801e216:	700a      	strb	r2, [r1, #0]
 801e218:	4770      	bx	lr

0801e21a <__sfputc_r>:
 801e21a:	6893      	ldr	r3, [r2, #8]
 801e21c:	b410      	push	{r4}
 801e21e:	3b01      	subs	r3, #1
 801e220:	2b00      	cmp	r3, #0
 801e222:	6093      	str	r3, [r2, #8]
 801e224:	da07      	bge.n	801e236 <__sfputc_r+0x1c>
 801e226:	6994      	ldr	r4, [r2, #24]
 801e228:	42a3      	cmp	r3, r4
 801e22a:	db01      	blt.n	801e230 <__sfputc_r+0x16>
 801e22c:	290a      	cmp	r1, #10
 801e22e:	d102      	bne.n	801e236 <__sfputc_r+0x1c>
 801e230:	bc10      	pop	{r4}
 801e232:	f000 b933 	b.w	801e49c <__swbuf_r>
 801e236:	6813      	ldr	r3, [r2, #0]
 801e238:	1c58      	adds	r0, r3, #1
 801e23a:	6010      	str	r0, [r2, #0]
 801e23c:	7019      	strb	r1, [r3, #0]
 801e23e:	4608      	mov	r0, r1
 801e240:	bc10      	pop	{r4}
 801e242:	4770      	bx	lr

0801e244 <__sfputs_r>:
 801e244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e246:	4606      	mov	r6, r0
 801e248:	460f      	mov	r7, r1
 801e24a:	4614      	mov	r4, r2
 801e24c:	18d5      	adds	r5, r2, r3
 801e24e:	42ac      	cmp	r4, r5
 801e250:	d101      	bne.n	801e256 <__sfputs_r+0x12>
 801e252:	2000      	movs	r0, #0
 801e254:	e007      	b.n	801e266 <__sfputs_r+0x22>
 801e256:	463a      	mov	r2, r7
 801e258:	4630      	mov	r0, r6
 801e25a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e25e:	f7ff ffdc 	bl	801e21a <__sfputc_r>
 801e262:	1c43      	adds	r3, r0, #1
 801e264:	d1f3      	bne.n	801e24e <__sfputs_r+0xa>
 801e266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e268 <_vfiprintf_r>:
 801e268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e26c:	460d      	mov	r5, r1
 801e26e:	4614      	mov	r4, r2
 801e270:	4698      	mov	r8, r3
 801e272:	4606      	mov	r6, r0
 801e274:	b09d      	sub	sp, #116	; 0x74
 801e276:	b118      	cbz	r0, 801e280 <_vfiprintf_r+0x18>
 801e278:	6a03      	ldr	r3, [r0, #32]
 801e27a:	b90b      	cbnz	r3, 801e280 <_vfiprintf_r+0x18>
 801e27c:	f7fe f896 	bl	801c3ac <__sinit>
 801e280:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e282:	07d9      	lsls	r1, r3, #31
 801e284:	d405      	bmi.n	801e292 <_vfiprintf_r+0x2a>
 801e286:	89ab      	ldrh	r3, [r5, #12]
 801e288:	059a      	lsls	r2, r3, #22
 801e28a:	d402      	bmi.n	801e292 <_vfiprintf_r+0x2a>
 801e28c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e28e:	f7fe f9ff 	bl	801c690 <__retarget_lock_acquire_recursive>
 801e292:	89ab      	ldrh	r3, [r5, #12]
 801e294:	071b      	lsls	r3, r3, #28
 801e296:	d501      	bpl.n	801e29c <_vfiprintf_r+0x34>
 801e298:	692b      	ldr	r3, [r5, #16]
 801e29a:	b99b      	cbnz	r3, 801e2c4 <_vfiprintf_r+0x5c>
 801e29c:	4629      	mov	r1, r5
 801e29e:	4630      	mov	r0, r6
 801e2a0:	f000 f93a 	bl	801e518 <__swsetup_r>
 801e2a4:	b170      	cbz	r0, 801e2c4 <_vfiprintf_r+0x5c>
 801e2a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e2a8:	07dc      	lsls	r4, r3, #31
 801e2aa:	d504      	bpl.n	801e2b6 <_vfiprintf_r+0x4e>
 801e2ac:	f04f 30ff 	mov.w	r0, #4294967295
 801e2b0:	b01d      	add	sp, #116	; 0x74
 801e2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2b6:	89ab      	ldrh	r3, [r5, #12]
 801e2b8:	0598      	lsls	r0, r3, #22
 801e2ba:	d4f7      	bmi.n	801e2ac <_vfiprintf_r+0x44>
 801e2bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e2be:	f7fe f9e8 	bl	801c692 <__retarget_lock_release_recursive>
 801e2c2:	e7f3      	b.n	801e2ac <_vfiprintf_r+0x44>
 801e2c4:	2300      	movs	r3, #0
 801e2c6:	9309      	str	r3, [sp, #36]	; 0x24
 801e2c8:	2320      	movs	r3, #32
 801e2ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e2ce:	2330      	movs	r3, #48	; 0x30
 801e2d0:	f04f 0901 	mov.w	r9, #1
 801e2d4:	f8cd 800c 	str.w	r8, [sp, #12]
 801e2d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 801e488 <_vfiprintf_r+0x220>
 801e2dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e2e0:	4623      	mov	r3, r4
 801e2e2:	469a      	mov	sl, r3
 801e2e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e2e8:	b10a      	cbz	r2, 801e2ee <_vfiprintf_r+0x86>
 801e2ea:	2a25      	cmp	r2, #37	; 0x25
 801e2ec:	d1f9      	bne.n	801e2e2 <_vfiprintf_r+0x7a>
 801e2ee:	ebba 0b04 	subs.w	fp, sl, r4
 801e2f2:	d00b      	beq.n	801e30c <_vfiprintf_r+0xa4>
 801e2f4:	465b      	mov	r3, fp
 801e2f6:	4622      	mov	r2, r4
 801e2f8:	4629      	mov	r1, r5
 801e2fa:	4630      	mov	r0, r6
 801e2fc:	f7ff ffa2 	bl	801e244 <__sfputs_r>
 801e300:	3001      	adds	r0, #1
 801e302:	f000 80a9 	beq.w	801e458 <_vfiprintf_r+0x1f0>
 801e306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e308:	445a      	add	r2, fp
 801e30a:	9209      	str	r2, [sp, #36]	; 0x24
 801e30c:	f89a 3000 	ldrb.w	r3, [sl]
 801e310:	2b00      	cmp	r3, #0
 801e312:	f000 80a1 	beq.w	801e458 <_vfiprintf_r+0x1f0>
 801e316:	2300      	movs	r3, #0
 801e318:	f04f 32ff 	mov.w	r2, #4294967295
 801e31c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e320:	f10a 0a01 	add.w	sl, sl, #1
 801e324:	9304      	str	r3, [sp, #16]
 801e326:	9307      	str	r3, [sp, #28]
 801e328:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e32c:	931a      	str	r3, [sp, #104]	; 0x68
 801e32e:	4654      	mov	r4, sl
 801e330:	2205      	movs	r2, #5
 801e332:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e336:	4854      	ldr	r0, [pc, #336]	; (801e488 <_vfiprintf_r+0x220>)
 801e338:	f7fe f9ac 	bl	801c694 <memchr>
 801e33c:	9a04      	ldr	r2, [sp, #16]
 801e33e:	b9d8      	cbnz	r0, 801e378 <_vfiprintf_r+0x110>
 801e340:	06d1      	lsls	r1, r2, #27
 801e342:	bf44      	itt	mi
 801e344:	2320      	movmi	r3, #32
 801e346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e34a:	0713      	lsls	r3, r2, #28
 801e34c:	bf44      	itt	mi
 801e34e:	232b      	movmi	r3, #43	; 0x2b
 801e350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e354:	f89a 3000 	ldrb.w	r3, [sl]
 801e358:	2b2a      	cmp	r3, #42	; 0x2a
 801e35a:	d015      	beq.n	801e388 <_vfiprintf_r+0x120>
 801e35c:	4654      	mov	r4, sl
 801e35e:	2000      	movs	r0, #0
 801e360:	f04f 0c0a 	mov.w	ip, #10
 801e364:	9a07      	ldr	r2, [sp, #28]
 801e366:	4621      	mov	r1, r4
 801e368:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e36c:	3b30      	subs	r3, #48	; 0x30
 801e36e:	2b09      	cmp	r3, #9
 801e370:	d94d      	bls.n	801e40e <_vfiprintf_r+0x1a6>
 801e372:	b1b0      	cbz	r0, 801e3a2 <_vfiprintf_r+0x13a>
 801e374:	9207      	str	r2, [sp, #28]
 801e376:	e014      	b.n	801e3a2 <_vfiprintf_r+0x13a>
 801e378:	eba0 0308 	sub.w	r3, r0, r8
 801e37c:	fa09 f303 	lsl.w	r3, r9, r3
 801e380:	4313      	orrs	r3, r2
 801e382:	46a2      	mov	sl, r4
 801e384:	9304      	str	r3, [sp, #16]
 801e386:	e7d2      	b.n	801e32e <_vfiprintf_r+0xc6>
 801e388:	9b03      	ldr	r3, [sp, #12]
 801e38a:	1d19      	adds	r1, r3, #4
 801e38c:	681b      	ldr	r3, [r3, #0]
 801e38e:	9103      	str	r1, [sp, #12]
 801e390:	2b00      	cmp	r3, #0
 801e392:	bfbb      	ittet	lt
 801e394:	425b      	neglt	r3, r3
 801e396:	f042 0202 	orrlt.w	r2, r2, #2
 801e39a:	9307      	strge	r3, [sp, #28]
 801e39c:	9307      	strlt	r3, [sp, #28]
 801e39e:	bfb8      	it	lt
 801e3a0:	9204      	strlt	r2, [sp, #16]
 801e3a2:	7823      	ldrb	r3, [r4, #0]
 801e3a4:	2b2e      	cmp	r3, #46	; 0x2e
 801e3a6:	d10c      	bne.n	801e3c2 <_vfiprintf_r+0x15a>
 801e3a8:	7863      	ldrb	r3, [r4, #1]
 801e3aa:	2b2a      	cmp	r3, #42	; 0x2a
 801e3ac:	d134      	bne.n	801e418 <_vfiprintf_r+0x1b0>
 801e3ae:	9b03      	ldr	r3, [sp, #12]
 801e3b0:	3402      	adds	r4, #2
 801e3b2:	1d1a      	adds	r2, r3, #4
 801e3b4:	681b      	ldr	r3, [r3, #0]
 801e3b6:	9203      	str	r2, [sp, #12]
 801e3b8:	2b00      	cmp	r3, #0
 801e3ba:	bfb8      	it	lt
 801e3bc:	f04f 33ff 	movlt.w	r3, #4294967295
 801e3c0:	9305      	str	r3, [sp, #20]
 801e3c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801e48c <_vfiprintf_r+0x224>
 801e3c6:	2203      	movs	r2, #3
 801e3c8:	4650      	mov	r0, sl
 801e3ca:	7821      	ldrb	r1, [r4, #0]
 801e3cc:	f7fe f962 	bl	801c694 <memchr>
 801e3d0:	b138      	cbz	r0, 801e3e2 <_vfiprintf_r+0x17a>
 801e3d2:	2240      	movs	r2, #64	; 0x40
 801e3d4:	9b04      	ldr	r3, [sp, #16]
 801e3d6:	eba0 000a 	sub.w	r0, r0, sl
 801e3da:	4082      	lsls	r2, r0
 801e3dc:	4313      	orrs	r3, r2
 801e3de:	3401      	adds	r4, #1
 801e3e0:	9304      	str	r3, [sp, #16]
 801e3e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e3e6:	2206      	movs	r2, #6
 801e3e8:	4829      	ldr	r0, [pc, #164]	; (801e490 <_vfiprintf_r+0x228>)
 801e3ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e3ee:	f7fe f951 	bl	801c694 <memchr>
 801e3f2:	2800      	cmp	r0, #0
 801e3f4:	d03f      	beq.n	801e476 <_vfiprintf_r+0x20e>
 801e3f6:	4b27      	ldr	r3, [pc, #156]	; (801e494 <_vfiprintf_r+0x22c>)
 801e3f8:	bb1b      	cbnz	r3, 801e442 <_vfiprintf_r+0x1da>
 801e3fa:	9b03      	ldr	r3, [sp, #12]
 801e3fc:	3307      	adds	r3, #7
 801e3fe:	f023 0307 	bic.w	r3, r3, #7
 801e402:	3308      	adds	r3, #8
 801e404:	9303      	str	r3, [sp, #12]
 801e406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e408:	443b      	add	r3, r7
 801e40a:	9309      	str	r3, [sp, #36]	; 0x24
 801e40c:	e768      	b.n	801e2e0 <_vfiprintf_r+0x78>
 801e40e:	460c      	mov	r4, r1
 801e410:	2001      	movs	r0, #1
 801e412:	fb0c 3202 	mla	r2, ip, r2, r3
 801e416:	e7a6      	b.n	801e366 <_vfiprintf_r+0xfe>
 801e418:	2300      	movs	r3, #0
 801e41a:	f04f 0c0a 	mov.w	ip, #10
 801e41e:	4619      	mov	r1, r3
 801e420:	3401      	adds	r4, #1
 801e422:	9305      	str	r3, [sp, #20]
 801e424:	4620      	mov	r0, r4
 801e426:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e42a:	3a30      	subs	r2, #48	; 0x30
 801e42c:	2a09      	cmp	r2, #9
 801e42e:	d903      	bls.n	801e438 <_vfiprintf_r+0x1d0>
 801e430:	2b00      	cmp	r3, #0
 801e432:	d0c6      	beq.n	801e3c2 <_vfiprintf_r+0x15a>
 801e434:	9105      	str	r1, [sp, #20]
 801e436:	e7c4      	b.n	801e3c2 <_vfiprintf_r+0x15a>
 801e438:	4604      	mov	r4, r0
 801e43a:	2301      	movs	r3, #1
 801e43c:	fb0c 2101 	mla	r1, ip, r1, r2
 801e440:	e7f0      	b.n	801e424 <_vfiprintf_r+0x1bc>
 801e442:	ab03      	add	r3, sp, #12
 801e444:	9300      	str	r3, [sp, #0]
 801e446:	462a      	mov	r2, r5
 801e448:	4630      	mov	r0, r6
 801e44a:	4b13      	ldr	r3, [pc, #76]	; (801e498 <_vfiprintf_r+0x230>)
 801e44c:	a904      	add	r1, sp, #16
 801e44e:	f7fd fb71 	bl	801bb34 <_printf_float>
 801e452:	4607      	mov	r7, r0
 801e454:	1c78      	adds	r0, r7, #1
 801e456:	d1d6      	bne.n	801e406 <_vfiprintf_r+0x19e>
 801e458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e45a:	07d9      	lsls	r1, r3, #31
 801e45c:	d405      	bmi.n	801e46a <_vfiprintf_r+0x202>
 801e45e:	89ab      	ldrh	r3, [r5, #12]
 801e460:	059a      	lsls	r2, r3, #22
 801e462:	d402      	bmi.n	801e46a <_vfiprintf_r+0x202>
 801e464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e466:	f7fe f914 	bl	801c692 <__retarget_lock_release_recursive>
 801e46a:	89ab      	ldrh	r3, [r5, #12]
 801e46c:	065b      	lsls	r3, r3, #25
 801e46e:	f53f af1d 	bmi.w	801e2ac <_vfiprintf_r+0x44>
 801e472:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e474:	e71c      	b.n	801e2b0 <_vfiprintf_r+0x48>
 801e476:	ab03      	add	r3, sp, #12
 801e478:	9300      	str	r3, [sp, #0]
 801e47a:	462a      	mov	r2, r5
 801e47c:	4630      	mov	r0, r6
 801e47e:	4b06      	ldr	r3, [pc, #24]	; (801e498 <_vfiprintf_r+0x230>)
 801e480:	a904      	add	r1, sp, #16
 801e482:	f7fd fdf7 	bl	801c074 <_printf_i>
 801e486:	e7e4      	b.n	801e452 <_vfiprintf_r+0x1ea>
 801e488:	0801efb4 	.word	0x0801efb4
 801e48c:	0801efba 	.word	0x0801efba
 801e490:	0801efbe 	.word	0x0801efbe
 801e494:	0801bb35 	.word	0x0801bb35
 801e498:	0801e245 	.word	0x0801e245

0801e49c <__swbuf_r>:
 801e49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e49e:	460e      	mov	r6, r1
 801e4a0:	4614      	mov	r4, r2
 801e4a2:	4605      	mov	r5, r0
 801e4a4:	b118      	cbz	r0, 801e4ae <__swbuf_r+0x12>
 801e4a6:	6a03      	ldr	r3, [r0, #32]
 801e4a8:	b90b      	cbnz	r3, 801e4ae <__swbuf_r+0x12>
 801e4aa:	f7fd ff7f 	bl	801c3ac <__sinit>
 801e4ae:	69a3      	ldr	r3, [r4, #24]
 801e4b0:	60a3      	str	r3, [r4, #8]
 801e4b2:	89a3      	ldrh	r3, [r4, #12]
 801e4b4:	071a      	lsls	r2, r3, #28
 801e4b6:	d525      	bpl.n	801e504 <__swbuf_r+0x68>
 801e4b8:	6923      	ldr	r3, [r4, #16]
 801e4ba:	b31b      	cbz	r3, 801e504 <__swbuf_r+0x68>
 801e4bc:	6823      	ldr	r3, [r4, #0]
 801e4be:	6922      	ldr	r2, [r4, #16]
 801e4c0:	b2f6      	uxtb	r6, r6
 801e4c2:	1a98      	subs	r0, r3, r2
 801e4c4:	6963      	ldr	r3, [r4, #20]
 801e4c6:	4637      	mov	r7, r6
 801e4c8:	4283      	cmp	r3, r0
 801e4ca:	dc04      	bgt.n	801e4d6 <__swbuf_r+0x3a>
 801e4cc:	4621      	mov	r1, r4
 801e4ce:	4628      	mov	r0, r5
 801e4d0:	f7ff fdc8 	bl	801e064 <_fflush_r>
 801e4d4:	b9e0      	cbnz	r0, 801e510 <__swbuf_r+0x74>
 801e4d6:	68a3      	ldr	r3, [r4, #8]
 801e4d8:	3b01      	subs	r3, #1
 801e4da:	60a3      	str	r3, [r4, #8]
 801e4dc:	6823      	ldr	r3, [r4, #0]
 801e4de:	1c5a      	adds	r2, r3, #1
 801e4e0:	6022      	str	r2, [r4, #0]
 801e4e2:	701e      	strb	r6, [r3, #0]
 801e4e4:	6962      	ldr	r2, [r4, #20]
 801e4e6:	1c43      	adds	r3, r0, #1
 801e4e8:	429a      	cmp	r2, r3
 801e4ea:	d004      	beq.n	801e4f6 <__swbuf_r+0x5a>
 801e4ec:	89a3      	ldrh	r3, [r4, #12]
 801e4ee:	07db      	lsls	r3, r3, #31
 801e4f0:	d506      	bpl.n	801e500 <__swbuf_r+0x64>
 801e4f2:	2e0a      	cmp	r6, #10
 801e4f4:	d104      	bne.n	801e500 <__swbuf_r+0x64>
 801e4f6:	4621      	mov	r1, r4
 801e4f8:	4628      	mov	r0, r5
 801e4fa:	f7ff fdb3 	bl	801e064 <_fflush_r>
 801e4fe:	b938      	cbnz	r0, 801e510 <__swbuf_r+0x74>
 801e500:	4638      	mov	r0, r7
 801e502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e504:	4621      	mov	r1, r4
 801e506:	4628      	mov	r0, r5
 801e508:	f000 f806 	bl	801e518 <__swsetup_r>
 801e50c:	2800      	cmp	r0, #0
 801e50e:	d0d5      	beq.n	801e4bc <__swbuf_r+0x20>
 801e510:	f04f 37ff 	mov.w	r7, #4294967295
 801e514:	e7f4      	b.n	801e500 <__swbuf_r+0x64>
	...

0801e518 <__swsetup_r>:
 801e518:	b538      	push	{r3, r4, r5, lr}
 801e51a:	4b2a      	ldr	r3, [pc, #168]	; (801e5c4 <__swsetup_r+0xac>)
 801e51c:	4605      	mov	r5, r0
 801e51e:	6818      	ldr	r0, [r3, #0]
 801e520:	460c      	mov	r4, r1
 801e522:	b118      	cbz	r0, 801e52c <__swsetup_r+0x14>
 801e524:	6a03      	ldr	r3, [r0, #32]
 801e526:	b90b      	cbnz	r3, 801e52c <__swsetup_r+0x14>
 801e528:	f7fd ff40 	bl	801c3ac <__sinit>
 801e52c:	89a3      	ldrh	r3, [r4, #12]
 801e52e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e532:	0718      	lsls	r0, r3, #28
 801e534:	d422      	bmi.n	801e57c <__swsetup_r+0x64>
 801e536:	06d9      	lsls	r1, r3, #27
 801e538:	d407      	bmi.n	801e54a <__swsetup_r+0x32>
 801e53a:	2309      	movs	r3, #9
 801e53c:	602b      	str	r3, [r5, #0]
 801e53e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e542:	f04f 30ff 	mov.w	r0, #4294967295
 801e546:	81a3      	strh	r3, [r4, #12]
 801e548:	e034      	b.n	801e5b4 <__swsetup_r+0x9c>
 801e54a:	0758      	lsls	r0, r3, #29
 801e54c:	d512      	bpl.n	801e574 <__swsetup_r+0x5c>
 801e54e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e550:	b141      	cbz	r1, 801e564 <__swsetup_r+0x4c>
 801e552:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e556:	4299      	cmp	r1, r3
 801e558:	d002      	beq.n	801e560 <__swsetup_r+0x48>
 801e55a:	4628      	mov	r0, r5
 801e55c:	f7fe ff34 	bl	801d3c8 <_free_r>
 801e560:	2300      	movs	r3, #0
 801e562:	6363      	str	r3, [r4, #52]	; 0x34
 801e564:	89a3      	ldrh	r3, [r4, #12]
 801e566:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e56a:	81a3      	strh	r3, [r4, #12]
 801e56c:	2300      	movs	r3, #0
 801e56e:	6063      	str	r3, [r4, #4]
 801e570:	6923      	ldr	r3, [r4, #16]
 801e572:	6023      	str	r3, [r4, #0]
 801e574:	89a3      	ldrh	r3, [r4, #12]
 801e576:	f043 0308 	orr.w	r3, r3, #8
 801e57a:	81a3      	strh	r3, [r4, #12]
 801e57c:	6923      	ldr	r3, [r4, #16]
 801e57e:	b94b      	cbnz	r3, 801e594 <__swsetup_r+0x7c>
 801e580:	89a3      	ldrh	r3, [r4, #12]
 801e582:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e58a:	d003      	beq.n	801e594 <__swsetup_r+0x7c>
 801e58c:	4621      	mov	r1, r4
 801e58e:	4628      	mov	r0, r5
 801e590:	f000 f88b 	bl	801e6aa <__smakebuf_r>
 801e594:	89a0      	ldrh	r0, [r4, #12]
 801e596:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e59a:	f010 0301 	ands.w	r3, r0, #1
 801e59e:	d00a      	beq.n	801e5b6 <__swsetup_r+0x9e>
 801e5a0:	2300      	movs	r3, #0
 801e5a2:	60a3      	str	r3, [r4, #8]
 801e5a4:	6963      	ldr	r3, [r4, #20]
 801e5a6:	425b      	negs	r3, r3
 801e5a8:	61a3      	str	r3, [r4, #24]
 801e5aa:	6923      	ldr	r3, [r4, #16]
 801e5ac:	b943      	cbnz	r3, 801e5c0 <__swsetup_r+0xa8>
 801e5ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e5b2:	d1c4      	bne.n	801e53e <__swsetup_r+0x26>
 801e5b4:	bd38      	pop	{r3, r4, r5, pc}
 801e5b6:	0781      	lsls	r1, r0, #30
 801e5b8:	bf58      	it	pl
 801e5ba:	6963      	ldrpl	r3, [r4, #20]
 801e5bc:	60a3      	str	r3, [r4, #8]
 801e5be:	e7f4      	b.n	801e5aa <__swsetup_r+0x92>
 801e5c0:	2000      	movs	r0, #0
 801e5c2:	e7f7      	b.n	801e5b4 <__swsetup_r+0x9c>
 801e5c4:	20000874 	.word	0x20000874

0801e5c8 <_raise_r>:
 801e5c8:	291f      	cmp	r1, #31
 801e5ca:	b538      	push	{r3, r4, r5, lr}
 801e5cc:	4604      	mov	r4, r0
 801e5ce:	460d      	mov	r5, r1
 801e5d0:	d904      	bls.n	801e5dc <_raise_r+0x14>
 801e5d2:	2316      	movs	r3, #22
 801e5d4:	6003      	str	r3, [r0, #0]
 801e5d6:	f04f 30ff 	mov.w	r0, #4294967295
 801e5da:	bd38      	pop	{r3, r4, r5, pc}
 801e5dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801e5de:	b112      	cbz	r2, 801e5e6 <_raise_r+0x1e>
 801e5e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e5e4:	b94b      	cbnz	r3, 801e5fa <_raise_r+0x32>
 801e5e6:	4620      	mov	r0, r4
 801e5e8:	f000 f830 	bl	801e64c <_getpid_r>
 801e5ec:	462a      	mov	r2, r5
 801e5ee:	4601      	mov	r1, r0
 801e5f0:	4620      	mov	r0, r4
 801e5f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e5f6:	f000 b817 	b.w	801e628 <_kill_r>
 801e5fa:	2b01      	cmp	r3, #1
 801e5fc:	d00a      	beq.n	801e614 <_raise_r+0x4c>
 801e5fe:	1c59      	adds	r1, r3, #1
 801e600:	d103      	bne.n	801e60a <_raise_r+0x42>
 801e602:	2316      	movs	r3, #22
 801e604:	6003      	str	r3, [r0, #0]
 801e606:	2001      	movs	r0, #1
 801e608:	e7e7      	b.n	801e5da <_raise_r+0x12>
 801e60a:	2400      	movs	r4, #0
 801e60c:	4628      	mov	r0, r5
 801e60e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e612:	4798      	blx	r3
 801e614:	2000      	movs	r0, #0
 801e616:	e7e0      	b.n	801e5da <_raise_r+0x12>

0801e618 <raise>:
 801e618:	4b02      	ldr	r3, [pc, #8]	; (801e624 <raise+0xc>)
 801e61a:	4601      	mov	r1, r0
 801e61c:	6818      	ldr	r0, [r3, #0]
 801e61e:	f7ff bfd3 	b.w	801e5c8 <_raise_r>
 801e622:	bf00      	nop
 801e624:	20000874 	.word	0x20000874

0801e628 <_kill_r>:
 801e628:	b538      	push	{r3, r4, r5, lr}
 801e62a:	2300      	movs	r3, #0
 801e62c:	4d06      	ldr	r5, [pc, #24]	; (801e648 <_kill_r+0x20>)
 801e62e:	4604      	mov	r4, r0
 801e630:	4608      	mov	r0, r1
 801e632:	4611      	mov	r1, r2
 801e634:	602b      	str	r3, [r5, #0]
 801e636:	f7ef fb74 	bl	800dd22 <_kill>
 801e63a:	1c43      	adds	r3, r0, #1
 801e63c:	d102      	bne.n	801e644 <_kill_r+0x1c>
 801e63e:	682b      	ldr	r3, [r5, #0]
 801e640:	b103      	cbz	r3, 801e644 <_kill_r+0x1c>
 801e642:	6023      	str	r3, [r4, #0]
 801e644:	bd38      	pop	{r3, r4, r5, pc}
 801e646:	bf00      	nop
 801e648:	20003bd8 	.word	0x20003bd8

0801e64c <_getpid_r>:
 801e64c:	f7ef bb62 	b.w	800dd14 <_getpid>

0801e650 <_malloc_usable_size_r>:
 801e650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e654:	1f18      	subs	r0, r3, #4
 801e656:	2b00      	cmp	r3, #0
 801e658:	bfbc      	itt	lt
 801e65a:	580b      	ldrlt	r3, [r1, r0]
 801e65c:	18c0      	addlt	r0, r0, r3
 801e65e:	4770      	bx	lr

0801e660 <__swhatbuf_r>:
 801e660:	b570      	push	{r4, r5, r6, lr}
 801e662:	460c      	mov	r4, r1
 801e664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e668:	4615      	mov	r5, r2
 801e66a:	2900      	cmp	r1, #0
 801e66c:	461e      	mov	r6, r3
 801e66e:	b096      	sub	sp, #88	; 0x58
 801e670:	da0c      	bge.n	801e68c <__swhatbuf_r+0x2c>
 801e672:	89a3      	ldrh	r3, [r4, #12]
 801e674:	2100      	movs	r1, #0
 801e676:	f013 0f80 	tst.w	r3, #128	; 0x80
 801e67a:	bf0c      	ite	eq
 801e67c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801e680:	2340      	movne	r3, #64	; 0x40
 801e682:	2000      	movs	r0, #0
 801e684:	6031      	str	r1, [r6, #0]
 801e686:	602b      	str	r3, [r5, #0]
 801e688:	b016      	add	sp, #88	; 0x58
 801e68a:	bd70      	pop	{r4, r5, r6, pc}
 801e68c:	466a      	mov	r2, sp
 801e68e:	f000 f849 	bl	801e724 <_fstat_r>
 801e692:	2800      	cmp	r0, #0
 801e694:	dbed      	blt.n	801e672 <__swhatbuf_r+0x12>
 801e696:	9901      	ldr	r1, [sp, #4]
 801e698:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801e69c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801e6a0:	4259      	negs	r1, r3
 801e6a2:	4159      	adcs	r1, r3
 801e6a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e6a8:	e7eb      	b.n	801e682 <__swhatbuf_r+0x22>

0801e6aa <__smakebuf_r>:
 801e6aa:	898b      	ldrh	r3, [r1, #12]
 801e6ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e6ae:	079d      	lsls	r5, r3, #30
 801e6b0:	4606      	mov	r6, r0
 801e6b2:	460c      	mov	r4, r1
 801e6b4:	d507      	bpl.n	801e6c6 <__smakebuf_r+0x1c>
 801e6b6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e6ba:	6023      	str	r3, [r4, #0]
 801e6bc:	6123      	str	r3, [r4, #16]
 801e6be:	2301      	movs	r3, #1
 801e6c0:	6163      	str	r3, [r4, #20]
 801e6c2:	b002      	add	sp, #8
 801e6c4:	bd70      	pop	{r4, r5, r6, pc}
 801e6c6:	466a      	mov	r2, sp
 801e6c8:	ab01      	add	r3, sp, #4
 801e6ca:	f7ff ffc9 	bl	801e660 <__swhatbuf_r>
 801e6ce:	9900      	ldr	r1, [sp, #0]
 801e6d0:	4605      	mov	r5, r0
 801e6d2:	4630      	mov	r0, r6
 801e6d4:	f7fe fee8 	bl	801d4a8 <_malloc_r>
 801e6d8:	b948      	cbnz	r0, 801e6ee <__smakebuf_r+0x44>
 801e6da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e6de:	059a      	lsls	r2, r3, #22
 801e6e0:	d4ef      	bmi.n	801e6c2 <__smakebuf_r+0x18>
 801e6e2:	f023 0303 	bic.w	r3, r3, #3
 801e6e6:	f043 0302 	orr.w	r3, r3, #2
 801e6ea:	81a3      	strh	r3, [r4, #12]
 801e6ec:	e7e3      	b.n	801e6b6 <__smakebuf_r+0xc>
 801e6ee:	89a3      	ldrh	r3, [r4, #12]
 801e6f0:	6020      	str	r0, [r4, #0]
 801e6f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e6f6:	81a3      	strh	r3, [r4, #12]
 801e6f8:	9b00      	ldr	r3, [sp, #0]
 801e6fa:	6120      	str	r0, [r4, #16]
 801e6fc:	6163      	str	r3, [r4, #20]
 801e6fe:	9b01      	ldr	r3, [sp, #4]
 801e700:	b15b      	cbz	r3, 801e71a <__smakebuf_r+0x70>
 801e702:	4630      	mov	r0, r6
 801e704:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e708:	f000 f81e 	bl	801e748 <_isatty_r>
 801e70c:	b128      	cbz	r0, 801e71a <__smakebuf_r+0x70>
 801e70e:	89a3      	ldrh	r3, [r4, #12]
 801e710:	f023 0303 	bic.w	r3, r3, #3
 801e714:	f043 0301 	orr.w	r3, r3, #1
 801e718:	81a3      	strh	r3, [r4, #12]
 801e71a:	89a3      	ldrh	r3, [r4, #12]
 801e71c:	431d      	orrs	r5, r3
 801e71e:	81a5      	strh	r5, [r4, #12]
 801e720:	e7cf      	b.n	801e6c2 <__smakebuf_r+0x18>
	...

0801e724 <_fstat_r>:
 801e724:	b538      	push	{r3, r4, r5, lr}
 801e726:	2300      	movs	r3, #0
 801e728:	4d06      	ldr	r5, [pc, #24]	; (801e744 <_fstat_r+0x20>)
 801e72a:	4604      	mov	r4, r0
 801e72c:	4608      	mov	r0, r1
 801e72e:	4611      	mov	r1, r2
 801e730:	602b      	str	r3, [r5, #0]
 801e732:	f7ef fb54 	bl	800ddde <_fstat>
 801e736:	1c43      	adds	r3, r0, #1
 801e738:	d102      	bne.n	801e740 <_fstat_r+0x1c>
 801e73a:	682b      	ldr	r3, [r5, #0]
 801e73c:	b103      	cbz	r3, 801e740 <_fstat_r+0x1c>
 801e73e:	6023      	str	r3, [r4, #0]
 801e740:	bd38      	pop	{r3, r4, r5, pc}
 801e742:	bf00      	nop
 801e744:	20003bd8 	.word	0x20003bd8

0801e748 <_isatty_r>:
 801e748:	b538      	push	{r3, r4, r5, lr}
 801e74a:	2300      	movs	r3, #0
 801e74c:	4d05      	ldr	r5, [pc, #20]	; (801e764 <_isatty_r+0x1c>)
 801e74e:	4604      	mov	r4, r0
 801e750:	4608      	mov	r0, r1
 801e752:	602b      	str	r3, [r5, #0]
 801e754:	f7ef fb52 	bl	800ddfc <_isatty>
 801e758:	1c43      	adds	r3, r0, #1
 801e75a:	d102      	bne.n	801e762 <_isatty_r+0x1a>
 801e75c:	682b      	ldr	r3, [r5, #0]
 801e75e:	b103      	cbz	r3, 801e762 <_isatty_r+0x1a>
 801e760:	6023      	str	r3, [r4, #0]
 801e762:	bd38      	pop	{r3, r4, r5, pc}
 801e764:	20003bd8 	.word	0x20003bd8

0801e768 <_init>:
 801e768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e76a:	bf00      	nop
 801e76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e76e:	bc08      	pop	{r3}
 801e770:	469e      	mov	lr, r3
 801e772:	4770      	bx	lr

0801e774 <_fini>:
 801e774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e776:	bf00      	nop
 801e778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e77a:	bc08      	pop	{r3}
 801e77c:	469e      	mov	lr, r3
 801e77e:	4770      	bx	lr
