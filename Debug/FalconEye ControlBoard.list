
FalconEye ControlBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015798  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000840  08015980  08015980  00025980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080161c0  080161c0  000309d8  2**0
                  CONTENTS
  4 .ARM          00000000  080161c0  080161c0  000309d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080161c0  080161c0  000309d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080161c0  080161c0  000261c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080161c4  080161c4  000261c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009d8  20000000  080161c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031f8  200009d8  08016ba0  000309d8  2**2
                  ALLOC
 10 ._user_heap_stack 00001800  20003bd0  08016ba0  00033bd0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000309d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030a01  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022f0f  00000000  00000000  00030a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006176  00000000  00000000  00053953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ec8  00000000  00000000  00059ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001792  00000000  00000000  0005b998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021596  00000000  00000000  0005d12a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a84f  00000000  00000000  0007e6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a9bcf  00000000  00000000  000a8f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008ef8  00000000  00000000  00152ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0015b9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200009d8 	.word	0x200009d8
 8000204:	00000000 	.word	0x00000000
 8000208:	08015968 	.word	0x08015968

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200009dc 	.word	0x200009dc
 8000224:	08015968 	.word	0x08015968

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <set_baudrate>:
#include "usart.h"



static void set_baudrate(uint32_t baudrate)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	  huart3.Instance = USART3;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <set_baudrate+0x50>)
 8001026:	4a12      	ldr	r2, [pc, #72]	; (8001070 <set_baudrate+0x54>)
 8001028:	601a      	str	r2, [r3, #0]
	  huart3.Init.BaudRate = baudrate;
 800102a:	4a10      	ldr	r2, [pc, #64]	; (800106c <set_baudrate+0x50>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6053      	str	r3, [r2, #4]
	  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <set_baudrate+0x50>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
	  huart3.Init.StopBits = UART_STOPBITS_1;
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <set_baudrate+0x50>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
	  huart3.Init.Parity = UART_PARITY_NONE;
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <set_baudrate+0x50>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
	  huart3.Init.Mode = UART_MODE_TX_RX;
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <set_baudrate+0x50>)
 8001044:	220c      	movs	r2, #12
 8001046:	615a      	str	r2, [r3, #20]
	  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <set_baudrate+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
	  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <set_baudrate+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	61da      	str	r2, [r3, #28]
	  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <set_baudrate+0x50>)
 8001056:	f00c feed 	bl	800de34 <HAL_HalfDuplex_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <set_baudrate+0x48>
	  {
	    Error_Handler();
 8001060:	f003 fa08 	bl	8004474 <Error_Handler>
	  }
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20002860 	.word	0x20002860
 8001070:	40004800 	.word	0x40004800

08001074 <wire_reset>:


HAL_StatusTypeDef wire_reset(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
	uint8_t data_out = 0xF0;
 800107a:	23f0      	movs	r3, #240	; 0xf0
 800107c:	71fb      	strb	r3, [r7, #7]
	uint8_t data_in = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	71bb      	strb	r3, [r7, #6]

	set_baudrate(9600);
 8001082:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001086:	f7ff ffc9 	bl	800101c <set_baudrate>
	HAL_UART_Transmit(&UART, &data_out, 1, 100);
 800108a:	1df9      	adds	r1, r7, #7
 800108c:	2364      	movs	r3, #100	; 0x64
 800108e:	2201      	movs	r2, #1
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <wire_reset+0x4c>)
 8001092:	f00c ff27 	bl	800dee4 <HAL_UART_Transmit>
	HAL_UART_Receive(&UART, &data_in, 1, 100);
 8001096:	1db9      	adds	r1, r7, #6
 8001098:	2364      	movs	r3, #100	; 0x64
 800109a:	2201      	movs	r2, #1
 800109c:	4808      	ldr	r0, [pc, #32]	; (80010c0 <wire_reset+0x4c>)
 800109e:	f00c ffa4 	bl	800dfea <HAL_UART_Receive>
	set_baudrate(115200);
 80010a2:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80010a6:	f7ff ffb9 	bl	800101c <set_baudrate>

	if (data_in != 0xF0)
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	2bf0      	cmp	r3, #240	; 0xf0
 80010ae:	d001      	beq.n	80010b4 <wire_reset+0x40>
		return HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	e000      	b.n	80010b6 <wire_reset+0x42>
	else
		return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20002860 	.word	0x20002860

080010c4 <read_bit>:

static int read_bit(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
	uint8_t data_out = 0xff;
 80010ca:	23ff      	movs	r3, #255	; 0xff
 80010cc:	71fb      	strb	r3, [r7, #7]
	uint8_t data_in = 0x0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	71bb      	strb	r3, [r7, #6]
	data_in = 0x0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	71bb      	strb	r3, [r7, #6]
	if(USARTn -> SR & (1<<5))
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <read_bit+0x4c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0320 	and.w	r3, r3, #32
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <read_bit+0x22>
	{
		USARTn -> DR;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <read_bit+0x4c>)
 80010e4:	685b      	ldr	r3, [r3, #4]
	}
	HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 80010e6:	1df9      	adds	r1, r7, #7
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	2201      	movs	r2, #1
 80010ee:	4809      	ldr	r0, [pc, #36]	; (8001114 <read_bit+0x50>)
 80010f0:	f00c fef8 	bl	800dee4 <HAL_UART_Transmit>
	HAL_UART_Receive(&UART, &data_in, 1, HAL_MAX_DELAY);
 80010f4:	1db9      	adds	r1, r7, #6
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	2201      	movs	r2, #1
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <read_bit+0x50>)
 80010fe:	f00c ff74 	bl	800dfea <HAL_UART_Receive>

	return data_in & 0x01;
 8001102:	79bb      	ldrb	r3, [r7, #6]
 8001104:	f003 0301 	and.w	r3, r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40004800 	.word	0x40004800
 8001114:	20002860 	.word	0x20002860

08001118 <wire_read>:

uint8_t wire_read(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++)
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	e00e      	b.n	8001146 <wire_read+0x2e>
  {
    value >>= 1;
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	085b      	lsrs	r3, r3, #1
 800112c:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 800112e:	f7ff ffc9 	bl	80010c4 <read_bit>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <wire_read+0x28>
      value |= 0x80;
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800113e:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2b07      	cmp	r3, #7
 800114a:	dded      	ble.n	8001128 <wire_read+0x10>
  }
  return value;
 800114c:	79fb      	ldrb	r3, [r7, #7]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <write_bit>:

static void write_bit(int value)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if (value)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00a      	beq.n	800117c <write_bit+0x24>
  {
    uint8_t data_out = 0xff;
 8001166:	23ff      	movs	r3, #255	; 0xff
 8001168:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 800116a:	f107 010f 	add.w	r1, r7, #15
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	2201      	movs	r2, #1
 8001174:	4808      	ldr	r0, [pc, #32]	; (8001198 <write_bit+0x40>)
 8001176:	f00c feb5 	bl	800dee4 <HAL_UART_Transmit>
  else
  {
    uint8_t data_out = 0x0;
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
  }
}
 800117a:	e009      	b.n	8001190 <write_bit+0x38>
    uint8_t data_out = 0x0;
 800117c:	2300      	movs	r3, #0
 800117e:	73bb      	strb	r3, [r7, #14]
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8001180:	f107 010e 	add.w	r1, r7, #14
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	2201      	movs	r2, #1
 800118a:	4803      	ldr	r0, [pc, #12]	; (8001198 <write_bit+0x40>)
 800118c:	f00c feaa 	bl	800dee4 <HAL_UART_Transmit>
}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20002860 	.word	0x20002860

0800119c <wire_write>:

void wire_write(uint8_t byte)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	e00b      	b.n	80011c4 <wire_write+0x28>
    write_bit(byte & 0x01);
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ffd0 	bl	8001158 <write_bit>
    byte >>= 1;
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	085b      	lsrs	r3, r3, #1
 80011bc:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3301      	adds	r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2b07      	cmp	r3, #7
 80011c8:	ddf0      	ble.n	80011ac <wire_write+0x10>
  }
}
 80011ca:	bf00      	nop
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	460a      	mov	r2, r1
 80011de:	71fb      	strb	r3, [r7, #7]
 80011e0:	4613      	mov	r3, r2
 80011e2:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	e016      	b.n	8001218 <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 80011ea:	79fa      	ldrb	r2, [r7, #7]
 80011ec:	79bb      	ldrb	r3, [r7, #6]
 80011ee:	4053      	eors	r3, r2
 80011f0:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	085b      	lsrs	r3, r3, #1
 80011f6:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 80011f8:	7afb      	ldrb	r3, [r7, #11]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d004      	beq.n	800120c <byte_crc+0x38>
      crc ^= 0x8c;
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8001208:	43db      	mvns	r3, r3
 800120a:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	085b      	lsrs	r3, r3, #1
 8001210:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	3301      	adds	r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b07      	cmp	r3, #7
 800121c:	dde5      	ble.n	80011ea <byte_crc+0x16>
  }
  return crc;
 800121e:	79fb      	ldrb	r3, [r7, #7]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	e00d      	b.n	800125a <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	4413      	add	r3, r2
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	7afb      	ldrb	r3, [r7, #11]
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ffc2 	bl	80011d4 <byte_crc>
 8001250:	4603      	mov	r3, r0
 8001252:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3301      	adds	r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	dbed      	blt.n	800123e <wire_crc+0x14>

    return crc;
 8001262:	7afb      	ldrb	r3, [r7, #11]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <EepromInit>:
extern TIM_HandleTypeDef htim4;

uint32_t OldTickReadEeprom;

void EepromInit(m24cxx_t *dev)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	m24cxxFullReadWoDma(dev, EepromMirror.EepromBufferMirror);
 8001274:	490e      	ldr	r1, [pc, #56]	; (80012b0 <EepromInit+0x44>)
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 fe02 	bl	8001e80 <m24cxxFullReadWoDma>
	for(uint16_t i = 0; i<dev->memsize; i++ )
 800127c:	2300      	movs	r3, #0
 800127e:	81fb      	strh	r3, [r7, #14]
 8001280:	e00b      	b.n	800129a <EepromInit+0x2e>
	{
		EepromMirror.EpromBuffer[i] = EepromMirror.EepromBufferMirror[i];
 8001282:	89fa      	ldrh	r2, [r7, #14]
 8001284:	89fb      	ldrh	r3, [r7, #14]
 8001286:	490a      	ldr	r1, [pc, #40]	; (80012b0 <EepromInit+0x44>)
 8001288:	5c89      	ldrb	r1, [r1, r2]
 800128a:	4a09      	ldr	r2, [pc, #36]	; (80012b0 <EepromInit+0x44>)
 800128c:	4413      	add	r3, r2
 800128e:	460a      	mov	r2, r1
 8001290:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
	for(uint16_t i = 0; i<dev->memsize; i++ )
 8001294:	89fb      	ldrh	r3, [r7, #14]
 8001296:	3301      	adds	r3, #1
 8001298:	81fb      	strh	r3, [r7, #14]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	891b      	ldrh	r3, [r3, #8]
 800129e:	89fa      	ldrh	r2, [r7, #14]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d3ee      	bcc.n	8001282 <EepromInit+0x16>
	}
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200009f4 	.word	0x200009f4

080012b4 <EepromRecovery>:

void EepromRecovery(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
	GPIOE -> ODR = EepromMirror.EepromGpioOut;
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <EepromRecovery+0x8c>)
 80012ba:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 80012be:	4b21      	ldr	r3, [pc, #132]	; (8001344 <EepromRecovery+0x90>)
 80012c0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, EepromMirror.EepromPwm1);
 80012c2:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <EepromRecovery+0x8c>)
 80012c4:	f8b3 2102 	ldrh.w	r2, [r3, #258]	; 0x102
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <EepromRecovery+0x94>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, EepromMirror.EepromPwm2);
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <EepromRecovery+0x8c>)
 80012d0:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <EepromRecovery+0x94>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, EepromMirror.EepromPwm3);
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <EepromRecovery+0x8c>)
 80012dc:	f8b3 2106 	ldrh.w	r2, [r3, #262]	; 0x106
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <EepromRecovery+0x94>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, EepromMirror.EepromPwm4);
 80012e6:	4b16      	ldr	r3, [pc, #88]	; (8001340 <EepromRecovery+0x8c>)
 80012e8:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <EepromRecovery+0x94>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40
	Logo.Mode = EepromMirror.EepromLogoMode;
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <EepromRecovery+0x8c>)
 80012f4:	f993 210a 	ldrsb.w	r2, [r3, #266]	; 0x10a
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <EepromRecovery+0x98>)
 80012fa:	701a      	strb	r2, [r3, #0]
	Logo.PwmMax = EepromMirror.EepromLogoPwmMax;
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <EepromRecovery+0x8c>)
 80012fe:	f8b3 210c 	ldrh.w	r2, [r3, #268]	; 0x10c
 8001302:	4b12      	ldr	r3, [pc, #72]	; (800134c <EepromRecovery+0x98>)
 8001304:	805a      	strh	r2, [r3, #2]
	Logo.DimmerSpeed = EepromMirror.EepromLogoDimmingSpeed;
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <EepromRecovery+0x8c>)
 8001308:	f8b3 210e 	ldrh.w	r2, [r3, #270]	; 0x10e
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <EepromRecovery+0x98>)
 800130e:	821a      	strh	r2, [r3, #16]
	Light.Mode = EepromMirror.EepromLightMode;
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <EepromRecovery+0x8c>)
 8001312:	f993 2110 	ldrsb.w	r2, [r3, #272]	; 0x110
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <EepromRecovery+0x9c>)
 8001318:	701a      	strb	r2, [r3, #0]
	Light.PwmMax = EepromMirror.EepromLightPwmMax;
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <EepromRecovery+0x8c>)
 800131c:	f8b3 2112 	ldrh.w	r2, [r3, #274]	; 0x112
 8001320:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <EepromRecovery+0x9c>)
 8001322:	805a      	strh	r2, [r3, #2]
	Light.DimmerSpeed = EepromMirror.EepromLightDimmingSpeed;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <EepromRecovery+0x8c>)
 8001326:	f8b3 2114 	ldrh.w	r2, [r3, #276]	; 0x114
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <EepromRecovery+0x9c>)
 800132c:	821a      	strh	r2, [r3, #16]
	htim4.Init.Prescaler = EepromMirror.EepromPwmFreqPrescaler;
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <EepromRecovery+0x8c>)
 8001330:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8001334:	4a04      	ldr	r2, [pc, #16]	; (8001348 <EepromRecovery+0x94>)
 8001336:	6053      	str	r3, [r2, #4]

}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	200009f4 	.word	0x200009f4
 8001344:	40011800 	.word	0x40011800
 8001348:	20002740 	.word	0x20002740
 800134c:	20001e64 	.word	0x20001e64
 8001350:	20001e78 	.word	0x20001e78

08001354 <EepromVarAssig>:

static void EepromVarAssig(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
	EepromMirror.EepromGpioOut = GPIOE -> ODR;
 8001358:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <EepromVarAssig+0x9c>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	b29a      	uxth	r2, r3
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <EepromVarAssig+0xa0>)
 8001360:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	EepromMirror.EepromPwm1 = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 8001364:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <EepromVarAssig+0xa4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136a:	b29a      	uxth	r2, r3
 800136c:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <EepromVarAssig+0xa0>)
 800136e:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
	EepromMirror.EepromPwm2 = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_2);
 8001372:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <EepromVarAssig+0xa4>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001378:	b29a      	uxth	r2, r3
 800137a:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <EepromVarAssig+0xa0>)
 800137c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	EepromMirror.EepromPwm3 = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_3);
 8001380:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <EepromVarAssig+0xa4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001386:	b29a      	uxth	r2, r3
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <EepromVarAssig+0xa0>)
 800138a:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
	EepromMirror.EepromPwm4 = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_4);
 800138e:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <EepromVarAssig+0xa4>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	b29a      	uxth	r2, r3
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <EepromVarAssig+0xa0>)
 8001398:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
	EepromMirror.EepromLogoMode = Logo.Mode;
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <EepromVarAssig+0xa8>)
 800139e:	f993 2000 	ldrsb.w	r2, [r3]
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <EepromVarAssig+0xa0>)
 80013a4:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
	EepromMirror.EepromLogoPwmMax = Logo.PwmMax;
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <EepromVarAssig+0xa8>)
 80013aa:	885a      	ldrh	r2, [r3, #2]
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <EepromVarAssig+0xa0>)
 80013ae:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	EepromMirror.EepromLogoDimmingSpeed = Logo.DimmerSpeed;
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <EepromVarAssig+0xa8>)
 80013b4:	8a1a      	ldrh	r2, [r3, #16]
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <EepromVarAssig+0xa0>)
 80013b8:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
	EepromMirror.EepromLightMode = Light.Mode;
 80013bc:	4b10      	ldr	r3, [pc, #64]	; (8001400 <EepromVarAssig+0xac>)
 80013be:	f993 2000 	ldrsb.w	r2, [r3]
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <EepromVarAssig+0xa0>)
 80013c4:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	EepromMirror.EepromLightPwmMax = Light.PwmMax;
 80013c8:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <EepromVarAssig+0xac>)
 80013ca:	885a      	ldrh	r2, [r3, #2]
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <EepromVarAssig+0xa0>)
 80013ce:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
	EepromMirror.EepromLightDimmingSpeed = Light.DimmerSpeed;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <EepromVarAssig+0xac>)
 80013d4:	8a1a      	ldrh	r2, [r3, #16]
 80013d6:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <EepromVarAssig+0xa0>)
 80013d8:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
	EepromMirror.EepromPwmFreqPrescaler = htim4.Init.Prescaler;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <EepromVarAssig+0xa4>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <EepromVarAssig+0xa0>)
 80013e2:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118

}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40011800 	.word	0x40011800
 80013f4:	200009f4 	.word	0x200009f4
 80013f8:	20002740 	.word	0x20002740
 80013fc:	20001e64 	.word	0x20001e64
 8001400:	20001e78 	.word	0x20001e78

08001404 <EepromBackup>:

void EepromBackup(m24cxx_t *dev)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	if(HAL_GetTick() - dev->OldTickWriteEeprom > M24_WRITE_TIME)
 800140c:	f004 ff20 	bl	8006250 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b14      	cmp	r3, #20
 800141a:	d92c      	bls.n	8001476 <EepromBackup+0x72>
	{
		EepromVarAssig();
 800141c:	f7ff ff9a 	bl	8001354 <EepromVarAssig>

		for(uint16_t i = 0; i<dev->memsize; i++)
 8001420:	2300      	movs	r3, #0
 8001422:	81fb      	strh	r3, [r7, #14]
 8001424:	e022      	b.n	800146c <EepromBackup+0x68>
		{
			if(EepromMirror.EepromBufferMirror[i] != EepromMirror.EpromBuffer[i])
 8001426:	89fb      	ldrh	r3, [r7, #14]
 8001428:	4a15      	ldr	r2, [pc, #84]	; (8001480 <EepromBackup+0x7c>)
 800142a:	5cd2      	ldrb	r2, [r2, r3]
 800142c:	89fb      	ldrh	r3, [r7, #14]
 800142e:	4914      	ldr	r1, [pc, #80]	; (8001480 <EepromBackup+0x7c>)
 8001430:	440b      	add	r3, r1
 8001432:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8001436:	429a      	cmp	r2, r3
 8001438:	d015      	beq.n	8001466 <EepromBackup+0x62>
			{
				m24cxxWrite8Bit(dev, i, &EepromMirror.EpromBuffer[i]);
 800143a:	89fb      	ldrh	r3, [r7, #14]
 800143c:	b2d9      	uxtb	r1, r3
 800143e:	89fb      	ldrh	r3, [r7, #14]
 8001440:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001444:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <EepromBackup+0x7c>)
 8001446:	4413      	add	r3, r2
 8001448:	461a      	mov	r2, r3
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 fc92 	bl	8001d74 <m24cxxWrite8Bit>
//				EepromMirror.EepromBufferMirror[i] = EepromMirror.EpromBuffer[i];
				m24cxxRead8Bit(dev, i, &EepromMirror.EepromBufferMirror[i]);
 8001450:	89fb      	ldrh	r3, [r7, #14]
 8001452:	b2d9      	uxtb	r1, r3
 8001454:	89fb      	ldrh	r3, [r7, #14]
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <EepromBackup+0x7c>)
 8001458:	4413      	add	r3, r2
 800145a:	461a      	mov	r2, r3
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 fc49 	bl	8001cf4 <m24cxxRead8Bit>
				break;
 8001462:	bf00      	nop
			}
		}
	}
}
 8001464:	e007      	b.n	8001476 <EepromBackup+0x72>
		for(uint16_t i = 0; i<dev->memsize; i++)
 8001466:	89fb      	ldrh	r3, [r7, #14]
 8001468:	3301      	adds	r3, #1
 800146a:	81fb      	strh	r3, [r7, #14]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	891b      	ldrh	r3, [r3, #8]
 8001470:	89fa      	ldrh	r2, [r7, #14]
 8001472:	429a      	cmp	r2, r3
 8001474:	d3d7      	bcc.n	8001426 <EepromBackup+0x22>
}
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200009f4 	.word	0x200009f4

08001484 <EepromRefresh>:

void EepromRefresh(m24cxx_t *dev)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	m24cxxFullRead(dev, EepromMirror.EepromBufferMirror);
 800148c:	4903      	ldr	r1, [pc, #12]	; (800149c <EepromRefresh+0x18>)
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 fcc0 	bl	8001e14 <m24cxxFullRead>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200009f4 	.word	0x200009f4

080014a0 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	font = font_t;
 80014a8:	4a03      	ldr	r2, [pc, #12]	; (80014b8 <GFX_SetFont+0x18>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6013      	str	r3, [r2, #0]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	20000bf4 	.word	0x20000bf4

080014bc <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <GFX_SetFontSize+0x16>
		size = size_t;
 80014cc:	4a03      	ldr	r2, [pc, #12]	; (80014dc <GFX_SetFontSize+0x20>)
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	7013      	strb	r3, [r2, #0]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	20000000 	.word	0x20000000

080014e0 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b089      	sub	sp, #36	; 0x24
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	4611      	mov	r1, r2
 80014ec:	461a      	mov	r2, r3
 80014ee:	460b      	mov	r3, r1
 80014f0:	71fb      	strb	r3, [r7, #7]
 80014f2:	4613      	mov	r3, r2
 80014f4:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	2b7e      	cmp	r3, #126	; 0x7e
 80014fa:	f200 80a3 	bhi.w	8001644 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80014fe:	2300      	movs	r3, #0
 8001500:	75fb      	strb	r3, [r7, #23]
 8001502:	e096      	b.n	8001632 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8001504:	4b51      	ldr	r3, [pc, #324]	; (800164c <GFX_DrawChar+0x16c>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	3b20      	subs	r3, #32
 800150c:	494f      	ldr	r1, [pc, #316]	; (800164c <GFX_DrawChar+0x16c>)
 800150e:	6809      	ldr	r1, [r1, #0]
 8001510:	3101      	adds	r1, #1
 8001512:	7809      	ldrb	r1, [r1, #0]
 8001514:	fb03 f101 	mul.w	r1, r3, r1
 8001518:	7dfb      	ldrb	r3, [r7, #23]
 800151a:	440b      	add	r3, r1
 800151c:	3302      	adds	r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8001524:	2300      	movs	r3, #0
 8001526:	757b      	strb	r3, [r7, #21]
 8001528:	e078      	b.n	800161c <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 800152a:	7dbb      	ldrb	r3, [r7, #22]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	2b00      	cmp	r3, #0
 8001532:	d032      	beq.n	800159a <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8001534:	4b46      	ldr	r3, [pc, #280]	; (8001650 <GFX_DrawChar+0x170>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d113      	bne.n	8001564 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 800153c:	7dfb      	ldrb	r3, [r7, #23]
 800153e:	b29a      	uxth	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	b29b      	uxth	r3, r3
 8001544:	4413      	add	r3, r2
 8001546:	b29b      	uxth	r3, r3
 8001548:	b218      	sxth	r0, r3
 800154a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800154e:	b29a      	uxth	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4413      	add	r3, r2
 8001556:	b29b      	uxth	r3, r3
 8001558:	b21b      	sxth	r3, r3
 800155a:	79ba      	ldrb	r2, [r7, #6]
 800155c:	4619      	mov	r1, r3
 800155e:	f003 ff99 	bl	8005494 <SSD1306_DrawPixel>
 8001562:	e052      	b.n	800160a <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8001564:	7dfb      	ldrb	r3, [r7, #23]
 8001566:	4a3a      	ldr	r2, [pc, #232]	; (8001650 <GFX_DrawChar+0x170>)
 8001568:	7812      	ldrb	r2, [r2, #0]
 800156a:	fb03 f202 	mul.w	r2, r3, r2
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	18d0      	adds	r0, r2, r3
 8001572:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001576:	4a36      	ldr	r2, [pc, #216]	; (8001650 <GFX_DrawChar+0x170>)
 8001578:	7812      	ldrb	r2, [r2, #0]
 800157a:	fb03 f202 	mul.w	r2, r3, r2
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	18d1      	adds	r1, r2, r3
 8001582:	4b33      	ldr	r3, [pc, #204]	; (8001650 <GFX_DrawChar+0x170>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	b29a      	uxth	r2, r3
 8001588:	4b31      	ldr	r3, [pc, #196]	; (8001650 <GFX_DrawChar+0x170>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b29c      	uxth	r4, r3
 800158e:	79bb      	ldrb	r3, [r7, #6]
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	4623      	mov	r3, r4
 8001594:	f000 f9a3 	bl	80018de <GFX_DrawFillRectangle>
 8001598:	e037      	b.n	800160a <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 800159a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d133      	bne.n	800160a <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 80015a2:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <GFX_DrawChar+0x170>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d114      	bne.n	80015d4 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	4413      	add	r3, r2
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	b218      	sxth	r0, r3
 80015b8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80015bc:	b29a      	uxth	r2, r3
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	4413      	add	r3, r2
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80015cc:	4619      	mov	r1, r3
 80015ce:	f003 ff61 	bl	8005494 <SSD1306_DrawPixel>
 80015d2:	e01a      	b.n	800160a <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
 80015d6:	4a1e      	ldr	r2, [pc, #120]	; (8001650 <GFX_DrawChar+0x170>)
 80015d8:	7812      	ldrb	r2, [r2, #0]
 80015da:	fb03 f202 	mul.w	r2, r3, r2
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	18d0      	adds	r0, r2, r3
 80015e2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80015e6:	4a1a      	ldr	r2, [pc, #104]	; (8001650 <GFX_DrawChar+0x170>)
 80015e8:	7812      	ldrb	r2, [r2, #0]
 80015ea:	fb03 f202 	mul.w	r2, r3, r2
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	18d1      	adds	r1, r2, r3
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <GFX_DrawChar+0x170>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <GFX_DrawChar+0x170>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	b29c      	uxth	r4, r3
 80015fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	4623      	mov	r3, r4
 8001606:	f000 f96a 	bl	80018de <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 800160a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800160e:	b2db      	uxtb	r3, r3
 8001610:	3301      	adds	r3, #1
 8001612:	b2db      	uxtb	r3, r3
 8001614:	757b      	strb	r3, [r7, #21]
 8001616:	7dbb      	ldrb	r3, [r7, #22]
 8001618:	085b      	lsrs	r3, r3, #1
 800161a:	75bb      	strb	r3, [r7, #22]
 800161c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001620:	4a0a      	ldr	r2, [pc, #40]	; (800164c <GFX_DrawChar+0x16c>)
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	4293      	cmp	r3, r2
 8001628:	f6ff af7f 	blt.w	800152a <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 800162c:	7dfb      	ldrb	r3, [r7, #23]
 800162e:	3301      	adds	r3, #1
 8001630:	75fb      	strb	r3, [r7, #23]
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <GFX_DrawChar+0x16c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	3301      	adds	r3, #1
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	7dfa      	ldrb	r2, [r7, #23]
 800163c:	429a      	cmp	r2, r3
 800163e:	f4ff af61 	bcc.w	8001504 <GFX_DrawChar+0x24>
 8001642:	e000      	b.n	8001646 <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8001644:	bf00      	nop
            }
        }
    }
}
 8001646:	371c      	adds	r7, #28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd90      	pop	{r4, r7, pc}
 800164c:	20000bf4 	.word	0x20000bf4
 8001650:	20000000 	.word	0x20000000

08001654 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af02      	add	r7, sp, #8
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 800166c:	e03e      	b.n	80016ec <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 800166e:	78f9      	ldrb	r1, [r7, #3]
 8001670:	7cfa      	ldrb	r2, [r7, #19]
 8001672:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	460b      	mov	r3, r1
 800167a:	68b9      	ldr	r1, [r7, #8]
 800167c:	6978      	ldr	r0, [r7, #20]
 800167e:	f7ff ff2f 	bl	80014e0 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <GFX_DrawString+0xb0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	3301      	adds	r3, #1
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <GFX_DrawString+0xb4>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	fb02 f303 	mul.w	r3, r2, r3
 8001694:	3301      	adds	r3, #1
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4413      	add	r3, r2
 800169a:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 800169c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d120      	bne.n	80016e6 <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 80016a4:	2300      	movs	r3, #0
 80016a6:	74bb      	strb	r3, [r7, #18]
 80016a8:	e012      	b.n	80016d0 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	3b01      	subs	r3, #1
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	b218      	sxth	r0, r3
 80016b4:	7cbb      	ldrb	r3, [r7, #18]
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	4413      	add	r3, r2
 80016be:	b29b      	uxth	r3, r3
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	2200      	movs	r2, #0
 80016c4:	4619      	mov	r1, r3
 80016c6:	f003 fee5 	bl	8005494 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 80016ca:	7cbb      	ldrb	r3, [r7, #18]
 80016cc:	3301      	adds	r3, #1
 80016ce:	74bb      	strb	r3, [r7, #18]
 80016d0:	7cba      	ldrb	r2, [r7, #18]
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <GFX_DrawString+0xb0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <GFX_DrawString+0xb4>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	fb01 f303 	mul.w	r3, r1, r3
 80016e2:	429a      	cmp	r2, r3
 80016e4:	dbe1      	blt.n	80016aa <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1ba      	bne.n	800166e <GFX_DrawString+0x1a>
	}
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000bf4 	.word	0x20000bf4
 8001708:	20000000 	.word	0x20000000

0800170c <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08c      	sub	sp, #48	; 0x30
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
 8001718:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001724:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1acb      	subs	r3, r1, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	bfb8      	it	lt
 8001732:	425b      	neglt	r3, r3
 8001734:	429a      	cmp	r2, r3
 8001736:	bfcc      	ite	gt
 8001738:	2301      	movgt	r3, #1
 800173a:	2300      	movle	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001740:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00b      	beq.n	8001760 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	623b      	str	r3, [r7, #32]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	429a      	cmp	r2, r3
 8001766:	dd0b      	ble.n	8001780 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	61fb      	str	r3, [r7, #28]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	61bb      	str	r3, [r7, #24]
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	b29a      	uxth	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	b29b      	uxth	r3, r3
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	b29b      	uxth	r3, r3
 800178c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	bfb8      	it	lt
 8001798:	425b      	neglt	r3, r3
 800179a:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 800179c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017a0:	0fda      	lsrs	r2, r3, #31
 80017a2:	4413      	add	r3, r2
 80017a4:	105b      	asrs	r3, r3, #1
 80017a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	da02      	bge.n	80017b6 <GFX_WriteLine+0xaa>
	        ystep = 1;
 80017b0:	2301      	movs	r3, #1
 80017b2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80017b4:	e030      	b.n	8001818 <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 80017b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80017bc:	e02c      	b.n	8001818 <GFX_WriteLine+0x10c>
	        if (steep) {
 80017be:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d009      	beq.n	80017da <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	b211      	sxth	r1, r2
 80017ce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 fe5e 	bl	8005494 <SSD1306_DrawPixel>
 80017d8:	e008      	b.n	80017ec <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	b21b      	sxth	r3, r3
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	b211      	sxth	r1, r2
 80017e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 fe54 	bl	8005494 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 80017ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80017ee:	8abb      	ldrh	r3, [r7, #20]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80017f6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	da09      	bge.n	8001812 <GFX_WriteLine+0x106>
	            y_start += ystep;
 80017fe:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	4413      	add	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001808:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800180a:	8afb      	ldrh	r3, [r7, #22]
 800180c:	4413      	add	r3, r2
 800180e:	b29b      	uxth	r3, r3
 8001810:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	3301      	adds	r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	ddce      	ble.n	80017be <GFX_WriteLine+0xb2>
	        }
	    }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3730      	adds	r7, #48	; 0x30
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af02      	add	r7, sp, #8
 8001830:	60f8      	str	r0, [r7, #12]
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	1e5a      	subs	r2, r3, #1
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	4613      	mov	r3, r2
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f7ff ff5e 	bl	800170c <GFX_WriteLine>
}
 8001850:	bf00      	nop
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af02      	add	r7, sp, #8
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4413      	add	r3, r2
 800186c:	1e5a      	subs	r2, r3, #1
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	9300      	str	r3, [sp, #0]
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f7ff ff48 	bl	800170c <GFX_WriteLine>
}
 800187c:	bf00      	nop
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <GFX_DrawRectangle>:
	    }
}
#endif
#if USING_RECTANGLE == 1
void GFX_DrawRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	4611      	mov	r1, r2
 8001890:	461a      	mov	r2, r3
 8001892:	460b      	mov	r3, r1
 8001894:	80fb      	strh	r3, [r7, #6]
 8001896:	4613      	mov	r3, r2
 8001898:	80bb      	strh	r3, [r7, #4]

    GFX_DrawFastHLine(x, y, w, color);
 800189a:	88fa      	ldrh	r2, [r7, #6]
 800189c:	7e3b      	ldrb	r3, [r7, #24]
 800189e:	68b9      	ldr	r1, [r7, #8]
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f7ff ffd9 	bl	8001858 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x, y+h-1, w, color);
 80018a6:	88ba      	ldrh	r2, [r7, #4]
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4413      	add	r3, r2
 80018ac:	1e59      	subs	r1, r3, #1
 80018ae:	88fa      	ldrh	r2, [r7, #6]
 80018b0:	7e3b      	ldrb	r3, [r7, #24]
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f7ff ffd0 	bl	8001858 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x, y, h, color);
 80018b8:	88ba      	ldrh	r2, [r7, #4]
 80018ba:	7e3b      	ldrb	r3, [r7, #24]
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f7ff ffb3 	bl	800182a <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y, h, color);
 80018c4:	88fa      	ldrh	r2, [r7, #6]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4413      	add	r3, r2
 80018ca:	1e58      	subs	r0, r3, #1
 80018cc:	88ba      	ldrh	r2, [r7, #4]
 80018ce:	7e3b      	ldrb	r3, [r7, #24]
 80018d0:	68b9      	ldr	r1, [r7, #8]
 80018d2:	f7ff ffaa 	bl	800182a <GFX_DrawFastVLine>

}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <GFX_DrawFillRectangle>:
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	4611      	mov	r1, r2
 80018ea:	461a      	mov	r2, r3
 80018ec:	460b      	mov	r3, r1
 80018ee:	80fb      	strh	r3, [r7, #6]
 80018f0:	4613      	mov	r3, r2
 80018f2:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	e009      	b.n	800190e <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 80018fa:	88ba      	ldrh	r2, [r7, #4]
 80018fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	6978      	ldr	r0, [r7, #20]
 8001904:	f7ff ff91 	bl	800182a <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	3301      	adds	r3, #1
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	88fa      	ldrh	r2, [r7, #6]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4413      	add	r3, r2
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbef      	blt.n	80018fa <GFX_DrawFillRectangle+0x1c>
    }

}
 800191a:	bf00      	nop
 800191c:	bf00      	nop
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <GFX_DrawCircle>:
#endif
#if USING_CIRCLE == 1
void GFX_DrawCircle(int x0, int y0, uint16_t r, uint8_t color)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	4611      	mov	r1, r2
 8001930:	461a      	mov	r2, r3
 8001932:	460b      	mov	r3, r1
 8001934:	80fb      	strh	r3, [r7, #6]
 8001936:	4613      	mov	r3, r2
 8001938:	717b      	strb	r3, [r7, #5]
    int16_t f = 1 - r;
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	f1c3 0301 	rsb	r3, r3, #1
 8001940:	b29b      	uxth	r3, r3
 8001942:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8001944:	2301      	movs	r3, #1
 8001946:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	461a      	mov	r2, r3
 800194c:	03d2      	lsls	r2, r2, #15
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	b29b      	uxth	r3, r3
 8001954:	837b      	strh	r3, [r7, #26]
    int16_t x = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	833b      	strh	r3, [r7, #24]
    int16_t y = r;
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	82fb      	strh	r3, [r7, #22]

    GFX_DrawPixel(x0  , y0+r, color);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	b218      	sxth	r0, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	b29a      	uxth	r2, r3
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	4413      	add	r3, r2
 800196a:	b29b      	uxth	r3, r3
 800196c:	b21b      	sxth	r3, r3
 800196e:	797a      	ldrb	r2, [r7, #5]
 8001970:	4619      	mov	r1, r3
 8001972:	f003 fd8f 	bl	8005494 <SSD1306_DrawPixel>
    GFX_DrawPixel(x0  , y0-r, color);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	b218      	sxth	r0, r3
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	b29a      	uxth	r2, r3
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	b29b      	uxth	r3, r3
 8001984:	b21b      	sxth	r3, r3
 8001986:	797a      	ldrb	r2, [r7, #5]
 8001988:	4619      	mov	r1, r3
 800198a:	f003 fd83 	bl	8005494 <SSD1306_DrawPixel>
    GFX_DrawPixel(x0+r, y0  , color);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	b29a      	uxth	r2, r3
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	4413      	add	r3, r2
 8001996:	b29b      	uxth	r3, r3
 8001998:	b21b      	sxth	r3, r3
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	b211      	sxth	r1, r2
 800199e:	797a      	ldrb	r2, [r7, #5]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f003 fd77 	bl	8005494 <SSD1306_DrawPixel>
    GFX_DrawPixel(x0-r, y0  , color);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	b211      	sxth	r1, r2
 80019b6:	797a      	ldrb	r2, [r7, #5]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 fd6b 	bl	8005494 <SSD1306_DrawPixel>

    while (x<y) {
 80019be:	e0a1      	b.n	8001b04 <GFX_DrawCircle+0x1e0>
        if (f >= 0) {
 80019c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	db0e      	blt.n	80019e6 <GFX_DrawCircle+0xc2>
            y--;
 80019c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	3b01      	subs	r3, #1
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80019d4:	8b7b      	ldrh	r3, [r7, #26]
 80019d6:	3302      	adds	r3, #2
 80019d8:	b29b      	uxth	r3, r3
 80019da:	837b      	strh	r3, [r7, #26]
            f += ddF_y;
 80019dc:	8bfa      	ldrh	r2, [r7, #30]
 80019de:	8b7b      	ldrh	r3, [r7, #26]
 80019e0:	4413      	add	r3, r2
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80019e6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	3301      	adds	r3, #1
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80019f2:	8bbb      	ldrh	r3, [r7, #28]
 80019f4:	3302      	adds	r3, #2
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	83bb      	strh	r3, [r7, #28]
        f += ddF_x;
 80019fa:	8bfa      	ldrh	r2, [r7, #30]
 80019fc:	8bbb      	ldrh	r3, [r7, #28]
 80019fe:	4413      	add	r3, r2
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	83fb      	strh	r3, [r7, #30]

        GFX_DrawPixel(x0 + x, y0 + y, color);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	8b3b      	ldrh	r3, [r7, #24]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	b218      	sxth	r0, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	8afb      	ldrh	r3, [r7, #22]
 8001a16:	4413      	add	r3, r2
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	797a      	ldrb	r2, [r7, #5]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f003 fd38 	bl	8005494 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 - x, y0 + y, color);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	8b3b      	ldrh	r3, [r7, #24]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b218      	sxth	r0, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	8afb      	ldrh	r3, [r7, #22]
 8001a36:	4413      	add	r3, r2
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	797a      	ldrb	r2, [r7, #5]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f003 fd28 	bl	8005494 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 + x, y0 - y, color);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	8b3b      	ldrh	r3, [r7, #24]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	b218      	sxth	r0, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	8afb      	ldrh	r3, [r7, #22]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	b21b      	sxth	r3, r3
 8001a5c:	797a      	ldrb	r2, [r7, #5]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f003 fd18 	bl	8005494 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 - x, y0 - y, color);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	8b3b      	ldrh	r3, [r7, #24]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	b218      	sxth	r0, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	8afb      	ldrh	r3, [r7, #22]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	797a      	ldrb	r2, [r7, #5]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f003 fd08 	bl	8005494 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 + y, y0 + x, color);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	8afb      	ldrh	r3, [r7, #22]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	b218      	sxth	r0, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	8b3b      	ldrh	r3, [r7, #24]
 8001a96:	4413      	add	r3, r2
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	797a      	ldrb	r2, [r7, #5]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f003 fcf8 	bl	8005494 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 - y, y0 + x, color);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	8afb      	ldrh	r3, [r7, #22]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	b218      	sxth	r0, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	8b3b      	ldrh	r3, [r7, #24]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	b21b      	sxth	r3, r3
 8001abc:	797a      	ldrb	r2, [r7, #5]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f003 fce8 	bl	8005494 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 + y, y0 - x, color);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	8afb      	ldrh	r3, [r7, #22]
 8001aca:	4413      	add	r3, r2
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	b218      	sxth	r0, r3
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	8b3b      	ldrh	r3, [r7, #24]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	b21b      	sxth	r3, r3
 8001adc:	797a      	ldrb	r2, [r7, #5]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f003 fcd8 	bl	8005494 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 - y, y0 - x, color);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	8afb      	ldrh	r3, [r7, #22]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	b218      	sxth	r0, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	8b3b      	ldrh	r3, [r7, #24]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	b21b      	sxth	r3, r3
 8001afc:	797a      	ldrb	r2, [r7, #5]
 8001afe:	4619      	mov	r1, r3
 8001b00:	f003 fcc8 	bl	8005494 <SSD1306_DrawPixel>
    while (x<y) {
 8001b04:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001b08:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	f6ff af57 	blt.w	80019c0 <GFX_DrawCircle+0x9c>
    }

}
 8001b12:	bf00      	nop
 8001b14:	bf00      	nop
 8001b16:	3720      	adds	r7, #32
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <GFX_DrawFillCircleHelper>:
    }
}
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, uint8_t color)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	4611      	mov	r1, r2
 8001b28:	461a      	mov	r2, r3
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	80fb      	strh	r3, [r7, #6]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	f1c3 0301 	rsb	r3, r3, #1
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	461a      	mov	r2, r3
 8001b44:	03d2      	lsls	r2, r2, #15
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001b56:	e077      	b.n	8001c48 <GFX_DrawFillCircleHelper+0x12c>
        if (f >= 0) {
 8001b58:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	db0e      	blt.n	8001b7e <GFX_DrawFillCircleHelper+0x62>
            y--;
 8001b60:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	3b01      	subs	r3, #1
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8001b6c:	8b7b      	ldrh	r3, [r7, #26]
 8001b6e:	3302      	adds	r3, #2
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8001b74:	8bfa      	ldrh	r2, [r7, #30]
 8001b76:	8b7b      	ldrh	r3, [r7, #26]
 8001b78:	4413      	add	r3, r2
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8001b7e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	3301      	adds	r3, #1
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001b8a:	8bbb      	ldrh	r3, [r7, #28]
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8001b92:	8bfa      	ldrh	r2, [r7, #30]
 8001b94:	8bbb      	ldrh	r3, [r7, #28]
 8001b96:	4413      	add	r3, r2
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8001b9c:	797b      	ldrb	r3, [r7, #5]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d025      	beq.n	8001bf2 <GFX_DrawFillCircleHelper+0xd6>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 8001ba6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	18d0      	adds	r0, r2, r3
 8001bae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	1ad1      	subs	r1, r2, r3
 8001bb6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001bc2:	441a      	add	r2, r3
 8001bc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bc8:	f7ff fe2f 	bl	800182a <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8001bcc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	18d0      	adds	r0, r2, r3
 8001bd4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	1ad1      	subs	r1, r2, r3
 8001bdc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001be8:	441a      	add	r2, r3
 8001bea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001bee:	f7ff fe1c 	bl	800182a <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 8001bf2:	797b      	ldrb	r3, [r7, #5]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d025      	beq.n	8001c48 <GFX_DrawFillCircleHelper+0x12c>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 8001bfc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	1ad0      	subs	r0, r2, r3
 8001c04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	1ad1      	subs	r1, r2, r3
 8001c0c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001c18:	441a      	add	r2, r3
 8001c1a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c1e:	f7ff fe04 	bl	800182a <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8001c22:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	1ad0      	subs	r0, r2, r3
 8001c2a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	1ad1      	subs	r1, r2, r3
 8001c32:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001c3e:	441a      	add	r2, r3
 8001c40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c44:	f7ff fdf1 	bl	800182a <GFX_DrawFastVLine>
    while (x<y) {
 8001c48:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001c4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	db81      	blt.n	8001b58 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 8001c54:	bf00      	nop
 8001c56:	bf00      	nop
 8001c58:	3720      	adds	r7, #32
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <GFX_DrawFillCircle>:
#endif
#if USING_FILL_CIRCLE == 1
void GFX_DrawFillCircle(int x0, int y0, uint16_t r, uint8_t color)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af02      	add	r7, sp, #8
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	4611      	mov	r1, r2
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	80fb      	strh	r3, [r7, #6]
 8001c70:	4613      	mov	r3, r2
 8001c72:	717b      	strb	r3, [r7, #5]

	GFX_DrawFastVLine(x0, y0-r, 2*r+1, color);
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	1ad1      	subs	r1, r2, r3
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	797b      	ldrb	r3, [r7, #5]
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f7ff fdd1 	bl	800182a <GFX_DrawFastVLine>
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
 8001c88:	88fa      	ldrh	r2, [r7, #6]
 8001c8a:	797b      	ldrb	r3, [r7, #5]
 8001c8c:	9301      	str	r3, [sp, #4]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	2303      	movs	r3, #3
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f7ff ff40 	bl	8001b1c <GFX_DrawFillCircleHelper>
}
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <m24cxxInit>:
#include "main.h"



void m24cxxInit(m24cxx_t *m24, I2C_HandleTypeDef *i2c, uint8_t addr, uint16_t memsize, GPIO_TypeDef *WcPort, uint16_t WcPin)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	4611      	mov	r1, r2
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	71fb      	strb	r3, [r7, #7]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	80bb      	strh	r3, [r7, #4]
	m24 -> addr    = addr<<1;
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	701a      	strb	r2, [r3, #0]
	m24 -> i2c     = i2c;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	605a      	str	r2, [r3, #4]
	m24 -> memsize = memsize;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	88ba      	ldrh	r2, [r7, #4]
 8001cce:	811a      	strh	r2, [r3, #8]
	m24 -> WcPort  = WcPort;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	60da      	str	r2, [r3, #12]
	m24 -> WcPin   = WcPin;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	8bba      	ldrh	r2, [r7, #28]
 8001cda:	821a      	strh	r2, [r3, #16]
	HAL_GPIO_WritePin(m24->WcPort, m24->WcPin, SET);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	68d8      	ldr	r0, [r3, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8a1b      	ldrh	r3, [r3, #16]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f005 feaf 	bl	8007a4a <HAL_GPIO_WritePin>
}
 8001cec:	bf00      	nop
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <m24cxxRead8Bit>:

HAL_StatusTypeDef m24cxxRead8Bit(m24cxx_t *m24, uint8_t DataAddr, uint8_t *Data)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af02      	add	r7, sp, #8
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	72fb      	strb	r3, [r7, #11]
	int32_t i = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
	while((m24->i2c)->hdmarx->State != HAL_DMA_STATE_READY && i<=200000)
 8001d06:	e002      	b.n	8001d0e <m24cxxRead8Bit+0x1a>
	{
		i++;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	617b      	str	r3, [r7, #20]
	while((m24->i2c)->hdmarx->State != HAL_DMA_STATE_READY && i<=200000)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d14:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d003      	beq.n	8001d26 <m24cxxRead8Bit+0x32>
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <m24cxxRead8Bit+0x78>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	ddf0      	ble.n	8001d08 <m24cxxRead8Bit+0x14>
	}
	if((m24->i2c)->hdmarx->State == HAL_DMA_STATE_READY)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d10f      	bne.n	8001d56 <m24cxxRead8Bit+0x62>
	{
	HAL_I2C_Mem_Read_DMA(m24 ->i2c, m24 -> addr, DataAddr, 1, Data, 1);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6858      	ldr	r0, [r3, #4]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	b299      	uxth	r1, r3
 8001d40:	7afb      	ldrb	r3, [r7, #11]
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	2301      	movs	r3, #1
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	f006 fca5 	bl	800869c <HAL_I2C_Mem_Read_DMA>
	return HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e005      	b.n	8001d62 <m24cxxRead8Bit+0x6e>
	}
	else
	{
		ERROR_EEPROM;
 8001d56:	4a06      	ldr	r2, [pc, #24]	; (8001d70 <m24cxxRead8Bit+0x7c>)
 8001d58:	7813      	ldrb	r3, [r2, #0]
 8001d5a:	f043 0304 	orr.w	r3, r3, #4
 8001d5e:	7013      	strb	r3, [r2, #0]
		return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
	}
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	00030d40 	.word	0x00030d40
 8001d70:	20001e8c 	.word	0x20001e8c

08001d74 <m24cxxWrite8Bit>:
{
	HAL_I2C_Mem_Read(m24 ->i2c, m24 -> addr, DataAddr, 1, Data, 1, 500);
}

HAL_StatusTypeDef m24cxxWrite8Bit(m24cxx_t *m24, uint8_t DataAddr, uint8_t *Data)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(m24->WcPort, m24->WcPin, RESET);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	68d8      	ldr	r0, [r3, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8a1b      	ldrh	r3, [r3, #16]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f005 fe5c 	bl	8007a4a <HAL_GPIO_WritePin>
	m24 -> WcIsZero = 1;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2201      	movs	r2, #1
 8001d96:	749a      	strb	r2, [r3, #18]
	int32_t i = 0;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
	while((m24->i2c)->hdmatx->State != HAL_DMA_STATE_READY && i<=200000)
 8001d9c:	e002      	b.n	8001da4 <m24cxxWrite8Bit+0x30>
	{
		i++;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	3301      	adds	r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
	while((m24->i2c)->hdmatx->State != HAL_DMA_STATE_READY && i<=200000)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001daa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d003      	beq.n	8001dbc <m24cxxWrite8Bit+0x48>
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	4a15      	ldr	r2, [pc, #84]	; (8001e0c <m24cxxWrite8Bit+0x98>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	ddf0      	ble.n	8001d9e <m24cxxWrite8Bit+0x2a>
	}
	if((m24->i2c)->hdmatx->State == HAL_DMA_STATE_READY)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d114      	bne.n	8001df6 <m24cxxWrite8Bit+0x82>
	{
	HAL_I2C_Mem_Write_DMA(m24 -> i2c, m24 -> addr, DataAddr, 1, Data, 1);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6858      	ldr	r0, [r3, #4]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	b299      	uxth	r1, r3
 8001dd6:	7afb      	ldrb	r3, [r7, #11]
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	2301      	movs	r3, #1
 8001ddc:	9301      	str	r3, [sp, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	2301      	movs	r3, #1
 8001de4:	f006 fb04 	bl	80083f0 <HAL_I2C_Mem_Write_DMA>
	m24 -> OldTickWriteEeprom = HAL_GetTick();
 8001de8:	f004 fa32 	bl	8006250 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	615a      	str	r2, [r3, #20]
	return HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e005      	b.n	8001e02 <m24cxxWrite8Bit+0x8e>
	}
	else
	{	ERROR_EEPROM;
 8001df6:	4a06      	ldr	r2, [pc, #24]	; (8001e10 <m24cxxWrite8Bit+0x9c>)
 8001df8:	7813      	ldrb	r3, [r2, #0]
 8001dfa:	f043 0304 	orr.w	r3, r3, #4
 8001dfe:	7013      	strb	r3, [r2, #0]
		return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
	}
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	00030d40 	.word	0x00030d40
 8001e10:	20001e8c 	.word	0x20001e8c

08001e14 <m24cxxFullRead>:
		return HAL_ERROR;
	}
}

uint8_t m24cxxFullRead(m24cxx_t *m24, uint8_t *Data)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
	int32_t i = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
	while((m24->i2c)->hdmarx->State != HAL_DMA_STATE_READY && i<=200000)
 8001e22:	e002      	b.n	8001e2a <m24cxxFullRead+0x16>
	{
		i++;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3301      	adds	r3, #1
 8001e28:	60fb      	str	r3, [r7, #12]
	while((m24->i2c)->hdmarx->State != HAL_DMA_STATE_READY && i<=200000)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d003      	beq.n	8001e42 <m24cxxFullRead+0x2e>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4a0f      	ldr	r2, [pc, #60]	; (8001e7c <m24cxxFullRead+0x68>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	ddf0      	ble.n	8001e24 <m24cxxFullRead+0x10>
	}
	if((m24->i2c)->hdmarx->State == HAL_DMA_STATE_READY)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d10f      	bne.n	8001e72 <m24cxxFullRead+0x5e>
	{
	HAL_I2C_Mem_Read_DMA(m24 -> i2c, m24 -> addr, 0x00, 1, Data, m24 -> memsize);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6858      	ldr	r0, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	b299      	uxth	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	891b      	ldrh	r3, [r3, #8]
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	2301      	movs	r3, #1
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f006 fc17 	bl	800869c <HAL_I2C_Mem_Read_DMA>
	return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e000      	b.n	8001e74 <m24cxxFullRead+0x60>
	}
	else
	{
		return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
	}
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	00030d40 	.word	0x00030d40

08001e80 <m24cxxFullReadWoDma>:

void m24cxxFullReadWoDma(m24cxx_t *m24, uint8_t *Data)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af04      	add	r7, sp, #16
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Read(m24 -> i2c, m24 -> addr, 0x00, 1, Data, m24 -> memsize, 1000);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6858      	ldr	r0, [r3, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	b299      	uxth	r1, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	891b      	ldrh	r3, [r3, #8]
 8001e98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e9c:	9202      	str	r2, [sp, #8]
 8001e9e:	9301      	str	r3, [sp, #4]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f006 f83a 	bl	8007f20 <HAL_I2C_Mem_Read>
}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <m24cxxWcSetIt>:
		}
	HAL_GPIO_WritePin(m24->WcPort, m24->WcPin, SET);
}

void m24cxxWcSetIt(m24cxx_t *m24, I2C_HandleTypeDef *hi2c)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
	if(hi2c->Instance == m24->i2c->Instance && m24->WcIsZero == 1)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d10e      	bne.n	8001eea <m24cxxWcSetIt+0x36>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7c9b      	ldrb	r3, [r3, #18]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d10a      	bne.n	8001eea <m24cxxWcSetIt+0x36>
	{
		HAL_GPIO_WritePin(m24->WcPort, m24->WcPin, SET);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68d8      	ldr	r0, [r3, #12]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	8a1b      	ldrh	r3, [r3, #16]
 8001edc:	2201      	movs	r2, #1
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f005 fdb3 	bl	8007a4a <HAL_GPIO_WritePin>
		m24->WcIsZero = 0;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	749a      	strb	r2, [r3, #18]
	}
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f04:	4b2e      	ldr	r3, [pc, #184]	; (8001fc0 <MX_ADC1_Init+0xcc>)
 8001f06:	4a2f      	ldr	r2, [pc, #188]	; (8001fc4 <MX_ADC1_Init+0xd0>)
 8001f08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f0a:	4b2d      	ldr	r3, [pc, #180]	; (8001fc0 <MX_ADC1_Init+0xcc>)
 8001f0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f10:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f12:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <MX_ADC1_Init+0xcc>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f18:	4b29      	ldr	r3, [pc, #164]	; (8001fc0 <MX_ADC1_Init+0xcc>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f1e:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <MX_ADC1_Init+0xcc>)
 8001f20:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001f24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f26:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <MX_ADC1_Init+0xcc>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001f2c:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <MX_ADC1_Init+0xcc>)
 8001f2e:	2204      	movs	r2, #4
 8001f30:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f32:	4823      	ldr	r0, [pc, #140]	; (8001fc0 <MX_ADC1_Init+0xcc>)
 8001f34:	f004 f9d8 	bl	80062e8 <HAL_ADC_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001f3e:	f002 fa99 	bl	8004474 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001f42:	2306      	movs	r3, #6
 8001f44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f46:	2301      	movs	r3, #1
 8001f48:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001f4a:	2307      	movs	r3, #7
 8001f4c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	4619      	mov	r1, r3
 8001f52:	481b      	ldr	r0, [pc, #108]	; (8001fc0 <MX_ADC1_Init+0xcc>)
 8001f54:	f004 fc6a 	bl	800682c <HAL_ADC_ConfigChannel>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001f5e:	f002 fa89 	bl	8004474 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001f62:	2307      	movs	r3, #7
 8001f64:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001f66:	2302      	movs	r3, #2
 8001f68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4814      	ldr	r0, [pc, #80]	; (8001fc0 <MX_ADC1_Init+0xcc>)
 8001f70:	f004 fc5c 	bl	800682c <HAL_ADC_ConfigChannel>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001f7a:	f002 fa7b 	bl	8004474 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001f7e:	2308      	movs	r3, #8
 8001f80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001f82:	2303      	movs	r3, #3
 8001f84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	4619      	mov	r1, r3
 8001f8a:	480d      	ldr	r0, [pc, #52]	; (8001fc0 <MX_ADC1_Init+0xcc>)
 8001f8c:	f004 fc4e 	bl	800682c <HAL_ADC_ConfigChannel>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001f96:	f002 fa6d 	bl	8004474 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001f9a:	2310      	movs	r3, #16
 8001f9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4806      	ldr	r0, [pc, #24]	; (8001fc0 <MX_ADC1_Init+0xcc>)
 8001fa8:	f004 fc40 	bl	800682c <HAL_ADC_ConfigChannel>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001fb2:	f002 fa5f 	bl	8004474 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000bf8 	.word	0x20000bf8
 8001fc4:	40012400 	.word	0x40012400

08001fc8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	; 0x28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 0318 	add.w	r3, r7, #24
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a33      	ldr	r2, [pc, #204]	; (80020b0 <HAL_ADC_MspInit+0xe8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d15f      	bne.n	80020a8 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fe8:	4b32      	ldr	r3, [pc, #200]	; (80020b4 <HAL_ADC_MspInit+0xec>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	4a31      	ldr	r2, [pc, #196]	; (80020b4 <HAL_ADC_MspInit+0xec>)
 8001fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ff2:	6193      	str	r3, [r2, #24]
 8001ff4:	4b2f      	ldr	r3, [pc, #188]	; (80020b4 <HAL_ADC_MspInit+0xec>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002000:	4b2c      	ldr	r3, [pc, #176]	; (80020b4 <HAL_ADC_MspInit+0xec>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	4a2b      	ldr	r2, [pc, #172]	; (80020b4 <HAL_ADC_MspInit+0xec>)
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	6193      	str	r3, [r2, #24]
 800200c:	4b29      	ldr	r3, [pc, #164]	; (80020b4 <HAL_ADC_MspInit+0xec>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002018:	4b26      	ldr	r3, [pc, #152]	; (80020b4 <HAL_ADC_MspInit+0xec>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	4a25      	ldr	r2, [pc, #148]	; (80020b4 <HAL_ADC_MspInit+0xec>)
 800201e:	f043 0308 	orr.w	r3, r3, #8
 8002022:	6193      	str	r3, [r2, #24]
 8002024:	4b23      	ldr	r3, [pc, #140]	; (80020b4 <HAL_ADC_MspInit+0xec>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002030:	23c0      	movs	r3, #192	; 0xc0
 8002032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002034:	2303      	movs	r3, #3
 8002036:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002038:	f107 0318 	add.w	r3, r7, #24
 800203c:	4619      	mov	r1, r3
 800203e:	481e      	ldr	r0, [pc, #120]	; (80020b8 <HAL_ADC_MspInit+0xf0>)
 8002040:	f005 fb58 	bl	80076f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002044:	2301      	movs	r3, #1
 8002046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002048:	2303      	movs	r3, #3
 800204a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204c:	f107 0318 	add.w	r3, r7, #24
 8002050:	4619      	mov	r1, r3
 8002052:	481a      	ldr	r0, [pc, #104]	; (80020bc <HAL_ADC_MspInit+0xf4>)
 8002054:	f005 fb4e 	bl	80076f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002058:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <HAL_ADC_MspInit+0xf8>)
 800205a:	4a1a      	ldr	r2, [pc, #104]	; (80020c4 <HAL_ADC_MspInit+0xfc>)
 800205c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800205e:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <HAL_ADC_MspInit+0xf8>)
 8002060:	2200      	movs	r2, #0
 8002062:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002064:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <HAL_ADC_MspInit+0xf8>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <HAL_ADC_MspInit+0xf8>)
 800206c:	2280      	movs	r2, #128	; 0x80
 800206e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002070:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <HAL_ADC_MspInit+0xf8>)
 8002072:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002076:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <HAL_ADC_MspInit+0xf8>)
 800207a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800207e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <HAL_ADC_MspInit+0xf8>)
 8002082:	2220      	movs	r2, #32
 8002084:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002086:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <HAL_ADC_MspInit+0xf8>)
 8002088:	2200      	movs	r2, #0
 800208a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800208c:	480c      	ldr	r0, [pc, #48]	; (80020c0 <HAL_ADC_MspInit+0xf8>)
 800208e:	f004 fedd 	bl	8006e4c <HAL_DMA_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8002098:	f002 f9ec 	bl	8004474 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a08      	ldr	r2, [pc, #32]	; (80020c0 <HAL_ADC_MspInit+0xf8>)
 80020a0:	621a      	str	r2, [r3, #32]
 80020a2:	4a07      	ldr	r2, [pc, #28]	; (80020c0 <HAL_ADC_MspInit+0xf8>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80020a8:	bf00      	nop
 80020aa:	3728      	adds	r7, #40	; 0x28
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40012400 	.word	0x40012400
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40010800 	.word	0x40010800
 80020bc:	40010c00 	.word	0x40010c00
 80020c0:	20000c28 	.word	0x20000c28
 80020c4:	40020008 	.word	0x40020008

080020c8 <ButtonInitKey>:
#include "main.h"
#include "button.h"

//Button init
void ButtonInitKey(button_t * Key, GPIO_TypeDef *GpioPort, uint16_t GpioPin, uint32_t TimerDebounce, uint32_t TimerLongPressed, uint32_t TimerRepeat)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	4613      	mov	r3, r2
 80020d6:	80fb      	strh	r3, [r7, #6]
	Key->State = IDLE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
	Key->GpioPort = GpioPort;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	605a      	str	r2, [r3, #4]
	Key->GpioPin = GpioPin;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	88fa      	ldrh	r2, [r7, #6]
 80020e8:	811a      	strh	r2, [r3, #8]
	Key->TimerDebounce = TimerDebounce;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	611a      	str	r2, [r3, #16]
	Key->TimerLongPressed = TimerLongPressed;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	615a      	str	r2, [r3, #20]
	Key->TimerRepeat = TimerRepeat;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	69fa      	ldr	r2, [r7, #28]
 80020fa:	619a      	str	r2, [r3, #24]
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr

08002106 <ButtonRegisterPressCallback>:
	Key->TimerRepeat = Miliseconds;
}

//Callbacks
void ButtonRegisterPressCallback(button_t *Key, void *Callback)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
	Key->ButtonPressed = Callback;
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	61da      	str	r2, [r3, #28]
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <ButtonRegisterRepeatCallback>:
{
	Key->ButtonLongPressed = Callback;
}

void ButtonRegisterRepeatCallback(button_t *Key, void *Callback)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
	Key->ButtonRepeat = Callback;
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr

0800213a <ButtonIdleRoutine>:
{
	Key->ButtonRelease = Callback;
}
//States routine
void ButtonIdleRoutine(button_t *Key)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	891b      	ldrh	r3, [r3, #8]
 800214a:	4619      	mov	r1, r3
 800214c:	4610      	mov	r0, r2
 800214e:	f005 fc65 	bl	8007a1c <HAL_GPIO_ReadPin>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d107      	bne.n	8002168 <ButtonIdleRoutine+0x2e>
	{
		Key->LastTick = HAL_GetTick();
 8002158:	f004 f87a 	bl	8006250 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	60da      	str	r2, [r3, #12]
		Key->State = DEBOUNCE;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	701a      	strb	r2, [r3, #0]
	}
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <ButtonDebounceRoutine>:

void ButtonDebounceRoutine(button_t *Key)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - Key->LastTick) >= Key->TimerDebounce)
 8002178:	f004 f86a 	bl	8006250 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	1ad2      	subs	r2, r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	429a      	cmp	r2, r3
 800218a:	d31d      	bcc.n	80021c8 <ButtonDebounceRoutine+0x58>
	{
		if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	891b      	ldrh	r3, [r3, #8]
 8002194:	4619      	mov	r1, r3
 8002196:	4610      	mov	r0, r2
 8002198:	f005 fc40 	bl	8007a1c <HAL_GPIO_ReadPin>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10f      	bne.n	80021c2 <ButtonDebounceRoutine+0x52>
		{
			Key->State = PRESSED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2202      	movs	r2, #2
 80021a6:	701a      	strb	r2, [r3, #0]
			Key->LastTick = HAL_GetTick();
 80021a8:	f004 f852 	bl	8006250 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	60da      	str	r2, [r3, #12]
			if(Key->ButtonPressed != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d006      	beq.n	80021c8 <ButtonDebounceRoutine+0x58>
			{
				Key->ButtonPressed();
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	4798      	blx	r3
		else
		{
			Key->State = IDLE;
		}
	}
}
 80021c0:	e002      	b.n	80021c8 <ButtonDebounceRoutine+0x58>
			Key->State = IDLE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <ButtonPressedRoutine>:

void ButtonPressedRoutine(button_t *Key)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_SET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	891b      	ldrh	r3, [r3, #8]
 80021e0:	4619      	mov	r1, r3
 80021e2:	4610      	mov	r0, r2
 80021e4:	f005 fc1a 	bl	8007a1c <HAL_GPIO_ReadPin>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d103      	bne.n	80021f6 <ButtonPressedRoutine+0x26>
	{
		Key->State = RELEASE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2204      	movs	r2, #4
 80021f2:	701a      	strb	r2, [r3, #0]
		if(Key->ButtonLongPressed != NULL)
		{
			Key->ButtonLongPressed();
		}
	}
}
 80021f4:	e018      	b.n	8002228 <ButtonPressedRoutine+0x58>
	else if(HAL_GetTick() - Key->LastTick >= Key->TimerLongPressed)
 80021f6:	f004 f82b 	bl	8006250 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	1ad2      	subs	r2, r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	429a      	cmp	r2, r3
 8002208:	d30e      	bcc.n	8002228 <ButtonPressedRoutine+0x58>
		Key->State = REPEAT;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2203      	movs	r2, #3
 800220e:	701a      	strb	r2, [r3, #0]
		Key->LastTick = HAL_GetTick();
 8002210:	f004 f81e 	bl	8006250 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	60da      	str	r2, [r3, #12]
		if(Key->ButtonLongPressed != NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d002      	beq.n	8002228 <ButtonPressedRoutine+0x58>
			Key->ButtonLongPressed();
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	4798      	blx	r3
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <ButtonRepeatRoutine>:

void ButtonRepeatRoutine(button_t *Key)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_SET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	891b      	ldrh	r3, [r3, #8]
 8002240:	4619      	mov	r1, r3
 8002242:	4610      	mov	r0, r2
 8002244:	f005 fbea 	bl	8007a1c <HAL_GPIO_ReadPin>
 8002248:	4603      	mov	r3, r0
 800224a:	2b01      	cmp	r3, #1
 800224c:	d103      	bne.n	8002256 <ButtonRepeatRoutine+0x26>
	{
		Key->State = RELEASE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2204      	movs	r2, #4
 8002252:	701a      	strb	r2, [r3, #0]
		if(Key->ButtonRepeat != NULL)
		{
			Key->ButtonRepeat();
		}
	}
}
 8002254:	e015      	b.n	8002282 <ButtonRepeatRoutine+0x52>
	else if(HAL_GetTick() - Key->LastTick >= Key->TimerRepeat)
 8002256:	f003 fffb 	bl	8006250 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	1ad2      	subs	r2, r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	429a      	cmp	r2, r3
 8002268:	d30b      	bcc.n	8002282 <ButtonRepeatRoutine+0x52>
		Key->LastTick = HAL_GetTick();
 800226a:	f003 fff1 	bl	8006250 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	60da      	str	r2, [r3, #12]
		if(Key->ButtonRepeat != NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <ButtonRepeatRoutine+0x52>
			Key->ButtonRepeat();
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	4798      	blx	r3
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <ButtonReleaseRoutine>:

void ButtonReleaseRoutine(button_t *Key)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
	if(Key->ButtonRelease != NULL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <ButtonReleaseRoutine+0x16>
	{
		Key->ButtonRelease();
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229e:	4798      	blx	r3
	}
	Key->State = IDLE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	701a      	strb	r2, [r3, #0]
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <ButtonTask>:

//State machines
void ButtonTask(button_t *Key)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
	switch(Key->State)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d821      	bhi.n	8002304 <ButtonTask+0x54>
 80022c0:	a201      	add	r2, pc, #4	; (adr r2, 80022c8 <ButtonTask+0x18>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	080022dd 	.word	0x080022dd
 80022cc:	080022e5 	.word	0x080022e5
 80022d0:	080022ed 	.word	0x080022ed
 80022d4:	080022f5 	.word	0x080022f5
 80022d8:	080022fd 	.word	0x080022fd
	{
	case IDLE:
		ButtonIdleRoutine(Key);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff2c 	bl	800213a <ButtonIdleRoutine>
		break;
 80022e2:	e00f      	b.n	8002304 <ButtonTask+0x54>

	case DEBOUNCE:
		ButtonDebounceRoutine(Key);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff ff43 	bl	8002170 <ButtonDebounceRoutine>
		break;
 80022ea:	e00b      	b.n	8002304 <ButtonTask+0x54>

	case PRESSED:
		ButtonPressedRoutine(Key);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ff6f 	bl	80021d0 <ButtonPressedRoutine>
		break;
 80022f2:	e007      	b.n	8002304 <ButtonTask+0x54>

	case REPEAT:
		ButtonRepeatRoutine(Key);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ff9b 	bl	8002230 <ButtonRepeatRoutine>
		break;
 80022fa:	e003      	b.n	8002304 <ButtonTask+0x54>

	case RELEASE:
		ButtonReleaseRoutine(Key);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ffc4 	bl	800228a <ButtonReleaseRoutine>
		break;
 8002302:	bf00      	nop
	}
}
 8002304:	bf00      	nop
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_channel1
  */
void MX_DMA_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002312:	4b22      	ldr	r3, [pc, #136]	; (800239c <MX_DMA_Init+0x90>)
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	4a21      	ldr	r2, [pc, #132]	; (800239c <MX_DMA_Init+0x90>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6153      	str	r3, [r2, #20]
 800231e:	4b1f      	ldr	r3, [pc, #124]	; (800239c <MX_DMA_Init+0x90>)
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800232a:	4b1c      	ldr	r3, [pc, #112]	; (800239c <MX_DMA_Init+0x90>)
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	4a1b      	ldr	r2, [pc, #108]	; (800239c <MX_DMA_Init+0x90>)
 8002330:	f043 0302 	orr.w	r3, r3, #2
 8002334:	6153      	str	r3, [r2, #20]
 8002336:	4b19      	ldr	r3, [pc, #100]	; (800239c <MX_DMA_Init+0x90>)
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	603b      	str	r3, [r7, #0]
 8002340:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_channel1 on DMA2_Channel1 */
  hdma_memtomem_dma2_channel1.Instance = DMA2_Channel1;
 8002342:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <MX_DMA_Init+0x94>)
 8002344:	4a17      	ldr	r2, [pc, #92]	; (80023a4 <MX_DMA_Init+0x98>)
 8002346:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8002348:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <MX_DMA_Init+0x94>)
 800234a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800234e:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8002350:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <MX_DMA_Init+0x94>)
 8002352:	2240      	movs	r2, #64	; 0x40
 8002354:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8002356:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <MX_DMA_Init+0x94>)
 8002358:	2280      	movs	r2, #128	; 0x80
 800235a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800235c:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <MX_DMA_Init+0x94>)
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002362:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <MX_DMA_Init+0x94>)
 8002364:	2200      	movs	r2, #0
 8002366:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_channel1.Init.Mode = DMA_NORMAL;
 8002368:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <MX_DMA_Init+0x94>)
 800236a:	2200      	movs	r2, #0
 800236c:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_channel1.Init.Priority = DMA_PRIORITY_LOW;
 800236e:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <MX_DMA_Init+0x94>)
 8002370:	2200      	movs	r2, #0
 8002372:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma2_channel1) != HAL_OK)
 8002374:	480a      	ldr	r0, [pc, #40]	; (80023a0 <MX_DMA_Init+0x94>)
 8002376:	f004 fd69 	bl	8006e4c <HAL_DMA_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_DMA_Init+0x78>
  {
    Error_Handler();
 8002380:	f002 f878 	bl	8004474 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002384:	2200      	movs	r2, #0
 8002386:	2100      	movs	r1, #0
 8002388:	200b      	movs	r0, #11
 800238a:	f004 fd28 	bl	8006dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800238e:	200b      	movs	r0, #11
 8002390:	f004 fd41 	bl	8006e16 <HAL_NVIC_EnableIRQ>

}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000
 80023a0:	20000c6c 	.word	0x20000c6c
 80023a4:	40020408 	.word	0x40020408

080023a8 <ds18b20_read_address>:
#define DS18B20_READ_SCRATCHPAD    0xBE



HAL_StatusTypeDef ds18b20_read_address(uint8_t* rom_code)
{
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t crc;

  if (wire_reset() != HAL_OK)
 80023b0:	f7fe fe60 	bl	8001074 <wire_reset>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <ds18b20_read_address+0x16>
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e021      	b.n	8002402 <ds18b20_read_address+0x5a>

  wire_write(DS18B20_READ_ROM);
 80023be:	2033      	movs	r0, #51	; 0x33
 80023c0:	f7fe feec 	bl	800119c <wire_write>

  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	e009      	b.n	80023de <ds18b20_read_address+0x36>
    rom_code[i] = wire_read();
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	18d4      	adds	r4, r2, r3
 80023d0:	f7fe fea2 	bl	8001118 <wire_read>
 80023d4:	4603      	mov	r3, r0
 80023d6:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	3301      	adds	r3, #1
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b07      	cmp	r3, #7
 80023e2:	ddf2      	ble.n	80023ca <ds18b20_read_address+0x22>

  crc = wire_crc(rom_code, DS18B20_ROM_CODE_SIZE - 1);
 80023e4:	2107      	movs	r1, #7
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7fe ff1f 	bl	800122a <wire_crc>
 80023ec:	4603      	mov	r3, r0
 80023ee:	72fb      	strb	r3, [r7, #11]
  if (rom_code[DS18B20_ROM_CODE_SIZE - 1] == crc)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3307      	adds	r3, #7
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	7afa      	ldrb	r2, [r7, #11]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d101      	bne.n	8002400 <ds18b20_read_address+0x58>
    return HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	e000      	b.n	8002402 <ds18b20_read_address+0x5a>
  else
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
}
 8002402:	4618      	mov	r0, r3
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	bd90      	pop	{r4, r7, pc}

0800240a <send_cmd>:

static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b084      	sub	sp, #16
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	460b      	mov	r3, r1
 8002414:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 8002416:	f7fe fe2d 	bl	8001074 <wire_reset>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <send_cmd+0x1a>
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e01e      	b.n	8002462 <send_cmd+0x58>

  if (!rom_code) {
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d103      	bne.n	8002432 <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 800242a:	20cc      	movs	r0, #204	; 0xcc
 800242c:	f7fe feb6 	bl	800119c <wire_write>
 8002430:	e012      	b.n	8002458 <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 8002432:	2055      	movs	r0, #85	; 0x55
 8002434:	f7fe feb2 	bl	800119c <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	e009      	b.n	8002452 <send_cmd+0x48>
      wire_write(rom_code[i]);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	4413      	add	r3, r2
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe fea8 	bl	800119c <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	3301      	adds	r3, #1
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b07      	cmp	r3, #7
 8002456:	ddf2      	ble.n	800243e <send_cmd+0x34>
  }
  wire_write(cmd);
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe fe9e 	bl	800119c <wire_write>
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <ds18b20_start_measure>:

HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 8002472:	2144      	movs	r1, #68	; 0x44
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ffc8 	bl	800240a <send_cmd>
 800247a:	4603      	mov	r3, r0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <ds18b20_read_scratchpad>:

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 8002484:	b590      	push	{r4, r7, lr}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 800248e:	21be      	movs	r1, #190	; 0xbe
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7ff ffba 	bl	800240a <send_cmd>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e01e      	b.n	80024de <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 80024a0:	2300      	movs	r3, #0
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	e009      	b.n	80024ba <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	18d4      	adds	r4, r2, r3
 80024ac:	f7fe fe34 	bl	8001118 <wire_read>
 80024b0:	4603      	mov	r3, r0
 80024b2:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	3301      	adds	r3, #1
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b08      	cmp	r3, #8
 80024be:	ddf2      	ble.n	80024a6 <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 80024c0:	2108      	movs	r1, #8
 80024c2:	6838      	ldr	r0, [r7, #0]
 80024c4:	f7fe feb1 	bl	800122a <wire_crc>
 80024c8:	4603      	mov	r3, r0
 80024ca:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	3308      	adds	r3, #8
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	7afa      	ldrb	r2, [r7, #11]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d101      	bne.n	80024dc <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	e000      	b.n	80024de <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd90      	pop	{r4, r7, pc}

080024e6 <ds18b20_get_temp_wo_fp>:

  return temp / 16.0f;
}

uint32_t ds18b20_get_temp_wo_fp(const uint8_t* rom_code)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 80024ee:	f107 030c 	add.w	r3, r7, #12
 80024f2:	4619      	mov	r1, r3
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ffc5 	bl	8002484 <ds18b20_read_scratchpad>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <ds18b20_get_temp_wo_fp+0x20>
    return 8500;
 8002500:	f242 1334 	movw	r3, #8500	; 0x2134
 8002504:	e00b      	b.n	800251e <ds18b20_get_temp_wo_fp+0x38>
 8002506:	89bb      	ldrh	r3, [r7, #12]

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 8002508:	817b      	strh	r3, [r7, #10]

  return (temp * 100) / 16;
 800250a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800250e:	461a      	mov	r2, r3
 8002510:	2364      	movs	r3, #100	; 0x64
 8002512:	fb02 f303 	mul.w	r3, r2, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	da00      	bge.n	800251c <ds18b20_get_temp_wo_fp+0x36>
 800251a:	330f      	adds	r3, #15
 800251c:	111b      	asrs	r3, r3, #4
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08c      	sub	sp, #48	; 0x30
 800252c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252e:	f107 0320 	add.w	r3, r7, #32
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	609a      	str	r2, [r3, #8]
 800253a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800253c:	4b72      	ldr	r3, [pc, #456]	; (8002708 <MX_GPIO_Init+0x1e0>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	4a71      	ldr	r2, [pc, #452]	; (8002708 <MX_GPIO_Init+0x1e0>)
 8002542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002546:	6193      	str	r3, [r2, #24]
 8002548:	4b6f      	ldr	r3, [pc, #444]	; (8002708 <MX_GPIO_Init+0x1e0>)
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002554:	4b6c      	ldr	r3, [pc, #432]	; (8002708 <MX_GPIO_Init+0x1e0>)
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	4a6b      	ldr	r2, [pc, #428]	; (8002708 <MX_GPIO_Init+0x1e0>)
 800255a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800255e:	6193      	str	r3, [r2, #24]
 8002560:	4b69      	ldr	r3, [pc, #420]	; (8002708 <MX_GPIO_Init+0x1e0>)
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002568:	61bb      	str	r3, [r7, #24]
 800256a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800256c:	4b66      	ldr	r3, [pc, #408]	; (8002708 <MX_GPIO_Init+0x1e0>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	4a65      	ldr	r2, [pc, #404]	; (8002708 <MX_GPIO_Init+0x1e0>)
 8002572:	f043 0310 	orr.w	r3, r3, #16
 8002576:	6193      	str	r3, [r2, #24]
 8002578:	4b63      	ldr	r3, [pc, #396]	; (8002708 <MX_GPIO_Init+0x1e0>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002584:	4b60      	ldr	r3, [pc, #384]	; (8002708 <MX_GPIO_Init+0x1e0>)
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	4a5f      	ldr	r2, [pc, #380]	; (8002708 <MX_GPIO_Init+0x1e0>)
 800258a:	f043 0304 	orr.w	r3, r3, #4
 800258e:	6193      	str	r3, [r2, #24]
 8002590:	4b5d      	ldr	r3, [pc, #372]	; (8002708 <MX_GPIO_Init+0x1e0>)
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800259c:	4b5a      	ldr	r3, [pc, #360]	; (8002708 <MX_GPIO_Init+0x1e0>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	4a59      	ldr	r2, [pc, #356]	; (8002708 <MX_GPIO_Init+0x1e0>)
 80025a2:	f043 0308 	orr.w	r3, r3, #8
 80025a6:	6193      	str	r3, [r2, #24]
 80025a8:	4b57      	ldr	r3, [pc, #348]	; (8002708 <MX_GPIO_Init+0x1e0>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80025b4:	4b54      	ldr	r3, [pc, #336]	; (8002708 <MX_GPIO_Init+0x1e0>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	4a53      	ldr	r2, [pc, #332]	; (8002708 <MX_GPIO_Init+0x1e0>)
 80025ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025be:	6193      	str	r3, [r2, #24]
 80025c0:	4b51      	ldr	r3, [pc, #324]	; (8002708 <MX_GPIO_Init+0x1e0>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025cc:	4b4e      	ldr	r3, [pc, #312]	; (8002708 <MX_GPIO_Init+0x1e0>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	4a4d      	ldr	r2, [pc, #308]	; (8002708 <MX_GPIO_Init+0x1e0>)
 80025d2:	f043 0320 	orr.w	r3, r3, #32
 80025d6:	6193      	str	r3, [r2, #24]
 80025d8:	4b4b      	ldr	r3, [pc, #300]	; (8002708 <MX_GPIO_Init+0x1e0>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f003 0320 	and.w	r3, r3, #32
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80025e4:	2200      	movs	r2, #0
 80025e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80025ea:	4848      	ldr	r0, [pc, #288]	; (800270c <MX_GPIO_Init+0x1e4>)
 80025ec:	f005 fa2d 	bl	8007a4a <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, COMM_PC_LED_Pin|COMM_CAN_LED_Pin|COMM_CAN_CHECK_LED_Pin|COMM_UART_LED_Pin
 80025f0:	2200      	movs	r2, #0
 80025f2:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80025f6:	4846      	ldr	r0, [pc, #280]	; (8002710 <MX_GPIO_Init+0x1e8>)
 80025f8:	f005 fa27 	bl	8007a4a <HAL_GPIO_WritePin>
                          |COMM_RS485_LED_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_TXE_GPIO_Port, RS485_TXE_Pin, GPIO_PIN_RESET);
 80025fc:	2200      	movs	r2, #0
 80025fe:	2110      	movs	r1, #16
 8002600:	4844      	ldr	r0, [pc, #272]	; (8002714 <MX_GPIO_Init+0x1ec>)
 8002602:	f005 fa22 	bl	8007a4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WC_EEPROM_GPIO_Port, WC_EEPROM_Pin, GPIO_PIN_RESET);
 8002606:	2200      	movs	r2, #0
 8002608:	2120      	movs	r1, #32
 800260a:	4843      	ldr	r0, [pc, #268]	; (8002718 <MX_GPIO_Init+0x1f0>)
 800260c:	f005 fa1d 	bl	8007a4a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002610:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002614:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002616:	2301      	movs	r3, #1
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261e:	2302      	movs	r3, #2
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002622:	f107 0320 	add.w	r3, r7, #32
 8002626:	4619      	mov	r1, r3
 8002628:	4838      	ldr	r0, [pc, #224]	; (800270c <MX_GPIO_Init+0x1e4>)
 800262a:	f005 f863 	bl	80076f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800262e:	2304      	movs	r3, #4
 8002630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002632:	2300      	movs	r3, #0
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002636:	2301      	movs	r3, #1
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800263a:	f107 0320 	add.w	r3, r7, #32
 800263e:	4619      	mov	r1, r3
 8002640:	4833      	ldr	r0, [pc, #204]	; (8002710 <MX_GPIO_Init+0x1e8>)
 8002642:	f005 f857 	bl	80076f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin */
  GPIO_InitStruct.Pin = COMM_PC_LED_Pin|COMM_CAN_LED_Pin|COMM_CAN_CHECK_LED_Pin|COMM_UART_LED_Pin
 8002646:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800264a:	623b      	str	r3, [r7, #32]
                          |COMM_RS485_LED_Pin|ERROR_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800264c:	2301      	movs	r3, #1
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002654:	2302      	movs	r3, #2
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002658:	f107 0320 	add.w	r3, r7, #32
 800265c:	4619      	mov	r1, r3
 800265e:	482c      	ldr	r0, [pc, #176]	; (8002710 <MX_GPIO_Init+0x1e8>)
 8002660:	f005 f848 	bl	80076f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = CHECK_WIRE_1_Pin|CHECK_WIRE_2_Pin|CHECK_WIRE_3_Pin|CHECK_WIRE_4_Pin
 8002664:	f240 330f 	movw	r3, #783	; 0x30f
 8002668:	623b      	str	r3, [r7, #32]
                          |BUTTON_DOWN_Pin|BUTTON_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800266a:	2300      	movs	r3, #0
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002672:	f107 0320 	add.w	r3, r7, #32
 8002676:	4619      	mov	r1, r3
 8002678:	4828      	ldr	r0, [pc, #160]	; (800271c <MX_GPIO_Init+0x1f4>)
 800267a:	f005 f83b 	bl	80076f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_OPEN_Pin;
 800267e:	2301      	movs	r3, #1
 8002680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SW_OPEN_GPIO_Port, &GPIO_InitStruct);
 800268a:	f107 0320 	add.w	r3, r7, #32
 800268e:	4619      	mov	r1, r3
 8002690:	4820      	ldr	r0, [pc, #128]	; (8002714 <MX_GPIO_Init+0x1ec>)
 8002692:	f005 f82f 	bl	80076f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RS485_TXE_Pin;
 8002696:	2310      	movs	r3, #16
 8002698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800269a:	2301      	movs	r3, #1
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a2:	2302      	movs	r3, #2
 80026a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RS485_TXE_GPIO_Port, &GPIO_InitStruct);
 80026a6:	f107 0320 	add.w	r3, r7, #32
 80026aa:	4619      	mov	r1, r3
 80026ac:	4819      	ldr	r0, [pc, #100]	; (8002714 <MX_GPIO_Init+0x1ec>)
 80026ae:	f005 f821 	bl	80076f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80026b2:	230f      	movs	r3, #15
 80026b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026b6:	2300      	movs	r3, #0
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026be:	f107 0320 	add.w	r3, r7, #32
 80026c2:	4619      	mov	r1, r3
 80026c4:	4816      	ldr	r0, [pc, #88]	; (8002720 <MX_GPIO_Init+0x1f8>)
 80026c6:	f005 f815 	bl	80076f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80026ca:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80026ce:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026d0:	2300      	movs	r3, #0
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026d4:	2301      	movs	r3, #1
 80026d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026d8:	f107 0320 	add.w	r3, r7, #32
 80026dc:	4619      	mov	r1, r3
 80026de:	4810      	ldr	r0, [pc, #64]	; (8002720 <MX_GPIO_Init+0x1f8>)
 80026e0:	f005 f808 	bl	80076f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WC_EEPROM_Pin;
 80026e4:	2320      	movs	r3, #32
 80026e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e8:	2301      	movs	r3, #1
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f0:	2302      	movs	r3, #2
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(WC_EEPROM_GPIO_Port, &GPIO_InitStruct);
 80026f4:	f107 0320 	add.w	r3, r7, #32
 80026f8:	4619      	mov	r1, r3
 80026fa:	4807      	ldr	r0, [pc, #28]	; (8002718 <MX_GPIO_Init+0x1f0>)
 80026fc:	f004 fffa 	bl	80076f4 <HAL_GPIO_Init>

}
 8002700:	bf00      	nop
 8002702:	3730      	adds	r7, #48	; 0x30
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40021000 	.word	0x40021000
 800270c:	40011800 	.word	0x40011800
 8002710:	40011c00 	.word	0x40011c00
 8002714:	40010800 	.word	0x40010800
 8002718:	40010c00 	.word	0x40010c00
 800271c:	40011000 	.word	0x40011000
 8002720:	40012000 	.word	0x40012000

08002724 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002728:	4b12      	ldr	r3, [pc, #72]	; (8002774 <MX_I2C1_Init+0x50>)
 800272a:	4a13      	ldr	r2, [pc, #76]	; (8002778 <MX_I2C1_Init+0x54>)
 800272c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800272e:	4b11      	ldr	r3, [pc, #68]	; (8002774 <MX_I2C1_Init+0x50>)
 8002730:	4a12      	ldr	r2, [pc, #72]	; (800277c <MX_I2C1_Init+0x58>)
 8002732:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002734:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <MX_I2C1_Init+0x50>)
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800273a:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <MX_I2C1_Init+0x50>)
 800273c:	2200      	movs	r2, #0
 800273e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <MX_I2C1_Init+0x50>)
 8002742:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002746:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002748:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <MX_I2C1_Init+0x50>)
 800274a:	2200      	movs	r2, #0
 800274c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <MX_I2C1_Init+0x50>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002754:	4b07      	ldr	r3, [pc, #28]	; (8002774 <MX_I2C1_Init+0x50>)
 8002756:	2200      	movs	r2, #0
 8002758:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <MX_I2C1_Init+0x50>)
 800275c:	2200      	movs	r2, #0
 800275e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002760:	4804      	ldr	r0, [pc, #16]	; (8002774 <MX_I2C1_Init+0x50>)
 8002762:	f005 f98b 	bl	8007a7c <HAL_I2C_Init>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800276c:	f001 fe82 	bl	8004474 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20000cb0 	.word	0x20000cb0
 8002778:	40005400 	.word	0x40005400
 800277c:	00061a80 	.word	0x00061a80

08002780 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 0310 	add.w	r3, r7, #16
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a3b      	ldr	r2, [pc, #236]	; (8002888 <HAL_I2C_MspInit+0x108>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d16f      	bne.n	8002880 <HAL_I2C_MspInit+0x100>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a0:	4b3a      	ldr	r3, [pc, #232]	; (800288c <HAL_I2C_MspInit+0x10c>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	4a39      	ldr	r2, [pc, #228]	; (800288c <HAL_I2C_MspInit+0x10c>)
 80027a6:	f043 0308 	orr.w	r3, r3, #8
 80027aa:	6193      	str	r3, [r2, #24]
 80027ac:	4b37      	ldr	r3, [pc, #220]	; (800288c <HAL_I2C_MspInit+0x10c>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027b8:	23c0      	movs	r3, #192	; 0xc0
 80027ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027bc:	2312      	movs	r3, #18
 80027be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027c0:	2303      	movs	r3, #3
 80027c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c4:	f107 0310 	add.w	r3, r7, #16
 80027c8:	4619      	mov	r1, r3
 80027ca:	4831      	ldr	r0, [pc, #196]	; (8002890 <HAL_I2C_MspInit+0x110>)
 80027cc:	f004 ff92 	bl	80076f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027d0:	4b2e      	ldr	r3, [pc, #184]	; (800288c <HAL_I2C_MspInit+0x10c>)
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	4a2d      	ldr	r2, [pc, #180]	; (800288c <HAL_I2C_MspInit+0x10c>)
 80027d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027da:	61d3      	str	r3, [r2, #28]
 80027dc:	4b2b      	ldr	r3, [pc, #172]	; (800288c <HAL_I2C_MspInit+0x10c>)
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80027e8:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <HAL_I2C_MspInit+0x114>)
 80027ea:	4a2b      	ldr	r2, [pc, #172]	; (8002898 <HAL_I2C_MspInit+0x118>)
 80027ec:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027ee:	4b29      	ldr	r3, [pc, #164]	; (8002894 <HAL_I2C_MspInit+0x114>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027f4:	4b27      	ldr	r3, [pc, #156]	; (8002894 <HAL_I2C_MspInit+0x114>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027fa:	4b26      	ldr	r3, [pc, #152]	; (8002894 <HAL_I2C_MspInit+0x114>)
 80027fc:	2280      	movs	r2, #128	; 0x80
 80027fe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002800:	4b24      	ldr	r3, [pc, #144]	; (8002894 <HAL_I2C_MspInit+0x114>)
 8002802:	2200      	movs	r2, #0
 8002804:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002806:	4b23      	ldr	r3, [pc, #140]	; (8002894 <HAL_I2C_MspInit+0x114>)
 8002808:	2200      	movs	r2, #0
 800280a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800280c:	4b21      	ldr	r3, [pc, #132]	; (8002894 <HAL_I2C_MspInit+0x114>)
 800280e:	2200      	movs	r2, #0
 8002810:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_I2C_MspInit+0x114>)
 8002814:	2200      	movs	r2, #0
 8002816:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002818:	481e      	ldr	r0, [pc, #120]	; (8002894 <HAL_I2C_MspInit+0x114>)
 800281a:	f004 fb17 	bl	8006e4c <HAL_DMA_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8002824:	f001 fe26 	bl	8004474 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a1a      	ldr	r2, [pc, #104]	; (8002894 <HAL_I2C_MspInit+0x114>)
 800282c:	639a      	str	r2, [r3, #56]	; 0x38
 800282e:	4a19      	ldr	r2, [pc, #100]	; (8002894 <HAL_I2C_MspInit+0x114>)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8002834:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_I2C_MspInit+0x11c>)
 8002836:	4a1a      	ldr	r2, [pc, #104]	; (80028a0 <HAL_I2C_MspInit+0x120>)
 8002838:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800283a:	4b18      	ldr	r3, [pc, #96]	; (800289c <HAL_I2C_MspInit+0x11c>)
 800283c:	2210      	movs	r2, #16
 800283e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002840:	4b16      	ldr	r3, [pc, #88]	; (800289c <HAL_I2C_MspInit+0x11c>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002846:	4b15      	ldr	r3, [pc, #84]	; (800289c <HAL_I2C_MspInit+0x11c>)
 8002848:	2280      	movs	r2, #128	; 0x80
 800284a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800284c:	4b13      	ldr	r3, [pc, #76]	; (800289c <HAL_I2C_MspInit+0x11c>)
 800284e:	2200      	movs	r2, #0
 8002850:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002852:	4b12      	ldr	r3, [pc, #72]	; (800289c <HAL_I2C_MspInit+0x11c>)
 8002854:	2200      	movs	r2, #0
 8002856:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002858:	4b10      	ldr	r3, [pc, #64]	; (800289c <HAL_I2C_MspInit+0x11c>)
 800285a:	2200      	movs	r2, #0
 800285c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800285e:	4b0f      	ldr	r3, [pc, #60]	; (800289c <HAL_I2C_MspInit+0x11c>)
 8002860:	2200      	movs	r2, #0
 8002862:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002864:	480d      	ldr	r0, [pc, #52]	; (800289c <HAL_I2C_MspInit+0x11c>)
 8002866:	f004 faf1 	bl	8006e4c <HAL_DMA_Init>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 8002870:	f001 fe00 	bl	8004474 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a09      	ldr	r2, [pc, #36]	; (800289c <HAL_I2C_MspInit+0x11c>)
 8002878:	635a      	str	r2, [r3, #52]	; 0x34
 800287a:	4a08      	ldr	r2, [pc, #32]	; (800289c <HAL_I2C_MspInit+0x11c>)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002880:	bf00      	nop
 8002882:	3720      	adds	r7, #32
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40005400 	.word	0x40005400
 800288c:	40021000 	.word	0x40021000
 8002890:	40010c00 	.word	0x40010c00
 8002894:	20000d04 	.word	0x20000d04
 8002898:	40020080 	.word	0x40020080
 800289c:	20000d48 	.word	0x20000d48
 80028a0:	4002006c 	.word	0x4002006c

080028a4 <LedBlinkInit>:

#include "main.h"
#include "led_blink.h"

void LedBlinkInit(blink_t *BlinkLed, GPIO_TypeDef *GpioPort, uint16_t GpioPin, uint16_t LightTime)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	4611      	mov	r1, r2
 80028b0:	461a      	mov	r2, r3
 80028b2:	460b      	mov	r3, r1
 80028b4:	80fb      	strh	r3, [r7, #6]
 80028b6:	4613      	mov	r3, r2
 80028b8:	80bb      	strh	r3, [r7, #4]
	BlinkLed -> GpioPort = GpioPort;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	605a      	str	r2, [r3, #4]
	BlinkLed -> GpioPin  = GpioPin;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	88fa      	ldrh	r2, [r7, #6]
 80028c4:	811a      	strh	r2, [r3, #8]
	BlinkLed -> LightTime = LightTime;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	88ba      	ldrh	r2, [r7, #4]
 80028ca:	815a      	strh	r2, [r3, #10]
}
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr

080028d6 <LedBlinkOne>:

void LedBlinkOne(blink_t *BlinkLed)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
	BlinkLed -> LastTick = HAL_GetTick();
 80028de:	f003 fcb7 	bl	8006250 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(BlinkLed->GpioPort, BlinkLed->GpioPin, SET);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6858      	ldr	r0, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	891b      	ldrh	r3, [r3, #8]
 80028f0:	2201      	movs	r2, #1
 80028f2:	4619      	mov	r1, r3
 80028f4:	f005 f8a9 	bl	8007a4a <HAL_GPIO_WritePin>
}
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <LedBlinkTask>:

void LedBlinkTask(blink_t *BlinkLed)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
	if(HAL_GetTick() - BlinkLed->LastTick >= BlinkLed->LightTime)
 8002908:	f003 fca2 	bl	8006250 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	8952      	ldrh	r2, [r2, #10]
 8002918:	4293      	cmp	r3, r2
 800291a:	d307      	bcc.n	800292c <LedBlinkTask+0x2c>
	{
		HAL_GPIO_WritePin(BlinkLed->GpioPort, BlinkLed->GpioPin, RESET);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6858      	ldr	r0, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	891b      	ldrh	r3, [r3, #8]
 8002924:	2200      	movs	r2, #0
 8002926:	4619      	mov	r1, r3
 8002928:	f005 f88f 	bl	8007a4a <HAL_GPIO_WritePin>
	}
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800293a:	f003 fc31 	bl	80061a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800293e:	f000 f925 	bl	8002b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002942:	f7ff fdf1 	bl	8002528 <MX_GPIO_Init>
  MX_DMA_Init();
 8002946:	f7ff fce1 	bl	800230c <MX_DMA_Init>
  MX_USART3_UART_Init();
 800294a:	f003 fb25 	bl	8005f98 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800294e:	f7ff fee9 	bl	8002724 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8002952:	f00f fbe5 	bl	8012120 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8002956:	f7ff facd 	bl	8001ef4 <MX_ADC1_Init>
  MX_TIM3_Init();
 800295a:	f003 f85f 	bl	8005a1c <MX_TIM3_Init>
  MX_TIM4_Init();
 800295e:	f003 f8d5 	bl	8005b0c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002962:	f003 fac5 	bl	8005ef0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002966:	f003 faed 	bl	8005f44 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 800296a:	f003 f969 	bl	8005c40 <MX_TIM5_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800296e:	f000 f96c 	bl	8002c4a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  if(SSD1306_Init(&hi2c1, &hdma_memtomem_dma2_channel1) != HAL_OK) ERROR_OLED;
 8002972:	496a      	ldr	r1, [pc, #424]	; (8002b1c <main+0x1e8>)
 8002974:	486a      	ldr	r0, [pc, #424]	; (8002b20 <main+0x1ec>)
 8002976:	f002 fe75 	bl	8005664 <SSD1306_Init>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d004      	beq.n	800298a <main+0x56>
 8002980:	4a68      	ldr	r2, [pc, #416]	; (8002b24 <main+0x1f0>)
 8002982:	7813      	ldrb	r3, [r2, #0]
 8002984:	f043 0302 	orr.w	r3, r3, #2
 8002988:	7013      	strb	r3, [r2, #0]

  OldTick500ms = HAL_GetTick();
 800298a:	f003 fc61 	bl	8006250 <HAL_GetTick>
 800298e:	4603      	mov	r3, r0
 8002990:	4a65      	ldr	r2, [pc, #404]	; (8002b28 <main+0x1f4>)
 8002992:	6013      	str	r3, [r2, #0]
  OldTick100ms = HAL_GetTick();
 8002994:	f003 fc5c 	bl	8006250 <HAL_GetTick>
 8002998:	4603      	mov	r3, r0
 800299a:	4a64      	ldr	r2, [pc, #400]	; (8002b2c <main+0x1f8>)
 800299c:	6013      	str	r3, [r2, #0]
  OldTick50ms = HAL_GetTick();
 800299e:	f003 fc57 	bl	8006250 <HAL_GetTick>
 80029a2:	4603      	mov	r3, r0
 80029a4:	4a62      	ldr	r2, [pc, #392]	; (8002b30 <main+0x1fc>)
 80029a6:	6013      	str	r3, [r2, #0]
  OldTick10000ms = HAL_GetTick();
 80029a8:	f003 fc52 	bl	8006250 <HAL_GetTick>
 80029ac:	4603      	mov	r3, r0
 80029ae:	4a61      	ldr	r2, [pc, #388]	; (8002b34 <main+0x200>)
 80029b0:	6013      	str	r3, [r2, #0]

  if (ds18b20_read_address(ds1) != HAL_OK)
 80029b2:	4861      	ldr	r0, [pc, #388]	; (8002b38 <main+0x204>)
 80029b4:	f7ff fcf8 	bl	80023a8 <ds18b20_read_address>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d004      	beq.n	80029c8 <main+0x94>
  {
    ERROR_DS;
 80029be:	4a59      	ldr	r2, [pc, #356]	; (8002b24 <main+0x1f0>)
 80029c0:	7813      	ldrb	r3, [r2, #0]
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	7013      	strb	r3, [r2, #0]
  }

  ButtonInitKey(&KeyUp, BUTTON_UP_GPIO_Port, BUTTON_UP_Pin, 20, 1000, 350);
 80029c8:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80029cc:	9301      	str	r3, [sp, #4]
 80029ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	2314      	movs	r3, #20
 80029d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029da:	4958      	ldr	r1, [pc, #352]	; (8002b3c <main+0x208>)
 80029dc:	4858      	ldr	r0, [pc, #352]	; (8002b40 <main+0x20c>)
 80029de:	f7ff fb73 	bl	80020c8 <ButtonInitKey>
  ButtonInitKey(&KeyDown, BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin, 20, 1000, 350);
 80029e2:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80029e6:	9301      	str	r3, [sp, #4]
 80029e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	2314      	movs	r3, #20
 80029f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029f4:	4951      	ldr	r1, [pc, #324]	; (8002b3c <main+0x208>)
 80029f6:	4853      	ldr	r0, [pc, #332]	; (8002b44 <main+0x210>)
 80029f8:	f7ff fb66 	bl	80020c8 <ButtonInitKey>

  LedBlinkInit(&CommPcUsb, COMM_PC_LED_GPIO_Port, COMM_PC_LED_Pin, 20);
 80029fc:	2314      	movs	r3, #20
 80029fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a02:	4951      	ldr	r1, [pc, #324]	; (8002b48 <main+0x214>)
 8002a04:	4851      	ldr	r0, [pc, #324]	; (8002b4c <main+0x218>)
 8002a06:	f7ff ff4d 	bl	80028a4 <LedBlinkInit>
  LedBlinkInit(&ErrorBlink, ERROR_LED_GPIO_Port, ERROR_LED_Pin, 35);
 8002a0a:	2323      	movs	r3, #35	; 0x23
 8002a0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a10:	494d      	ldr	r1, [pc, #308]	; (8002b48 <main+0x214>)
 8002a12:	484f      	ldr	r0, [pc, #316]	; (8002b50 <main+0x21c>)
 8002a14:	f7ff ff46 	bl	80028a4 <LedBlinkInit>

  ShowMenu();
 8002a18:	f000 fd00 	bl	800341c <ShowMenu>


  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	484d      	ldr	r0, [pc, #308]	; (8002b54 <main+0x220>)
 8002a20:	f00a fc28 	bl	800d274 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002a24:	2104      	movs	r1, #4
 8002a26:	484b      	ldr	r0, [pc, #300]	; (8002b54 <main+0x220>)
 8002a28:	f00a fc24 	bl	800d274 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002a2c:	2108      	movs	r1, #8
 8002a2e:	4849      	ldr	r0, [pc, #292]	; (8002b54 <main+0x220>)
 8002a30:	f00a fc20 	bl	800d274 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002a34:	210c      	movs	r1, #12
 8002a36:	4847      	ldr	r0, [pc, #284]	; (8002b54 <main+0x220>)
 8002a38:	f00a fc1c 	bl	800d274 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4846      	ldr	r0, [pc, #280]	; (8002b58 <main+0x224>)
 8002a40:	f00a fc18 	bl	800d274 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8002a44:	2104      	movs	r1, #4
 8002a46:	4845      	ldr	r0, [pc, #276]	; (8002b5c <main+0x228>)
 8002a48:	f00a fc14 	bl	800d274 <HAL_TIM_PWM_Start>

  LedLightInit(&Logo, &htim3, TIM_CHANNEL_1, 20);
 8002a4c:	2314      	movs	r3, #20
 8002a4e:	2200      	movs	r2, #0
 8002a50:	4941      	ldr	r1, [pc, #260]	; (8002b58 <main+0x224>)
 8002a52:	4843      	ldr	r0, [pc, #268]	; (8002b60 <main+0x22c>)
 8002a54:	f000 fcc8 	bl	80033e8 <LedLightInit>
  LedLightInit(&Light, &htim5, TIM_CHANNEL_2, 20);
 8002a58:	2314      	movs	r3, #20
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	493f      	ldr	r1, [pc, #252]	; (8002b5c <main+0x228>)
 8002a5e:	4841      	ldr	r0, [pc, #260]	; (8002b64 <main+0x230>)
 8002a60:	f000 fcc2 	bl	80033e8 <LedLightInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  m24cxxInit(&M24C02, &hi2c1, EEPROM_ADDRES, M24C02_MEM_SIZE, WC_EEPROM_GPIO_Port, WC_EEPROM_Pin);
 8002a64:	2320      	movs	r3, #32
 8002a66:	9301      	str	r3, [sp, #4]
 8002a68:	4b3f      	ldr	r3, [pc, #252]	; (8002b68 <main+0x234>)
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a70:	2250      	movs	r2, #80	; 0x50
 8002a72:	492b      	ldr	r1, [pc, #172]	; (8002b20 <main+0x1ec>)
 8002a74:	483d      	ldr	r0, [pc, #244]	; (8002b6c <main+0x238>)
 8002a76:	f7ff f915 	bl	8001ca4 <m24cxxInit>

  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)Measurements.Adc1Value, 4);
 8002a7a:	2204      	movs	r2, #4
 8002a7c:	493c      	ldr	r1, [pc, #240]	; (8002b70 <main+0x23c>)
 8002a7e:	483d      	ldr	r0, [pc, #244]	; (8002b74 <main+0x240>)
 8002a80:	f003 fd1c 	bl	80064bc <HAL_ADC_Start_DMA>

  EepromInit(&M24C02);
 8002a84:	4839      	ldr	r0, [pc, #228]	; (8002b6c <main+0x238>)
 8002a86:	f7fe fbf1 	bl	800126c <EepromInit>
  EepromRecovery();
 8002a8a:	f7fe fc13 	bl	80012b4 <EepromRecovery>

  while (1)
  {


	  if(LineCounter)
 8002a8e:	4b3a      	ldr	r3, [pc, #232]	; (8002b78 <main+0x244>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00c      	beq.n	8002ab0 <main+0x17c>
	  {
		  Parser_TakeLine(&ReceiveBuffer, ReceivedData);
 8002a96:	4939      	ldr	r1, [pc, #228]	; (8002b7c <main+0x248>)
 8002a98:	4839      	ldr	r0, [pc, #228]	; (8002b80 <main+0x24c>)
 8002a9a:	f002 fbc6 	bl	800522a <Parser_TakeLine>

		  LineCounter--;
 8002a9e:	4b36      	ldr	r3, [pc, #216]	; (8002b78 <main+0x244>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4b34      	ldr	r3, [pc, #208]	; (8002b78 <main+0x244>)
 8002aa8:	701a      	strb	r2, [r3, #0]

		  Parser_parse(ReceivedData);
 8002aaa:	4834      	ldr	r0, [pc, #208]	; (8002b7c <main+0x248>)
 8002aac:	f002 fbe6 	bl	800527c <Parser_parse>
	  }
	  if(DataToTransmit > 0 )
 8002ab0:	4b34      	ldr	r3, [pc, #208]	; (8002b84 <main+0x250>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d013      	beq.n	8002ae0 <main+0x1ac>
	  {
		  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8002ab8:	4b33      	ldr	r3, [pc, #204]	; (8002b88 <main+0x254>)
 8002aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002abe:	607b      	str	r3, [r7, #4]
		  if (hcdc->TxState == 0)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10a      	bne.n	8002ae0 <main+0x1ac>
		  {
			  LedBlinkOne(&CommPcUsb);
 8002aca:	4820      	ldr	r0, [pc, #128]	; (8002b4c <main+0x218>)
 8002acc:	f7ff ff03 	bl	80028d6 <LedBlinkOne>
			  UsbTransmitTask();
 8002ad0:	f001 fca6 	bl	8004420 <UsbTransmitTask>

			  DataToTransmit--;
 8002ad4:	4b2b      	ldr	r3, [pc, #172]	; (8002b84 <main+0x250>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	4b29      	ldr	r3, [pc, #164]	; (8002b84 <main+0x250>)
 8002ade:	701a      	strb	r2, [r3, #0]
		  }

	  }


	  IntervalFunc100ms();
 8002ae0:	f001 fb24 	bl	800412c <IntervalFunc100ms>
	  IntervalFunc500ms();
 8002ae4:	f001 faca 	bl	800407c <IntervalFunc500ms>
	  IntervalFunc50ms();
 8002ae8:	f001 fbd0 	bl	800428c <IntervalFunc50ms>
	  IntervalFunc10000ms();
 8002aec:	f001 fa92 	bl	8004014 <IntervalFunc10000ms>

	  ButtonTask(&KeyDown);
 8002af0:	4814      	ldr	r0, [pc, #80]	; (8002b44 <main+0x210>)
 8002af2:	f7ff fbdd 	bl	80022b0 <ButtonTask>
	  ButtonTask(&KeyUp);
 8002af6:	4812      	ldr	r0, [pc, #72]	; (8002b40 <main+0x20c>)
 8002af8:	f7ff fbda 	bl	80022b0 <ButtonTask>

	  LedBlinkTask(&CommPcUsb);
 8002afc:	4813      	ldr	r0, [pc, #76]	; (8002b4c <main+0x218>)
 8002afe:	f7ff feff 	bl	8002900 <LedBlinkTask>
	  LedBlinkTask(&ErrorBlink);
 8002b02:	4813      	ldr	r0, [pc, #76]	; (8002b50 <main+0x21c>)
 8002b04:	f7ff fefc 	bl	8002900 <LedBlinkTask>

	  MeasurementConversion();
 8002b08:	f001 fa2e 	bl	8003f68 <MeasurementConversion>

	  LedLightTask(&Logo);
 8002b0c:	4814      	ldr	r0, [pc, #80]	; (8002b60 <main+0x22c>)
 8002b0e:	f000 f9dd 	bl	8002ecc <LedLightTask>
	  LedLightTask(&Light);
 8002b12:	4814      	ldr	r0, [pc, #80]	; (8002b64 <main+0x230>)
 8002b14:	f000 f9da 	bl	8002ecc <LedLightTask>
	  if(LineCounter)
 8002b18:	e7b9      	b.n	8002a8e <main+0x15a>
 8002b1a:	bf00      	nop
 8002b1c:	20000c6c 	.word	0x20000c6c
 8002b20:	20000cb0 	.word	0x20000cb0
 8002b24:	20001e8c 	.word	0x20001e8c
 8002b28:	20001e0c 	.word	0x20001e0c
 8002b2c:	20001e10 	.word	0x20001e10
 8002b30:	20001e14 	.word	0x20001e14
 8002b34:	20001e18 	.word	0x20001e18
 8002b38:	20001e24 	.word	0x20001e24
 8002b3c:	40011000 	.word	0x40011000
 8002b40:	20000d8c 	.word	0x20000d8c
 8002b44:	20000db8 	.word	0x20000db8
 8002b48:	40011c00 	.word	0x40011c00
 8002b4c:	20000de4 	.word	0x20000de4
 8002b50:	20000df0 	.word	0x20000df0
 8002b54:	20002740 	.word	0x20002740
 8002b58:	200026f8 	.word	0x200026f8
 8002b5c:	20002788 	.word	0x20002788
 8002b60:	20001e64 	.word	0x20001e64
 8002b64:	20001e78 	.word	0x20001e78
 8002b68:	40010c00 	.word	0x40010c00
 8002b6c:	20001e2c 	.word	0x20001e2c
 8002b70:	20001e4c 	.word	0x20001e4c
 8002b74:	20000bf8 	.word	0x20000bf8
 8002b78:	20001604 	.word	0x20001604
 8002b7c:	20001608 	.word	0x20001608
 8002b80:	20000dfc 	.word	0x20000dfc
 8002b84:	20001e08 	.word	0x20001e08
 8002b88:	200028b0 	.word	0x200028b0

08002b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b096      	sub	sp, #88	; 0x58
 8002b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b96:	2228      	movs	r2, #40	; 0x28
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f010 fd9d 	bl	80136da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ba0:	f107 031c 	add.w	r3, r7, #28
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bb0:	1d3b      	adds	r3, r7, #4
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	605a      	str	r2, [r3, #4]
 8002bb8:	609a      	str	r2, [r3, #8]
 8002bba:	60da      	str	r2, [r3, #12]
 8002bbc:	611a      	str	r2, [r3, #16]
 8002bbe:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bc8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bda:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002bdc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002be0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002be2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002be6:	4618      	mov	r0, r3
 8002be8:	f009 fdd4 	bl	800c794 <HAL_RCC_OscConfig>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002bf2:	f001 fc3f 	bl	8004474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bf6:	230f      	movs	r3, #15
 8002bf8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c0c:	f107 031c 	add.w	r3, r7, #28
 8002c10:	2102      	movs	r1, #2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f00a f840 	bl	800cc98 <HAL_RCC_ClockConfig>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002c1e:	f001 fc29 	bl	8004474 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8002c22:	2312      	movs	r3, #18
 8002c24:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8002c26:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002c2a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c30:	1d3b      	adds	r3, r7, #4
 8002c32:	4618      	mov	r0, r3
 8002c34:	f00a f9c0 	bl	800cfb8 <HAL_RCCEx_PeriphCLKConfig>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002c3e:	f001 fc19 	bl	8004474 <Error_Handler>
  }
}
 8002c42:	bf00      	nop
 8002c44:	3758      	adds	r7, #88	; 0x58
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2100      	movs	r1, #0
 8002c52:	201f      	movs	r0, #31
 8002c54:	f004 f8c3 	bl	8006dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002c58:	201f      	movs	r0, #31
 8002c5a:	f004 f8dc 	bl	8006e16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2100      	movs	r1, #0
 8002c62:	2011      	movs	r0, #17
 8002c64:	f004 f8bb 	bl	8006dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002c68:	2011      	movs	r0, #17
 8002c6a:	f004 f8d4 	bl	8006e16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2100      	movs	r1, #0
 8002c72:	2010      	movs	r0, #16
 8002c74:	f004 f8b3 	bl	8006dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002c78:	2010      	movs	r0, #16
 8002c7a:	f004 f8cc 	bl	8006e16 <HAL_NVIC_EnableIRQ>
  /* USB_LP_CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2100      	movs	r1, #0
 8002c82:	2014      	movs	r0, #20
 8002c84:	f004 f8ab 	bl	8006dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002c88:	2014      	movs	r0, #20
 8002c8a:	f004 f8c4 	bl	8006e16 <HAL_NVIC_EnableIRQ>
  /* ADC1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2100      	movs	r1, #0
 8002c92:	2012      	movs	r0, #18
 8002c94:	f004 f8a3 	bl	8006dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002c98:	2012      	movs	r0, #18
 8002c9a:	f004 f8bc 	bl	8006e16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	2038      	movs	r0, #56	; 0x38
 8002ca4:	f004 f89b 	bl	8006dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002ca8:	2038      	movs	r0, #56	; 0x38
 8002caa:	f004 f8b4 	bl	8006e16 <HAL_NVIC_EnableIRQ>
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <PwmFreqSet>:

/* USER CODE BEGIN 4 */

void PwmFreqSet(uint16_t PwmFrequency)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	80fb      	strh	r3, [r7, #6]
	  htim4.Init.Prescaler = PwmFrequency;
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	4a06      	ldr	r2, [pc, #24]	; (8002cdc <PwmFreqSet+0x28>)
 8002cc2:	6053      	str	r3, [r2, #4]
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002cc4:	4805      	ldr	r0, [pc, #20]	; (8002cdc <PwmFreqSet+0x28>)
 8002cc6:	f00a fa2d 	bl	800d124 <HAL_TIM_Base_Init>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <PwmFreqSet+0x20>
	  {
	    Error_Handler();
 8002cd0:	f001 fbd0 	bl	8004474 <Error_Handler>
	  }
}
 8002cd4:	bf00      	nop
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	20002740 	.word	0x20002740

08002ce0 <OutputSet>:

void OutputSet(uint16_t ODRvalue)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	80fb      	strh	r3, [r7, #6]
	GPIOE -> ODR = ODRvalue;
 8002cea:	4a04      	ldr	r2, [pc, #16]	; (8002cfc <OutputSet+0x1c>)
 8002cec:	88fb      	ldrh	r3, [r7, #6]
 8002cee:	60d3      	str	r3, [r2, #12]
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bc80      	pop	{r7}
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40011800 	.word	0x40011800

08002d00 <OutputPinStateSet>:

void OutputPinStateSet(uint8_t Pin, uint8_t State)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	460a      	mov	r2, r1
 8002d0a:	71fb      	strb	r3, [r7, #7]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	71bb      	strb	r3, [r7, #6]
	if(State == 1)
 8002d10:	79bb      	ldrb	r3, [r7, #6]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d10a      	bne.n	8002d2c <OutputPinStateSet+0x2c>
	{
		GPIOE -> ODR |= (1 << Pin);
 8002d16:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <OutputPinStateSet+0x54>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	79fa      	ldrb	r2, [r7, #7]
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d22:	4611      	mov	r1, r2
 8002d24:	4a0b      	ldr	r2, [pc, #44]	; (8002d54 <OutputPinStateSet+0x54>)
 8002d26:	430b      	orrs	r3, r1
 8002d28:	60d3      	str	r3, [r2, #12]
	}
	else if (State == 0)
	{
		GPIOE -> ODR &= ~(1 << Pin);
	}
}
 8002d2a:	e00d      	b.n	8002d48 <OutputPinStateSet+0x48>
	else if (State == 0)
 8002d2c:	79bb      	ldrb	r3, [r7, #6]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <OutputPinStateSet+0x48>
		GPIOE -> ODR &= ~(1 << Pin);
 8002d32:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <OutputPinStateSet+0x54>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	79fa      	ldrb	r2, [r7, #7]
 8002d38:	2101      	movs	r1, #1
 8002d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3e:	43d2      	mvns	r2, r2
 8002d40:	4611      	mov	r1, r2
 8002d42:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <OutputPinStateSet+0x54>)
 8002d44:	400b      	ands	r3, r1
 8002d46:	60d3      	str	r3, [r2, #12]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40011800 	.word	0x40011800

08002d58 <OutputPinToggle>:

void OutputPinToggle(uint8_t Pin)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
	GPIOE -> ODR ^= (1 << Pin);
 8002d62:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <OutputPinToggle+0x28>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	79fa      	ldrb	r2, [r7, #7]
 8002d68:	2101      	movs	r1, #1
 8002d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4a03      	ldr	r2, [pc, #12]	; (8002d80 <OutputPinToggle+0x28>)
 8002d72:	404b      	eors	r3, r1
 8002d74:	60d3      	str	r3, [r2, #12]
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr
 8002d80:	40011800 	.word	0x40011800

08002d84 <PwmSet>:

void PwmSet(uint16_t Pwm1, uint16_t Pwm2, uint16_t Pwm3, uint16_t Pwm4)
{
 8002d84:	b490      	push	{r4, r7}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4604      	mov	r4, r0
 8002d8c:	4608      	mov	r0, r1
 8002d8e:	4611      	mov	r1, r2
 8002d90:	461a      	mov	r2, r3
 8002d92:	4623      	mov	r3, r4
 8002d94:	80fb      	strh	r3, [r7, #6]
 8002d96:	4603      	mov	r3, r0
 8002d98:	80bb      	strh	r3, [r7, #4]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	807b      	strh	r3, [r7, #2]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	803b      	strh	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, Pwm1);
 8002da2:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <PwmSet+0x48>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	88fa      	ldrh	r2, [r7, #6]
 8002da8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, Pwm2);
 8002daa:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <PwmSet+0x48>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	88ba      	ldrh	r2, [r7, #4]
 8002db0:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, Pwm3);
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <PwmSet+0x48>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	887a      	ldrh	r2, [r7, #2]
 8002db8:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, Pwm4);
 8002dba:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <PwmSet+0x48>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	883a      	ldrh	r2, [r7, #0]
 8002dc0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc90      	pop	{r4, r7}
 8002dca:	4770      	bx	lr
 8002dcc:	20002740 	.word	0x20002740

08002dd0 <PwmChannelSet>:

void PwmChannelSet(uint8_t Channel, uint16_t Value)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	460a      	mov	r2, r1
 8002dda:	71fb      	strb	r3, [r7, #7]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	80bb      	strh	r3, [r7, #4]
	Channel = Channel - 1;
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	71fb      	strb	r3, [r7, #7]

//	uint8_t ChannelMapper[] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4};
//	__HAL_TIM_SET_COMPARE(&htim4, ChannelMapper[Channel], Value);

	__HAL_TIM_SET_COMPARE(&htim4, Channel*4, Value);
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d104      	bne.n	8002df6 <PwmChannelSet+0x26>
 8002dec:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <PwmChannelSet+0x58>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	88ba      	ldrh	r2, [r7, #4]
 8002df2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002df4:	e013      	b.n	8002e1e <PwmChannelSet+0x4e>
	__HAL_TIM_SET_COMPARE(&htim4, Channel*4, Value);
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d104      	bne.n	8002e06 <PwmChannelSet+0x36>
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <PwmChannelSet+0x58>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	88bb      	ldrh	r3, [r7, #4]
 8002e02:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002e04:	e00b      	b.n	8002e1e <PwmChannelSet+0x4e>
	__HAL_TIM_SET_COMPARE(&htim4, Channel*4, Value);
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d104      	bne.n	8002e16 <PwmChannelSet+0x46>
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <PwmChannelSet+0x58>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	88bb      	ldrh	r3, [r7, #4]
 8002e12:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002e14:	e003      	b.n	8002e1e <PwmChannelSet+0x4e>
	__HAL_TIM_SET_COMPARE(&htim4, Channel*4, Value);
 8002e16:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <PwmChannelSet+0x58>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	88bb      	ldrh	r3, [r7, #4]
 8002e1c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr
 8002e28:	20002740 	.word	0x20002740

08002e2c <DisplayContrast>:

void DisplayContrast(uint8_t Contrast)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]
	SSD1306_Command(SSD1306_SETCONTRAST);
 8002e36:	2081      	movs	r0, #129	; 0x81
 8002e38:	f002 fae8 	bl	800540c <SSD1306_Command>
	SSD1306_Command(Contrast);
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f002 fae4 	bl	800540c <SSD1306_Command>
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <LogoLedSetParameter>:

void LogoLedSetParameter(uint8_t Mode, uint16_t PwmValue, uint16_t DimmerSpeed)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	71fb      	strb	r3, [r7, #7]
 8002e56:	460b      	mov	r3, r1
 8002e58:	80bb      	strh	r3, [r7, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	807b      	strh	r3, [r7, #2]
	Logo.Mode = Mode;
 8002e5e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002e62:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <LogoLedSetParameter+0x3c>)
 8002e64:	701a      	strb	r2, [r3, #0]
	if(PwmValue != 0) Logo.PwmMax = PwmValue;
 8002e66:	88bb      	ldrh	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <LogoLedSetParameter+0x26>
 8002e6c:	4a06      	ldr	r2, [pc, #24]	; (8002e88 <LogoLedSetParameter+0x3c>)
 8002e6e:	88bb      	ldrh	r3, [r7, #4]
 8002e70:	8053      	strh	r3, [r2, #2]
	if(DimmerSpeed != 0) Logo.DimmerSpeed = DimmerSpeed;
 8002e72:	887b      	ldrh	r3, [r7, #2]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d002      	beq.n	8002e7e <LogoLedSetParameter+0x32>
 8002e78:	4a03      	ldr	r2, [pc, #12]	; (8002e88 <LogoLedSetParameter+0x3c>)
 8002e7a:	887b      	ldrh	r3, [r7, #2]
 8002e7c:	8213      	strh	r3, [r2, #16]
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr
 8002e88:	20001e64 	.word	0x20001e64

08002e8c <LightLedSetParameter>:

void LightLedSetParameter(uint8_t Mode, uint16_t PwmValue, uint16_t DimmerSpeed)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	71fb      	strb	r3, [r7, #7]
 8002e96:	460b      	mov	r3, r1
 8002e98:	80bb      	strh	r3, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	807b      	strh	r3, [r7, #2]
	Light.Mode = Mode;
 8002e9e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <LightLedSetParameter+0x3c>)
 8002ea4:	701a      	strb	r2, [r3, #0]
	if(PwmValue != 0) Light.PwmMax = PwmValue;
 8002ea6:	88bb      	ldrh	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <LightLedSetParameter+0x26>
 8002eac:	4a06      	ldr	r2, [pc, #24]	; (8002ec8 <LightLedSetParameter+0x3c>)
 8002eae:	88bb      	ldrh	r3, [r7, #4]
 8002eb0:	8053      	strh	r3, [r2, #2]
	if(DimmerSpeed != 0)Light.DimmerSpeed = DimmerSpeed;
 8002eb2:	887b      	ldrh	r3, [r7, #2]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <LightLedSetParameter+0x32>
 8002eb8:	4a03      	ldr	r2, [pc, #12]	; (8002ec8 <LightLedSetParameter+0x3c>)
 8002eba:	887b      	ldrh	r3, [r7, #2]
 8002ebc:	8213      	strh	r3, [r2, #16]
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr
 8002ec8:	20001e78 	.word	0x20001e78

08002ecc <LedLightTask>:

void LedLightTask(LedLightParameter_t *Instance)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	switch(Instance -> Mode)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f993 3000 	ldrsb.w	r3, [r3]
 8002eda:	3301      	adds	r3, #1
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	f200 827d 	bhi.w	80033dc <LedLightTask+0x510>
 8002ee2:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <LedLightTask+0x1c>)
 8002ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee8:	080033d3 	.word	0x080033d3
 8002eec:	08002efd 	.word	0x08002efd
 8002ef0:	08002f45 	.word	0x08002f45
 8002ef4:	080030e7 	.word	0x080030e7
 8002ef8:	0800328f 	.word	0x0800328f
	{
	case -1:
		break;
	case 0:
		__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, 0);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	7a1b      	ldrb	r3, [r3, #8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d105      	bne.n	8002f10 <LedLightTask+0x44>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8002f0e:	e265      	b.n	80033dc <LedLightTask+0x510>
		__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, 0);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	7a1b      	ldrb	r3, [r3, #8]
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d105      	bne.n	8002f24 <LedLightTask+0x58>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8002f22:	e25b      	b.n	80033dc <LedLightTask+0x510>
		__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, 0);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	7a1b      	ldrb	r3, [r3, #8]
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d105      	bne.n	8002f38 <LedLightTask+0x6c>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	2300      	movs	r3, #0
 8002f34:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8002f36:	e251      	b.n	80033dc <LedLightTask+0x510>
		__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, 0);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8002f42:	e24b      	b.n	80033dc <LedLightTask+0x510>
	case 1:
		if(Instance -> PwmActual > Instance -> PwmMax)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	895a      	ldrh	r2, [r3, #10]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	885b      	ldrh	r3, [r3, #2]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d92d      	bls.n	8002fac <LedLightTask+0xe0>
		{
			Instance -> PwmActual = Instance -> PwmMax;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	885a      	ldrh	r2, [r3, #2]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	815a      	strh	r2, [r3, #10]
			__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	7a1b      	ldrb	r3, [r3, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d106      	bne.n	8002f6e <LedLightTask+0xa2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	895a      	ldrh	r2, [r3, #10]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	635a      	str	r2, [r3, #52]	; 0x34
 8002f6c:	e01e      	b.n	8002fac <LedLightTask+0xe0>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	7a1b      	ldrb	r3, [r3, #8]
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d107      	bne.n	8002f86 <LedLightTask+0xba>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	8959      	ldrh	r1, [r3, #10]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	460b      	mov	r3, r1
 8002f82:	6393      	str	r3, [r2, #56]	; 0x38
 8002f84:	e012      	b.n	8002fac <LedLightTask+0xe0>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7a1b      	ldrb	r3, [r3, #8]
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d107      	bne.n	8002f9e <LedLightTask+0xd2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	8959      	ldrh	r1, [r3, #10]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002f9c:	e006      	b.n	8002fac <LedLightTask+0xe0>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	8959      	ldrh	r1, [r3, #10]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	6413      	str	r3, [r2, #64]	; 0x40
		}
		if(DOOR_OPEN)
 8002fac:	2101      	movs	r1, #1
 8002fae:	4888      	ldr	r0, [pc, #544]	; (80031d0 <LedLightTask+0x304>)
 8002fb0:	f004 fd34 	bl	8007a1c <HAL_GPIO_ReadPin>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d147      	bne.n	800304a <LedLightTask+0x17e>
		{
			if(HAL_GetTick() - Instance->LastTick > Instance->DimmerSpeed && Instance->PwmActual <= Instance->PwmMax)
 8002fba:	f003 f949 	bl	8006250 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	8a12      	ldrh	r2, [r2, #16]
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	f240 8203 	bls.w	80033d6 <LedLightTask+0x50a>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	895a      	ldrh	r2, [r3, #10]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	885b      	ldrh	r3, [r3, #2]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	f200 81fc 	bhi.w	80033d6 <LedLightTask+0x50a>
			{
				Instance->PwmActual++;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	895b      	ldrh	r3, [r3, #10]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	815a      	strh	r2, [r3, #10]
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	7a1b      	ldrb	r3, [r3, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <LedLightTask+0x134>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	895a      	ldrh	r2, [r3, #10]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ffe:	e01e      	b.n	800303e <LedLightTask+0x172>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	7a1b      	ldrb	r3, [r3, #8]
 8003004:	2b04      	cmp	r3, #4
 8003006:	d107      	bne.n	8003018 <LedLightTask+0x14c>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	8959      	ldrh	r1, [r3, #10]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	460b      	mov	r3, r1
 8003014:	6393      	str	r3, [r2, #56]	; 0x38
 8003016:	e012      	b.n	800303e <LedLightTask+0x172>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	7a1b      	ldrb	r3, [r3, #8]
 800301c:	2b08      	cmp	r3, #8
 800301e:	d107      	bne.n	8003030 <LedLightTask+0x164>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	8959      	ldrh	r1, [r3, #10]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	460b      	mov	r3, r1
 800302c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800302e:	e006      	b.n	800303e <LedLightTask+0x172>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	8959      	ldrh	r1, [r3, #10]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	460b      	mov	r3, r1
 800303c:	6413      	str	r3, [r2, #64]	; 0x40
				Instance->LastTick = HAL_GetTick();
 800303e:	f003 f907 	bl	8006250 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	60da      	str	r2, [r3, #12]
				Instance->PwmActual--;
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
				Instance->LastTick = HAL_GetTick();
			}
		}
		break;
 8003048:	e1c5      	b.n	80033d6 <LedLightTask+0x50a>
		else if(DOOR_CLOSED)
 800304a:	2101      	movs	r1, #1
 800304c:	4860      	ldr	r0, [pc, #384]	; (80031d0 <LedLightTask+0x304>)
 800304e:	f004 fce5 	bl	8007a1c <HAL_GPIO_ReadPin>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 81be 	beq.w	80033d6 <LedLightTask+0x50a>
			if(HAL_GetTick() - Instance->LastTick > Instance->DimmerSpeed && Instance->PwmActual > 0)
 800305a:	f003 f8f9 	bl	8006250 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	8a12      	ldrh	r2, [r2, #16]
 800306a:	4293      	cmp	r3, r2
 800306c:	f240 81b3 	bls.w	80033d6 <LedLightTask+0x50a>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	895b      	ldrh	r3, [r3, #10]
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 81ae 	beq.w	80033d6 <LedLightTask+0x50a>
				Instance->PwmActual--;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	895b      	ldrh	r3, [r3, #10]
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	815a      	strh	r2, [r3, #10]
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	7a1b      	ldrb	r3, [r3, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d106      	bne.n	800309c <LedLightTask+0x1d0>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	895a      	ldrh	r2, [r3, #10]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	635a      	str	r2, [r3, #52]	; 0x34
 800309a:	e01e      	b.n	80030da <LedLightTask+0x20e>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	7a1b      	ldrb	r3, [r3, #8]
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d107      	bne.n	80030b4 <LedLightTask+0x1e8>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	8959      	ldrh	r1, [r3, #10]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	460b      	mov	r3, r1
 80030b0:	6393      	str	r3, [r2, #56]	; 0x38
 80030b2:	e012      	b.n	80030da <LedLightTask+0x20e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	7a1b      	ldrb	r3, [r3, #8]
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d107      	bne.n	80030cc <LedLightTask+0x200>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	8959      	ldrh	r1, [r3, #10]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	460b      	mov	r3, r1
 80030c8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80030ca:	e006      	b.n	80030da <LedLightTask+0x20e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	8959      	ldrh	r1, [r3, #10]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	460b      	mov	r3, r1
 80030d8:	6413      	str	r3, [r2, #64]	; 0x40
				Instance->LastTick = HAL_GetTick();
 80030da:	f003 f8b9 	bl	8006250 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	60da      	str	r2, [r3, #12]
		break;
 80030e4:	e177      	b.n	80033d6 <LedLightTask+0x50a>
	case 2:
		if(Instance -> PwmActual > Instance -> PwmMax)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	895a      	ldrh	r2, [r3, #10]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	885b      	ldrh	r3, [r3, #2]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d92d      	bls.n	800314e <LedLightTask+0x282>
			{
			Instance -> PwmActual = Instance -> PwmMax;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	885a      	ldrh	r2, [r3, #2]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	815a      	strh	r2, [r3, #10]
			__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	7a1b      	ldrb	r3, [r3, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d106      	bne.n	8003110 <LedLightTask+0x244>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	895a      	ldrh	r2, [r3, #10]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	635a      	str	r2, [r3, #52]	; 0x34
 800310e:	e01e      	b.n	800314e <LedLightTask+0x282>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	7a1b      	ldrb	r3, [r3, #8]
 8003114:	2b04      	cmp	r3, #4
 8003116:	d107      	bne.n	8003128 <LedLightTask+0x25c>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	8959      	ldrh	r1, [r3, #10]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	460b      	mov	r3, r1
 8003124:	6393      	str	r3, [r2, #56]	; 0x38
 8003126:	e012      	b.n	800314e <LedLightTask+0x282>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	7a1b      	ldrb	r3, [r3, #8]
 800312c:	2b08      	cmp	r3, #8
 800312e:	d107      	bne.n	8003140 <LedLightTask+0x274>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	8959      	ldrh	r1, [r3, #10]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	460b      	mov	r3, r1
 800313c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800313e:	e006      	b.n	800314e <LedLightTask+0x282>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	8959      	ldrh	r1, [r3, #10]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	460b      	mov	r3, r1
 800314c:	6413      	str	r3, [r2, #64]	; 0x40
			}
		if(DOOR_OPEN)
 800314e:	2101      	movs	r1, #1
 8003150:	481f      	ldr	r0, [pc, #124]	; (80031d0 <LedLightTask+0x304>)
 8003152:	f004 fc63 	bl	8007a1c <HAL_GPIO_ReadPin>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d148      	bne.n	80031ee <LedLightTask+0x322>
		{
			if(HAL_GetTick() - Instance->LastTick > Instance->DimmerSpeed && Instance->PwmActual > 0)
 800315c:	f003 f878 	bl	8006250 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	8a12      	ldrh	r2, [r2, #16]
 800316c:	4293      	cmp	r3, r2
 800316e:	f240 8134 	bls.w	80033da <LedLightTask+0x50e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	895b      	ldrh	r3, [r3, #10]
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 812f 	beq.w	80033da <LedLightTask+0x50e>
			{
				Instance->PwmActual--;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	895b      	ldrh	r3, [r3, #10]
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	815a      	strh	r2, [r3, #10]
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	7a1b      	ldrb	r3, [r3, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d106      	bne.n	800319e <LedLightTask+0x2d2>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	895a      	ldrh	r2, [r3, #10]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	635a      	str	r2, [r3, #52]	; 0x34
 800319c:	e021      	b.n	80031e2 <LedLightTask+0x316>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	7a1b      	ldrb	r3, [r3, #8]
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d107      	bne.n	80031b6 <LedLightTask+0x2ea>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	8959      	ldrh	r1, [r3, #10]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	460b      	mov	r3, r1
 80031b2:	6393      	str	r3, [r2, #56]	; 0x38
 80031b4:	e015      	b.n	80031e2 <LedLightTask+0x316>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	7a1b      	ldrb	r3, [r3, #8]
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d10a      	bne.n	80031d4 <LedLightTask+0x308>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	8959      	ldrh	r1, [r3, #10]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	460b      	mov	r3, r1
 80031ca:	63d3      	str	r3, [r2, #60]	; 0x3c
 80031cc:	e009      	b.n	80031e2 <LedLightTask+0x316>
 80031ce:	bf00      	nop
 80031d0:	40010800 	.word	0x40010800
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	8959      	ldrh	r1, [r3, #10]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	460b      	mov	r3, r1
 80031e0:	6413      	str	r3, [r2, #64]	; 0x40
				Instance->LastTick = HAL_GetTick();
 80031e2:	f003 f835 	bl	8006250 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	60da      	str	r2, [r3, #12]
				Instance->PwmActual++;
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
				Instance->LastTick = HAL_GetTick();
			}
		}
		break;
 80031ec:	e0f5      	b.n	80033da <LedLightTask+0x50e>
		else if(DOOR_CLOSED)
 80031ee:	2101      	movs	r1, #1
 80031f0:	487c      	ldr	r0, [pc, #496]	; (80033e4 <LedLightTask+0x518>)
 80031f2:	f004 fc13 	bl	8007a1c <HAL_GPIO_ReadPin>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80ee 	beq.w	80033da <LedLightTask+0x50e>
			if(HAL_GetTick() - Instance->LastTick > Instance->DimmerSpeed && Instance->PwmActual < Instance->PwmMax)
 80031fe:	f003 f827 	bl	8006250 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	8a12      	ldrh	r2, [r2, #16]
 800320e:	4293      	cmp	r3, r2
 8003210:	f240 80e3 	bls.w	80033da <LedLightTask+0x50e>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	895a      	ldrh	r2, [r3, #10]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	885b      	ldrh	r3, [r3, #2]
 800321c:	429a      	cmp	r2, r3
 800321e:	f080 80dc 	bcs.w	80033da <LedLightTask+0x50e>
				Instance->PwmActual++;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	895b      	ldrh	r3, [r3, #10]
 8003226:	3301      	adds	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	815a      	strh	r2, [r3, #10]
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	7a1b      	ldrb	r3, [r3, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d106      	bne.n	8003244 <LedLightTask+0x378>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	895a      	ldrh	r2, [r3, #10]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	635a      	str	r2, [r3, #52]	; 0x34
 8003242:	e01e      	b.n	8003282 <LedLightTask+0x3b6>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	7a1b      	ldrb	r3, [r3, #8]
 8003248:	2b04      	cmp	r3, #4
 800324a:	d107      	bne.n	800325c <LedLightTask+0x390>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	8959      	ldrh	r1, [r3, #10]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	460b      	mov	r3, r1
 8003258:	6393      	str	r3, [r2, #56]	; 0x38
 800325a:	e012      	b.n	8003282 <LedLightTask+0x3b6>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	7a1b      	ldrb	r3, [r3, #8]
 8003260:	2b08      	cmp	r3, #8
 8003262:	d107      	bne.n	8003274 <LedLightTask+0x3a8>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	8959      	ldrh	r1, [r3, #10]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	460b      	mov	r3, r1
 8003270:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003272:	e006      	b.n	8003282 <LedLightTask+0x3b6>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8959      	ldrh	r1, [r3, #10]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	460b      	mov	r3, r1
 8003280:	6413      	str	r3, [r2, #64]	; 0x40
				Instance->LastTick = HAL_GetTick();
 8003282:	f002 ffe5 	bl	8006250 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	60da      	str	r2, [r3, #12]
		break;
 800328c:	e0a5      	b.n	80033da <LedLightTask+0x50e>
	case 3:
		if(!Instance->Direction)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	7c9b      	ldrb	r3, [r3, #18]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d14a      	bne.n	800332c <LedLightTask+0x460>
		{
			if(HAL_GetTick() - Instance->LastTick > Instance->DimmerSpeed && Instance->PwmActual > 50)
 8003296:	f002 ffdb 	bl	8006250 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	8a12      	ldrh	r2, [r2, #16]
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d938      	bls.n	800331c <LedLightTask+0x450>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	895b      	ldrh	r3, [r3, #10]
 80032ae:	2b32      	cmp	r3, #50	; 0x32
 80032b0:	d934      	bls.n	800331c <LedLightTask+0x450>
			{
				Instance->PwmActual--;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	895b      	ldrh	r3, [r3, #10]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	815a      	strh	r2, [r3, #10]
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	7a1b      	ldrb	r3, [r3, #8]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <LedLightTask+0x408>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	895a      	ldrh	r2, [r3, #10]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	635a      	str	r2, [r3, #52]	; 0x34
 80032d2:	e01e      	b.n	8003312 <LedLightTask+0x446>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	7a1b      	ldrb	r3, [r3, #8]
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d107      	bne.n	80032ec <LedLightTask+0x420>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	8959      	ldrh	r1, [r3, #10]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	460b      	mov	r3, r1
 80032e8:	6393      	str	r3, [r2, #56]	; 0x38
 80032ea:	e012      	b.n	8003312 <LedLightTask+0x446>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	7a1b      	ldrb	r3, [r3, #8]
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d107      	bne.n	8003304 <LedLightTask+0x438>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	8959      	ldrh	r1, [r3, #10]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	460b      	mov	r3, r1
 8003300:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003302:	e006      	b.n	8003312 <LedLightTask+0x446>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	8959      	ldrh	r1, [r3, #10]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	460b      	mov	r3, r1
 8003310:	6413      	str	r3, [r2, #64]	; 0x40
				Instance->LastTick = HAL_GetTick();
 8003312:	f002 ff9d 	bl	8006250 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	60da      	str	r2, [r3, #12]
			}
			if(Instance->PwmActual <= 50) Instance -> Direction = 1;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	895b      	ldrh	r3, [r3, #10]
 8003320:	2b32      	cmp	r3, #50	; 0x32
 8003322:	d85b      	bhi.n	80033dc <LedLightTask+0x510>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	749a      	strb	r2, [r3, #18]
			}
			if(Instance->PwmActual >= Instance->PwmMax) Instance -> Direction = 0;
		}

	}
}
 800332a:	e057      	b.n	80033dc <LedLightTask+0x510>
		else if(Instance->Direction)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	7c9b      	ldrb	r3, [r3, #18]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d053      	beq.n	80033dc <LedLightTask+0x510>
			if(HAL_GetTick() - Instance->LastTick > Instance->DimmerSpeed && Instance->PwmActual <= Instance->PwmMax)
 8003334:	f002 ff8c 	bl	8006250 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	8a12      	ldrh	r2, [r2, #16]
 8003344:	4293      	cmp	r3, r2
 8003346:	d93a      	bls.n	80033be <LedLightTask+0x4f2>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	895a      	ldrh	r2, [r3, #10]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	885b      	ldrh	r3, [r3, #2]
 8003350:	429a      	cmp	r2, r3
 8003352:	d834      	bhi.n	80033be <LedLightTask+0x4f2>
				Instance->PwmActual++;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	895b      	ldrh	r3, [r3, #10]
 8003358:	3301      	adds	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	815a      	strh	r2, [r3, #10]
				__HAL_TIM_SET_COMPARE(Instance->htim, Instance->Channel, Instance->PwmActual);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	7a1b      	ldrb	r3, [r3, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d106      	bne.n	8003376 <LedLightTask+0x4aa>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	895a      	ldrh	r2, [r3, #10]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	635a      	str	r2, [r3, #52]	; 0x34
 8003374:	e01e      	b.n	80033b4 <LedLightTask+0x4e8>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	7a1b      	ldrb	r3, [r3, #8]
 800337a:	2b04      	cmp	r3, #4
 800337c:	d107      	bne.n	800338e <LedLightTask+0x4c2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	8959      	ldrh	r1, [r3, #10]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	460b      	mov	r3, r1
 800338a:	6393      	str	r3, [r2, #56]	; 0x38
 800338c:	e012      	b.n	80033b4 <LedLightTask+0x4e8>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	7a1b      	ldrb	r3, [r3, #8]
 8003392:	2b08      	cmp	r3, #8
 8003394:	d107      	bne.n	80033a6 <LedLightTask+0x4da>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	8959      	ldrh	r1, [r3, #10]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	460b      	mov	r3, r1
 80033a2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80033a4:	e006      	b.n	80033b4 <LedLightTask+0x4e8>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	8959      	ldrh	r1, [r3, #10]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	460b      	mov	r3, r1
 80033b2:	6413      	str	r3, [r2, #64]	; 0x40
				Instance->LastTick = HAL_GetTick();
 80033b4:	f002 ff4c 	bl	8006250 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	60da      	str	r2, [r3, #12]
			if(Instance->PwmActual >= Instance->PwmMax) Instance -> Direction = 0;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	895a      	ldrh	r2, [r3, #10]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	885b      	ldrh	r3, [r3, #2]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d308      	bcc.n	80033dc <LedLightTask+0x510>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	749a      	strb	r2, [r3, #18]
}
 80033d0:	e004      	b.n	80033dc <LedLightTask+0x510>
		break;
 80033d2:	bf00      	nop
 80033d4:	e002      	b.n	80033dc <LedLightTask+0x510>
		break;
 80033d6:	bf00      	nop
 80033d8:	e000      	b.n	80033dc <LedLightTask+0x510>
		break;
 80033da:	bf00      	nop
}
 80033dc:	bf00      	nop
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40010800 	.word	0x40010800

080033e8 <LedLightInit>:

void LedLightInit(LedLightParameter_t *Instance, TIM_HandleTypeDef *htim, uint8_t Channel, uint16_t DimmerSpeed)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	4611      	mov	r1, r2
 80033f4:	461a      	mov	r2, r3
 80033f6:	460b      	mov	r3, r1
 80033f8:	71fb      	strb	r3, [r7, #7]
 80033fa:	4613      	mov	r3, r2
 80033fc:	80bb      	strh	r3, [r7, #4]
	Instance -> htim = htim;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	605a      	str	r2, [r3, #4]
	Instance -> Channel = Channel;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	79fa      	ldrb	r2, [r7, #7]
 8003408:	721a      	strb	r2, [r3, #8]
	Instance -> DimmerSpeed = DimmerSpeed;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	88ba      	ldrh	r2, [r7, #4]
 800340e:	821a      	strh	r2, [r3, #16]
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr
	...

0800341c <ShowMenu>:


void ShowMenu(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
	ButtonRegisterPressCallback(&KeyDown, MenuNext);
 8003420:	490b      	ldr	r1, [pc, #44]	; (8003450 <ShowMenu+0x34>)
 8003422:	480c      	ldr	r0, [pc, #48]	; (8003454 <ShowMenu+0x38>)
 8003424:	f7fe fe6f 	bl	8002106 <ButtonRegisterPressCallback>
	ButtonRegisterRepeatCallback(&KeyDown, MenuPrev);
 8003428:	490b      	ldr	r1, [pc, #44]	; (8003458 <ShowMenu+0x3c>)
 800342a:	480a      	ldr	r0, [pc, #40]	; (8003454 <ShowMenu+0x38>)
 800342c:	f7fe fe78 	bl	8002120 <ButtonRegisterRepeatCallback>
	ButtonRegisterPressCallback(&KeyUp, MenuEnter);
 8003430:	490a      	ldr	r1, [pc, #40]	; (800345c <ShowMenu+0x40>)
 8003432:	480b      	ldr	r0, [pc, #44]	; (8003460 <ShowMenu+0x44>)
 8003434:	f7fe fe67 	bl	8002106 <ButtonRegisterPressCallback>
	ButtonRegisterRepeatCallback(&KeyUp, NULL);
 8003438:	2100      	movs	r1, #0
 800343a:	4809      	ldr	r0, [pc, #36]	; (8003460 <ShowMenu+0x44>)
 800343c:	f7fe fe70 	bl	8002120 <ButtonRegisterRepeatCallback>
	ActualVisibleFunc = ScrollString;
 8003440:	4b08      	ldr	r3, [pc, #32]	; (8003464 <ShowMenu+0x48>)
 8003442:	4a09      	ldr	r2, [pc, #36]	; (8003468 <ShowMenu+0x4c>)
 8003444:	601a      	str	r2, [r3, #0]
	MenuRefresh();
 8003446:	f001 fa17 	bl	8004878 <MenuRefresh>
}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	080045fd 	.word	0x080045fd
 8003454:	20000db8 	.word	0x20000db8
 8003458:	08004681 	.word	0x08004681
 800345c:	080046f9 	.word	0x080046f9
 8003460:	20000d8c 	.word	0x20000d8c
 8003464:	20001e90 	.word	0x20001e90
 8003468:	08004a51 	.word	0x08004a51

0800346c <HideMenu>:

void HideMenu(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
	ButtonRegisterPressCallback(&KeyDown, NULL);
 8003470:	2100      	movs	r1, #0
 8003472:	4808      	ldr	r0, [pc, #32]	; (8003494 <HideMenu+0x28>)
 8003474:	f7fe fe47 	bl	8002106 <ButtonRegisterPressCallback>
	ButtonRegisterRepeatCallback(&KeyDown, NULL);
 8003478:	2100      	movs	r1, #0
 800347a:	4806      	ldr	r0, [pc, #24]	; (8003494 <HideMenu+0x28>)
 800347c:	f7fe fe50 	bl	8002120 <ButtonRegisterRepeatCallback>
	ButtonRegisterPressCallback(&KeyUp, NULL);
 8003480:	2100      	movs	r1, #0
 8003482:	4805      	ldr	r0, [pc, #20]	; (8003498 <HideMenu+0x2c>)
 8003484:	f7fe fe3f 	bl	8002106 <ButtonRegisterPressCallback>
	ActualVisibleFunc = NULL;
 8003488:	4b04      	ldr	r3, [pc, #16]	; (800349c <HideMenu+0x30>)
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000db8 	.word	0x20000db8
 8003498:	20000d8c 	.word	0x20000d8c
 800349c:	20001e90 	.word	0x20001e90

080034a0 <ShowMeasurements>:

void ShowMeasurements(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af02      	add	r7, sp, #8
	HideMenu();
 80034a6:	f7ff ffe1 	bl	800346c <HideMenu>
	ActualVisibleFunc = ShowMeasurements;
 80034aa:	4b23      	ldr	r3, [pc, #140]	; (8003538 <ShowMeasurements+0x98>)
 80034ac:	4a23      	ldr	r2, [pc, #140]	; (800353c <ShowMeasurements+0x9c>)
 80034ae:	601a      	str	r2, [r3, #0]
	ButtonRegisterPressCallback(&KeyDown, ShowMenu);
 80034b0:	4923      	ldr	r1, [pc, #140]	; (8003540 <ShowMeasurements+0xa0>)
 80034b2:	4824      	ldr	r0, [pc, #144]	; (8003544 <ShowMeasurements+0xa4>)
 80034b4:	f7fe fe27 	bl	8002106 <ButtonRegisterPressCallback>
	SSD1306_Clear(BLACK);
 80034b8:	2000      	movs	r0, #0
 80034ba:	f002 f879 	bl	80055b0 <SSD1306_Clear>
	char buff[16];
	sprintf(buff, "5V:   %.2fV", Measurements.Voltage5);
 80034be:	4b22      	ldr	r3, [pc, #136]	; (8003548 <ShowMeasurements+0xa8>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd f81c 	bl	8000500 <__aeabi_f2d>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4638      	mov	r0, r7
 80034ce:	491f      	ldr	r1, [pc, #124]	; (800354c <ShowMeasurements+0xac>)
 80034d0:	f010 f8a0 	bl	8013614 <siprintf>
	GFX_DrawString(0, 0, buff, WHITE, 1);
 80034d4:	463a      	mov	r2, r7
 80034d6:	2301      	movs	r3, #1
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	2301      	movs	r3, #1
 80034dc:	2100      	movs	r1, #0
 80034de:	2000      	movs	r0, #0
 80034e0:	f7fe f8b8 	bl	8001654 <GFX_DrawString>
	sprintf(buff, "12V: %5.2fV", Measurements.Voltage12);
 80034e4:	4b18      	ldr	r3, [pc, #96]	; (8003548 <ShowMeasurements+0xa8>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fd f809 	bl	8000500 <__aeabi_f2d>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4638      	mov	r0, r7
 80034f4:	4916      	ldr	r1, [pc, #88]	; (8003550 <ShowMeasurements+0xb0>)
 80034f6:	f010 f88d 	bl	8013614 <siprintf>
	GFX_DrawString(0, 16, buff, WHITE, 1);
 80034fa:	463a      	mov	r2, r7
 80034fc:	2301      	movs	r3, #1
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	2301      	movs	r3, #1
 8003502:	2110      	movs	r1, #16
 8003504:	2000      	movs	r0, #0
 8003506:	f7fe f8a5 	bl	8001654 <GFX_DrawString>
	sprintf(buff, "Curr: %.2fA", Measurements.Current);
 800350a:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <ShowMeasurements+0xa8>)
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	4618      	mov	r0, r3
 8003510:	f7fc fff6 	bl	8000500 <__aeabi_f2d>
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4638      	mov	r0, r7
 800351a:	490e      	ldr	r1, [pc, #56]	; (8003554 <ShowMeasurements+0xb4>)
 800351c:	f010 f87a 	bl	8013614 <siprintf>
	GFX_DrawString(0, 32, buff, WHITE, 1);
 8003520:	463a      	mov	r2, r7
 8003522:	2301      	movs	r3, #1
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	2301      	movs	r3, #1
 8003528:	2120      	movs	r1, #32
 800352a:	2000      	movs	r0, #0
 800352c:	f7fe f892 	bl	8001654 <GFX_DrawString>
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20001e90 	.word	0x20001e90
 800353c:	080034a1 	.word	0x080034a1
 8003540:	0800341d 	.word	0x0800341d
 8003544:	20000db8 	.word	0x20000db8
 8003548:	20001e4c 	.word	0x20001e4c
 800354c:	08015980 	.word	0x08015980
 8003550:	0801598c 	.word	0x0801598c
 8003554:	08015998 	.word	0x08015998

08003558 <ShowTemperature>:

void ShowTemperature(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af02      	add	r7, sp, #8
	HideMenu();
 800355e:	f7ff ff85 	bl	800346c <HideMenu>
	ActualVisibleFunc = ShowTemperature;
 8003562:	4b1a      	ldr	r3, [pc, #104]	; (80035cc <ShowTemperature+0x74>)
 8003564:	4a1a      	ldr	r2, [pc, #104]	; (80035d0 <ShowTemperature+0x78>)
 8003566:	601a      	str	r2, [r3, #0]
	ButtonRegisterPressCallback(&KeyDown, ShowMenu);
 8003568:	491a      	ldr	r1, [pc, #104]	; (80035d4 <ShowTemperature+0x7c>)
 800356a:	481b      	ldr	r0, [pc, #108]	; (80035d8 <ShowTemperature+0x80>)
 800356c:	f7fe fdcb 	bl	8002106 <ButtonRegisterPressCallback>
	SSD1306_Clear(BLACK);
 8003570:	2000      	movs	r0, #0
 8003572:	f002 f81d 	bl	80055b0 <SSD1306_Clear>
	char buff[16];
	sprintf(buff, "MCU: %.2fC", Measurements.InternalTemperature);
 8003576:	4b19      	ldr	r3, [pc, #100]	; (80035dc <ShowTemperature+0x84>)
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	4618      	mov	r0, r3
 800357c:	f7fc ffc0 	bl	8000500 <__aeabi_f2d>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4638      	mov	r0, r7
 8003586:	4916      	ldr	r1, [pc, #88]	; (80035e0 <ShowTemperature+0x88>)
 8003588:	f010 f844 	bl	8013614 <siprintf>
	GFX_DrawString(0, 0, buff, WHITE, 1);
 800358c:	463a      	mov	r2, r7
 800358e:	2301      	movs	r3, #1
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	2301      	movs	r3, #1
 8003594:	2100      	movs	r1, #0
 8003596:	2000      	movs	r0, #0
 8003598:	f7fe f85c 	bl	8001654 <GFX_DrawString>
	sprintf(buff, "Amb: %.2fC", Temperature);
 800359c:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <ShowTemperature+0x8c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fc ffad 	bl	8000500 <__aeabi_f2d>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4638      	mov	r0, r7
 80035ac:	490e      	ldr	r1, [pc, #56]	; (80035e8 <ShowTemperature+0x90>)
 80035ae:	f010 f831 	bl	8013614 <siprintf>
	GFX_DrawString(0, 16, buff, WHITE, 1);
 80035b2:	463a      	mov	r2, r7
 80035b4:	2301      	movs	r3, #1
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	2301      	movs	r3, #1
 80035ba:	2110      	movs	r1, #16
 80035bc:	2000      	movs	r0, #0
 80035be:	f7fe f849 	bl	8001654 <GFX_DrawString>
}
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20001e90 	.word	0x20001e90
 80035d0:	08003559 	.word	0x08003559
 80035d4:	0800341d 	.word	0x0800341d
 80035d8:	20000db8 	.word	0x20000db8
 80035dc:	20001e4c 	.word	0x20001e4c
 80035e0:	080159a4 	.word	0x080159a4
 80035e4:	20001e20 	.word	0x20001e20
 80035e8:	080159b0 	.word	0x080159b0

080035ec <Show8bitIndicators>:

void Show8bitIndicators(uint8_t Data, uint8_t NameNumberStart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	4603      	mov	r3, r0
 80035f4:	460a      	mov	r2, r1
 80035f6:	71fb      	strb	r3, [r7, #7]
 80035f8:	4613      	mov	r3, r2
 80035fa:	71bb      	strb	r3, [r7, #6]
	ButtonRegisterPressCallback(&KeyDown, ShowMenu);
 80035fc:	4941      	ldr	r1, [pc, #260]	; (8003704 <Show8bitIndicators+0x118>)
 80035fe:	4842      	ldr	r0, [pc, #264]	; (8003708 <Show8bitIndicators+0x11c>)
 8003600:	f7fe fd81 	bl	8002106 <ButtonRegisterPressCallback>
	SSD1306_Clear(BLACK);
 8003604:	2000      	movs	r0, #0
 8003606:	f001 ffd3 	bl	80055b0 <SSD1306_Clear>

	char buff[4];
	GFX_SetFont(font_8x5);
 800360a:	4840      	ldr	r0, [pc, #256]	; (800370c <Show8bitIndicators+0x120>)
 800360c:	f7fd ff48 	bl	80014a0 <GFX_SetFont>
	GFX_SetFontSize(1);
 8003610:	2001      	movs	r0, #1
 8003612:	f7fd ff53 	bl	80014bc <GFX_SetFontSize>
	for(uint8_t i=0; i<=7; i++)
 8003616:	2300      	movs	r3, #0
 8003618:	73fb      	strb	r3, [r7, #15]
 800361a:	e06a      	b.n	80036f2 <Show8bitIndicators+0x106>
	{
		sprintf(buff, "%u.", NameNumberStart + i);
 800361c:	79ba      	ldrb	r2, [r7, #6]
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	441a      	add	r2, r3
 8003622:	f107 0308 	add.w	r3, r7, #8
 8003626:	493a      	ldr	r1, [pc, #232]	; (8003710 <Show8bitIndicators+0x124>)
 8003628:	4618      	mov	r0, r3
 800362a:	f00f fff3 	bl	8013614 <siprintf>
		uint8_t y = 20;
 800362e:	2314      	movs	r3, #20
 8003630:	73bb      	strb	r3, [r7, #14]
		uint8_t y_name = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	737b      	strb	r3, [r7, #13]
		if(i>3)
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	2b03      	cmp	r3, #3
 800363a:	d903      	bls.n	8003644 <Show8bitIndicators+0x58>
		{
			y = 43;
 800363c:	232b      	movs	r3, #43	; 0x2b
 800363e:	73bb      	strb	r3, [r7, #14]
			y_name = 57;
 8003640:	2339      	movs	r3, #57	; 0x39
 8003642:	737b      	strb	r3, [r7, #13]
		}
		GFX_DrawString(15 + (30 * ((i<4)?i:i-4)), y_name, buff, WHITE, 1);
 8003644:	7bfb      	ldrb	r3, [r7, #15]
 8003646:	2b03      	cmp	r3, #3
 8003648:	d807      	bhi.n	800365a <Show8bitIndicators+0x6e>
 800364a:	7bfa      	ldrb	r2, [r7, #15]
 800364c:	4613      	mov	r3, r2
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	f103 000f 	add.w	r0, r3, #15
 8003658:	e007      	b.n	800366a <Show8bitIndicators+0x7e>
 800365a:	7bfb      	ldrb	r3, [r7, #15]
 800365c:	1f1a      	subs	r2, r3, #4
 800365e:	4613      	mov	r3, r2
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	f103 000f 	add.w	r0, r3, #15
 800366a:	7b79      	ldrb	r1, [r7, #13]
 800366c:	f107 0208 	add.w	r2, r7, #8
 8003670:	2301      	movs	r3, #1
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	2301      	movs	r3, #1
 8003676:	f7fd ffed 	bl	8001654 <GFX_DrawString>
		if((Data>>i)&1)
 800367a:	79fa      	ldrb	r2, [r7, #7]
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	fa42 f303 	asr.w	r3, r2, r3
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d018      	beq.n	80036bc <Show8bitIndicators+0xd0>
		{
			GFX_DrawFillCircle(20 + (30 * ((i<4)?i:i-4)), y, 10, WHITE);
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	2b03      	cmp	r3, #3
 800368e:	d807      	bhi.n	80036a0 <Show8bitIndicators+0xb4>
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	4613      	mov	r3, r2
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	f103 0014 	add.w	r0, r3, #20
 800369e:	e007      	b.n	80036b0 <Show8bitIndicators+0xc4>
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	1f1a      	subs	r2, r3, #4
 80036a4:	4613      	mov	r3, r2
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	f103 0014 	add.w	r0, r3, #20
 80036b0:	7bb9      	ldrb	r1, [r7, #14]
 80036b2:	2301      	movs	r3, #1
 80036b4:	220a      	movs	r2, #10
 80036b6:	f7fe fad2 	bl	8001c5e <GFX_DrawFillCircle>
 80036ba:	e017      	b.n	80036ec <Show8bitIndicators+0x100>
		}
		else
		{
			GFX_DrawCircle(20 + (30 * ((i<4)?i:i-4)), y, 10, WHITE);
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d807      	bhi.n	80036d2 <Show8bitIndicators+0xe6>
 80036c2:	7bfa      	ldrb	r2, [r7, #15]
 80036c4:	4613      	mov	r3, r2
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	f103 0014 	add.w	r0, r3, #20
 80036d0:	e007      	b.n	80036e2 <Show8bitIndicators+0xf6>
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	1f1a      	subs	r2, r3, #4
 80036d6:	4613      	mov	r3, r2
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	f103 0014 	add.w	r0, r3, #20
 80036e2:	7bb9      	ldrb	r1, [r7, #14]
 80036e4:	2301      	movs	r3, #1
 80036e6:	220a      	movs	r2, #10
 80036e8:	f7fe f91c 	bl	8001924 <GFX_DrawCircle>
	for(uint8_t i=0; i<=7; i++)
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
 80036ee:	3301      	adds	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	2b07      	cmp	r3, #7
 80036f6:	d991      	bls.n	800361c <Show8bitIndicators+0x30>
		}


	}
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	0800341d 	.word	0x0800341d
 8003708:	20000db8 	.word	0x20000db8
 800370c:	08015be4 	.word	0x08015be4
 8003710:	080159bc 	.word	0x080159bc

08003714 <ShowOut0to7>:

void ShowOut0to7(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
	HideMenu();
 8003718:	f7ff fea8 	bl	800346c <HideMenu>
	ActualVisibleFunc = ShowOut0to7;
 800371c:	4b05      	ldr	r3, [pc, #20]	; (8003734 <ShowOut0to7+0x20>)
 800371e:	4a06      	ldr	r2, [pc, #24]	; (8003738 <ShowOut0to7+0x24>)
 8003720:	601a      	str	r2, [r3, #0]
	Show8bitIndicators(GPIOE -> ODR, 0);
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <ShowOut0to7+0x28>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff ff5e 	bl	80035ec <Show8bitIndicators>
}
 8003730:	bf00      	nop
 8003732:	bd80      	pop	{r7, pc}
 8003734:	20001e90 	.word	0x20001e90
 8003738:	08003715 	.word	0x08003715
 800373c:	40011800 	.word	0x40011800

08003740 <ShowOut8to15>:

void ShowOut8to15(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
	HideMenu();
 8003744:	f7ff fe92 	bl	800346c <HideMenu>
	ActualVisibleFunc = ShowOut8to15;
 8003748:	4b06      	ldr	r3, [pc, #24]	; (8003764 <ShowOut8to15+0x24>)
 800374a:	4a07      	ldr	r2, [pc, #28]	; (8003768 <ShowOut8to15+0x28>)
 800374c:	601a      	str	r2, [r3, #0]
	Show8bitIndicators((GPIOE -> ODR) >> 8, 8);
 800374e:	4b07      	ldr	r3, [pc, #28]	; (800376c <ShowOut8to15+0x2c>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	0a1b      	lsrs	r3, r3, #8
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2108      	movs	r1, #8
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff ff47 	bl	80035ec <Show8bitIndicators>
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	20001e90 	.word	0x20001e90
 8003768:	08003741 	.word	0x08003741
 800376c:	40011800 	.word	0x40011800

08003770 <ShowIn0to7>:

void ShowIn0to7(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
	HideMenu();
 8003774:	f7ff fe7a 	bl	800346c <HideMenu>
	ActualVisibleFunc = ShowIn0to7;
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <ShowIn0to7+0x24>)
 800377a:	4a07      	ldr	r2, [pc, #28]	; (8003798 <ShowIn0to7+0x28>)
 800377c:	601a      	str	r2, [r3, #0]
	Show8bitIndicators(~(GPIOG -> IDR), 0);
 800377e:	4b07      	ldr	r3, [pc, #28]	; (800379c <ShowIn0to7+0x2c>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2100      	movs	r1, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff ff2e 	bl	80035ec <Show8bitIndicators>
}
 8003790:	bf00      	nop
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20001e90 	.word	0x20001e90
 8003798:	08003771 	.word	0x08003771
 800379c:	40012000 	.word	0x40012000

080037a0 <ShowIn8to15>:

void ShowIn8to15(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
	HideMenu();
 80037a4:	f7ff fe62 	bl	800346c <HideMenu>
	ActualVisibleFunc = ShowIn8to15;
 80037a8:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <ShowIn8to15+0x28>)
 80037aa:	4a08      	ldr	r2, [pc, #32]	; (80037cc <ShowIn8to15+0x2c>)
 80037ac:	601a      	str	r2, [r3, #0]
	Show8bitIndicators(~((GPIOG -> IDR) >> 8), 8);
 80037ae:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <ShowIn8to15+0x30>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	0a1b      	lsrs	r3, r3, #8
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	43db      	mvns	r3, r3
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2108      	movs	r1, #8
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff ff15 	bl	80035ec <Show8bitIndicators>
}
 80037c2:	bf00      	nop
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20001e90 	.word	0x20001e90
 80037cc:	080037a1 	.word	0x080037a1
 80037d0:	40012000 	.word	0x40012000

080037d4 <ShowPWMsetMenu>:

void ShowPWMsetMenu(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af02      	add	r7, sp, #8
	char buff[6];
	uint8_t Length;
	HideMenu();
 80037da:	f7ff fe47 	bl	800346c <HideMenu>
	ActualVisibleFunc = ShowPWMsetMenu;
 80037de:	4b47      	ldr	r3, [pc, #284]	; (80038fc <ShowPWMsetMenu+0x128>)
 80037e0:	4a47      	ldr	r2, [pc, #284]	; (8003900 <ShowPWMsetMenu+0x12c>)
 80037e2:	601a      	str	r2, [r3, #0]
	ButtonRegisterPressCallback(&KeyDown, PwmSetPtrIncrement);
 80037e4:	4947      	ldr	r1, [pc, #284]	; (8003904 <ShowPWMsetMenu+0x130>)
 80037e6:	4848      	ldr	r0, [pc, #288]	; (8003908 <ShowPWMsetMenu+0x134>)
 80037e8:	f7fe fc8d 	bl	8002106 <ButtonRegisterPressCallback>
	SSD1306_Clear(BLACK);
 80037ec:	2000      	movs	r0, #0
 80037ee:	f001 fedf 	bl	80055b0 <SSD1306_Clear>

	for(uint8_t i = 0; i<4; i++)
 80037f2:	2300      	movs	r3, #0
 80037f4:	71fb      	strb	r3, [r7, #7]
 80037f6:	e031      	b.n	800385c <ShowPWMsetMenu+0x88>
	{
		Length = sprintf(buff, "%u", __HAL_TIM_GET_COMPARE(&htim4, i * 4));
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d103      	bne.n	8003806 <ShowPWMsetMenu+0x32>
 80037fe:	4b43      	ldr	r3, [pc, #268]	; (800390c <ShowPWMsetMenu+0x138>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003804:	e010      	b.n	8003828 <ShowPWMsetMenu+0x54>
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d103      	bne.n	8003814 <ShowPWMsetMenu+0x40>
 800380c:	4b3f      	ldr	r3, [pc, #252]	; (800390c <ShowPWMsetMenu+0x138>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003812:	e009      	b.n	8003828 <ShowPWMsetMenu+0x54>
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d103      	bne.n	8003822 <ShowPWMsetMenu+0x4e>
 800381a:	4b3c      	ldr	r3, [pc, #240]	; (800390c <ShowPWMsetMenu+0x138>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003820:	e002      	b.n	8003828 <ShowPWMsetMenu+0x54>
 8003822:	4b3a      	ldr	r3, [pc, #232]	; (800390c <ShowPWMsetMenu+0x138>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	4638      	mov	r0, r7
 800382a:	461a      	mov	r2, r3
 800382c:	4938      	ldr	r1, [pc, #224]	; (8003910 <ShowPWMsetMenu+0x13c>)
 800382e:	f00f fef1 	bl	8013614 <siprintf>
 8003832:	4603      	mov	r3, r0
 8003834:	71bb      	strb	r3, [r7, #6]
		GFX_DrawString(64-2 - (Length*5), 16*i, buff, WHITE, 1);
 8003836:	79ba      	ldrb	r2, [r7, #6]
 8003838:	4613      	mov	r3, r2
 800383a:	079b      	lsls	r3, r3, #30
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	1a9b      	subs	r3, r3, r2
 8003842:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 8003846:	79fb      	ldrb	r3, [r7, #7]
 8003848:	0119      	lsls	r1, r3, #4
 800384a:	463a      	mov	r2, r7
 800384c:	2301      	movs	r3, #1
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	2301      	movs	r3, #1
 8003852:	f7fd feff 	bl	8001654 <GFX_DrawString>
	for(uint8_t i = 0; i<4; i++)
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	3301      	adds	r3, #1
 800385a:	71fb      	strb	r3, [r7, #7]
 800385c:	79fb      	ldrb	r3, [r7, #7]
 800385e:	2b03      	cmp	r3, #3
 8003860:	d9ca      	bls.n	80037f8 <ShowPWMsetMenu+0x24>
	}

	if(PwmSetPtr%2 && PwmSetPtr!=9)
 8003862:	4b2c      	ldr	r3, [pc, #176]	; (8003914 <ShowPWMsetMenu+0x140>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d018      	beq.n	80038a2 <ShowPWMsetMenu+0xce>
 8003870:	4b28      	ldr	r3, [pc, #160]	; (8003914 <ShowPWMsetMenu+0x140>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b09      	cmp	r3, #9
 8003876:	d014      	beq.n	80038a2 <ShowPWMsetMenu+0xce>
	{
		ButtonRegisterPressCallback(&KeyUp, PwmSetDecrement);
 8003878:	4927      	ldr	r1, [pc, #156]	; (8003918 <ShowPWMsetMenu+0x144>)
 800387a:	4828      	ldr	r0, [pc, #160]	; (800391c <ShowPWMsetMenu+0x148>)
 800387c:	f7fe fc43 	bl	8002106 <ButtonRegisterPressCallback>
		ButtonRegisterRepeatCallback(&KeyUp, PwmSetDecrement25);
 8003880:	4927      	ldr	r1, [pc, #156]	; (8003920 <ShowPWMsetMenu+0x14c>)
 8003882:	4826      	ldr	r0, [pc, #152]	; (800391c <ShowPWMsetMenu+0x148>)
 8003884:	f7fe fc4c 	bl	8002120 <ButtonRegisterRepeatCallback>
		GFX_DrawChar(25, 16*(PwmSetPtr/2), '-', WHITE, 1);
 8003888:	4b22      	ldr	r3, [pc, #136]	; (8003914 <ShowPWMsetMenu+0x140>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	085b      	lsrs	r3, r3, #1
 800388e:	b2db      	uxtb	r3, r3
 8003890:	0119      	lsls	r1, r3, #4
 8003892:	2301      	movs	r3, #1
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	2301      	movs	r3, #1
 8003898:	222d      	movs	r2, #45	; 0x2d
 800389a:	2019      	movs	r0, #25
 800389c:	f7fd fe20 	bl	80014e0 <GFX_DrawChar>
	else
	{
		ButtonRegisterPressCallback(&KeyUp, ShowMenu);
		GFX_DrawString(0, 47, "<<", WHITE, 1);
	}
}
 80038a0:	e028      	b.n	80038f4 <ShowPWMsetMenu+0x120>
	else if(!(PwmSetPtr%2))
 80038a2:	4b1c      	ldr	r3, [pc, #112]	; (8003914 <ShowPWMsetMenu+0x140>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d115      	bne.n	80038dc <ShowPWMsetMenu+0x108>
		ButtonRegisterPressCallback(&KeyUp, PwmSetIncrement);
 80038b0:	491c      	ldr	r1, [pc, #112]	; (8003924 <ShowPWMsetMenu+0x150>)
 80038b2:	481a      	ldr	r0, [pc, #104]	; (800391c <ShowPWMsetMenu+0x148>)
 80038b4:	f7fe fc27 	bl	8002106 <ButtonRegisterPressCallback>
		ButtonRegisterRepeatCallback(&KeyUp, PwmSetIncrement25);
 80038b8:	491b      	ldr	r1, [pc, #108]	; (8003928 <ShowPWMsetMenu+0x154>)
 80038ba:	4818      	ldr	r0, [pc, #96]	; (800391c <ShowPWMsetMenu+0x148>)
 80038bc:	f7fe fc30 	bl	8002120 <ButtonRegisterRepeatCallback>
		GFX_DrawChar(91, 16*((PwmSetPtr/2)-1), '+', WHITE, 1);
 80038c0:	4b14      	ldr	r3, [pc, #80]	; (8003914 <ShowPWMsetMenu+0x140>)
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	085b      	lsrs	r3, r3, #1
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	0119      	lsls	r1, r3, #4
 80038cc:	2301      	movs	r3, #1
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	2301      	movs	r3, #1
 80038d2:	222b      	movs	r2, #43	; 0x2b
 80038d4:	205b      	movs	r0, #91	; 0x5b
 80038d6:	f7fd fe03 	bl	80014e0 <GFX_DrawChar>
}
 80038da:	e00b      	b.n	80038f4 <ShowPWMsetMenu+0x120>
		ButtonRegisterPressCallback(&KeyUp, ShowMenu);
 80038dc:	4913      	ldr	r1, [pc, #76]	; (800392c <ShowPWMsetMenu+0x158>)
 80038de:	480f      	ldr	r0, [pc, #60]	; (800391c <ShowPWMsetMenu+0x148>)
 80038e0:	f7fe fc11 	bl	8002106 <ButtonRegisterPressCallback>
		GFX_DrawString(0, 47, "<<", WHITE, 1);
 80038e4:	2301      	movs	r3, #1
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	2301      	movs	r3, #1
 80038ea:	4a11      	ldr	r2, [pc, #68]	; (8003930 <ShowPWMsetMenu+0x15c>)
 80038ec:	212f      	movs	r1, #47	; 0x2f
 80038ee:	2000      	movs	r0, #0
 80038f0:	f7fd feb0 	bl	8001654 <GFX_DrawString>
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20001e90 	.word	0x20001e90
 8003900:	080037d5 	.word	0x080037d5
 8003904:	08003935 	.word	0x08003935
 8003908:	20000db8 	.word	0x20000db8
 800390c:	20002740 	.word	0x20002740
 8003910:	080159c0 	.word	0x080159c0
 8003914:	20000001 	.word	0x20000001
 8003918:	080039d9 	.word	0x080039d9
 800391c:	20000d8c 	.word	0x20000d8c
 8003920:	08003acd 	.word	0x08003acd
 8003924:	08003961 	.word	0x08003961
 8003928:	08003a55 	.word	0x08003a55
 800392c:	0800341d 	.word	0x0800341d
 8003930:	080159c4 	.word	0x080159c4

08003934 <PwmSetPtrIncrement>:

	void PwmSetPtrIncrement(void)
	{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
		PwmSetPtr++;
 8003938:	4b08      	ldr	r3, [pc, #32]	; (800395c <PwmSetPtrIncrement+0x28>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	3301      	adds	r3, #1
 800393e:	b2da      	uxtb	r2, r3
 8003940:	4b06      	ldr	r3, [pc, #24]	; (800395c <PwmSetPtrIncrement+0x28>)
 8003942:	701a      	strb	r2, [r3, #0]
		if(PwmSetPtr>=10)PwmSetPtr=1;
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <PwmSetPtrIncrement+0x28>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b09      	cmp	r3, #9
 800394a:	d902      	bls.n	8003952 <PwmSetPtrIncrement+0x1e>
 800394c:	4b03      	ldr	r3, [pc, #12]	; (800395c <PwmSetPtrIncrement+0x28>)
 800394e:	2201      	movs	r2, #1
 8003950:	701a      	strb	r2, [r3, #0]
	}
 8003952:	bf00      	nop
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	20000001 	.word	0x20000001

08003960 <PwmSetIncrement>:
	void PwmSetIncrement(void)
	{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
		uint8_t CurrentPwmChannel = PwmSetPtr/2;
 8003966:	4b1a      	ldr	r3, [pc, #104]	; (80039d0 <PwmSetIncrement+0x70>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	085b      	lsrs	r3, r3, #1
 800396c:	717b      	strb	r3, [r7, #5]
		uint16_t PwmValue = __HAL_TIM_GET_COMPARE(&htim4, (CurrentPwmChannel - 1) * 4);
 800396e:	797b      	ldrb	r3, [r7, #5]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d104      	bne.n	800397e <PwmSetIncrement+0x1e>
 8003974:	4b17      	ldr	r3, [pc, #92]	; (80039d4 <PwmSetIncrement+0x74>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397a:	b29b      	uxth	r3, r3
 800397c:	e013      	b.n	80039a6 <PwmSetIncrement+0x46>
 800397e:	797b      	ldrb	r3, [r7, #5]
 8003980:	2b02      	cmp	r3, #2
 8003982:	d104      	bne.n	800398e <PwmSetIncrement+0x2e>
 8003984:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <PwmSetIncrement+0x74>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	b29b      	uxth	r3, r3
 800398c:	e00b      	b.n	80039a6 <PwmSetIncrement+0x46>
 800398e:	797b      	ldrb	r3, [r7, #5]
 8003990:	2b03      	cmp	r3, #3
 8003992:	d104      	bne.n	800399e <PwmSetIncrement+0x3e>
 8003994:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <PwmSetIncrement+0x74>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399a:	b29b      	uxth	r3, r3
 800399c:	e003      	b.n	80039a6 <PwmSetIncrement+0x46>
 800399e:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <PwmSetIncrement+0x74>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	80fb      	strh	r3, [r7, #6]

		PwmValue += 1;
 80039a8:	88fb      	ldrh	r3, [r7, #6]
 80039aa:	3301      	adds	r3, #1
 80039ac:	80fb      	strh	r3, [r7, #6]
		if(PwmValue > 1000) PwmValue = 0;
 80039ae:	88fb      	ldrh	r3, [r7, #6]
 80039b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039b4:	d901      	bls.n	80039ba <PwmSetIncrement+0x5a>
 80039b6:	2300      	movs	r3, #0
 80039b8:	80fb      	strh	r3, [r7, #6]
		PwmChannelSet(CurrentPwmChannel, PwmValue);
 80039ba:	88fa      	ldrh	r2, [r7, #6]
 80039bc:	797b      	ldrb	r3, [r7, #5]
 80039be:	4611      	mov	r1, r2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff fa05 	bl	8002dd0 <PwmChannelSet>
	}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000001 	.word	0x20000001
 80039d4:	20002740 	.word	0x20002740

080039d8 <PwmSetDecrement>:
	void PwmSetDecrement(void)
	{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
		uint8_t CurrentPwmChannel = PwmSetPtr/2 + 1;
 80039de:	4b1b      	ldr	r3, [pc, #108]	; (8003a4c <PwmSetDecrement+0x74>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	085b      	lsrs	r3, r3, #1
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	3301      	adds	r3, #1
 80039e8:	717b      	strb	r3, [r7, #5]
		uint16_t PwmValue = __HAL_TIM_GET_COMPARE(&htim4, (CurrentPwmChannel - 1)*4);
 80039ea:	797b      	ldrb	r3, [r7, #5]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d104      	bne.n	80039fa <PwmSetDecrement+0x22>
 80039f0:	4b17      	ldr	r3, [pc, #92]	; (8003a50 <PwmSetDecrement+0x78>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	e013      	b.n	8003a22 <PwmSetDecrement+0x4a>
 80039fa:	797b      	ldrb	r3, [r7, #5]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d104      	bne.n	8003a0a <PwmSetDecrement+0x32>
 8003a00:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <PwmSetDecrement+0x78>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	e00b      	b.n	8003a22 <PwmSetDecrement+0x4a>
 8003a0a:	797b      	ldrb	r3, [r7, #5]
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d104      	bne.n	8003a1a <PwmSetDecrement+0x42>
 8003a10:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <PwmSetDecrement+0x78>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	e003      	b.n	8003a22 <PwmSetDecrement+0x4a>
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <PwmSetDecrement+0x78>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	80fb      	strh	r3, [r7, #6]

		PwmValue -= 1;
 8003a24:	88fb      	ldrh	r3, [r7, #6]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	80fb      	strh	r3, [r7, #6]
		if(PwmValue > 1000) PwmValue = 1000;
 8003a2a:	88fb      	ldrh	r3, [r7, #6]
 8003a2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a30:	d902      	bls.n	8003a38 <PwmSetDecrement+0x60>
 8003a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a36:	80fb      	strh	r3, [r7, #6]
		PwmChannelSet(CurrentPwmChannel, PwmValue);
 8003a38:	88fa      	ldrh	r2, [r7, #6]
 8003a3a:	797b      	ldrb	r3, [r7, #5]
 8003a3c:	4611      	mov	r1, r2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff f9c6 	bl	8002dd0 <PwmChannelSet>
	}
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	20000001 	.word	0x20000001
 8003a50:	20002740 	.word	0x20002740

08003a54 <PwmSetIncrement25>:
	void PwmSetIncrement25(void)
	{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
		uint8_t CurrentPwmChannel = PwmSetPtr/2;
 8003a5a:	4b1a      	ldr	r3, [pc, #104]	; (8003ac4 <PwmSetIncrement25+0x70>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	085b      	lsrs	r3, r3, #1
 8003a60:	717b      	strb	r3, [r7, #5]
		uint16_t PwmValue = __HAL_TIM_GET_COMPARE(&htim4, (CurrentPwmChannel - 1) * 4);
 8003a62:	797b      	ldrb	r3, [r7, #5]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d104      	bne.n	8003a72 <PwmSetIncrement25+0x1e>
 8003a68:	4b17      	ldr	r3, [pc, #92]	; (8003ac8 <PwmSetIncrement25+0x74>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	e013      	b.n	8003a9a <PwmSetIncrement25+0x46>
 8003a72:	797b      	ldrb	r3, [r7, #5]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d104      	bne.n	8003a82 <PwmSetIncrement25+0x2e>
 8003a78:	4b13      	ldr	r3, [pc, #76]	; (8003ac8 <PwmSetIncrement25+0x74>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	e00b      	b.n	8003a9a <PwmSetIncrement25+0x46>
 8003a82:	797b      	ldrb	r3, [r7, #5]
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d104      	bne.n	8003a92 <PwmSetIncrement25+0x3e>
 8003a88:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <PwmSetIncrement25+0x74>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	e003      	b.n	8003a9a <PwmSetIncrement25+0x46>
 8003a92:	4b0d      	ldr	r3, [pc, #52]	; (8003ac8 <PwmSetIncrement25+0x74>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	80fb      	strh	r3, [r7, #6]

		PwmValue += 25;
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	3319      	adds	r3, #25
 8003aa0:	80fb      	strh	r3, [r7, #6]
		if(PwmValue > 1000) PwmValue = 0;
 8003aa2:	88fb      	ldrh	r3, [r7, #6]
 8003aa4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aa8:	d901      	bls.n	8003aae <PwmSetIncrement25+0x5a>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	80fb      	strh	r3, [r7, #6]
		PwmChannelSet(CurrentPwmChannel, PwmValue);
 8003aae:	88fa      	ldrh	r2, [r7, #6]
 8003ab0:	797b      	ldrb	r3, [r7, #5]
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff f98b 	bl	8002dd0 <PwmChannelSet>
	}
 8003aba:	bf00      	nop
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000001 	.word	0x20000001
 8003ac8:	20002740 	.word	0x20002740

08003acc <PwmSetDecrement25>:
	void PwmSetDecrement25(void)
	{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
		uint8_t CurrentPwmChannel = PwmSetPtr/2 + 1;
 8003ad2:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <PwmSetDecrement25+0x74>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	085b      	lsrs	r3, r3, #1
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	3301      	adds	r3, #1
 8003adc:	717b      	strb	r3, [r7, #5]
		uint16_t PwmValue = __HAL_TIM_GET_COMPARE(&htim4, (CurrentPwmChannel - 1)*4);
 8003ade:	797b      	ldrb	r3, [r7, #5]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d104      	bne.n	8003aee <PwmSetDecrement25+0x22>
 8003ae4:	4b17      	ldr	r3, [pc, #92]	; (8003b44 <PwmSetDecrement25+0x78>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	e013      	b.n	8003b16 <PwmSetDecrement25+0x4a>
 8003aee:	797b      	ldrb	r3, [r7, #5]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d104      	bne.n	8003afe <PwmSetDecrement25+0x32>
 8003af4:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <PwmSetDecrement25+0x78>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	e00b      	b.n	8003b16 <PwmSetDecrement25+0x4a>
 8003afe:	797b      	ldrb	r3, [r7, #5]
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d104      	bne.n	8003b0e <PwmSetDecrement25+0x42>
 8003b04:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <PwmSetDecrement25+0x78>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	e003      	b.n	8003b16 <PwmSetDecrement25+0x4a>
 8003b0e:	4b0d      	ldr	r3, [pc, #52]	; (8003b44 <PwmSetDecrement25+0x78>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	80fb      	strh	r3, [r7, #6]

		PwmValue -= 25;
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	3b19      	subs	r3, #25
 8003b1c:	80fb      	strh	r3, [r7, #6]
		if(PwmValue > 1000) PwmValue = 1000;
 8003b1e:	88fb      	ldrh	r3, [r7, #6]
 8003b20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b24:	d902      	bls.n	8003b2c <PwmSetDecrement25+0x60>
 8003b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b2a:	80fb      	strh	r3, [r7, #6]
		PwmChannelSet(CurrentPwmChannel, PwmValue);
 8003b2c:	88fa      	ldrh	r2, [r7, #6]
 8003b2e:	797b      	ldrb	r3, [r7, #5]
 8003b30:	4611      	mov	r1, r2
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff f94c 	bl	8002dd0 <PwmChannelSet>
	}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20000001 	.word	0x20000001
 8003b44:	20002740 	.word	0x20002740

08003b48 <ShowLedLightParam>:

void ShowLedLightParam(LedLightParameter_t *Instance)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	6078      	str	r0, [r7, #4]
	char buff[6];
	uint8_t Length;

	ButtonRegisterPressCallback(&KeyDown, LedLightParamPtrIncrement);
 8003b50:	494d      	ldr	r1, [pc, #308]	; (8003c88 <ShowLedLightParam+0x140>)
 8003b52:	484e      	ldr	r0, [pc, #312]	; (8003c8c <ShowLedLightParam+0x144>)
 8003b54:	f7fe fad7 	bl	8002106 <ButtonRegisterPressCallback>
	SSD1306_Clear(BLACK);
 8003b58:	2000      	movs	r0, #0
 8003b5a:	f001 fd29 	bl	80055b0 <SSD1306_Clear>

	GFX_DrawString(0, 0, "PWM", WHITE, 1);
 8003b5e:	2301      	movs	r3, #1
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2301      	movs	r3, #1
 8003b64:	4a4a      	ldr	r2, [pc, #296]	; (8003c90 <ShowLedLightParam+0x148>)
 8003b66:	2100      	movs	r1, #0
 8003b68:	2000      	movs	r0, #0
 8003b6a:	f7fd fd73 	bl	8001654 <GFX_DrawString>
	GFX_DrawString(0, 32, "Speed", WHITE, 1);
 8003b6e:	2301      	movs	r3, #1
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	2301      	movs	r3, #1
 8003b74:	4a47      	ldr	r2, [pc, #284]	; (8003c94 <ShowLedLightParam+0x14c>)
 8003b76:	2120      	movs	r1, #32
 8003b78:	2000      	movs	r0, #0
 8003b7a:	f7fd fd6b 	bl	8001654 <GFX_DrawString>
	Length = sprintf(buff, "%u", Instance ->PwmMax);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	885b      	ldrh	r3, [r3, #2]
 8003b82:	461a      	mov	r2, r3
 8003b84:	f107 0308 	add.w	r3, r7, #8
 8003b88:	4943      	ldr	r1, [pc, #268]	; (8003c98 <ShowLedLightParam+0x150>)
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f00f fd42 	bl	8013614 <siprintf>
 8003b90:	4603      	mov	r3, r0
 8003b92:	73fb      	strb	r3, [r7, #15]
	GFX_DrawString(64-2 - (Length*5), 16, buff, WHITE, 1);
 8003b94:	7bfa      	ldrb	r2, [r7, #15]
 8003b96:	4613      	mov	r3, r2
 8003b98:	079b      	lsls	r3, r3, #30
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 8003ba4:	f107 0208 	add.w	r2, r7, #8
 8003ba8:	2301      	movs	r3, #1
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	2301      	movs	r3, #1
 8003bae:	2110      	movs	r1, #16
 8003bb0:	f7fd fd50 	bl	8001654 <GFX_DrawString>
	Length = sprintf(buff, "%u", Instance ->DimmerSpeed);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	8a1b      	ldrh	r3, [r3, #16]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	f107 0308 	add.w	r3, r7, #8
 8003bbe:	4936      	ldr	r1, [pc, #216]	; (8003c98 <ShowLedLightParam+0x150>)
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f00f fd27 	bl	8013614 <siprintf>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	73fb      	strb	r3, [r7, #15]
	GFX_DrawString(64-2 - (Length*5), 48, buff, WHITE, 1);
 8003bca:	7bfa      	ldrb	r2, [r7, #15]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	079b      	lsls	r3, r3, #30
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	f103 003e 	add.w	r0, r3, #62	; 0x3e
 8003bda:	f107 0208 	add.w	r2, r7, #8
 8003bde:	2301      	movs	r3, #1
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	2301      	movs	r3, #1
 8003be4:	2130      	movs	r1, #48	; 0x30
 8003be6:	f7fd fd35 	bl	8001654 <GFX_DrawString>

	if(LedParamSetPtr%2 && LedParamSetPtr!=5)
 8003bea:	4b2c      	ldr	r3, [pc, #176]	; (8003c9c <ShowLedLightParam+0x154>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d016      	beq.n	8003c26 <ShowLedLightParam+0xde>
 8003bf8:	4b28      	ldr	r3, [pc, #160]	; (8003c9c <ShowLedLightParam+0x154>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b05      	cmp	r3, #5
 8003bfe:	d012      	beq.n	8003c26 <ShowLedLightParam+0xde>
	{
		ButtonRegisterPressCallback(&KeyUp, LedLightParamDecrement);
 8003c00:	4927      	ldr	r1, [pc, #156]	; (8003ca0 <ShowLedLightParam+0x158>)
 8003c02:	4828      	ldr	r0, [pc, #160]	; (8003ca4 <ShowLedLightParam+0x15c>)
 8003c04:	f7fe fa7f 	bl	8002106 <ButtonRegisterPressCallback>
		ButtonRegisterRepeatCallback(&KeyUp, LedLightParamDecrement25);
 8003c08:	4927      	ldr	r1, [pc, #156]	; (8003ca8 <ShowLedLightParam+0x160>)
 8003c0a:	4826      	ldr	r0, [pc, #152]	; (8003ca4 <ShowLedLightParam+0x15c>)
 8003c0c:	f7fe fa88 	bl	8002120 <ButtonRegisterRepeatCallback>
		GFX_DrawChar(25, 16*LedParamSetPtr, '-', WHITE, 1);
 8003c10:	4b22      	ldr	r3, [pc, #136]	; (8003c9c <ShowLedLightParam+0x154>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	0119      	lsls	r1, r3, #4
 8003c16:	2301      	movs	r3, #1
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	222d      	movs	r2, #45	; 0x2d
 8003c1e:	2019      	movs	r0, #25
 8003c20:	f7fd fc5e 	bl	80014e0 <GFX_DrawChar>
 8003c24:	e02b      	b.n	8003c7e <ShowLedLightParam+0x136>
	}
	else if(!(LedParamSetPtr%2)&& LedParamSetPtr!=5)
 8003c26:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <ShowLedLightParam+0x154>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d117      	bne.n	8003c64 <ShowLedLightParam+0x11c>
 8003c34:	4b19      	ldr	r3, [pc, #100]	; (8003c9c <ShowLedLightParam+0x154>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b05      	cmp	r3, #5
 8003c3a:	d013      	beq.n	8003c64 <ShowLedLightParam+0x11c>
	{
		ButtonRegisterPressCallback(&KeyUp, LedLightParamIncrement);
 8003c3c:	491b      	ldr	r1, [pc, #108]	; (8003cac <ShowLedLightParam+0x164>)
 8003c3e:	4819      	ldr	r0, [pc, #100]	; (8003ca4 <ShowLedLightParam+0x15c>)
 8003c40:	f7fe fa61 	bl	8002106 <ButtonRegisterPressCallback>
		ButtonRegisterRepeatCallback(&KeyUp, LedLightParamIncrement25);
 8003c44:	491a      	ldr	r1, [pc, #104]	; (8003cb0 <ShowLedLightParam+0x168>)
 8003c46:	4817      	ldr	r0, [pc, #92]	; (8003ca4 <ShowLedLightParam+0x15c>)
 8003c48:	f7fe fa6a 	bl	8002120 <ButtonRegisterRepeatCallback>
		GFX_DrawChar(91, 16*(LedParamSetPtr-1), '+', WHITE, 1);
 8003c4c:	4b13      	ldr	r3, [pc, #76]	; (8003c9c <ShowLedLightParam+0x154>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	3b01      	subs	r3, #1
 8003c52:	0119      	lsls	r1, r3, #4
 8003c54:	2301      	movs	r3, #1
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	2301      	movs	r3, #1
 8003c5a:	222b      	movs	r2, #43	; 0x2b
 8003c5c:	205b      	movs	r0, #91	; 0x5b
 8003c5e:	f7fd fc3f 	bl	80014e0 <GFX_DrawChar>
 8003c62:	e00c      	b.n	8003c7e <ShowLedLightParam+0x136>
	}
	else
	{
		ButtonRegisterPressCallback(&KeyUp, ShowMenu);
 8003c64:	4913      	ldr	r1, [pc, #76]	; (8003cb4 <ShowLedLightParam+0x16c>)
 8003c66:	480f      	ldr	r0, [pc, #60]	; (8003ca4 <ShowLedLightParam+0x15c>)
 8003c68:	f7fe fa4d 	bl	8002106 <ButtonRegisterPressCallback>
		GFX_DrawString(0, 47, "<<", WHITE, 1);
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2301      	movs	r3, #1
 8003c72:	4a11      	ldr	r2, [pc, #68]	; (8003cb8 <ShowLedLightParam+0x170>)
 8003c74:	212f      	movs	r1, #47	; 0x2f
 8003c76:	2000      	movs	r0, #0
 8003c78:	f7fd fcec 	bl	8001654 <GFX_DrawString>
	}
}
 8003c7c:	bf00      	nop
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	08003cbd 	.word	0x08003cbd
 8003c8c:	20000db8 	.word	0x20000db8
 8003c90:	080159c8 	.word	0x080159c8
 8003c94:	080159cc 	.word	0x080159cc
 8003c98:	080159c0 	.word	0x080159c0
 8003c9c:	20000002 	.word	0x20000002
 8003ca0:	08003dd1 	.word	0x08003dd1
 8003ca4:	20000d8c 	.word	0x20000d8c
 8003ca8:	08003e45 	.word	0x08003e45
 8003cac:	08003ce9 	.word	0x08003ce9
 8003cb0:	08003d59 	.word	0x08003d59
 8003cb4:	0800341d 	.word	0x0800341d
 8003cb8:	080159c4 	.word	0x080159c4

08003cbc <LedLightParamPtrIncrement>:
	void LedLightParamPtrIncrement(void)
	{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
		LedParamSetPtr++;
 8003cc0:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <LedLightParamPtrIncrement+0x28>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <LedLightParamPtrIncrement+0x28>)
 8003cca:	701a      	strb	r2, [r3, #0]
		if(LedParamSetPtr >= 6)
 8003ccc:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <LedLightParamPtrIncrement+0x28>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b05      	cmp	r3, #5
 8003cd2:	d902      	bls.n	8003cda <LedLightParamPtrIncrement+0x1e>
		{
			LedParamSetPtr = 1;
 8003cd4:	4b03      	ldr	r3, [pc, #12]	; (8003ce4 <LedLightParamPtrIncrement+0x28>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	701a      	strb	r2, [r3, #0]
		}
	}
 8003cda:	bf00      	nop
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bc80      	pop	{r7}
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	20000002 	.word	0x20000002

08003ce8 <LedLightParamIncrement>:
	void LedLightParamIncrement(void)
	{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
		switch(LedParamSetPtr/2)
 8003cec:	4b18      	ldr	r3, [pc, #96]	; (8003d50 <LedLightParamIncrement+0x68>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	085b      	lsrs	r3, r3, #1
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d002      	beq.n	8003cfe <LedLightParamIncrement+0x16>
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d011      	beq.n	8003d20 <LedLightParamIncrement+0x38>
		case 2:
			LedLightActualEdit -> DimmerSpeed++;
			if(LedLightActualEdit -> DimmerSpeed >1000) LedLightActualEdit->DimmerSpeed = 0;
			break;
		}
	}
 8003cfc:	e024      	b.n	8003d48 <LedLightParamIncrement+0x60>
			LedLightActualEdit -> PwmMax++;
 8003cfe:	4b15      	ldr	r3, [pc, #84]	; (8003d54 <LedLightParamIncrement+0x6c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	885a      	ldrh	r2, [r3, #2]
 8003d04:	3201      	adds	r2, #1
 8003d06:	b292      	uxth	r2, r2
 8003d08:	805a      	strh	r2, [r3, #2]
			if(LedLightActualEdit -> PwmMax > 1000) LedLightActualEdit->PwmMax = 0;
 8003d0a:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <LedLightParamIncrement+0x6c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	885b      	ldrh	r3, [r3, #2]
 8003d10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d14:	d915      	bls.n	8003d42 <LedLightParamIncrement+0x5a>
 8003d16:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <LedLightParamIncrement+0x6c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	805a      	strh	r2, [r3, #2]
			break;
 8003d1e:	e010      	b.n	8003d42 <LedLightParamIncrement+0x5a>
			LedLightActualEdit -> DimmerSpeed++;
 8003d20:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <LedLightParamIncrement+0x6c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	8a1a      	ldrh	r2, [r3, #16]
 8003d26:	3201      	adds	r2, #1
 8003d28:	b292      	uxth	r2, r2
 8003d2a:	821a      	strh	r2, [r3, #16]
			if(LedLightActualEdit -> DimmerSpeed >1000) LedLightActualEdit->DimmerSpeed = 0;
 8003d2c:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <LedLightParamIncrement+0x6c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	8a1b      	ldrh	r3, [r3, #16]
 8003d32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d36:	d906      	bls.n	8003d46 <LedLightParamIncrement+0x5e>
 8003d38:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <LedLightParamIncrement+0x6c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	821a      	strh	r2, [r3, #16]
			break;
 8003d40:	e001      	b.n	8003d46 <LedLightParamIncrement+0x5e>
			break;
 8003d42:	bf00      	nop
 8003d44:	e000      	b.n	8003d48 <LedLightParamIncrement+0x60>
			break;
 8003d46:	bf00      	nop
	}
 8003d48:	bf00      	nop
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr
 8003d50:	20000002 	.word	0x20000002
 8003d54:	20001e44 	.word	0x20001e44

08003d58 <LedLightParamIncrement25>:
	void LedLightParamIncrement25(void)
	{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
		switch(LedParamSetPtr/2)
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <LedLightParamIncrement25+0x70>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	085b      	lsrs	r3, r3, #1
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d002      	beq.n	8003d6e <LedLightParamIncrement25+0x16>
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d013      	beq.n	8003d94 <LedLightParamIncrement25+0x3c>
		case 2:
			LedLightActualEdit -> DimmerSpeed += 25;
			if(LedLightActualEdit -> DimmerSpeed >1000) LedLightActualEdit->DimmerSpeed = 0;
			break;
		}
	}
 8003d6c:	e028      	b.n	8003dc0 <LedLightParamIncrement25+0x68>
			LedLightActualEdit -> PwmMax += 25;
 8003d6e:	4b17      	ldr	r3, [pc, #92]	; (8003dcc <LedLightParamIncrement25+0x74>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	885a      	ldrh	r2, [r3, #2]
 8003d74:	4b15      	ldr	r3, [pc, #84]	; (8003dcc <LedLightParamIncrement25+0x74>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3219      	adds	r2, #25
 8003d7a:	b292      	uxth	r2, r2
 8003d7c:	805a      	strh	r2, [r3, #2]
			if(LedLightActualEdit -> PwmMax > 1000) LedLightActualEdit->PwmMax = 0;
 8003d7e:	4b13      	ldr	r3, [pc, #76]	; (8003dcc <LedLightParamIncrement25+0x74>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	885b      	ldrh	r3, [r3, #2]
 8003d84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d88:	d917      	bls.n	8003dba <LedLightParamIncrement25+0x62>
 8003d8a:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <LedLightParamIncrement25+0x74>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	805a      	strh	r2, [r3, #2]
			break;
 8003d92:	e012      	b.n	8003dba <LedLightParamIncrement25+0x62>
			LedLightActualEdit -> DimmerSpeed += 25;
 8003d94:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <LedLightParamIncrement25+0x74>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	8a1a      	ldrh	r2, [r3, #16]
 8003d9a:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <LedLightParamIncrement25+0x74>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3219      	adds	r2, #25
 8003da0:	b292      	uxth	r2, r2
 8003da2:	821a      	strh	r2, [r3, #16]
			if(LedLightActualEdit -> DimmerSpeed >1000) LedLightActualEdit->DimmerSpeed = 0;
 8003da4:	4b09      	ldr	r3, [pc, #36]	; (8003dcc <LedLightParamIncrement25+0x74>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	8a1b      	ldrh	r3, [r3, #16]
 8003daa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dae:	d906      	bls.n	8003dbe <LedLightParamIncrement25+0x66>
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <LedLightParamIncrement25+0x74>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2200      	movs	r2, #0
 8003db6:	821a      	strh	r2, [r3, #16]
			break;
 8003db8:	e001      	b.n	8003dbe <LedLightParamIncrement25+0x66>
			break;
 8003dba:	bf00      	nop
 8003dbc:	e000      	b.n	8003dc0 <LedLightParamIncrement25+0x68>
			break;
 8003dbe:	bf00      	nop
	}
 8003dc0:	bf00      	nop
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr
 8003dc8:	20000002 	.word	0x20000002
 8003dcc:	20001e44 	.word	0x20001e44

08003dd0 <LedLightParamDecrement>:
	void LedLightParamDecrement(void)
	{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
		switch((LedParamSetPtr/2)+1)
 8003dd4:	4b19      	ldr	r3, [pc, #100]	; (8003e3c <LedLightParamDecrement+0x6c>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	085b      	lsrs	r3, r3, #1
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	3301      	adds	r3, #1
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d002      	beq.n	8003de8 <LedLightParamDecrement+0x18>
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d012      	beq.n	8003e0c <LedLightParamDecrement+0x3c>
			break;
		case 2:
			LedLightActualEdit -> DimmerSpeed--;
			if(LedLightActualEdit -> DimmerSpeed > 1000) LedLightActualEdit -> DimmerSpeed = 1000;
		}
	}
 8003de6:	e024      	b.n	8003e32 <LedLightParamDecrement+0x62>
			LedLightActualEdit -> PwmMax--;
 8003de8:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <LedLightParamDecrement+0x70>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	885a      	ldrh	r2, [r3, #2]
 8003dee:	3a01      	subs	r2, #1
 8003df0:	b292      	uxth	r2, r2
 8003df2:	805a      	strh	r2, [r3, #2]
			if(LedLightActualEdit -> PwmMax > 1000) LedLightActualEdit->PwmMax = 1000;
 8003df4:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <LedLightParamDecrement+0x70>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	885b      	ldrh	r3, [r3, #2]
 8003dfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dfe:	d917      	bls.n	8003e30 <LedLightParamDecrement+0x60>
 8003e00:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <LedLightParamDecrement+0x70>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e08:	805a      	strh	r2, [r3, #2]
			break;
 8003e0a:	e011      	b.n	8003e30 <LedLightParamDecrement+0x60>
			LedLightActualEdit -> DimmerSpeed--;
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <LedLightParamDecrement+0x70>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	8a1a      	ldrh	r2, [r3, #16]
 8003e12:	3a01      	subs	r2, #1
 8003e14:	b292      	uxth	r2, r2
 8003e16:	821a      	strh	r2, [r3, #16]
			if(LedLightActualEdit -> DimmerSpeed > 1000) LedLightActualEdit -> DimmerSpeed = 1000;
 8003e18:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <LedLightParamDecrement+0x70>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	8a1b      	ldrh	r3, [r3, #16]
 8003e1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e22:	d906      	bls.n	8003e32 <LedLightParamDecrement+0x62>
 8003e24:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <LedLightParamDecrement+0x70>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e2c:	821a      	strh	r2, [r3, #16]
	}
 8003e2e:	e000      	b.n	8003e32 <LedLightParamDecrement+0x62>
			break;
 8003e30:	bf00      	nop
	}
 8003e32:	bf00      	nop
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	20000002 	.word	0x20000002
 8003e40:	20001e44 	.word	0x20001e44

08003e44 <LedLightParamDecrement25>:
	void LedLightParamDecrement25(void)
	{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
		switch((LedParamSetPtr/2)+1)
 8003e48:	4b1b      	ldr	r3, [pc, #108]	; (8003eb8 <LedLightParamDecrement25+0x74>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	085b      	lsrs	r3, r3, #1
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	3301      	adds	r3, #1
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d002      	beq.n	8003e5c <LedLightParamDecrement25+0x18>
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d014      	beq.n	8003e84 <LedLightParamDecrement25+0x40>
			break;
		case 2:
			LedLightActualEdit -> DimmerSpeed -= 25;
			if(LedLightActualEdit -> DimmerSpeed > 1000) LedLightActualEdit -> DimmerSpeed = 1000;
		}
	}
 8003e5a:	e028      	b.n	8003eae <LedLightParamDecrement25+0x6a>
			LedLightActualEdit -> PwmMax -= 25;
 8003e5c:	4b17      	ldr	r3, [pc, #92]	; (8003ebc <LedLightParamDecrement25+0x78>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	885a      	ldrh	r2, [r3, #2]
 8003e62:	4b16      	ldr	r3, [pc, #88]	; (8003ebc <LedLightParamDecrement25+0x78>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3a19      	subs	r2, #25
 8003e68:	b292      	uxth	r2, r2
 8003e6a:	805a      	strh	r2, [r3, #2]
			if(LedLightActualEdit -> PwmMax > 1000) LedLightActualEdit->PwmMax = 1000;
 8003e6c:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <LedLightParamDecrement25+0x78>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	885b      	ldrh	r3, [r3, #2]
 8003e72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e76:	d919      	bls.n	8003eac <LedLightParamDecrement25+0x68>
 8003e78:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <LedLightParamDecrement25+0x78>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e80:	805a      	strh	r2, [r3, #2]
			break;
 8003e82:	e013      	b.n	8003eac <LedLightParamDecrement25+0x68>
			LedLightActualEdit -> DimmerSpeed -= 25;
 8003e84:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <LedLightParamDecrement25+0x78>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	8a1a      	ldrh	r2, [r3, #16]
 8003e8a:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <LedLightParamDecrement25+0x78>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3a19      	subs	r2, #25
 8003e90:	b292      	uxth	r2, r2
 8003e92:	821a      	strh	r2, [r3, #16]
			if(LedLightActualEdit -> DimmerSpeed > 1000) LedLightActualEdit -> DimmerSpeed = 1000;
 8003e94:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <LedLightParamDecrement25+0x78>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	8a1b      	ldrh	r3, [r3, #16]
 8003e9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e9e:	d906      	bls.n	8003eae <LedLightParamDecrement25+0x6a>
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <LedLightParamDecrement25+0x78>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ea8:	821a      	strh	r2, [r3, #16]
	}
 8003eaa:	e000      	b.n	8003eae <LedLightParamDecrement25+0x6a>
			break;
 8003eac:	bf00      	nop
	}
 8003eae:	bf00      	nop
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000002 	.word	0x20000002
 8003ebc:	20001e44 	.word	0x20001e44

08003ec0 <ShowLedLightParamLogo>:
	void ShowLedLightParamLogo(void)
	{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
		HideMenu();
 8003ec4:	f7ff fad2 	bl	800346c <HideMenu>
		ActualVisibleFunc = ShowLedLightParamLogo;
 8003ec8:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <ShowLedLightParamLogo+0x24>)
 8003eca:	4a07      	ldr	r2, [pc, #28]	; (8003ee8 <ShowLedLightParamLogo+0x28>)
 8003ecc:	601a      	str	r2, [r3, #0]
		LedLightActualEdit = &Logo;
 8003ece:	4b07      	ldr	r3, [pc, #28]	; (8003eec <ShowLedLightParamLogo+0x2c>)
 8003ed0:	4a07      	ldr	r2, [pc, #28]	; (8003ef0 <ShowLedLightParamLogo+0x30>)
 8003ed2:	601a      	str	r2, [r3, #0]
		ShowLedLightParam(LedLightActualEdit);
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <ShowLedLightParamLogo+0x2c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff fe35 	bl	8003b48 <ShowLedLightParam>
	}
 8003ede:	bf00      	nop
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20001e90 	.word	0x20001e90
 8003ee8:	08003ec1 	.word	0x08003ec1
 8003eec:	20001e44 	.word	0x20001e44
 8003ef0:	20001e64 	.word	0x20001e64

08003ef4 <ShowLedLightParamLight>:
	void ShowLedLightParamLight(void)
	{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
		HideMenu();
 8003ef8:	f7ff fab8 	bl	800346c <HideMenu>
		ActualVisibleFunc = ShowLedLightParamLight;
 8003efc:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <ShowLedLightParamLight+0x24>)
 8003efe:	4a07      	ldr	r2, [pc, #28]	; (8003f1c <ShowLedLightParamLight+0x28>)
 8003f00:	601a      	str	r2, [r3, #0]
		LedLightActualEdit = &Light;
 8003f02:	4b07      	ldr	r3, [pc, #28]	; (8003f20 <ShowLedLightParamLight+0x2c>)
 8003f04:	4a07      	ldr	r2, [pc, #28]	; (8003f24 <ShowLedLightParamLight+0x30>)
 8003f06:	601a      	str	r2, [r3, #0]
		ShowLedLightParam(LedLightActualEdit);
 8003f08:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <ShowLedLightParamLight+0x2c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff fe1b 	bl	8003b48 <ShowLedLightParam>
	}
 8003f12:	bf00      	nop
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20001e90 	.word	0x20001e90
 8003f1c:	08003ef5 	.word	0x08003ef5
 8003f20:	20001e44 	.word	0x20001e44
 8003f24:	20001e78 	.word	0x20001e78

08003f28 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
	if(hadc ->Instance == ADC1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a08      	ldr	r2, [pc, #32]	; (8003f58 <HAL_ADC_ConvCpltCallback+0x30>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d109      	bne.n	8003f4e <HAL_ADC_ConvCpltCallback+0x26>
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)Measurements.Adc1Value, 4);
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	4907      	ldr	r1, [pc, #28]	; (8003f5c <HAL_ADC_ConvCpltCallback+0x34>)
 8003f3e:	4808      	ldr	r0, [pc, #32]	; (8003f60 <HAL_ADC_ConvCpltCallback+0x38>)
 8003f40:	f002 fabc 	bl	80064bc <HAL_ADC_Start_DMA>
		ITCount++;
 8003f44:	4b07      	ldr	r3, [pc, #28]	; (8003f64 <HAL_ADC_ConvCpltCallback+0x3c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	4a06      	ldr	r2, [pc, #24]	; (8003f64 <HAL_ADC_ConvCpltCallback+0x3c>)
 8003f4c:	6013      	str	r3, [r2, #0]
	}
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	40012400 	.word	0x40012400
 8003f5c:	20001e4c 	.word	0x20001e4c
 8003f60:	20000bf8 	.word	0x20000bf8
 8003f64:	20001e48 	.word	0x20001e48

08003f68 <MeasurementConversion>:

void MeasurementConversion(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
	Measurements.Voltage12 = Measurements.Voltage12Raw /1241.0F * 5;
 8003f6c:	4b23      	ldr	r3, [pc, #140]	; (8003ffc <MeasurementConversion+0x94>)
 8003f6e:	881b      	ldrh	r3, [r3, #0]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fc feae 	bl	8000cd4 <__aeabi_i2f>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	4921      	ldr	r1, [pc, #132]	; (8004000 <MeasurementConversion+0x98>)
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fc ffb1 	bl	8000ee4 <__aeabi_fdiv>
 8003f82:	4603      	mov	r3, r0
 8003f84:	491f      	ldr	r1, [pc, #124]	; (8004004 <MeasurementConversion+0x9c>)
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fc fef8 	bl	8000d7c <__aeabi_fmul>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	461a      	mov	r2, r3
 8003f90:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <MeasurementConversion+0x94>)
 8003f92:	609a      	str	r2, [r3, #8]
	Measurements.Voltage5 = Measurements.Voltage5Raw /1241.0F*2;
 8003f94:	4b19      	ldr	r3, [pc, #100]	; (8003ffc <MeasurementConversion+0x94>)
 8003f96:	885b      	ldrh	r3, [r3, #2]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fc fe9a 	bl	8000cd4 <__aeabi_i2f>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	4917      	ldr	r1, [pc, #92]	; (8004000 <MeasurementConversion+0x98>)
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fc ff9d 	bl	8000ee4 <__aeabi_fdiv>
 8003faa:	4603      	mov	r3, r0
 8003fac:	4619      	mov	r1, r3
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fc fddc 	bl	8000b6c <__addsf3>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <MeasurementConversion+0x94>)
 8003fba:	60da      	str	r2, [r3, #12]
	Measurements.InternalTemperature = ((Measurements.InternalTemperatureRaw /1241.0F) - V25) / AVG_SLOPE + 25;
 8003fbc:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <MeasurementConversion+0x94>)
 8003fbe:	88db      	ldrh	r3, [r3, #6]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fc fe86 	bl	8000cd4 <__aeabi_i2f>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	490d      	ldr	r1, [pc, #52]	; (8004000 <MeasurementConversion+0x98>)
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fc ff89 	bl	8000ee4 <__aeabi_fdiv>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	490c      	ldr	r1, [pc, #48]	; (8004008 <MeasurementConversion+0xa0>)
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fc fdc6 	bl	8000b68 <__aeabi_fsub>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	490b      	ldr	r1, [pc, #44]	; (800400c <MeasurementConversion+0xa4>)
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fc ff7f 	bl	8000ee4 <__aeabi_fdiv>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4909      	ldr	r1, [pc, #36]	; (8004010 <MeasurementConversion+0xa8>)
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fc fdbe 	bl	8000b6c <__addsf3>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	4b01      	ldr	r3, [pc, #4]	; (8003ffc <MeasurementConversion+0x94>)
 8003ff6:	615a      	str	r2, [r3, #20]
}
 8003ff8:	bf00      	nop
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20001e4c 	.word	0x20001e4c
 8004000:	449b2000 	.word	0x449b2000
 8004004:	40a00000 	.word	0x40a00000
 8004008:	3fb70a3d 	.word	0x3fb70a3d
 800400c:	4089999a 	.word	0x4089999a
 8004010:	41c80000 	.word	0x41c80000

08004014 <IntervalFunc10000ms>:


void IntervalFunc10000ms(void)
{
 8004014:	b5b0      	push	{r4, r5, r7, lr}
 8004016:	b0c2      	sub	sp, #264	; 0x108
 8004018:	af02      	add	r7, sp, #8
	if(HAL_GetTick() - OldTick10000ms >10000)
 800401a:	f002 f919 	bl	8006250 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	4b13      	ldr	r3, [pc, #76]	; (8004070 <IntervalFunc10000ms+0x5c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	f242 7210 	movw	r2, #10000	; 0x2710
 800402a:	4293      	cmp	r3, r2
 800402c:	d91b      	bls.n	8004066 <IntervalFunc10000ms+0x52>
	{
		char MsgToSend[255];
		EepromRefresh(&M24C02);
 800402e:	4811      	ldr	r0, [pc, #68]	; (8004074 <IntervalFunc10000ms+0x60>)
 8004030:	f7fd fa28 	bl	8001484 <EepromRefresh>

		sprintf(MsgToSend, "10/0x%lx%lx%lx",
 8004034:	f002 f94e 	bl	80062d4 <HAL_GetUIDw2>
 8004038:	4604      	mov	r4, r0
 800403a:	f002 f941 	bl	80062c0 <HAL_GetUIDw1>
 800403e:	4605      	mov	r5, r0
 8004040:	f002 f934 	bl	80062ac <HAL_GetUIDw0>
 8004044:	4603      	mov	r3, r0
 8004046:	4638      	mov	r0, r7
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	462b      	mov	r3, r5
 800404c:	4622      	mov	r2, r4
 800404e:	490a      	ldr	r1, [pc, #40]	; (8004078 <IntervalFunc10000ms+0x64>)
 8004050:	f00f fae0 	bl	8013614 <siprintf>
				HAL_GetUIDw2(),
				HAL_GetUIDw1(),
				HAL_GetUIDw0());
		UsbBuffWrite(MsgToSend);
 8004054:	463b      	mov	r3, r7
 8004056:	4618      	mov	r0, r3
 8004058:	f000 f99e 	bl	8004398 <UsbBuffWrite>
		OldTick10000ms = HAL_GetTick();
 800405c:	f002 f8f8 	bl	8006250 <HAL_GetTick>
 8004060:	4603      	mov	r3, r0
 8004062:	4a03      	ldr	r2, [pc, #12]	; (8004070 <IntervalFunc10000ms+0x5c>)
 8004064:	6013      	str	r3, [r2, #0]
	}
}
 8004066:	bf00      	nop
 8004068:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800406c:	46bd      	mov	sp, r7
 800406e:	bdb0      	pop	{r4, r5, r7, pc}
 8004070:	20001e18 	.word	0x20001e18
 8004074:	20001e2c 	.word	0x20001e2c
 8004078:	080159d4 	.word	0x080159d4

0800407c <IntervalFunc500ms>:


void IntervalFunc500ms(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
	  if(HAL_GetTick() - OldTick500ms >500)
 8004080:	f002 f8e6 	bl	8006250 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	4b22      	ldr	r3, [pc, #136]	; (8004110 <IntervalFunc500ms+0x94>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004090:	d93b      	bls.n	800410a <IntervalFunc500ms+0x8e>
	  {
		  OldTick500ms = HAL_GetTick();
 8004092:	f002 f8dd 	bl	8006250 <HAL_GetTick>
 8004096:	4603      	mov	r3, r0
 8004098:	4a1d      	ldr	r2, [pc, #116]	; (8004110 <IntervalFunc500ms+0x94>)
 800409a:	6013      	str	r3, [r2, #0]
//		  }



		  static uint8_t TempMeasureFlag = 0;
		  if(!TempMeasureFlag)
 800409c:	4b1d      	ldr	r3, [pc, #116]	; (8004114 <IntervalFunc500ms+0x98>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10e      	bne.n	80040c2 <IntervalFunc500ms+0x46>
		  {
			  if (ds18b20_start_measure(NULL) != HAL_OK) ERROR_DS;
 80040a4:	2000      	movs	r0, #0
 80040a6:	f7fe f9e0 	bl	800246a <ds18b20_start_measure>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d004      	beq.n	80040ba <IntervalFunc500ms+0x3e>
 80040b0:	4a19      	ldr	r2, [pc, #100]	; (8004118 <IntervalFunc500ms+0x9c>)
 80040b2:	7813      	ldrb	r3, [r2, #0]
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	7013      	strb	r3, [r2, #0]
			  TempMeasureFlag = 1;
 80040ba:	4b16      	ldr	r3, [pc, #88]	; (8004114 <IntervalFunc500ms+0x98>)
 80040bc:	2201      	movs	r2, #1
 80040be:	701a      	strb	r2, [r3, #0]
 80040c0:	e01b      	b.n	80040fa <IntervalFunc500ms+0x7e>
		  }
		  else
		  {
			  Temp = ds18b20_get_temp_wo_fp(NULL);
 80040c2:	2000      	movs	r0, #0
 80040c4:	f7fe fa0f 	bl	80024e6 <ds18b20_get_temp_wo_fp>
 80040c8:	4603      	mov	r3, r0
 80040ca:	461a      	mov	r2, r3
 80040cc:	4b13      	ldr	r3, [pc, #76]	; (800411c <IntervalFunc500ms+0xa0>)
 80040ce:	601a      	str	r2, [r3, #0]
			  Temperature = Temp;
 80040d0:	4b12      	ldr	r3, [pc, #72]	; (800411c <IntervalFunc500ms+0xa0>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fc fdfd 	bl	8000cd4 <__aeabi_i2f>
 80040da:	4603      	mov	r3, r0
 80040dc:	4a10      	ldr	r2, [pc, #64]	; (8004120 <IntervalFunc500ms+0xa4>)
 80040de:	6013      	str	r3, [r2, #0]
			  Temperature = Temperature/100;
 80040e0:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <IntervalFunc500ms+0xa4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	490f      	ldr	r1, [pc, #60]	; (8004124 <IntervalFunc500ms+0xa8>)
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fc fefc 	bl	8000ee4 <__aeabi_fdiv>
 80040ec:	4603      	mov	r3, r0
 80040ee:	461a      	mov	r2, r3
 80040f0:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <IntervalFunc500ms+0xa4>)
 80040f2:	601a      	str	r2, [r3, #0]
			  TempMeasureFlag = 0;
 80040f4:	4b07      	ldr	r3, [pc, #28]	; (8004114 <IntervalFunc500ms+0x98>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	701a      	strb	r2, [r3, #0]
		  }

			if(ErrorCode.Error > 0) LedBlinkOne(&ErrorBlink);
 80040fa:	4b07      	ldr	r3, [pc, #28]	; (8004118 <IntervalFunc500ms+0x9c>)
 80040fc:	881b      	ldrh	r3, [r3, #0]
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <IntervalFunc500ms+0x8e>
 8004104:	4808      	ldr	r0, [pc, #32]	; (8004128 <IntervalFunc500ms+0xac>)
 8004106:	f7fe fbe6 	bl	80028d6 <LedBlinkOne>
	  }
}
 800410a:	bf00      	nop
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20001e0c 	.word	0x20001e0c
 8004114:	20001e94 	.word	0x20001e94
 8004118:	20001e8c 	.word	0x20001e8c
 800411c:	20001e1c 	.word	0x20001e1c
 8004120:	20001e20 	.word	0x20001e20
 8004124:	42c80000 	.word	0x42c80000
 8004128:	20000df0 	.word	0x20000df0

0800412c <IntervalFunc100ms>:

void IntervalFunc100ms(void)
{
 800412c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004130:	b0d7      	sub	sp, #348	; 0x15c
 8004132:	af0e      	add	r7, sp, #56	; 0x38
	if(HAL_GetTick() - OldTick100ms >100)
 8004134:	f002 f88c 	bl	8006250 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	4b49      	ldr	r3, [pc, #292]	; (8004260 <IntervalFunc100ms+0x134>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b64      	cmp	r3, #100	; 0x64
 8004142:	f240 8087 	bls.w	8004254 <IntervalFunc100ms+0x128>
		/*
		 * Message to send id. 0.
		 * 0/Input 16bit/Output 16bit/PWM1/PWM2/PWM3/PWM4/Temperature/12V/5V/Current
		 */
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
									(uint16_t*)((~GPIOG->IDR)&0xffff),
 8004146:	4b47      	ldr	r3, [pc, #284]	; (8004264 <IntervalFunc100ms+0x138>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	43db      	mvns	r3, r3
 800414c:	b29b      	uxth	r3, r3
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 800414e:	61fb      	str	r3, [r7, #28]
									(uint16_t*)GPIOE->ODR,
 8004150:	4b45      	ldr	r3, [pc, #276]	; (8004268 <IntervalFunc100ms+0x13c>)
 8004152:	68db      	ldr	r3, [r3, #12]
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 8004154:	61bb      	str	r3, [r7, #24]
									(uint16_t*)__HAL_TIM_GetCompare(&htim4, TIM_CHANNEL_1),
 8004156:	4b45      	ldr	r3, [pc, #276]	; (800426c <IntervalFunc100ms+0x140>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 800415c:	461e      	mov	r6, r3
									(uint16_t*)__HAL_TIM_GetCompare(&htim4, TIM_CHANNEL_2),
 800415e:	4b43      	ldr	r3, [pc, #268]	; (800426c <IntervalFunc100ms+0x140>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 8004164:	617b      	str	r3, [r7, #20]
									(uint16_t*)__HAL_TIM_GetCompare(&htim4, TIM_CHANNEL_3),
 8004166:	4b41      	ldr	r3, [pc, #260]	; (800426c <IntervalFunc100ms+0x140>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 800416c:	613b      	str	r3, [r7, #16]
									(uint16_t*)__HAL_TIM_GetCompare(&htim4, TIM_CHANNEL_4),
 800416e:	4b3f      	ldr	r3, [pc, #252]	; (800426c <IntervalFunc100ms+0x140>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	4b3e      	ldr	r3, [pc, #248]	; (8004270 <IntervalFunc100ms+0x144>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4618      	mov	r0, r3
 800417c:	f7fc f9c0 	bl	8000500 <__aeabi_f2d>
 8004180:	4682      	mov	sl, r0
 8004182:	468b      	mov	fp, r1
									Temperature,
									Measurements.InternalTemperature,
 8004184:	4b3b      	ldr	r3, [pc, #236]	; (8004274 <IntervalFunc100ms+0x148>)
 8004186:	695b      	ldr	r3, [r3, #20]
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 8004188:	4618      	mov	r0, r3
 800418a:	f7fc f9b9 	bl	8000500 <__aeabi_f2d>
 800418e:	e9c7 0100 	strd	r0, r1, [r7]
									Measurements.Voltage12,
 8004192:	4b38      	ldr	r3, [pc, #224]	; (8004274 <IntervalFunc100ms+0x148>)
 8004194:	689b      	ldr	r3, [r3, #8]
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 8004196:	4618      	mov	r0, r3
 8004198:	f7fc f9b2 	bl	8000500 <__aeabi_f2d>
 800419c:	4680      	mov	r8, r0
 800419e:	4689      	mov	r9, r1
									Measurements.Voltage5,
 80041a0:	4b34      	ldr	r3, [pc, #208]	; (8004274 <IntervalFunc100ms+0x148>)
 80041a2:	68db      	ldr	r3, [r3, #12]
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fc f9ab 	bl	8000500 <__aeabi_f2d>
 80041aa:	4604      	mov	r4, r0
 80041ac:	460d      	mov	r5, r1
									Measurements.Current);
 80041ae:	4b31      	ldr	r3, [pc, #196]	; (8004274 <IntervalFunc100ms+0x148>)
 80041b0:	691b      	ldr	r3, [r3, #16]
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f/%.2f/%.2f/%.2f",
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fc f9a4 	bl	8000500 <__aeabi_f2d>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	f107 0020 	add.w	r0, r7, #32
 80041c0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80041c4:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80041c8:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80041cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80041d0:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80041d4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80041d8:	68f9      	ldr	r1, [r7, #12]
 80041da:	9103      	str	r1, [sp, #12]
 80041dc:	6939      	ldr	r1, [r7, #16]
 80041de:	9102      	str	r1, [sp, #8]
 80041e0:	6979      	ldr	r1, [r7, #20]
 80041e2:	9101      	str	r1, [sp, #4]
 80041e4:	9600      	str	r6, [sp, #0]
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	69fa      	ldr	r2, [r7, #28]
 80041ea:	4923      	ldr	r1, [pc, #140]	; (8004278 <IntervalFunc100ms+0x14c>)
 80041ec:	f00f fa12 	bl	8013614 <siprintf>
		UsbBuffWrite(MsgToSend);
 80041f0:	f107 0320 	add.w	r3, r7, #32
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 f8cf 	bl	8004398 <UsbBuffWrite>

		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u/%u",
				Light.Mode,
 80041fa:	4b20      	ldr	r3, [pc, #128]	; (800427c <IntervalFunc100ms+0x150>)
 80041fc:	f993 3000 	ldrsb.w	r3, [r3]
		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u/%u",
 8004200:	461e      	mov	r6, r3
				Light.PwmMax,
 8004202:	4b1e      	ldr	r3, [pc, #120]	; (800427c <IntervalFunc100ms+0x150>)
 8004204:	885b      	ldrh	r3, [r3, #2]
		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u/%u",
 8004206:	469c      	mov	ip, r3
				Light.DimmerSpeed,
 8004208:	4b1c      	ldr	r3, [pc, #112]	; (800427c <IntervalFunc100ms+0x150>)
 800420a:	8a1b      	ldrh	r3, [r3, #16]
		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u/%u",
 800420c:	461a      	mov	r2, r3
				Logo.Mode,
 800420e:	4b1c      	ldr	r3, [pc, #112]	; (8004280 <IntervalFunc100ms+0x154>)
 8004210:	f993 3000 	ldrsb.w	r3, [r3]
		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u/%u",
 8004214:	4619      	mov	r1, r3
				Logo.PwmMax,
 8004216:	4b1a      	ldr	r3, [pc, #104]	; (8004280 <IntervalFunc100ms+0x154>)
 8004218:	885b      	ldrh	r3, [r3, #2]
		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u/%u",
 800421a:	461c      	mov	r4, r3
				Logo.DimmerSpeed,
 800421c:	4b18      	ldr	r3, [pc, #96]	; (8004280 <IntervalFunc100ms+0x154>)
 800421e:	8a1b      	ldrh	r3, [r3, #16]
		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u/%u",
 8004220:	461d      	mov	r5, r3
				ErrorCode.Error);
 8004222:	4b18      	ldr	r3, [pc, #96]	; (8004284 <IntervalFunc100ms+0x158>)
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	b29b      	uxth	r3, r3
		sprintf(MsgToSend, "1/%i/%u/%u/%i/%u/%u/%u",
 8004228:	f107 0020 	add.w	r0, r7, #32
 800422c:	9304      	str	r3, [sp, #16]
 800422e:	9503      	str	r5, [sp, #12]
 8004230:	9402      	str	r4, [sp, #8]
 8004232:	9101      	str	r1, [sp, #4]
 8004234:	9200      	str	r2, [sp, #0]
 8004236:	4663      	mov	r3, ip
 8004238:	4632      	mov	r2, r6
 800423a:	4913      	ldr	r1, [pc, #76]	; (8004288 <IntervalFunc100ms+0x15c>)
 800423c:	f00f f9ea 	bl	8013614 <siprintf>
		UsbBuffWrite(MsgToSend);
 8004240:	f107 0320 	add.w	r3, r7, #32
 8004244:	4618      	mov	r0, r3
 8004246:	f000 f8a7 	bl	8004398 <UsbBuffWrite>

		OldTick100ms = HAL_GetTick();
 800424a:	f002 f801 	bl	8006250 <HAL_GetTick>
 800424e:	4603      	mov	r3, r0
 8004250:	4a03      	ldr	r2, [pc, #12]	; (8004260 <IntervalFunc100ms+0x134>)
 8004252:	6013      	str	r3, [r2, #0]
	}

}
 8004254:	bf00      	nop
 8004256:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800425a:	46bd      	mov	sp, r7
 800425c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004260:	20001e10 	.word	0x20001e10
 8004264:	40012000 	.word	0x40012000
 8004268:	40011800 	.word	0x40011800
 800426c:	20002740 	.word	0x20002740
 8004270:	20001e20 	.word	0x20001e20
 8004274:	20001e4c 	.word	0x20001e4c
 8004278:	080159e4 	.word	0x080159e4
 800427c:	20001e78 	.word	0x20001e78
 8004280:	20001e64 	.word	0x20001e64
 8004284:	20001e8c 	.word	0x20001e8c
 8004288:	08015a14 	.word	0x08015a14

0800428c <IntervalFunc50ms>:

void IntervalFunc50ms(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - OldTick50ms >50)
 8004290:	f001 ffde 	bl	8006250 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	4b13      	ldr	r3, [pc, #76]	; (80042e4 <IntervalFunc50ms+0x58>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b32      	cmp	r3, #50	; 0x32
 800429e:	d91f      	bls.n	80042e0 <IntervalFunc50ms+0x54>
	{
		if(ActualVisibleFunc != ShowPWMsetMenu && ActualVisibleFunc != ShowLedLightParamLight && ActualVisibleFunc != ShowLedLightParamLogo)
 80042a0:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <IntervalFunc50ms+0x5c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a11      	ldr	r2, [pc, #68]	; (80042ec <IntervalFunc50ms+0x60>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00c      	beq.n	80042c4 <IntervalFunc50ms+0x38>
 80042aa:	4b0f      	ldr	r3, [pc, #60]	; (80042e8 <IntervalFunc50ms+0x5c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a10      	ldr	r2, [pc, #64]	; (80042f0 <IntervalFunc50ms+0x64>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d007      	beq.n	80042c4 <IntervalFunc50ms+0x38>
 80042b4:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <IntervalFunc50ms+0x5c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a0e      	ldr	r2, [pc, #56]	; (80042f4 <IntervalFunc50ms+0x68>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d002      	beq.n	80042c4 <IntervalFunc50ms+0x38>
		{
			EepromBackup(&M24C02);
 80042be:	480e      	ldr	r0, [pc, #56]	; (80042f8 <IntervalFunc50ms+0x6c>)
 80042c0:	f7fd f8a0 	bl	8001404 <EepromBackup>
		}

		if(ActualVisibleFunc != NULL)
 80042c4:	4b08      	ldr	r3, [pc, #32]	; (80042e8 <IntervalFunc50ms+0x5c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <IntervalFunc50ms+0x46>
		{
			ActualVisibleFunc();
 80042cc:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <IntervalFunc50ms+0x5c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4798      	blx	r3
		}

		SSD1306_Display();
 80042d2:	f001 f98b 	bl	80055ec <SSD1306_Display>

		OldTick50ms = HAL_GetTick();
 80042d6:	f001 ffbb 	bl	8006250 <HAL_GetTick>
 80042da:	4603      	mov	r3, r0
 80042dc:	4a01      	ldr	r2, [pc, #4]	; (80042e4 <IntervalFunc50ms+0x58>)
 80042de:	6013      	str	r3, [r2, #0]
	}

}
 80042e0:	bf00      	nop
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	20001e14 	.word	0x20001e14
 80042e8:	20001e90 	.word	0x20001e90
 80042ec:	080037d5 	.word	0x080037d5
 80042f0:	08003ef5 	.word	0x08003ef5
 80042f4:	08003ec1 	.word	0x08003ec1
 80042f8:	20001e2c 	.word	0x20001e2c

080042fc <HAL_I2C_MemTxCpltCallback>:



void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
	m24cxxWcSetIt(&M24C02, hi2c);
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	4803      	ldr	r0, [pc, #12]	; (8004314 <HAL_I2C_MemTxCpltCallback+0x18>)
 8004308:	f7fd fdd4 	bl	8001eb4 <m24cxxWcSetIt>
}
 800430c:	bf00      	nop
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	20001e2c 	.word	0x20001e2c

08004318 <CDC_ReveiveCallback>:

void CDC_ReveiveCallback(uint8_t *Buffer, uint8_t Length)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
	if(Length > 0)
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d02a      	beq.n	8004380 <CDC_ReveiveCallback+0x68>
	{
		uint8_t i = 0;
 800432a:	2300      	movs	r3, #0
 800432c:	73fb      	strb	r3, [r7, #15]
		LedBlinkOne(&CommPcUsb); //Control Led
 800432e:	4816      	ldr	r0, [pc, #88]	; (8004388 <CDC_ReveiveCallback+0x70>)
 8004330:	f7fe fad1 	bl	80028d6 <LedBlinkOne>
		while(i < Length)
 8004334:	e020      	b.n	8004378 <CDC_ReveiveCallback+0x60>
		{
		if (RB_OK == Ring_Buffer_Write(&ReceiveBuffer, Buffer[i]))
 8004336:	7bfb      	ldrb	r3, [r7, #15]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	4413      	add	r3, r2
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	4619      	mov	r1, r3
 8004340:	4812      	ldr	r0, [pc, #72]	; (800438c <CDC_ReveiveCallback+0x74>)
 8004342:	f001 f82b 	bl	800539c <Ring_Buffer_Write>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10c      	bne.n	8004366 <CDC_ReveiveCallback+0x4e>
		{
			if(Buffer[i] == ENDLINE)
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	4413      	add	r3, r2
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	2b5e      	cmp	r3, #94	; 0x5e
 8004356:	d10c      	bne.n	8004372 <CDC_ReveiveCallback+0x5a>
			{
				LineCounter++;
 8004358:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <CDC_ReveiveCallback+0x78>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	3301      	adds	r3, #1
 800435e:	b2da      	uxtb	r2, r3
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <CDC_ReveiveCallback+0x78>)
 8004362:	701a      	strb	r2, [r3, #0]
 8004364:	e005      	b.n	8004372 <CDC_ReveiveCallback+0x5a>
			}
		}
		else
		{
			Ring_Buffer_Flush(&ReceiveBuffer);
 8004366:	4809      	ldr	r0, [pc, #36]	; (800438c <CDC_ReveiveCallback+0x74>)
 8004368:	f001 f840 	bl	80053ec <Ring_Buffer_Flush>
			UsbBuffWrite("ERROR");
 800436c:	4809      	ldr	r0, [pc, #36]	; (8004394 <CDC_ReveiveCallback+0x7c>)
 800436e:	f000 f813 	bl	8004398 <UsbBuffWrite>
		}
		i++;
 8004372:	7bfb      	ldrb	r3, [r7, #15]
 8004374:	3301      	adds	r3, #1
 8004376:	73fb      	strb	r3, [r7, #15]
		while(i < Length)
 8004378:	7bfa      	ldrb	r2, [r7, #15]
 800437a:	78fb      	ldrb	r3, [r7, #3]
 800437c:	429a      	cmp	r2, r3
 800437e:	d3da      	bcc.n	8004336 <CDC_ReveiveCallback+0x1e>
		}
	}
}
 8004380:	bf00      	nop
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20000de4 	.word	0x20000de4
 800438c:	20000dfc 	.word	0x20000dfc
 8004390:	20001604 	.word	0x20001604
 8004394:	08015a2c 	.word	0x08015a2c

08004398 <UsbBuffWrite>:

void UsbBuffWrite(char * Message)
{
 8004398:	b590      	push	{r4, r7, lr}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]

	DataToTransmit++;
 80043a0:	4b1d      	ldr	r3, [pc, #116]	; (8004418 <UsbBuffWrite+0x80>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	3301      	adds	r3, #1
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	4b1b      	ldr	r3, [pc, #108]	; (8004418 <UsbBuffWrite+0x80>)
 80043aa:	701a      	strb	r2, [r3, #0]
	for(uint8_t y = 0 ; y < strlen(Message) ; y++)
 80043ac:	2300      	movs	r3, #0
 80043ae:	73fb      	strb	r3, [r7, #15]
 80043b0:	e016      	b.n	80043e0 <UsbBuffWrite+0x48>
	{
		if(RB_OK == Ring_Buffer_Write(&TransmitBuffer, Message[y]))
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	4413      	add	r3, r2
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	4619      	mov	r1, r3
 80043bc:	4817      	ldr	r0, [pc, #92]	; (800441c <UsbBuffWrite+0x84>)
 80043be:	f000 ffed 	bl	800539c <Ring_Buffer_Write>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <UsbBuffWrite+0x42>
		{

		}
		else
		{
			Ring_Buffer_Flush(&TransmitBuffer);
 80043c8:	4814      	ldr	r0, [pc, #80]	; (800441c <UsbBuffWrite+0x84>)
 80043ca:	f001 f80f 	bl	80053ec <Ring_Buffer_Flush>
			DataToTransmit--;
 80043ce:	4b12      	ldr	r3, [pc, #72]	; (8004418 <UsbBuffWrite+0x80>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	4b10      	ldr	r3, [pc, #64]	; (8004418 <UsbBuffWrite+0x80>)
 80043d8:	701a      	strb	r2, [r3, #0]
	for(uint8_t y = 0 ; y < strlen(Message) ; y++)
 80043da:	7bfb      	ldrb	r3, [r7, #15]
 80043dc:	3301      	adds	r3, #1
 80043de:	73fb      	strb	r3, [r7, #15]
 80043e0:	7bfc      	ldrb	r4, [r7, #15]
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7fb ff20 	bl	8000228 <strlen>
 80043e8:	4603      	mov	r3, r0
 80043ea:	429c      	cmp	r4, r3
 80043ec:	d3e1      	bcc.n	80043b2 <UsbBuffWrite+0x1a>
		}
	}

	if(RB_OK == Ring_Buffer_Write(&TransmitBuffer, '^'))
 80043ee:	215e      	movs	r1, #94	; 0x5e
 80043f0:	480a      	ldr	r0, [pc, #40]	; (800441c <UsbBuffWrite+0x84>)
 80043f2:	f000 ffd3 	bl	800539c <Ring_Buffer_Write>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d008      	beq.n	800440e <UsbBuffWrite+0x76>
	{

	}
	else
	{
		Ring_Buffer_Flush(&TransmitBuffer);
 80043fc:	4807      	ldr	r0, [pc, #28]	; (800441c <UsbBuffWrite+0x84>)
 80043fe:	f000 fff5 	bl	80053ec <Ring_Buffer_Flush>
		DataToTransmit--;
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <UsbBuffWrite+0x80>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	3b01      	subs	r3, #1
 8004408:	b2da      	uxtb	r2, r3
 800440a:	4b03      	ldr	r3, [pc, #12]	; (8004418 <UsbBuffWrite+0x80>)
 800440c:	701a      	strb	r2, [r3, #0]
	}

}
 800440e:	bf00      	nop
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	bd90      	pop	{r4, r7, pc}
 8004416:	bf00      	nop
 8004418:	20001e08 	.word	0x20001e08
 800441c:	20001200 	.word	0x20001200

08004420 <UsbTransmitTask>:

void UsbTransmitTask(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8004426:	2300      	movs	r3, #0
 8004428:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp = 0;
 800442a:	2300      	movs	r3, #0
 800442c:	71bb      	strb	r3, [r7, #6]
		do
		{
			if(Ring_Buffer_Read(&TransmitBuffer, &tmp) == RB_OK)
 800442e:	1dbb      	adds	r3, r7, #6
 8004430:	4619      	mov	r1, r3
 8004432:	480e      	ldr	r0, [pc, #56]	; (800446c <UsbTransmitTask+0x4c>)
 8004434:	f000 ff8a 	bl	800534c <Ring_Buffer_Read>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10a      	bne.n	8004454 <UsbTransmitTask+0x34>
			{
			TransmitData[i] = tmp;
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	79b9      	ldrb	r1, [r7, #6]
 8004442:	4a0b      	ldr	r2, [pc, #44]	; (8004470 <UsbTransmitTask+0x50>)
 8004444:	54d1      	strb	r1, [r2, r3]
			i++;
 8004446:	79fb      	ldrb	r3, [r7, #7]
 8004448:	3301      	adds	r3, #1
 800444a:	71fb      	strb	r3, [r7, #7]
			else
			{
				break;
			}

		} while(tmp != '^');
 800444c:	79bb      	ldrb	r3, [r7, #6]
 800444e:	2b5e      	cmp	r3, #94	; 0x5e
 8004450:	d1ed      	bne.n	800442e <UsbTransmitTask+0xe>
 8004452:	e000      	b.n	8004456 <UsbTransmitTask+0x36>
				break;
 8004454:	bf00      	nop

		CDC_Transmit_FS(TransmitData, i);
 8004456:	79fb      	ldrb	r3, [r7, #7]
 8004458:	b29b      	uxth	r3, r3
 800445a:	4619      	mov	r1, r3
 800445c:	4804      	ldr	r0, [pc, #16]	; (8004470 <UsbTransmitTask+0x50>)
 800445e:	f00d ff69 	bl	8012334 <CDC_Transmit_FS>
}
 8004462:	bf00      	nop
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	20001200 	.word	0x20001200
 8004470:	20001a08 	.word	0x20001a08

08004474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004478:	b672      	cpsid	i
}
 800447a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  GPIOF -> ODR |= 0x8000;
 800447c:	4b03      	ldr	r3, [pc, #12]	; (800448c <Error_Handler+0x18>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	4a02      	ldr	r2, [pc, #8]	; (800448c <Error_Handler+0x18>)
 8004482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004486:	60d3      	str	r3, [r2, #12]
  while (1)
 8004488:	e7fe      	b.n	8004488 <Error_Handler+0x14>
 800448a:	bf00      	nop
 800448c:	40011c00 	.word	0x40011c00

08004490 <HeaderDraw>:
	menu_t sub_menu4_3 = { BackStr, NULL, &sub_menu4_2, NULL, &menu4, MenuBack };


static void HeaderDraw(char *header)

{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08c      	sub	sp, #48	; 0x30
 8004494:	af02      	add	r7, sp, #8
 8004496:	6078      	str	r0, [r7, #4]
	  GFX_SetFont(font_8x5);
 8004498:	4857      	ldr	r0, [pc, #348]	; (80045f8 <HeaderDraw+0x168>)
 800449a:	f7fd f801 	bl	80014a0 <GFX_SetFont>
	  GFX_SetFontSize(1);
 800449e:	2001      	movs	r0, #1
 80044a0:	f7fd f80c 	bl	80014bc <GFX_SetFontSize>
	  size_t headerLen = strlen(header);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7fb febf 	bl	8000228 <strlen>
 80044aa:	6238      	str	r0, [r7, #32]
	  char buff[20];
	  if(headerLen % 2)
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d04e      	beq.n	8004554 <HeaderDraw+0xc4>
	  {
		  for(uint8_t i = 0; i<19; i++)
 80044b6:	2300      	movs	r3, #0
 80044b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80044bc:	e03a      	b.n	8004534 <HeaderDraw+0xa4>
		  {
			  if(i<9-(headerLen/2))
 80044be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	085b      	lsrs	r3, r3, #1
 80044c6:	f1c3 0309 	rsb	r3, r3, #9
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d207      	bcs.n	80044de <HeaderDraw+0x4e>
			  {
				  buff[i] = '-';
 80044ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044d2:	3328      	adds	r3, #40	; 0x28
 80044d4:	443b      	add	r3, r7
 80044d6:	222d      	movs	r2, #45	; 0x2d
 80044d8:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80044dc:	e025      	b.n	800452a <HeaderDraw+0x9a>
			  }
			  else if(i>=9-(headerLen/2) && i<9+(headerLen/2) + 1)
 80044de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	085b      	lsrs	r3, r3, #1
 80044e6:	f1c3 0309 	rsb	r3, r3, #9
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d316      	bcc.n	800451c <HeaderDraw+0x8c>
 80044ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	085b      	lsrs	r3, r3, #1
 80044f6:	330a      	adds	r3, #10
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d20f      	bcs.n	800451c <HeaderDraw+0x8c>
			  {
				  buff[i] = header[i-9+(headerLen/2)];
 80044fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	085b      	lsrs	r3, r3, #1
 8004504:	4413      	add	r3, r2
 8004506:	3b09      	subs	r3, #9
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	441a      	add	r2, r3
 800450c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004510:	7812      	ldrb	r2, [r2, #0]
 8004512:	3328      	adds	r3, #40	; 0x28
 8004514:	443b      	add	r3, r7
 8004516:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800451a:	e006      	b.n	800452a <HeaderDraw+0x9a>
			  }
			  else
			  {
				  buff[i] = '-';
 800451c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004520:	3328      	adds	r3, #40	; 0x28
 8004522:	443b      	add	r3, r7
 8004524:	222d      	movs	r2, #45	; 0x2d
 8004526:	f803 2c1c 	strb.w	r2, [r3, #-28]
		  for(uint8_t i = 0; i<19; i++)
 800452a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800452e:	3301      	adds	r3, #1
 8004530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004538:	2b12      	cmp	r3, #18
 800453a:	d9c0      	bls.n	80044be <HeaderDraw+0x2e>
			  }
		  }
		  buff[19] = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	77fb      	strb	r3, [r7, #31]
		  GFX_DrawString(9, 0, buff, WHITE, 0);
 8004540:	f107 020c 	add.w	r2, r7, #12
 8004544:	2300      	movs	r3, #0
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	2301      	movs	r3, #1
 800454a:	2100      	movs	r1, #0
 800454c:	2009      	movs	r0, #9
 800454e:	f7fd f881 	bl	8001654 <GFX_DrawString>
			  }
		  }
		  buff[18] = 0;
		  GFX_DrawString(11, 0, buff, WHITE, 0);
	  }
}
 8004552:	e04d      	b.n	80045f0 <HeaderDraw+0x160>
		  for(uint8_t i = 0; i<18; i++)
 8004554:	2300      	movs	r3, #0
 8004556:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800455a:	e03a      	b.n	80045d2 <HeaderDraw+0x142>
			  if(i<9-(headerLen/2))
 800455c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	085b      	lsrs	r3, r3, #1
 8004564:	f1c3 0309 	rsb	r3, r3, #9
 8004568:	429a      	cmp	r2, r3
 800456a:	d207      	bcs.n	800457c <HeaderDraw+0xec>
				  buff[i] = '-';
 800456c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004570:	3328      	adds	r3, #40	; 0x28
 8004572:	443b      	add	r3, r7
 8004574:	222d      	movs	r2, #45	; 0x2d
 8004576:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800457a:	e025      	b.n	80045c8 <HeaderDraw+0x138>
			  else if(i>=9-(headerLen/2) && i<9+(headerLen/2))
 800457c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	085b      	lsrs	r3, r3, #1
 8004584:	f1c3 0309 	rsb	r3, r3, #9
 8004588:	429a      	cmp	r2, r3
 800458a:	d316      	bcc.n	80045ba <HeaderDraw+0x12a>
 800458c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	085b      	lsrs	r3, r3, #1
 8004594:	3309      	adds	r3, #9
 8004596:	429a      	cmp	r2, r3
 8004598:	d20f      	bcs.n	80045ba <HeaderDraw+0x12a>
				  buff[i] = header[i-9+(headerLen/2)];
 800459a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	085b      	lsrs	r3, r3, #1
 80045a2:	4413      	add	r3, r2
 80045a4:	3b09      	subs	r3, #9
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	441a      	add	r2, r3
 80045aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80045ae:	7812      	ldrb	r2, [r2, #0]
 80045b0:	3328      	adds	r3, #40	; 0x28
 80045b2:	443b      	add	r3, r7
 80045b4:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80045b8:	e006      	b.n	80045c8 <HeaderDraw+0x138>
				  buff[i] = '-';
 80045ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80045be:	3328      	adds	r3, #40	; 0x28
 80045c0:	443b      	add	r3, r7
 80045c2:	222d      	movs	r2, #45	; 0x2d
 80045c4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		  for(uint8_t i = 0; i<18; i++)
 80045c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80045cc:	3301      	adds	r3, #1
 80045ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80045d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80045d6:	2b11      	cmp	r3, #17
 80045d8:	d9c0      	bls.n	800455c <HeaderDraw+0xcc>
		  buff[18] = 0;
 80045da:	2300      	movs	r3, #0
 80045dc:	77bb      	strb	r3, [r7, #30]
		  GFX_DrawString(11, 0, buff, WHITE, 0);
 80045de:	f107 020c 	add.w	r2, r7, #12
 80045e2:	2300      	movs	r3, #0
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	2301      	movs	r3, #1
 80045e8:	2100      	movs	r1, #0
 80045ea:	200b      	movs	r0, #11
 80045ec:	f7fd f832 	bl	8001654 <GFX_DrawString>
}
 80045f0:	bf00      	nop
 80045f2:	3728      	adds	r7, #40	; 0x28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	08015be4 	.word	0x08015be4

080045fc <MenuNext>:

void MenuNext(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
	if(CurrentPointer->next)
 8004600:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <MenuNext+0x74>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d018      	beq.n	800463c <MenuNext+0x40>
	{
		CurrentPointer = CurrentPointer->next;
 800460a:	4b19      	ldr	r3, [pc, #100]	; (8004670 <MenuNext+0x74>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	4a17      	ldr	r2, [pc, #92]	; (8004670 <MenuNext+0x74>)
 8004612:	6013      	str	r3, [r2, #0]
		MenuIndex++;
 8004614:	4b17      	ldr	r3, [pc, #92]	; (8004674 <MenuNext+0x78>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	3301      	adds	r3, #1
 800461a:	b2da      	uxtb	r2, r3
 800461c:	4b15      	ldr	r3, [pc, #84]	; (8004674 <MenuNext+0x78>)
 800461e:	701a      	strb	r2, [r3, #0]
		if(++OledRowPos > OLED_ROWS - 1)
 8004620:	4b15      	ldr	r3, [pc, #84]	; (8004678 <MenuNext+0x7c>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	3301      	adds	r3, #1
 8004626:	b2da      	uxtb	r2, r3
 8004628:	4b13      	ldr	r3, [pc, #76]	; (8004678 <MenuNext+0x7c>)
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	4b12      	ldr	r3, [pc, #72]	; (8004678 <MenuNext+0x7c>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b02      	cmp	r3, #2
 8004632:	d918      	bls.n	8004666 <MenuNext+0x6a>
		{
			OledRowPos = OLED_ROWS - 1;
 8004634:	4b10      	ldr	r3, [pc, #64]	; (8004678 <MenuNext+0x7c>)
 8004636:	2202      	movs	r2, #2
 8004638:	701a      	strb	r2, [r3, #0]
 800463a:	e014      	b.n	8004666 <MenuNext+0x6a>
		}
	}
	else
	{
		MenuIndex = 0;
 800463c:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <MenuNext+0x78>)
 800463e:	2200      	movs	r2, #0
 8004640:	701a      	strb	r2, [r3, #0]
		OledRowPos = 0;
 8004642:	4b0d      	ldr	r3, [pc, #52]	; (8004678 <MenuNext+0x7c>)
 8004644:	2200      	movs	r2, #0
 8004646:	701a      	strb	r2, [r3, #0]
		if(CurrentPointer->parent)
 8004648:	4b09      	ldr	r3, [pc, #36]	; (8004670 <MenuNext+0x74>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d006      	beq.n	8004660 <MenuNext+0x64>
		{
			CurrentPointer = (CurrentPointer -> parent) -> child;
 8004652:	4b07      	ldr	r3, [pc, #28]	; (8004670 <MenuNext+0x74>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	4a05      	ldr	r2, [pc, #20]	; (8004670 <MenuNext+0x74>)
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	e002      	b.n	8004666 <MenuNext+0x6a>
		}
		else
		{
			CurrentPointer = &menu1;
 8004660:	4b03      	ldr	r3, [pc, #12]	; (8004670 <MenuNext+0x74>)
 8004662:	4a06      	ldr	r2, [pc, #24]	; (800467c <MenuNext+0x80>)
 8004664:	601a      	str	r2, [r3, #0]
		}
	}
	MenuRefresh();
 8004666:	f000 f907 	bl	8004878 <MenuRefresh>
}
 800466a:	bf00      	nop
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000004 	.word	0x20000004
 8004674:	20001e95 	.word	0x20001e95
 8004678:	20001e96 	.word	0x20001e96
 800467c:	20000008 	.word	0x20000008

08004680 <MenuPrev>:

void MenuPrev(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
	CurrentPointer = CurrentPointer -> prev;
 8004684:	4b19      	ldr	r3, [pc, #100]	; (80046ec <MenuPrev+0x6c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	4a18      	ldr	r2, [pc, #96]	; (80046ec <MenuPrev+0x6c>)
 800468c:	6013      	str	r3, [r2, #0]

	if(MenuIndex)
 800468e:	4b18      	ldr	r3, [pc, #96]	; (80046f0 <MenuPrev+0x70>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d010      	beq.n	80046b8 <MenuPrev+0x38>
	{
		MenuIndex--;
 8004696:	4b16      	ldr	r3, [pc, #88]	; (80046f0 <MenuPrev+0x70>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	3b01      	subs	r3, #1
 800469c:	b2da      	uxtb	r2, r3
 800469e:	4b14      	ldr	r3, [pc, #80]	; (80046f0 <MenuPrev+0x70>)
 80046a0:	701a      	strb	r2, [r3, #0]
		if(OledRowPos > 0)
 80046a2:	4b14      	ldr	r3, [pc, #80]	; (80046f4 <MenuPrev+0x74>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d01b      	beq.n	80046e2 <MenuPrev+0x62>
		{
			OledRowPos--;
 80046aa:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <MenuPrev+0x74>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <MenuPrev+0x74>)
 80046b4:	701a      	strb	r2, [r3, #0]
 80046b6:	e014      	b.n	80046e2 <MenuPrev+0x62>
		}
	}
	else
	{
		MenuIndex = MenuGetIndex(CurrentPointer);
 80046b8:	4b0c      	ldr	r3, [pc, #48]	; (80046ec <MenuPrev+0x6c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 f899 	bl	80047f4 <MenuGetIndex>
 80046c2:	4603      	mov	r3, r0
 80046c4:	461a      	mov	r2, r3
 80046c6:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <MenuPrev+0x70>)
 80046c8:	701a      	strb	r2, [r3, #0]
		{
			if(MenuIndex >= OLED_ROWS)
 80046ca:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <MenuPrev+0x70>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d903      	bls.n	80046da <MenuPrev+0x5a>
			{
				OledRowPos = OLED_ROWS - 1;
 80046d2:	4b08      	ldr	r3, [pc, #32]	; (80046f4 <MenuPrev+0x74>)
 80046d4:	2202      	movs	r2, #2
 80046d6:	701a      	strb	r2, [r3, #0]
 80046d8:	e003      	b.n	80046e2 <MenuPrev+0x62>
			}
			else
			{
				OledRowPos = MenuIndex;
 80046da:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <MenuPrev+0x70>)
 80046dc:	781a      	ldrb	r2, [r3, #0]
 80046de:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <MenuPrev+0x74>)
 80046e0:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	MenuRefresh();
 80046e2:	f000 f8c9 	bl	8004878 <MenuRefresh>
}
 80046e6:	bf00      	nop
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20000004 	.word	0x20000004
 80046f0:	20001e95 	.word	0x20001e95
 80046f4:	20001e96 	.word	0x20001e96

080046f8 <MenuEnter>:

void MenuEnter(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
	uint8_t Back = 0;
 80046fe:	2300      	movs	r3, #0
 8004700:	71fb      	strb	r3, [r7, #7]

	if(CurrentPointer->menu_function != NULL && CurrentPointer->menu_function !=MenuBack)
 8004702:	4b21      	ldr	r3, [pc, #132]	; (8004788 <MenuEnter+0x90>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <MenuEnter+0x2a>
 800470c:	4b1e      	ldr	r3, [pc, #120]	; (8004788 <MenuEnter+0x90>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	4a1e      	ldr	r2, [pc, #120]	; (800478c <MenuEnter+0x94>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d004      	beq.n	8004722 <MenuEnter+0x2a>
	{
		CurrentPointer -> menu_function();
 8004718:	4b1b      	ldr	r3, [pc, #108]	; (8004788 <MenuEnter+0x90>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	4798      	blx	r3
 8004720:	e00c      	b.n	800473c <MenuEnter+0x44>
	}
	else if(CurrentPointer->menu_function != NULL && CurrentPointer->menu_function == MenuBack)
 8004722:	4b19      	ldr	r3, [pc, #100]	; (8004788 <MenuEnter+0x90>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d007      	beq.n	800473c <MenuEnter+0x44>
 800472c:	4b16      	ldr	r3, [pc, #88]	; (8004788 <MenuEnter+0x90>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	4a16      	ldr	r2, [pc, #88]	; (800478c <MenuEnter+0x94>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d101      	bne.n	800473c <MenuEnter+0x44>
	{
		Back = 1;
 8004738:	2301      	movs	r3, #1
 800473a:	71fb      	strb	r3, [r7, #7]
	}

	if(CurrentPointer->child != NULL)
 800473c:	4b12      	ldr	r3, [pc, #72]	; (8004788 <MenuEnter+0x90>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d015      	beq.n	8004772 <MenuEnter+0x7a>
	{

			OledRowPosLevel[MenuGetLevel(CurrentPointer)] = OledRowPos;
 8004746:	4b10      	ldr	r3, [pc, #64]	; (8004788 <MenuEnter+0x90>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f000 f876 	bl	800483c <MenuGetLevel>
 8004750:	4603      	mov	r3, r0
 8004752:	461a      	mov	r2, r3
 8004754:	4b0e      	ldr	r3, [pc, #56]	; (8004790 <MenuEnter+0x98>)
 8004756:	7819      	ldrb	r1, [r3, #0]
 8004758:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <MenuEnter+0x9c>)
 800475a:	5499      	strb	r1, [r3, r2]

		MenuIndex = 0;
 800475c:	4b0e      	ldr	r3, [pc, #56]	; (8004798 <MenuEnter+0xa0>)
 800475e:	2200      	movs	r2, #0
 8004760:	701a      	strb	r2, [r3, #0]
		OledRowPos = 0;
 8004762:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <MenuEnter+0x98>)
 8004764:	2200      	movs	r2, #0
 8004766:	701a      	strb	r2, [r3, #0]
		CurrentPointer = CurrentPointer -> child;
 8004768:	4b07      	ldr	r3, [pc, #28]	; (8004788 <MenuEnter+0x90>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	4a06      	ldr	r2, [pc, #24]	; (8004788 <MenuEnter+0x90>)
 8004770:	6013      	str	r3, [r2, #0]
	}

	if(Back == 1)
 8004772:	79fb      	ldrb	r3, [r7, #7]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <MenuEnter+0x84>
	{
		MenuBack();
 8004778:	f000 f810 	bl	800479c <MenuBack>
	}

	MenuRefresh();
 800477c:	f000 f87c 	bl	8004878 <MenuRefresh>
}
 8004780:	bf00      	nop
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	20000004 	.word	0x20000004
 800478c:	0800479d 	.word	0x0800479d
 8004790:	20001e96 	.word	0x20001e96
 8004794:	20001e98 	.word	0x20001e98
 8004798:	20001e95 	.word	0x20001e95

0800479c <MenuBack>:

void MenuBack(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
	if(CurrentPointer->parent != NULL)
 80047a0:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <MenuBack+0x48>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00f      	beq.n	80047ca <MenuBack+0x2e>
	{
		CurrentPointer = CurrentPointer -> parent;
 80047aa:	4b0e      	ldr	r3, [pc, #56]	; (80047e4 <MenuBack+0x48>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	4a0c      	ldr	r2, [pc, #48]	; (80047e4 <MenuBack+0x48>)
 80047b2:	6013      	str	r3, [r2, #0]
		OledRowPos = OledRowPosLevel[MenuGetLevel(CurrentPointer)];
 80047b4:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <MenuBack+0x48>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 f83f 	bl	800483c <MenuGetLevel>
 80047be:	4603      	mov	r3, r0
 80047c0:	461a      	mov	r2, r3
 80047c2:	4b09      	ldr	r3, [pc, #36]	; (80047e8 <MenuBack+0x4c>)
 80047c4:	5c9a      	ldrb	r2, [r3, r2]
 80047c6:	4b09      	ldr	r3, [pc, #36]	; (80047ec <MenuBack+0x50>)
 80047c8:	701a      	strb	r2, [r3, #0]
	}

//	CurrentPointer = CurrentPointer -> parent;
	MenuIndex = MenuGetIndex(CurrentPointer);
 80047ca:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <MenuBack+0x48>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 f810 	bl	80047f4 <MenuGetIndex>
 80047d4:	4603      	mov	r3, r0
 80047d6:	461a      	mov	r2, r3
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <MenuBack+0x54>)
 80047da:	701a      	strb	r2, [r3, #0]

	MenuRefresh();
 80047dc:	f000 f84c 	bl	8004878 <MenuRefresh>
}
 80047e0:	bf00      	nop
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	20000004 	.word	0x20000004
 80047e8:	20001e98 	.word	0x20001e98
 80047ec:	20001e96 	.word	0x20001e96
 80047f0:	20001e95 	.word	0x20001e95

080047f4 <MenuGetIndex>:

static uint8_t MenuGetIndex(menu_t *menu)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
	menu_t *temp;
	uint8_t i = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	72fb      	strb	r3, [r7, #11]

	if(menu->parent)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d004      	beq.n	8004812 <MenuGetIndex+0x1e>
	{
		temp = (menu->parent) -> child;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	e008      	b.n	8004824 <MenuGetIndex+0x30>
	}
	else
	{
		temp = &menu1;
 8004812:	4b09      	ldr	r3, [pc, #36]	; (8004838 <MenuGetIndex+0x44>)
 8004814:	60fb      	str	r3, [r7, #12]
	}

	while(temp != menu)
 8004816:	e005      	b.n	8004824 <MenuGetIndex+0x30>
	{
		temp = temp -> next;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	60fb      	str	r3, [r7, #12]
		i++;
 800481e:	7afb      	ldrb	r3, [r7, #11]
 8004820:	3301      	adds	r3, #1
 8004822:	72fb      	strb	r3, [r7, #11]
	while(temp != menu)
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	429a      	cmp	r2, r3
 800482a:	d1f5      	bne.n	8004818 <MenuGetIndex+0x24>
	}

	return i;
 800482c:	7afb      	ldrb	r3, [r7, #11]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr
 8004838:	20000008 	.word	0x20000008

0800483c <MenuGetLevel>:

uint8_t MenuGetLevel(menu_t *menu)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
	menu_t *temp = menu;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	60fb      	str	r3, [r7, #12]
	uint8_t i = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	72fb      	strb	r3, [r7, #11]

	if(menu->parent == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d107      	bne.n	8004864 <MenuGetLevel+0x28>
	{
		return 0;
 8004854:	2300      	movs	r3, #0
 8004856:	e00a      	b.n	800486e <MenuGetLevel+0x32>
	}

	while(temp->parent != NULL)
	{
		temp = temp -> parent;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	60fb      	str	r3, [r7, #12]
		i++;
 800485e:	7afb      	ldrb	r3, [r7, #11]
 8004860:	3301      	adds	r3, #1
 8004862:	72fb      	strb	r3, [r7, #11]
	while(temp->parent != NULL)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1f5      	bne.n	8004858 <MenuGetLevel+0x1c>
	}
	return i;
 800486c:	7afb      	ldrb	r3, [r7, #11]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr

08004878 <MenuRefresh>:

void MenuRefresh(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af02      	add	r7, sp, #8
	menu_t *temp;
	uint8_t i;

	if( CurrentPointer->parent == &sub_menu1_6 ||
 800487e:	4b65      	ldr	r3, [pc, #404]	; (8004a14 <MenuRefresh+0x19c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	4a64      	ldr	r2, [pc, #400]	; (8004a18 <MenuRefresh+0x1a0>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d011      	beq.n	80048ae <MenuRefresh+0x36>
		CurrentPointer->parent == &sub_menu3_1_1 ||
 800488a:	4b62      	ldr	r3, [pc, #392]	; (8004a14 <MenuRefresh+0x19c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
	if( CurrentPointer->parent == &sub_menu1_6 ||
 8004890:	4a62      	ldr	r2, [pc, #392]	; (8004a1c <MenuRefresh+0x1a4>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d00b      	beq.n	80048ae <MenuRefresh+0x36>
		CurrentPointer->parent == &sub_menu3_2_1 ||
 8004896:	4b5f      	ldr	r3, [pc, #380]	; (8004a14 <MenuRefresh+0x19c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	691b      	ldr	r3, [r3, #16]
		CurrentPointer->parent == &sub_menu3_1_1 ||
 800489c:	4a60      	ldr	r2, [pc, #384]	; (8004a20 <MenuRefresh+0x1a8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d005      	beq.n	80048ae <MenuRefresh+0x36>
		CurrentPointer->parent == &sub_menu3_3)
 80048a2:	4b5c      	ldr	r3, [pc, #368]	; (8004a14 <MenuRefresh+0x19c>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691b      	ldr	r3, [r3, #16]
		CurrentPointer->parent == &sub_menu3_2_1 ||
 80048a8:	4a5e      	ldr	r2, [pc, #376]	; (8004a24 <MenuRefresh+0x1ac>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d101      	bne.n	80048b2 <MenuRefresh+0x3a>
	{
		MenuIndicatorRefresh();
 80048ae:	f000 fa59 	bl	8004d64 <MenuIndicatorRefresh>
	}

	SSD1306_Clear(BLACK);
 80048b2:	2000      	movs	r0, #0
 80048b4:	f000 fe7c 	bl	80055b0 <SSD1306_Clear>

	if(CurrentPointer->parent)
 80048b8:	4b56      	ldr	r3, [pc, #344]	; (8004a14 <MenuRefresh+0x19c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00c      	beq.n	80048dc <MenuRefresh+0x64>
	{
		temp = (CurrentPointer->parent) -> child;
 80048c2:	4b54      	ldr	r3, [pc, #336]	; (8004a14 <MenuRefresh+0x19c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	607b      	str	r3, [r7, #4]
		HeaderDraw((CurrentPointer->parent) -> name);
 80048cc:	4b51      	ldr	r3, [pc, #324]	; (8004a14 <MenuRefresh+0x19c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff fddb 	bl	8004490 <HeaderDraw>
 80048da:	e004      	b.n	80048e6 <MenuRefresh+0x6e>
	}
	else
	{
		temp = &menu1;
 80048dc:	4b52      	ldr	r3, [pc, #328]	; (8004a28 <MenuRefresh+0x1b0>)
 80048de:	607b      	str	r3, [r7, #4]
		HeaderDraw("Menu");
 80048e0:	4852      	ldr	r0, [pc, #328]	; (8004a2c <MenuRefresh+0x1b4>)
 80048e2:	f7ff fdd5 	bl	8004490 <HeaderDraw>
	}

	for(i=0; i!=MenuIndex - OledRowPos; i++)
 80048e6:	2300      	movs	r3, #0
 80048e8:	70fb      	strb	r3, [r7, #3]
 80048ea:	e009      	b.n	8004900 <MenuRefresh+0x88>
	{
		if(temp -> next == NULL) break; // Hard fault protection
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00f      	beq.n	8004914 <MenuRefresh+0x9c>

		temp = temp -> next;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	607b      	str	r3, [r7, #4]
	for(i=0; i!=MenuIndex - OledRowPos; i++)
 80048fa:	78fb      	ldrb	r3, [r7, #3]
 80048fc:	3301      	adds	r3, #1
 80048fe:	70fb      	strb	r3, [r7, #3]
 8004900:	78fa      	ldrb	r2, [r7, #3]
 8004902:	4b4b      	ldr	r3, [pc, #300]	; (8004a30 <MenuRefresh+0x1b8>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	4619      	mov	r1, r3
 8004908:	4b4a      	ldr	r3, [pc, #296]	; (8004a34 <MenuRefresh+0x1bc>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	1acb      	subs	r3, r1, r3
 800490e:	429a      	cmp	r2, r3
 8004910:	d1ec      	bne.n	80048ec <MenuRefresh+0x74>
 8004912:	e000      	b.n	8004916 <MenuRefresh+0x9e>
		if(temp -> next == NULL) break; // Hard fault protection
 8004914:	bf00      	nop
	}

	GFX_SetFont(font_8x5);
 8004916:	4848      	ldr	r0, [pc, #288]	; (8004a38 <MenuRefresh+0x1c0>)
 8004918:	f7fc fdc2 	bl	80014a0 <GFX_SetFont>
	GFX_SetFontSize(2);
 800491c:	2002      	movs	r0, #2
 800491e:	f7fc fdcd 	bl	80014bc <GFX_SetFontSize>
	for(i=0; i<OLED_ROWS; i++)
 8004922:	2300      	movs	r3, #0
 8004924:	70fb      	strb	r3, [r7, #3]
 8004926:	e06c      	b.n	8004a02 <MenuRefresh+0x18a>
	{
		if(temp == CurrentPointer)
 8004928:	4b3a      	ldr	r3, [pc, #232]	; (8004a14 <MenuRefresh+0x19c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	429a      	cmp	r2, r3
 8004930:	d14a      	bne.n	80049c8 <MenuRefresh+0x150>
		{
//			GFX_DrawFillRectangle(5, (i*20) + OLED_MENU_Y_OFFSET, 123, 16, WHITE);
//			GFX_DrawFillCircle(10, (i*20) + OLED_MENU_Y_OFFSET + 8, 4, BLACK);
//			GFX_DrawString(20, (i*20) + OLED_MENU_Y_OFFSET + 1, temp->name, BLACK, 1);

			TempStr = temp->name;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a41      	ldr	r2, [pc, #260]	; (8004a3c <MenuRefresh+0x1c4>)
 8004938:	6013      	str	r3, [r2, #0]
			uint8_t TempStrLength = strlen(TempStr);
 800493a:	4b40      	ldr	r3, [pc, #256]	; (8004a3c <MenuRefresh+0x1c4>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7fb fc72 	bl	8000228 <strlen>
 8004944:	4603      	mov	r3, r0
 8004946:	70bb      	strb	r3, [r7, #2]
			TempStrLengthVar = -(TempStrLength * 5);
 8004948:	78bb      	ldrb	r3, [r7, #2]
 800494a:	b29b      	uxth	r3, r3
 800494c:	461a      	mov	r2, r3
 800494e:	0392      	lsls	r2, r2, #14
 8004950:	1ad2      	subs	r2, r2, r3
 8004952:	0092      	lsls	r2, r2, #2
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	b29b      	uxth	r3, r3
 8004958:	b21a      	sxth	r2, r3
 800495a:	4b39      	ldr	r3, [pc, #228]	; (8004a40 <MenuRefresh+0x1c8>)
 800495c:	801a      	strh	r2, [r3, #0]
			TempId = i;
 800495e:	4a39      	ldr	r2, [pc, #228]	; (8004a44 <MenuRefresh+0x1cc>)
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	7013      	strb	r3, [r2, #0]

			if(TempStrLength >= 10)
 8004964:	78bb      	ldrb	r3, [r7, #2]
 8004966:	2b09      	cmp	r3, #9
 8004968:	d908      	bls.n	800497c <MenuRefresh+0x104>
			{
				ScrollEn = 1;
 800496a:	4b37      	ldr	r3, [pc, #220]	; (8004a48 <MenuRefresh+0x1d0>)
 800496c:	2201      	movs	r2, #1
 800496e:	701a      	strb	r2, [r3, #0]
				ScrollFirst =1;
 8004970:	4b36      	ldr	r3, [pc, #216]	; (8004a4c <MenuRefresh+0x1d4>)
 8004972:	2201      	movs	r2, #1
 8004974:	701a      	strb	r2, [r3, #0]
				ScrollString();
 8004976:	f000 f86b 	bl	8004a50 <ScrollString>
 800497a:	e039      	b.n	80049f0 <MenuRefresh+0x178>
			}
			else
			{
				ScrollEn = 0;
 800497c:	4b32      	ldr	r3, [pc, #200]	; (8004a48 <MenuRefresh+0x1d0>)
 800497e:	2200      	movs	r2, #0
 8004980:	701a      	strb	r2, [r3, #0]
				GFX_DrawRectangle(17, ((i*OLED_MENU_Y_SPACE)-1) + OLED_MENU_Y_OFFSET, 111, 18, WHITE);
 8004982:	78fa      	ldrb	r2, [r7, #3]
 8004984:	4613      	mov	r3, r2
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	4413      	add	r3, r2
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	f103 0108 	add.w	r1, r3, #8
 8004990:	2301      	movs	r3, #1
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	2312      	movs	r3, #18
 8004996:	226f      	movs	r2, #111	; 0x6f
 8004998:	2011      	movs	r0, #17
 800499a:	f7fc ff73 	bl	8001884 <GFX_DrawRectangle>
//				GFX_DrawFillCircle(10, (i*20) + OLED_MENU_Y_OFFSET + 8, 4, BLACK);
//				GFX_DrawChar(5, (i*20) + OLED_MENU_Y_OFFSET + 1, '>', BLACK, 1);
				StateIndicator(temp, i);
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	4619      	mov	r1, r3
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f91c 	bl	8004be0 <StateIndicator>
				GFX_DrawString(20, (i*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, temp->name, WHITE, 1);
 80049a8:	78fa      	ldrb	r2, [r7, #3]
 80049aa:	4613      	mov	r3, r2
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	4413      	add	r3, r2
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	f103 010a 	add.w	r1, r3, #10
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	2301      	movs	r3, #1
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	2301      	movs	r3, #1
 80049c0:	2014      	movs	r0, #20
 80049c2:	f7fc fe47 	bl	8001654 <GFX_DrawString>
 80049c6:	e013      	b.n	80049f0 <MenuRefresh+0x178>

		}
		else
		{
//			GFX_DrawChar(5, (i*20) + OLED_MENU_Y_OFFSET + 1, '>', WHITE, 0);
			StateIndicator(temp, i);
 80049c8:	78fb      	ldrb	r3, [r7, #3]
 80049ca:	4619      	mov	r1, r3
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f907 	bl	8004be0 <StateIndicator>
			GFX_DrawString(20, (i*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET, temp->name, WHITE, 0);
 80049d2:	78fa      	ldrb	r2, [r7, #3]
 80049d4:	4613      	mov	r3, r2
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	4413      	add	r3, r2
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	f103 0109 	add.w	r1, r3, #9
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	2300      	movs	r3, #0
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	2301      	movs	r3, #1
 80049ea:	2014      	movs	r0, #20
 80049ec:	f7fc fe32 	bl	8001654 <GFX_DrawString>
		}

		temp = temp -> next;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	607b      	str	r3, [r7, #4]
		if(!temp) break;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d006      	beq.n	8004a0a <MenuRefresh+0x192>
	for(i=0; i<OLED_ROWS; i++)
 80049fc:	78fb      	ldrb	r3, [r7, #3]
 80049fe:	3301      	adds	r3, #1
 8004a00:	70fb      	strb	r3, [r7, #3]
 8004a02:	78fb      	ldrb	r3, [r7, #3]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d98f      	bls.n	8004928 <MenuRefresh+0xb0>
	}
}
 8004a08:	e000      	b.n	8004a0c <MenuRefresh+0x194>
		if(!temp) break;
 8004a0a:	bf00      	nop
}
 8004a0c:	bf00      	nop
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	20000004 	.word	0x20000004
 8004a18:	200000b0 	.word	0x200000b0
 8004a1c:	20000318 	.word	0x20000318
 8004a20:	20000414 	.word	0x20000414
 8004a24:	200004f4 	.word	0x200004f4
 8004a28:	20000008 	.word	0x20000008
 8004a2c:	08015b94 	.word	0x08015b94
 8004a30:	20001e95 	.word	0x20001e95
 8004a34:	20001e96 	.word	0x20001e96
 8004a38:	08015be4 	.word	0x08015be4
 8004a3c:	20001ea0 	.word	0x20001ea0
 8004a40:	20001e9e 	.word	0x20001e9e
 8004a44:	20001ea4 	.word	0x20001ea4
 8004a48:	20001ea5 	.word	0x20001ea5
 8004a4c:	20001ea6 	.word	0x20001ea6

08004a50 <ScrollString>:

void ScrollString(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af02      	add	r7, sp, #8
	  static int16_t ScrollVar = 20;
	  static int16_t ScrollVar2 = 123;

	  static uint32_t OldTick = 0;

	  if(ScrollFirst)
 8004a56:	4b59      	ldr	r3, [pc, #356]	; (8004bbc <ScrollString+0x16c>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00d      	beq.n	8004a7a <ScrollString+0x2a>
	  {
		  ScrollFirst = 0;
 8004a5e:	4b57      	ldr	r3, [pc, #348]	; (8004bbc <ScrollString+0x16c>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	701a      	strb	r2, [r3, #0]
		  ScrollVar = 20;
 8004a64:	4b56      	ldr	r3, [pc, #344]	; (8004bc0 <ScrollString+0x170>)
 8004a66:	2214      	movs	r2, #20
 8004a68:	801a      	strh	r2, [r3, #0]
		  ScrollVar2 = 123;
 8004a6a:	4b56      	ldr	r3, [pc, #344]	; (8004bc4 <ScrollString+0x174>)
 8004a6c:	227b      	movs	r2, #123	; 0x7b
 8004a6e:	801a      	strh	r2, [r3, #0]
		  OldTick = HAL_GetTick();
 8004a70:	f001 fbee 	bl	8006250 <HAL_GetTick>
 8004a74:	4603      	mov	r3, r0
 8004a76:	4a54      	ldr	r2, [pc, #336]	; (8004bc8 <ScrollString+0x178>)
 8004a78:	6013      	str	r3, [r2, #0]
	  }

	  if(ScrollEn)
 8004a7a:	4b54      	ldr	r3, [pc, #336]	; (8004bcc <ScrollString+0x17c>)
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 8098 	beq.w	8004bb4 <ScrollString+0x164>
	  {

	  int16_t var = TempStrLengthVar;
 8004a84:	4b52      	ldr	r3, [pc, #328]	; (8004bd0 <ScrollString+0x180>)
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	80fb      	strh	r3, [r7, #6]

	  	GFX_DrawFillRectangle(0, ((TempId*OLED_MENU_Y_SPACE)-1) + OLED_MENU_Y_OFFSET, 128, 18, BLACK);
 8004a8a:	4b52      	ldr	r3, [pc, #328]	; (8004bd4 <ScrollString+0x184>)
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	4613      	mov	r3, r2
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	4413      	add	r3, r2
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	f103 0108 	add.w	r1, r3, #8
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	2312      	movs	r3, #18
 8004aa2:	2280      	movs	r2, #128	; 0x80
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	f7fc ff1a 	bl	80018de <GFX_DrawFillRectangle>
		if(ScrollVar>var-75)
 8004aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004aae:	3b4a      	subs	r3, #74	; 0x4a
 8004ab0:	4a43      	ldr	r2, [pc, #268]	; (8004bc0 <ScrollString+0x170>)
 8004ab2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	dc13      	bgt.n	8004ae2 <ScrollString+0x92>
		{
		GFX_DrawString(ScrollVar, (TempId*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, TempStr, WHITE, 1);
 8004aba:	4b41      	ldr	r3, [pc, #260]	; (8004bc0 <ScrollString+0x170>)
 8004abc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	4b44      	ldr	r3, [pc, #272]	; (8004bd4 <ScrollString+0x184>)
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	4613      	mov	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	4413      	add	r3, r2
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	f103 010a 	add.w	r1, r3, #10
 8004ad4:	4b40      	ldr	r3, [pc, #256]	; (8004bd8 <ScrollString+0x188>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	2301      	movs	r3, #1
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	2301      	movs	r3, #1
 8004ade:	f7fc fdb9 	bl	8001654 <GFX_DrawString>
		}

		GFX_DrawFillRectangle(0, ((TempId*OLED_MENU_Y_SPACE)-1) + OLED_MENU_Y_OFFSET, 17, 18, BLACK);
 8004ae2:	4b3c      	ldr	r3, [pc, #240]	; (8004bd4 <ScrollString+0x184>)
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	4613      	mov	r3, r2
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	4413      	add	r3, r2
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	f103 0108 	add.w	r1, r3, #8
 8004af4:	2300      	movs	r3, #0
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	2312      	movs	r3, #18
 8004afa:	2211      	movs	r2, #17
 8004afc:	2000      	movs	r0, #0
 8004afe:	f7fc feee 	bl	80018de <GFX_DrawFillRectangle>
//		GFX_DrawFillCircle(10, (TempId*20) + OLED_MENU_Y_OFFSET + 8, 4, BLACK);
//		GFX_DrawChar(5, (TempId*20) + OLED_MENU_Y_OFFSET + 1, '>', BLACK, 1);
		StateIndicator(CurrentPointer, TempId);
 8004b02:	4b36      	ldr	r3, [pc, #216]	; (8004bdc <ScrollString+0x18c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a33      	ldr	r2, [pc, #204]	; (8004bd4 <ScrollString+0x184>)
 8004b08:	7812      	ldrb	r2, [r2, #0]
 8004b0a:	4611      	mov	r1, r2
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 f867 	bl	8004be0 <StateIndicator>
		GFX_DrawRectangle(17, ((TempId*OLED_MENU_Y_SPACE)-1) + OLED_MENU_Y_OFFSET, 111, 18, WHITE);
 8004b12:	4b30      	ldr	r3, [pc, #192]	; (8004bd4 <ScrollString+0x184>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	4613      	mov	r3, r2
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	f103 0108 	add.w	r1, r3, #8
 8004b24:	2301      	movs	r3, #1
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	2312      	movs	r3, #18
 8004b2a:	226f      	movs	r2, #111	; 0x6f
 8004b2c:	2011      	movs	r0, #17
 8004b2e:	f7fc fea9 	bl	8001884 <GFX_DrawRectangle>

		if(HAL_GetTick() - OldTick >= SCROLL_FREEZE) ScrollVar--;
 8004b32:	f001 fb8d 	bl	8006250 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	4b23      	ldr	r3, [pc, #140]	; (8004bc8 <ScrollString+0x178>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b42:	d308      	bcc.n	8004b56 <ScrollString+0x106>
 8004b44:	4b1e      	ldr	r3, [pc, #120]	; (8004bc0 <ScrollString+0x170>)
 8004b46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	b21a      	sxth	r2, r3
 8004b52:	4b1b      	ldr	r3, [pc, #108]	; (8004bc0 <ScrollString+0x170>)
 8004b54:	801a      	strh	r2, [r3, #0]

		  if(ScrollVar < var)
 8004b56:	4b1a      	ldr	r3, [pc, #104]	; (8004bc0 <ScrollString+0x170>)
 8004b58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b5c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	dd27      	ble.n	8004bb4 <ScrollString+0x164>
		  {
			  GFX_DrawString(ScrollVar2, (TempId*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, TempStr, WHITE, 1);
 8004b64:	4b17      	ldr	r3, [pc, #92]	; (8004bc4 <ScrollString+0x174>)
 8004b66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	4b19      	ldr	r3, [pc, #100]	; (8004bd4 <ScrollString+0x184>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	461a      	mov	r2, r3
 8004b72:	4613      	mov	r3, r2
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	4413      	add	r3, r2
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	f103 010a 	add.w	r1, r3, #10
 8004b7e:	4b16      	ldr	r3, [pc, #88]	; (8004bd8 <ScrollString+0x188>)
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	2301      	movs	r3, #1
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	2301      	movs	r3, #1
 8004b88:	f7fc fd64 	bl	8001654 <GFX_DrawString>
			  ScrollVar2--;
 8004b8c:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <ScrollString+0x174>)
 8004b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	b21a      	sxth	r2, r3
 8004b9a:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <ScrollString+0x174>)
 8004b9c:	801a      	strh	r2, [r3, #0]
			  if(ScrollVar2 == 20)
 8004b9e:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <ScrollString+0x174>)
 8004ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ba4:	2b14      	cmp	r3, #20
 8004ba6:	d105      	bne.n	8004bb4 <ScrollString+0x164>
			  {
				  ScrollVar = 20;
 8004ba8:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <ScrollString+0x170>)
 8004baa:	2214      	movs	r2, #20
 8004bac:	801a      	strh	r2, [r3, #0]
				  ScrollVar2 = 123;
 8004bae:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <ScrollString+0x174>)
 8004bb0:	227b      	movs	r2, #123	; 0x7b
 8004bb2:	801a      	strh	r2, [r3, #0]
			  }
		  }

	  }

}
 8004bb4:	bf00      	nop
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	20001ea6 	.word	0x20001ea6
 8004bc0:	20000628 	.word	0x20000628
 8004bc4:	2000062a 	.word	0x2000062a
 8004bc8:	20001ea8 	.word	0x20001ea8
 8004bcc:	20001ea5 	.word	0x20001ea5
 8004bd0:	20001e9e 	.word	0x20001e9e
 8004bd4:	20001ea4 	.word	0x20001ea4
 8004bd8:	20001ea0 	.word	0x20001ea0
 8004bdc:	20000004 	.word	0x20000004

08004be0 <StateIndicator>:

static void StateIndicator(menu_t *menu, uint8_t pos)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	70fb      	strb	r3, [r7, #3]
	if(menu == CurrentPointer)
 8004bec:	4b5b      	ldr	r3, [pc, #364]	; (8004d5c <StateIndicator+0x17c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d156      	bne.n	8004ca4 <StateIndicator+0xc4>
	{
		if(menu->menu_state == 0 && menu->name != BackStr)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d113      	bne.n	8004c28 <StateIndicator+0x48>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a56      	ldr	r2, [pc, #344]	; (8004d60 <StateIndicator+0x180>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00e      	beq.n	8004c28 <StateIndicator+0x48>
		{
			GFX_DrawChar(5, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, '>', WHITE, 0);
 8004c0a:	78fa      	ldrb	r2, [r7, #3]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4413      	add	r3, r2
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	f103 010a 	add.w	r1, r3, #10
 8004c18:	2300      	movs	r3, #0
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	223e      	movs	r2, #62	; 0x3e
 8004c20:	2005      	movs	r0, #5
 8004c22:	f7fc fc5d 	bl	80014e0 <GFX_DrawChar>
 8004c26:	e094      	b.n	8004d52 <StateIndicator+0x172>
		}
		else if(menu->menu_state == 0 && menu->name == BackStr)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d113      	bne.n	8004c5a <StateIndicator+0x7a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a4a      	ldr	r2, [pc, #296]	; (8004d60 <StateIndicator+0x180>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d10e      	bne.n	8004c5a <StateIndicator+0x7a>
		{
			GFX_DrawChar(5, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, '<', WHITE, 0);
 8004c3c:	78fa      	ldrb	r2, [r7, #3]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	4413      	add	r3, r2
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	f103 010a 	add.w	r1, r3, #10
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	2301      	movs	r3, #1
 8004c50:	223c      	movs	r2, #60	; 0x3c
 8004c52:	2005      	movs	r0, #5
 8004c54:	f7fc fc44 	bl	80014e0 <GFX_DrawChar>
 8004c58:	e07b      	b.n	8004d52 <StateIndicator+0x172>
		}
		else if(menu->menu_state == 1)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d10c      	bne.n	8004c7e <StateIndicator+0x9e>
		{
			GFX_DrawFillCircle(10, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 8, 4, WHITE);
 8004c64:	78fa      	ldrb	r2, [r7, #3]
 8004c66:	4613      	mov	r3, r2
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	f103 0111 	add.w	r1, r3, #17
 8004c72:	2301      	movs	r3, #1
 8004c74:	2204      	movs	r2, #4
 8004c76:	200a      	movs	r0, #10
 8004c78:	f7fc fff1 	bl	8001c5e <GFX_DrawFillCircle>
		else if(menu->menu_state == -1)
		{
			GFX_DrawCircle(10, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 8, 4, WHITE);
		}
	}
}
 8004c7c:	e069      	b.n	8004d52 <StateIndicator+0x172>
		else if(menu->menu_state == -1)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8004c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c88:	d163      	bne.n	8004d52 <StateIndicator+0x172>
			GFX_DrawCircle(10, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 8, 4, WHITE);
 8004c8a:	78fa      	ldrb	r2, [r7, #3]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	4413      	add	r3, r2
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	f103 0111 	add.w	r1, r3, #17
 8004c98:	2301      	movs	r3, #1
 8004c9a:	2204      	movs	r2, #4
 8004c9c:	200a      	movs	r0, #10
 8004c9e:	f7fc fe41 	bl	8001924 <GFX_DrawCircle>
}
 8004ca2:	e056      	b.n	8004d52 <StateIndicator+0x172>
		if(menu->menu_state == 0 && menu->name != BackStr)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d113      	bne.n	8004cd6 <StateIndicator+0xf6>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a2b      	ldr	r2, [pc, #172]	; (8004d60 <StateIndicator+0x180>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d00e      	beq.n	8004cd6 <StateIndicator+0xf6>
			GFX_DrawChar(5, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, '>', WHITE, 0);
 8004cb8:	78fa      	ldrb	r2, [r7, #3]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	f103 010a 	add.w	r1, r3, #10
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	2301      	movs	r3, #1
 8004ccc:	223e      	movs	r2, #62	; 0x3e
 8004cce:	2005      	movs	r0, #5
 8004cd0:	f7fc fc06 	bl	80014e0 <GFX_DrawChar>
 8004cd4:	e03d      	b.n	8004d52 <StateIndicator+0x172>
		else if(menu->menu_state == 0 && menu->name == BackStr)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d113      	bne.n	8004d08 <StateIndicator+0x128>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a1e      	ldr	r2, [pc, #120]	; (8004d60 <StateIndicator+0x180>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d10e      	bne.n	8004d08 <StateIndicator+0x128>
			GFX_DrawChar(5, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, '<', WHITE, 0);
 8004cea:	78fa      	ldrb	r2, [r7, #3]
 8004cec:	4613      	mov	r3, r2
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	005b      	lsls	r3, r3, #1
 8004cf4:	f103 010a 	add.w	r1, r3, #10
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	223c      	movs	r2, #60	; 0x3c
 8004d00:	2005      	movs	r0, #5
 8004d02:	f7fc fbed 	bl	80014e0 <GFX_DrawChar>
 8004d06:	e024      	b.n	8004d52 <StateIndicator+0x172>
		else if(menu->menu_state == 1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d10c      	bne.n	8004d2c <StateIndicator+0x14c>
			GFX_DrawFillCircle(10, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 8, 4, WHITE);
 8004d12:	78fa      	ldrb	r2, [r7, #3]
 8004d14:	4613      	mov	r3, r2
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	4413      	add	r3, r2
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	f103 0111 	add.w	r1, r3, #17
 8004d20:	2301      	movs	r3, #1
 8004d22:	2204      	movs	r2, #4
 8004d24:	200a      	movs	r0, #10
 8004d26:	f7fc ff9a 	bl	8001c5e <GFX_DrawFillCircle>
}
 8004d2a:	e012      	b.n	8004d52 <StateIndicator+0x172>
		else if(menu->menu_state == -1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8004d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d36:	d10c      	bne.n	8004d52 <StateIndicator+0x172>
			GFX_DrawCircle(10, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 8, 4, WHITE);
 8004d38:	78fa      	ldrb	r2, [r7, #3]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	4413      	add	r3, r2
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	f103 0111 	add.w	r1, r3, #17
 8004d46:	2301      	movs	r3, #1
 8004d48:	2204      	movs	r2, #4
 8004d4a:	200a      	movs	r0, #10
 8004d4c:	f7fc fdea 	bl	8001924 <GFX_DrawCircle>
}
 8004d50:	e7ff      	b.n	8004d52 <StateIndicator+0x172>
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000004 	.word	0x20000004
 8004d60:	08015dc4 	.word	0x08015dc4

08004d64 <MenuIndicatorRefresh>:
extern TIM_HandleTypeDef htim4;

extern enum PwmFreqency;

void MenuIndicatorRefresh(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
	sub_menu1_6_1.menu_state =  ((GPIOE -> ODR >> 0)  & 1)? 1 : -1;
 8004d68:	4ba4      	ldr	r3, [pc, #656]	; (8004ffc <MenuIndicatorRefresh+0x298>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <MenuIndicatorRefresh+0x14>
 8004d74:	2201      	movs	r2, #1
 8004d76:	e001      	b.n	8004d7c <MenuIndicatorRefresh+0x18>
 8004d78:	f04f 32ff 	mov.w	r2, #4294967295
 8004d7c:	4ba0      	ldr	r3, [pc, #640]	; (8005000 <MenuIndicatorRefresh+0x29c>)
 8004d7e:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_2.menu_state =  ((GPIOE -> ODR >> 1)  & 1)? 1 : -1;
 8004d80:	4b9e      	ldr	r3, [pc, #632]	; (8004ffc <MenuIndicatorRefresh+0x298>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <MenuIndicatorRefresh+0x2c>
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	e001      	b.n	8004d94 <MenuIndicatorRefresh+0x30>
 8004d90:	f04f 32ff 	mov.w	r2, #4294967295
 8004d94:	4b9b      	ldr	r3, [pc, #620]	; (8005004 <MenuIndicatorRefresh+0x2a0>)
 8004d96:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_3.menu_state =  ((GPIOE -> ODR >> 2)  & 1)? 1 : -1;
 8004d98:	4b98      	ldr	r3, [pc, #608]	; (8004ffc <MenuIndicatorRefresh+0x298>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <MenuIndicatorRefresh+0x44>
 8004da4:	2201      	movs	r2, #1
 8004da6:	e001      	b.n	8004dac <MenuIndicatorRefresh+0x48>
 8004da8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dac:	4b96      	ldr	r3, [pc, #600]	; (8005008 <MenuIndicatorRefresh+0x2a4>)
 8004dae:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_4.menu_state =  ((GPIOE -> ODR >> 3)  & 1)? 1 : -1;
 8004db0:	4b92      	ldr	r3, [pc, #584]	; (8004ffc <MenuIndicatorRefresh+0x298>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <MenuIndicatorRefresh+0x5c>
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	e001      	b.n	8004dc4 <MenuIndicatorRefresh+0x60>
 8004dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc4:	4b91      	ldr	r3, [pc, #580]	; (800500c <MenuIndicatorRefresh+0x2a8>)
 8004dc6:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_5.menu_state =  ((GPIOE -> ODR >> 4)  & 1)? 1 : -1;
 8004dc8:	4b8c      	ldr	r3, [pc, #560]	; (8004ffc <MenuIndicatorRefresh+0x298>)
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f003 0310 	and.w	r3, r3, #16
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <MenuIndicatorRefresh+0x74>
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	e001      	b.n	8004ddc <MenuIndicatorRefresh+0x78>
 8004dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ddc:	4b8c      	ldr	r3, [pc, #560]	; (8005010 <MenuIndicatorRefresh+0x2ac>)
 8004dde:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_6.menu_state =  ((GPIOE -> ODR >> 5)  & 1)? 1 : -1;
 8004de0:	4b86      	ldr	r3, [pc, #536]	; (8004ffc <MenuIndicatorRefresh+0x298>)
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f003 0320 	and.w	r3, r3, #32
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <MenuIndicatorRefresh+0x8c>
 8004dec:	2201      	movs	r2, #1
 8004dee:	e001      	b.n	8004df4 <MenuIndicatorRefresh+0x90>
 8004df0:	f04f 32ff 	mov.w	r2, #4294967295
 8004df4:	4b87      	ldr	r3, [pc, #540]	; (8005014 <MenuIndicatorRefresh+0x2b0>)
 8004df6:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_7.menu_state =  ((GPIOE -> ODR >> 6)  & 1)? 1 : -1;
 8004df8:	4b80      	ldr	r3, [pc, #512]	; (8004ffc <MenuIndicatorRefresh+0x298>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <MenuIndicatorRefresh+0xa4>
 8004e04:	2201      	movs	r2, #1
 8004e06:	e001      	b.n	8004e0c <MenuIndicatorRefresh+0xa8>
 8004e08:	f04f 32ff 	mov.w	r2, #4294967295
 8004e0c:	4b82      	ldr	r3, [pc, #520]	; (8005018 <MenuIndicatorRefresh+0x2b4>)
 8004e0e:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_8.menu_state =  ((GPIOE -> ODR >> 7)  & 1)? 1 : -1;
 8004e10:	4b7a      	ldr	r3, [pc, #488]	; (8004ffc <MenuIndicatorRefresh+0x298>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <MenuIndicatorRefresh+0xbc>
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	e001      	b.n	8004e24 <MenuIndicatorRefresh+0xc0>
 8004e20:	f04f 32ff 	mov.w	r2, #4294967295
 8004e24:	4b7d      	ldr	r3, [pc, #500]	; (800501c <MenuIndicatorRefresh+0x2b8>)
 8004e26:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_9.menu_state =  ((GPIOE -> ODR >> 8)  & 1)? 1 : -1;
 8004e28:	4b74      	ldr	r3, [pc, #464]	; (8004ffc <MenuIndicatorRefresh+0x298>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <MenuIndicatorRefresh+0xd4>
 8004e34:	2201      	movs	r2, #1
 8004e36:	e001      	b.n	8004e3c <MenuIndicatorRefresh+0xd8>
 8004e38:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3c:	4b78      	ldr	r3, [pc, #480]	; (8005020 <MenuIndicatorRefresh+0x2bc>)
 8004e3e:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_10.menu_state = ((GPIOE -> ODR >> 9)  & 1)? 1 : -1;
 8004e40:	4b6e      	ldr	r3, [pc, #440]	; (8004ffc <MenuIndicatorRefresh+0x298>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <MenuIndicatorRefresh+0xec>
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	e001      	b.n	8004e54 <MenuIndicatorRefresh+0xf0>
 8004e50:	f04f 32ff 	mov.w	r2, #4294967295
 8004e54:	4b73      	ldr	r3, [pc, #460]	; (8005024 <MenuIndicatorRefresh+0x2c0>)
 8004e56:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_11.menu_state = ((GPIOE -> ODR >> 10) & 1)? 1 : -1;
 8004e58:	4b68      	ldr	r3, [pc, #416]	; (8004ffc <MenuIndicatorRefresh+0x298>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <MenuIndicatorRefresh+0x104>
 8004e64:	2201      	movs	r2, #1
 8004e66:	e001      	b.n	8004e6c <MenuIndicatorRefresh+0x108>
 8004e68:	f04f 32ff 	mov.w	r2, #4294967295
 8004e6c:	4b6e      	ldr	r3, [pc, #440]	; (8005028 <MenuIndicatorRefresh+0x2c4>)
 8004e6e:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_12.menu_state = ((GPIOE -> ODR >> 11) & 1)? 1 : -1;
 8004e70:	4b62      	ldr	r3, [pc, #392]	; (8004ffc <MenuIndicatorRefresh+0x298>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <MenuIndicatorRefresh+0x11c>
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	e001      	b.n	8004e84 <MenuIndicatorRefresh+0x120>
 8004e80:	f04f 32ff 	mov.w	r2, #4294967295
 8004e84:	4b69      	ldr	r3, [pc, #420]	; (800502c <MenuIndicatorRefresh+0x2c8>)
 8004e86:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_13.menu_state = ((GPIOE -> ODR >> 12) & 1)? 1 : -1;
 8004e88:	4b5c      	ldr	r3, [pc, #368]	; (8004ffc <MenuIndicatorRefresh+0x298>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <MenuIndicatorRefresh+0x134>
 8004e94:	2201      	movs	r2, #1
 8004e96:	e001      	b.n	8004e9c <MenuIndicatorRefresh+0x138>
 8004e98:	f04f 32ff 	mov.w	r2, #4294967295
 8004e9c:	4b64      	ldr	r3, [pc, #400]	; (8005030 <MenuIndicatorRefresh+0x2cc>)
 8004e9e:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_14.menu_state = ((GPIOE -> ODR >> 13) & 1)? 1 : -1;
 8004ea0:	4b56      	ldr	r3, [pc, #344]	; (8004ffc <MenuIndicatorRefresh+0x298>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <MenuIndicatorRefresh+0x14c>
 8004eac:	2201      	movs	r2, #1
 8004eae:	e001      	b.n	8004eb4 <MenuIndicatorRefresh+0x150>
 8004eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb4:	4b5f      	ldr	r3, [pc, #380]	; (8005034 <MenuIndicatorRefresh+0x2d0>)
 8004eb6:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_15.menu_state = ((GPIOE -> ODR >> 14) & 1)? 1 : -1;
 8004eb8:	4b50      	ldr	r3, [pc, #320]	; (8004ffc <MenuIndicatorRefresh+0x298>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <MenuIndicatorRefresh+0x164>
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	e001      	b.n	8004ecc <MenuIndicatorRefresh+0x168>
 8004ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ecc:	4b5a      	ldr	r3, [pc, #360]	; (8005038 <MenuIndicatorRefresh+0x2d4>)
 8004ece:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_16.menu_state = ((GPIOE -> ODR >> 15) & 1)? 1 : -1;
 8004ed0:	4b4a      	ldr	r3, [pc, #296]	; (8004ffc <MenuIndicatorRefresh+0x298>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <MenuIndicatorRefresh+0x17c>
 8004edc:	2201      	movs	r2, #1
 8004ede:	e001      	b.n	8004ee4 <MenuIndicatorRefresh+0x180>
 8004ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ee4:	4b55      	ldr	r3, [pc, #340]	; (800503c <MenuIndicatorRefresh+0x2d8>)
 8004ee6:	761a      	strb	r2, [r3, #24]

	sub_menu3_1_1_1.menu_state = (Logo.Mode == 0)? 1 : -1;
 8004ee8:	4b55      	ldr	r3, [pc, #340]	; (8005040 <MenuIndicatorRefresh+0x2dc>)
 8004eea:	f993 3000 	ldrsb.w	r3, [r3]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <MenuIndicatorRefresh+0x192>
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	e001      	b.n	8004efa <MenuIndicatorRefresh+0x196>
 8004ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8004efa:	4b52      	ldr	r3, [pc, #328]	; (8005044 <MenuIndicatorRefresh+0x2e0>)
 8004efc:	761a      	strb	r2, [r3, #24]
	sub_menu3_1_1_2.menu_state = (Logo.Mode == 1)? 1 : -1;
 8004efe:	4b50      	ldr	r3, [pc, #320]	; (8005040 <MenuIndicatorRefresh+0x2dc>)
 8004f00:	f993 3000 	ldrsb.w	r3, [r3]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d101      	bne.n	8004f0c <MenuIndicatorRefresh+0x1a8>
 8004f08:	2201      	movs	r2, #1
 8004f0a:	e001      	b.n	8004f10 <MenuIndicatorRefresh+0x1ac>
 8004f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f10:	4b4d      	ldr	r3, [pc, #308]	; (8005048 <MenuIndicatorRefresh+0x2e4>)
 8004f12:	761a      	strb	r2, [r3, #24]
	sub_menu3_1_1_3.menu_state = (Logo.Mode == 2)? 1 : -1;
 8004f14:	4b4a      	ldr	r3, [pc, #296]	; (8005040 <MenuIndicatorRefresh+0x2dc>)
 8004f16:	f993 3000 	ldrsb.w	r3, [r3]
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d101      	bne.n	8004f22 <MenuIndicatorRefresh+0x1be>
 8004f1e:	2201      	movs	r2, #1
 8004f20:	e001      	b.n	8004f26 <MenuIndicatorRefresh+0x1c2>
 8004f22:	f04f 32ff 	mov.w	r2, #4294967295
 8004f26:	4b49      	ldr	r3, [pc, #292]	; (800504c <MenuIndicatorRefresh+0x2e8>)
 8004f28:	761a      	strb	r2, [r3, #24]
	sub_menu3_1_1_4.menu_state = (Logo.Mode == 3)? 1 : -1;
 8004f2a:	4b45      	ldr	r3, [pc, #276]	; (8005040 <MenuIndicatorRefresh+0x2dc>)
 8004f2c:	f993 3000 	ldrsb.w	r3, [r3]
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d101      	bne.n	8004f38 <MenuIndicatorRefresh+0x1d4>
 8004f34:	2201      	movs	r2, #1
 8004f36:	e001      	b.n	8004f3c <MenuIndicatorRefresh+0x1d8>
 8004f38:	f04f 32ff 	mov.w	r2, #4294967295
 8004f3c:	4b44      	ldr	r3, [pc, #272]	; (8005050 <MenuIndicatorRefresh+0x2ec>)
 8004f3e:	761a      	strb	r2, [r3, #24]

	sub_menu3_2_1_1.menu_state = (Light.Mode == 0)? 1 : -1;
 8004f40:	4b44      	ldr	r3, [pc, #272]	; (8005054 <MenuIndicatorRefresh+0x2f0>)
 8004f42:	f993 3000 	ldrsb.w	r3, [r3]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <MenuIndicatorRefresh+0x1ea>
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	e001      	b.n	8004f52 <MenuIndicatorRefresh+0x1ee>
 8004f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f52:	4b41      	ldr	r3, [pc, #260]	; (8005058 <MenuIndicatorRefresh+0x2f4>)
 8004f54:	761a      	strb	r2, [r3, #24]
	sub_menu3_2_1_2.menu_state = (Light.Mode == 1)? 1 : -1;
 8004f56:	4b3f      	ldr	r3, [pc, #252]	; (8005054 <MenuIndicatorRefresh+0x2f0>)
 8004f58:	f993 3000 	ldrsb.w	r3, [r3]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d101      	bne.n	8004f64 <MenuIndicatorRefresh+0x200>
 8004f60:	2201      	movs	r2, #1
 8004f62:	e001      	b.n	8004f68 <MenuIndicatorRefresh+0x204>
 8004f64:	f04f 32ff 	mov.w	r2, #4294967295
 8004f68:	4b3c      	ldr	r3, [pc, #240]	; (800505c <MenuIndicatorRefresh+0x2f8>)
 8004f6a:	761a      	strb	r2, [r3, #24]
	sub_menu3_2_1_3.menu_state = (Light.Mode == 2)? 1 : -1;
 8004f6c:	4b39      	ldr	r3, [pc, #228]	; (8005054 <MenuIndicatorRefresh+0x2f0>)
 8004f6e:	f993 3000 	ldrsb.w	r3, [r3]
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d101      	bne.n	8004f7a <MenuIndicatorRefresh+0x216>
 8004f76:	2201      	movs	r2, #1
 8004f78:	e001      	b.n	8004f7e <MenuIndicatorRefresh+0x21a>
 8004f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f7e:	4b38      	ldr	r3, [pc, #224]	; (8005060 <MenuIndicatorRefresh+0x2fc>)
 8004f80:	761a      	strb	r2, [r3, #24]
	sub_menu3_2_1_4.menu_state = (Light.Mode == 3)? 1 : -1;
 8004f82:	4b34      	ldr	r3, [pc, #208]	; (8005054 <MenuIndicatorRefresh+0x2f0>)
 8004f84:	f993 3000 	ldrsb.w	r3, [r3]
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d101      	bne.n	8004f90 <MenuIndicatorRefresh+0x22c>
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	e001      	b.n	8004f94 <MenuIndicatorRefresh+0x230>
 8004f90:	f04f 32ff 	mov.w	r2, #4294967295
 8004f94:	4b33      	ldr	r3, [pc, #204]	; (8005064 <MenuIndicatorRefresh+0x300>)
 8004f96:	761a      	strb	r2, [r3, #24]

	sub_menu3_3_1.menu_state = (htim4.Init.Prescaler ==  HZ60)? 1 : -1;
 8004f98:	4b33      	ldr	r3, [pc, #204]	; (8005068 <MenuIndicatorRefresh+0x304>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f240 42af 	movw	r2, #1199	; 0x4af
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d101      	bne.n	8004fa8 <MenuIndicatorRefresh+0x244>
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	e001      	b.n	8004fac <MenuIndicatorRefresh+0x248>
 8004fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fac:	4b2f      	ldr	r3, [pc, #188]	; (800506c <MenuIndicatorRefresh+0x308>)
 8004fae:	761a      	strb	r2, [r3, #24]
	sub_menu3_3_2.menu_state = (htim4.Init.Prescaler == HZ100)? 1 : -1;
 8004fb0:	4b2d      	ldr	r3, [pc, #180]	; (8005068 <MenuIndicatorRefresh+0x304>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f240 22cf 	movw	r2, #719	; 0x2cf
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d101      	bne.n	8004fc0 <MenuIndicatorRefresh+0x25c>
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	e001      	b.n	8004fc4 <MenuIndicatorRefresh+0x260>
 8004fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fc4:	4b2a      	ldr	r3, [pc, #168]	; (8005070 <MenuIndicatorRefresh+0x30c>)
 8004fc6:	761a      	strb	r2, [r3, #24]
	sub_menu3_3_3.menu_state = (htim4.Init.Prescaler == HZ200)? 1 : -1;
 8004fc8:	4b27      	ldr	r3, [pc, #156]	; (8005068 <MenuIndicatorRefresh+0x304>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f240 1267 	movw	r2, #359	; 0x167
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d101      	bne.n	8004fd8 <MenuIndicatorRefresh+0x274>
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	e001      	b.n	8004fdc <MenuIndicatorRefresh+0x278>
 8004fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fdc:	4b25      	ldr	r3, [pc, #148]	; (8005074 <MenuIndicatorRefresh+0x310>)
 8004fde:	761a      	strb	r2, [r3, #24]
	sub_menu3_3_4.menu_state = (htim4.Init.Prescaler == HZ300)? 1 : -1;
 8004fe0:	4b21      	ldr	r3, [pc, #132]	; (8005068 <MenuIndicatorRefresh+0x304>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	2bef      	cmp	r3, #239	; 0xef
 8004fe6:	d101      	bne.n	8004fec <MenuIndicatorRefresh+0x288>
 8004fe8:	2201      	movs	r2, #1
 8004fea:	e001      	b.n	8004ff0 <MenuIndicatorRefresh+0x28c>
 8004fec:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff0:	4b21      	ldr	r3, [pc, #132]	; (8005078 <MenuIndicatorRefresh+0x314>)
 8004ff2:	761a      	strb	r2, [r3, #24]
}
 8004ff4:	bf00      	nop
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bc80      	pop	{r7}
 8004ffa:	4770      	bx	lr
 8004ffc:	40011800 	.word	0x40011800
 8005000:	200000cc 	.word	0x200000cc
 8005004:	200000e8 	.word	0x200000e8
 8005008:	20000104 	.word	0x20000104
 800500c:	20000120 	.word	0x20000120
 8005010:	2000013c 	.word	0x2000013c
 8005014:	20000158 	.word	0x20000158
 8005018:	20000174 	.word	0x20000174
 800501c:	20000190 	.word	0x20000190
 8005020:	200001ac 	.word	0x200001ac
 8005024:	200001c8 	.word	0x200001c8
 8005028:	200001e4 	.word	0x200001e4
 800502c:	20000200 	.word	0x20000200
 8005030:	2000021c 	.word	0x2000021c
 8005034:	20000238 	.word	0x20000238
 8005038:	20000254 	.word	0x20000254
 800503c:	20000270 	.word	0x20000270
 8005040:	20001e64 	.word	0x20001e64
 8005044:	20000334 	.word	0x20000334
 8005048:	20000350 	.word	0x20000350
 800504c:	2000036c 	.word	0x2000036c
 8005050:	20000388 	.word	0x20000388
 8005054:	20001e78 	.word	0x20001e78
 8005058:	20000430 	.word	0x20000430
 800505c:	2000044c 	.word	0x2000044c
 8005060:	20000468 	.word	0x20000468
 8005064:	20000484 	.word	0x20000484
 8005068:	20002740 	.word	0x20002740
 800506c:	20000510 	.word	0x20000510
 8005070:	2000052c 	.word	0x2000052c
 8005074:	20000548 	.word	0x20000548
 8005078:	20000564 	.word	0x20000564

0800507c <SetOut0>:

void SetOut0(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
	OutputPinToggle(0);
 8005080:	2000      	movs	r0, #0
 8005082:	f7fd fe69 	bl	8002d58 <OutputPinToggle>
}
 8005086:	bf00      	nop
 8005088:	bd80      	pop	{r7, pc}

0800508a <SetOut1>:

void SetOut1(void)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	af00      	add	r7, sp, #0
	OutputPinToggle(1);
 800508e:	2001      	movs	r0, #1
 8005090:	f7fd fe62 	bl	8002d58 <OutputPinToggle>
}
 8005094:	bf00      	nop
 8005096:	bd80      	pop	{r7, pc}

08005098 <SetOut2>:

void SetOut2(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
	OutputPinToggle(2);
 800509c:	2002      	movs	r0, #2
 800509e:	f7fd fe5b 	bl	8002d58 <OutputPinToggle>
}
 80050a2:	bf00      	nop
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <SetOut3>:

void SetOut3(void)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	af00      	add	r7, sp, #0
	OutputPinToggle(3);
 80050aa:	2003      	movs	r0, #3
 80050ac:	f7fd fe54 	bl	8002d58 <OutputPinToggle>
}
 80050b0:	bf00      	nop
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <SetOut4>:

void SetOut4(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
	OutputPinToggle(4);
 80050b8:	2004      	movs	r0, #4
 80050ba:	f7fd fe4d 	bl	8002d58 <OutputPinToggle>
}
 80050be:	bf00      	nop
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <SetOut5>:

void SetOut5(void)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	af00      	add	r7, sp, #0
	OutputPinToggle(5);
 80050c6:	2005      	movs	r0, #5
 80050c8:	f7fd fe46 	bl	8002d58 <OutputPinToggle>
}
 80050cc:	bf00      	nop
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <SetOut6>:

void SetOut6(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
	OutputPinToggle(6);
 80050d4:	2006      	movs	r0, #6
 80050d6:	f7fd fe3f 	bl	8002d58 <OutputPinToggle>
}
 80050da:	bf00      	nop
 80050dc:	bd80      	pop	{r7, pc}

080050de <SetOut7>:

void SetOut7(void)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	af00      	add	r7, sp, #0
	OutputPinToggle(7);
 80050e2:	2007      	movs	r0, #7
 80050e4:	f7fd fe38 	bl	8002d58 <OutputPinToggle>
}
 80050e8:	bf00      	nop
 80050ea:	bd80      	pop	{r7, pc}

080050ec <SetOut8>:

void SetOut8(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
	OutputPinToggle(8);
 80050f0:	2008      	movs	r0, #8
 80050f2:	f7fd fe31 	bl	8002d58 <OutputPinToggle>
}
 80050f6:	bf00      	nop
 80050f8:	bd80      	pop	{r7, pc}

080050fa <SetOut9>:

void SetOut9(void)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	af00      	add	r7, sp, #0
	OutputPinToggle(9);
 80050fe:	2009      	movs	r0, #9
 8005100:	f7fd fe2a 	bl	8002d58 <OutputPinToggle>
}
 8005104:	bf00      	nop
 8005106:	bd80      	pop	{r7, pc}

08005108 <SetOut10>:

void SetOut10(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
	OutputPinToggle(10);
 800510c:	200a      	movs	r0, #10
 800510e:	f7fd fe23 	bl	8002d58 <OutputPinToggle>
}
 8005112:	bf00      	nop
 8005114:	bd80      	pop	{r7, pc}

08005116 <SetOut11>:

void SetOut11(void)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	af00      	add	r7, sp, #0
	OutputPinToggle(11);
 800511a:	200b      	movs	r0, #11
 800511c:	f7fd fe1c 	bl	8002d58 <OutputPinToggle>
}
 8005120:	bf00      	nop
 8005122:	bd80      	pop	{r7, pc}

08005124 <SetOut12>:

void SetOut12(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
	OutputPinToggle(12);
 8005128:	200c      	movs	r0, #12
 800512a:	f7fd fe15 	bl	8002d58 <OutputPinToggle>
}
 800512e:	bf00      	nop
 8005130:	bd80      	pop	{r7, pc}

08005132 <SetOut13>:

void SetOut13(void)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	af00      	add	r7, sp, #0
	OutputPinToggle(13);
 8005136:	200d      	movs	r0, #13
 8005138:	f7fd fe0e 	bl	8002d58 <OutputPinToggle>
}
 800513c:	bf00      	nop
 800513e:	bd80      	pop	{r7, pc}

08005140 <SetOut14>:

void SetOut14(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
	OutputPinToggle(14);
 8005144:	200e      	movs	r0, #14
 8005146:	f7fd fe07 	bl	8002d58 <OutputPinToggle>
}
 800514a:	bf00      	nop
 800514c:	bd80      	pop	{r7, pc}

0800514e <SetOut15>:

void SetOut15(void)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	af00      	add	r7, sp, #0
	OutputPinToggle(15);
 8005152:	200f      	movs	r0, #15
 8005154:	f7fd fe00 	bl	8002d58 <OutputPinToggle>
}
 8005158:	bf00      	nop
 800515a:	bd80      	pop	{r7, pc}

0800515c <SetModeLogo0>:

void SetModeLogo0(void)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	af00      	add	r7, sp, #0
	LogoLedSetParameter(0, 0, 0);
 8005160:	2200      	movs	r2, #0
 8005162:	2100      	movs	r1, #0
 8005164:	2000      	movs	r0, #0
 8005166:	f7fd fe71 	bl	8002e4c <LogoLedSetParameter>
}
 800516a:	bf00      	nop
 800516c:	bd80      	pop	{r7, pc}

0800516e <SetModeLogo1>:

void SetModeLogo1(void)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	af00      	add	r7, sp, #0
	LogoLedSetParameter(1, 0, 0);
 8005172:	2200      	movs	r2, #0
 8005174:	2100      	movs	r1, #0
 8005176:	2001      	movs	r0, #1
 8005178:	f7fd fe68 	bl	8002e4c <LogoLedSetParameter>
}
 800517c:	bf00      	nop
 800517e:	bd80      	pop	{r7, pc}

08005180 <SetModeLogo2>:

void SetModeLogo2(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
	LogoLedSetParameter(2, 0, 0);
 8005184:	2200      	movs	r2, #0
 8005186:	2100      	movs	r1, #0
 8005188:	2002      	movs	r0, #2
 800518a:	f7fd fe5f 	bl	8002e4c <LogoLedSetParameter>
}
 800518e:	bf00      	nop
 8005190:	bd80      	pop	{r7, pc}

08005192 <SetModeLogo3>:

void SetModeLogo3(void)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	af00      	add	r7, sp, #0
	LogoLedSetParameter(3, 0, 0);
 8005196:	2200      	movs	r2, #0
 8005198:	2100      	movs	r1, #0
 800519a:	2003      	movs	r0, #3
 800519c:	f7fd fe56 	bl	8002e4c <LogoLedSetParameter>
}
 80051a0:	bf00      	nop
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <SetModeLight0>:

void SetModeLight0(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
	LightLedSetParameter(0, 0, 0);
 80051a8:	2200      	movs	r2, #0
 80051aa:	2100      	movs	r1, #0
 80051ac:	2000      	movs	r0, #0
 80051ae:	f7fd fe6d 	bl	8002e8c <LightLedSetParameter>
}
 80051b2:	bf00      	nop
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <SetModeLight1>:
void SetModeLight1(void)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	af00      	add	r7, sp, #0
	LightLedSetParameter(1, 0, 0);
 80051ba:	2200      	movs	r2, #0
 80051bc:	2100      	movs	r1, #0
 80051be:	2001      	movs	r0, #1
 80051c0:	f7fd fe64 	bl	8002e8c <LightLedSetParameter>
}
 80051c4:	bf00      	nop
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <SetModeLight2>:
void SetModeLight2(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
	LightLedSetParameter(2, 0, 0);
 80051cc:	2200      	movs	r2, #0
 80051ce:	2100      	movs	r1, #0
 80051d0:	2002      	movs	r0, #2
 80051d2:	f7fd fe5b 	bl	8002e8c <LightLedSetParameter>
}
 80051d6:	bf00      	nop
 80051d8:	bd80      	pop	{r7, pc}

080051da <SetModeLight3>:
void SetModeLight3(void)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	af00      	add	r7, sp, #0
	LightLedSetParameter(3, 0, 0);
 80051de:	2200      	movs	r2, #0
 80051e0:	2100      	movs	r1, #0
 80051e2:	2003      	movs	r0, #3
 80051e4:	f7fd fe52 	bl	8002e8c <LightLedSetParameter>
}
 80051e8:	bf00      	nop
 80051ea:	bd80      	pop	{r7, pc}

080051ec <SetPwmFreq60>:

void SetPwmFreq60(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
	PwmFreqSet(HZ60);
 80051f0:	f240 40af 	movw	r0, #1199	; 0x4af
 80051f4:	f7fd fd5e 	bl	8002cb4 <PwmFreqSet>
}
 80051f8:	bf00      	nop
 80051fa:	bd80      	pop	{r7, pc}

080051fc <SetPwmFreq100>:

void SetPwmFreq100(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
	PwmFreqSet(HZ100);
 8005200:	f240 20cf 	movw	r0, #719	; 0x2cf
 8005204:	f7fd fd56 	bl	8002cb4 <PwmFreqSet>
}
 8005208:	bf00      	nop
 800520a:	bd80      	pop	{r7, pc}

0800520c <SetPwmFreq200>:

void SetPwmFreq200(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
	PwmFreqSet(HZ200);
 8005210:	f240 1067 	movw	r0, #359	; 0x167
 8005214:	f7fd fd4e 	bl	8002cb4 <PwmFreqSet>
}
 8005218:	bf00      	nop
 800521a:	bd80      	pop	{r7, pc}

0800521c <SetPwmFreq300>:

void SetPwmFreq300(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
	PwmFreqSet(HZ300);
 8005220:	20ef      	movs	r0, #239	; 0xef
 8005222:	f7fd fd47 	bl	8002cb4 <PwmFreqSet>
}
 8005226:	bf00      	nop
 8005228:	bd80      	pop	{r7, pc}

0800522a <Parser_TakeLine>:
		{LIGHT_PARAM, LightLedSetParameter, 3},
		{LOGO_PARAM, LogoLedSetParameter, 3}
};

void Parser_TakeLine(RingBuffer_t *Buff, uint8_t *Destination)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b084      	sub	sp, #16
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	6039      	str	r1, [r7, #0]
	  uint8_t i = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	73fb      	strb	r3, [r7, #15]
	  uint8_t tmp = 0;
 8005238:	2300      	movs	r3, #0
 800523a:	73bb      	strb	r3, [r7, #14]
	do
	{
		 Ring_Buffer_Read(Buff, &tmp);
 800523c:	f107 030e 	add.w	r3, r7, #14
 8005240:	4619      	mov	r1, r3
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f882 	bl	800534c <Ring_Buffer_Read>
		 if(tmp == ENDLINE)
 8005248:	7bbb      	ldrb	r3, [r7, #14]
 800524a:	2b5e      	cmp	r3, #94	; 0x5e
 800524c:	d105      	bne.n	800525a <Parser_TakeLine+0x30>
			{
			 Destination[i] = 0;
 800524e:	7bfb      	ldrb	r3, [r7, #15]
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	4413      	add	r3, r2
 8005254:	2200      	movs	r2, #0
 8005256:	701a      	strb	r2, [r3, #0]
 8005258:	e004      	b.n	8005264 <Parser_TakeLine+0x3a>
			}
		else
			{
			Destination[i] = tmp;
 800525a:	7bfb      	ldrb	r3, [r7, #15]
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	4413      	add	r3, r2
 8005260:	7bba      	ldrb	r2, [r7, #14]
 8005262:	701a      	strb	r2, [r3, #0]
			}

			i++;
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	3301      	adds	r3, #1
 8005268:	73fb      	strb	r3, [r7, #15]

	} while(tmp != ENDLINE);
 800526a:	7bbb      	ldrb	r3, [r7, #14]
 800526c:	2b5e      	cmp	r3, #94	; 0x5e
 800526e:	d1e5      	bne.n	800523c <Parser_TakeLine+0x12>
}
 8005270:	bf00      	nop
 8005272:	bf00      	nop
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <Parser_parse>:




void Parser_parse(uint8_t * DataToParse)
{
 800527c:	b590      	push	{r4, r7, lr}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
	char * ParsePointer = strtok((char*)DataToParse, "/");
 8005284:	492d      	ldr	r1, [pc, #180]	; (800533c <Parser_parse+0xc0>)
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f00e fa30 	bl	80136ec <strtok>
 800528c:	6138      	str	r0, [r7, #16]
	uint8_t CommandID = atoi(ParsePointer);
 800528e:	6938      	ldr	r0, [r7, #16]
 8005290:	f00d fc26 	bl	8012ae0 <atoi>
 8005294:	4603      	mov	r3, r0
 8005296:	73fb      	strb	r3, [r7, #15]

	if(CommandMapper[CommandID].Action != NULL)
 8005298:	7bfa      	ldrb	r2, [r7, #15]
 800529a:	4929      	ldr	r1, [pc, #164]	; (8005340 <Parser_parse+0xc4>)
 800529c:	4613      	mov	r3, r2
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	3304      	adds	r3, #4
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d041      	beq.n	8005332 <Parser_parse+0xb6>
	{
		for(uint8_t i = 0; i<CommandMapper[CommandID].CommandArgQ; i++)
 80052ae:	2300      	movs	r3, #0
 80052b0:	75fb      	strb	r3, [r7, #23]
 80052b2:	e00f      	b.n	80052d4 <Parser_parse+0x58>
		{
			char * ParsePointer = strtok(NULL, "/");
 80052b4:	4921      	ldr	r1, [pc, #132]	; (800533c <Parser_parse+0xc0>)
 80052b6:	2000      	movs	r0, #0
 80052b8:	f00e fa18 	bl	80136ec <strtok>
 80052bc:	60b8      	str	r0, [r7, #8]
			ReceivedCommandArgument[i] = atoi(ParsePointer);
 80052be:	7dfc      	ldrb	r4, [r7, #23]
 80052c0:	68b8      	ldr	r0, [r7, #8]
 80052c2:	f00d fc0d 	bl	8012ae0 <atoi>
 80052c6:	4603      	mov	r3, r0
 80052c8:	4a1e      	ldr	r2, [pc, #120]	; (8005344 <Parser_parse+0xc8>)
 80052ca:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		for(uint8_t i = 0; i<CommandMapper[CommandID].CommandArgQ; i++)
 80052ce:	7dfb      	ldrb	r3, [r7, #23]
 80052d0:	3301      	adds	r3, #1
 80052d2:	75fb      	strb	r3, [r7, #23]
 80052d4:	7bfa      	ldrb	r2, [r7, #15]
 80052d6:	491a      	ldr	r1, [pc, #104]	; (8005340 <Parser_parse+0xc4>)
 80052d8:	4613      	mov	r3, r2
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	4413      	add	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	3308      	adds	r3, #8
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	7dfa      	ldrb	r2, [r7, #23]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d3e3      	bcc.n	80052b4 <Parser_parse+0x38>
		}

 		CommandMapper[CommandID].Action(ReceivedCommandArgument[0], ReceivedCommandArgument[1], ReceivedCommandArgument[2], ReceivedCommandArgument[3]);
 80052ec:	7bfa      	ldrb	r2, [r7, #15]
 80052ee:	4914      	ldr	r1, [pc, #80]	; (8005340 <Parser_parse+0xc4>)
 80052f0:	4613      	mov	r3, r2
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	4413      	add	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	3304      	adds	r3, #4
 80052fc:	681c      	ldr	r4, [r3, #0]
 80052fe:	4b11      	ldr	r3, [pc, #68]	; (8005344 <Parser_parse+0xc8>)
 8005300:	6818      	ldr	r0, [r3, #0]
 8005302:	4b10      	ldr	r3, [pc, #64]	; (8005344 <Parser_parse+0xc8>)
 8005304:	6859      	ldr	r1, [r3, #4]
 8005306:	4b0f      	ldr	r3, [pc, #60]	; (8005344 <Parser_parse+0xc8>)
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	4b0e      	ldr	r3, [pc, #56]	; (8005344 <Parser_parse+0xc8>)
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	47a0      	blx	r4

 		//Earising argument buffer
 		for(uint8_t i=0; i<ReceivedArgumentSize; i++)
 8005310:	2300      	movs	r3, #0
 8005312:	75bb      	strb	r3, [r7, #22]
 8005314:	e007      	b.n	8005326 <Parser_parse+0xaa>
 		{
 			ReceivedCommandArgument[i] = 0;
 8005316:	7dbb      	ldrb	r3, [r7, #22]
 8005318:	4a0a      	ldr	r2, [pc, #40]	; (8005344 <Parser_parse+0xc8>)
 800531a:	2100      	movs	r1, #0
 800531c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 		for(uint8_t i=0; i<ReceivedArgumentSize; i++)
 8005320:	7dbb      	ldrb	r3, [r7, #22]
 8005322:	3301      	adds	r3, #1
 8005324:	75bb      	strb	r3, [r7, #22]
 8005326:	7dbb      	ldrb	r3, [r7, #22]
 8005328:	2b0f      	cmp	r3, #15
 800532a:	d9f4      	bls.n	8005316 <Parser_parse+0x9a>
 		}
 		UsbBuffWrite("OK");
 800532c:	4806      	ldr	r0, [pc, #24]	; (8005348 <Parser_parse+0xcc>)
 800532e:	f7ff f833 	bl	8004398 <UsbBuffWrite>
	}
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	bd90      	pop	{r4, r7, pc}
 800533a:	bf00      	nop
 800533c:	08015b9c 	.word	0x08015b9c
 8005340:	2000062c 	.word	0x2000062c
 8005344:	20001eac 	.word	0x20001eac
 8005348:	08015ba0 	.word	0x08015ba0

0800534c <Ring_Buffer_Read>:
 */
#include "main.h"
#include "ring_buffer.h"

RbStatus_t Ring_Buffer_Read(RingBuffer_t * Buff, uint8_t *value)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
	if(Buff->Head == Buff->Tail)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	881a      	ldrh	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	885b      	ldrh	r3, [r3, #2]
 800535e:	429a      	cmp	r2, r3
 8005360:	d101      	bne.n	8005366 <Ring_Buffer_Read+0x1a>
	{
		return RB_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e015      	b.n	8005392 <Ring_Buffer_Read+0x46>
	}
	*value = Buff->Buffer[Buff->Tail];
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	885b      	ldrh	r3, [r3, #2]
 800536a:	461a      	mov	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4413      	add	r3, r2
 8005370:	791a      	ldrb	r2, [r3, #4]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	701a      	strb	r2, [r3, #0]

	Buff->Tail = (Buff->Tail + 1) % RING_BUFFER_SIZE;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	885b      	ldrh	r3, [r3, #2]
 800537a:	3301      	adds	r3, #1
 800537c:	425a      	negs	r2, r3
 800537e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005382:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005386:	bf58      	it	pl
 8005388:	4253      	negpl	r3, r2
 800538a:	b29a      	uxth	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	805a      	strh	r2, [r3, #2]

	return RB_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr

0800539c <Ring_Buffer_Write>:

RbStatus_t Ring_Buffer_Write(RingBuffer_t * Buff, uint8_t value)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	70fb      	strb	r3, [r7, #3]
	uint16_t Head_tmp = (Buff->Head + 1) % RING_BUFFER_SIZE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	3301      	adds	r3, #1
 80053ae:	425a      	negs	r2, r3
 80053b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053b4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80053b8:	bf58      	it	pl
 80053ba:	4253      	negpl	r3, r2
 80053bc:	81fb      	strh	r3, [r7, #14]

	if(Head_tmp == Buff->Tail)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	885b      	ldrh	r3, [r3, #2]
 80053c2:	89fa      	ldrh	r2, [r7, #14]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d101      	bne.n	80053cc <Ring_Buffer_Write+0x30>
	{
		return RB_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e00a      	b.n	80053e2 <Ring_Buffer_Write+0x46>
	}
	Buff->Buffer[Buff->Head] = value;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	461a      	mov	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4413      	add	r3, r2
 80053d6:	78fa      	ldrb	r2, [r7, #3]
 80053d8:	711a      	strb	r2, [r3, #4]
	Buff->Head = Head_tmp;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	89fa      	ldrh	r2, [r7, #14]
 80053de:	801a      	strh	r2, [r3, #0]

	return RB_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr

080053ec <Ring_Buffer_Flush>:

void Ring_Buffer_Flush(RingBuffer_t * Buff)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
	Buff->Head = 0;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	801a      	strh	r2, [r3, #0]
	Buff->Tail = 0;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	805a      	strh	r2, [r3, #2]
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	bc80      	pop	{r7}
 8005408:	4770      	bx	lr
	...

0800540c <SSD1306_Command>:

static uint8_t buffer[SSD1306_BUFFER_SIZE];
static uint8_t buffer_disp[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af04      	add	r7, sp, #16
 8005412:	4603      	mov	r3, r0
 8005414:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 8005416:	4b09      	ldr	r3, [pc, #36]	; (800543c <SSD1306_Command+0x30>)
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800541e:	9302      	str	r3, [sp, #8]
 8005420:	2301      	movs	r3, #1
 8005422:	9301      	str	r3, [sp, #4]
 8005424:	1dfb      	adds	r3, r7, #7
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	2301      	movs	r3, #1
 800542a:	2200      	movs	r2, #0
 800542c:	2178      	movs	r1, #120	; 0x78
 800542e:	f002 fc7d 	bl	8007d2c <HAL_I2C_Mem_Write>
}
 8005432:	bf00      	nop
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20001eec 	.word	0x20001eec

08005440 <SSD1306_Data>:

static void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af02      	add	r7, sp, #8
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	460b      	mov	r3, r1
 800544a:	807b      	strh	r3, [r7, #2]
#ifdef SSD1306_USE_DMA

	if(oled_i2c -> hdmatx -> State == HAL_DMA_STATE_READY)
 800544c:	4b0f      	ldr	r3, [pc, #60]	; (800548c <SSD1306_Data+0x4c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005452:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b01      	cmp	r3, #1
 800545a:	d112      	bne.n	8005482 <SSD1306_Data+0x42>
	{
		if(HAL_I2C_Mem_Write_DMA(oled_i2c, (SSD1306_ADRESS<<1), 0x40, 1, Data, Size) == HAL_ERROR)
 800545c:	4b0b      	ldr	r3, [pc, #44]	; (800548c <SSD1306_Data+0x4c>)
 800545e:	6818      	ldr	r0, [r3, #0]
 8005460:	887b      	ldrh	r3, [r7, #2]
 8005462:	9301      	str	r3, [sp, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	2301      	movs	r3, #1
 800546a:	2240      	movs	r2, #64	; 0x40
 800546c:	2178      	movs	r1, #120	; 0x78
 800546e:	f002 ffbf 	bl	80083f0 <HAL_I2C_Mem_Write_DMA>
 8005472:	4603      	mov	r3, r0
 8005474:	2b01      	cmp	r3, #1
 8005476:	d104      	bne.n	8005482 <SSD1306_Data+0x42>
		{
			ERROR_OLED;
 8005478:	4a05      	ldr	r2, [pc, #20]	; (8005490 <SSD1306_Data+0x50>)
 800547a:	7813      	ldrb	r3, [r2, #0]
 800547c:	f043 0302 	orr.w	r3, r3, #2
 8005480:	7013      	strb	r3, [r2, #0]
		}
	}
#else
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
#endif
}
 8005482:	bf00      	nop
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20001eec 	.word	0x20001eec
 8005490:	20001e8c 	.word	0x20001e8c

08005494 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	4603      	mov	r3, r0
 800549c:	80fb      	strh	r3, [r7, #6]
 800549e:	460b      	mov	r3, r1
 80054a0:	80bb      	strh	r3, [r7, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 80054a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	db79      	blt.n	80055a2 <SSD1306_DrawPixel+0x10e>
 80054ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054b2:	2b7f      	cmp	r3, #127	; 0x7f
 80054b4:	dc75      	bgt.n	80055a2 <SSD1306_DrawPixel+0x10e>
 80054b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	db71      	blt.n	80055a2 <SSD1306_DrawPixel+0x10e>
 80054be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80054c2:	2b3f      	cmp	r3, #63	; 0x3f
 80054c4:	dc6d      	bgt.n	80055a2 <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 80054c6:	78fb      	ldrb	r3, [r7, #3]
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d049      	beq.n	8005560 <SSD1306_DrawPixel+0xcc>
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	dc69      	bgt.n	80055a4 <SSD1306_DrawPixel+0x110>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d022      	beq.n	800551a <SSD1306_DrawPixel+0x86>
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d165      	bne.n	80055a4 <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 80054d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80054dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	da00      	bge.n	80054e6 <SSD1306_DrawPixel+0x52>
 80054e4:	3307      	adds	r3, #7
 80054e6:	10db      	asrs	r3, r3, #3
 80054e8:	b218      	sxth	r0, r3
 80054ea:	4603      	mov	r3, r0
 80054ec:	01db      	lsls	r3, r3, #7
 80054ee:	4413      	add	r3, r2
 80054f0:	4a2e      	ldr	r2, [pc, #184]	; (80055ac <SSD1306_DrawPixel+0x118>)
 80054f2:	5cd3      	ldrb	r3, [r2, r3]
 80054f4:	b25a      	sxtb	r2, r3
 80054f6:	88bb      	ldrh	r3, [r7, #4]
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	2101      	movs	r1, #1
 80054fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005502:	b25b      	sxtb	r3, r3
 8005504:	4313      	orrs	r3, r2
 8005506:	b259      	sxtb	r1, r3
 8005508:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800550c:	4603      	mov	r3, r0
 800550e:	01db      	lsls	r3, r3, #7
 8005510:	4413      	add	r3, r2
 8005512:	b2c9      	uxtb	r1, r1
 8005514:	4a25      	ldr	r2, [pc, #148]	; (80055ac <SSD1306_DrawPixel+0x118>)
 8005516:	54d1      	strb	r1, [r2, r3]
      break;
 8005518:	e044      	b.n	80055a4 <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 800551a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800551e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	da00      	bge.n	8005528 <SSD1306_DrawPixel+0x94>
 8005526:	3307      	adds	r3, #7
 8005528:	10db      	asrs	r3, r3, #3
 800552a:	b218      	sxth	r0, r3
 800552c:	4603      	mov	r3, r0
 800552e:	01db      	lsls	r3, r3, #7
 8005530:	4413      	add	r3, r2
 8005532:	4a1e      	ldr	r2, [pc, #120]	; (80055ac <SSD1306_DrawPixel+0x118>)
 8005534:	5cd3      	ldrb	r3, [r2, r3]
 8005536:	b25a      	sxtb	r2, r3
 8005538:	88bb      	ldrh	r3, [r7, #4]
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	2101      	movs	r1, #1
 8005540:	fa01 f303 	lsl.w	r3, r1, r3
 8005544:	b25b      	sxtb	r3, r3
 8005546:	43db      	mvns	r3, r3
 8005548:	b25b      	sxtb	r3, r3
 800554a:	4013      	ands	r3, r2
 800554c:	b259      	sxtb	r1, r3
 800554e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005552:	4603      	mov	r3, r0
 8005554:	01db      	lsls	r3, r3, #7
 8005556:	4413      	add	r3, r2
 8005558:	b2c9      	uxtb	r1, r1
 800555a:	4a14      	ldr	r2, [pc, #80]	; (80055ac <SSD1306_DrawPixel+0x118>)
 800555c:	54d1      	strb	r1, [r2, r3]
      break;
 800555e:	e021      	b.n	80055a4 <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 8005560:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005564:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	da00      	bge.n	800556e <SSD1306_DrawPixel+0xda>
 800556c:	3307      	adds	r3, #7
 800556e:	10db      	asrs	r3, r3, #3
 8005570:	b218      	sxth	r0, r3
 8005572:	4603      	mov	r3, r0
 8005574:	01db      	lsls	r3, r3, #7
 8005576:	4413      	add	r3, r2
 8005578:	4a0c      	ldr	r2, [pc, #48]	; (80055ac <SSD1306_DrawPixel+0x118>)
 800557a:	5cd3      	ldrb	r3, [r2, r3]
 800557c:	b25a      	sxtb	r2, r3
 800557e:	88bb      	ldrh	r3, [r7, #4]
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	2101      	movs	r1, #1
 8005586:	fa01 f303 	lsl.w	r3, r1, r3
 800558a:	b25b      	sxtb	r3, r3
 800558c:	4053      	eors	r3, r2
 800558e:	b259      	sxtb	r1, r3
 8005590:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005594:	4603      	mov	r3, r0
 8005596:	01db      	lsls	r3, r3, #7
 8005598:	4413      	add	r3, r2
 800559a:	b2c9      	uxtb	r1, r1
 800559c:	4a03      	ldr	r2, [pc, #12]	; (80055ac <SSD1306_DrawPixel+0x118>)
 800559e:	54d1      	strb	r1, [r2, r3]
      break;
 80055a0:	e000      	b.n	80055a4 <SSD1306_DrawPixel+0x110>
	  return;
 80055a2:	bf00      	nop
    }
}
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bc80      	pop	{r7}
 80055aa:	4770      	bx	lr
 80055ac:	20001ef4 	.word	0x20001ef4

080055b0 <SSD1306_Clear>:


void SSD1306_Clear(uint8_t Color)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	4603      	mov	r3, r0
 80055b8:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 80055ba:	79fb      	ldrb	r3, [r7, #7]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d008      	beq.n	80055d2 <SSD1306_Clear+0x22>
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d10d      	bne.n	80055e0 <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xff, SSD1306_BUFFER_SIZE);
 80055c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055c8:	21ff      	movs	r1, #255	; 0xff
 80055ca:	4807      	ldr	r0, [pc, #28]	; (80055e8 <SSD1306_Clear+0x38>)
 80055cc:	f00e f885 	bl	80136da <memset>
		break;
 80055d0:	e006      	b.n	80055e0 <SSD1306_Clear+0x30>
	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 80055d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055d6:	2100      	movs	r1, #0
 80055d8:	4803      	ldr	r0, [pc, #12]	; (80055e8 <SSD1306_Clear+0x38>)
 80055da:	f00e f87e 	bl	80136da <memset>
		break;
 80055de:	bf00      	nop
	}
}
 80055e0:	bf00      	nop
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	20001ef4 	.word	0x20001ef4

080055ec <SSD1306_Display>:

void SSD1306_Display(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_PAGEADDR);
 80055f0:	2022      	movs	r0, #34	; 0x22
 80055f2:	f7ff ff0b 	bl	800540c <SSD1306_Command>
	SSD1306_Command(0);                      // Page start address
 80055f6:	2000      	movs	r0, #0
 80055f8:	f7ff ff08 	bl	800540c <SSD1306_Command>
	SSD1306_Command(0xFF);                   // Page end (not really, but works here)
 80055fc:	20ff      	movs	r0, #255	; 0xff
 80055fe:	f7ff ff05 	bl	800540c <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 8005602:	2021      	movs	r0, #33	; 0x21
 8005604:	f7ff ff02 	bl	800540c <SSD1306_Command>
	SSD1306_Command(0); // Column start address
 8005608:	2000      	movs	r0, #0
 800560a:	f7ff feff 	bl	800540c <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 800560e:	207f      	movs	r0, #127	; 0x7f
 8005610:	f7ff fefc 	bl	800540c <SSD1306_Command>

#ifdef SSD1306_USE_DMA_DOUBLE_BUFFERING
	HAL_DMA_Start_IT(&hdma_memtomem_dma2_channel1, (uint32_t*)buffer, (uint32_t*)buffer_disp, SSD1306_BUFFER_SIZE);
 8005614:	4904      	ldr	r1, [pc, #16]	; (8005628 <SSD1306_Display+0x3c>)
 8005616:	4a05      	ldr	r2, [pc, #20]	; (800562c <SSD1306_Display+0x40>)
 8005618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800561c:	4804      	ldr	r0, [pc, #16]	; (8005630 <SSD1306_Display+0x44>)
 800561e:	f001 fc8b 	bl	8006f38 <HAL_DMA_Start_IT>

	SSD1306_Data(buffer_disp, SSD1306_BUFFER_SIZE);
#endif


}
 8005622:	bf00      	nop
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20001ef4 	.word	0x20001ef4
 800562c:	200022f4 	.word	0x200022f4
 8005630:	20000c6c 	.word	0x20000c6c

08005634 <XferCpltCallback>:
#ifdef SSD1306_USE_DMA_DOUBLE_BUFFERING
static void XferCpltCallback(DMA_HandleTypeDef *hdma)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
	if(hdma->Instance == oled_buff_dma->Instance)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	4b06      	ldr	r3, [pc, #24]	; (800565c <XferCpltCallback+0x28>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d104      	bne.n	8005654 <XferCpltCallback+0x20>
	{
		SSD1306_Data(buffer_disp, SSD1306_BUFFER_SIZE);
 800564a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800564e:	4804      	ldr	r0, [pc, #16]	; (8005660 <XferCpltCallback+0x2c>)
 8005650:	f7ff fef6 	bl	8005440 <SSD1306_Data>
	}
}
 8005654:	bf00      	nop
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	20001ef0 	.word	0x20001ef0
 8005660:	200022f4 	.word	0x200022f4

08005664 <SSD1306_Init>:
#endif


#ifdef SSD1306_USE_DMA_DOUBLE_BUFFERING
HAL_StatusTypeDef SSD1306_Init(I2C_HandleTypeDef *i2c, DMA_HandleTypeDef *dma)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
	oled_i2c = i2c;
 800566e:	4a35      	ldr	r2, [pc, #212]	; (8005744 <SSD1306_Init+0xe0>)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6013      	str	r3, [r2, #0]
	oled_buff_dma = dma;
 8005674:	4a34      	ldr	r2, [pc, #208]	; (8005748 <SSD1306_Init+0xe4>)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	6013      	str	r3, [r2, #0]

	if(HAL_I2C_IsDeviceReady(oled_i2c, (SSD1306_ADRESS<<1), OLED_TRIALS, 10) != HAL_OK)
 800567a:	4b32      	ldr	r3, [pc, #200]	; (8005744 <SSD1306_Init+0xe0>)
 800567c:	6818      	ldr	r0, [r3, #0]
 800567e:	230a      	movs	r3, #10
 8005680:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005684:	2178      	movs	r1, #120	; 0x78
 8005686:	f003 f98f 	bl	80089a8 <HAL_I2C_IsDeviceReady>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <SSD1306_Init+0x30>
	{
		return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e052      	b.n	800573a <SSD1306_Init+0xd6>
	}


	SSD1306_Command(SSD1306_DISPLAYOFF);
 8005694:	20ae      	movs	r0, #174	; 0xae
 8005696:	f7ff feb9 	bl	800540c <SSD1306_Command>
	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 800569a:	20d5      	movs	r0, #213	; 0xd5
 800569c:	f7ff feb6 	bl	800540c <SSD1306_Command>
	SSD1306_Command(0x80);
 80056a0:	2080      	movs	r0, #128	; 0x80
 80056a2:	f7ff feb3 	bl	800540c <SSD1306_Command>
	SSD1306_Command(SSD1306_SETMULTIPLEX);
 80056a6:	20a8      	movs	r0, #168	; 0xa8
 80056a8:	f7ff feb0 	bl	800540c <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 80056ac:	203f      	movs	r0, #63	; 0x3f
 80056ae:	f7ff fead 	bl	800540c <SSD1306_Command>
	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 80056b2:	20d3      	movs	r0, #211	; 0xd3
 80056b4:	f7ff feaa 	bl	800540c <SSD1306_Command>
	SSD1306_Command(0x00);
 80056b8:	2000      	movs	r0, #0
 80056ba:	f7ff fea7 	bl	800540c <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 80056be:	2040      	movs	r0, #64	; 0x40
 80056c0:	f7ff fea4 	bl	800540c <SSD1306_Command>
	SSD1306_Command(SSD1306_CHARGEPUMP);
 80056c4:	208d      	movs	r0, #141	; 0x8d
 80056c6:	f7ff fea1 	bl	800540c <SSD1306_Command>
	SSD1306_Command(0x14);
 80056ca:	2014      	movs	r0, #20
 80056cc:	f7ff fe9e 	bl	800540c <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 80056d0:	2020      	movs	r0, #32
 80056d2:	f7ff fe9b 	bl	800540c <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 80056d6:	2000      	movs	r0, #0
 80056d8:	f7ff fe98 	bl	800540c <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 80056dc:	20a1      	movs	r0, #161	; 0xa1
 80056de:	f7ff fe95 	bl	800540c <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 80056e2:	20c8      	movs	r0, #200	; 0xc8
 80056e4:	f7ff fe92 	bl	800540c <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 80056e8:	20da      	movs	r0, #218	; 0xda
 80056ea:	f7ff fe8f 	bl	800540c <SSD1306_Command>
	SSD1306_Command(0x12);
 80056ee:	2012      	movs	r0, #18
 80056f0:	f7ff fe8c 	bl	800540c <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 80056f4:	2081      	movs	r0, #129	; 0x81
 80056f6:	f7ff fe89 	bl	800540c <SSD1306_Command>
	SSD1306_Command(0x10);
 80056fa:	2010      	movs	r0, #16
 80056fc:	f7ff fe86 	bl	800540c <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 8005700:	20d9      	movs	r0, #217	; 0xd9
 8005702:	f7ff fe83 	bl	800540c <SSD1306_Command>
	SSD1306_Command(0xF1);
 8005706:	20f1      	movs	r0, #241	; 0xf1
 8005708:	f7ff fe80 	bl	800540c <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 800570c:	20db      	movs	r0, #219	; 0xdb
 800570e:	f7ff fe7d 	bl	800540c <SSD1306_Command>
	SSD1306_Command(0x40);
 8005712:	2040      	movs	r0, #64	; 0x40
 8005714:	f7ff fe7a 	bl	800540c <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 8005718:	20a4      	movs	r0, #164	; 0xa4
 800571a:	f7ff fe77 	bl	800540c <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 800571e:	20a6      	movs	r0, #166	; 0xa6
 8005720:	f7ff fe74 	bl	800540c <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 8005724:	202e      	movs	r0, #46	; 0x2e
 8005726:	f7ff fe71 	bl	800540c <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON);
 800572a:	20af      	movs	r0, #175	; 0xaf
 800572c:	f7ff fe6e 	bl	800540c <SSD1306_Command>

	/*
	 * Bufforing DMA Cplt Callback
	 */
	oled_buff_dma->XferCpltCallback = XferCpltCallback;
 8005730:	4b05      	ldr	r3, [pc, #20]	; (8005748 <SSD1306_Init+0xe4>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a05      	ldr	r2, [pc, #20]	; (800574c <SSD1306_Init+0xe8>)
 8005736:	629a      	str	r2, [r3, #40]	; 0x28
	return HAL_OK;
 8005738:	2300      	movs	r3, #0

}
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20001eec 	.word	0x20001eec
 8005748:	20001ef0 	.word	0x20001ef0
 800574c:	08005635 	.word	0x08005635

08005750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005756:	4b15      	ldr	r3, [pc, #84]	; (80057ac <HAL_MspInit+0x5c>)
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	4a14      	ldr	r2, [pc, #80]	; (80057ac <HAL_MspInit+0x5c>)
 800575c:	f043 0301 	orr.w	r3, r3, #1
 8005760:	6193      	str	r3, [r2, #24]
 8005762:	4b12      	ldr	r3, [pc, #72]	; (80057ac <HAL_MspInit+0x5c>)
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	60bb      	str	r3, [r7, #8]
 800576c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800576e:	4b0f      	ldr	r3, [pc, #60]	; (80057ac <HAL_MspInit+0x5c>)
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	4a0e      	ldr	r2, [pc, #56]	; (80057ac <HAL_MspInit+0x5c>)
 8005774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005778:	61d3      	str	r3, [r2, #28]
 800577a:	4b0c      	ldr	r3, [pc, #48]	; (80057ac <HAL_MspInit+0x5c>)
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005782:	607b      	str	r3, [r7, #4]
 8005784:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005786:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <HAL_MspInit+0x60>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	4a04      	ldr	r2, [pc, #16]	; (80057b0 <HAL_MspInit+0x60>)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057a2:	bf00      	nop
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bc80      	pop	{r7}
 80057aa:	4770      	bx	lr
 80057ac:	40021000 	.word	0x40021000
 80057b0:	40010000 	.word	0x40010000

080057b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80057b8:	e7fe      	b.n	80057b8 <NMI_Handler+0x4>

080057ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80057ba:	b480      	push	{r7}
 80057bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80057be:	e7fe      	b.n	80057be <HardFault_Handler+0x4>

080057c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80057c4:	e7fe      	b.n	80057c4 <MemManage_Handler+0x4>

080057c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80057c6:	b480      	push	{r7}
 80057c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80057ca:	e7fe      	b.n	80057ca <BusFault_Handler+0x4>

080057cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80057d0:	e7fe      	b.n	80057d0 <UsageFault_Handler+0x4>

080057d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80057d2:	b480      	push	{r7}
 80057d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80057d6:	bf00      	nop
 80057d8:	46bd      	mov	sp, r7
 80057da:	bc80      	pop	{r7}
 80057dc:	4770      	bx	lr

080057de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80057de:	b480      	push	{r7}
 80057e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80057e2:	bf00      	nop
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bc80      	pop	{r7}
 80057e8:	4770      	bx	lr

080057ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057ea:	b480      	push	{r7}
 80057ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80057ee:	bf00      	nop
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bc80      	pop	{r7}
 80057f4:	4770      	bx	lr

080057f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80057fa:	f000 fd17 	bl	800622c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80057fe:	bf00      	nop
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005808:	4802      	ldr	r0, [pc, #8]	; (8005814 <DMA1_Channel1_IRQHandler+0x10>)
 800580a:	f001 fcfd 	bl	8007208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800580e:	bf00      	nop
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	20000c28 	.word	0x20000c28

08005818 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800581c:	4802      	ldr	r0, [pc, #8]	; (8005828 <DMA1_Channel6_IRQHandler+0x10>)
 800581e:	f001 fcf3 	bl	8007208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005822:	bf00      	nop
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	20000d48 	.word	0x20000d48

0800582c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005830:	4802      	ldr	r0, [pc, #8]	; (800583c <DMA1_Channel7_IRQHandler+0x10>)
 8005832:	f001 fce9 	bl	8007208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8005836:	bf00      	nop
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	20000d04 	.word	0x20000d04

08005840 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005844:	4802      	ldr	r0, [pc, #8]	; (8005850 <ADC1_2_IRQHandler+0x10>)
 8005846:	f000 ff17 	bl	8006678 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800584a:	bf00      	nop
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20000bf8 	.word	0x20000bf8

08005854 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005858:	4802      	ldr	r0, [pc, #8]	; (8005864 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800585a:	f005 fb51 	bl	800af00 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800585e:	bf00      	nop
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	20003574 	.word	0x20003574

08005868 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800586c:	4802      	ldr	r0, [pc, #8]	; (8005878 <I2C1_EV_IRQHandler+0x10>)
 800586e:	f003 f9c9 	bl	8008c04 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005872:	bf00      	nop
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000cb0 	.word	0x20000cb0

0800587c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_channel1);
 8005880:	4802      	ldr	r0, [pc, #8]	; (800588c <DMA2_Channel1_IRQHandler+0x10>)
 8005882:	f001 fcc1 	bl	8007208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8005886:	bf00      	nop
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20000c6c 	.word	0x20000c6c

08005890 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005890:	b480      	push	{r7}
 8005892:	af00      	add	r7, sp, #0
  return 1;
 8005894:	2301      	movs	r3, #1
}
 8005896:	4618      	mov	r0, r3
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	4770      	bx	lr

0800589e <_kill>:

int _kill(int pid, int sig)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b082      	sub	sp, #8
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
 80058a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80058a8:	f00d ffc6 	bl	8013838 <__errno>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2216      	movs	r2, #22
 80058b0:	601a      	str	r2, [r3, #0]
  return -1;
 80058b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <_exit>:

void _exit (int status)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80058c6:	f04f 31ff 	mov.w	r1, #4294967295
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7ff ffe7 	bl	800589e <_kill>
  while (1) {}    /* Make sure we hang here */
 80058d0:	e7fe      	b.n	80058d0 <_exit+0x12>

080058d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b086      	sub	sp, #24
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058de:	2300      	movs	r3, #0
 80058e0:	617b      	str	r3, [r7, #20]
 80058e2:	e00a      	b.n	80058fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80058e4:	f3af 8000 	nop.w
 80058e8:	4601      	mov	r1, r0
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	60ba      	str	r2, [r7, #8]
 80058f0:	b2ca      	uxtb	r2, r1
 80058f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	3301      	adds	r3, #1
 80058f8:	617b      	str	r3, [r7, #20]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	429a      	cmp	r2, r3
 8005900:	dbf0      	blt.n	80058e4 <_read+0x12>
  }

  return len;
 8005902:	687b      	ldr	r3, [r7, #4]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3718      	adds	r7, #24
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005918:	2300      	movs	r3, #0
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	e009      	b.n	8005932 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	1c5a      	adds	r2, r3, #1
 8005922:	60ba      	str	r2, [r7, #8]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	3301      	adds	r3, #1
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	429a      	cmp	r2, r3
 8005938:	dbf1      	blt.n	800591e <_write+0x12>
  }
  return len;
 800593a:	687b      	ldr	r3, [r7, #4]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <_close>:

int _close(int file)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800594c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005950:	4618      	mov	r0, r3
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	bc80      	pop	{r7}
 8005958:	4770      	bx	lr

0800595a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800595a:	b480      	push	{r7}
 800595c:	b083      	sub	sp, #12
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
 8005962:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800596a:	605a      	str	r2, [r3, #4]
  return 0;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	bc80      	pop	{r7}
 8005976:	4770      	bx	lr

08005978 <_isatty>:

int _isatty(int file)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005980:	2301      	movs	r3, #1
}
 8005982:	4618      	mov	r0, r3
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	bc80      	pop	{r7}
 800598a:	4770      	bx	lr

0800598c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	bc80      	pop	{r7}
 80059a2:	4770      	bx	lr

080059a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80059ac:	4a14      	ldr	r2, [pc, #80]	; (8005a00 <_sbrk+0x5c>)
 80059ae:	4b15      	ldr	r3, [pc, #84]	; (8005a04 <_sbrk+0x60>)
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80059b8:	4b13      	ldr	r3, [pc, #76]	; (8005a08 <_sbrk+0x64>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d102      	bne.n	80059c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80059c0:	4b11      	ldr	r3, [pc, #68]	; (8005a08 <_sbrk+0x64>)
 80059c2:	4a12      	ldr	r2, [pc, #72]	; (8005a0c <_sbrk+0x68>)
 80059c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80059c6:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <_sbrk+0x64>)
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4413      	add	r3, r2
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d207      	bcs.n	80059e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80059d4:	f00d ff30 	bl	8013838 <__errno>
 80059d8:	4603      	mov	r3, r0
 80059da:	220c      	movs	r2, #12
 80059dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80059de:	f04f 33ff 	mov.w	r3, #4294967295
 80059e2:	e009      	b.n	80059f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80059e4:	4b08      	ldr	r3, [pc, #32]	; (8005a08 <_sbrk+0x64>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80059ea:	4b07      	ldr	r3, [pc, #28]	; (8005a08 <_sbrk+0x64>)
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4413      	add	r3, r2
 80059f2:	4a05      	ldr	r2, [pc, #20]	; (8005a08 <_sbrk+0x64>)
 80059f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80059f6:	68fb      	ldr	r3, [r7, #12]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	20010000 	.word	0x20010000
 8005a04:	00001000 	.word	0x00001000
 8005a08:	200026f4 	.word	0x200026f4
 8005a0c:	20003bd0 	.word	0x20003bd0

08005a10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005a14:	bf00      	nop
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr

08005a1c <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08e      	sub	sp, #56	; 0x38
 8005a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	605a      	str	r2, [r3, #4]
 8005a2c:	609a      	str	r2, [r3, #8]
 8005a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a30:	f107 0320 	add.w	r3, r7, #32
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a3a:	1d3b      	adds	r3, r7, #4
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	605a      	str	r2, [r3, #4]
 8005a42:	609a      	str	r2, [r3, #8]
 8005a44:	60da      	str	r2, [r3, #12]
 8005a46:	611a      	str	r2, [r3, #16]
 8005a48:	615a      	str	r2, [r3, #20]
 8005a4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005a4c:	4b2d      	ldr	r3, [pc, #180]	; (8005b04 <MX_TIM3_Init+0xe8>)
 8005a4e:	4a2e      	ldr	r2, [pc, #184]	; (8005b08 <MX_TIM3_Init+0xec>)
 8005a50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 359;
 8005a52:	4b2c      	ldr	r3, [pc, #176]	; (8005b04 <MX_TIM3_Init+0xe8>)
 8005a54:	f240 1267 	movw	r2, #359	; 0x167
 8005a58:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a5a:	4b2a      	ldr	r3, [pc, #168]	; (8005b04 <MX_TIM3_Init+0xe8>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8005a60:	4b28      	ldr	r3, [pc, #160]	; (8005b04 <MX_TIM3_Init+0xe8>)
 8005a62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a68:	4b26      	ldr	r3, [pc, #152]	; (8005b04 <MX_TIM3_Init+0xe8>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a6e:	4b25      	ldr	r3, [pc, #148]	; (8005b04 <MX_TIM3_Init+0xe8>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005a74:	4823      	ldr	r0, [pc, #140]	; (8005b04 <MX_TIM3_Init+0xe8>)
 8005a76:	f007 fb55 	bl	800d124 <HAL_TIM_Base_Init>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8005a80:	f7fe fcf8 	bl	8004474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a88:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005a8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a8e:	4619      	mov	r1, r3
 8005a90:	481c      	ldr	r0, [pc, #112]	; (8005b04 <MX_TIM3_Init+0xe8>)
 8005a92:	f007 fd6b 	bl	800d56c <HAL_TIM_ConfigClockSource>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005a9c:	f7fe fcea 	bl	8004474 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005aa0:	4818      	ldr	r0, [pc, #96]	; (8005b04 <MX_TIM3_Init+0xe8>)
 8005aa2:	f007 fb8e 	bl	800d1c2 <HAL_TIM_PWM_Init>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005aac:	f7fe fce2 	bl	8004474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005ab8:	f107 0320 	add.w	r3, r7, #32
 8005abc:	4619      	mov	r1, r3
 8005abe:	4811      	ldr	r0, [pc, #68]	; (8005b04 <MX_TIM3_Init+0xe8>)
 8005ac0:	f008 f8fc 	bl	800dcbc <HAL_TIMEx_MasterConfigSynchronization>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005aca:	f7fe fcd3 	bl	8004474 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ace:	2360      	movs	r3, #96	; 0x60
 8005ad0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ada:	2300      	movs	r3, #0
 8005adc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ade:	1d3b      	adds	r3, r7, #4
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	4807      	ldr	r0, [pc, #28]	; (8005b04 <MX_TIM3_Init+0xe8>)
 8005ae6:	f007 fc7f 	bl	800d3e8 <HAL_TIM_PWM_ConfigChannel>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8005af0:	f7fe fcc0 	bl	8004474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005af4:	4803      	ldr	r0, [pc, #12]	; (8005b04 <MX_TIM3_Init+0xe8>)
 8005af6:	f000 f961 	bl	8005dbc <HAL_TIM_MspPostInit>

}
 8005afa:	bf00      	nop
 8005afc:	3738      	adds	r7, #56	; 0x38
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	200026f8 	.word	0x200026f8
 8005b08:	40000400 	.word	0x40000400

08005b0c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08e      	sub	sp, #56	; 0x38
 8005b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b16:	2200      	movs	r2, #0
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	605a      	str	r2, [r3, #4]
 8005b1c:	609a      	str	r2, [r3, #8]
 8005b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b20:	f107 0320 	add.w	r3, r7, #32
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b2a:	1d3b      	adds	r3, r7, #4
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	605a      	str	r2, [r3, #4]
 8005b32:	609a      	str	r2, [r3, #8]
 8005b34:	60da      	str	r2, [r3, #12]
 8005b36:	611a      	str	r2, [r3, #16]
 8005b38:	615a      	str	r2, [r3, #20]
 8005b3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005b3c:	4b3e      	ldr	r3, [pc, #248]	; (8005c38 <MX_TIM4_Init+0x12c>)
 8005b3e:	4a3f      	ldr	r2, [pc, #252]	; (8005c3c <MX_TIM4_Init+0x130>)
 8005b40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 8005b42:	4b3d      	ldr	r3, [pc, #244]	; (8005c38 <MX_TIM4_Init+0x12c>)
 8005b44:	f240 22cf 	movw	r2, #719	; 0x2cf
 8005b48:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b4a:	4b3b      	ldr	r3, [pc, #236]	; (8005c38 <MX_TIM4_Init+0x12c>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8005b50:	4b39      	ldr	r3, [pc, #228]	; (8005c38 <MX_TIM4_Init+0x12c>)
 8005b52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005b56:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b58:	4b37      	ldr	r3, [pc, #220]	; (8005c38 <MX_TIM4_Init+0x12c>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b5e:	4b36      	ldr	r3, [pc, #216]	; (8005c38 <MX_TIM4_Init+0x12c>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005b64:	4834      	ldr	r0, [pc, #208]	; (8005c38 <MX_TIM4_Init+0x12c>)
 8005b66:	f007 fadd 	bl	800d124 <HAL_TIM_Base_Init>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8005b70:	f7fe fc80 	bl	8004474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b78:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005b7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b7e:	4619      	mov	r1, r3
 8005b80:	482d      	ldr	r0, [pc, #180]	; (8005c38 <MX_TIM4_Init+0x12c>)
 8005b82:	f007 fcf3 	bl	800d56c <HAL_TIM_ConfigClockSource>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8005b8c:	f7fe fc72 	bl	8004474 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005b90:	4829      	ldr	r0, [pc, #164]	; (8005c38 <MX_TIM4_Init+0x12c>)
 8005b92:	f007 fb16 	bl	800d1c2 <HAL_TIM_PWM_Init>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8005b9c:	f7fe fc6a 	bl	8004474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005ba8:	f107 0320 	add.w	r3, r7, #32
 8005bac:	4619      	mov	r1, r3
 8005bae:	4822      	ldr	r0, [pc, #136]	; (8005c38 <MX_TIM4_Init+0x12c>)
 8005bb0:	f008 f884 	bl	800dcbc <HAL_TIMEx_MasterConfigSynchronization>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005bba:	f7fe fc5b 	bl	8004474 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005bbe:	2360      	movs	r3, #96	; 0x60
 8005bc0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 8005bc2:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005bc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005bd0:	1d3b      	adds	r3, r7, #4
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4818      	ldr	r0, [pc, #96]	; (8005c38 <MX_TIM4_Init+0x12c>)
 8005bd8:	f007 fc06 	bl	800d3e8 <HAL_TIM_PWM_ConfigChannel>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8005be2:	f7fe fc47 	bl	8004474 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005be6:	1d3b      	adds	r3, r7, #4
 8005be8:	2204      	movs	r2, #4
 8005bea:	4619      	mov	r1, r3
 8005bec:	4812      	ldr	r0, [pc, #72]	; (8005c38 <MX_TIM4_Init+0x12c>)
 8005bee:	f007 fbfb 	bl	800d3e8 <HAL_TIM_PWM_ConfigChannel>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8005bf8:	f7fe fc3c 	bl	8004474 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005bfc:	1d3b      	adds	r3, r7, #4
 8005bfe:	2208      	movs	r2, #8
 8005c00:	4619      	mov	r1, r3
 8005c02:	480d      	ldr	r0, [pc, #52]	; (8005c38 <MX_TIM4_Init+0x12c>)
 8005c04:	f007 fbf0 	bl	800d3e8 <HAL_TIM_PWM_ConfigChannel>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 8005c0e:	f7fe fc31 	bl	8004474 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005c12:	1d3b      	adds	r3, r7, #4
 8005c14:	220c      	movs	r2, #12
 8005c16:	4619      	mov	r1, r3
 8005c18:	4807      	ldr	r0, [pc, #28]	; (8005c38 <MX_TIM4_Init+0x12c>)
 8005c1a:	f007 fbe5 	bl	800d3e8 <HAL_TIM_PWM_ConfigChannel>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <MX_TIM4_Init+0x11c>
  {
    Error_Handler();
 8005c24:	f7fe fc26 	bl	8004474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005c28:	4803      	ldr	r0, [pc, #12]	; (8005c38 <MX_TIM4_Init+0x12c>)
 8005c2a:	f000 f8c7 	bl	8005dbc <HAL_TIM_MspPostInit>

}
 8005c2e:	bf00      	nop
 8005c30:	3738      	adds	r7, #56	; 0x38
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20002740 	.word	0x20002740
 8005c3c:	40000800 	.word	0x40000800

08005c40 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08e      	sub	sp, #56	; 0x38
 8005c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	605a      	str	r2, [r3, #4]
 8005c50:	609a      	str	r2, [r3, #8]
 8005c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c54:	f107 0320 	add.w	r3, r7, #32
 8005c58:	2200      	movs	r2, #0
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c5e:	1d3b      	adds	r3, r7, #4
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	605a      	str	r2, [r3, #4]
 8005c66:	609a      	str	r2, [r3, #8]
 8005c68:	60da      	str	r2, [r3, #12]
 8005c6a:	611a      	str	r2, [r3, #16]
 8005c6c:	615a      	str	r2, [r3, #20]
 8005c6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005c70:	4b2d      	ldr	r3, [pc, #180]	; (8005d28 <MX_TIM5_Init+0xe8>)
 8005c72:	4a2e      	ldr	r2, [pc, #184]	; (8005d2c <MX_TIM5_Init+0xec>)
 8005c74:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 719;
 8005c76:	4b2c      	ldr	r3, [pc, #176]	; (8005d28 <MX_TIM5_Init+0xe8>)
 8005c78:	f240 22cf 	movw	r2, #719	; 0x2cf
 8005c7c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c7e:	4b2a      	ldr	r3, [pc, #168]	; (8005d28 <MX_TIM5_Init+0xe8>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8005c84:	4b28      	ldr	r3, [pc, #160]	; (8005d28 <MX_TIM5_Init+0xe8>)
 8005c86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005c8a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c8c:	4b26      	ldr	r3, [pc, #152]	; (8005d28 <MX_TIM5_Init+0xe8>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c92:	4b25      	ldr	r3, [pc, #148]	; (8005d28 <MX_TIM5_Init+0xe8>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005c98:	4823      	ldr	r0, [pc, #140]	; (8005d28 <MX_TIM5_Init+0xe8>)
 8005c9a:	f007 fa43 	bl	800d124 <HAL_TIM_Base_Init>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8005ca4:	f7fe fbe6 	bl	8004474 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005cae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	481c      	ldr	r0, [pc, #112]	; (8005d28 <MX_TIM5_Init+0xe8>)
 8005cb6:	f007 fc59 	bl	800d56c <HAL_TIM_ConfigClockSource>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8005cc0:	f7fe fbd8 	bl	8004474 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8005cc4:	4818      	ldr	r0, [pc, #96]	; (8005d28 <MX_TIM5_Init+0xe8>)
 8005cc6:	f007 fa7c 	bl	800d1c2 <HAL_TIM_PWM_Init>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8005cd0:	f7fe fbd0 	bl	8004474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005cdc:	f107 0320 	add.w	r3, r7, #32
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4811      	ldr	r0, [pc, #68]	; (8005d28 <MX_TIM5_Init+0xe8>)
 8005ce4:	f007 ffea 	bl	800dcbc <HAL_TIMEx_MasterConfigSynchronization>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8005cee:	f7fe fbc1 	bl	8004474 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005cf2:	2360      	movs	r3, #96	; 0x60
 8005cf4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005d02:	1d3b      	adds	r3, r7, #4
 8005d04:	2204      	movs	r2, #4
 8005d06:	4619      	mov	r1, r3
 8005d08:	4807      	ldr	r0, [pc, #28]	; (8005d28 <MX_TIM5_Init+0xe8>)
 8005d0a:	f007 fb6d 	bl	800d3e8 <HAL_TIM_PWM_ConfigChannel>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8005d14:	f7fe fbae 	bl	8004474 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8005d18:	4803      	ldr	r0, [pc, #12]	; (8005d28 <MX_TIM5_Init+0xe8>)
 8005d1a:	f000 f84f 	bl	8005dbc <HAL_TIM_MspPostInit>

}
 8005d1e:	bf00      	nop
 8005d20:	3738      	adds	r7, #56	; 0x38
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20002788 	.word	0x20002788
 8005d2c:	40000c00 	.word	0x40000c00

08005d30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1b      	ldr	r2, [pc, #108]	; (8005dac <HAL_TIM_Base_MspInit+0x7c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d10c      	bne.n	8005d5c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005d42:	4b1b      	ldr	r3, [pc, #108]	; (8005db0 <HAL_TIM_Base_MspInit+0x80>)
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	4a1a      	ldr	r2, [pc, #104]	; (8005db0 <HAL_TIM_Base_MspInit+0x80>)
 8005d48:	f043 0302 	orr.w	r3, r3, #2
 8005d4c:	61d3      	str	r3, [r2, #28]
 8005d4e:	4b18      	ldr	r3, [pc, #96]	; (8005db0 <HAL_TIM_Base_MspInit+0x80>)
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8005d5a:	e022      	b.n	8005da2 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a14      	ldr	r2, [pc, #80]	; (8005db4 <HAL_TIM_Base_MspInit+0x84>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d10c      	bne.n	8005d80 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005d66:	4b12      	ldr	r3, [pc, #72]	; (8005db0 <HAL_TIM_Base_MspInit+0x80>)
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	4a11      	ldr	r2, [pc, #68]	; (8005db0 <HAL_TIM_Base_MspInit+0x80>)
 8005d6c:	f043 0304 	orr.w	r3, r3, #4
 8005d70:	61d3      	str	r3, [r2, #28]
 8005d72:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <HAL_TIM_Base_MspInit+0x80>)
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	f003 0304 	and.w	r3, r3, #4
 8005d7a:	613b      	str	r3, [r7, #16]
 8005d7c:	693b      	ldr	r3, [r7, #16]
}
 8005d7e:	e010      	b.n	8005da2 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM5)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a0c      	ldr	r2, [pc, #48]	; (8005db8 <HAL_TIM_Base_MspInit+0x88>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d10b      	bne.n	8005da2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005d8a:	4b09      	ldr	r3, [pc, #36]	; (8005db0 <HAL_TIM_Base_MspInit+0x80>)
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	4a08      	ldr	r2, [pc, #32]	; (8005db0 <HAL_TIM_Base_MspInit+0x80>)
 8005d90:	f043 0308 	orr.w	r3, r3, #8
 8005d94:	61d3      	str	r3, [r2, #28]
 8005d96:	4b06      	ldr	r3, [pc, #24]	; (8005db0 <HAL_TIM_Base_MspInit+0x80>)
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	f003 0308 	and.w	r3, r3, #8
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]
}
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bc80      	pop	{r7}
 8005daa:	4770      	bx	lr
 8005dac:	40000400 	.word	0x40000400
 8005db0:	40021000 	.word	0x40021000
 8005db4:	40000800 	.word	0x40000800
 8005db8:	40000c00 	.word	0x40000c00

08005dbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08c      	sub	sp, #48	; 0x30
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dc4:	f107 0318 	add.w	r3, r7, #24
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	605a      	str	r2, [r3, #4]
 8005dce:	609a      	str	r2, [r3, #8]
 8005dd0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a3e      	ldr	r2, [pc, #248]	; (8005ed0 <HAL_TIM_MspPostInit+0x114>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d12a      	bne.n	8005e32 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ddc:	4b3d      	ldr	r3, [pc, #244]	; (8005ed4 <HAL_TIM_MspPostInit+0x118>)
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	4a3c      	ldr	r2, [pc, #240]	; (8005ed4 <HAL_TIM_MspPostInit+0x118>)
 8005de2:	f043 0310 	orr.w	r3, r3, #16
 8005de6:	6193      	str	r3, [r2, #24]
 8005de8:	4b3a      	ldr	r3, [pc, #232]	; (8005ed4 <HAL_TIM_MspPostInit+0x118>)
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	f003 0310 	and.w	r3, r3, #16
 8005df0:	617b      	str	r3, [r7, #20]
 8005df2:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005df4:	2340      	movs	r3, #64	; 0x40
 8005df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005df8:	2302      	movs	r3, #2
 8005dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e00:	f107 0318 	add.w	r3, r7, #24
 8005e04:	4619      	mov	r1, r3
 8005e06:	4834      	ldr	r0, [pc, #208]	; (8005ed8 <HAL_TIM_MspPostInit+0x11c>)
 8005e08:	f001 fc74 	bl	80076f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8005e0c:	4b33      	ldr	r3, [pc, #204]	; (8005edc <HAL_TIM_MspPostInit+0x120>)
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e14:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005e18:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e24:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8005e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e2a:	4a2c      	ldr	r2, [pc, #176]	; (8005edc <HAL_TIM_MspPostInit+0x120>)
 8005e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8005e30:	e049      	b.n	8005ec6 <HAL_TIM_MspPostInit+0x10a>
  else if(timHandle->Instance==TIM4)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a2a      	ldr	r2, [pc, #168]	; (8005ee0 <HAL_TIM_MspPostInit+0x124>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d127      	bne.n	8005e8c <HAL_TIM_MspPostInit+0xd0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e3c:	4b25      	ldr	r3, [pc, #148]	; (8005ed4 <HAL_TIM_MspPostInit+0x118>)
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	4a24      	ldr	r2, [pc, #144]	; (8005ed4 <HAL_TIM_MspPostInit+0x118>)
 8005e42:	f043 0320 	orr.w	r3, r3, #32
 8005e46:	6193      	str	r3, [r2, #24]
 8005e48:	4b22      	ldr	r3, [pc, #136]	; (8005ed4 <HAL_TIM_MspPostInit+0x118>)
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	f003 0320 	and.w	r3, r3, #32
 8005e50:	613b      	str	r3, [r7, #16]
 8005e52:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005e54:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e5e:	2302      	movs	r3, #2
 8005e60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e62:	f107 0318 	add.w	r3, r7, #24
 8005e66:	4619      	mov	r1, r3
 8005e68:	481e      	ldr	r0, [pc, #120]	; (8005ee4 <HAL_TIM_MspPostInit+0x128>)
 8005e6a:	f001 fc43 	bl	80076f4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 8005e6e:	4b1b      	ldr	r3, [pc, #108]	; (8005edc <HAL_TIM_MspPostInit+0x120>)
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e76:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e84:	4a15      	ldr	r2, [pc, #84]	; (8005edc <HAL_TIM_MspPostInit+0x120>)
 8005e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e88:	6053      	str	r3, [r2, #4]
}
 8005e8a:	e01c      	b.n	8005ec6 <HAL_TIM_MspPostInit+0x10a>
  else if(timHandle->Instance==TIM5)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a15      	ldr	r2, [pc, #84]	; (8005ee8 <HAL_TIM_MspPostInit+0x12c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d117      	bne.n	8005ec6 <HAL_TIM_MspPostInit+0x10a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e96:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <HAL_TIM_MspPostInit+0x118>)
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	4a0e      	ldr	r2, [pc, #56]	; (8005ed4 <HAL_TIM_MspPostInit+0x118>)
 8005e9c:	f043 0304 	orr.w	r3, r3, #4
 8005ea0:	6193      	str	r3, [r2, #24]
 8005ea2:	4b0c      	ldr	r3, [pc, #48]	; (8005ed4 <HAL_TIM_MspPostInit+0x118>)
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	60fb      	str	r3, [r7, #12]
 8005eac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005eae:	2302      	movs	r3, #2
 8005eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005eba:	f107 0318 	add.w	r3, r7, #24
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	480a      	ldr	r0, [pc, #40]	; (8005eec <HAL_TIM_MspPostInit+0x130>)
 8005ec2:	f001 fc17 	bl	80076f4 <HAL_GPIO_Init>
}
 8005ec6:	bf00      	nop
 8005ec8:	3730      	adds	r7, #48	; 0x30
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	40000400 	.word	0x40000400
 8005ed4:	40021000 	.word	0x40021000
 8005ed8:	40011000 	.word	0x40011000
 8005edc:	40010000 	.word	0x40010000
 8005ee0:	40000800 	.word	0x40000800
 8005ee4:	40011400 	.word	0x40011400
 8005ee8:	40000c00 	.word	0x40000c00
 8005eec:	40010800 	.word	0x40010800

08005ef0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005ef4:	4b11      	ldr	r3, [pc, #68]	; (8005f3c <MX_USART1_UART_Init+0x4c>)
 8005ef6:	4a12      	ldr	r2, [pc, #72]	; (8005f40 <MX_USART1_UART_Init+0x50>)
 8005ef8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005efa:	4b10      	ldr	r3, [pc, #64]	; (8005f3c <MX_USART1_UART_Init+0x4c>)
 8005efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005f00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005f02:	4b0e      	ldr	r3, [pc, #56]	; (8005f3c <MX_USART1_UART_Init+0x4c>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005f08:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <MX_USART1_UART_Init+0x4c>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005f0e:	4b0b      	ldr	r3, [pc, #44]	; (8005f3c <MX_USART1_UART_Init+0x4c>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005f14:	4b09      	ldr	r3, [pc, #36]	; (8005f3c <MX_USART1_UART_Init+0x4c>)
 8005f16:	220c      	movs	r2, #12
 8005f18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f1a:	4b08      	ldr	r3, [pc, #32]	; (8005f3c <MX_USART1_UART_Init+0x4c>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f20:	4b06      	ldr	r3, [pc, #24]	; (8005f3c <MX_USART1_UART_Init+0x4c>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005f26:	4805      	ldr	r0, [pc, #20]	; (8005f3c <MX_USART1_UART_Init+0x4c>)
 8005f28:	f007 ff34 	bl	800dd94 <HAL_UART_Init>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005f32:	f7fe fa9f 	bl	8004474 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005f36:	bf00      	nop
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	200027d0 	.word	0x200027d0
 8005f40:	40013800 	.word	0x40013800

08005f44 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005f48:	4b11      	ldr	r3, [pc, #68]	; (8005f90 <MX_USART2_UART_Init+0x4c>)
 8005f4a:	4a12      	ldr	r2, [pc, #72]	; (8005f94 <MX_USART2_UART_Init+0x50>)
 8005f4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005f4e:	4b10      	ldr	r3, [pc, #64]	; (8005f90 <MX_USART2_UART_Init+0x4c>)
 8005f50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005f54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005f56:	4b0e      	ldr	r3, [pc, #56]	; (8005f90 <MX_USART2_UART_Init+0x4c>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005f5c:	4b0c      	ldr	r3, [pc, #48]	; (8005f90 <MX_USART2_UART_Init+0x4c>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005f62:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <MX_USART2_UART_Init+0x4c>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005f68:	4b09      	ldr	r3, [pc, #36]	; (8005f90 <MX_USART2_UART_Init+0x4c>)
 8005f6a:	220c      	movs	r2, #12
 8005f6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f6e:	4b08      	ldr	r3, [pc, #32]	; (8005f90 <MX_USART2_UART_Init+0x4c>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f74:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <MX_USART2_UART_Init+0x4c>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005f7a:	4805      	ldr	r0, [pc, #20]	; (8005f90 <MX_USART2_UART_Init+0x4c>)
 8005f7c:	f007 ff0a 	bl	800dd94 <HAL_UART_Init>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005f86:	f7fe fa75 	bl	8004474 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005f8a:	bf00      	nop
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20002818 	.word	0x20002818
 8005f94:	40004400 	.word	0x40004400

08005f98 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005f9c:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <MX_USART3_UART_Init+0x4c>)
 8005f9e:	4a12      	ldr	r2, [pc, #72]	; (8005fe8 <MX_USART3_UART_Init+0x50>)
 8005fa0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8005fa2:	4b10      	ldr	r3, [pc, #64]	; (8005fe4 <MX_USART3_UART_Init+0x4c>)
 8005fa4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005fa8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005faa:	4b0e      	ldr	r3, [pc, #56]	; (8005fe4 <MX_USART3_UART_Init+0x4c>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005fb0:	4b0c      	ldr	r3, [pc, #48]	; (8005fe4 <MX_USART3_UART_Init+0x4c>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005fb6:	4b0b      	ldr	r3, [pc, #44]	; (8005fe4 <MX_USART3_UART_Init+0x4c>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005fbc:	4b09      	ldr	r3, [pc, #36]	; (8005fe4 <MX_USART3_UART_Init+0x4c>)
 8005fbe:	220c      	movs	r2, #12
 8005fc0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fc2:	4b08      	ldr	r3, [pc, #32]	; (8005fe4 <MX_USART3_UART_Init+0x4c>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fc8:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <MX_USART3_UART_Init+0x4c>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8005fce:	4805      	ldr	r0, [pc, #20]	; (8005fe4 <MX_USART3_UART_Init+0x4c>)
 8005fd0:	f007 ff30 	bl	800de34 <HAL_HalfDuplex_Init>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005fda:	f7fe fa4b 	bl	8004474 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005fde:	bf00      	nop
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20002860 	.word	0x20002860
 8005fe8:	40004800 	.word	0x40004800

08005fec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b08c      	sub	sp, #48	; 0x30
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ff4:	f107 0320 	add.w	r3, r7, #32
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	605a      	str	r2, [r3, #4]
 8005ffe:	609a      	str	r2, [r3, #8]
 8006000:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a4d      	ldr	r2, [pc, #308]	; (800613c <HAL_UART_MspInit+0x150>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d132      	bne.n	8006072 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800600c:	4b4c      	ldr	r3, [pc, #304]	; (8006140 <HAL_UART_MspInit+0x154>)
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	4a4b      	ldr	r2, [pc, #300]	; (8006140 <HAL_UART_MspInit+0x154>)
 8006012:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006016:	6193      	str	r3, [r2, #24]
 8006018:	4b49      	ldr	r3, [pc, #292]	; (8006140 <HAL_UART_MspInit+0x154>)
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006020:	61fb      	str	r3, [r7, #28]
 8006022:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006024:	4b46      	ldr	r3, [pc, #280]	; (8006140 <HAL_UART_MspInit+0x154>)
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	4a45      	ldr	r2, [pc, #276]	; (8006140 <HAL_UART_MspInit+0x154>)
 800602a:	f043 0304 	orr.w	r3, r3, #4
 800602e:	6193      	str	r3, [r2, #24]
 8006030:	4b43      	ldr	r3, [pc, #268]	; (8006140 <HAL_UART_MspInit+0x154>)
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	f003 0304 	and.w	r3, r3, #4
 8006038:	61bb      	str	r3, [r7, #24]
 800603a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800603c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006042:	2302      	movs	r3, #2
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006046:	2303      	movs	r3, #3
 8006048:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800604a:	f107 0320 	add.w	r3, r7, #32
 800604e:	4619      	mov	r1, r3
 8006050:	483c      	ldr	r0, [pc, #240]	; (8006144 <HAL_UART_MspInit+0x158>)
 8006052:	f001 fb4f 	bl	80076f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800605a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800605c:	2300      	movs	r3, #0
 800605e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006060:	2300      	movs	r3, #0
 8006062:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006064:	f107 0320 	add.w	r3, r7, #32
 8006068:	4619      	mov	r1, r3
 800606a:	4836      	ldr	r0, [pc, #216]	; (8006144 <HAL_UART_MspInit+0x158>)
 800606c:	f001 fb42 	bl	80076f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006070:	e05f      	b.n	8006132 <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART2)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a34      	ldr	r2, [pc, #208]	; (8006148 <HAL_UART_MspInit+0x15c>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d130      	bne.n	80060de <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800607c:	4b30      	ldr	r3, [pc, #192]	; (8006140 <HAL_UART_MspInit+0x154>)
 800607e:	69db      	ldr	r3, [r3, #28]
 8006080:	4a2f      	ldr	r2, [pc, #188]	; (8006140 <HAL_UART_MspInit+0x154>)
 8006082:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006086:	61d3      	str	r3, [r2, #28]
 8006088:	4b2d      	ldr	r3, [pc, #180]	; (8006140 <HAL_UART_MspInit+0x154>)
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006090:	617b      	str	r3, [r7, #20]
 8006092:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006094:	4b2a      	ldr	r3, [pc, #168]	; (8006140 <HAL_UART_MspInit+0x154>)
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	4a29      	ldr	r2, [pc, #164]	; (8006140 <HAL_UART_MspInit+0x154>)
 800609a:	f043 0304 	orr.w	r3, r3, #4
 800609e:	6193      	str	r3, [r2, #24]
 80060a0:	4b27      	ldr	r3, [pc, #156]	; (8006140 <HAL_UART_MspInit+0x154>)
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	f003 0304 	and.w	r3, r3, #4
 80060a8:	613b      	str	r3, [r7, #16]
 80060aa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80060ac:	2304      	movs	r3, #4
 80060ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060b0:	2302      	movs	r3, #2
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80060b4:	2303      	movs	r3, #3
 80060b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060b8:	f107 0320 	add.w	r3, r7, #32
 80060bc:	4619      	mov	r1, r3
 80060be:	4821      	ldr	r0, [pc, #132]	; (8006144 <HAL_UART_MspInit+0x158>)
 80060c0:	f001 fb18 	bl	80076f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80060c4:	2308      	movs	r3, #8
 80060c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80060c8:	2300      	movs	r3, #0
 80060ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060cc:	2300      	movs	r3, #0
 80060ce:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060d0:	f107 0320 	add.w	r3, r7, #32
 80060d4:	4619      	mov	r1, r3
 80060d6:	481b      	ldr	r0, [pc, #108]	; (8006144 <HAL_UART_MspInit+0x158>)
 80060d8:	f001 fb0c 	bl	80076f4 <HAL_GPIO_Init>
}
 80060dc:	e029      	b.n	8006132 <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART3)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a1a      	ldr	r2, [pc, #104]	; (800614c <HAL_UART_MspInit+0x160>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d124      	bne.n	8006132 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 80060e8:	4b15      	ldr	r3, [pc, #84]	; (8006140 <HAL_UART_MspInit+0x154>)
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	4a14      	ldr	r2, [pc, #80]	; (8006140 <HAL_UART_MspInit+0x154>)
 80060ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060f2:	61d3      	str	r3, [r2, #28]
 80060f4:	4b12      	ldr	r3, [pc, #72]	; (8006140 <HAL_UART_MspInit+0x154>)
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060fc:	60fb      	str	r3, [r7, #12]
 80060fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006100:	4b0f      	ldr	r3, [pc, #60]	; (8006140 <HAL_UART_MspInit+0x154>)
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	4a0e      	ldr	r2, [pc, #56]	; (8006140 <HAL_UART_MspInit+0x154>)
 8006106:	f043 0308 	orr.w	r3, r3, #8
 800610a:	6193      	str	r3, [r2, #24]
 800610c:	4b0c      	ldr	r3, [pc, #48]	; (8006140 <HAL_UART_MspInit+0x154>)
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	f003 0308 	and.w	r3, r3, #8
 8006114:	60bb      	str	r3, [r7, #8]
 8006116:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800611c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800611e:	2312      	movs	r3, #18
 8006120:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006122:	2303      	movs	r3, #3
 8006124:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006126:	f107 0320 	add.w	r3, r7, #32
 800612a:	4619      	mov	r1, r3
 800612c:	4808      	ldr	r0, [pc, #32]	; (8006150 <HAL_UART_MspInit+0x164>)
 800612e:	f001 fae1 	bl	80076f4 <HAL_GPIO_Init>
}
 8006132:	bf00      	nop
 8006134:	3730      	adds	r7, #48	; 0x30
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	40013800 	.word	0x40013800
 8006140:	40021000 	.word	0x40021000
 8006144:	40010800 	.word	0x40010800
 8006148:	40004400 	.word	0x40004400
 800614c:	40004800 	.word	0x40004800
 8006150:	40010c00 	.word	0x40010c00

08006154 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006154:	f7ff fc5c 	bl	8005a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006158:	480b      	ldr	r0, [pc, #44]	; (8006188 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800615a:	490c      	ldr	r1, [pc, #48]	; (800618c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800615c:	4a0c      	ldr	r2, [pc, #48]	; (8006190 <LoopFillZerobss+0x16>)
  movs r3, #0
 800615e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006160:	e002      	b.n	8006168 <LoopCopyDataInit>

08006162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006166:	3304      	adds	r3, #4

08006168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800616a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800616c:	d3f9      	bcc.n	8006162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800616e:	4a09      	ldr	r2, [pc, #36]	; (8006194 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006170:	4c09      	ldr	r4, [pc, #36]	; (8006198 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006174:	e001      	b.n	800617a <LoopFillZerobss>

08006176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006178:	3204      	adds	r2, #4

0800617a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800617a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800617c:	d3fb      	bcc.n	8006176 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800617e:	f00d fb61 	bl	8013844 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006182:	f7fc fbd7 	bl	8002934 <main>
  bx lr
 8006186:	4770      	bx	lr
  ldr r0, =_sdata
 8006188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800618c:	200009d8 	.word	0x200009d8
  ldr r2, =_sidata
 8006190:	080161c8 	.word	0x080161c8
  ldr r2, =_sbss
 8006194:	200009d8 	.word	0x200009d8
  ldr r4, =_ebss
 8006198:	20003bd0 	.word	0x20003bd0

0800619c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800619c:	e7fe      	b.n	800619c <ADC3_IRQHandler>
	...

080061a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80061a4:	4b08      	ldr	r3, [pc, #32]	; (80061c8 <HAL_Init+0x28>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a07      	ldr	r2, [pc, #28]	; (80061c8 <HAL_Init+0x28>)
 80061aa:	f043 0310 	orr.w	r3, r3, #16
 80061ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061b0:	2003      	movs	r0, #3
 80061b2:	f000 fe09 	bl	8006dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80061b6:	200f      	movs	r0, #15
 80061b8:	f000 f808 	bl	80061cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80061bc:	f7ff fac8 	bl	8005750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	40022000 	.word	0x40022000

080061cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80061d4:	4b12      	ldr	r3, [pc, #72]	; (8006220 <HAL_InitTick+0x54>)
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	4b12      	ldr	r3, [pc, #72]	; (8006224 <HAL_InitTick+0x58>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	4619      	mov	r1, r3
 80061de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80061e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fe21 	bl	8006e32 <HAL_SYSTICK_Config>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e00e      	b.n	8006218 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b0f      	cmp	r3, #15
 80061fe:	d80a      	bhi.n	8006216 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006200:	2200      	movs	r2, #0
 8006202:	6879      	ldr	r1, [r7, #4]
 8006204:	f04f 30ff 	mov.w	r0, #4294967295
 8006208:	f000 fde9 	bl	8006dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800620c:	4a06      	ldr	r2, [pc, #24]	; (8006228 <HAL_InitTick+0x5c>)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	e000      	b.n	8006218 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
}
 8006218:	4618      	mov	r0, r3
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	2000068c 	.word	0x2000068c
 8006224:	20000694 	.word	0x20000694
 8006228:	20000690 	.word	0x20000690

0800622c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006230:	4b05      	ldr	r3, [pc, #20]	; (8006248 <HAL_IncTick+0x1c>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	461a      	mov	r2, r3
 8006236:	4b05      	ldr	r3, [pc, #20]	; (800624c <HAL_IncTick+0x20>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4413      	add	r3, r2
 800623c:	4a03      	ldr	r2, [pc, #12]	; (800624c <HAL_IncTick+0x20>)
 800623e:	6013      	str	r3, [r2, #0]
}
 8006240:	bf00      	nop
 8006242:	46bd      	mov	sp, r7
 8006244:	bc80      	pop	{r7}
 8006246:	4770      	bx	lr
 8006248:	20000694 	.word	0x20000694
 800624c:	200028a8 	.word	0x200028a8

08006250 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006250:	b480      	push	{r7}
 8006252:	af00      	add	r7, sp, #0
  return uwTick;
 8006254:	4b02      	ldr	r3, [pc, #8]	; (8006260 <HAL_GetTick+0x10>)
 8006256:	681b      	ldr	r3, [r3, #0]
}
 8006258:	4618      	mov	r0, r3
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr
 8006260:	200028a8 	.word	0x200028a8

08006264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800626c:	f7ff fff0 	bl	8006250 <HAL_GetTick>
 8006270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627c:	d005      	beq.n	800628a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800627e:	4b0a      	ldr	r3, [pc, #40]	; (80062a8 <HAL_Delay+0x44>)
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4413      	add	r3, r2
 8006288:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800628a:	bf00      	nop
 800628c:	f7ff ffe0 	bl	8006250 <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	429a      	cmp	r2, r3
 800629a:	d8f7      	bhi.n	800628c <HAL_Delay+0x28>
  {
  }
}
 800629c:	bf00      	nop
 800629e:	bf00      	nop
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20000694 	.word	0x20000694

080062ac <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80062ac:	b480      	push	{r7}
 80062ae:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 80062b0:	4b02      	ldr	r3, [pc, #8]	; (80062bc <HAL_GetUIDw0+0x10>)
 80062b2:	681b      	ldr	r3, [r3, #0]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bc80      	pop	{r7}
 80062ba:	4770      	bx	lr
 80062bc:	1ffff7e8 	.word	0x1ffff7e8

080062c0 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80062c4:	4b02      	ldr	r3, [pc, #8]	; (80062d0 <HAL_GetUIDw1+0x10>)
 80062c6:	681b      	ldr	r3, [r3, #0]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bc80      	pop	{r7}
 80062ce:	4770      	bx	lr
 80062d0:	1ffff7ec 	.word	0x1ffff7ec

080062d4 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80062d4:	b480      	push	{r7}
 80062d6:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80062d8:	4b02      	ldr	r3, [pc, #8]	; (80062e4 <HAL_GetUIDw2+0x10>)
 80062da:	681b      	ldr	r3, [r3, #0]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	46bd      	mov	sp, r7
 80062e0:	bc80      	pop	{r7}
 80062e2:	4770      	bx	lr
 80062e4:	1ffff7f0 	.word	0x1ffff7f0

080062e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80062f8:	2300      	movs	r3, #0
 80062fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d101      	bne.n	800630a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e0ce      	b.n	80064a8 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006314:	2b00      	cmp	r3, #0
 8006316:	d109      	bne.n	800632c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7fb fe4e 	bl	8001fc8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fbcf 	bl	8006ad0 <ADC_ConversionStop_Disable>
 8006332:	4603      	mov	r3, r0
 8006334:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633a:	f003 0310 	and.w	r3, r3, #16
 800633e:	2b00      	cmp	r3, #0
 8006340:	f040 80a9 	bne.w	8006496 <HAL_ADC_Init+0x1ae>
 8006344:	7dfb      	ldrb	r3, [r7, #23]
 8006346:	2b00      	cmp	r3, #0
 8006348:	f040 80a5 	bne.w	8006496 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006350:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006354:	f023 0302 	bic.w	r3, r3, #2
 8006358:	f043 0202 	orr.w	r2, r3, #2
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4951      	ldr	r1, [pc, #324]	; (80064b0 <HAL_ADC_Init+0x1c8>)
 800636a:	428b      	cmp	r3, r1
 800636c:	d10a      	bne.n	8006384 <HAL_ADC_Init+0x9c>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006376:	d002      	beq.n	800637e <HAL_ADC_Init+0x96>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	e004      	b.n	8006388 <HAL_ADC_Init+0xa0>
 800637e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006382:	e001      	b.n	8006388 <HAL_ADC_Init+0xa0>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006388:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	7b1b      	ldrb	r3, [r3, #12]
 800638e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006390:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	4313      	orrs	r3, r2
 8006396:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063a0:	d003      	beq.n	80063aa <HAL_ADC_Init+0xc2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d102      	bne.n	80063b0 <HAL_ADC_Init+0xc8>
 80063aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063ae:	e000      	b.n	80063b2 <HAL_ADC_Init+0xca>
 80063b0:	2300      	movs	r3, #0
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	7d1b      	ldrb	r3, [r3, #20]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d119      	bne.n	80063f4 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	7b1b      	ldrb	r3, [r3, #12]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d109      	bne.n	80063dc <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	3b01      	subs	r3, #1
 80063ce:	035a      	lsls	r2, r3, #13
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80063d8:	613b      	str	r3, [r7, #16]
 80063da:	e00b      	b.n	80063f4 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e0:	f043 0220 	orr.w	r2, r3, #32
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ec:	f043 0201 	orr.w	r2, r3, #1
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	430a      	orrs	r2, r1
 8006406:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	4b29      	ldr	r3, [pc, #164]	; (80064b4 <HAL_ADC_Init+0x1cc>)
 8006410:	4013      	ands	r3, r2
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	6812      	ldr	r2, [r2, #0]
 8006416:	68b9      	ldr	r1, [r7, #8]
 8006418:	430b      	orrs	r3, r1
 800641a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006424:	d003      	beq.n	800642e <HAL_ADC_Init+0x146>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d104      	bne.n	8006438 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	3b01      	subs	r3, #1
 8006434:	051b      	lsls	r3, r3, #20
 8006436:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	430a      	orrs	r2, r1
 800644a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	4b19      	ldr	r3, [pc, #100]	; (80064b8 <HAL_ADC_Init+0x1d0>)
 8006454:	4013      	ands	r3, r2
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	429a      	cmp	r2, r3
 800645a:	d10b      	bne.n	8006474 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006466:	f023 0303 	bic.w	r3, r3, #3
 800646a:	f043 0201 	orr.w	r2, r3, #1
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006472:	e018      	b.n	80064a6 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006478:	f023 0312 	bic.w	r3, r3, #18
 800647c:	f043 0210 	orr.w	r2, r3, #16
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	f043 0201 	orr.w	r2, r3, #1
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006494:	e007      	b.n	80064a6 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649a:	f043 0210 	orr.w	r2, r3, #16
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80064a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3718      	adds	r7, #24
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40013c00 	.word	0x40013c00
 80064b4:	ffe1f7fd 	.word	0xffe1f7fd
 80064b8:	ff1f0efe 	.word	0xff1f0efe

080064bc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a64      	ldr	r2, [pc, #400]	; (8006664 <HAL_ADC_Start_DMA+0x1a8>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d004      	beq.n	80064e0 <HAL_ADC_Start_DMA+0x24>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a63      	ldr	r2, [pc, #396]	; (8006668 <HAL_ADC_Start_DMA+0x1ac>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d106      	bne.n	80064ee <HAL_ADC_Start_DMA+0x32>
 80064e0:	4b60      	ldr	r3, [pc, #384]	; (8006664 <HAL_ADC_Start_DMA+0x1a8>)
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f040 80b3 	bne.w	8006654 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d101      	bne.n	80064fc <HAL_ADC_Start_DMA+0x40>
 80064f8:	2302      	movs	r3, #2
 80064fa:	e0ae      	b.n	800665a <HAL_ADC_Start_DMA+0x19e>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 fa89 	bl	8006a1c <ADC_Enable>
 800650a:	4603      	mov	r3, r0
 800650c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800650e:	7dfb      	ldrb	r3, [r7, #23]
 8006510:	2b00      	cmp	r3, #0
 8006512:	f040 809a 	bne.w	800664a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800651e:	f023 0301 	bic.w	r3, r3, #1
 8006522:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a4e      	ldr	r2, [pc, #312]	; (8006668 <HAL_ADC_Start_DMA+0x1ac>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d105      	bne.n	8006540 <HAL_ADC_Start_DMA+0x84>
 8006534:	4b4b      	ldr	r3, [pc, #300]	; (8006664 <HAL_ADC_Start_DMA+0x1a8>)
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d115      	bne.n	800656c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006544:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006556:	2b00      	cmp	r3, #0
 8006558:	d026      	beq.n	80065a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006562:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800656a:	e01d      	b.n	80065a8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006570:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a39      	ldr	r2, [pc, #228]	; (8006664 <HAL_ADC_Start_DMA+0x1a8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d004      	beq.n	800658c <HAL_ADC_Start_DMA+0xd0>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a38      	ldr	r2, [pc, #224]	; (8006668 <HAL_ADC_Start_DMA+0x1ac>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d10d      	bne.n	80065a8 <HAL_ADC_Start_DMA+0xec>
 800658c:	4b35      	ldr	r3, [pc, #212]	; (8006664 <HAL_ADC_Start_DMA+0x1a8>)
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006594:	2b00      	cmp	r3, #0
 8006596:	d007      	beq.n	80065a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80065a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d006      	beq.n	80065c2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b8:	f023 0206 	bic.w	r2, r3, #6
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	62da      	str	r2, [r3, #44]	; 0x2c
 80065c0:	e002      	b.n	80065c8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	4a25      	ldr	r2, [pc, #148]	; (800666c <HAL_ADC_Start_DMA+0x1b0>)
 80065d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	4a24      	ldr	r2, [pc, #144]	; (8006670 <HAL_ADC_Start_DMA+0x1b4>)
 80065de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6a1b      	ldr	r3, [r3, #32]
 80065e4:	4a23      	ldr	r2, [pc, #140]	; (8006674 <HAL_ADC_Start_DMA+0x1b8>)
 80065e6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f06f 0202 	mvn.w	r2, #2
 80065f0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006600:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6a18      	ldr	r0, [r3, #32]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	334c      	adds	r3, #76	; 0x4c
 800660c:	4619      	mov	r1, r3
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f000 fc91 	bl	8006f38 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006620:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006624:	d108      	bne.n	8006638 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8006634:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8006636:	e00f      	b.n	8006658 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689a      	ldr	r2, [r3, #8]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006646:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8006648:	e006      	b.n	8006658 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8006652:	e001      	b.n	8006658 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006654:	2301      	movs	r3, #1
 8006656:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006658:	7dfb      	ldrb	r3, [r7, #23]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	40012400 	.word	0x40012400
 8006668:	40012800 	.word	0x40012800
 800666c:	08006b53 	.word	0x08006b53
 8006670:	08006bcf 	.word	0x08006bcf
 8006674:	08006beb 	.word	0x08006beb

08006678 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f003 0320 	and.w	r3, r3, #32
 8006696:	2b00      	cmp	r3, #0
 8006698:	d03e      	beq.n	8006718 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f003 0302 	and.w	r3, r3, #2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d039      	beq.n	8006718 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a8:	f003 0310 	and.w	r3, r3, #16
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d105      	bne.n	80066bc <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80066c6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80066ca:	d11d      	bne.n	8006708 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d119      	bne.n	8006708 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 0220 	bic.w	r2, r2, #32
 80066e2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d105      	bne.n	8006708 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006700:	f043 0201 	orr.w	r2, r3, #1
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f7fd fc0d 	bl	8003f28 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f06f 0212 	mvn.w	r2, #18
 8006716:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800671e:	2b00      	cmp	r3, #0
 8006720:	d04d      	beq.n	80067be <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d048      	beq.n	80067be <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006730:	f003 0310 	and.w	r3, r3, #16
 8006734:	2b00      	cmp	r3, #0
 8006736:	d105      	bne.n	8006744 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800674e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8006752:	d012      	beq.n	800677a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800675e:	2b00      	cmp	r3, #0
 8006760:	d125      	bne.n	80067ae <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800676c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006770:	d11d      	bne.n	80067ae <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8006776:	2b00      	cmp	r3, #0
 8006778:	d119      	bne.n	80067ae <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006788:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d105      	bne.n	80067ae <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a6:	f043 0201 	orr.w	r2, r3, #1
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 fa35 	bl	8006c1e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f06f 020c 	mvn.w	r2, #12
 80067bc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d012      	beq.n	80067ee <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00d      	beq.n	80067ee <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f812 	bl	8006808 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f06f 0201 	mvn.w	r2, #1
 80067ec:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80067ee:	bf00      	nop
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b083      	sub	sp, #12
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80067fe:	bf00      	nop
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	bc80      	pop	{r7}
 8006806:	4770      	bx	lr

08006808 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	bc80      	pop	{r7}
 8006818:	4770      	bx	lr

0800681a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr

0800682c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006844:	2b01      	cmp	r3, #1
 8006846:	d101      	bne.n	800684c <HAL_ADC_ConfigChannel+0x20>
 8006848:	2302      	movs	r3, #2
 800684a:	e0dc      	b.n	8006a06 <HAL_ADC_ConfigChannel+0x1da>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	2b06      	cmp	r3, #6
 800685a:	d81c      	bhi.n	8006896 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	4613      	mov	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	3b05      	subs	r3, #5
 800686e:	221f      	movs	r2, #31
 8006870:	fa02 f303 	lsl.w	r3, r2, r3
 8006874:	43db      	mvns	r3, r3
 8006876:	4019      	ands	r1, r3
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	4613      	mov	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	3b05      	subs	r3, #5
 8006888:	fa00 f203 	lsl.w	r2, r0, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	635a      	str	r2, [r3, #52]	; 0x34
 8006894:	e03c      	b.n	8006910 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2b0c      	cmp	r3, #12
 800689c:	d81c      	bhi.n	80068d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	4613      	mov	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	3b23      	subs	r3, #35	; 0x23
 80068b0:	221f      	movs	r2, #31
 80068b2:	fa02 f303 	lsl.w	r3, r2, r3
 80068b6:	43db      	mvns	r3, r3
 80068b8:	4019      	ands	r1, r3
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	4613      	mov	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	3b23      	subs	r3, #35	; 0x23
 80068ca:	fa00 f203 	lsl.w	r2, r0, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	631a      	str	r2, [r3, #48]	; 0x30
 80068d6:	e01b      	b.n	8006910 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	4613      	mov	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	3b41      	subs	r3, #65	; 0x41
 80068ea:	221f      	movs	r2, #31
 80068ec:	fa02 f303 	lsl.w	r3, r2, r3
 80068f0:	43db      	mvns	r3, r3
 80068f2:	4019      	ands	r1, r3
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	6818      	ldr	r0, [r3, #0]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	4613      	mov	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	3b41      	subs	r3, #65	; 0x41
 8006904:	fa00 f203 	lsl.w	r2, r0, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2b09      	cmp	r3, #9
 8006916:	d91c      	bls.n	8006952 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68d9      	ldr	r1, [r3, #12]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	4613      	mov	r3, r2
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	4413      	add	r3, r2
 8006928:	3b1e      	subs	r3, #30
 800692a:	2207      	movs	r2, #7
 800692c:	fa02 f303 	lsl.w	r3, r2, r3
 8006930:	43db      	mvns	r3, r3
 8006932:	4019      	ands	r1, r3
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	6898      	ldr	r0, [r3, #8]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	4613      	mov	r3, r2
 800693e:	005b      	lsls	r3, r3, #1
 8006940:	4413      	add	r3, r2
 8006942:	3b1e      	subs	r3, #30
 8006944:	fa00 f203 	lsl.w	r2, r0, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	60da      	str	r2, [r3, #12]
 8006950:	e019      	b.n	8006986 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6919      	ldr	r1, [r3, #16]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	4613      	mov	r3, r2
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	4413      	add	r3, r2
 8006962:	2207      	movs	r2, #7
 8006964:	fa02 f303 	lsl.w	r3, r2, r3
 8006968:	43db      	mvns	r3, r3
 800696a:	4019      	ands	r1, r3
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	6898      	ldr	r0, [r3, #8]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	4613      	mov	r3, r2
 8006976:	005b      	lsls	r3, r3, #1
 8006978:	4413      	add	r3, r2
 800697a:	fa00 f203 	lsl.w	r2, r0, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b10      	cmp	r3, #16
 800698c:	d003      	beq.n	8006996 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006992:	2b11      	cmp	r3, #17
 8006994:	d132      	bne.n	80069fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a1d      	ldr	r2, [pc, #116]	; (8006a10 <HAL_ADC_ConfigChannel+0x1e4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d125      	bne.n	80069ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d126      	bne.n	80069fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689a      	ldr	r2, [r3, #8]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80069bc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b10      	cmp	r3, #16
 80069c4:	d11a      	bne.n	80069fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80069c6:	4b13      	ldr	r3, [pc, #76]	; (8006a14 <HAL_ADC_ConfigChannel+0x1e8>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a13      	ldr	r2, [pc, #76]	; (8006a18 <HAL_ADC_ConfigChannel+0x1ec>)
 80069cc:	fba2 2303 	umull	r2, r3, r2, r3
 80069d0:	0c9a      	lsrs	r2, r3, #18
 80069d2:	4613      	mov	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80069dc:	e002      	b.n	80069e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	3b01      	subs	r3, #1
 80069e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1f9      	bne.n	80069de <HAL_ADC_ConfigChannel+0x1b2>
 80069ea:	e007      	b.n	80069fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f0:	f043 0220 	orr.w	r2, r3, #32
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bc80      	pop	{r7}
 8006a0e:	4770      	bx	lr
 8006a10:	40012400 	.word	0x40012400
 8006a14:	2000068c 	.word	0x2000068c
 8006a18:	431bde83 	.word	0x431bde83

08006a1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d040      	beq.n	8006abc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689a      	ldr	r2, [r3, #8]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f042 0201 	orr.w	r2, r2, #1
 8006a48:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006a4a:	4b1f      	ldr	r3, [pc, #124]	; (8006ac8 <ADC_Enable+0xac>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a1f      	ldr	r2, [pc, #124]	; (8006acc <ADC_Enable+0xb0>)
 8006a50:	fba2 2303 	umull	r2, r3, r2, r3
 8006a54:	0c9b      	lsrs	r3, r3, #18
 8006a56:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006a58:	e002      	b.n	8006a60 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1f9      	bne.n	8006a5a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006a66:	f7ff fbf3 	bl	8006250 <HAL_GetTick>
 8006a6a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006a6c:	e01f      	b.n	8006aae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006a6e:	f7ff fbef 	bl	8006250 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d918      	bls.n	8006aae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d011      	beq.n	8006aae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8e:	f043 0210 	orr.w	r2, r3, #16
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9a:	f043 0201 	orr.w	r2, r3, #1
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e007      	b.n	8006abe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d1d8      	bne.n	8006a6e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	2000068c 	.word	0x2000068c
 8006acc:	431bde83 	.word	0x431bde83

08006ad0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d12e      	bne.n	8006b48 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689a      	ldr	r2, [r3, #8]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 0201 	bic.w	r2, r2, #1
 8006af8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006afa:	f7ff fba9 	bl	8006250 <HAL_GetTick>
 8006afe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006b00:	e01b      	b.n	8006b3a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006b02:	f7ff fba5 	bl	8006250 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d914      	bls.n	8006b3a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d10d      	bne.n	8006b3a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b22:	f043 0210 	orr.w	r2, r3, #16
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2e:	f043 0201 	orr.w	r2, r3, #1
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e007      	b.n	8006b4a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d0dc      	beq.n	8006b02 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b084      	sub	sp, #16
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d127      	bne.n	8006bbc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006b82:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006b86:	d115      	bne.n	8006bb4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d111      	bne.n	8006bb4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d105      	bne.n	8006bb4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bac:	f043 0201 	orr.w	r2, r3, #1
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f7fd f9b7 	bl	8003f28 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8006bba:	e004      	b.n	8006bc6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	4798      	blx	r3
}
 8006bc6:	bf00      	nop
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b084      	sub	sp, #16
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f7ff fe0a 	bl	80067f6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006be2:	bf00      	nop
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b084      	sub	sp, #16
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c08:	f043 0204 	orr.w	r2, r3, #4
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f7ff fe02 	bl	800681a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006c16:	bf00      	nop
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bc80      	pop	{r7}
 8006c2e:	4770      	bx	lr

08006c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c40:	4b0c      	ldr	r3, [pc, #48]	; (8006c74 <__NVIC_SetPriorityGrouping+0x44>)
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c62:	4a04      	ldr	r2, [pc, #16]	; (8006c74 <__NVIC_SetPriorityGrouping+0x44>)
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	60d3      	str	r3, [r2, #12]
}
 8006c68:	bf00      	nop
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bc80      	pop	{r7}
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	e000ed00 	.word	0xe000ed00

08006c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c7c:	4b04      	ldr	r3, [pc, #16]	; (8006c90 <__NVIC_GetPriorityGrouping+0x18>)
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	0a1b      	lsrs	r3, r3, #8
 8006c82:	f003 0307 	and.w	r3, r3, #7
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bc80      	pop	{r7}
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	e000ed00 	.word	0xe000ed00

08006c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	db0b      	blt.n	8006cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ca6:	79fb      	ldrb	r3, [r7, #7]
 8006ca8:	f003 021f 	and.w	r2, r3, #31
 8006cac:	4906      	ldr	r1, [pc, #24]	; (8006cc8 <__NVIC_EnableIRQ+0x34>)
 8006cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cb2:	095b      	lsrs	r3, r3, #5
 8006cb4:	2001      	movs	r0, #1
 8006cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8006cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006cbe:	bf00      	nop
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bc80      	pop	{r7}
 8006cc6:	4770      	bx	lr
 8006cc8:	e000e100 	.word	0xe000e100

08006ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	6039      	str	r1, [r7, #0]
 8006cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	db0a      	blt.n	8006cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	490c      	ldr	r1, [pc, #48]	; (8006d18 <__NVIC_SetPriority+0x4c>)
 8006ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cea:	0112      	lsls	r2, r2, #4
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	440b      	add	r3, r1
 8006cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006cf4:	e00a      	b.n	8006d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	4908      	ldr	r1, [pc, #32]	; (8006d1c <__NVIC_SetPriority+0x50>)
 8006cfc:	79fb      	ldrb	r3, [r7, #7]
 8006cfe:	f003 030f 	and.w	r3, r3, #15
 8006d02:	3b04      	subs	r3, #4
 8006d04:	0112      	lsls	r2, r2, #4
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	440b      	add	r3, r1
 8006d0a:	761a      	strb	r2, [r3, #24]
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bc80      	pop	{r7}
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	e000e100 	.word	0xe000e100
 8006d1c:	e000ed00 	.word	0xe000ed00

08006d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b089      	sub	sp, #36	; 0x24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	f1c3 0307 	rsb	r3, r3, #7
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	bf28      	it	cs
 8006d3e:	2304      	movcs	r3, #4
 8006d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	3304      	adds	r3, #4
 8006d46:	2b06      	cmp	r3, #6
 8006d48:	d902      	bls.n	8006d50 <NVIC_EncodePriority+0x30>
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	3b03      	subs	r3, #3
 8006d4e:	e000      	b.n	8006d52 <NVIC_EncodePriority+0x32>
 8006d50:	2300      	movs	r3, #0
 8006d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d54:	f04f 32ff 	mov.w	r2, #4294967295
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5e:	43da      	mvns	r2, r3
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	401a      	ands	r2, r3
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d68:	f04f 31ff 	mov.w	r1, #4294967295
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d72:	43d9      	mvns	r1, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d78:	4313      	orrs	r3, r2
         );
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3724      	adds	r7, #36	; 0x24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bc80      	pop	{r7}
 8006d82:	4770      	bx	lr

08006d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d94:	d301      	bcc.n	8006d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d96:	2301      	movs	r3, #1
 8006d98:	e00f      	b.n	8006dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d9a:	4a0a      	ldr	r2, [pc, #40]	; (8006dc4 <SysTick_Config+0x40>)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006da2:	210f      	movs	r1, #15
 8006da4:	f04f 30ff 	mov.w	r0, #4294967295
 8006da8:	f7ff ff90 	bl	8006ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006dac:	4b05      	ldr	r3, [pc, #20]	; (8006dc4 <SysTick_Config+0x40>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006db2:	4b04      	ldr	r3, [pc, #16]	; (8006dc4 <SysTick_Config+0x40>)
 8006db4:	2207      	movs	r2, #7
 8006db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	e000e010 	.word	0xe000e010

08006dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7ff ff2d 	bl	8006c30 <__NVIC_SetPriorityGrouping>
}
 8006dd6:	bf00      	nop
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b086      	sub	sp, #24
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	4603      	mov	r3, r0
 8006de6:	60b9      	str	r1, [r7, #8]
 8006de8:	607a      	str	r2, [r7, #4]
 8006dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006dec:	2300      	movs	r3, #0
 8006dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006df0:	f7ff ff42 	bl	8006c78 <__NVIC_GetPriorityGrouping>
 8006df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	68b9      	ldr	r1, [r7, #8]
 8006dfa:	6978      	ldr	r0, [r7, #20]
 8006dfc:	f7ff ff90 	bl	8006d20 <NVIC_EncodePriority>
 8006e00:	4602      	mov	r2, r0
 8006e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e06:	4611      	mov	r1, r2
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7ff ff5f 	bl	8006ccc <__NVIC_SetPriority>
}
 8006e0e:	bf00      	nop
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7ff ff35 	bl	8006c94 <__NVIC_EnableIRQ>
}
 8006e2a:	bf00      	nop
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b082      	sub	sp, #8
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7ff ffa2 	bl	8006d84 <SysTick_Config>
 8006e40:	4603      	mov	r3, r0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e059      	b.n	8006f16 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	461a      	mov	r2, r3
 8006e68:	4b2d      	ldr	r3, [pc, #180]	; (8006f20 <HAL_DMA_Init+0xd4>)
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d80f      	bhi.n	8006e8e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	461a      	mov	r2, r3
 8006e74:	4b2b      	ldr	r3, [pc, #172]	; (8006f24 <HAL_DMA_Init+0xd8>)
 8006e76:	4413      	add	r3, r2
 8006e78:	4a2b      	ldr	r2, [pc, #172]	; (8006f28 <HAL_DMA_Init+0xdc>)
 8006e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e7e:	091b      	lsrs	r3, r3, #4
 8006e80:	009a      	lsls	r2, r3, #2
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a28      	ldr	r2, [pc, #160]	; (8006f2c <HAL_DMA_Init+0xe0>)
 8006e8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8006e8c:	e00e      	b.n	8006eac <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	461a      	mov	r2, r3
 8006e94:	4b26      	ldr	r3, [pc, #152]	; (8006f30 <HAL_DMA_Init+0xe4>)
 8006e96:	4413      	add	r3, r2
 8006e98:	4a23      	ldr	r2, [pc, #140]	; (8006f28 <HAL_DMA_Init+0xdc>)
 8006e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9e:	091b      	lsrs	r3, r3, #4
 8006ea0:	009a      	lsls	r2, r3, #2
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a22      	ldr	r2, [pc, #136]	; (8006f34 <HAL_DMA_Init+0xe8>)
 8006eaa:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006ec2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006ec6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ee8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3714      	adds	r7, #20
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bc80      	pop	{r7}
 8006f1e:	4770      	bx	lr
 8006f20:	40020407 	.word	0x40020407
 8006f24:	bffdfff8 	.word	0xbffdfff8
 8006f28:	cccccccd 	.word	0xcccccccd
 8006f2c:	40020000 	.word	0x40020000
 8006f30:	bffdfbf8 	.word	0xbffdfbf8
 8006f34:	40020400 	.word	0x40020400

08006f38 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
 8006f44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d101      	bne.n	8006f58 <HAL_DMA_Start_IT+0x20>
 8006f54:	2302      	movs	r3, #2
 8006f56:	e04b      	b.n	8006ff0 <HAL_DMA_Start_IT+0xb8>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d13a      	bne.n	8006fe2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f022 0201 	bic.w	r2, r2, #1
 8006f88:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	68b9      	ldr	r1, [r7, #8]
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f000 fb82 	bl	800769a <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d008      	beq.n	8006fb0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f042 020e 	orr.w	r2, r2, #14
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	e00f      	b.n	8006fd0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 0204 	bic.w	r2, r2, #4
 8006fbe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f042 020a 	orr.w	r2, r2, #10
 8006fce:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f042 0201 	orr.w	r2, r2, #1
 8006fde:	601a      	str	r2, [r3, #0]
 8006fe0:	e005      	b.n	8006fee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006fea:	2302      	movs	r3, #2
 8006fec:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007000:	2300      	movs	r3, #0
 8007002:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	d005      	beq.n	800701c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2204      	movs	r2, #4
 8007014:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	73fb      	strb	r3, [r7, #15]
 800701a:	e0d6      	b.n	80071ca <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f022 020e 	bic.w	r2, r2, #14
 800702a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f022 0201 	bic.w	r2, r2, #1
 800703a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	461a      	mov	r2, r3
 8007042:	4b64      	ldr	r3, [pc, #400]	; (80071d4 <HAL_DMA_Abort_IT+0x1dc>)
 8007044:	429a      	cmp	r2, r3
 8007046:	d958      	bls.n	80070fa <HAL_DMA_Abort_IT+0x102>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a62      	ldr	r2, [pc, #392]	; (80071d8 <HAL_DMA_Abort_IT+0x1e0>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d04f      	beq.n	80070f2 <HAL_DMA_Abort_IT+0xfa>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a61      	ldr	r2, [pc, #388]	; (80071dc <HAL_DMA_Abort_IT+0x1e4>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d048      	beq.n	80070ee <HAL_DMA_Abort_IT+0xf6>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a5f      	ldr	r2, [pc, #380]	; (80071e0 <HAL_DMA_Abort_IT+0x1e8>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d040      	beq.n	80070e8 <HAL_DMA_Abort_IT+0xf0>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a5e      	ldr	r2, [pc, #376]	; (80071e4 <HAL_DMA_Abort_IT+0x1ec>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d038      	beq.n	80070e2 <HAL_DMA_Abort_IT+0xea>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a5c      	ldr	r2, [pc, #368]	; (80071e8 <HAL_DMA_Abort_IT+0x1f0>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d030      	beq.n	80070dc <HAL_DMA_Abort_IT+0xe4>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a5b      	ldr	r2, [pc, #364]	; (80071ec <HAL_DMA_Abort_IT+0x1f4>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d028      	beq.n	80070d6 <HAL_DMA_Abort_IT+0xde>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a52      	ldr	r2, [pc, #328]	; (80071d4 <HAL_DMA_Abort_IT+0x1dc>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d020      	beq.n	80070d0 <HAL_DMA_Abort_IT+0xd8>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a57      	ldr	r2, [pc, #348]	; (80071f0 <HAL_DMA_Abort_IT+0x1f8>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d019      	beq.n	80070cc <HAL_DMA_Abort_IT+0xd4>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a55      	ldr	r2, [pc, #340]	; (80071f4 <HAL_DMA_Abort_IT+0x1fc>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d012      	beq.n	80070c8 <HAL_DMA_Abort_IT+0xd0>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a54      	ldr	r2, [pc, #336]	; (80071f8 <HAL_DMA_Abort_IT+0x200>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d00a      	beq.n	80070c2 <HAL_DMA_Abort_IT+0xca>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a52      	ldr	r2, [pc, #328]	; (80071fc <HAL_DMA_Abort_IT+0x204>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d102      	bne.n	80070bc <HAL_DMA_Abort_IT+0xc4>
 80070b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070ba:	e01b      	b.n	80070f4 <HAL_DMA_Abort_IT+0xfc>
 80070bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80070c0:	e018      	b.n	80070f4 <HAL_DMA_Abort_IT+0xfc>
 80070c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070c6:	e015      	b.n	80070f4 <HAL_DMA_Abort_IT+0xfc>
 80070c8:	2310      	movs	r3, #16
 80070ca:	e013      	b.n	80070f4 <HAL_DMA_Abort_IT+0xfc>
 80070cc:	2301      	movs	r3, #1
 80070ce:	e011      	b.n	80070f4 <HAL_DMA_Abort_IT+0xfc>
 80070d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070d4:	e00e      	b.n	80070f4 <HAL_DMA_Abort_IT+0xfc>
 80070d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80070da:	e00b      	b.n	80070f4 <HAL_DMA_Abort_IT+0xfc>
 80070dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80070e0:	e008      	b.n	80070f4 <HAL_DMA_Abort_IT+0xfc>
 80070e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070e6:	e005      	b.n	80070f4 <HAL_DMA_Abort_IT+0xfc>
 80070e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070ec:	e002      	b.n	80070f4 <HAL_DMA_Abort_IT+0xfc>
 80070ee:	2310      	movs	r3, #16
 80070f0:	e000      	b.n	80070f4 <HAL_DMA_Abort_IT+0xfc>
 80070f2:	2301      	movs	r3, #1
 80070f4:	4a42      	ldr	r2, [pc, #264]	; (8007200 <HAL_DMA_Abort_IT+0x208>)
 80070f6:	6053      	str	r3, [r2, #4]
 80070f8:	e057      	b.n	80071aa <HAL_DMA_Abort_IT+0x1b2>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a36      	ldr	r2, [pc, #216]	; (80071d8 <HAL_DMA_Abort_IT+0x1e0>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d04f      	beq.n	80071a4 <HAL_DMA_Abort_IT+0x1ac>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a34      	ldr	r2, [pc, #208]	; (80071dc <HAL_DMA_Abort_IT+0x1e4>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d048      	beq.n	80071a0 <HAL_DMA_Abort_IT+0x1a8>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a33      	ldr	r2, [pc, #204]	; (80071e0 <HAL_DMA_Abort_IT+0x1e8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d040      	beq.n	800719a <HAL_DMA_Abort_IT+0x1a2>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a31      	ldr	r2, [pc, #196]	; (80071e4 <HAL_DMA_Abort_IT+0x1ec>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d038      	beq.n	8007194 <HAL_DMA_Abort_IT+0x19c>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a30      	ldr	r2, [pc, #192]	; (80071e8 <HAL_DMA_Abort_IT+0x1f0>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d030      	beq.n	800718e <HAL_DMA_Abort_IT+0x196>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a2e      	ldr	r2, [pc, #184]	; (80071ec <HAL_DMA_Abort_IT+0x1f4>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d028      	beq.n	8007188 <HAL_DMA_Abort_IT+0x190>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a26      	ldr	r2, [pc, #152]	; (80071d4 <HAL_DMA_Abort_IT+0x1dc>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d020      	beq.n	8007182 <HAL_DMA_Abort_IT+0x18a>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a2a      	ldr	r2, [pc, #168]	; (80071f0 <HAL_DMA_Abort_IT+0x1f8>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d019      	beq.n	800717e <HAL_DMA_Abort_IT+0x186>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a29      	ldr	r2, [pc, #164]	; (80071f4 <HAL_DMA_Abort_IT+0x1fc>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d012      	beq.n	800717a <HAL_DMA_Abort_IT+0x182>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a27      	ldr	r2, [pc, #156]	; (80071f8 <HAL_DMA_Abort_IT+0x200>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d00a      	beq.n	8007174 <HAL_DMA_Abort_IT+0x17c>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a26      	ldr	r2, [pc, #152]	; (80071fc <HAL_DMA_Abort_IT+0x204>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d102      	bne.n	800716e <HAL_DMA_Abort_IT+0x176>
 8007168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800716c:	e01b      	b.n	80071a6 <HAL_DMA_Abort_IT+0x1ae>
 800716e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007172:	e018      	b.n	80071a6 <HAL_DMA_Abort_IT+0x1ae>
 8007174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007178:	e015      	b.n	80071a6 <HAL_DMA_Abort_IT+0x1ae>
 800717a:	2310      	movs	r3, #16
 800717c:	e013      	b.n	80071a6 <HAL_DMA_Abort_IT+0x1ae>
 800717e:	2301      	movs	r3, #1
 8007180:	e011      	b.n	80071a6 <HAL_DMA_Abort_IT+0x1ae>
 8007182:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007186:	e00e      	b.n	80071a6 <HAL_DMA_Abort_IT+0x1ae>
 8007188:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800718c:	e00b      	b.n	80071a6 <HAL_DMA_Abort_IT+0x1ae>
 800718e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007192:	e008      	b.n	80071a6 <HAL_DMA_Abort_IT+0x1ae>
 8007194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007198:	e005      	b.n	80071a6 <HAL_DMA_Abort_IT+0x1ae>
 800719a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800719e:	e002      	b.n	80071a6 <HAL_DMA_Abort_IT+0x1ae>
 80071a0:	2310      	movs	r3, #16
 80071a2:	e000      	b.n	80071a6 <HAL_DMA_Abort_IT+0x1ae>
 80071a4:	2301      	movs	r3, #1
 80071a6:	4a17      	ldr	r2, [pc, #92]	; (8007204 <HAL_DMA_Abort_IT+0x20c>)
 80071a8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	4798      	blx	r3
    } 
  }
  return status;
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	40020080 	.word	0x40020080
 80071d8:	40020008 	.word	0x40020008
 80071dc:	4002001c 	.word	0x4002001c
 80071e0:	40020030 	.word	0x40020030
 80071e4:	40020044 	.word	0x40020044
 80071e8:	40020058 	.word	0x40020058
 80071ec:	4002006c 	.word	0x4002006c
 80071f0:	40020408 	.word	0x40020408
 80071f4:	4002041c 	.word	0x4002041c
 80071f8:	40020430 	.word	0x40020430
 80071fc:	40020444 	.word	0x40020444
 8007200:	40020400 	.word	0x40020400
 8007204:	40020000 	.word	0x40020000

08007208 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007224:	2204      	movs	r2, #4
 8007226:	409a      	lsls	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4013      	ands	r3, r2
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 80f1 	beq.w	8007414 <HAL_DMA_IRQHandler+0x20c>
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	f003 0304 	and.w	r3, r3, #4
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 80eb 	beq.w	8007414 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0320 	and.w	r3, r3, #32
 8007248:	2b00      	cmp	r3, #0
 800724a:	d107      	bne.n	800725c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0204 	bic.w	r2, r2, #4
 800725a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	461a      	mov	r2, r3
 8007262:	4b5f      	ldr	r3, [pc, #380]	; (80073e0 <HAL_DMA_IRQHandler+0x1d8>)
 8007264:	429a      	cmp	r2, r3
 8007266:	d958      	bls.n	800731a <HAL_DMA_IRQHandler+0x112>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a5d      	ldr	r2, [pc, #372]	; (80073e4 <HAL_DMA_IRQHandler+0x1dc>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d04f      	beq.n	8007312 <HAL_DMA_IRQHandler+0x10a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a5c      	ldr	r2, [pc, #368]	; (80073e8 <HAL_DMA_IRQHandler+0x1e0>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d048      	beq.n	800730e <HAL_DMA_IRQHandler+0x106>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a5a      	ldr	r2, [pc, #360]	; (80073ec <HAL_DMA_IRQHandler+0x1e4>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d040      	beq.n	8007308 <HAL_DMA_IRQHandler+0x100>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a59      	ldr	r2, [pc, #356]	; (80073f0 <HAL_DMA_IRQHandler+0x1e8>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d038      	beq.n	8007302 <HAL_DMA_IRQHandler+0xfa>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a57      	ldr	r2, [pc, #348]	; (80073f4 <HAL_DMA_IRQHandler+0x1ec>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d030      	beq.n	80072fc <HAL_DMA_IRQHandler+0xf4>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a56      	ldr	r2, [pc, #344]	; (80073f8 <HAL_DMA_IRQHandler+0x1f0>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d028      	beq.n	80072f6 <HAL_DMA_IRQHandler+0xee>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a4d      	ldr	r2, [pc, #308]	; (80073e0 <HAL_DMA_IRQHandler+0x1d8>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d020      	beq.n	80072f0 <HAL_DMA_IRQHandler+0xe8>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a52      	ldr	r2, [pc, #328]	; (80073fc <HAL_DMA_IRQHandler+0x1f4>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d019      	beq.n	80072ec <HAL_DMA_IRQHandler+0xe4>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a50      	ldr	r2, [pc, #320]	; (8007400 <HAL_DMA_IRQHandler+0x1f8>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d012      	beq.n	80072e8 <HAL_DMA_IRQHandler+0xe0>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a4f      	ldr	r2, [pc, #316]	; (8007404 <HAL_DMA_IRQHandler+0x1fc>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d00a      	beq.n	80072e2 <HAL_DMA_IRQHandler+0xda>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a4d      	ldr	r2, [pc, #308]	; (8007408 <HAL_DMA_IRQHandler+0x200>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d102      	bne.n	80072dc <HAL_DMA_IRQHandler+0xd4>
 80072d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80072da:	e01b      	b.n	8007314 <HAL_DMA_IRQHandler+0x10c>
 80072dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80072e0:	e018      	b.n	8007314 <HAL_DMA_IRQHandler+0x10c>
 80072e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072e6:	e015      	b.n	8007314 <HAL_DMA_IRQHandler+0x10c>
 80072e8:	2340      	movs	r3, #64	; 0x40
 80072ea:	e013      	b.n	8007314 <HAL_DMA_IRQHandler+0x10c>
 80072ec:	2304      	movs	r3, #4
 80072ee:	e011      	b.n	8007314 <HAL_DMA_IRQHandler+0x10c>
 80072f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80072f4:	e00e      	b.n	8007314 <HAL_DMA_IRQHandler+0x10c>
 80072f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80072fa:	e00b      	b.n	8007314 <HAL_DMA_IRQHandler+0x10c>
 80072fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007300:	e008      	b.n	8007314 <HAL_DMA_IRQHandler+0x10c>
 8007302:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007306:	e005      	b.n	8007314 <HAL_DMA_IRQHandler+0x10c>
 8007308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800730c:	e002      	b.n	8007314 <HAL_DMA_IRQHandler+0x10c>
 800730e:	2340      	movs	r3, #64	; 0x40
 8007310:	e000      	b.n	8007314 <HAL_DMA_IRQHandler+0x10c>
 8007312:	2304      	movs	r3, #4
 8007314:	4a3d      	ldr	r2, [pc, #244]	; (800740c <HAL_DMA_IRQHandler+0x204>)
 8007316:	6053      	str	r3, [r2, #4]
 8007318:	e057      	b.n	80073ca <HAL_DMA_IRQHandler+0x1c2>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a31      	ldr	r2, [pc, #196]	; (80073e4 <HAL_DMA_IRQHandler+0x1dc>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d04f      	beq.n	80073c4 <HAL_DMA_IRQHandler+0x1bc>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a2f      	ldr	r2, [pc, #188]	; (80073e8 <HAL_DMA_IRQHandler+0x1e0>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d048      	beq.n	80073c0 <HAL_DMA_IRQHandler+0x1b8>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a2e      	ldr	r2, [pc, #184]	; (80073ec <HAL_DMA_IRQHandler+0x1e4>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d040      	beq.n	80073ba <HAL_DMA_IRQHandler+0x1b2>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a2c      	ldr	r2, [pc, #176]	; (80073f0 <HAL_DMA_IRQHandler+0x1e8>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d038      	beq.n	80073b4 <HAL_DMA_IRQHandler+0x1ac>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a2b      	ldr	r2, [pc, #172]	; (80073f4 <HAL_DMA_IRQHandler+0x1ec>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d030      	beq.n	80073ae <HAL_DMA_IRQHandler+0x1a6>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a29      	ldr	r2, [pc, #164]	; (80073f8 <HAL_DMA_IRQHandler+0x1f0>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d028      	beq.n	80073a8 <HAL_DMA_IRQHandler+0x1a0>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a21      	ldr	r2, [pc, #132]	; (80073e0 <HAL_DMA_IRQHandler+0x1d8>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d020      	beq.n	80073a2 <HAL_DMA_IRQHandler+0x19a>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a25      	ldr	r2, [pc, #148]	; (80073fc <HAL_DMA_IRQHandler+0x1f4>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d019      	beq.n	800739e <HAL_DMA_IRQHandler+0x196>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a24      	ldr	r2, [pc, #144]	; (8007400 <HAL_DMA_IRQHandler+0x1f8>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d012      	beq.n	800739a <HAL_DMA_IRQHandler+0x192>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a22      	ldr	r2, [pc, #136]	; (8007404 <HAL_DMA_IRQHandler+0x1fc>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d00a      	beq.n	8007394 <HAL_DMA_IRQHandler+0x18c>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a21      	ldr	r2, [pc, #132]	; (8007408 <HAL_DMA_IRQHandler+0x200>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d102      	bne.n	800738e <HAL_DMA_IRQHandler+0x186>
 8007388:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800738c:	e01b      	b.n	80073c6 <HAL_DMA_IRQHandler+0x1be>
 800738e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007392:	e018      	b.n	80073c6 <HAL_DMA_IRQHandler+0x1be>
 8007394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007398:	e015      	b.n	80073c6 <HAL_DMA_IRQHandler+0x1be>
 800739a:	2340      	movs	r3, #64	; 0x40
 800739c:	e013      	b.n	80073c6 <HAL_DMA_IRQHandler+0x1be>
 800739e:	2304      	movs	r3, #4
 80073a0:	e011      	b.n	80073c6 <HAL_DMA_IRQHandler+0x1be>
 80073a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80073a6:	e00e      	b.n	80073c6 <HAL_DMA_IRQHandler+0x1be>
 80073a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80073ac:	e00b      	b.n	80073c6 <HAL_DMA_IRQHandler+0x1be>
 80073ae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80073b2:	e008      	b.n	80073c6 <HAL_DMA_IRQHandler+0x1be>
 80073b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80073b8:	e005      	b.n	80073c6 <HAL_DMA_IRQHandler+0x1be>
 80073ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073be:	e002      	b.n	80073c6 <HAL_DMA_IRQHandler+0x1be>
 80073c0:	2340      	movs	r3, #64	; 0x40
 80073c2:	e000      	b.n	80073c6 <HAL_DMA_IRQHandler+0x1be>
 80073c4:	2304      	movs	r3, #4
 80073c6:	4a12      	ldr	r2, [pc, #72]	; (8007410 <HAL_DMA_IRQHandler+0x208>)
 80073c8:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 8136 	beq.w	8007640 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80073dc:	e130      	b.n	8007640 <HAL_DMA_IRQHandler+0x438>
 80073de:	bf00      	nop
 80073e0:	40020080 	.word	0x40020080
 80073e4:	40020008 	.word	0x40020008
 80073e8:	4002001c 	.word	0x4002001c
 80073ec:	40020030 	.word	0x40020030
 80073f0:	40020044 	.word	0x40020044
 80073f4:	40020058 	.word	0x40020058
 80073f8:	4002006c 	.word	0x4002006c
 80073fc:	40020408 	.word	0x40020408
 8007400:	4002041c 	.word	0x4002041c
 8007404:	40020430 	.word	0x40020430
 8007408:	40020444 	.word	0x40020444
 800740c:	40020400 	.word	0x40020400
 8007410:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007418:	2202      	movs	r2, #2
 800741a:	409a      	lsls	r2, r3
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4013      	ands	r3, r2
 8007420:	2b00      	cmp	r3, #0
 8007422:	f000 80dd 	beq.w	80075e0 <HAL_DMA_IRQHandler+0x3d8>
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	f003 0302 	and.w	r3, r3, #2
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 80d7 	beq.w	80075e0 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 0320 	and.w	r3, r3, #32
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10b      	bne.n	8007458 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 020a 	bic.w	r2, r2, #10
 800744e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	461a      	mov	r2, r3
 800745e:	4b7b      	ldr	r3, [pc, #492]	; (800764c <HAL_DMA_IRQHandler+0x444>)
 8007460:	429a      	cmp	r2, r3
 8007462:	d958      	bls.n	8007516 <HAL_DMA_IRQHandler+0x30e>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a79      	ldr	r2, [pc, #484]	; (8007650 <HAL_DMA_IRQHandler+0x448>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d04f      	beq.n	800750e <HAL_DMA_IRQHandler+0x306>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a78      	ldr	r2, [pc, #480]	; (8007654 <HAL_DMA_IRQHandler+0x44c>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d048      	beq.n	800750a <HAL_DMA_IRQHandler+0x302>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a76      	ldr	r2, [pc, #472]	; (8007658 <HAL_DMA_IRQHandler+0x450>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d040      	beq.n	8007504 <HAL_DMA_IRQHandler+0x2fc>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a75      	ldr	r2, [pc, #468]	; (800765c <HAL_DMA_IRQHandler+0x454>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d038      	beq.n	80074fe <HAL_DMA_IRQHandler+0x2f6>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a73      	ldr	r2, [pc, #460]	; (8007660 <HAL_DMA_IRQHandler+0x458>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d030      	beq.n	80074f8 <HAL_DMA_IRQHandler+0x2f0>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a72      	ldr	r2, [pc, #456]	; (8007664 <HAL_DMA_IRQHandler+0x45c>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d028      	beq.n	80074f2 <HAL_DMA_IRQHandler+0x2ea>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a69      	ldr	r2, [pc, #420]	; (800764c <HAL_DMA_IRQHandler+0x444>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d020      	beq.n	80074ec <HAL_DMA_IRQHandler+0x2e4>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a6e      	ldr	r2, [pc, #440]	; (8007668 <HAL_DMA_IRQHandler+0x460>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d019      	beq.n	80074e8 <HAL_DMA_IRQHandler+0x2e0>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a6c      	ldr	r2, [pc, #432]	; (800766c <HAL_DMA_IRQHandler+0x464>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d012      	beq.n	80074e4 <HAL_DMA_IRQHandler+0x2dc>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a6b      	ldr	r2, [pc, #428]	; (8007670 <HAL_DMA_IRQHandler+0x468>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d00a      	beq.n	80074de <HAL_DMA_IRQHandler+0x2d6>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a69      	ldr	r2, [pc, #420]	; (8007674 <HAL_DMA_IRQHandler+0x46c>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d102      	bne.n	80074d8 <HAL_DMA_IRQHandler+0x2d0>
 80074d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074d6:	e01b      	b.n	8007510 <HAL_DMA_IRQHandler+0x308>
 80074d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074dc:	e018      	b.n	8007510 <HAL_DMA_IRQHandler+0x308>
 80074de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074e2:	e015      	b.n	8007510 <HAL_DMA_IRQHandler+0x308>
 80074e4:	2320      	movs	r3, #32
 80074e6:	e013      	b.n	8007510 <HAL_DMA_IRQHandler+0x308>
 80074e8:	2302      	movs	r3, #2
 80074ea:	e011      	b.n	8007510 <HAL_DMA_IRQHandler+0x308>
 80074ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074f0:	e00e      	b.n	8007510 <HAL_DMA_IRQHandler+0x308>
 80074f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80074f6:	e00b      	b.n	8007510 <HAL_DMA_IRQHandler+0x308>
 80074f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074fc:	e008      	b.n	8007510 <HAL_DMA_IRQHandler+0x308>
 80074fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007502:	e005      	b.n	8007510 <HAL_DMA_IRQHandler+0x308>
 8007504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007508:	e002      	b.n	8007510 <HAL_DMA_IRQHandler+0x308>
 800750a:	2320      	movs	r3, #32
 800750c:	e000      	b.n	8007510 <HAL_DMA_IRQHandler+0x308>
 800750e:	2302      	movs	r3, #2
 8007510:	4a59      	ldr	r2, [pc, #356]	; (8007678 <HAL_DMA_IRQHandler+0x470>)
 8007512:	6053      	str	r3, [r2, #4]
 8007514:	e057      	b.n	80075c6 <HAL_DMA_IRQHandler+0x3be>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a4d      	ldr	r2, [pc, #308]	; (8007650 <HAL_DMA_IRQHandler+0x448>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d04f      	beq.n	80075c0 <HAL_DMA_IRQHandler+0x3b8>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a4b      	ldr	r2, [pc, #300]	; (8007654 <HAL_DMA_IRQHandler+0x44c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d048      	beq.n	80075bc <HAL_DMA_IRQHandler+0x3b4>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a4a      	ldr	r2, [pc, #296]	; (8007658 <HAL_DMA_IRQHandler+0x450>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d040      	beq.n	80075b6 <HAL_DMA_IRQHandler+0x3ae>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a48      	ldr	r2, [pc, #288]	; (800765c <HAL_DMA_IRQHandler+0x454>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d038      	beq.n	80075b0 <HAL_DMA_IRQHandler+0x3a8>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a47      	ldr	r2, [pc, #284]	; (8007660 <HAL_DMA_IRQHandler+0x458>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d030      	beq.n	80075aa <HAL_DMA_IRQHandler+0x3a2>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a45      	ldr	r2, [pc, #276]	; (8007664 <HAL_DMA_IRQHandler+0x45c>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d028      	beq.n	80075a4 <HAL_DMA_IRQHandler+0x39c>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a3d      	ldr	r2, [pc, #244]	; (800764c <HAL_DMA_IRQHandler+0x444>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d020      	beq.n	800759e <HAL_DMA_IRQHandler+0x396>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a41      	ldr	r2, [pc, #260]	; (8007668 <HAL_DMA_IRQHandler+0x460>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d019      	beq.n	800759a <HAL_DMA_IRQHandler+0x392>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a40      	ldr	r2, [pc, #256]	; (800766c <HAL_DMA_IRQHandler+0x464>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d012      	beq.n	8007596 <HAL_DMA_IRQHandler+0x38e>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a3e      	ldr	r2, [pc, #248]	; (8007670 <HAL_DMA_IRQHandler+0x468>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d00a      	beq.n	8007590 <HAL_DMA_IRQHandler+0x388>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a3d      	ldr	r2, [pc, #244]	; (8007674 <HAL_DMA_IRQHandler+0x46c>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d102      	bne.n	800758a <HAL_DMA_IRQHandler+0x382>
 8007584:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007588:	e01b      	b.n	80075c2 <HAL_DMA_IRQHandler+0x3ba>
 800758a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800758e:	e018      	b.n	80075c2 <HAL_DMA_IRQHandler+0x3ba>
 8007590:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007594:	e015      	b.n	80075c2 <HAL_DMA_IRQHandler+0x3ba>
 8007596:	2320      	movs	r3, #32
 8007598:	e013      	b.n	80075c2 <HAL_DMA_IRQHandler+0x3ba>
 800759a:	2302      	movs	r3, #2
 800759c:	e011      	b.n	80075c2 <HAL_DMA_IRQHandler+0x3ba>
 800759e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075a2:	e00e      	b.n	80075c2 <HAL_DMA_IRQHandler+0x3ba>
 80075a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80075a8:	e00b      	b.n	80075c2 <HAL_DMA_IRQHandler+0x3ba>
 80075aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80075ae:	e008      	b.n	80075c2 <HAL_DMA_IRQHandler+0x3ba>
 80075b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075b4:	e005      	b.n	80075c2 <HAL_DMA_IRQHandler+0x3ba>
 80075b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075ba:	e002      	b.n	80075c2 <HAL_DMA_IRQHandler+0x3ba>
 80075bc:	2320      	movs	r3, #32
 80075be:	e000      	b.n	80075c2 <HAL_DMA_IRQHandler+0x3ba>
 80075c0:	2302      	movs	r3, #2
 80075c2:	4a2e      	ldr	r2, [pc, #184]	; (800767c <HAL_DMA_IRQHandler+0x474>)
 80075c4:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d034      	beq.n	8007640 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80075de:	e02f      	b.n	8007640 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e4:	2208      	movs	r2, #8
 80075e6:	409a      	lsls	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	4013      	ands	r3, r2
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d028      	beq.n	8007642 <HAL_DMA_IRQHandler+0x43a>
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f003 0308 	and.w	r3, r3, #8
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d023      	beq.n	8007642 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 020e 	bic.w	r2, r2, #14
 8007608:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007612:	2101      	movs	r1, #1
 8007614:	fa01 f202 	lsl.w	r2, r1, r2
 8007618:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007634:	2b00      	cmp	r3, #0
 8007636:	d004      	beq.n	8007642 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	4798      	blx	r3
    }
  }
  return;
 8007640:	bf00      	nop
 8007642:	bf00      	nop
}
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	40020080 	.word	0x40020080
 8007650:	40020008 	.word	0x40020008
 8007654:	4002001c 	.word	0x4002001c
 8007658:	40020030 	.word	0x40020030
 800765c:	40020044 	.word	0x40020044
 8007660:	40020058 	.word	0x40020058
 8007664:	4002006c 	.word	0x4002006c
 8007668:	40020408 	.word	0x40020408
 800766c:	4002041c 	.word	0x4002041c
 8007670:	40020430 	.word	0x40020430
 8007674:	40020444 	.word	0x40020444
 8007678:	40020400 	.word	0x40020400
 800767c:	40020000 	.word	0x40020000

08007680 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800768e:	b2db      	uxtb	r3, r3
}
 8007690:	4618      	mov	r0, r3
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	bc80      	pop	{r7}
 8007698:	4770      	bx	lr

0800769a <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800769a:	b480      	push	{r7}
 800769c:	b085      	sub	sp, #20
 800769e:	af00      	add	r7, sp, #0
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	607a      	str	r2, [r7, #4]
 80076a6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b0:	2101      	movs	r1, #1
 80076b2:	fa01 f202 	lsl.w	r2, r1, r2
 80076b6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	2b10      	cmp	r3, #16
 80076c6:	d108      	bne.n	80076da <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80076d8:	e007      	b.n	80076ea <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	60da      	str	r2, [r3, #12]
}
 80076ea:	bf00      	nop
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bc80      	pop	{r7}
 80076f2:	4770      	bx	lr

080076f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b08b      	sub	sp, #44	; 0x2c
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80076fe:	2300      	movs	r3, #0
 8007700:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007702:	2300      	movs	r3, #0
 8007704:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007706:	e179      	b.n	80079fc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007708:	2201      	movs	r2, #1
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	fa02 f303 	lsl.w	r3, r2, r3
 8007710:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	69fa      	ldr	r2, [r7, #28]
 8007718:	4013      	ands	r3, r2
 800771a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	429a      	cmp	r2, r3
 8007722:	f040 8168 	bne.w	80079f6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	4a96      	ldr	r2, [pc, #600]	; (8007984 <HAL_GPIO_Init+0x290>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d05e      	beq.n	80077ee <HAL_GPIO_Init+0xfa>
 8007730:	4a94      	ldr	r2, [pc, #592]	; (8007984 <HAL_GPIO_Init+0x290>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d875      	bhi.n	8007822 <HAL_GPIO_Init+0x12e>
 8007736:	4a94      	ldr	r2, [pc, #592]	; (8007988 <HAL_GPIO_Init+0x294>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d058      	beq.n	80077ee <HAL_GPIO_Init+0xfa>
 800773c:	4a92      	ldr	r2, [pc, #584]	; (8007988 <HAL_GPIO_Init+0x294>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d86f      	bhi.n	8007822 <HAL_GPIO_Init+0x12e>
 8007742:	4a92      	ldr	r2, [pc, #584]	; (800798c <HAL_GPIO_Init+0x298>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d052      	beq.n	80077ee <HAL_GPIO_Init+0xfa>
 8007748:	4a90      	ldr	r2, [pc, #576]	; (800798c <HAL_GPIO_Init+0x298>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d869      	bhi.n	8007822 <HAL_GPIO_Init+0x12e>
 800774e:	4a90      	ldr	r2, [pc, #576]	; (8007990 <HAL_GPIO_Init+0x29c>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d04c      	beq.n	80077ee <HAL_GPIO_Init+0xfa>
 8007754:	4a8e      	ldr	r2, [pc, #568]	; (8007990 <HAL_GPIO_Init+0x29c>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d863      	bhi.n	8007822 <HAL_GPIO_Init+0x12e>
 800775a:	4a8e      	ldr	r2, [pc, #568]	; (8007994 <HAL_GPIO_Init+0x2a0>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d046      	beq.n	80077ee <HAL_GPIO_Init+0xfa>
 8007760:	4a8c      	ldr	r2, [pc, #560]	; (8007994 <HAL_GPIO_Init+0x2a0>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d85d      	bhi.n	8007822 <HAL_GPIO_Init+0x12e>
 8007766:	2b12      	cmp	r3, #18
 8007768:	d82a      	bhi.n	80077c0 <HAL_GPIO_Init+0xcc>
 800776a:	2b12      	cmp	r3, #18
 800776c:	d859      	bhi.n	8007822 <HAL_GPIO_Init+0x12e>
 800776e:	a201      	add	r2, pc, #4	; (adr r2, 8007774 <HAL_GPIO_Init+0x80>)
 8007770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007774:	080077ef 	.word	0x080077ef
 8007778:	080077c9 	.word	0x080077c9
 800777c:	080077db 	.word	0x080077db
 8007780:	0800781d 	.word	0x0800781d
 8007784:	08007823 	.word	0x08007823
 8007788:	08007823 	.word	0x08007823
 800778c:	08007823 	.word	0x08007823
 8007790:	08007823 	.word	0x08007823
 8007794:	08007823 	.word	0x08007823
 8007798:	08007823 	.word	0x08007823
 800779c:	08007823 	.word	0x08007823
 80077a0:	08007823 	.word	0x08007823
 80077a4:	08007823 	.word	0x08007823
 80077a8:	08007823 	.word	0x08007823
 80077ac:	08007823 	.word	0x08007823
 80077b0:	08007823 	.word	0x08007823
 80077b4:	08007823 	.word	0x08007823
 80077b8:	080077d1 	.word	0x080077d1
 80077bc:	080077e5 	.word	0x080077e5
 80077c0:	4a75      	ldr	r2, [pc, #468]	; (8007998 <HAL_GPIO_Init+0x2a4>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d013      	beq.n	80077ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80077c6:	e02c      	b.n	8007822 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	623b      	str	r3, [r7, #32]
          break;
 80077ce:	e029      	b.n	8007824 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	3304      	adds	r3, #4
 80077d6:	623b      	str	r3, [r7, #32]
          break;
 80077d8:	e024      	b.n	8007824 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	3308      	adds	r3, #8
 80077e0:	623b      	str	r3, [r7, #32]
          break;
 80077e2:	e01f      	b.n	8007824 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	330c      	adds	r3, #12
 80077ea:	623b      	str	r3, [r7, #32]
          break;
 80077ec:	e01a      	b.n	8007824 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d102      	bne.n	80077fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80077f6:	2304      	movs	r3, #4
 80077f8:	623b      	str	r3, [r7, #32]
          break;
 80077fa:	e013      	b.n	8007824 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d105      	bne.n	8007810 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007804:	2308      	movs	r3, #8
 8007806:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	69fa      	ldr	r2, [r7, #28]
 800780c:	611a      	str	r2, [r3, #16]
          break;
 800780e:	e009      	b.n	8007824 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007810:	2308      	movs	r3, #8
 8007812:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	69fa      	ldr	r2, [r7, #28]
 8007818:	615a      	str	r2, [r3, #20]
          break;
 800781a:	e003      	b.n	8007824 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800781c:	2300      	movs	r3, #0
 800781e:	623b      	str	r3, [r7, #32]
          break;
 8007820:	e000      	b.n	8007824 <HAL_GPIO_Init+0x130>
          break;
 8007822:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	2bff      	cmp	r3, #255	; 0xff
 8007828:	d801      	bhi.n	800782e <HAL_GPIO_Init+0x13a>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	e001      	b.n	8007832 <HAL_GPIO_Init+0x13e>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	3304      	adds	r3, #4
 8007832:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	2bff      	cmp	r3, #255	; 0xff
 8007838:	d802      	bhi.n	8007840 <HAL_GPIO_Init+0x14c>
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	e002      	b.n	8007846 <HAL_GPIO_Init+0x152>
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	3b08      	subs	r3, #8
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	210f      	movs	r1, #15
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	fa01 f303 	lsl.w	r3, r1, r3
 8007854:	43db      	mvns	r3, r3
 8007856:	401a      	ands	r2, r3
 8007858:	6a39      	ldr	r1, [r7, #32]
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	fa01 f303 	lsl.w	r3, r1, r3
 8007860:	431a      	orrs	r2, r3
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800786e:	2b00      	cmp	r3, #0
 8007870:	f000 80c1 	beq.w	80079f6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007874:	4b49      	ldr	r3, [pc, #292]	; (800799c <HAL_GPIO_Init+0x2a8>)
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	4a48      	ldr	r2, [pc, #288]	; (800799c <HAL_GPIO_Init+0x2a8>)
 800787a:	f043 0301 	orr.w	r3, r3, #1
 800787e:	6193      	str	r3, [r2, #24]
 8007880:	4b46      	ldr	r3, [pc, #280]	; (800799c <HAL_GPIO_Init+0x2a8>)
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	f003 0301 	and.w	r3, r3, #1
 8007888:	60bb      	str	r3, [r7, #8]
 800788a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800788c:	4a44      	ldr	r2, [pc, #272]	; (80079a0 <HAL_GPIO_Init+0x2ac>)
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	089b      	lsrs	r3, r3, #2
 8007892:	3302      	adds	r3, #2
 8007894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007898:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	f003 0303 	and.w	r3, r3, #3
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	220f      	movs	r2, #15
 80078a4:	fa02 f303 	lsl.w	r3, r2, r3
 80078a8:	43db      	mvns	r3, r3
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	4013      	ands	r3, r2
 80078ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a3c      	ldr	r2, [pc, #240]	; (80079a4 <HAL_GPIO_Init+0x2b0>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d01f      	beq.n	80078f8 <HAL_GPIO_Init+0x204>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a3b      	ldr	r2, [pc, #236]	; (80079a8 <HAL_GPIO_Init+0x2b4>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d019      	beq.n	80078f4 <HAL_GPIO_Init+0x200>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a3a      	ldr	r2, [pc, #232]	; (80079ac <HAL_GPIO_Init+0x2b8>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d013      	beq.n	80078f0 <HAL_GPIO_Init+0x1fc>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a39      	ldr	r2, [pc, #228]	; (80079b0 <HAL_GPIO_Init+0x2bc>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d00d      	beq.n	80078ec <HAL_GPIO_Init+0x1f8>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a38      	ldr	r2, [pc, #224]	; (80079b4 <HAL_GPIO_Init+0x2c0>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d007      	beq.n	80078e8 <HAL_GPIO_Init+0x1f4>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a37      	ldr	r2, [pc, #220]	; (80079b8 <HAL_GPIO_Init+0x2c4>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d101      	bne.n	80078e4 <HAL_GPIO_Init+0x1f0>
 80078e0:	2305      	movs	r3, #5
 80078e2:	e00a      	b.n	80078fa <HAL_GPIO_Init+0x206>
 80078e4:	2306      	movs	r3, #6
 80078e6:	e008      	b.n	80078fa <HAL_GPIO_Init+0x206>
 80078e8:	2304      	movs	r3, #4
 80078ea:	e006      	b.n	80078fa <HAL_GPIO_Init+0x206>
 80078ec:	2303      	movs	r3, #3
 80078ee:	e004      	b.n	80078fa <HAL_GPIO_Init+0x206>
 80078f0:	2302      	movs	r3, #2
 80078f2:	e002      	b.n	80078fa <HAL_GPIO_Init+0x206>
 80078f4:	2301      	movs	r3, #1
 80078f6:	e000      	b.n	80078fa <HAL_GPIO_Init+0x206>
 80078f8:	2300      	movs	r3, #0
 80078fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078fc:	f002 0203 	and.w	r2, r2, #3
 8007900:	0092      	lsls	r2, r2, #2
 8007902:	4093      	lsls	r3, r2
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	4313      	orrs	r3, r2
 8007908:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800790a:	4925      	ldr	r1, [pc, #148]	; (80079a0 <HAL_GPIO_Init+0x2ac>)
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	089b      	lsrs	r3, r3, #2
 8007910:	3302      	adds	r3, #2
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d006      	beq.n	8007932 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007924:	4b25      	ldr	r3, [pc, #148]	; (80079bc <HAL_GPIO_Init+0x2c8>)
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	4924      	ldr	r1, [pc, #144]	; (80079bc <HAL_GPIO_Init+0x2c8>)
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	4313      	orrs	r3, r2
 800792e:	608b      	str	r3, [r1, #8]
 8007930:	e006      	b.n	8007940 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007932:	4b22      	ldr	r3, [pc, #136]	; (80079bc <HAL_GPIO_Init+0x2c8>)
 8007934:	689a      	ldr	r2, [r3, #8]
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	43db      	mvns	r3, r3
 800793a:	4920      	ldr	r1, [pc, #128]	; (80079bc <HAL_GPIO_Init+0x2c8>)
 800793c:	4013      	ands	r3, r2
 800793e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d006      	beq.n	800795a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800794c:	4b1b      	ldr	r3, [pc, #108]	; (80079bc <HAL_GPIO_Init+0x2c8>)
 800794e:	68da      	ldr	r2, [r3, #12]
 8007950:	491a      	ldr	r1, [pc, #104]	; (80079bc <HAL_GPIO_Init+0x2c8>)
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	4313      	orrs	r3, r2
 8007956:	60cb      	str	r3, [r1, #12]
 8007958:	e006      	b.n	8007968 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800795a:	4b18      	ldr	r3, [pc, #96]	; (80079bc <HAL_GPIO_Init+0x2c8>)
 800795c:	68da      	ldr	r2, [r3, #12]
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	43db      	mvns	r3, r3
 8007962:	4916      	ldr	r1, [pc, #88]	; (80079bc <HAL_GPIO_Init+0x2c8>)
 8007964:	4013      	ands	r3, r2
 8007966:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d025      	beq.n	80079c0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007974:	4b11      	ldr	r3, [pc, #68]	; (80079bc <HAL_GPIO_Init+0x2c8>)
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	4910      	ldr	r1, [pc, #64]	; (80079bc <HAL_GPIO_Init+0x2c8>)
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	4313      	orrs	r3, r2
 800797e:	604b      	str	r3, [r1, #4]
 8007980:	e025      	b.n	80079ce <HAL_GPIO_Init+0x2da>
 8007982:	bf00      	nop
 8007984:	10320000 	.word	0x10320000
 8007988:	10310000 	.word	0x10310000
 800798c:	10220000 	.word	0x10220000
 8007990:	10210000 	.word	0x10210000
 8007994:	10120000 	.word	0x10120000
 8007998:	10110000 	.word	0x10110000
 800799c:	40021000 	.word	0x40021000
 80079a0:	40010000 	.word	0x40010000
 80079a4:	40010800 	.word	0x40010800
 80079a8:	40010c00 	.word	0x40010c00
 80079ac:	40011000 	.word	0x40011000
 80079b0:	40011400 	.word	0x40011400
 80079b4:	40011800 	.word	0x40011800
 80079b8:	40011c00 	.word	0x40011c00
 80079bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80079c0:	4b15      	ldr	r3, [pc, #84]	; (8007a18 <HAL_GPIO_Init+0x324>)
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	43db      	mvns	r3, r3
 80079c8:	4913      	ldr	r1, [pc, #76]	; (8007a18 <HAL_GPIO_Init+0x324>)
 80079ca:	4013      	ands	r3, r2
 80079cc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d006      	beq.n	80079e8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80079da:	4b0f      	ldr	r3, [pc, #60]	; (8007a18 <HAL_GPIO_Init+0x324>)
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	490e      	ldr	r1, [pc, #56]	; (8007a18 <HAL_GPIO_Init+0x324>)
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	600b      	str	r3, [r1, #0]
 80079e6:	e006      	b.n	80079f6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80079e8:	4b0b      	ldr	r3, [pc, #44]	; (8007a18 <HAL_GPIO_Init+0x324>)
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	43db      	mvns	r3, r3
 80079f0:	4909      	ldr	r1, [pc, #36]	; (8007a18 <HAL_GPIO_Init+0x324>)
 80079f2:	4013      	ands	r3, r2
 80079f4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	3301      	adds	r3, #1
 80079fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a02:	fa22 f303 	lsr.w	r3, r2, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f47f ae7e 	bne.w	8007708 <HAL_GPIO_Init+0x14>
  }
}
 8007a0c:	bf00      	nop
 8007a0e:	bf00      	nop
 8007a10:	372c      	adds	r7, #44	; 0x2c
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bc80      	pop	{r7}
 8007a16:	4770      	bx	lr
 8007a18:	40010400 	.word	0x40010400

08007a1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	887b      	ldrh	r3, [r7, #2]
 8007a2e:	4013      	ands	r3, r2
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a34:	2301      	movs	r3, #1
 8007a36:	73fb      	strb	r3, [r7, #15]
 8007a38:	e001      	b.n	8007a3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bc80      	pop	{r7}
 8007a48:	4770      	bx	lr

08007a4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b083      	sub	sp, #12
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	460b      	mov	r3, r1
 8007a54:	807b      	strh	r3, [r7, #2]
 8007a56:	4613      	mov	r3, r2
 8007a58:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a5a:	787b      	ldrb	r3, [r7, #1]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d003      	beq.n	8007a68 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a60:	887a      	ldrh	r2, [r7, #2]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007a66:	e003      	b.n	8007a70 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007a68:	887b      	ldrh	r3, [r7, #2]
 8007a6a:	041a      	lsls	r2, r3, #16
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	611a      	str	r2, [r3, #16]
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bc80      	pop	{r7}
 8007a78:	4770      	bx	lr
	...

08007a7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e12b      	b.n	8007ce6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d106      	bne.n	8007aa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7fa fe6c 	bl	8002780 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2224      	movs	r2, #36	; 0x24
 8007aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 0201 	bic.w	r2, r2, #1
 8007abe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ace:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ade:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007ae0:	f005 fa24 	bl	800cf2c <HAL_RCC_GetPCLK1Freq>
 8007ae4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	4a81      	ldr	r2, [pc, #516]	; (8007cf0 <HAL_I2C_Init+0x274>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d807      	bhi.n	8007b00 <HAL_I2C_Init+0x84>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4a80      	ldr	r2, [pc, #512]	; (8007cf4 <HAL_I2C_Init+0x278>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	bf94      	ite	ls
 8007af8:	2301      	movls	r3, #1
 8007afa:	2300      	movhi	r3, #0
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	e006      	b.n	8007b0e <HAL_I2C_Init+0x92>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4a7d      	ldr	r2, [pc, #500]	; (8007cf8 <HAL_I2C_Init+0x27c>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	bf94      	ite	ls
 8007b08:	2301      	movls	r3, #1
 8007b0a:	2300      	movhi	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e0e7      	b.n	8007ce6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4a78      	ldr	r2, [pc, #480]	; (8007cfc <HAL_I2C_Init+0x280>)
 8007b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b1e:	0c9b      	lsrs	r3, r3, #18
 8007b20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	6a1b      	ldr	r3, [r3, #32]
 8007b3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	4a6a      	ldr	r2, [pc, #424]	; (8007cf0 <HAL_I2C_Init+0x274>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d802      	bhi.n	8007b50 <HAL_I2C_Init+0xd4>
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	e009      	b.n	8007b64 <HAL_I2C_Init+0xe8>
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007b56:	fb02 f303 	mul.w	r3, r2, r3
 8007b5a:	4a69      	ldr	r2, [pc, #420]	; (8007d00 <HAL_I2C_Init+0x284>)
 8007b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b60:	099b      	lsrs	r3, r3, #6
 8007b62:	3301      	adds	r3, #1
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	6812      	ldr	r2, [r2, #0]
 8007b68:	430b      	orrs	r3, r1
 8007b6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007b76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	495c      	ldr	r1, [pc, #368]	; (8007cf0 <HAL_I2C_Init+0x274>)
 8007b80:	428b      	cmp	r3, r1
 8007b82:	d819      	bhi.n	8007bb8 <HAL_I2C_Init+0x13c>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	1e59      	subs	r1, r3, #1
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	005b      	lsls	r3, r3, #1
 8007b8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b92:	1c59      	adds	r1, r3, #1
 8007b94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007b98:	400b      	ands	r3, r1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00a      	beq.n	8007bb4 <HAL_I2C_Init+0x138>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	1e59      	subs	r1, r3, #1
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	005b      	lsls	r3, r3, #1
 8007ba8:	fbb1 f3f3 	udiv	r3, r1, r3
 8007bac:	3301      	adds	r3, #1
 8007bae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bb2:	e051      	b.n	8007c58 <HAL_I2C_Init+0x1dc>
 8007bb4:	2304      	movs	r3, #4
 8007bb6:	e04f      	b.n	8007c58 <HAL_I2C_Init+0x1dc>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d111      	bne.n	8007be4 <HAL_I2C_Init+0x168>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	1e58      	subs	r0, r3, #1
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6859      	ldr	r1, [r3, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	005b      	lsls	r3, r3, #1
 8007bcc:	440b      	add	r3, r1
 8007bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	bf0c      	ite	eq
 8007bdc:	2301      	moveq	r3, #1
 8007bde:	2300      	movne	r3, #0
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	e012      	b.n	8007c0a <HAL_I2C_Init+0x18e>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	1e58      	subs	r0, r3, #1
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6859      	ldr	r1, [r3, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	440b      	add	r3, r1
 8007bf2:	0099      	lsls	r1, r3, #2
 8007bf4:	440b      	add	r3, r1
 8007bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	bf0c      	ite	eq
 8007c04:	2301      	moveq	r3, #1
 8007c06:	2300      	movne	r3, #0
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <HAL_I2C_Init+0x196>
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e022      	b.n	8007c58 <HAL_I2C_Init+0x1dc>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10e      	bne.n	8007c38 <HAL_I2C_Init+0x1bc>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	1e58      	subs	r0, r3, #1
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6859      	ldr	r1, [r3, #4]
 8007c22:	460b      	mov	r3, r1
 8007c24:	005b      	lsls	r3, r3, #1
 8007c26:	440b      	add	r3, r1
 8007c28:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c36:	e00f      	b.n	8007c58 <HAL_I2C_Init+0x1dc>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	1e58      	subs	r0, r3, #1
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6859      	ldr	r1, [r3, #4]
 8007c40:	460b      	mov	r3, r1
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	440b      	add	r3, r1
 8007c46:	0099      	lsls	r1, r3, #2
 8007c48:	440b      	add	r3, r1
 8007c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c4e:	3301      	adds	r3, #1
 8007c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c58:	6879      	ldr	r1, [r7, #4]
 8007c5a:	6809      	ldr	r1, [r1, #0]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	69da      	ldr	r2, [r3, #28]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	431a      	orrs	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	430a      	orrs	r2, r1
 8007c7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007c86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	6911      	ldr	r1, [r2, #16]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	68d2      	ldr	r2, [r2, #12]
 8007c92:	4311      	orrs	r1, r2
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	6812      	ldr	r2, [r2, #0]
 8007c98:	430b      	orrs	r3, r1
 8007c9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	695a      	ldr	r2, [r3, #20]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	431a      	orrs	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	430a      	orrs	r2, r1
 8007cb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f042 0201 	orr.w	r2, r2, #1
 8007cc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2220      	movs	r2, #32
 8007cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	000186a0 	.word	0x000186a0
 8007cf4:	001e847f 	.word	0x001e847f
 8007cf8:	003d08ff 	.word	0x003d08ff
 8007cfc:	431bde83 	.word	0x431bde83
 8007d00:	10624dd3 	.word	0x10624dd3

08007d04 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d16:	2b80      	cmp	r3, #128	; 0x80
 8007d18:	d103      	bne.n	8007d22 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	611a      	str	r2, [r3, #16]
  }
}
 8007d22:	bf00      	nop
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bc80      	pop	{r7}
 8007d2a:	4770      	bx	lr

08007d2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b088      	sub	sp, #32
 8007d30:	af02      	add	r7, sp, #8
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	4608      	mov	r0, r1
 8007d36:	4611      	mov	r1, r2
 8007d38:	461a      	mov	r2, r3
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	817b      	strh	r3, [r7, #10]
 8007d3e:	460b      	mov	r3, r1
 8007d40:	813b      	strh	r3, [r7, #8]
 8007d42:	4613      	mov	r3, r2
 8007d44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007d46:	f7fe fa83 	bl	8006250 <HAL_GetTick>
 8007d4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b20      	cmp	r3, #32
 8007d56:	f040 80d9 	bne.w	8007f0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	2319      	movs	r3, #25
 8007d60:	2201      	movs	r2, #1
 8007d62:	496d      	ldr	r1, [pc, #436]	; (8007f18 <HAL_I2C_Mem_Write+0x1ec>)
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f002 fd25 	bl	800a7b4 <I2C_WaitOnFlagUntilTimeout>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007d70:	2302      	movs	r3, #2
 8007d72:	e0cc      	b.n	8007f0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d101      	bne.n	8007d82 <HAL_I2C_Mem_Write+0x56>
 8007d7e:	2302      	movs	r3, #2
 8007d80:	e0c5      	b.n	8007f0e <HAL_I2C_Mem_Write+0x1e2>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d007      	beq.n	8007da8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f042 0201 	orr.w	r2, r2, #1
 8007da6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007db6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2221      	movs	r2, #33	; 0x21
 8007dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2240      	movs	r2, #64	; 0x40
 8007dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6a3a      	ldr	r2, [r7, #32]
 8007dd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	4a4d      	ldr	r2, [pc, #308]	; (8007f1c <HAL_I2C_Mem_Write+0x1f0>)
 8007de8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007dea:	88f8      	ldrh	r0, [r7, #6]
 8007dec:	893a      	ldrh	r2, [r7, #8]
 8007dee:	8979      	ldrh	r1, [r7, #10]
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	9301      	str	r3, [sp, #4]
 8007df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	4603      	mov	r3, r0
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f002 f9a8 	bl	800a150 <I2C_RequestMemoryWrite>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d052      	beq.n	8007eac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e081      	b.n	8007f0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f002 fdea 	bl	800a9e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00d      	beq.n	8007e36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1e:	2b04      	cmp	r3, #4
 8007e20:	d107      	bne.n	8007e32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e06b      	b.n	8007f0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	781a      	ldrb	r2, [r3, #0]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e46:	1c5a      	adds	r2, r3, #1
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e50:	3b01      	subs	r3, #1
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	695b      	ldr	r3, [r3, #20]
 8007e6c:	f003 0304 	and.w	r3, r3, #4
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	d11b      	bne.n	8007eac <HAL_I2C_Mem_Write+0x180>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d017      	beq.n	8007eac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e80:	781a      	ldrb	r2, [r3, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8c:	1c5a      	adds	r2, r3, #1
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e96:	3b01      	subs	r3, #1
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1aa      	bne.n	8007e0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f002 fddd 	bl	800aa78 <I2C_WaitOnBTFFlagUntilTimeout>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00d      	beq.n	8007ee0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec8:	2b04      	cmp	r3, #4
 8007eca:	d107      	bne.n	8007edc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007eda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e016      	b.n	8007f0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007eee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	e000      	b.n	8007f0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007f0c:	2302      	movs	r3, #2
  }
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3718      	adds	r7, #24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	00100002 	.word	0x00100002
 8007f1c:	ffff0000 	.word	0xffff0000

08007f20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b08c      	sub	sp, #48	; 0x30
 8007f24:	af02      	add	r7, sp, #8
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	4608      	mov	r0, r1
 8007f2a:	4611      	mov	r1, r2
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	4603      	mov	r3, r0
 8007f30:	817b      	strh	r3, [r7, #10]
 8007f32:	460b      	mov	r3, r1
 8007f34:	813b      	strh	r3, [r7, #8]
 8007f36:	4613      	mov	r3, r2
 8007f38:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007f3e:	f7fe f987 	bl	8006250 <HAL_GetTick>
 8007f42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	2b20      	cmp	r3, #32
 8007f4e:	f040 8244 	bne.w	80083da <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	2319      	movs	r3, #25
 8007f58:	2201      	movs	r2, #1
 8007f5a:	4982      	ldr	r1, [pc, #520]	; (8008164 <HAL_I2C_Mem_Read+0x244>)
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f002 fc29 	bl	800a7b4 <I2C_WaitOnFlagUntilTimeout>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e237      	b.n	80083dc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d101      	bne.n	8007f7a <HAL_I2C_Mem_Read+0x5a>
 8007f76:	2302      	movs	r3, #2
 8007f78:	e230      	b.n	80083dc <HAL_I2C_Mem_Read+0x4bc>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0301 	and.w	r3, r3, #1
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d007      	beq.n	8007fa0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f042 0201 	orr.w	r2, r2, #1
 8007f9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2222      	movs	r2, #34	; 0x22
 8007fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2240      	movs	r2, #64	; 0x40
 8007fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4a62      	ldr	r2, [pc, #392]	; (8008168 <HAL_I2C_Mem_Read+0x248>)
 8007fe0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007fe2:	88f8      	ldrh	r0, [r7, #6]
 8007fe4:	893a      	ldrh	r2, [r7, #8]
 8007fe6:	8979      	ldrh	r1, [r7, #10]
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	9301      	str	r3, [sp, #4]
 8007fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fee:	9300      	str	r3, [sp, #0]
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f002 f942 	bl	800a27c <I2C_RequestMemoryRead>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e1ec      	b.n	80083dc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008006:	2b00      	cmp	r3, #0
 8008008:	d113      	bne.n	8008032 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800800a:	2300      	movs	r3, #0
 800800c:	61fb      	str	r3, [r7, #28]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	695b      	ldr	r3, [r3, #20]
 8008014:	61fb      	str	r3, [r7, #28]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	61fb      	str	r3, [r7, #28]
 800801e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800802e:	601a      	str	r2, [r3, #0]
 8008030:	e1c0      	b.n	80083b4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008036:	2b01      	cmp	r3, #1
 8008038:	d11e      	bne.n	8008078 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008048:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800804a:	b672      	cpsid	i
}
 800804c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800804e:	2300      	movs	r3, #0
 8008050:	61bb      	str	r3, [r7, #24]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	695b      	ldr	r3, [r3, #20]
 8008058:	61bb      	str	r3, [r7, #24]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	61bb      	str	r3, [r7, #24]
 8008062:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008072:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008074:	b662      	cpsie	i
}
 8008076:	e035      	b.n	80080e4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800807c:	2b02      	cmp	r3, #2
 800807e:	d11e      	bne.n	80080be <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800808e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008090:	b672      	cpsid	i
}
 8008092:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008094:	2300      	movs	r3, #0
 8008096:	617b      	str	r3, [r7, #20]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	695b      	ldr	r3, [r3, #20]
 800809e:	617b      	str	r3, [r7, #20]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	617b      	str	r3, [r7, #20]
 80080a8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80080ba:	b662      	cpsie	i
}
 80080bc:	e012      	b.n	80080e4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080cc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080ce:	2300      	movs	r3, #0
 80080d0:	613b      	str	r3, [r7, #16]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	695b      	ldr	r3, [r3, #20]
 80080d8:	613b      	str	r3, [r7, #16]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	613b      	str	r3, [r7, #16]
 80080e2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80080e4:	e166      	b.n	80083b4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ea:	2b03      	cmp	r3, #3
 80080ec:	f200 811f 	bhi.w	800832e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d123      	bne.n	8008140 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f002 fd35 	bl	800ab6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e167      	b.n	80083dc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	691a      	ldr	r2, [r3, #16]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008116:	b2d2      	uxtb	r2, r2
 8008118:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811e:	1c5a      	adds	r2, r3, #1
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008128:	3b01      	subs	r3, #1
 800812a:	b29a      	uxth	r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008134:	b29b      	uxth	r3, r3
 8008136:	3b01      	subs	r3, #1
 8008138:	b29a      	uxth	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800813e:	e139      	b.n	80083b4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008144:	2b02      	cmp	r3, #2
 8008146:	d152      	bne.n	80081ee <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814e:	2200      	movs	r2, #0
 8008150:	4906      	ldr	r1, [pc, #24]	; (800816c <HAL_I2C_Mem_Read+0x24c>)
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f002 fb2e 	bl	800a7b4 <I2C_WaitOnFlagUntilTimeout>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d008      	beq.n	8008170 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e13c      	b.n	80083dc <HAL_I2C_Mem_Read+0x4bc>
 8008162:	bf00      	nop
 8008164:	00100002 	.word	0x00100002
 8008168:	ffff0000 	.word	0xffff0000
 800816c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8008170:	b672      	cpsid	i
}
 8008172:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008182:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	691a      	ldr	r2, [r3, #16]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818e:	b2d2      	uxtb	r2, r2
 8008190:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081a0:	3b01      	subs	r3, #1
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	3b01      	subs	r3, #1
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80081b6:	b662      	cpsie	i
}
 80081b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	691a      	ldr	r2, [r3, #16]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c4:	b2d2      	uxtb	r2, r2
 80081c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081cc:	1c5a      	adds	r2, r3, #1
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081d6:	3b01      	subs	r3, #1
 80081d8:	b29a      	uxth	r2, r3
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	3b01      	subs	r3, #1
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80081ec:	e0e2      	b.n	80083b4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80081ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f4:	2200      	movs	r2, #0
 80081f6:	497b      	ldr	r1, [pc, #492]	; (80083e4 <HAL_I2C_Mem_Read+0x4c4>)
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f002 fadb 	bl	800a7b4 <I2C_WaitOnFlagUntilTimeout>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e0e9      	b.n	80083dc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008216:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008218:	b672      	cpsid	i
}
 800821a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	691a      	ldr	r2, [r3, #16]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008226:	b2d2      	uxtb	r2, r2
 8008228:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822e:	1c5a      	adds	r2, r3, #1
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008238:	3b01      	subs	r3, #1
 800823a:	b29a      	uxth	r2, r3
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008244:	b29b      	uxth	r3, r3
 8008246:	3b01      	subs	r3, #1
 8008248:	b29a      	uxth	r2, r3
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800824e:	4b66      	ldr	r3, [pc, #408]	; (80083e8 <HAL_I2C_Mem_Read+0x4c8>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	08db      	lsrs	r3, r3, #3
 8008254:	4a65      	ldr	r2, [pc, #404]	; (80083ec <HAL_I2C_Mem_Read+0x4cc>)
 8008256:	fba2 2303 	umull	r2, r3, r2, r3
 800825a:	0a1a      	lsrs	r2, r3, #8
 800825c:	4613      	mov	r3, r2
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	00da      	lsls	r2, r3, #3
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8008268:	6a3b      	ldr	r3, [r7, #32]
 800826a:	3b01      	subs	r3, #1
 800826c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800826e:	6a3b      	ldr	r3, [r7, #32]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d118      	bne.n	80082a6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2220      	movs	r2, #32
 800827e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828e:	f043 0220 	orr.w	r2, r3, #32
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8008296:	b662      	cpsie	i
}
 8008298:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e09a      	b.n	80083dc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	695b      	ldr	r3, [r3, #20]
 80082ac:	f003 0304 	and.w	r3, r3, #4
 80082b0:	2b04      	cmp	r3, #4
 80082b2:	d1d9      	bne.n	8008268 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	691a      	ldr	r2, [r3, #16]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ce:	b2d2      	uxtb	r2, r2
 80082d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d6:	1c5a      	adds	r2, r3, #1
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082e0:	3b01      	subs	r3, #1
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	3b01      	subs	r3, #1
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80082f6:	b662      	cpsie	i
}
 80082f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	691a      	ldr	r2, [r3, #16]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008304:	b2d2      	uxtb	r2, r2
 8008306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830c:	1c5a      	adds	r2, r3, #1
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008316:	3b01      	subs	r3, #1
 8008318:	b29a      	uxth	r2, r3
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008322:	b29b      	uxth	r3, r3
 8008324:	3b01      	subs	r3, #1
 8008326:	b29a      	uxth	r2, r3
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800832c:	e042      	b.n	80083b4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800832e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008330:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f002 fc1a 	bl	800ab6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e04c      	b.n	80083dc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	691a      	ldr	r2, [r3, #16]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834c:	b2d2      	uxtb	r2, r2
 800834e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008354:	1c5a      	adds	r2, r3, #1
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800835e:	3b01      	subs	r3, #1
 8008360:	b29a      	uxth	r2, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800836a:	b29b      	uxth	r3, r3
 800836c:	3b01      	subs	r3, #1
 800836e:	b29a      	uxth	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	f003 0304 	and.w	r3, r3, #4
 800837e:	2b04      	cmp	r3, #4
 8008380:	d118      	bne.n	80083b4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	691a      	ldr	r2, [r3, #16]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838c:	b2d2      	uxtb	r2, r2
 800838e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008394:	1c5a      	adds	r2, r3, #1
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800839e:	3b01      	subs	r3, #1
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	3b01      	subs	r3, #1
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f47f ae94 	bne.w	80080e6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2220      	movs	r2, #32
 80083c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80083d6:	2300      	movs	r3, #0
 80083d8:	e000      	b.n	80083dc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80083da:	2302      	movs	r3, #2
  }
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3728      	adds	r7, #40	; 0x28
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	00010004 	.word	0x00010004
 80083e8:	2000068c 	.word	0x2000068c
 80083ec:	14f8b589 	.word	0x14f8b589

080083f0 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b08a      	sub	sp, #40	; 0x28
 80083f4:	af02      	add	r7, sp, #8
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	4608      	mov	r0, r1
 80083fa:	4611      	mov	r1, r2
 80083fc:	461a      	mov	r2, r3
 80083fe:	4603      	mov	r3, r0
 8008400:	817b      	strh	r3, [r7, #10]
 8008402:	460b      	mov	r3, r1
 8008404:	813b      	strh	r3, [r7, #8]
 8008406:	4613      	mov	r3, r2
 8008408:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800840a:	2300      	movs	r3, #0
 800840c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800840e:	f7fd ff1f 	bl	8006250 <HAL_GetTick>
 8008412:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b20      	cmp	r3, #32
 800841e:	f040 812e 	bne.w	800867e <HAL_I2C_Mem_Write_DMA+0x28e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8008422:	4b99      	ldr	r3, [pc, #612]	; (8008688 <HAL_I2C_Mem_Write_DMA+0x298>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	08db      	lsrs	r3, r3, #3
 8008428:	4a98      	ldr	r2, [pc, #608]	; (800868c <HAL_I2C_Mem_Write_DMA+0x29c>)
 800842a:	fba2 2303 	umull	r2, r3, r2, r3
 800842e:	0a1a      	lsrs	r2, r3, #8
 8008430:	4613      	mov	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	009a      	lsls	r2, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	3b01      	subs	r3, #1
 8008440:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d112      	bne.n	800846e <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2220      	movs	r2, #32
 8008452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008462:	f043 0220 	orr.w	r2, r3, #32
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 800846a:	2302      	movs	r3, #2
 800846c:	e108      	b.n	8008680 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	f003 0302 	and.w	r3, r3, #2
 8008478:	2b02      	cmp	r3, #2
 800847a:	d0df      	beq.n	800843c <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008482:	2b01      	cmp	r3, #1
 8008484:	d101      	bne.n	800848a <HAL_I2C_Mem_Write_DMA+0x9a>
 8008486:	2302      	movs	r3, #2
 8008488:	e0fa      	b.n	8008680 <HAL_I2C_Mem_Write_DMA+0x290>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0301 	and.w	r3, r3, #1
 800849c:	2b01      	cmp	r3, #1
 800849e:	d007      	beq.n	80084b0 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f042 0201 	orr.w	r2, r2, #1
 80084ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80084be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2221      	movs	r2, #33	; 0x21
 80084c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2240      	movs	r2, #64	; 0x40
 80084cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2200      	movs	r2, #0
 80084d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80084e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	4a68      	ldr	r2, [pc, #416]	; (8008690 <HAL_I2C_Mem_Write_DMA+0x2a0>)
 80084f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80084f2:	897a      	ldrh	r2, [r7, #10]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80084f8:	893a      	ldrh	r2, [r7, #8]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80084fe:	88fa      	ldrh	r2, [r7, #6]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800850e:	2b00      	cmp	r3, #0
 8008510:	f000 80a1 	beq.w	8008656 <HAL_I2C_Mem_Write_DMA+0x266>
    {
      if (hi2c->hdmatx != NULL)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008518:	2b00      	cmp	r3, #0
 800851a:	d022      	beq.n	8008562 <HAL_I2C_Mem_Write_DMA+0x172>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008520:	4a5c      	ldr	r2, [pc, #368]	; (8008694 <HAL_I2C_Mem_Write_DMA+0x2a4>)
 8008522:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008528:	4a5b      	ldr	r2, [pc, #364]	; (8008698 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 800852a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008530:	2200      	movs	r2, #0
 8008532:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008538:	2200      	movs	r2, #0
 800853a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008544:	4619      	mov	r1, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3310      	adds	r3, #16
 800854c:	461a      	mov	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008552:	f7fe fcf1 	bl	8006f38 <HAL_DMA_Start_IT>
 8008556:	4603      	mov	r3, r0
 8008558:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800855a:	7efb      	ldrb	r3, [r7, #27]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d166      	bne.n	800862e <HAL_I2C_Mem_Write_DMA+0x23e>
 8008560:	e013      	b.n	800858a <HAL_I2C_Mem_Write_DMA+0x19a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2220      	movs	r2, #32
 8008566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008576:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e07a      	b.n	8008680 <HAL_I2C_Mem_Write_DMA+0x290>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800858a:	88f8      	ldrh	r0, [r7, #6]
 800858c:	893a      	ldrh	r2, [r7, #8]
 800858e:	8979      	ldrh	r1, [r7, #10]
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	9301      	str	r3, [sp, #4]
 8008594:	2323      	movs	r3, #35	; 0x23
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	4603      	mov	r3, r0
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f001 fdd8 	bl	800a150 <I2C_RequestMemoryWrite>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d022      	beq.n	80085ec <HAL_I2C_Mem_Write_DMA+0x1fc>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7fe fd24 	bl	8006ff8 <HAL_DMA_Abort_IT>
 80085b0:	4603      	mov	r3, r0
 80085b2:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b8:	2200      	movs	r2, #0
 80085ba:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085ca:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f022 0201 	bic.w	r2, r2, #1
 80085e6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e049      	b.n	8008680 <HAL_I2C_Mem_Write_DMA+0x290>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085ec:	2300      	movs	r3, #0
 80085ee:	613b      	str	r3, [r7, #16]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	613b      	str	r3, [r7, #16]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	613b      	str	r3, [r7, #16]
 8008600:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	685a      	ldr	r2, [r3, #4]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008618:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	685a      	ldr	r2, [r3, #4]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008628:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800862a:	2300      	movs	r3, #0
 800862c:	e028      	b.n	8008680 <HAL_I2C_Mem_Write_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2220      	movs	r2, #32
 8008632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2200      	movs	r2, #0
 800863a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008642:	f043 0210 	orr.w	r2, r3, #16
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e014      	b.n	8008680 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2220      	movs	r2, #32
 800865a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	e000      	b.n	8008680 <HAL_I2C_Mem_Write_DMA+0x290>
    }
  }
  else
  {
    return HAL_BUSY;
 800867e:	2302      	movs	r3, #2
  }
}
 8008680:	4618      	mov	r0, r3
 8008682:	3720      	adds	r7, #32
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	2000068c 	.word	0x2000068c
 800868c:	14f8b589 	.word	0x14f8b589
 8008690:	ffff0000 	.word	0xffff0000
 8008694:	0800a44d 	.word	0x0800a44d
 8008698:	0800a5f7 	.word	0x0800a5f7

0800869c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b08c      	sub	sp, #48	; 0x30
 80086a0:	af02      	add	r7, sp, #8
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	4608      	mov	r0, r1
 80086a6:	4611      	mov	r1, r2
 80086a8:	461a      	mov	r2, r3
 80086aa:	4603      	mov	r3, r0
 80086ac:	817b      	strh	r3, [r7, #10]
 80086ae:	460b      	mov	r3, r1
 80086b0:	813b      	strh	r3, [r7, #8]
 80086b2:	4613      	mov	r3, r2
 80086b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80086b6:	f7fd fdcb 	bl	8006250 <HAL_GetTick>
 80086ba:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 80086bc:	2300      	movs	r3, #0
 80086be:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	2b20      	cmp	r3, #32
 80086ca:	f040 8168 	bne.w	800899e <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80086ce:	4b98      	ldr	r3, [pc, #608]	; (8008930 <HAL_I2C_Mem_Read_DMA+0x294>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	08db      	lsrs	r3, r3, #3
 80086d4:	4a97      	ldr	r2, [pc, #604]	; (8008934 <HAL_I2C_Mem_Read_DMA+0x298>)
 80086d6:	fba2 2303 	umull	r2, r3, r2, r3
 80086da:	0a1a      	lsrs	r2, r3, #8
 80086dc:	4613      	mov	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	009a      	lsls	r2, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	3b01      	subs	r3, #1
 80086ec:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d112      	bne.n	800871a <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2220      	movs	r2, #32
 80086fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870e:	f043 0220 	orr.w	r2, r3, #32
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8008716:	2302      	movs	r3, #2
 8008718:	e142      	b.n	80089a0 <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	f003 0302 	and.w	r3, r3, #2
 8008724:	2b02      	cmp	r3, #2
 8008726:	d0df      	beq.n	80086e8 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800872e:	2b01      	cmp	r3, #1
 8008730:	d101      	bne.n	8008736 <HAL_I2C_Mem_Read_DMA+0x9a>
 8008732:	2302      	movs	r3, #2
 8008734:	e134      	b.n	80089a0 <HAL_I2C_Mem_Read_DMA+0x304>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0301 	and.w	r3, r3, #1
 8008748:	2b01      	cmp	r3, #1
 800874a:	d007      	beq.n	800875c <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f042 0201 	orr.w	r2, r2, #1
 800875a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800876a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2222      	movs	r2, #34	; 0x22
 8008770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2240      	movs	r2, #64	; 0x40
 8008778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008786:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800878c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008792:	b29a      	uxth	r2, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4a67      	ldr	r2, [pc, #412]	; (8008938 <HAL_I2C_Mem_Read_DMA+0x29c>)
 800879c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800879e:	897a      	ldrh	r2, [r7, #10]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80087a4:	893a      	ldrh	r2, [r7, #8]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80087aa:	88fa      	ldrh	r2, [r7, #6]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f000 80c2 	beq.w	8008944 <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d024      	beq.n	8008812 <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087cc:	4a5b      	ldr	r2, [pc, #364]	; (800893c <HAL_I2C_Mem_Read_DMA+0x2a0>)
 80087ce:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d4:	4a5a      	ldr	r2, [pc, #360]	; (8008940 <HAL_I2C_Mem_Read_DMA+0x2a4>)
 80087d6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087dc:	2200      	movs	r2, #0
 80087de:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e4:	2200      	movs	r2, #0
 80087e6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	3310      	adds	r3, #16
 80087f2:	4619      	mov	r1, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	461a      	mov	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087fe:	f7fe fb9b 	bl	8006f38 <HAL_DMA_Start_IT>
 8008802:	4603      	mov	r3, r0
 8008804:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8008808:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800880c:	2b00      	cmp	r3, #0
 800880e:	d17b      	bne.n	8008908 <HAL_I2C_Mem_Read_DMA+0x26c>
 8008810:	e013      	b.n	800883a <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2220      	movs	r2, #32
 8008816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008826:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e0b2      	b.n	80089a0 <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800883a:	88f8      	ldrh	r0, [r7, #6]
 800883c:	893a      	ldrh	r2, [r7, #8]
 800883e:	8979      	ldrh	r1, [r7, #10]
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008842:	9301      	str	r3, [sp, #4]
 8008844:	2323      	movs	r3, #35	; 0x23
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	4603      	mov	r3, r0
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f001 fd16 	bl	800a27c <I2C_RequestMemoryRead>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d023      	beq.n	800889e <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885a:	4618      	mov	r0, r3
 800885c:	f7fe fbcc 	bl	8006ff8 <HAL_DMA_Abort_IT>
 8008860:	4603      	mov	r3, r0
 8008862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886a:	2200      	movs	r2, #0
 800886c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800887c:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f022 0201 	bic.w	r2, r2, #1
 8008898:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e080      	b.n	80089a0 <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d108      	bne.n	80088b8 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088b4:	601a      	str	r2, [r3, #0]
 80088b6:	e007      	b.n	80088c8 <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	685a      	ldr	r2, [r3, #4]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80088c6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088c8:	2300      	movs	r3, #0
 80088ca:	61bb      	str	r3, [r7, #24]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	61bb      	str	r3, [r7, #24]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	61bb      	str	r3, [r7, #24]
 80088dc:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	685a      	ldr	r2, [r3, #4]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088f4:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	685a      	ldr	r2, [r3, #4]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008904:	605a      	str	r2, [r3, #4]
 8008906:	e048      	b.n	800899a <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2220      	movs	r2, #32
 800890c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891c:	f043 0210 	orr.w	r2, r3, #16
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2200      	movs	r2, #0
 8008928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	e037      	b.n	80089a0 <HAL_I2C_Mem_Read_DMA+0x304>
 8008930:	2000068c 	.word	0x2000068c
 8008934:	14f8b589 	.word	0x14f8b589
 8008938:	ffff0000 	.word	0xffff0000
 800893c:	0800a44d 	.word	0x0800a44d
 8008940:	0800a5f7 	.word	0x0800a5f7
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8008944:	88f8      	ldrh	r0, [r7, #6]
 8008946:	893a      	ldrh	r2, [r7, #8]
 8008948:	8979      	ldrh	r1, [r7, #10]
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	9301      	str	r3, [sp, #4]
 800894e:	2323      	movs	r3, #35	; 0x23
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	4603      	mov	r3, r0
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f001 fc91 	bl	800a27c <I2C_RequestMemoryRead>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d001      	beq.n	8008964 <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e01d      	b.n	80089a0 <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008964:	2300      	movs	r3, #0
 8008966:	617b      	str	r3, [r7, #20]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	617b      	str	r3, [r7, #20]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	617b      	str	r3, [r7, #20]
 8008978:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008988:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2220      	movs	r2, #32
 800898e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	e000      	b.n	80089a0 <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 800899e:	2302      	movs	r3, #2
  }
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3728      	adds	r7, #40	; 0x28
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b08a      	sub	sp, #40	; 0x28
 80089ac:	af02      	add	r7, sp, #8
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	607a      	str	r2, [r7, #4]
 80089b2:	603b      	str	r3, [r7, #0]
 80089b4:	460b      	mov	r3, r1
 80089b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80089b8:	f7fd fc4a 	bl	8006250 <HAL_GetTick>
 80089bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80089be:	2300      	movs	r3, #0
 80089c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b20      	cmp	r3, #32
 80089cc:	f040 8111 	bne.w	8008bf2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	2319      	movs	r3, #25
 80089d6:	2201      	movs	r2, #1
 80089d8:	4988      	ldr	r1, [pc, #544]	; (8008bfc <HAL_I2C_IsDeviceReady+0x254>)
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f001 feea 	bl	800a7b4 <I2C_WaitOnFlagUntilTimeout>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80089e6:	2302      	movs	r3, #2
 80089e8:	e104      	b.n	8008bf4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d101      	bne.n	80089f8 <HAL_I2C_IsDeviceReady+0x50>
 80089f4:	2302      	movs	r3, #2
 80089f6:	e0fd      	b.n	8008bf4 <HAL_I2C_IsDeviceReady+0x24c>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f003 0301 	and.w	r3, r3, #1
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d007      	beq.n	8008a1e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f042 0201 	orr.w	r2, r2, #1
 8008a1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2224      	movs	r2, #36	; 0x24
 8008a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	4a70      	ldr	r2, [pc, #448]	; (8008c00 <HAL_I2C_IsDeviceReady+0x258>)
 8008a40:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a50:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	f001 fea8 	bl	800a7b4 <I2C_WaitOnFlagUntilTimeout>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00d      	beq.n	8008a86 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a78:	d103      	bne.n	8008a82 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a80:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e0b6      	b.n	8008bf4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008a86:	897b      	ldrh	r3, [r7, #10]
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008a94:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8008a96:	f7fd fbdb 	bl	8006250 <HAL_GetTick>
 8008a9a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	f003 0302 	and.w	r3, r3, #2
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	bf0c      	ite	eq
 8008aaa:	2301      	moveq	r3, #1
 8008aac:	2300      	movne	r3, #0
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	695b      	ldr	r3, [r3, #20]
 8008ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ac0:	bf0c      	ite	eq
 8008ac2:	2301      	moveq	r3, #1
 8008ac4:	2300      	movne	r3, #0
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008aca:	e025      	b.n	8008b18 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008acc:	f7fd fbc0 	bl	8006250 <HAL_GetTick>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d302      	bcc.n	8008ae2 <HAL_I2C_IsDeviceReady+0x13a>
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d103      	bne.n	8008aea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	22a0      	movs	r2, #160	; 0xa0
 8008ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	695b      	ldr	r3, [r3, #20]
 8008af0:	f003 0302 	and.w	r3, r3, #2
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	bf0c      	ite	eq
 8008af8:	2301      	moveq	r3, #1
 8008afa:	2300      	movne	r3, #0
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b0e:	bf0c      	ite	eq
 8008b10:	2301      	moveq	r3, #1
 8008b12:	2300      	movne	r3, #0
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2ba0      	cmp	r3, #160	; 0xa0
 8008b22:	d005      	beq.n	8008b30 <HAL_I2C_IsDeviceReady+0x188>
 8008b24:	7dfb      	ldrb	r3, [r7, #23]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d102      	bne.n	8008b30 <HAL_I2C_IsDeviceReady+0x188>
 8008b2a:	7dbb      	ldrb	r3, [r7, #22]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d0cd      	beq.n	8008acc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2220      	movs	r2, #32
 8008b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	695b      	ldr	r3, [r3, #20]
 8008b3e:	f003 0302 	and.w	r3, r3, #2
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d129      	bne.n	8008b9a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b54:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b56:	2300      	movs	r3, #0
 8008b58:	613b      	str	r3, [r7, #16]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	695b      	ldr	r3, [r3, #20]
 8008b60:	613b      	str	r3, [r7, #16]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	699b      	ldr	r3, [r3, #24]
 8008b68:	613b      	str	r3, [r7, #16]
 8008b6a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	2319      	movs	r3, #25
 8008b72:	2201      	movs	r2, #1
 8008b74:	4921      	ldr	r1, [pc, #132]	; (8008bfc <HAL_I2C_IsDeviceReady+0x254>)
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f001 fe1c 	bl	800a7b4 <I2C_WaitOnFlagUntilTimeout>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d001      	beq.n	8008b86 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e036      	b.n	8008bf4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2220      	movs	r2, #32
 8008b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8008b96:	2300      	movs	r3, #0
 8008b98:	e02c      	b.n	8008bf4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ba8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008bb2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	2319      	movs	r3, #25
 8008bba:	2201      	movs	r2, #1
 8008bbc:	490f      	ldr	r1, [pc, #60]	; (8008bfc <HAL_I2C_IsDeviceReady+0x254>)
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f001 fdf8 	bl	800a7b4 <I2C_WaitOnFlagUntilTimeout>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d001      	beq.n	8008bce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e012      	b.n	8008bf4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8008bd4:	69ba      	ldr	r2, [r7, #24]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	f4ff af32 	bcc.w	8008a42 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2220      	movs	r2, #32
 8008be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e000      	b.n	8008bf4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8008bf2:	2302      	movs	r3, #2
  }
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3720      	adds	r7, #32
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	00100002 	.word	0x00100002
 8008c00:	ffff0000 	.word	0xffff0000

08008c04 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b088      	sub	sp, #32
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c24:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c2c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008c2e:	7bfb      	ldrb	r3, [r7, #15]
 8008c30:	2b10      	cmp	r3, #16
 8008c32:	d003      	beq.n	8008c3c <HAL_I2C_EV_IRQHandler+0x38>
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
 8008c36:	2b40      	cmp	r3, #64	; 0x40
 8008c38:	f040 80b1 	bne.w	8008d9e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10d      	bne.n	8008c72 <HAL_I2C_EV_IRQHandler+0x6e>
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008c5c:	d003      	beq.n	8008c66 <HAL_I2C_EV_IRQHandler+0x62>
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008c64:	d101      	bne.n	8008c6a <HAL_I2C_EV_IRQHandler+0x66>
 8008c66:	2301      	movs	r3, #1
 8008c68:	e000      	b.n	8008c6c <HAL_I2C_EV_IRQHandler+0x68>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	f000 8114 	beq.w	8008e9a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	f003 0301 	and.w	r3, r3, #1
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00b      	beq.n	8008c94 <HAL_I2C_EV_IRQHandler+0x90>
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d006      	beq.n	8008c94 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f001 fffb 	bl	800ac82 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 fcb0 	bl	80095f2 <I2C_Master_SB>
 8008c92:	e083      	b.n	8008d9c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	f003 0308 	and.w	r3, r3, #8
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d008      	beq.n	8008cb0 <HAL_I2C_EV_IRQHandler+0xac>
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d003      	beq.n	8008cb0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fd27 	bl	80096fc <I2C_Master_ADD10>
 8008cae:	e075      	b.n	8008d9c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	f003 0302 	and.w	r3, r3, #2
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d008      	beq.n	8008ccc <HAL_I2C_EV_IRQHandler+0xc8>
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d003      	beq.n	8008ccc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fd42 	bl	800974e <I2C_Master_ADDR>
 8008cca:	e067      	b.n	8008d9c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	f003 0304 	and.w	r3, r3, #4
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d036      	beq.n	8008d44 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ce4:	f000 80db 	beq.w	8008e9e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00d      	beq.n	8008d0e <HAL_I2C_EV_IRQHandler+0x10a>
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d008      	beq.n	8008d0e <HAL_I2C_EV_IRQHandler+0x10a>
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	f003 0304 	and.w	r3, r3, #4
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d103      	bne.n	8008d0e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f924 	bl	8008f54 <I2C_MasterTransmit_TXE>
 8008d0c:	e046      	b.n	8008d9c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	f003 0304 	and.w	r3, r3, #4
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f000 80c2 	beq.w	8008e9e <HAL_I2C_EV_IRQHandler+0x29a>
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 80bc 	beq.w	8008e9e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008d26:	7bbb      	ldrb	r3, [r7, #14]
 8008d28:	2b21      	cmp	r3, #33	; 0x21
 8008d2a:	d103      	bne.n	8008d34 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f9ad 	bl	800908c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d32:	e0b4      	b.n	8008e9e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
 8008d36:	2b40      	cmp	r3, #64	; 0x40
 8008d38:	f040 80b1 	bne.w	8008e9e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fa1b 	bl	8009178 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d42:	e0ac      	b.n	8008e9e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d52:	f000 80a4 	beq.w	8008e9e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00d      	beq.n	8008d7c <HAL_I2C_EV_IRQHandler+0x178>
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d008      	beq.n	8008d7c <HAL_I2C_EV_IRQHandler+0x178>
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	f003 0304 	and.w	r3, r3, #4
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d103      	bne.n	8008d7c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fa97 	bl	80092a8 <I2C_MasterReceive_RXNE>
 8008d7a:	e00f      	b.n	8008d9c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	f003 0304 	and.w	r3, r3, #4
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 808b 	beq.w	8008e9e <HAL_I2C_EV_IRQHandler+0x29a>
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f000 8085 	beq.w	8008e9e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fb42 	bl	800941e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008d9a:	e080      	b.n	8008e9e <HAL_I2C_EV_IRQHandler+0x29a>
 8008d9c:	e07f      	b.n	8008e9e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d004      	beq.n	8008db0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	695b      	ldr	r3, [r3, #20]
 8008dac:	61fb      	str	r3, [r7, #28]
 8008dae:	e007      	b.n	8008dc0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	f003 0302 	and.w	r3, r3, #2
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d011      	beq.n	8008dee <HAL_I2C_EV_IRQHandler+0x1ea>
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00c      	beq.n	8008dee <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d003      	beq.n	8008de4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8008de4:	69b9      	ldr	r1, [r7, #24]
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 ff08 	bl	8009bfc <I2C_Slave_ADDR>
 8008dec:	e05a      	b.n	8008ea4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	f003 0310 	and.w	r3, r3, #16
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d008      	beq.n	8008e0a <HAL_I2C_EV_IRQHandler+0x206>
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d003      	beq.n	8008e0a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 ff42 	bl	8009c8c <I2C_Slave_STOPF>
 8008e08:	e04c      	b.n	8008ea4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008e0a:	7bbb      	ldrb	r3, [r7, #14]
 8008e0c:	2b21      	cmp	r3, #33	; 0x21
 8008e0e:	d002      	beq.n	8008e16 <HAL_I2C_EV_IRQHandler+0x212>
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	2b29      	cmp	r3, #41	; 0x29
 8008e14:	d120      	bne.n	8008e58 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00d      	beq.n	8008e3c <HAL_I2C_EV_IRQHandler+0x238>
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d008      	beq.n	8008e3c <HAL_I2C_EV_IRQHandler+0x238>
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	f003 0304 	and.w	r3, r3, #4
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d103      	bne.n	8008e3c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fe25 	bl	8009a84 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008e3a:	e032      	b.n	8008ea2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	f003 0304 	and.w	r3, r3, #4
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d02d      	beq.n	8008ea2 <HAL_I2C_EV_IRQHandler+0x29e>
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d028      	beq.n	8008ea2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 fe54 	bl	8009afe <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008e56:	e024      	b.n	8008ea2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00d      	beq.n	8008e7e <HAL_I2C_EV_IRQHandler+0x27a>
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d008      	beq.n	8008e7e <HAL_I2C_EV_IRQHandler+0x27a>
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	f003 0304 	and.w	r3, r3, #4
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d103      	bne.n	8008e7e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fe61 	bl	8009b3e <I2C_SlaveReceive_RXNE>
 8008e7c:	e012      	b.n	8008ea4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	f003 0304 	and.w	r3, r3, #4
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00d      	beq.n	8008ea4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d008      	beq.n	8008ea4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fe91 	bl	8009bba <I2C_SlaveReceive_BTF>
 8008e98:	e004      	b.n	8008ea4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8008e9a:	bf00      	nop
 8008e9c:	e002      	b.n	8008ea4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008e9e:	bf00      	nop
 8008ea0:	e000      	b.n	8008ea4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008ea2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008ea4:	3720      	adds	r7, #32
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b083      	sub	sp, #12
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008eb2:	bf00      	nop
 8008eb4:	370c      	adds	r7, #12
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bc80      	pop	{r7}
 8008eba:	4770      	bx	lr

08008ebc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008ec4:	bf00      	nop
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bc80      	pop	{r7}
 8008ecc:	4770      	bx	lr

08008ece <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b083      	sub	sp, #12
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008ed6:	bf00      	nop
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bc80      	pop	{r7}
 8008ede:	4770      	bx	lr

08008ee0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bc80      	pop	{r7}
 8008ef0:	4770      	bx	lr

08008ef2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008ef2:	b480      	push	{r7}
 8008ef4:	b083      	sub	sp, #12
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
 8008efa:	460b      	mov	r3, r1
 8008efc:	70fb      	strb	r3, [r7, #3]
 8008efe:	4613      	mov	r3, r2
 8008f00:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008f02:	bf00      	nop
 8008f04:	370c      	adds	r7, #12
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bc80      	pop	{r7}
 8008f0a:	4770      	bx	lr

08008f0c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bc80      	pop	{r7}
 8008f1c:	4770      	bx	lr

08008f1e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b083      	sub	sp, #12
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008f26:	bf00      	nop
 8008f28:	370c      	adds	r7, #12
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bc80      	pop	{r7}
 8008f2e:	4770      	bx	lr

08008f30 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008f38:	bf00      	nop
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bc80      	pop	{r7}
 8008f40:	4770      	bx	lr

08008f42 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b083      	sub	sp, #12
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8008f4a:	bf00      	nop
 8008f4c:	370c      	adds	r7, #12
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bc80      	pop	{r7}
 8008f52:	4770      	bx	lr

08008f54 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f62:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f6a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f70:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d150      	bne.n	800901c <I2C_MasterTransmit_TXE+0xc8>
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	2b21      	cmp	r3, #33	; 0x21
 8008f7e:	d14d      	bne.n	800901c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	2b08      	cmp	r3, #8
 8008f84:	d01d      	beq.n	8008fc2 <I2C_MasterTransmit_TXE+0x6e>
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	2b20      	cmp	r3, #32
 8008f8a:	d01a      	beq.n	8008fc2 <I2C_MasterTransmit_TXE+0x6e>
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008f92:	d016      	beq.n	8008fc2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	685a      	ldr	r2, [r3, #4]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008fa2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2211      	movs	r2, #17
 8008fa8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2220      	movs	r2, #32
 8008fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7ff ff75 	bl	8008eaa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008fc0:	e060      	b.n	8009084 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	685a      	ldr	r2, [r3, #4]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008fd0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fe0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2220      	movs	r2, #32
 8008fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b40      	cmp	r3, #64	; 0x40
 8008ffa:	d107      	bne.n	800900c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7fb f979 	bl	80042fc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800900a:	e03b      	b.n	8009084 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7ff ff48 	bl	8008eaa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800901a:	e033      	b.n	8009084 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800901c:	7bfb      	ldrb	r3, [r7, #15]
 800901e:	2b21      	cmp	r3, #33	; 0x21
 8009020:	d005      	beq.n	800902e <I2C_MasterTransmit_TXE+0xda>
 8009022:	7bbb      	ldrb	r3, [r7, #14]
 8009024:	2b40      	cmp	r3, #64	; 0x40
 8009026:	d12d      	bne.n	8009084 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8009028:	7bfb      	ldrb	r3, [r7, #15]
 800902a:	2b22      	cmp	r3, #34	; 0x22
 800902c:	d12a      	bne.n	8009084 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009032:	b29b      	uxth	r3, r3
 8009034:	2b00      	cmp	r3, #0
 8009036:	d108      	bne.n	800904a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	685a      	ldr	r2, [r3, #4]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009046:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8009048:	e01c      	b.n	8009084 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b40      	cmp	r3, #64	; 0x40
 8009054:	d103      	bne.n	800905e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 f88e 	bl	8009178 <I2C_MemoryTransmit_TXE_BTF>
}
 800905c:	e012      	b.n	8009084 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009062:	781a      	ldrb	r2, [r3, #0]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906e:	1c5a      	adds	r2, r3, #1
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009078:	b29b      	uxth	r3, r3
 800907a:	3b01      	subs	r3, #1
 800907c:	b29a      	uxth	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009082:	e7ff      	b.n	8009084 <I2C_MasterTransmit_TXE+0x130>
 8009084:	bf00      	nop
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009098:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	2b21      	cmp	r3, #33	; 0x21
 80090a4:	d164      	bne.n	8009170 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d012      	beq.n	80090d6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b4:	781a      	ldrb	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c0:	1c5a      	adds	r2, r3, #1
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	3b01      	subs	r3, #1
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80090d4:	e04c      	b.n	8009170 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2b08      	cmp	r3, #8
 80090da:	d01d      	beq.n	8009118 <I2C_MasterTransmit_BTF+0x8c>
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2b20      	cmp	r3, #32
 80090e0:	d01a      	beq.n	8009118 <I2C_MasterTransmit_BTF+0x8c>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80090e8:	d016      	beq.n	8009118 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	685a      	ldr	r2, [r3, #4]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80090f8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2211      	movs	r2, #17
 80090fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2220      	movs	r2, #32
 800910c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f7ff feca 	bl	8008eaa <HAL_I2C_MasterTxCpltCallback>
}
 8009116:	e02b      	b.n	8009170 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	685a      	ldr	r2, [r3, #4]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009126:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009136:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2220      	movs	r2, #32
 8009142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800914c:	b2db      	uxtb	r3, r3
 800914e:	2b40      	cmp	r3, #64	; 0x40
 8009150:	d107      	bne.n	8009162 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f7fb f8ce 	bl	80042fc <HAL_I2C_MemTxCpltCallback>
}
 8009160:	e006      	b.n	8009170 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f7ff fe9d 	bl	8008eaa <HAL_I2C_MasterTxCpltCallback>
}
 8009170:	bf00      	nop
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009186:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800918c:	2b00      	cmp	r3, #0
 800918e:	d11d      	bne.n	80091cc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009194:	2b01      	cmp	r3, #1
 8009196:	d10b      	bne.n	80091b0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800919c:	b2da      	uxtb	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091a8:	1c9a      	adds	r2, r3, #2
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80091ae:	e077      	b.n	80092a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	121b      	asrs	r3, r3, #8
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091c4:	1c5a      	adds	r2, r3, #1
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80091ca:	e069      	b.n	80092a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d10b      	bne.n	80091ec <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091e4:	1c5a      	adds	r2, r3, #1
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80091ea:	e059      	b.n	80092a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	d152      	bne.n	800929a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
 80091f6:	2b22      	cmp	r3, #34	; 0x22
 80091f8:	d10d      	bne.n	8009216 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009208:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800920e:	1c5a      	adds	r2, r3, #1
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009214:	e044      	b.n	80092a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800921a:	b29b      	uxth	r3, r3
 800921c:	2b00      	cmp	r3, #0
 800921e:	d015      	beq.n	800924c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8009220:	7bfb      	ldrb	r3, [r7, #15]
 8009222:	2b21      	cmp	r3, #33	; 0x21
 8009224:	d112      	bne.n	800924c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922a:	781a      	ldrb	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009236:	1c5a      	adds	r2, r3, #1
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009240:	b29b      	uxth	r3, r3
 8009242:	3b01      	subs	r3, #1
 8009244:	b29a      	uxth	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800924a:	e029      	b.n	80092a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009250:	b29b      	uxth	r3, r3
 8009252:	2b00      	cmp	r3, #0
 8009254:	d124      	bne.n	80092a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8009256:	7bfb      	ldrb	r3, [r7, #15]
 8009258:	2b21      	cmp	r3, #33	; 0x21
 800925a:	d121      	bne.n	80092a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	685a      	ldr	r2, [r3, #4]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800926a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800927a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2220      	movs	r2, #32
 8009286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f7fb f832 	bl	80042fc <HAL_I2C_MemTxCpltCallback>
}
 8009298:	e002      	b.n	80092a0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f7fe fd32 	bl	8007d04 <I2C_Flush_DR>
}
 80092a0:	bf00      	nop
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	2b22      	cmp	r3, #34	; 0x22
 80092ba:	f040 80ac 	bne.w	8009416 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2b03      	cmp	r3, #3
 80092ca:	d921      	bls.n	8009310 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	691a      	ldr	r2, [r3, #16]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d6:	b2d2      	uxtb	r2, r2
 80092d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092de:	1c5a      	adds	r2, r3, #1
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	3b01      	subs	r3, #1
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	2b03      	cmp	r3, #3
 80092fa:	f040 808c 	bne.w	8009416 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	685a      	ldr	r2, [r3, #4]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800930c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800930e:	e082      	b.n	8009416 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009314:	2b02      	cmp	r3, #2
 8009316:	d075      	beq.n	8009404 <I2C_MasterReceive_RXNE+0x15c>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d002      	beq.n	8009324 <I2C_MasterReceive_RXNE+0x7c>
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d16f      	bne.n	8009404 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f001 fbef 	bl	800ab08 <I2C_WaitOnSTOPRequestThroughIT>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d142      	bne.n	80093b6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800933e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800934e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	691a      	ldr	r2, [r3, #16]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935a:	b2d2      	uxtb	r2, r2
 800935c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009362:	1c5a      	adds	r2, r3, #1
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800936c:	b29b      	uxth	r3, r3
 800936e:	3b01      	subs	r3, #1
 8009370:	b29a      	uxth	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2220      	movs	r2, #32
 800937a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009384:	b2db      	uxtb	r3, r3
 8009386:	2b40      	cmp	r3, #64	; 0x40
 8009388:	d10a      	bne.n	80093a0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7ff fdc0 	bl	8008f1e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800939e:	e03a      	b.n	8009416 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2212      	movs	r2, #18
 80093ac:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f7ff fd84 	bl	8008ebc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80093b4:	e02f      	b.n	8009416 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	685a      	ldr	r2, [r3, #4]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80093c4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	691a      	ldr	r2, [r3, #16]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d0:	b2d2      	uxtb	r2, r2
 80093d2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d8:	1c5a      	adds	r2, r3, #1
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	3b01      	subs	r3, #1
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2220      	movs	r2, #32
 80093f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7ff fd97 	bl	8008f30 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8009402:	e008      	b.n	8009416 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	685a      	ldr	r2, [r3, #4]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009412:	605a      	str	r2, [r3, #4]
}
 8009414:	e7ff      	b.n	8009416 <I2C_MasterReceive_RXNE+0x16e>
 8009416:	bf00      	nop
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b084      	sub	sp, #16
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009430:	b29b      	uxth	r3, r3
 8009432:	2b04      	cmp	r3, #4
 8009434:	d11b      	bne.n	800946e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009444:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	691a      	ldr	r2, [r3, #16]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009450:	b2d2      	uxtb	r2, r2
 8009452:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009458:	1c5a      	adds	r2, r3, #1
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009462:	b29b      	uxth	r3, r3
 8009464:	3b01      	subs	r3, #1
 8009466:	b29a      	uxth	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800946c:	e0bd      	b.n	80095ea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009472:	b29b      	uxth	r3, r3
 8009474:	2b03      	cmp	r3, #3
 8009476:	d129      	bne.n	80094cc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	685a      	ldr	r2, [r3, #4]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009486:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2b04      	cmp	r3, #4
 800948c:	d00a      	beq.n	80094a4 <I2C_MasterReceive_BTF+0x86>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2b02      	cmp	r3, #2
 8009492:	d007      	beq.n	80094a4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094a2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	691a      	ldr	r2, [r3, #16]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ae:	b2d2      	uxtb	r2, r2
 80094b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b6:	1c5a      	adds	r2, r3, #1
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	3b01      	subs	r3, #1
 80094c4:	b29a      	uxth	r2, r3
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80094ca:	e08e      	b.n	80095ea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	d176      	bne.n	80095c4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d002      	beq.n	80094e2 <I2C_MasterReceive_BTF+0xc4>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2b10      	cmp	r3, #16
 80094e0:	d108      	bne.n	80094f4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094f0:	601a      	str	r2, [r3, #0]
 80094f2:	e019      	b.n	8009528 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2b04      	cmp	r3, #4
 80094f8:	d002      	beq.n	8009500 <I2C_MasterReceive_BTF+0xe2>
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d108      	bne.n	8009512 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800950e:	601a      	str	r2, [r3, #0]
 8009510:	e00a      	b.n	8009528 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2b10      	cmp	r3, #16
 8009516:	d007      	beq.n	8009528 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009526:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	691a      	ldr	r2, [r3, #16]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009532:	b2d2      	uxtb	r2, r2
 8009534:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953a:	1c5a      	adds	r2, r3, #1
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009544:	b29b      	uxth	r3, r3
 8009546:	3b01      	subs	r3, #1
 8009548:	b29a      	uxth	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	691a      	ldr	r2, [r3, #16]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009558:	b2d2      	uxtb	r2, r2
 800955a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009560:	1c5a      	adds	r2, r3, #1
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800956a:	b29b      	uxth	r3, r3
 800956c:	3b01      	subs	r3, #1
 800956e:	b29a      	uxth	r2, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	685a      	ldr	r2, [r3, #4]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009582:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2220      	movs	r2, #32
 8009588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009592:	b2db      	uxtb	r3, r3
 8009594:	2b40      	cmp	r3, #64	; 0x40
 8009596:	d10a      	bne.n	80095ae <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7ff fcb9 	bl	8008f1e <HAL_I2C_MemRxCpltCallback>
}
 80095ac:	e01d      	b.n	80095ea <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2212      	movs	r2, #18
 80095ba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7ff fc7d 	bl	8008ebc <HAL_I2C_MasterRxCpltCallback>
}
 80095c2:	e012      	b.n	80095ea <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	691a      	ldr	r2, [r3, #16]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ce:	b2d2      	uxtb	r2, r2
 80095d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d6:	1c5a      	adds	r2, r3, #1
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	3b01      	subs	r3, #1
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80095ea:	bf00      	nop
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80095f2:	b480      	push	{r7}
 80095f4:	b083      	sub	sp, #12
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009600:	b2db      	uxtb	r3, r3
 8009602:	2b40      	cmp	r3, #64	; 0x40
 8009604:	d117      	bne.n	8009636 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800960a:	2b00      	cmp	r3, #0
 800960c:	d109      	bne.n	8009622 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009612:	b2db      	uxtb	r3, r3
 8009614:	461a      	mov	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800961e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8009620:	e067      	b.n	80096f2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009626:	b2db      	uxtb	r3, r3
 8009628:	f043 0301 	orr.w	r3, r3, #1
 800962c:	b2da      	uxtb	r2, r3
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	611a      	str	r2, [r3, #16]
}
 8009634:	e05d      	b.n	80096f2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800963e:	d133      	bne.n	80096a8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009646:	b2db      	uxtb	r3, r3
 8009648:	2b21      	cmp	r3, #33	; 0x21
 800964a:	d109      	bne.n	8009660 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009650:	b2db      	uxtb	r3, r3
 8009652:	461a      	mov	r2, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800965c:	611a      	str	r2, [r3, #16]
 800965e:	e008      	b.n	8009672 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009664:	b2db      	uxtb	r3, r3
 8009666:	f043 0301 	orr.w	r3, r3, #1
 800966a:	b2da      	uxtb	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009676:	2b00      	cmp	r3, #0
 8009678:	d004      	beq.n	8009684 <I2C_Master_SB+0x92>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800967e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009680:	2b00      	cmp	r3, #0
 8009682:	d108      	bne.n	8009696 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009688:	2b00      	cmp	r3, #0
 800968a:	d032      	beq.n	80096f2 <I2C_Master_SB+0x100>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009692:	2b00      	cmp	r3, #0
 8009694:	d02d      	beq.n	80096f2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096a4:	605a      	str	r2, [r3, #4]
}
 80096a6:	e024      	b.n	80096f2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d10e      	bne.n	80096ce <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	11db      	asrs	r3, r3, #7
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	f003 0306 	and.w	r3, r3, #6
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	f063 030f 	orn	r3, r3, #15
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	611a      	str	r2, [r3, #16]
}
 80096cc:	e011      	b.n	80096f2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d10d      	bne.n	80096f2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096da:	b29b      	uxth	r3, r3
 80096dc:	11db      	asrs	r3, r3, #7
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	f003 0306 	and.w	r3, r3, #6
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	f063 030e 	orn	r3, r3, #14
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	611a      	str	r2, [r3, #16]
}
 80096f2:	bf00      	nop
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bc80      	pop	{r7}
 80096fa:	4770      	bx	lr

080096fc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009708:	b2da      	uxtb	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009714:	2b00      	cmp	r3, #0
 8009716:	d004      	beq.n	8009722 <I2C_Master_ADD10+0x26>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800971c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800971e:	2b00      	cmp	r3, #0
 8009720:	d108      	bne.n	8009734 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00c      	beq.n	8009744 <I2C_Master_ADD10+0x48>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009730:	2b00      	cmp	r3, #0
 8009732:	d007      	beq.n	8009744 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	685a      	ldr	r2, [r3, #4]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009742:	605a      	str	r2, [r3, #4]
  }
}
 8009744:	bf00      	nop
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	bc80      	pop	{r7}
 800974c:	4770      	bx	lr

0800974e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800974e:	b480      	push	{r7}
 8009750:	b091      	sub	sp, #68	; 0x44
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800975c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009764:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800976a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b22      	cmp	r3, #34	; 0x22
 8009776:	f040 8174 	bne.w	8009a62 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10f      	bne.n	80097a2 <I2C_Master_ADDR+0x54>
 8009782:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009786:	2b40      	cmp	r3, #64	; 0x40
 8009788:	d10b      	bne.n	80097a2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800978a:	2300      	movs	r3, #0
 800978c:	633b      	str	r3, [r7, #48]	; 0x30
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	695b      	ldr	r3, [r3, #20]
 8009794:	633b      	str	r3, [r7, #48]	; 0x30
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	699b      	ldr	r3, [r3, #24]
 800979c:	633b      	str	r3, [r7, #48]	; 0x30
 800979e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a0:	e16b      	b.n	8009a7a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d11d      	bne.n	80097e6 <I2C_Master_ADDR+0x98>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	691b      	ldr	r3, [r3, #16]
 80097ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80097b2:	d118      	bne.n	80097e6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097b4:	2300      	movs	r3, #0
 80097b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	695b      	ldr	r3, [r3, #20]
 80097be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	699b      	ldr	r3, [r3, #24]
 80097c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097d8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097de:	1c5a      	adds	r2, r3, #1
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	651a      	str	r2, [r3, #80]	; 0x50
 80097e4:	e149      	b.n	8009a7a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d113      	bne.n	8009818 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097f0:	2300      	movs	r3, #0
 80097f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	695b      	ldr	r3, [r3, #20]
 80097fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	699b      	ldr	r3, [r3, #24]
 8009802:	62bb      	str	r3, [r7, #40]	; 0x28
 8009804:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009814:	601a      	str	r2, [r3, #0]
 8009816:	e120      	b.n	8009a5a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800981c:	b29b      	uxth	r3, r3
 800981e:	2b01      	cmp	r3, #1
 8009820:	f040 808a 	bne.w	8009938 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8009824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009826:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800982a:	d137      	bne.n	800989c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800983a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009846:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800984a:	d113      	bne.n	8009874 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800985a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800985c:	2300      	movs	r3, #0
 800985e:	627b      	str	r3, [r7, #36]	; 0x24
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	695b      	ldr	r3, [r3, #20]
 8009866:	627b      	str	r3, [r7, #36]	; 0x24
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	627b      	str	r3, [r7, #36]	; 0x24
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	e0f2      	b.n	8009a5a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009874:	2300      	movs	r3, #0
 8009876:	623b      	str	r3, [r7, #32]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	695b      	ldr	r3, [r3, #20]
 800987e:	623b      	str	r3, [r7, #32]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	623b      	str	r3, [r7, #32]
 8009888:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009898:	601a      	str	r2, [r3, #0]
 800989a:	e0de      	b.n	8009a5a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800989c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989e:	2b08      	cmp	r3, #8
 80098a0:	d02e      	beq.n	8009900 <I2C_Master_ADDR+0x1b2>
 80098a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a4:	2b20      	cmp	r3, #32
 80098a6:	d02b      	beq.n	8009900 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80098a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098aa:	2b12      	cmp	r3, #18
 80098ac:	d102      	bne.n	80098b4 <I2C_Master_ADDR+0x166>
 80098ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d125      	bne.n	8009900 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80098b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b6:	2b04      	cmp	r3, #4
 80098b8:	d00e      	beq.n	80098d8 <I2C_Master_ADDR+0x18a>
 80098ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d00b      	beq.n	80098d8 <I2C_Master_ADDR+0x18a>
 80098c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c2:	2b10      	cmp	r3, #16
 80098c4:	d008      	beq.n	80098d8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098d4:	601a      	str	r2, [r3, #0]
 80098d6:	e007      	b.n	80098e8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80098e6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098e8:	2300      	movs	r3, #0
 80098ea:	61fb      	str	r3, [r7, #28]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	695b      	ldr	r3, [r3, #20]
 80098f2:	61fb      	str	r3, [r7, #28]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	699b      	ldr	r3, [r3, #24]
 80098fa:	61fb      	str	r3, [r7, #28]
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	e0ac      	b.n	8009a5a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800990e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009910:	2300      	movs	r3, #0
 8009912:	61bb      	str	r3, [r7, #24]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	61bb      	str	r3, [r7, #24]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	699b      	ldr	r3, [r3, #24]
 8009922:	61bb      	str	r3, [r7, #24]
 8009924:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009934:	601a      	str	r2, [r3, #0]
 8009936:	e090      	b.n	8009a5a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800993c:	b29b      	uxth	r3, r3
 800993e:	2b02      	cmp	r3, #2
 8009940:	d158      	bne.n	80099f4 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009944:	2b04      	cmp	r3, #4
 8009946:	d021      	beq.n	800998c <I2C_Master_ADDR+0x23e>
 8009948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994a:	2b02      	cmp	r3, #2
 800994c:	d01e      	beq.n	800998c <I2C_Master_ADDR+0x23e>
 800994e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009950:	2b10      	cmp	r3, #16
 8009952:	d01b      	beq.n	800998c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009962:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009964:	2300      	movs	r3, #0
 8009966:	617b      	str	r3, [r7, #20]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	617b      	str	r3, [r7, #20]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	617b      	str	r3, [r7, #20]
 8009978:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009988:	601a      	str	r2, [r3, #0]
 800998a:	e012      	b.n	80099b2 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800999a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800999c:	2300      	movs	r3, #0
 800999e:	613b      	str	r3, [r7, #16]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	695b      	ldr	r3, [r3, #20]
 80099a6:	613b      	str	r3, [r7, #16]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	613b      	str	r3, [r7, #16]
 80099b0:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099c0:	d14b      	bne.n	8009a5a <I2C_Master_ADDR+0x30c>
 80099c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80099c8:	d00b      	beq.n	80099e2 <I2C_Master_ADDR+0x294>
 80099ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d008      	beq.n	80099e2 <I2C_Master_ADDR+0x294>
 80099d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d2:	2b08      	cmp	r3, #8
 80099d4:	d005      	beq.n	80099e2 <I2C_Master_ADDR+0x294>
 80099d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d8:	2b10      	cmp	r3, #16
 80099da:	d002      	beq.n	80099e2 <I2C_Master_ADDR+0x294>
 80099dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099de:	2b20      	cmp	r3, #32
 80099e0:	d13b      	bne.n	8009a5a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	685a      	ldr	r2, [r3, #4]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80099f0:	605a      	str	r2, [r3, #4]
 80099f2:	e032      	b.n	8009a5a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a02:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a12:	d117      	bne.n	8009a44 <I2C_Master_ADDR+0x2f6>
 8009a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009a1a:	d00b      	beq.n	8009a34 <I2C_Master_ADDR+0x2e6>
 8009a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d008      	beq.n	8009a34 <I2C_Master_ADDR+0x2e6>
 8009a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a24:	2b08      	cmp	r3, #8
 8009a26:	d005      	beq.n	8009a34 <I2C_Master_ADDR+0x2e6>
 8009a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2a:	2b10      	cmp	r3, #16
 8009a2c:	d002      	beq.n	8009a34 <I2C_Master_ADDR+0x2e6>
 8009a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a30:	2b20      	cmp	r3, #32
 8009a32:	d107      	bne.n	8009a44 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	685a      	ldr	r2, [r3, #4]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009a42:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a44:	2300      	movs	r3, #0
 8009a46:	60fb      	str	r3, [r7, #12]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	695b      	ldr	r3, [r3, #20]
 8009a4e:	60fb      	str	r3, [r7, #12]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	699b      	ldr	r3, [r3, #24]
 8009a56:	60fb      	str	r3, [r7, #12]
 8009a58:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8009a60:	e00b      	b.n	8009a7a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a62:	2300      	movs	r3, #0
 8009a64:	60bb      	str	r3, [r7, #8]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	695b      	ldr	r3, [r3, #20]
 8009a6c:	60bb      	str	r3, [r7, #8]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	60bb      	str	r3, [r7, #8]
 8009a76:	68bb      	ldr	r3, [r7, #8]
}
 8009a78:	e7ff      	b.n	8009a7a <I2C_Master_ADDR+0x32c>
 8009a7a:	bf00      	nop
 8009a7c:	3744      	adds	r7, #68	; 0x44
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bc80      	pop	{r7}
 8009a82:	4770      	bx	lr

08009a84 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a92:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d02b      	beq.n	8009af6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa2:	781a      	ldrb	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aae:	1c5a      	adds	r2, r3, #1
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	3b01      	subs	r3, #1
 8009abc:	b29a      	uxth	r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d114      	bne.n	8009af6 <I2C_SlaveTransmit_TXE+0x72>
 8009acc:	7bfb      	ldrb	r3, [r7, #15]
 8009ace:	2b29      	cmp	r3, #41	; 0x29
 8009ad0:	d111      	bne.n	8009af6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	685a      	ldr	r2, [r3, #4]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ae0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2221      	movs	r2, #33	; 0x21
 8009ae6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2228      	movs	r2, #40	; 0x28
 8009aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f7ff f9ec 	bl	8008ece <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009af6:	bf00      	nop
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009afe:	b480      	push	{r7}
 8009b00:	b083      	sub	sp, #12
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d011      	beq.n	8009b34 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b14:	781a      	ldrb	r2, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b20:	1c5a      	adds	r2, r3, #1
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009b34:	bf00      	nop
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bc80      	pop	{r7}
 8009b3c:	4770      	bx	lr

08009b3e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b084      	sub	sp, #16
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b4c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d02c      	beq.n	8009bb2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	691a      	ldr	r2, [r3, #16]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b62:	b2d2      	uxtb	r2, r2
 8009b64:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6a:	1c5a      	adds	r2, r3, #1
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	3b01      	subs	r3, #1
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d114      	bne.n	8009bb2 <I2C_SlaveReceive_RXNE+0x74>
 8009b88:	7bfb      	ldrb	r3, [r7, #15]
 8009b8a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b8c:	d111      	bne.n	8009bb2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	685a      	ldr	r2, [r3, #4]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b9c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2222      	movs	r2, #34	; 0x22
 8009ba2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2228      	movs	r2, #40	; 0x28
 8009ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f7ff f997 	bl	8008ee0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009bb2:	bf00      	nop
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009bba:	b480      	push	{r7}
 8009bbc:	b083      	sub	sp, #12
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d012      	beq.n	8009bf2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	691a      	ldr	r2, [r3, #16]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd6:	b2d2      	uxtb	r2, r2
 8009bd8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bde:	1c5a      	adds	r2, r3, #1
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	3b01      	subs	r3, #1
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009bf2:	bf00      	nop
 8009bf4:	370c      	adds	r7, #12
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bc80      	pop	{r7}
 8009bfa:	4770      	bx	lr

08009bfc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009c06:	2300      	movs	r3, #0
 8009c08:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009c16:	2b28      	cmp	r3, #40	; 0x28
 8009c18:	d125      	bne.n	8009c66 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	685a      	ldr	r2, [r3, #4]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c28:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	f003 0304 	and.w	r3, r3, #4
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009c34:	2301      	movs	r3, #1
 8009c36:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d103      	bne.n	8009c4a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	81bb      	strh	r3, [r7, #12]
 8009c48:	e002      	b.n	8009c50 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8009c58:	89ba      	ldrh	r2, [r7, #12]
 8009c5a:	7bfb      	ldrb	r3, [r7, #15]
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7ff f947 	bl	8008ef2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009c64:	e00e      	b.n	8009c84 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c66:	2300      	movs	r3, #0
 8009c68:	60bb      	str	r3, [r7, #8]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	695b      	ldr	r3, [r3, #20]
 8009c70:	60bb      	str	r3, [r7, #8]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	699b      	ldr	r3, [r3, #24]
 8009c78:	60bb      	str	r3, [r7, #8]
 8009c7a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009c84:	bf00      	nop
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c9a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	685a      	ldr	r2, [r3, #4]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009caa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009cac:	2300      	movs	r3, #0
 8009cae:	60bb      	str	r3, [r7, #8]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	695b      	ldr	r3, [r3, #20]
 8009cb6:	60bb      	str	r3, [r7, #8]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f042 0201 	orr.w	r2, r2, #1
 8009cc6:	601a      	str	r2, [r3, #0]
 8009cc8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cd8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ce8:	d172      	bne.n	8009dd0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009cea:	7bfb      	ldrb	r3, [r7, #15]
 8009cec:	2b22      	cmp	r3, #34	; 0x22
 8009cee:	d002      	beq.n	8009cf6 <I2C_Slave_STOPF+0x6a>
 8009cf0:	7bfb      	ldrb	r3, [r7, #15]
 8009cf2:	2b2a      	cmp	r3, #42	; 0x2a
 8009cf4:	d135      	bne.n	8009d62 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d005      	beq.n	8009d1a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d12:	f043 0204 	orr.w	r2, r3, #4
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	685a      	ldr	r2, [r3, #4]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d28:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7fd fca6 	bl	8007680 <HAL_DMA_GetState>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d049      	beq.n	8009dce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d3e:	4a69      	ldr	r2, [pc, #420]	; (8009ee4 <I2C_Slave_STOPF+0x258>)
 8009d40:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fd f956 	bl	8006ff8 <HAL_DMA_Abort_IT>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d03d      	beq.n	8009dce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009d5c:	4610      	mov	r0, r2
 8009d5e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009d60:	e035      	b.n	8009dce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d005      	beq.n	8009d86 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7e:	f043 0204 	orr.w	r2, r3, #4
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	685a      	ldr	r2, [r3, #4]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d94:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fd fc70 	bl	8007680 <HAL_DMA_GetState>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d014      	beq.n	8009dd0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009daa:	4a4e      	ldr	r2, [pc, #312]	; (8009ee4 <I2C_Slave_STOPF+0x258>)
 8009dac:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fd f920 	bl	8006ff8 <HAL_DMA_Abort_IT>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d008      	beq.n	8009dd0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009dc8:	4610      	mov	r0, r2
 8009dca:	4798      	blx	r3
 8009dcc:	e000      	b.n	8009dd0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009dce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d03e      	beq.n	8009e58 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	695b      	ldr	r3, [r3, #20]
 8009de0:	f003 0304 	and.w	r3, r3, #4
 8009de4:	2b04      	cmp	r3, #4
 8009de6:	d112      	bne.n	8009e0e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	691a      	ldr	r2, [r3, #16]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df2:	b2d2      	uxtb	r2, r2
 8009df4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfa:	1c5a      	adds	r2, r3, #1
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	3b01      	subs	r3, #1
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	695b      	ldr	r3, [r3, #20]
 8009e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e18:	2b40      	cmp	r3, #64	; 0x40
 8009e1a:	d112      	bne.n	8009e42 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	691a      	ldr	r2, [r3, #16]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e26:	b2d2      	uxtb	r2, r2
 8009e28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2e:	1c5a      	adds	r2, r3, #1
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	3b01      	subs	r3, #1
 8009e3c:	b29a      	uxth	r2, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d005      	beq.n	8009e58 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e50:	f043 0204 	orr.w	r2, r3, #4
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d003      	beq.n	8009e68 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 f843 	bl	8009eec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8009e66:	e039      	b.n	8009edc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009e68:	7bfb      	ldrb	r3, [r7, #15]
 8009e6a:	2b2a      	cmp	r3, #42	; 0x2a
 8009e6c:	d109      	bne.n	8009e82 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2228      	movs	r2, #40	; 0x28
 8009e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f7ff f82f 	bl	8008ee0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	2b28      	cmp	r3, #40	; 0x28
 8009e8c:	d111      	bne.n	8009eb2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a15      	ldr	r2, [pc, #84]	; (8009ee8 <I2C_Slave_STOPF+0x25c>)
 8009e92:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2220      	movs	r2, #32
 8009e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f7ff f82e 	bl	8008f0c <HAL_I2C_ListenCpltCallback>
}
 8009eb0:	e014      	b.n	8009edc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb6:	2b22      	cmp	r3, #34	; 0x22
 8009eb8:	d002      	beq.n	8009ec0 <I2C_Slave_STOPF+0x234>
 8009eba:	7bfb      	ldrb	r3, [r7, #15]
 8009ebc:	2b22      	cmp	r3, #34	; 0x22
 8009ebe:	d10d      	bne.n	8009edc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2220      	movs	r2, #32
 8009eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7ff f802 	bl	8008ee0 <HAL_I2C_SlaveRxCpltCallback>
}
 8009edc:	bf00      	nop
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	0800a665 	.word	0x0800a665
 8009ee8:	ffff0000 	.word	0xffff0000

08009eec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009efa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f02:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009f04:	7bbb      	ldrb	r3, [r7, #14]
 8009f06:	2b10      	cmp	r3, #16
 8009f08:	d002      	beq.n	8009f10 <I2C_ITError+0x24>
 8009f0a:	7bbb      	ldrb	r3, [r7, #14]
 8009f0c:	2b40      	cmp	r3, #64	; 0x40
 8009f0e:	d10a      	bne.n	8009f26 <I2C_ITError+0x3a>
 8009f10:	7bfb      	ldrb	r3, [r7, #15]
 8009f12:	2b22      	cmp	r3, #34	; 0x22
 8009f14:	d107      	bne.n	8009f26 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009f24:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
 8009f28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009f2c:	2b28      	cmp	r3, #40	; 0x28
 8009f2e:	d107      	bne.n	8009f40 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2228      	movs	r2, #40	; 0x28
 8009f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009f3e:	e015      	b.n	8009f6c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f4e:	d00a      	beq.n	8009f66 <I2C_ITError+0x7a>
 8009f50:	7bfb      	ldrb	r3, [r7, #15]
 8009f52:	2b60      	cmp	r3, #96	; 0x60
 8009f54:	d007      	beq.n	8009f66 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2220      	movs	r2, #32
 8009f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f7a:	d162      	bne.n	800a042 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	685a      	ldr	r2, [r3, #4]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009f8a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d020      	beq.n	8009fdc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f9e:	4a6a      	ldr	r2, [pc, #424]	; (800a148 <I2C_ITError+0x25c>)
 8009fa0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7fd f826 	bl	8006ff8 <HAL_DMA_Abort_IT>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f000 8089 	beq.w	800a0c6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f022 0201 	bic.w	r2, r2, #1
 8009fc2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2220      	movs	r2, #32
 8009fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	4798      	blx	r3
 8009fda:	e074      	b.n	800a0c6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe0:	4a59      	ldr	r2, [pc, #356]	; (800a148 <I2C_ITError+0x25c>)
 8009fe2:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7fd f805 	bl	8006ff8 <HAL_DMA_Abort_IT>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d068      	beq.n	800a0c6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	695b      	ldr	r3, [r3, #20]
 8009ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ffe:	2b40      	cmp	r3, #64	; 0x40
 800a000:	d10b      	bne.n	800a01a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	691a      	ldr	r2, [r3, #16]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00c:	b2d2      	uxtb	r2, r2
 800a00e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a014:	1c5a      	adds	r2, r3, #1
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f022 0201 	bic.w	r2, r2, #1
 800a028:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2220      	movs	r2, #32
 800a02e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a03c:	4610      	mov	r0, r2
 800a03e:	4798      	blx	r3
 800a040:	e041      	b.n	800a0c6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	2b60      	cmp	r3, #96	; 0x60
 800a04c:	d125      	bne.n	800a09a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2220      	movs	r2, #32
 800a052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	695b      	ldr	r3, [r3, #20]
 800a062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a066:	2b40      	cmp	r3, #64	; 0x40
 800a068:	d10b      	bne.n	800a082 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	691a      	ldr	r2, [r3, #16]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a074:	b2d2      	uxtb	r2, r2
 800a076:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07c:	1c5a      	adds	r2, r3, #1
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f022 0201 	bic.w	r2, r2, #1
 800a090:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f7fe ff55 	bl	8008f42 <HAL_I2C_AbortCpltCallback>
 800a098:	e015      	b.n	800a0c6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0a4:	2b40      	cmp	r3, #64	; 0x40
 800a0a6:	d10b      	bne.n	800a0c0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	691a      	ldr	r2, [r3, #16]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b2:	b2d2      	uxtb	r2, r2
 800a0b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ba:	1c5a      	adds	r2, r3, #1
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f7fe ff35 	bl	8008f30 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	f003 0301 	and.w	r3, r3, #1
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d10e      	bne.n	800a0f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d109      	bne.n	800a0f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d104      	bne.n	800a0f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d007      	beq.n	800a104 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	685a      	ldr	r2, [r3, #4]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a102:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a10a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a110:	f003 0304 	and.w	r3, r3, #4
 800a114:	2b04      	cmp	r3, #4
 800a116:	d113      	bne.n	800a140 <I2C_ITError+0x254>
 800a118:	7bfb      	ldrb	r3, [r7, #15]
 800a11a:	2b28      	cmp	r3, #40	; 0x28
 800a11c:	d110      	bne.n	800a140 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a0a      	ldr	r2, [pc, #40]	; (800a14c <I2C_ITError+0x260>)
 800a122:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2220      	movs	r2, #32
 800a12e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7fe fee6 	bl	8008f0c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a140:	bf00      	nop
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	0800a665 	.word	0x0800a665
 800a14c:	ffff0000 	.word	0xffff0000

0800a150 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b088      	sub	sp, #32
 800a154:	af02      	add	r7, sp, #8
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	4608      	mov	r0, r1
 800a15a:	4611      	mov	r1, r2
 800a15c:	461a      	mov	r2, r3
 800a15e:	4603      	mov	r3, r0
 800a160:	817b      	strh	r3, [r7, #10]
 800a162:	460b      	mov	r3, r1
 800a164:	813b      	strh	r3, [r7, #8]
 800a166:	4613      	mov	r3, r2
 800a168:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a178:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	6a3b      	ldr	r3, [r7, #32]
 800a180:	2200      	movs	r2, #0
 800a182:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f000 fb14 	bl	800a7b4 <I2C_WaitOnFlagUntilTimeout>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d00d      	beq.n	800a1ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a19c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1a0:	d103      	bne.n	800a1aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	e05f      	b.n	800a26e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a1ae:	897b      	ldrh	r3, [r7, #10]
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a1bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	6a3a      	ldr	r2, [r7, #32]
 800a1c2:	492d      	ldr	r1, [pc, #180]	; (800a278 <I2C_RequestMemoryWrite+0x128>)
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f000 fb6f 	bl	800a8a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d001      	beq.n	800a1d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e04c      	b.n	800a26e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	617b      	str	r3, [r7, #20]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	695b      	ldr	r3, [r3, #20]
 800a1de:	617b      	str	r3, [r7, #20]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	699b      	ldr	r3, [r3, #24]
 800a1e6:	617b      	str	r3, [r7, #20]
 800a1e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a1ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ec:	6a39      	ldr	r1, [r7, #32]
 800a1ee:	68f8      	ldr	r0, [r7, #12]
 800a1f0:	f000 fbfa 	bl	800a9e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00d      	beq.n	800a216 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1fe:	2b04      	cmp	r3, #4
 800a200:	d107      	bne.n	800a212 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a210:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	e02b      	b.n	800a26e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a216:	88fb      	ldrh	r3, [r7, #6]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d105      	bne.n	800a228 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a21c:	893b      	ldrh	r3, [r7, #8]
 800a21e:	b2da      	uxtb	r2, r3
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	611a      	str	r2, [r3, #16]
 800a226:	e021      	b.n	800a26c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a228:	893b      	ldrh	r3, [r7, #8]
 800a22a:	0a1b      	lsrs	r3, r3, #8
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	b2da      	uxtb	r2, r3
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a238:	6a39      	ldr	r1, [r7, #32]
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f000 fbd4 	bl	800a9e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d00d      	beq.n	800a262 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a24a:	2b04      	cmp	r3, #4
 800a24c:	d107      	bne.n	800a25e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a25c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	e005      	b.n	800a26e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a262:	893b      	ldrh	r3, [r7, #8]
 800a264:	b2da      	uxtb	r2, r3
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3718      	adds	r7, #24
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	00010002 	.word	0x00010002

0800a27c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b088      	sub	sp, #32
 800a280:	af02      	add	r7, sp, #8
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	4608      	mov	r0, r1
 800a286:	4611      	mov	r1, r2
 800a288:	461a      	mov	r2, r3
 800a28a:	4603      	mov	r3, r0
 800a28c:	817b      	strh	r3, [r7, #10]
 800a28e:	460b      	mov	r3, r1
 800a290:	813b      	strh	r3, [r7, #8]
 800a292:	4613      	mov	r3, r2
 800a294:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a2a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b8:	9300      	str	r3, [sp, #0]
 800a2ba:	6a3b      	ldr	r3, [r7, #32]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f000 fa76 	bl	800a7b4 <I2C_WaitOnFlagUntilTimeout>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00d      	beq.n	800a2ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2dc:	d103      	bne.n	800a2e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	e0aa      	b.n	800a440 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a2ea:	897b      	ldrh	r3, [r7, #10]
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a2f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fc:	6a3a      	ldr	r2, [r7, #32]
 800a2fe:	4952      	ldr	r1, [pc, #328]	; (800a448 <I2C_RequestMemoryRead+0x1cc>)
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f000 fad1 	bl	800a8a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a306:	4603      	mov	r3, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d001      	beq.n	800a310 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a30c:	2301      	movs	r3, #1
 800a30e:	e097      	b.n	800a440 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a310:	2300      	movs	r3, #0
 800a312:	617b      	str	r3, [r7, #20]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	695b      	ldr	r3, [r3, #20]
 800a31a:	617b      	str	r3, [r7, #20]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	699b      	ldr	r3, [r3, #24]
 800a322:	617b      	str	r3, [r7, #20]
 800a324:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a328:	6a39      	ldr	r1, [r7, #32]
 800a32a:	68f8      	ldr	r0, [r7, #12]
 800a32c:	f000 fb5c 	bl	800a9e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00d      	beq.n	800a352 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33a:	2b04      	cmp	r3, #4
 800a33c:	d107      	bne.n	800a34e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a34c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	e076      	b.n	800a440 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a352:	88fb      	ldrh	r3, [r7, #6]
 800a354:	2b01      	cmp	r3, #1
 800a356:	d105      	bne.n	800a364 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a358:	893b      	ldrh	r3, [r7, #8]
 800a35a:	b2da      	uxtb	r2, r3
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	611a      	str	r2, [r3, #16]
 800a362:	e021      	b.n	800a3a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a364:	893b      	ldrh	r3, [r7, #8]
 800a366:	0a1b      	lsrs	r3, r3, #8
 800a368:	b29b      	uxth	r3, r3
 800a36a:	b2da      	uxtb	r2, r3
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a374:	6a39      	ldr	r1, [r7, #32]
 800a376:	68f8      	ldr	r0, [r7, #12]
 800a378:	f000 fb36 	bl	800a9e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00d      	beq.n	800a39e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a386:	2b04      	cmp	r3, #4
 800a388:	d107      	bne.n	800a39a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a398:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	e050      	b.n	800a440 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a39e:	893b      	ldrh	r3, [r7, #8]
 800a3a0:	b2da      	uxtb	r2, r3
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3aa:	6a39      	ldr	r1, [r7, #32]
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f000 fb1b 	bl	800a9e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d00d      	beq.n	800a3d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3bc:	2b04      	cmp	r3, #4
 800a3be:	d107      	bne.n	800a3d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	e035      	b.n	800a440 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e6:	9300      	str	r3, [sp, #0]
 800a3e8:	6a3b      	ldr	r3, [r7, #32]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f000 f9df 	bl	800a7b4 <I2C_WaitOnFlagUntilTimeout>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00d      	beq.n	800a418 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a40a:	d103      	bne.n	800a414 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a412:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a414:	2303      	movs	r3, #3
 800a416:	e013      	b.n	800a440 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a418:	897b      	ldrh	r3, [r7, #10]
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	f043 0301 	orr.w	r3, r3, #1
 800a420:	b2da      	uxtb	r2, r3
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42a:	6a3a      	ldr	r2, [r7, #32]
 800a42c:	4906      	ldr	r1, [pc, #24]	; (800a448 <I2C_RequestMemoryRead+0x1cc>)
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f000 fa3a 	bl	800a8a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d001      	beq.n	800a43e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	e000      	b.n	800a440 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3718      	adds	r7, #24
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}
 800a448:	00010002 	.word	0x00010002

0800a44c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b086      	sub	sp, #24
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a458:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a460:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a468:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a46e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a47e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a484:	2b00      	cmp	r3, #0
 800a486:	d003      	beq.n	800a490 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a48c:	2200      	movs	r2, #0
 800a48e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a494:	2b00      	cmp	r3, #0
 800a496:	d003      	beq.n	800a4a0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a49c:	2200      	movs	r2, #0
 800a49e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800a4a0:	7cfb      	ldrb	r3, [r7, #19]
 800a4a2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800a4a6:	2b21      	cmp	r3, #33	; 0x21
 800a4a8:	d007      	beq.n	800a4ba <I2C_DMAXferCplt+0x6e>
 800a4aa:	7cfb      	ldrb	r3, [r7, #19]
 800a4ac:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800a4b0:	2b22      	cmp	r3, #34	; 0x22
 800a4b2:	d131      	bne.n	800a518 <I2C_DMAXferCplt+0xcc>
 800a4b4:	7cbb      	ldrb	r3, [r7, #18]
 800a4b6:	2b20      	cmp	r3, #32
 800a4b8:	d12e      	bne.n	800a518 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	685a      	ldr	r2, [r3, #4]
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4c8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a4d0:	7cfb      	ldrb	r3, [r7, #19]
 800a4d2:	2b29      	cmp	r3, #41	; 0x29
 800a4d4:	d10a      	bne.n	800a4ec <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	2221      	movs	r2, #33	; 0x21
 800a4da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	2228      	movs	r2, #40	; 0x28
 800a4e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a4e4:	6978      	ldr	r0, [r7, #20]
 800a4e6:	f7fe fcf2 	bl	8008ece <HAL_I2C_SlaveTxCpltCallback>
 800a4ea:	e00c      	b.n	800a506 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a4ec:	7cfb      	ldrb	r3, [r7, #19]
 800a4ee:	2b2a      	cmp	r3, #42	; 0x2a
 800a4f0:	d109      	bne.n	800a506 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	2222      	movs	r2, #34	; 0x22
 800a4f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	2228      	movs	r2, #40	; 0x28
 800a4fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a500:	6978      	ldr	r0, [r7, #20]
 800a502:	f7fe fced 	bl	8008ee0 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	685a      	ldr	r2, [r3, #4]
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800a514:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800a516:	e06a      	b.n	800a5ee <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	2b00      	cmp	r3, #0
 800a522:	d064      	beq.n	800a5ee <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a528:	b29b      	uxth	r3, r3
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d107      	bne.n	800a53e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a53c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	685a      	ldr	r2, [r3, #4]
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a54c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a554:	d009      	beq.n	800a56a <I2C_DMAXferCplt+0x11e>
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2b08      	cmp	r3, #8
 800a55a:	d006      	beq.n	800a56a <I2C_DMAXferCplt+0x11e>
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a562:	d002      	beq.n	800a56a <I2C_DMAXferCplt+0x11e>
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2b20      	cmp	r3, #32
 800a568:	d107      	bne.n	800a57a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a578:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	685a      	ldr	r2, [r3, #4]
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a588:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	685a      	ldr	r2, [r3, #4]
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a598:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	2200      	movs	r2, #0
 800a59e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d003      	beq.n	800a5b0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800a5a8:	6978      	ldr	r0, [r7, #20]
 800a5aa:	f7fe fcc1 	bl	8008f30 <HAL_I2C_ErrorCallback>
}
 800a5ae:	e01e      	b.n	800a5ee <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	2220      	movs	r2, #32
 800a5b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	2b40      	cmp	r3, #64	; 0x40
 800a5c2:	d10a      	bne.n	800a5da <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800a5d2:	6978      	ldr	r0, [r7, #20]
 800a5d4:	f7fe fca3 	bl	8008f1e <HAL_I2C_MemRxCpltCallback>
}
 800a5d8:	e009      	b.n	800a5ee <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	2212      	movs	r2, #18
 800a5e6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800a5e8:	6978      	ldr	r0, [r7, #20]
 800a5ea:	f7fe fc67 	bl	8008ebc <HAL_I2C_MasterRxCpltCallback>
}
 800a5ee:	bf00      	nop
 800a5f0:	3718      	adds	r7, #24
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b084      	sub	sp, #16
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a602:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d003      	beq.n	800a614 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a610:	2200      	movs	r2, #0
 800a612:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d003      	beq.n	800a624 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a620:	2200      	movs	r2, #0
 800a622:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a632:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2200      	movs	r2, #0
 800a638:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2220      	movs	r2, #32
 800a63e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2200      	movs	r2, #0
 800a646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a64e:	f043 0210 	orr.w	r2, r3, #16
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f7fe fc6a 	bl	8008f30 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800a65c:	bf00      	nop
 800a65e:	3710      	adds	r7, #16
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b086      	sub	sp, #24
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a66c:	2300      	movs	r3, #0
 800a66e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a674:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a67c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a67e:	4b4b      	ldr	r3, [pc, #300]	; (800a7ac <I2C_DMAAbort+0x148>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	08db      	lsrs	r3, r3, #3
 800a684:	4a4a      	ldr	r2, [pc, #296]	; (800a7b0 <I2C_DMAAbort+0x14c>)
 800a686:	fba2 2303 	umull	r2, r3, r2, r3
 800a68a:	0a1a      	lsrs	r2, r3, #8
 800a68c:	4613      	mov	r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	4413      	add	r3, r2
 800a692:	00da      	lsls	r2, r3, #3
 800a694:	1ad3      	subs	r3, r2, r3
 800a696:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d106      	bne.n	800a6ac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a2:	f043 0220 	orr.w	r2, r3, #32
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800a6aa:	e00a      	b.n	800a6c2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6c0:	d0ea      	beq.n	800a698 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d003      	beq.n	800a6d2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d003      	beq.n	800a6e2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6de:	2200      	movs	r2, #0
 800a6e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6f0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d003      	beq.n	800a708 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a704:	2200      	movs	r2, #0
 800a706:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d003      	beq.n	800a718 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a714:	2200      	movs	r2, #0
 800a716:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f022 0201 	bic.w	r2, r2, #1
 800a726:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	2b60      	cmp	r3, #96	; 0x60
 800a732:	d10e      	bne.n	800a752 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	2220      	movs	r2, #32
 800a738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	2200      	movs	r2, #0
 800a740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	2200      	movs	r2, #0
 800a748:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a74a:	6978      	ldr	r0, [r7, #20]
 800a74c:	f7fe fbf9 	bl	8008f42 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a750:	e027      	b.n	800a7a2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a752:	7cfb      	ldrb	r3, [r7, #19]
 800a754:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a758:	2b28      	cmp	r3, #40	; 0x28
 800a75a:	d117      	bne.n	800a78c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f042 0201 	orr.w	r2, r2, #1
 800a76a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a77a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	2200      	movs	r2, #0
 800a780:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	2228      	movs	r2, #40	; 0x28
 800a786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a78a:	e007      	b.n	800a79c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	2220      	movs	r2, #32
 800a790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	2200      	movs	r2, #0
 800a798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800a79c:	6978      	ldr	r0, [r7, #20]
 800a79e:	f7fe fbc7 	bl	8008f30 <HAL_I2C_ErrorCallback>
}
 800a7a2:	bf00      	nop
 800a7a4:	3718      	adds	r7, #24
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	2000068c 	.word	0x2000068c
 800a7b0:	14f8b589 	.word	0x14f8b589

0800a7b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	603b      	str	r3, [r7, #0]
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a7c4:	e048      	b.n	800a858 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7cc:	d044      	beq.n	800a858 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7ce:	f7fb fd3f 	bl	8006250 <HAL_GetTick>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	1ad3      	subs	r3, r2, r3
 800a7d8:	683a      	ldr	r2, [r7, #0]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d302      	bcc.n	800a7e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d139      	bne.n	800a858 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	0c1b      	lsrs	r3, r3, #16
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d10d      	bne.n	800a80a <I2C_WaitOnFlagUntilTimeout+0x56>
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	695b      	ldr	r3, [r3, #20]
 800a7f4:	43da      	mvns	r2, r3
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	4013      	ands	r3, r2
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	bf0c      	ite	eq
 800a800:	2301      	moveq	r3, #1
 800a802:	2300      	movne	r3, #0
 800a804:	b2db      	uxtb	r3, r3
 800a806:	461a      	mov	r2, r3
 800a808:	e00c      	b.n	800a824 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	699b      	ldr	r3, [r3, #24]
 800a810:	43da      	mvns	r2, r3
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	4013      	ands	r3, r2
 800a816:	b29b      	uxth	r3, r3
 800a818:	2b00      	cmp	r3, #0
 800a81a:	bf0c      	ite	eq
 800a81c:	2301      	moveq	r3, #1
 800a81e:	2300      	movne	r3, #0
 800a820:	b2db      	uxtb	r3, r3
 800a822:	461a      	mov	r2, r3
 800a824:	79fb      	ldrb	r3, [r7, #7]
 800a826:	429a      	cmp	r2, r3
 800a828:	d116      	bne.n	800a858 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2200      	movs	r2, #0
 800a82e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2220      	movs	r2, #32
 800a834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a844:	f043 0220 	orr.w	r2, r3, #32
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2200      	movs	r2, #0
 800a850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	e023      	b.n	800a8a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	0c1b      	lsrs	r3, r3, #16
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d10d      	bne.n	800a87e <I2C_WaitOnFlagUntilTimeout+0xca>
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	695b      	ldr	r3, [r3, #20]
 800a868:	43da      	mvns	r2, r3
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	4013      	ands	r3, r2
 800a86e:	b29b      	uxth	r3, r3
 800a870:	2b00      	cmp	r3, #0
 800a872:	bf0c      	ite	eq
 800a874:	2301      	moveq	r3, #1
 800a876:	2300      	movne	r3, #0
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	461a      	mov	r2, r3
 800a87c:	e00c      	b.n	800a898 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	699b      	ldr	r3, [r3, #24]
 800a884:	43da      	mvns	r2, r3
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	4013      	ands	r3, r2
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	bf0c      	ite	eq
 800a890:	2301      	moveq	r3, #1
 800a892:	2300      	movne	r3, #0
 800a894:	b2db      	uxtb	r3, r3
 800a896:	461a      	mov	r2, r3
 800a898:	79fb      	ldrb	r3, [r7, #7]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d093      	beq.n	800a7c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a89e:	2300      	movs	r3, #0
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
 800a8b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a8b6:	e071      	b.n	800a99c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	695b      	ldr	r3, [r3, #20]
 800a8be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8c6:	d123      	bne.n	800a910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a8e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2220      	movs	r2, #32
 800a8ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8fc:	f043 0204 	orr.w	r2, r3, #4
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a90c:	2301      	movs	r3, #1
 800a90e:	e067      	b.n	800a9e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a916:	d041      	beq.n	800a99c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a918:	f7fb fc9a 	bl	8006250 <HAL_GetTick>
 800a91c:	4602      	mov	r2, r0
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	429a      	cmp	r2, r3
 800a926:	d302      	bcc.n	800a92e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d136      	bne.n	800a99c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	0c1b      	lsrs	r3, r3, #16
 800a932:	b2db      	uxtb	r3, r3
 800a934:	2b01      	cmp	r3, #1
 800a936:	d10c      	bne.n	800a952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	695b      	ldr	r3, [r3, #20]
 800a93e:	43da      	mvns	r2, r3
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	4013      	ands	r3, r2
 800a944:	b29b      	uxth	r3, r3
 800a946:	2b00      	cmp	r3, #0
 800a948:	bf14      	ite	ne
 800a94a:	2301      	movne	r3, #1
 800a94c:	2300      	moveq	r3, #0
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	e00b      	b.n	800a96a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	699b      	ldr	r3, [r3, #24]
 800a958:	43da      	mvns	r2, r3
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	4013      	ands	r3, r2
 800a95e:	b29b      	uxth	r3, r3
 800a960:	2b00      	cmp	r3, #0
 800a962:	bf14      	ite	ne
 800a964:	2301      	movne	r3, #1
 800a966:	2300      	moveq	r3, #0
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d016      	beq.n	800a99c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2200      	movs	r2, #0
 800a972:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2220      	movs	r2, #32
 800a978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a988:	f043 0220 	orr.w	r2, r3, #32
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2200      	movs	r2, #0
 800a994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	e021      	b.n	800a9e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	0c1b      	lsrs	r3, r3, #16
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d10c      	bne.n	800a9c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	695b      	ldr	r3, [r3, #20]
 800a9ac:	43da      	mvns	r2, r3
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	bf14      	ite	ne
 800a9b8:	2301      	movne	r3, #1
 800a9ba:	2300      	moveq	r3, #0
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	e00b      	b.n	800a9d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	43da      	mvns	r2, r3
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	4013      	ands	r3, r2
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	bf14      	ite	ne
 800a9d2:	2301      	movne	r3, #1
 800a9d4:	2300      	moveq	r3, #0
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f47f af6d 	bne.w	800a8b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a9f4:	e034      	b.n	800aa60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f000 f915 	bl	800ac26 <I2C_IsAcknowledgeFailed>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d001      	beq.n	800aa06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800aa02:	2301      	movs	r3, #1
 800aa04:	e034      	b.n	800aa70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa0c:	d028      	beq.n	800aa60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa0e:	f7fb fc1f 	bl	8006250 <HAL_GetTick>
 800aa12:	4602      	mov	r2, r0
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	1ad3      	subs	r3, r2, r3
 800aa18:	68ba      	ldr	r2, [r7, #8]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d302      	bcc.n	800aa24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d11d      	bne.n	800aa60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	695b      	ldr	r3, [r3, #20]
 800aa2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa2e:	2b80      	cmp	r3, #128	; 0x80
 800aa30:	d016      	beq.n	800aa60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2220      	movs	r2, #32
 800aa3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4c:	f043 0220 	orr.w	r2, r3, #32
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e007      	b.n	800aa70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	695b      	ldr	r3, [r3, #20]
 800aa66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa6a:	2b80      	cmp	r3, #128	; 0x80
 800aa6c:	d1c3      	bne.n	800a9f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800aa6e:	2300      	movs	r3, #0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800aa84:	e034      	b.n	800aaf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	f000 f8cd 	bl	800ac26 <I2C_IsAcknowledgeFailed>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d001      	beq.n	800aa96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	e034      	b.n	800ab00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9c:	d028      	beq.n	800aaf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa9e:	f7fb fbd7 	bl	8006250 <HAL_GetTick>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	1ad3      	subs	r3, r2, r3
 800aaa8:	68ba      	ldr	r2, [r7, #8]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d302      	bcc.n	800aab4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d11d      	bne.n	800aaf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	695b      	ldr	r3, [r3, #20]
 800aaba:	f003 0304 	and.w	r3, r3, #4
 800aabe:	2b04      	cmp	r3, #4
 800aac0:	d016      	beq.n	800aaf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2200      	movs	r2, #0
 800aac6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2220      	movs	r2, #32
 800aacc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aadc:	f043 0220 	orr.w	r2, r3, #32
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800aaec:	2301      	movs	r3, #1
 800aaee:	e007      	b.n	800ab00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	695b      	ldr	r3, [r3, #20]
 800aaf6:	f003 0304 	and.w	r3, r3, #4
 800aafa:	2b04      	cmp	r3, #4
 800aafc:	d1c3      	bne.n	800aa86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3710      	adds	r7, #16
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab10:	2300      	movs	r3, #0
 800ab12:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800ab14:	4b13      	ldr	r3, [pc, #76]	; (800ab64 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	08db      	lsrs	r3, r3, #3
 800ab1a:	4a13      	ldr	r2, [pc, #76]	; (800ab68 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800ab1c:	fba2 2303 	umull	r2, r3, r2, r3
 800ab20:	0a1a      	lsrs	r2, r3, #8
 800ab22:	4613      	mov	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4413      	add	r3, r2
 800ab28:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d107      	bne.n	800ab46 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3a:	f043 0220 	orr.w	r2, r3, #32
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ab42:	2301      	movs	r3, #1
 800ab44:	e008      	b.n	800ab58 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab54:	d0e9      	beq.n	800ab2a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3714      	adds	r7, #20
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bc80      	pop	{r7}
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	2000068c 	.word	0x2000068c
 800ab68:	14f8b589 	.word	0x14f8b589

0800ab6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ab78:	e049      	b.n	800ac0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	695b      	ldr	r3, [r3, #20]
 800ab80:	f003 0310 	and.w	r3, r3, #16
 800ab84:	2b10      	cmp	r3, #16
 800ab86:	d119      	bne.n	800abbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f06f 0210 	mvn.w	r2, #16
 800ab90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2200      	movs	r2, #0
 800ab96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2220      	movs	r2, #32
 800ab9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800abb8:	2301      	movs	r3, #1
 800abba:	e030      	b.n	800ac1e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abbc:	f7fb fb48 	bl	8006250 <HAL_GetTick>
 800abc0:	4602      	mov	r2, r0
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	1ad3      	subs	r3, r2, r3
 800abc6:	68ba      	ldr	r2, [r7, #8]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d302      	bcc.n	800abd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d11d      	bne.n	800ac0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	695b      	ldr	r3, [r3, #20]
 800abd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abdc:	2b40      	cmp	r3, #64	; 0x40
 800abde:	d016      	beq.n	800ac0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2200      	movs	r2, #0
 800abe4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2220      	movs	r2, #32
 800abea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2200      	movs	r2, #0
 800abf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abfa:	f043 0220 	orr.w	r2, r3, #32
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2200      	movs	r2, #0
 800ac06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e007      	b.n	800ac1e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	695b      	ldr	r3, [r3, #20]
 800ac14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac18:	2b40      	cmp	r3, #64	; 0x40
 800ac1a:	d1ae      	bne.n	800ab7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ac1c:	2300      	movs	r3, #0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3710      	adds	r7, #16
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ac26:	b480      	push	{r7}
 800ac28:	b083      	sub	sp, #12
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	695b      	ldr	r3, [r3, #20]
 800ac34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac3c:	d11b      	bne.n	800ac76 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ac46:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2220      	movs	r2, #32
 800ac52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac62:	f043 0204 	orr.w	r2, r3, #4
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ac72:	2301      	movs	r3, #1
 800ac74:	e000      	b.n	800ac78 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bc80      	pop	{r7}
 800ac80:	4770      	bx	lr

0800ac82 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800ac82:	b480      	push	{r7}
 800ac84:	b083      	sub	sp, #12
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac8e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ac92:	d103      	bne.n	800ac9c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2201      	movs	r2, #1
 800ac98:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800ac9a:	e007      	b.n	800acac <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800aca4:	d102      	bne.n	800acac <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2208      	movs	r2, #8
 800acaa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800acac:	bf00      	nop
 800acae:	370c      	adds	r7, #12
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bc80      	pop	{r7}
 800acb4:	4770      	bx	lr

0800acb6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800acb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acb8:	b08b      	sub	sp, #44	; 0x2c
 800acba:	af06      	add	r7, sp, #24
 800acbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d101      	bne.n	800acc8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	e0f1      	b.n	800aeac <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d106      	bne.n	800ace2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f007 fc5d 	bl	801259c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2203      	movs	r2, #3
 800ace6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4618      	mov	r0, r3
 800acf0:	f003 fb30 	bl	800e354 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	603b      	str	r3, [r7, #0]
 800acfa:	687e      	ldr	r6, [r7, #4]
 800acfc:	466d      	mov	r5, sp
 800acfe:	f106 0410 	add.w	r4, r6, #16
 800ad02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad06:	6823      	ldr	r3, [r4, #0]
 800ad08:	602b      	str	r3, [r5, #0]
 800ad0a:	1d33      	adds	r3, r6, #4
 800ad0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad0e:	6838      	ldr	r0, [r7, #0]
 800ad10:	f003 fafa 	bl	800e308 <USB_CoreInit>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d005      	beq.n	800ad26 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2202      	movs	r2, #2
 800ad1e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	e0c2      	b.n	800aeac <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2100      	movs	r1, #0
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f003 fb2b 	bl	800e388 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad32:	2300      	movs	r3, #0
 800ad34:	73fb      	strb	r3, [r7, #15]
 800ad36:	e040      	b.n	800adba <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ad38:	7bfb      	ldrb	r3, [r7, #15]
 800ad3a:	6879      	ldr	r1, [r7, #4]
 800ad3c:	1c5a      	adds	r2, r3, #1
 800ad3e:	4613      	mov	r3, r2
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	4413      	add	r3, r2
 800ad44:	00db      	lsls	r3, r3, #3
 800ad46:	440b      	add	r3, r1
 800ad48:	3301      	adds	r3, #1
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ad4e:	7bfb      	ldrb	r3, [r7, #15]
 800ad50:	6879      	ldr	r1, [r7, #4]
 800ad52:	1c5a      	adds	r2, r3, #1
 800ad54:	4613      	mov	r3, r2
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	4413      	add	r3, r2
 800ad5a:	00db      	lsls	r3, r3, #3
 800ad5c:	440b      	add	r3, r1
 800ad5e:	7bfa      	ldrb	r2, [r7, #15]
 800ad60:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ad62:	7bfb      	ldrb	r3, [r7, #15]
 800ad64:	6879      	ldr	r1, [r7, #4]
 800ad66:	1c5a      	adds	r2, r3, #1
 800ad68:	4613      	mov	r3, r2
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	4413      	add	r3, r2
 800ad6e:	00db      	lsls	r3, r3, #3
 800ad70:	440b      	add	r3, r1
 800ad72:	3303      	adds	r3, #3
 800ad74:	2200      	movs	r2, #0
 800ad76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ad78:	7bfa      	ldrb	r2, [r7, #15]
 800ad7a:	6879      	ldr	r1, [r7, #4]
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4413      	add	r3, r2
 800ad82:	00db      	lsls	r3, r3, #3
 800ad84:	440b      	add	r3, r1
 800ad86:	3338      	adds	r3, #56	; 0x38
 800ad88:	2200      	movs	r2, #0
 800ad8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ad8c:	7bfa      	ldrb	r2, [r7, #15]
 800ad8e:	6879      	ldr	r1, [r7, #4]
 800ad90:	4613      	mov	r3, r2
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	4413      	add	r3, r2
 800ad96:	00db      	lsls	r3, r3, #3
 800ad98:	440b      	add	r3, r1
 800ad9a:	333c      	adds	r3, #60	; 0x3c
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ada0:	7bfa      	ldrb	r2, [r7, #15]
 800ada2:	6879      	ldr	r1, [r7, #4]
 800ada4:	4613      	mov	r3, r2
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	4413      	add	r3, r2
 800adaa:	00db      	lsls	r3, r3, #3
 800adac:	440b      	add	r3, r1
 800adae:	3340      	adds	r3, #64	; 0x40
 800adb0:	2200      	movs	r2, #0
 800adb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800adb4:	7bfb      	ldrb	r3, [r7, #15]
 800adb6:	3301      	adds	r3, #1
 800adb8:	73fb      	strb	r3, [r7, #15]
 800adba:	7bfa      	ldrb	r2, [r7, #15]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d3b9      	bcc.n	800ad38 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800adc4:	2300      	movs	r3, #0
 800adc6:	73fb      	strb	r3, [r7, #15]
 800adc8:	e044      	b.n	800ae54 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800adca:	7bfa      	ldrb	r2, [r7, #15]
 800adcc:	6879      	ldr	r1, [r7, #4]
 800adce:	4613      	mov	r3, r2
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	4413      	add	r3, r2
 800add4:	00db      	lsls	r3, r3, #3
 800add6:	440b      	add	r3, r1
 800add8:	f203 1369 	addw	r3, r3, #361	; 0x169
 800addc:	2200      	movs	r2, #0
 800adde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ade0:	7bfa      	ldrb	r2, [r7, #15]
 800ade2:	6879      	ldr	r1, [r7, #4]
 800ade4:	4613      	mov	r3, r2
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	4413      	add	r3, r2
 800adea:	00db      	lsls	r3, r3, #3
 800adec:	440b      	add	r3, r1
 800adee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800adf2:	7bfa      	ldrb	r2, [r7, #15]
 800adf4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800adf6:	7bfa      	ldrb	r2, [r7, #15]
 800adf8:	6879      	ldr	r1, [r7, #4]
 800adfa:	4613      	mov	r3, r2
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	4413      	add	r3, r2
 800ae00:	00db      	lsls	r3, r3, #3
 800ae02:	440b      	add	r3, r1
 800ae04:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800ae08:	2200      	movs	r2, #0
 800ae0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ae0c:	7bfa      	ldrb	r2, [r7, #15]
 800ae0e:	6879      	ldr	r1, [r7, #4]
 800ae10:	4613      	mov	r3, r2
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	4413      	add	r3, r2
 800ae16:	00db      	lsls	r3, r3, #3
 800ae18:	440b      	add	r3, r1
 800ae1a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ae1e:	2200      	movs	r2, #0
 800ae20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ae22:	7bfa      	ldrb	r2, [r7, #15]
 800ae24:	6879      	ldr	r1, [r7, #4]
 800ae26:	4613      	mov	r3, r2
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	4413      	add	r3, r2
 800ae2c:	00db      	lsls	r3, r3, #3
 800ae2e:	440b      	add	r3, r1
 800ae30:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ae34:	2200      	movs	r2, #0
 800ae36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ae38:	7bfa      	ldrb	r2, [r7, #15]
 800ae3a:	6879      	ldr	r1, [r7, #4]
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	4413      	add	r3, r2
 800ae42:	00db      	lsls	r3, r3, #3
 800ae44:	440b      	add	r3, r1
 800ae46:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae4e:	7bfb      	ldrb	r3, [r7, #15]
 800ae50:	3301      	adds	r3, #1
 800ae52:	73fb      	strb	r3, [r7, #15]
 800ae54:	7bfa      	ldrb	r2, [r7, #15]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d3b5      	bcc.n	800adca <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	603b      	str	r3, [r7, #0]
 800ae64:	687e      	ldr	r6, [r7, #4]
 800ae66:	466d      	mov	r5, sp
 800ae68:	f106 0410 	add.w	r4, r6, #16
 800ae6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ae70:	6823      	ldr	r3, [r4, #0]
 800ae72:	602b      	str	r3, [r5, #0]
 800ae74:	1d33      	adds	r3, r6, #4
 800ae76:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ae78:	6838      	ldr	r0, [r7, #0]
 800ae7a:	f003 fa91 	bl	800e3a0 <USB_DevInit>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d005      	beq.n	800ae90 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2202      	movs	r2, #2
 800ae88:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	e00d      	b.n	800aeac <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4618      	mov	r0, r3
 800aea6:	f005 fd12 	bl	80108ce <USB_DevDisconnect>

  return HAL_OK;
 800aeaa:	2300      	movs	r3, #0
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3714      	adds	r7, #20
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aeb4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b082      	sub	sp, #8
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d101      	bne.n	800aeca <HAL_PCD_Start+0x16>
 800aec6:	2302      	movs	r3, #2
 800aec8:	e016      	b.n	800aef8 <HAL_PCD_Start+0x44>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4618      	mov	r0, r3
 800aed8:	f003 fa26 	bl	800e328 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800aedc:	2101      	movs	r1, #1
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f007 fdc7 	bl	8012a72 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4618      	mov	r0, r3
 800aeea:	f005 fce6 	bl	80108ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800aef6:	2300      	movs	r3, #0
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3708      	adds	r7, #8
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b088      	sub	sp, #32
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f005 fce8 	bl	80108e2 <USB_ReadInterrupts>
 800af12:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d003      	beq.n	800af26 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 fb1b 	bl	800b55a <PCD_EP_ISR_Handler>

    return;
 800af24:	e119      	b.n	800b15a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d013      	beq.n	800af58 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800af38:	b29a      	uxth	r2, r3
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af42:	b292      	uxth	r2, r2
 800af44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f007 fb9a 	bl	8012682 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800af4e:	2100      	movs	r1, #0
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 f905 	bl	800b160 <HAL_PCD_SetAddress>

    return;
 800af56:	e100      	b.n	800b15a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00c      	beq.n	800af7c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800af6a:	b29a      	uxth	r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800af74:	b292      	uxth	r2, r2
 800af76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800af7a:	e0ee      	b.n	800b15a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800af7c:	69bb      	ldr	r3, [r7, #24]
 800af7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00c      	beq.n	800afa0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800af8e:	b29a      	uxth	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af98:	b292      	uxth	r2, r2
 800af9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800af9e:	e0dc      	b.n	800b15a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800afa0:	69bb      	ldr	r3, [r7, #24]
 800afa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d027      	beq.n	800affa <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800afb2:	b29a      	uxth	r2, r3
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f022 0204 	bic.w	r2, r2, #4
 800afbc:	b292      	uxth	r2, r2
 800afbe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800afca:	b29a      	uxth	r2, r3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f022 0208 	bic.w	r2, r2, #8
 800afd4:	b292      	uxth	r2, r2
 800afd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f007 fb8a 	bl	80126f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800afe8:	b29a      	uxth	r2, r3
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800aff2:	b292      	uxth	r2, r2
 800aff4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800aff8:	e0af      	b.n	800b15a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800affa:	69bb      	ldr	r3, [r7, #24]
 800affc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b000:	2b00      	cmp	r3, #0
 800b002:	f000 8083 	beq.w	800b10c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800b006:	2300      	movs	r3, #0
 800b008:	77fb      	strb	r3, [r7, #31]
 800b00a:	e010      	b.n	800b02e <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	461a      	mov	r2, r3
 800b012:	7ffb      	ldrb	r3, [r7, #31]
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	441a      	add	r2, r3
 800b018:	7ffb      	ldrb	r3, [r7, #31]
 800b01a:	8812      	ldrh	r2, [r2, #0]
 800b01c:	b292      	uxth	r2, r2
 800b01e:	005b      	lsls	r3, r3, #1
 800b020:	3320      	adds	r3, #32
 800b022:	443b      	add	r3, r7
 800b024:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800b028:	7ffb      	ldrb	r3, [r7, #31]
 800b02a:	3301      	adds	r3, #1
 800b02c:	77fb      	strb	r3, [r7, #31]
 800b02e:	7ffb      	ldrb	r3, [r7, #31]
 800b030:	2b07      	cmp	r3, #7
 800b032:	d9eb      	bls.n	800b00c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b03c:	b29a      	uxth	r2, r3
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f042 0201 	orr.w	r2, r2, #1
 800b046:	b292      	uxth	r2, r2
 800b048:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b054:	b29a      	uxth	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f022 0201 	bic.w	r2, r2, #1
 800b05e:	b292      	uxth	r2, r2
 800b060:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800b064:	bf00      	nop
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b06e:	b29b      	uxth	r3, r3
 800b070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b074:	2b00      	cmp	r3, #0
 800b076:	d0f6      	beq.n	800b066 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b080:	b29a      	uxth	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b08a:	b292      	uxth	r2, r2
 800b08c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800b090:	2300      	movs	r3, #0
 800b092:	77fb      	strb	r3, [r7, #31]
 800b094:	e00f      	b.n	800b0b6 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800b096:	7ffb      	ldrb	r3, [r7, #31]
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	6812      	ldr	r2, [r2, #0]
 800b09c:	4611      	mov	r1, r2
 800b09e:	7ffa      	ldrb	r2, [r7, #31]
 800b0a0:	0092      	lsls	r2, r2, #2
 800b0a2:	440a      	add	r2, r1
 800b0a4:	005b      	lsls	r3, r3, #1
 800b0a6:	3320      	adds	r3, #32
 800b0a8:	443b      	add	r3, r7
 800b0aa:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800b0ae:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800b0b0:	7ffb      	ldrb	r3, [r7, #31]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	77fb      	strb	r3, [r7, #31]
 800b0b6:	7ffb      	ldrb	r3, [r7, #31]
 800b0b8:	2b07      	cmp	r3, #7
 800b0ba:	d9ec      	bls.n	800b096 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b0c4:	b29a      	uxth	r2, r3
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f042 0208 	orr.w	r2, r2, #8
 800b0ce:	b292      	uxth	r2, r2
 800b0d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b0e6:	b292      	uxth	r2, r2
 800b0e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b0f4:	b29a      	uxth	r2, r3
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f042 0204 	orr.w	r2, r2, #4
 800b0fe:	b292      	uxth	r2, r2
 800b100:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f007 fadb 	bl	80126c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b10a:	e026      	b.n	800b15a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00f      	beq.n	800b136 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b11e:	b29a      	uxth	r2, r3
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b128:	b292      	uxth	r2, r2
 800b12a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f007 fa99 	bl	8012666 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b134:	e011      	b.n	800b15a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d00c      	beq.n	800b15a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b148:	b29a      	uxth	r2, r3
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b152:	b292      	uxth	r2, r2
 800b154:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b158:	bf00      	nop
  }
}
 800b15a:	3720      	adds	r7, #32
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	460b      	mov	r3, r1
 800b16a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b172:	2b01      	cmp	r3, #1
 800b174:	d101      	bne.n	800b17a <HAL_PCD_SetAddress+0x1a>
 800b176:	2302      	movs	r3, #2
 800b178:	e013      	b.n	800b1a2 <HAL_PCD_SetAddress+0x42>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2201      	movs	r2, #1
 800b17e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	78fa      	ldrb	r2, [r7, #3]
 800b186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	78fa      	ldrb	r2, [r7, #3]
 800b190:	4611      	mov	r1, r2
 800b192:	4618      	mov	r0, r3
 800b194:	f005 fb7e 	bl	8010894 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2200      	movs	r2, #0
 800b19c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3708      	adds	r7, #8
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b084      	sub	sp, #16
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
 800b1b2:	4608      	mov	r0, r1
 800b1b4:	4611      	mov	r1, r2
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	70fb      	strb	r3, [r7, #3]
 800b1bc:	460b      	mov	r3, r1
 800b1be:	803b      	strh	r3, [r7, #0]
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b1c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	da0e      	bge.n	800b1ee <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b1d0:	78fb      	ldrb	r3, [r7, #3]
 800b1d2:	f003 0307 	and.w	r3, r3, #7
 800b1d6:	1c5a      	adds	r2, r3, #1
 800b1d8:	4613      	mov	r3, r2
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	4413      	add	r3, r2
 800b1de:	00db      	lsls	r3, r3, #3
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	705a      	strb	r2, [r3, #1]
 800b1ec:	e00e      	b.n	800b20c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b1ee:	78fb      	ldrb	r3, [r7, #3]
 800b1f0:	f003 0207 	and.w	r2, r3, #7
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	4413      	add	r3, r2
 800b1fa:	00db      	lsls	r3, r3, #3
 800b1fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	4413      	add	r3, r2
 800b204:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2200      	movs	r2, #0
 800b20a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b20c:	78fb      	ldrb	r3, [r7, #3]
 800b20e:	f003 0307 	and.w	r3, r3, #7
 800b212:	b2da      	uxtb	r2, r3
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b218:	883a      	ldrh	r2, [r7, #0]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	78ba      	ldrb	r2, [r7, #2]
 800b222:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b224:	78bb      	ldrb	r3, [r7, #2]
 800b226:	2b02      	cmp	r3, #2
 800b228:	d102      	bne.n	800b230 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2200      	movs	r2, #0
 800b22e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b236:	2b01      	cmp	r3, #1
 800b238:	d101      	bne.n	800b23e <HAL_PCD_EP_Open+0x94>
 800b23a:	2302      	movs	r3, #2
 800b23c:	e00e      	b.n	800b25c <HAL_PCD_EP_Open+0xb2>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2201      	movs	r2, #1
 800b242:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68f9      	ldr	r1, [r7, #12]
 800b24c:	4618      	mov	r0, r3
 800b24e:	f003 f8c7 	bl	800e3e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2200      	movs	r2, #0
 800b256:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800b25a:	7afb      	ldrb	r3, [r7, #11]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3710      	adds	r7, #16
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	460b      	mov	r3, r1
 800b26e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b274:	2b00      	cmp	r3, #0
 800b276:	da0e      	bge.n	800b296 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b278:	78fb      	ldrb	r3, [r7, #3]
 800b27a:	f003 0307 	and.w	r3, r3, #7
 800b27e:	1c5a      	adds	r2, r3, #1
 800b280:	4613      	mov	r3, r2
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	4413      	add	r3, r2
 800b286:	00db      	lsls	r3, r3, #3
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	4413      	add	r3, r2
 800b28c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2201      	movs	r2, #1
 800b292:	705a      	strb	r2, [r3, #1]
 800b294:	e00e      	b.n	800b2b4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b296:	78fb      	ldrb	r3, [r7, #3]
 800b298:	f003 0207 	and.w	r2, r3, #7
 800b29c:	4613      	mov	r3, r2
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	4413      	add	r3, r2
 800b2a2:	00db      	lsls	r3, r3, #3
 800b2a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b2a8:	687a      	ldr	r2, [r7, #4]
 800b2aa:	4413      	add	r3, r2
 800b2ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800b2b4:	78fb      	ldrb	r3, [r7, #3]
 800b2b6:	f003 0307 	and.w	r3, r3, #7
 800b2ba:	b2da      	uxtb	r2, r3
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d101      	bne.n	800b2ce <HAL_PCD_EP_Close+0x6a>
 800b2ca:	2302      	movs	r3, #2
 800b2cc:	e00e      	b.n	800b2ec <HAL_PCD_EP_Close+0x88>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	68f9      	ldr	r1, [r7, #12]
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f003 fc3f 	bl	800eb60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800b2ea:	2300      	movs	r3, #0
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3710      	adds	r7, #16
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b086      	sub	sp, #24
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	607a      	str	r2, [r7, #4]
 800b2fe:	603b      	str	r3, [r7, #0]
 800b300:	460b      	mov	r3, r1
 800b302:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b304:	7afb      	ldrb	r3, [r7, #11]
 800b306:	f003 0207 	and.w	r2, r3, #7
 800b30a:	4613      	mov	r3, r2
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	4413      	add	r3, r2
 800b310:	00db      	lsls	r3, r3, #3
 800b312:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	4413      	add	r3, r2
 800b31a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	683a      	ldr	r2, [r7, #0]
 800b326:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	2200      	movs	r2, #0
 800b32c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	2200      	movs	r2, #0
 800b332:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b334:	7afb      	ldrb	r3, [r7, #11]
 800b336:	f003 0307 	and.w	r3, r3, #7
 800b33a:	b2da      	uxtb	r2, r3
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	6979      	ldr	r1, [r7, #20]
 800b346:	4618      	mov	r0, r3
 800b348:	f003 fdf6 	bl	800ef38 <USB_EPStartXfer>

  return HAL_OK;
 800b34c:	2300      	movs	r3, #0
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3718      	adds	r7, #24
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}

0800b356 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800b356:	b480      	push	{r7}
 800b358:	b083      	sub	sp, #12
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
 800b35e:	460b      	mov	r3, r1
 800b360:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b362:	78fb      	ldrb	r3, [r7, #3]
 800b364:	f003 0207 	and.w	r2, r3, #7
 800b368:	6879      	ldr	r1, [r7, #4]
 800b36a:	4613      	mov	r3, r2
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	4413      	add	r3, r2
 800b370:	00db      	lsls	r3, r3, #3
 800b372:	440b      	add	r3, r1
 800b374:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b378:	681b      	ldr	r3, [r3, #0]
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	370c      	adds	r7, #12
 800b37e:	46bd      	mov	sp, r7
 800b380:	bc80      	pop	{r7}
 800b382:	4770      	bx	lr

0800b384 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b086      	sub	sp, #24
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	607a      	str	r2, [r7, #4]
 800b38e:	603b      	str	r3, [r7, #0]
 800b390:	460b      	mov	r3, r1
 800b392:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b394:	7afb      	ldrb	r3, [r7, #11]
 800b396:	f003 0307 	and.w	r3, r3, #7
 800b39a:	1c5a      	adds	r2, r3, #1
 800b39c:	4613      	mov	r3, r2
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	4413      	add	r3, r2
 800b3a2:	00db      	lsls	r3, r3, #3
 800b3a4:	68fa      	ldr	r2, [r7, #12]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	683a      	ldr	r2, [r7, #0]
 800b3b4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	683a      	ldr	r2, [r7, #0]
 800b3c2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b3d0:	7afb      	ldrb	r3, [r7, #11]
 800b3d2:	f003 0307 	and.w	r3, r3, #7
 800b3d6:	b2da      	uxtb	r2, r3
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	6979      	ldr	r1, [r7, #20]
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f003 fda8 	bl	800ef38 <USB_EPStartXfer>

  return HAL_OK;
 800b3e8:	2300      	movs	r3, #0
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3718      	adds	r7, #24
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}

0800b3f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b3f2:	b580      	push	{r7, lr}
 800b3f4:	b084      	sub	sp, #16
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b3fe:	78fb      	ldrb	r3, [r7, #3]
 800b400:	f003 0207 	and.w	r2, r3, #7
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	429a      	cmp	r2, r3
 800b40a:	d901      	bls.n	800b410 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	e04c      	b.n	800b4aa <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b410:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b414:	2b00      	cmp	r3, #0
 800b416:	da0e      	bge.n	800b436 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b418:	78fb      	ldrb	r3, [r7, #3]
 800b41a:	f003 0307 	and.w	r3, r3, #7
 800b41e:	1c5a      	adds	r2, r3, #1
 800b420:	4613      	mov	r3, r2
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	4413      	add	r3, r2
 800b426:	00db      	lsls	r3, r3, #3
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	4413      	add	r3, r2
 800b42c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2201      	movs	r2, #1
 800b432:	705a      	strb	r2, [r3, #1]
 800b434:	e00c      	b.n	800b450 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b436:	78fa      	ldrb	r2, [r7, #3]
 800b438:	4613      	mov	r3, r2
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	4413      	add	r3, r2
 800b43e:	00db      	lsls	r3, r3, #3
 800b440:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	4413      	add	r3, r2
 800b448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2200      	movs	r2, #0
 800b44e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2201      	movs	r2, #1
 800b454:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b456:	78fb      	ldrb	r3, [r7, #3]
 800b458:	f003 0307 	and.w	r3, r3, #7
 800b45c:	b2da      	uxtb	r2, r3
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d101      	bne.n	800b470 <HAL_PCD_EP_SetStall+0x7e>
 800b46c:	2302      	movs	r3, #2
 800b46e:	e01c      	b.n	800b4aa <HAL_PCD_EP_SetStall+0xb8>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2201      	movs	r2, #1
 800b474:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	68f9      	ldr	r1, [r7, #12]
 800b47e:	4618      	mov	r0, r3
 800b480:	f005 f90b 	bl	801069a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b484:	78fb      	ldrb	r3, [r7, #3]
 800b486:	f003 0307 	and.w	r3, r3, #7
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d108      	bne.n	800b4a0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b498:	4619      	mov	r1, r3
 800b49a:	4610      	mov	r0, r2
 800b49c:	f005 fa30 	bl	8010900 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b084      	sub	sp, #16
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b4be:	78fb      	ldrb	r3, [r7, #3]
 800b4c0:	f003 020f 	and.w	r2, r3, #15
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d901      	bls.n	800b4d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e040      	b.n	800b552 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b4d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	da0e      	bge.n	800b4f6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b4d8:	78fb      	ldrb	r3, [r7, #3]
 800b4da:	f003 0307 	and.w	r3, r3, #7
 800b4de:	1c5a      	adds	r2, r3, #1
 800b4e0:	4613      	mov	r3, r2
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	4413      	add	r3, r2
 800b4e6:	00db      	lsls	r3, r3, #3
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	4413      	add	r3, r2
 800b4ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	705a      	strb	r2, [r3, #1]
 800b4f4:	e00e      	b.n	800b514 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b4f6:	78fb      	ldrb	r3, [r7, #3]
 800b4f8:	f003 0207 	and.w	r2, r3, #7
 800b4fc:	4613      	mov	r3, r2
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	4413      	add	r3, r2
 800b502:	00db      	lsls	r3, r3, #3
 800b504:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	4413      	add	r3, r2
 800b50c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2200      	movs	r2, #0
 800b512:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2200      	movs	r2, #0
 800b518:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b51a:	78fb      	ldrb	r3, [r7, #3]
 800b51c:	f003 0307 	and.w	r3, r3, #7
 800b520:	b2da      	uxtb	r2, r3
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d101      	bne.n	800b534 <HAL_PCD_EP_ClrStall+0x82>
 800b530:	2302      	movs	r3, #2
 800b532:	e00e      	b.n	800b552 <HAL_PCD_EP_ClrStall+0xa0>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2201      	movs	r2, #1
 800b538:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	68f9      	ldr	r1, [r7, #12]
 800b542:	4618      	mov	r0, r3
 800b544:	f005 f8f9 	bl	801073a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2200      	movs	r2, #0
 800b54c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	3710      	adds	r7, #16
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}

0800b55a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800b55a:	b580      	push	{r7, lr}
 800b55c:	b096      	sub	sp, #88	; 0x58
 800b55e:	af00      	add	r7, sp, #0
 800b560:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b562:	e3bf      	b.n	800bce4 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b56c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800b570:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b574:	b2db      	uxtb	r3, r3
 800b576:	f003 030f 	and.w	r3, r3, #15
 800b57a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800b57e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b582:	2b00      	cmp	r3, #0
 800b584:	f040 8179 	bne.w	800b87a <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800b588:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b58c:	f003 0310 	and.w	r3, r3, #16
 800b590:	2b00      	cmp	r3, #0
 800b592:	d152      	bne.n	800b63a <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	881b      	ldrh	r3, [r3, #0]
 800b59a:	b29b      	uxth	r3, r3
 800b59c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800b5a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5a4:	81fb      	strh	r3, [r7, #14]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	89fb      	ldrh	r3, [r7, #14]
 800b5ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	3328      	adds	r3, #40	; 0x28
 800b5bc:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5c6:	b29b      	uxth	r3, r3
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	00db      	lsls	r3, r3, #3
 800b5d0:	4413      	add	r3, r2
 800b5d2:	3302      	adds	r3, #2
 800b5d4:	005b      	lsls	r3, r3, #1
 800b5d6:	687a      	ldr	r2, [r7, #4]
 800b5d8:	6812      	ldr	r2, [r2, #0]
 800b5da:	4413      	add	r3, r2
 800b5dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b5e0:	881b      	ldrh	r3, [r3, #0]
 800b5e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b5e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5e8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800b5ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5ec:	695a      	ldr	r2, [r3, #20]
 800b5ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5f0:	69db      	ldr	r3, [r3, #28]
 800b5f2:	441a      	add	r2, r3
 800b5f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5f6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f007 f819 	bl	8012632 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b606:	b2db      	uxtb	r3, r3
 800b608:	2b00      	cmp	r3, #0
 800b60a:	f000 836b 	beq.w	800bce4 <PCD_EP_ISR_Handler+0x78a>
 800b60e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b610:	699b      	ldr	r3, [r3, #24]
 800b612:	2b00      	cmp	r3, #0
 800b614:	f040 8366 	bne.w	800bce4 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b624:	b2da      	uxtb	r2, r3
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	b292      	uxth	r2, r2
 800b62c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b638:	e354      	b.n	800bce4 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b640:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	881b      	ldrh	r3, [r3, #0]
 800b648:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800b64c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b654:	2b00      	cmp	r3, #0
 800b656:	d034      	beq.n	800b6c2 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b660:	b29b      	uxth	r3, r3
 800b662:	461a      	mov	r2, r3
 800b664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	00db      	lsls	r3, r3, #3
 800b66a:	4413      	add	r3, r2
 800b66c:	3306      	adds	r3, #6
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	687a      	ldr	r2, [r7, #4]
 800b672:	6812      	ldr	r2, [r2, #0]
 800b674:	4413      	add	r3, r2
 800b676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b67a:	881b      	ldrh	r3, [r3, #0]
 800b67c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b682:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6818      	ldr	r0, [r3, #0]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800b68e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b690:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800b692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b694:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b696:	b29b      	uxth	r3, r3
 800b698:	f005 f982 	bl	80109a0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	881b      	ldrh	r3, [r3, #0]
 800b6a2:	b29a      	uxth	r2, r3
 800b6a4:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b6a8:	4013      	ands	r3, r2
 800b6aa:	823b      	strh	r3, [r7, #16]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	8a3a      	ldrh	r2, [r7, #16]
 800b6b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b6b6:	b292      	uxth	r2, r2
 800b6b8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f006 ff8c 	bl	80125d8 <HAL_PCD_SetupStageCallback>
 800b6c0:	e310      	b.n	800bce4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b6c2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	f280 830c 	bge.w	800bce4 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	881b      	ldrh	r3, [r3, #0]
 800b6d2:	b29a      	uxth	r2, r3
 800b6d4:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b6d8:	4013      	ands	r3, r2
 800b6da:	83fb      	strh	r3, [r7, #30]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	8bfa      	ldrh	r2, [r7, #30]
 800b6e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b6e6:	b292      	uxth	r2, r2
 800b6e8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	00db      	lsls	r3, r3, #3
 800b6fc:	4413      	add	r3, r2
 800b6fe:	3306      	adds	r3, #6
 800b700:	005b      	lsls	r3, r3, #1
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	6812      	ldr	r2, [r2, #0]
 800b706:	4413      	add	r3, r2
 800b708:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b70c:	881b      	ldrh	r3, [r3, #0]
 800b70e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b714:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800b716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b718:	69db      	ldr	r3, [r3, #28]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d019      	beq.n	800b752 <PCD_EP_ISR_Handler+0x1f8>
 800b71e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b720:	695b      	ldr	r3, [r3, #20]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d015      	beq.n	800b752 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6818      	ldr	r0, [r3, #0]
 800b72a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b72c:	6959      	ldr	r1, [r3, #20]
 800b72e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b730:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800b732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b734:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b736:	b29b      	uxth	r3, r3
 800b738:	f005 f932 	bl	80109a0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800b73c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b73e:	695a      	ldr	r2, [r3, #20]
 800b740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b742:	69db      	ldr	r3, [r3, #28]
 800b744:	441a      	add	r2, r3
 800b746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b748:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800b74a:	2100      	movs	r1, #0
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f006 ff55 	bl	80125fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	881b      	ldrh	r3, [r3, #0]
 800b758:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800b75c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b764:	2b00      	cmp	r3, #0
 800b766:	f040 82bd 	bne.w	800bce4 <PCD_EP_ISR_Handler+0x78a>
 800b76a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b76e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b772:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b776:	f000 82b5 	beq.w	800bce4 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	61bb      	str	r3, [r7, #24]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b788:	b29b      	uxth	r3, r3
 800b78a:	461a      	mov	r2, r3
 800b78c:	69bb      	ldr	r3, [r7, #24]
 800b78e:	4413      	add	r3, r2
 800b790:	61bb      	str	r3, [r7, #24]
 800b792:	69bb      	ldr	r3, [r7, #24]
 800b794:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b798:	617b      	str	r3, [r7, #20]
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	881b      	ldrh	r3, [r3, #0]
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b7a4:	b29a      	uxth	r2, r3
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	801a      	strh	r2, [r3, #0]
 800b7aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7ac:	691b      	ldr	r3, [r3, #16]
 800b7ae:	2b3e      	cmp	r3, #62	; 0x3e
 800b7b0:	d91d      	bls.n	800b7ee <PCD_EP_ISR_Handler+0x294>
 800b7b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7b4:	691b      	ldr	r3, [r3, #16]
 800b7b6:	095b      	lsrs	r3, r3, #5
 800b7b8:	647b      	str	r3, [r7, #68]	; 0x44
 800b7ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7bc:	691b      	ldr	r3, [r3, #16]
 800b7be:	f003 031f 	and.w	r3, r3, #31
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d102      	bne.n	800b7cc <PCD_EP_ISR_Handler+0x272>
 800b7c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	647b      	str	r3, [r7, #68]	; 0x44
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	881b      	ldrh	r3, [r3, #0]
 800b7d0:	b29a      	uxth	r2, r3
 800b7d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	029b      	lsls	r3, r3, #10
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7e6:	b29a      	uxth	r2, r3
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	801a      	strh	r2, [r3, #0]
 800b7ec:	e026      	b.n	800b83c <PCD_EP_ISR_Handler+0x2e2>
 800b7ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d10a      	bne.n	800b80c <PCD_EP_ISR_Handler+0x2b2>
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	881b      	ldrh	r3, [r3, #0]
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b804:	b29a      	uxth	r2, r3
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	801a      	strh	r2, [r3, #0]
 800b80a:	e017      	b.n	800b83c <PCD_EP_ISR_Handler+0x2e2>
 800b80c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	085b      	lsrs	r3, r3, #1
 800b812:	647b      	str	r3, [r7, #68]	; 0x44
 800b814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b816:	691b      	ldr	r3, [r3, #16]
 800b818:	f003 0301 	and.w	r3, r3, #1
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d002      	beq.n	800b826 <PCD_EP_ISR_Handler+0x2cc>
 800b820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b822:	3301      	adds	r3, #1
 800b824:	647b      	str	r3, [r7, #68]	; 0x44
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	881b      	ldrh	r3, [r3, #0]
 800b82a:	b29a      	uxth	r2, r3
 800b82c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b82e:	b29b      	uxth	r3, r3
 800b830:	029b      	lsls	r3, r3, #10
 800b832:	b29b      	uxth	r3, r3
 800b834:	4313      	orrs	r3, r2
 800b836:	b29a      	uxth	r2, r3
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	881b      	ldrh	r3, [r3, #0]
 800b842:	b29b      	uxth	r3, r3
 800b844:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b84c:	827b      	strh	r3, [r7, #18]
 800b84e:	8a7b      	ldrh	r3, [r7, #18]
 800b850:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b854:	827b      	strh	r3, [r7, #18]
 800b856:	8a7b      	ldrh	r3, [r7, #18]
 800b858:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b85c:	827b      	strh	r3, [r7, #18]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	8a7b      	ldrh	r3, [r7, #18]
 800b864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b86c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b874:	b29b      	uxth	r3, r3
 800b876:	8013      	strh	r3, [r2, #0]
 800b878:	e234      	b.n	800bce4 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	461a      	mov	r2, r3
 800b880:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	4413      	add	r3, r2
 800b888:	881b      	ldrh	r3, [r3, #0]
 800b88a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b88e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800b892:	2b00      	cmp	r3, #0
 800b894:	f280 80fc 	bge.w	800ba90 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	461a      	mov	r2, r3
 800b89e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	4413      	add	r3, r2
 800b8a6:	881b      	ldrh	r3, [r3, #0]
 800b8a8:	b29a      	uxth	r2, r3
 800b8aa:	f640 738f 	movw	r3, #3983	; 0xf8f
 800b8ae:	4013      	ands	r3, r2
 800b8b0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	4413      	add	r3, r2
 800b8c2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800b8c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b8ca:	b292      	uxth	r2, r2
 800b8cc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800b8ce:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800b8d2:	4613      	mov	r3, r2
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	4413      	add	r3, r2
 800b8d8:	00db      	lsls	r3, r3, #3
 800b8da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800b8e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8e6:	7b1b      	ldrb	r3, [r3, #12]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d125      	bne.n	800b938 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	00db      	lsls	r3, r3, #3
 800b8fe:	4413      	add	r3, r2
 800b900:	3306      	adds	r3, #6
 800b902:	005b      	lsls	r3, r3, #1
 800b904:	687a      	ldr	r2, [r7, #4]
 800b906:	6812      	ldr	r2, [r2, #0]
 800b908:	4413      	add	r3, r2
 800b90a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b90e:	881b      	ldrh	r3, [r3, #0]
 800b910:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b914:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800b918:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f000 8092 	beq.w	800ba46 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6818      	ldr	r0, [r3, #0]
 800b926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b928:	6959      	ldr	r1, [r3, #20]
 800b92a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b92c:	88da      	ldrh	r2, [r3, #6]
 800b92e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b932:	f005 f835 	bl	80109a0 <USB_ReadPMA>
 800b936:	e086      	b.n	800ba46 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800b938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b93a:	78db      	ldrb	r3, [r3, #3]
 800b93c:	2b02      	cmp	r3, #2
 800b93e:	d10a      	bne.n	800b956 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800b940:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b944:	461a      	mov	r2, r3
 800b946:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 f9d9 	bl	800bd00 <HAL_PCD_EP_DB_Receive>
 800b94e:	4603      	mov	r3, r0
 800b950:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800b954:	e077      	b.n	800ba46 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	461a      	mov	r2, r3
 800b95c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	4413      	add	r3, r2
 800b964:	881b      	ldrh	r3, [r3, #0]
 800b966:	b29b      	uxth	r3, r3
 800b968:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b96c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b970:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	461a      	mov	r2, r3
 800b97a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	441a      	add	r2, r3
 800b982:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800b986:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b98a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b98e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b992:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b996:	b29b      	uxth	r3, r3
 800b998:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	461a      	mov	r2, r3
 800b9a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	4413      	add	r3, r2
 800b9a8:	881b      	ldrh	r3, [r3, #0]
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d024      	beq.n	800b9fe <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	461a      	mov	r2, r3
 800b9c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	00db      	lsls	r3, r3, #3
 800b9c6:	4413      	add	r3, r2
 800b9c8:	3302      	adds	r3, #2
 800b9ca:	005b      	lsls	r3, r3, #1
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	6812      	ldr	r2, [r2, #0]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9d6:	881b      	ldrh	r3, [r3, #0]
 800b9d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b9dc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800b9e0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d02e      	beq.n	800ba46 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6818      	ldr	r0, [r3, #0]
 800b9ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9ee:	6959      	ldr	r1, [r3, #20]
 800b9f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9f2:	891a      	ldrh	r2, [r3, #8]
 800b9f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800b9f8:	f004 ffd2 	bl	80109a0 <USB_ReadPMA>
 800b9fc:	e023      	b.n	800ba46 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	461a      	mov	r2, r3
 800ba0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	00db      	lsls	r3, r3, #3
 800ba10:	4413      	add	r3, r2
 800ba12:	3306      	adds	r3, #6
 800ba14:	005b      	lsls	r3, r3, #1
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	6812      	ldr	r2, [r2, #0]
 800ba1a:	4413      	add	r3, r2
 800ba1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba20:	881b      	ldrh	r3, [r3, #0]
 800ba22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba26:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800ba2a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d009      	beq.n	800ba46 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6818      	ldr	r0, [r3, #0]
 800ba36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba38:	6959      	ldr	r1, [r3, #20]
 800ba3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba3c:	895a      	ldrh	r2, [r3, #10]
 800ba3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ba42:	f004 ffad 	bl	80109a0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800ba46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba48:	69da      	ldr	r2, [r3, #28]
 800ba4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ba4e:	441a      	add	r2, r3
 800ba50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba52:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800ba54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba56:	695a      	ldr	r2, [r3, #20]
 800ba58:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800ba5c:	441a      	add	r2, r3
 800ba5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba60:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800ba62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba64:	699b      	ldr	r3, [r3, #24]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d005      	beq.n	800ba76 <PCD_EP_ISR_Handler+0x51c>
 800ba6a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800ba6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba70:	691b      	ldr	r3, [r3, #16]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d206      	bcs.n	800ba84 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800ba76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f006 fdbd 	bl	80125fc <HAL_PCD_DataOutStageCallback>
 800ba82:	e005      	b.n	800ba90 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f003 fa54 	bl	800ef38 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800ba90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ba94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	f000 8123 	beq.w	800bce4 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800ba9e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800baa2:	1c5a      	adds	r2, r3, #1
 800baa4:	4613      	mov	r3, r2
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	4413      	add	r3, r2
 800baaa:	00db      	lsls	r3, r3, #3
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	4413      	add	r3, r2
 800bab0:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	461a      	mov	r2, r3
 800bab8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	4413      	add	r3, r2
 800bac0:	881b      	ldrh	r3, [r3, #0]
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800bac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bacc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	461a      	mov	r2, r3
 800bad6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	441a      	add	r2, r3
 800bade:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bae2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bae6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800baea:	b29b      	uxth	r3, r3
 800baec:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800baee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800baf0:	78db      	ldrb	r3, [r3, #3]
 800baf2:	2b01      	cmp	r3, #1
 800baf4:	f040 80a2 	bne.w	800bc3c <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800baf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bafa:	2200      	movs	r2, #0
 800bafc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800bafe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb00:	7b1b      	ldrb	r3, [r3, #12]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	f000 8093 	beq.w	800bc2e <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bb08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bb0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d046      	beq.n	800bba2 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bb14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb16:	785b      	ldrb	r3, [r3, #1]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d126      	bne.n	800bb6a <PCD_EP_ISR_Handler+0x610>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	627b      	str	r3, [r7, #36]	; 0x24
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb30:	4413      	add	r3, r2
 800bb32:	627b      	str	r3, [r7, #36]	; 0x24
 800bb34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	011a      	lsls	r2, r3, #4
 800bb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3c:	4413      	add	r3, r2
 800bb3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bb42:	623b      	str	r3, [r7, #32]
 800bb44:	6a3b      	ldr	r3, [r7, #32]
 800bb46:	881b      	ldrh	r3, [r3, #0]
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bb4e:	b29a      	uxth	r2, r3
 800bb50:	6a3b      	ldr	r3, [r7, #32]
 800bb52:	801a      	strh	r2, [r3, #0]
 800bb54:	6a3b      	ldr	r3, [r7, #32]
 800bb56:	881b      	ldrh	r3, [r3, #0]
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb62:	b29a      	uxth	r2, r3
 800bb64:	6a3b      	ldr	r3, [r7, #32]
 800bb66:	801a      	strh	r2, [r3, #0]
 800bb68:	e061      	b.n	800bc2e <PCD_EP_ISR_Handler+0x6d4>
 800bb6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb6c:	785b      	ldrb	r3, [r3, #1]
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d15d      	bne.n	800bc2e <PCD_EP_ISR_Handler+0x6d4>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	461a      	mov	r2, r3
 800bb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb86:	4413      	add	r3, r2
 800bb88:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	011a      	lsls	r2, r3, #4
 800bb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb92:	4413      	add	r3, r2
 800bb94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bb98:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	801a      	strh	r2, [r3, #0]
 800bba0:	e045      	b.n	800bc2e <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbaa:	785b      	ldrb	r3, [r3, #1]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d126      	bne.n	800bbfe <PCD_EP_ISR_Handler+0x6a4>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	637b      	str	r3, [r7, #52]	; 0x34
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	461a      	mov	r2, r3
 800bbc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbc4:	4413      	add	r3, r2
 800bbc6:	637b      	str	r3, [r7, #52]	; 0x34
 800bbc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	011a      	lsls	r2, r3, #4
 800bbce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbd0:	4413      	add	r3, r2
 800bbd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bbd6:	633b      	str	r3, [r7, #48]	; 0x30
 800bbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbda:	881b      	ldrh	r3, [r3, #0]
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bbe2:	b29a      	uxth	r2, r3
 800bbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe6:	801a      	strh	r2, [r3, #0]
 800bbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbea:	881b      	ldrh	r3, [r3, #0]
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbf6:	b29a      	uxth	r2, r3
 800bbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfa:	801a      	strh	r2, [r3, #0]
 800bbfc:	e017      	b.n	800bc2e <PCD_EP_ISR_Handler+0x6d4>
 800bbfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc00:	785b      	ldrb	r3, [r3, #1]
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d113      	bne.n	800bc2e <PCD_EP_ISR_Handler+0x6d4>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	461a      	mov	r2, r3
 800bc12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc14:	4413      	add	r3, r2
 800bc16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	011a      	lsls	r2, r3, #4
 800bc1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc20:	4413      	add	r3, r2
 800bc22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bc26:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bc2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	4619      	mov	r1, r3
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f006 fcfc 	bl	8012632 <HAL_PCD_DataInStageCallback>
 800bc3a:	e053      	b.n	800bce4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800bc3c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bc40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d146      	bne.n	800bcd6 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	461a      	mov	r2, r3
 800bc54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	00db      	lsls	r3, r3, #3
 800bc5a:	4413      	add	r3, r2
 800bc5c:	3302      	adds	r3, #2
 800bc5e:	005b      	lsls	r3, r3, #1
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	6812      	ldr	r2, [r2, #0]
 800bc64:	4413      	add	r3, r2
 800bc66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc6a:	881b      	ldrh	r3, [r3, #0]
 800bc6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc70:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800bc74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc76:	699a      	ldr	r2, [r3, #24]
 800bc78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d907      	bls.n	800bc90 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800bc80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc82:	699a      	ldr	r2, [r3, #24]
 800bc84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bc88:	1ad2      	subs	r2, r2, r3
 800bc8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc8c:	619a      	str	r2, [r3, #24]
 800bc8e:	e002      	b.n	800bc96 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800bc90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc92:	2200      	movs	r2, #0
 800bc94:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800bc96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc98:	699b      	ldr	r3, [r3, #24]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d106      	bne.n	800bcac <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bc9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	4619      	mov	r1, r3
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f006 fcc4 	bl	8012632 <HAL_PCD_DataInStageCallback>
 800bcaa:	e01b      	b.n	800bce4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800bcac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcae:	695a      	ldr	r2, [r3, #20]
 800bcb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bcb4:	441a      	add	r2, r3
 800bcb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcb8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800bcba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcbc:	69da      	ldr	r2, [r3, #28]
 800bcbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bcc2:	441a      	add	r2, r3
 800bcc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcc6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f003 f932 	bl	800ef38 <USB_EPStartXfer>
 800bcd4:	e006      	b.n	800bce4 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800bcd6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bcda:	461a      	mov	r2, r3
 800bcdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f000 f91b 	bl	800bf1a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bcec:	b29b      	uxth	r3, r3
 800bcee:	b21b      	sxth	r3, r3
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	f6ff ac37 	blt.w	800b564 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800bcf6:	2300      	movs	r3, #0
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3758      	adds	r7, #88	; 0x58
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b088      	sub	sp, #32
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	4613      	mov	r3, r2
 800bd0c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800bd0e:	88fb      	ldrh	r3, [r7, #6]
 800bd10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d07e      	beq.n	800be16 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	461a      	mov	r2, r3
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	00db      	lsls	r3, r3, #3
 800bd2a:	4413      	add	r3, r2
 800bd2c:	3302      	adds	r3, #2
 800bd2e:	005b      	lsls	r3, r3, #1
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	6812      	ldr	r2, [r2, #0]
 800bd34:	4413      	add	r3, r2
 800bd36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd3a:	881b      	ldrh	r3, [r3, #0]
 800bd3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd40:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	699a      	ldr	r2, [r3, #24]
 800bd46:	8b7b      	ldrh	r3, [r7, #26]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d306      	bcc.n	800bd5a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	699a      	ldr	r2, [r3, #24]
 800bd50:	8b7b      	ldrh	r3, [r7, #26]
 800bd52:	1ad2      	subs	r2, r2, r3
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	619a      	str	r2, [r3, #24]
 800bd58:	e002      	b.n	800bd60 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	699b      	ldr	r3, [r3, #24]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d123      	bne.n	800bdb0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	4413      	add	r3, r2
 800bd76:	881b      	ldrh	r3, [r3, #0]
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd82:	833b      	strh	r3, [r7, #24]
 800bd84:	8b3b      	ldrh	r3, [r7, #24]
 800bd86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bd8a:	833b      	strh	r3, [r7, #24]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	461a      	mov	r2, r3
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	009b      	lsls	r3, r3, #2
 800bd98:	441a      	add	r2, r3
 800bd9a:	8b3b      	ldrh	r3, [r7, #24]
 800bd9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bda0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bda4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bda8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bdb0:	88fb      	ldrh	r3, [r7, #6]
 800bdb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d01f      	beq.n	800bdfa <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	4413      	add	r3, r2
 800bdc8:	881b      	ldrh	r3, [r3, #0]
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdd4:	82fb      	strh	r3, [r7, #22]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	461a      	mov	r2, r3
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	781b      	ldrb	r3, [r3, #0]
 800bde0:	009b      	lsls	r3, r3, #2
 800bde2:	441a      	add	r2, r3
 800bde4:	8afb      	ldrh	r3, [r7, #22]
 800bde6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdf2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800bdfa:	8b7b      	ldrh	r3, [r7, #26]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	f000 8087 	beq.w	800bf10 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	6818      	ldr	r0, [r3, #0]
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	6959      	ldr	r1, [r3, #20]
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	891a      	ldrh	r2, [r3, #8]
 800be0e:	8b7b      	ldrh	r3, [r7, #26]
 800be10:	f004 fdc6 	bl	80109a0 <USB_ReadPMA>
 800be14:	e07c      	b.n	800bf10 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be1e:	b29b      	uxth	r3, r3
 800be20:	461a      	mov	r2, r3
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	00db      	lsls	r3, r3, #3
 800be28:	4413      	add	r3, r2
 800be2a:	3306      	adds	r3, #6
 800be2c:	005b      	lsls	r3, r3, #1
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	6812      	ldr	r2, [r2, #0]
 800be32:	4413      	add	r3, r2
 800be34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be38:	881b      	ldrh	r3, [r3, #0]
 800be3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be3e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	699a      	ldr	r2, [r3, #24]
 800be44:	8b7b      	ldrh	r3, [r7, #26]
 800be46:	429a      	cmp	r2, r3
 800be48:	d306      	bcc.n	800be58 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	699a      	ldr	r2, [r3, #24]
 800be4e:	8b7b      	ldrh	r3, [r7, #26]
 800be50:	1ad2      	subs	r2, r2, r3
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	619a      	str	r2, [r3, #24]
 800be56:	e002      	b.n	800be5e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	2200      	movs	r2, #0
 800be5c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	699b      	ldr	r3, [r3, #24]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d123      	bne.n	800beae <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	461a      	mov	r2, r3
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	009b      	lsls	r3, r3, #2
 800be72:	4413      	add	r3, r2
 800be74:	881b      	ldrh	r3, [r3, #0]
 800be76:	b29b      	uxth	r3, r3
 800be78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800be7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be80:	83fb      	strh	r3, [r7, #30]
 800be82:	8bfb      	ldrh	r3, [r7, #30]
 800be84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800be88:	83fb      	strh	r3, [r7, #30]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	461a      	mov	r2, r3
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	441a      	add	r2, r3
 800be98:	8bfb      	ldrh	r3, [r7, #30]
 800be9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800beaa:	b29b      	uxth	r3, r3
 800beac:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800beae:	88fb      	ldrh	r3, [r7, #6]
 800beb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d11f      	bne.n	800bef8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	461a      	mov	r2, r3
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	009b      	lsls	r3, r3, #2
 800bec4:	4413      	add	r3, r2
 800bec6:	881b      	ldrh	r3, [r3, #0]
 800bec8:	b29b      	uxth	r3, r3
 800beca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bed2:	83bb      	strh	r3, [r7, #28]
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	461a      	mov	r2, r3
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	441a      	add	r2, r3
 800bee2:	8bbb      	ldrh	r3, [r7, #28]
 800bee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800beec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bef0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bef4:	b29b      	uxth	r3, r3
 800bef6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800bef8:	8b7b      	ldrh	r3, [r7, #26]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d008      	beq.n	800bf10 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	6818      	ldr	r0, [r3, #0]
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	6959      	ldr	r1, [r3, #20]
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	895a      	ldrh	r2, [r3, #10]
 800bf0a:	8b7b      	ldrh	r3, [r7, #26]
 800bf0c:	f004 fd48 	bl	80109a0 <USB_ReadPMA>
    }
  }

  return count;
 800bf10:	8b7b      	ldrh	r3, [r7, #26]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3720      	adds	r7, #32
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b0a4      	sub	sp, #144	; 0x90
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	60f8      	str	r0, [r7, #12]
 800bf22:	60b9      	str	r1, [r7, #8]
 800bf24:	4613      	mov	r3, r2
 800bf26:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bf28:	88fb      	ldrh	r3, [r7, #6]
 800bf2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	f000 81dd 	beq.w	800c2ee <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	461a      	mov	r2, r3
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	00db      	lsls	r3, r3, #3
 800bf46:	4413      	add	r3, r2
 800bf48:	3302      	adds	r3, #2
 800bf4a:	005b      	lsls	r3, r3, #1
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	6812      	ldr	r2, [r2, #0]
 800bf50:	4413      	add	r3, r2
 800bf52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf56:	881b      	ldrh	r3, [r3, #0]
 800bf58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf5c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	699a      	ldr	r2, [r3, #24]
 800bf64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d907      	bls.n	800bf7c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	699a      	ldr	r2, [r3, #24]
 800bf70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800bf74:	1ad2      	subs	r2, r2, r3
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	619a      	str	r2, [r3, #24]
 800bf7a:	e002      	b.n	800bf82 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	699b      	ldr	r3, [r3, #24]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	f040 80b9 	bne.w	800c0fe <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	785b      	ldrb	r3, [r3, #1]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d126      	bne.n	800bfe2 <HAL_PCD_EP_DB_Transmit+0xc8>
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa8:	4413      	add	r3, r2
 800bfaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	011a      	lsls	r2, r3, #4
 800bfb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb4:	4413      	add	r3, r2
 800bfb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bfba:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfbe:	881b      	ldrh	r3, [r3, #0]
 800bfc0:	b29b      	uxth	r3, r3
 800bfc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bfc6:	b29a      	uxth	r2, r3
 800bfc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfca:	801a      	strh	r2, [r3, #0]
 800bfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfce:	881b      	ldrh	r3, [r3, #0]
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfda:	b29a      	uxth	r2, r3
 800bfdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfde:	801a      	strh	r2, [r3, #0]
 800bfe0:	e01a      	b.n	800c018 <HAL_PCD_EP_DB_Transmit+0xfe>
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	785b      	ldrb	r3, [r3, #1]
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	d116      	bne.n	800c018 <HAL_PCD_EP_DB_Transmit+0xfe>
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	637b      	str	r3, [r7, #52]	; 0x34
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	461a      	mov	r2, r3
 800bffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bffe:	4413      	add	r3, r2
 800c000:	637b      	str	r3, [r7, #52]	; 0x34
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	011a      	lsls	r2, r3, #4
 800c008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c00a:	4413      	add	r3, r2
 800c00c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c010:	633b      	str	r3, [r7, #48]	; 0x30
 800c012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c014:	2200      	movs	r2, #0
 800c016:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	627b      	str	r3, [r7, #36]	; 0x24
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	785b      	ldrb	r3, [r3, #1]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d126      	bne.n	800c074 <HAL_PCD_EP_DB_Transmit+0x15a>
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	61fb      	str	r3, [r7, #28]
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c034:	b29b      	uxth	r3, r3
 800c036:	461a      	mov	r2, r3
 800c038:	69fb      	ldr	r3, [r7, #28]
 800c03a:	4413      	add	r3, r2
 800c03c:	61fb      	str	r3, [r7, #28]
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	011a      	lsls	r2, r3, #4
 800c044:	69fb      	ldr	r3, [r7, #28]
 800c046:	4413      	add	r3, r2
 800c048:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c04c:	61bb      	str	r3, [r7, #24]
 800c04e:	69bb      	ldr	r3, [r7, #24]
 800c050:	881b      	ldrh	r3, [r3, #0]
 800c052:	b29b      	uxth	r3, r3
 800c054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c058:	b29a      	uxth	r2, r3
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	801a      	strh	r2, [r3, #0]
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	881b      	ldrh	r3, [r3, #0]
 800c062:	b29b      	uxth	r3, r3
 800c064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c06c:	b29a      	uxth	r2, r3
 800c06e:	69bb      	ldr	r3, [r7, #24]
 800c070:	801a      	strh	r2, [r3, #0]
 800c072:	e017      	b.n	800c0a4 <HAL_PCD_EP_DB_Transmit+0x18a>
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	785b      	ldrb	r3, [r3, #1]
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d113      	bne.n	800c0a4 <HAL_PCD_EP_DB_Transmit+0x18a>
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c084:	b29b      	uxth	r3, r3
 800c086:	461a      	mov	r2, r3
 800c088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08a:	4413      	add	r3, r2
 800c08c:	627b      	str	r3, [r7, #36]	; 0x24
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	011a      	lsls	r2, r3, #4
 800c094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c096:	4413      	add	r3, r2
 800c098:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c09c:	623b      	str	r3, [r7, #32]
 800c09e:	6a3b      	ldr	r3, [r7, #32]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f006 fac1 	bl	8012632 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c0b0:	88fb      	ldrh	r3, [r7, #6]
 800c0b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	f000 82fc 	beq.w	800c6b4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	4413      	add	r3, r2
 800c0ca:	881b      	ldrh	r3, [r3, #0]
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0d6:	82fb      	strh	r3, [r7, #22]
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	461a      	mov	r2, r3
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	441a      	add	r2, r3
 800c0e6:	8afb      	ldrh	r3, [r7, #22]
 800c0e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c0f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0f8:	b29b      	uxth	r3, r3
 800c0fa:	8013      	strh	r3, [r2, #0]
 800c0fc:	e2da      	b.n	800c6b4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c0fe:	88fb      	ldrh	r3, [r7, #6]
 800c100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c104:	2b00      	cmp	r3, #0
 800c106:	d021      	beq.n	800c14c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	461a      	mov	r2, r3
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	4413      	add	r3, r2
 800c116:	881b      	ldrh	r3, [r3, #0]
 800c118:	b29b      	uxth	r3, r3
 800c11a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c11e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c122:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	461a      	mov	r2, r3
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	009b      	lsls	r3, r3, #2
 800c132:	441a      	add	r2, r3
 800c134:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c138:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c13c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c140:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c148:	b29b      	uxth	r3, r3
 800c14a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c152:	2b01      	cmp	r3, #1
 800c154:	f040 82ae 	bne.w	800c6b4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	695a      	ldr	r2, [r3, #20]
 800c15c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c160:	441a      	add	r2, r3
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	69da      	ldr	r2, [r3, #28]
 800c16a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c16e:	441a      	add	r2, r3
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	6a1a      	ldr	r2, [r3, #32]
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	691b      	ldr	r3, [r3, #16]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d30b      	bcc.n	800c198 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	691b      	ldr	r3, [r3, #16]
 800c184:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	6a1a      	ldr	r2, [r3, #32]
 800c18c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c190:	1ad2      	subs	r2, r2, r3
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	621a      	str	r2, [r3, #32]
 800c196:	e017      	b.n	800c1c8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	6a1b      	ldr	r3, [r3, #32]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d108      	bne.n	800c1b2 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800c1a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c1a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c1b0:	e00a      	b.n	800c1c8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	6a1b      	ldr	r3, [r3, #32]
 800c1be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	785b      	ldrb	r3, [r3, #1]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d165      	bne.n	800c29c <HAL_PCD_EP_DB_Transmit+0x382>
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1e4:	4413      	add	r3, r2
 800c1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	011a      	lsls	r2, r3, #4
 800c1ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1f0:	4413      	add	r3, r2
 800c1f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c1f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fa:	881b      	ldrh	r3, [r3, #0]
 800c1fc:	b29b      	uxth	r3, r3
 800c1fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c202:	b29a      	uxth	r2, r3
 800c204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c206:	801a      	strh	r2, [r3, #0]
 800c208:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c20c:	2b3e      	cmp	r3, #62	; 0x3e
 800c20e:	d91d      	bls.n	800c24c <HAL_PCD_EP_DB_Transmit+0x332>
 800c210:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c214:	095b      	lsrs	r3, r3, #5
 800c216:	64bb      	str	r3, [r7, #72]	; 0x48
 800c218:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c21c:	f003 031f 	and.w	r3, r3, #31
 800c220:	2b00      	cmp	r3, #0
 800c222:	d102      	bne.n	800c22a <HAL_PCD_EP_DB_Transmit+0x310>
 800c224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c226:	3b01      	subs	r3, #1
 800c228:	64bb      	str	r3, [r7, #72]	; 0x48
 800c22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22c:	881b      	ldrh	r3, [r3, #0]
 800c22e:	b29a      	uxth	r2, r3
 800c230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c232:	b29b      	uxth	r3, r3
 800c234:	029b      	lsls	r3, r3, #10
 800c236:	b29b      	uxth	r3, r3
 800c238:	4313      	orrs	r3, r2
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c244:	b29a      	uxth	r2, r3
 800c246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c248:	801a      	strh	r2, [r3, #0]
 800c24a:	e044      	b.n	800c2d6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800c24c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c250:	2b00      	cmp	r3, #0
 800c252:	d10a      	bne.n	800c26a <HAL_PCD_EP_DB_Transmit+0x350>
 800c254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c256:	881b      	ldrh	r3, [r3, #0]
 800c258:	b29b      	uxth	r3, r3
 800c25a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c25e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c262:	b29a      	uxth	r2, r3
 800c264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c266:	801a      	strh	r2, [r3, #0]
 800c268:	e035      	b.n	800c2d6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800c26a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c26e:	085b      	lsrs	r3, r3, #1
 800c270:	64bb      	str	r3, [r7, #72]	; 0x48
 800c272:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c276:	f003 0301 	and.w	r3, r3, #1
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d002      	beq.n	800c284 <HAL_PCD_EP_DB_Transmit+0x36a>
 800c27e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c280:	3301      	adds	r3, #1
 800c282:	64bb      	str	r3, [r7, #72]	; 0x48
 800c284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c286:	881b      	ldrh	r3, [r3, #0]
 800c288:	b29a      	uxth	r2, r3
 800c28a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	029b      	lsls	r3, r3, #10
 800c290:	b29b      	uxth	r3, r3
 800c292:	4313      	orrs	r3, r2
 800c294:	b29a      	uxth	r2, r3
 800c296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c298:	801a      	strh	r2, [r3, #0]
 800c29a:	e01c      	b.n	800c2d6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	785b      	ldrb	r3, [r3, #1]
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d118      	bne.n	800c2d6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	647b      	str	r3, [r7, #68]	; 0x44
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2b8:	4413      	add	r3, r2
 800c2ba:	647b      	str	r3, [r7, #68]	; 0x44
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	011a      	lsls	r2, r3, #4
 800c2c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2c4:	4413      	add	r3, r2
 800c2c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c2ca:	643b      	str	r3, [r7, #64]	; 0x40
 800c2cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c2d0:	b29a      	uxth	r2, r3
 800c2d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2d4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	6818      	ldr	r0, [r3, #0]
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	6959      	ldr	r1, [r3, #20]
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	891a      	ldrh	r2, [r3, #8]
 800c2e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	f004 fb15 	bl	8010916 <USB_WritePMA>
 800c2ec:	e1e2      	b.n	800c6b4 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	781b      	ldrb	r3, [r3, #0]
 800c2fe:	00db      	lsls	r3, r3, #3
 800c300:	4413      	add	r3, r2
 800c302:	3306      	adds	r3, #6
 800c304:	005b      	lsls	r3, r3, #1
 800c306:	68fa      	ldr	r2, [r7, #12]
 800c308:	6812      	ldr	r2, [r2, #0]
 800c30a:	4413      	add	r3, r2
 800c30c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c310:	881b      	ldrh	r3, [r3, #0]
 800c312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c316:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	699a      	ldr	r2, [r3, #24]
 800c31e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c322:	429a      	cmp	r2, r3
 800c324:	d307      	bcc.n	800c336 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	699a      	ldr	r2, [r3, #24]
 800c32a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c32e:	1ad2      	subs	r2, r2, r3
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	619a      	str	r2, [r3, #24]
 800c334:	e002      	b.n	800c33c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	2200      	movs	r2, #0
 800c33a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	699b      	ldr	r3, [r3, #24]
 800c340:	2b00      	cmp	r3, #0
 800c342:	f040 80c0 	bne.w	800c4c6 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	785b      	ldrb	r3, [r3, #1]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d126      	bne.n	800c39c <HAL_PCD_EP_DB_Transmit+0x482>
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	461a      	mov	r2, r3
 800c360:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c362:	4413      	add	r3, r2
 800c364:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	011a      	lsls	r2, r3, #4
 800c36c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c36e:	4413      	add	r3, r2
 800c370:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c374:	67bb      	str	r3, [r7, #120]	; 0x78
 800c376:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c378:	881b      	ldrh	r3, [r3, #0]
 800c37a:	b29b      	uxth	r3, r3
 800c37c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c380:	b29a      	uxth	r2, r3
 800c382:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c384:	801a      	strh	r2, [r3, #0]
 800c386:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c388:	881b      	ldrh	r3, [r3, #0]
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c394:	b29a      	uxth	r2, r3
 800c396:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c398:	801a      	strh	r2, [r3, #0]
 800c39a:	e01a      	b.n	800c3d2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	785b      	ldrb	r3, [r3, #1]
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d116      	bne.n	800c3d2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	667b      	str	r3, [r7, #100]	; 0x64
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3b8:	4413      	add	r3, r2
 800c3ba:	667b      	str	r3, [r7, #100]	; 0x64
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	011a      	lsls	r2, r3, #4
 800c3c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3c4:	4413      	add	r3, r2
 800c3c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c3ca:	663b      	str	r3, [r7, #96]	; 0x60
 800c3cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	677b      	str	r3, [r7, #116]	; 0x74
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	785b      	ldrb	r3, [r3, #1]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d12b      	bne.n	800c438 <HAL_PCD_EP_DB_Transmit+0x51e>
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3f4:	4413      	add	r3, r2
 800c3f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	781b      	ldrb	r3, [r3, #0]
 800c3fc:	011a      	lsls	r2, r3, #4
 800c3fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c400:	4413      	add	r3, r2
 800c402:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c406:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c40a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c40e:	881b      	ldrh	r3, [r3, #0]
 800c410:	b29b      	uxth	r3, r3
 800c412:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c416:	b29a      	uxth	r2, r3
 800c418:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c41c:	801a      	strh	r2, [r3, #0]
 800c41e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c422:	881b      	ldrh	r3, [r3, #0]
 800c424:	b29b      	uxth	r3, r3
 800c426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c42a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c42e:	b29a      	uxth	r2, r3
 800c430:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c434:	801a      	strh	r2, [r3, #0]
 800c436:	e017      	b.n	800c468 <HAL_PCD_EP_DB_Transmit+0x54e>
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	785b      	ldrb	r3, [r3, #1]
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d113      	bne.n	800c468 <HAL_PCD_EP_DB_Transmit+0x54e>
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c448:	b29b      	uxth	r3, r3
 800c44a:	461a      	mov	r2, r3
 800c44c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c44e:	4413      	add	r3, r2
 800c450:	677b      	str	r3, [r7, #116]	; 0x74
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	011a      	lsls	r2, r3, #4
 800c458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c45a:	4413      	add	r3, r2
 800c45c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c460:	673b      	str	r3, [r7, #112]	; 0x70
 800c462:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c464:	2200      	movs	r2, #0
 800c466:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	4619      	mov	r1, r3
 800c46e:	68f8      	ldr	r0, [r7, #12]
 800c470:	f006 f8df 	bl	8012632 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c474:	88fb      	ldrh	r3, [r7, #6]
 800c476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	f040 811a 	bne.w	800c6b4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	461a      	mov	r2, r3
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	009b      	lsls	r3, r3, #2
 800c48c:	4413      	add	r3, r2
 800c48e:	881b      	ldrh	r3, [r3, #0]
 800c490:	b29b      	uxth	r3, r3
 800c492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c49a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	441a      	add	r2, r3
 800c4ac:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800c4b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c4bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	8013      	strh	r3, [r2, #0]
 800c4c4:	e0f6      	b.n	800c6b4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c4c6:	88fb      	ldrh	r3, [r7, #6]
 800c4c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d121      	bne.n	800c514 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	009b      	lsls	r3, r3, #2
 800c4dc:	4413      	add	r3, r2
 800c4de:	881b      	ldrh	r3, [r3, #0]
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	009b      	lsls	r3, r3, #2
 800c4fa:	441a      	add	r2, r3
 800c4fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c50c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c510:	b29b      	uxth	r3, r3
 800c512:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	f040 80ca 	bne.w	800c6b4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	695a      	ldr	r2, [r3, #20]
 800c524:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c528:	441a      	add	r2, r3
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	69da      	ldr	r2, [r3, #28]
 800c532:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c536:	441a      	add	r2, r3
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	6a1a      	ldr	r2, [r3, #32]
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	691b      	ldr	r3, [r3, #16]
 800c544:	429a      	cmp	r2, r3
 800c546:	d30b      	bcc.n	800c560 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	691b      	ldr	r3, [r3, #16]
 800c54c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	6a1a      	ldr	r2, [r3, #32]
 800c554:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c558:	1ad2      	subs	r2, r2, r3
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	621a      	str	r2, [r3, #32]
 800c55e:	e017      	b.n	800c590 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	6a1b      	ldr	r3, [r3, #32]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d108      	bne.n	800c57a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800c568:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c56c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	2200      	movs	r2, #0
 800c574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c578:	e00a      	b.n	800c590 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	6a1b      	ldr	r3, [r3, #32]
 800c57e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	2200      	movs	r2, #0
 800c586:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	2200      	movs	r2, #0
 800c58c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	657b      	str	r3, [r7, #84]	; 0x54
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	785b      	ldrb	r3, [r3, #1]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d165      	bne.n	800c66a <HAL_PCD_EP_DB_Transmit+0x750>
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5b2:	4413      	add	r3, r2
 800c5b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	011a      	lsls	r2, r3, #4
 800c5bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5be:	4413      	add	r3, r2
 800c5c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c5c4:	65bb      	str	r3, [r7, #88]	; 0x58
 800c5c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5c8:	881b      	ldrh	r3, [r3, #0]
 800c5ca:	b29b      	uxth	r3, r3
 800c5cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c5d0:	b29a      	uxth	r2, r3
 800c5d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5d4:	801a      	strh	r2, [r3, #0]
 800c5d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c5da:	2b3e      	cmp	r3, #62	; 0x3e
 800c5dc:	d91d      	bls.n	800c61a <HAL_PCD_EP_DB_Transmit+0x700>
 800c5de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c5e2:	095b      	lsrs	r3, r3, #5
 800c5e4:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c5ea:	f003 031f 	and.w	r3, r3, #31
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d102      	bne.n	800c5f8 <HAL_PCD_EP_DB_Transmit+0x6de>
 800c5f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c5f4:	3b01      	subs	r3, #1
 800c5f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5fa:	881b      	ldrh	r3, [r3, #0]
 800c5fc:	b29a      	uxth	r2, r3
 800c5fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c600:	b29b      	uxth	r3, r3
 800c602:	029b      	lsls	r3, r3, #10
 800c604:	b29b      	uxth	r3, r3
 800c606:	4313      	orrs	r3, r2
 800c608:	b29b      	uxth	r3, r3
 800c60a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c60e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c612:	b29a      	uxth	r2, r3
 800c614:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c616:	801a      	strh	r2, [r3, #0]
 800c618:	e041      	b.n	800c69e <HAL_PCD_EP_DB_Transmit+0x784>
 800c61a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d10a      	bne.n	800c638 <HAL_PCD_EP_DB_Transmit+0x71e>
 800c622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c624:	881b      	ldrh	r3, [r3, #0]
 800c626:	b29b      	uxth	r3, r3
 800c628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c62c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c630:	b29a      	uxth	r2, r3
 800c632:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c634:	801a      	strh	r2, [r3, #0]
 800c636:	e032      	b.n	800c69e <HAL_PCD_EP_DB_Transmit+0x784>
 800c638:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c63c:	085b      	lsrs	r3, r3, #1
 800c63e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c640:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c644:	f003 0301 	and.w	r3, r3, #1
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d002      	beq.n	800c652 <HAL_PCD_EP_DB_Transmit+0x738>
 800c64c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c64e:	3301      	adds	r3, #1
 800c650:	66bb      	str	r3, [r7, #104]	; 0x68
 800c652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c654:	881b      	ldrh	r3, [r3, #0]
 800c656:	b29a      	uxth	r2, r3
 800c658:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	029b      	lsls	r3, r3, #10
 800c65e:	b29b      	uxth	r3, r3
 800c660:	4313      	orrs	r3, r2
 800c662:	b29a      	uxth	r2, r3
 800c664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c666:	801a      	strh	r2, [r3, #0]
 800c668:	e019      	b.n	800c69e <HAL_PCD_EP_DB_Transmit+0x784>
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	785b      	ldrb	r3, [r3, #1]
 800c66e:	2b01      	cmp	r3, #1
 800c670:	d115      	bne.n	800c69e <HAL_PCD_EP_DB_Transmit+0x784>
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	461a      	mov	r2, r3
 800c67e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c680:	4413      	add	r3, r2
 800c682:	657b      	str	r3, [r7, #84]	; 0x54
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	011a      	lsls	r2, r3, #4
 800c68a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c68c:	4413      	add	r3, r2
 800c68e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c692:	653b      	str	r3, [r7, #80]	; 0x50
 800c694:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c698:	b29a      	uxth	r2, r3
 800c69a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c69c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	6818      	ldr	r0, [r3, #0]
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	6959      	ldr	r1, [r3, #20]
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	895a      	ldrh	r2, [r3, #10]
 800c6aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	f004 f931 	bl	8010916 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	4413      	add	r3, r2
 800c6c2:	881b      	ldrh	r3, [r3, #0]
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c6ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6ce:	82bb      	strh	r3, [r7, #20]
 800c6d0:	8abb      	ldrh	r3, [r7, #20]
 800c6d2:	f083 0310 	eor.w	r3, r3, #16
 800c6d6:	82bb      	strh	r3, [r7, #20]
 800c6d8:	8abb      	ldrh	r3, [r7, #20]
 800c6da:	f083 0320 	eor.w	r3, r3, #32
 800c6de:	82bb      	strh	r3, [r7, #20]
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	441a      	add	r2, r3
 800c6ee:	8abb      	ldrh	r3, [r7, #20]
 800c6f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c700:	b29b      	uxth	r3, r3
 800c702:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800c704:	2300      	movs	r3, #0
}
 800c706:	4618      	mov	r0, r3
 800c708:	3790      	adds	r7, #144	; 0x90
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}

0800c70e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800c70e:	b480      	push	{r7}
 800c710:	b087      	sub	sp, #28
 800c712:	af00      	add	r7, sp, #0
 800c714:	60f8      	str	r0, [r7, #12]
 800c716:	607b      	str	r3, [r7, #4]
 800c718:	460b      	mov	r3, r1
 800c71a:	817b      	strh	r3, [r7, #10]
 800c71c:	4613      	mov	r3, r2
 800c71e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800c720:	897b      	ldrh	r3, [r7, #10]
 800c722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c726:	b29b      	uxth	r3, r3
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d00b      	beq.n	800c744 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c72c:	897b      	ldrh	r3, [r7, #10]
 800c72e:	f003 0307 	and.w	r3, r3, #7
 800c732:	1c5a      	adds	r2, r3, #1
 800c734:	4613      	mov	r3, r2
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	4413      	add	r3, r2
 800c73a:	00db      	lsls	r3, r3, #3
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	4413      	add	r3, r2
 800c740:	617b      	str	r3, [r7, #20]
 800c742:	e009      	b.n	800c758 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c744:	897a      	ldrh	r2, [r7, #10]
 800c746:	4613      	mov	r3, r2
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	4413      	add	r3, r2
 800c74c:	00db      	lsls	r3, r3, #3
 800c74e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c752:	68fa      	ldr	r2, [r7, #12]
 800c754:	4413      	add	r3, r2
 800c756:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800c758:	893b      	ldrh	r3, [r7, #8]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d107      	bne.n	800c76e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	2200      	movs	r2, #0
 800c762:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	b29a      	uxth	r2, r3
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	80da      	strh	r2, [r3, #6]
 800c76c:	e00b      	b.n	800c786 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	2201      	movs	r2, #1
 800c772:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	b29a      	uxth	r2, r3
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	0c1b      	lsrs	r3, r3, #16
 800c780:	b29a      	uxth	r2, r3
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c786:	2300      	movs	r3, #0
}
 800c788:	4618      	mov	r0, r3
 800c78a:	371c      	adds	r7, #28
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bc80      	pop	{r7}
 800c790:	4770      	bx	lr
	...

0800c794 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b086      	sub	sp, #24
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d101      	bne.n	800c7a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	e272      	b.n	800cc8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f003 0301 	and.w	r3, r3, #1
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	f000 8087 	beq.w	800c8c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c7b4:	4b92      	ldr	r3, [pc, #584]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	f003 030c 	and.w	r3, r3, #12
 800c7bc:	2b04      	cmp	r3, #4
 800c7be:	d00c      	beq.n	800c7da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800c7c0:	4b8f      	ldr	r3, [pc, #572]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	f003 030c 	and.w	r3, r3, #12
 800c7c8:	2b08      	cmp	r3, #8
 800c7ca:	d112      	bne.n	800c7f2 <HAL_RCC_OscConfig+0x5e>
 800c7cc:	4b8c      	ldr	r3, [pc, #560]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c7d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7d8:	d10b      	bne.n	800c7f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c7da:	4b89      	ldr	r3, [pc, #548]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d06c      	beq.n	800c8c0 <HAL_RCC_OscConfig+0x12c>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d168      	bne.n	800c8c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	e24c      	b.n	800cc8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7fa:	d106      	bne.n	800c80a <HAL_RCC_OscConfig+0x76>
 800c7fc:	4b80      	ldr	r3, [pc, #512]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4a7f      	ldr	r2, [pc, #508]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c806:	6013      	str	r3, [r2, #0]
 800c808:	e02e      	b.n	800c868 <HAL_RCC_OscConfig+0xd4>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	685b      	ldr	r3, [r3, #4]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d10c      	bne.n	800c82c <HAL_RCC_OscConfig+0x98>
 800c812:	4b7b      	ldr	r3, [pc, #492]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a7a      	ldr	r2, [pc, #488]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c81c:	6013      	str	r3, [r2, #0]
 800c81e:	4b78      	ldr	r3, [pc, #480]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4a77      	ldr	r2, [pc, #476]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c828:	6013      	str	r3, [r2, #0]
 800c82a:	e01d      	b.n	800c868 <HAL_RCC_OscConfig+0xd4>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c834:	d10c      	bne.n	800c850 <HAL_RCC_OscConfig+0xbc>
 800c836:	4b72      	ldr	r3, [pc, #456]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a71      	ldr	r2, [pc, #452]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c83c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c840:	6013      	str	r3, [r2, #0]
 800c842:	4b6f      	ldr	r3, [pc, #444]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4a6e      	ldr	r2, [pc, #440]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c84c:	6013      	str	r3, [r2, #0]
 800c84e:	e00b      	b.n	800c868 <HAL_RCC_OscConfig+0xd4>
 800c850:	4b6b      	ldr	r3, [pc, #428]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	4a6a      	ldr	r2, [pc, #424]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c85a:	6013      	str	r3, [r2, #0]
 800c85c:	4b68      	ldr	r3, [pc, #416]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4a67      	ldr	r2, [pc, #412]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c866:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	685b      	ldr	r3, [r3, #4]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d013      	beq.n	800c898 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c870:	f7f9 fcee 	bl	8006250 <HAL_GetTick>
 800c874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c876:	e008      	b.n	800c88a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c878:	f7f9 fcea 	bl	8006250 <HAL_GetTick>
 800c87c:	4602      	mov	r2, r0
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	1ad3      	subs	r3, r2, r3
 800c882:	2b64      	cmp	r3, #100	; 0x64
 800c884:	d901      	bls.n	800c88a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800c886:	2303      	movs	r3, #3
 800c888:	e200      	b.n	800cc8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c88a:	4b5d      	ldr	r3, [pc, #372]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c892:	2b00      	cmp	r3, #0
 800c894:	d0f0      	beq.n	800c878 <HAL_RCC_OscConfig+0xe4>
 800c896:	e014      	b.n	800c8c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c898:	f7f9 fcda 	bl	8006250 <HAL_GetTick>
 800c89c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c89e:	e008      	b.n	800c8b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c8a0:	f7f9 fcd6 	bl	8006250 <HAL_GetTick>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	1ad3      	subs	r3, r2, r3
 800c8aa:	2b64      	cmp	r3, #100	; 0x64
 800c8ac:	d901      	bls.n	800c8b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800c8ae:	2303      	movs	r3, #3
 800c8b0:	e1ec      	b.n	800cc8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c8b2:	4b53      	ldr	r3, [pc, #332]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d1f0      	bne.n	800c8a0 <HAL_RCC_OscConfig+0x10c>
 800c8be:	e000      	b.n	800c8c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c8c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f003 0302 	and.w	r3, r3, #2
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d063      	beq.n	800c996 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c8ce:	4b4c      	ldr	r3, [pc, #304]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	f003 030c 	and.w	r3, r3, #12
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d00b      	beq.n	800c8f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800c8da:	4b49      	ldr	r3, [pc, #292]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	f003 030c 	and.w	r3, r3, #12
 800c8e2:	2b08      	cmp	r3, #8
 800c8e4:	d11c      	bne.n	800c920 <HAL_RCC_OscConfig+0x18c>
 800c8e6:	4b46      	ldr	r3, [pc, #280]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d116      	bne.n	800c920 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c8f2:	4b43      	ldr	r3, [pc, #268]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f003 0302 	and.w	r3, r3, #2
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d005      	beq.n	800c90a <HAL_RCC_OscConfig+0x176>
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	691b      	ldr	r3, [r3, #16]
 800c902:	2b01      	cmp	r3, #1
 800c904:	d001      	beq.n	800c90a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800c906:	2301      	movs	r3, #1
 800c908:	e1c0      	b.n	800cc8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c90a:	4b3d      	ldr	r3, [pc, #244]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	695b      	ldr	r3, [r3, #20]
 800c916:	00db      	lsls	r3, r3, #3
 800c918:	4939      	ldr	r1, [pc, #228]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c91a:	4313      	orrs	r3, r2
 800c91c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c91e:	e03a      	b.n	800c996 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	691b      	ldr	r3, [r3, #16]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d020      	beq.n	800c96a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c928:	4b36      	ldr	r3, [pc, #216]	; (800ca04 <HAL_RCC_OscConfig+0x270>)
 800c92a:	2201      	movs	r2, #1
 800c92c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c92e:	f7f9 fc8f 	bl	8006250 <HAL_GetTick>
 800c932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c934:	e008      	b.n	800c948 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c936:	f7f9 fc8b 	bl	8006250 <HAL_GetTick>
 800c93a:	4602      	mov	r2, r0
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	1ad3      	subs	r3, r2, r3
 800c940:	2b02      	cmp	r3, #2
 800c942:	d901      	bls.n	800c948 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800c944:	2303      	movs	r3, #3
 800c946:	e1a1      	b.n	800cc8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c948:	4b2d      	ldr	r3, [pc, #180]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f003 0302 	and.w	r3, r3, #2
 800c950:	2b00      	cmp	r3, #0
 800c952:	d0f0      	beq.n	800c936 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c954:	4b2a      	ldr	r3, [pc, #168]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	695b      	ldr	r3, [r3, #20]
 800c960:	00db      	lsls	r3, r3, #3
 800c962:	4927      	ldr	r1, [pc, #156]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c964:	4313      	orrs	r3, r2
 800c966:	600b      	str	r3, [r1, #0]
 800c968:	e015      	b.n	800c996 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c96a:	4b26      	ldr	r3, [pc, #152]	; (800ca04 <HAL_RCC_OscConfig+0x270>)
 800c96c:	2200      	movs	r2, #0
 800c96e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c970:	f7f9 fc6e 	bl	8006250 <HAL_GetTick>
 800c974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c976:	e008      	b.n	800c98a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c978:	f7f9 fc6a 	bl	8006250 <HAL_GetTick>
 800c97c:	4602      	mov	r2, r0
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	1ad3      	subs	r3, r2, r3
 800c982:	2b02      	cmp	r3, #2
 800c984:	d901      	bls.n	800c98a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800c986:	2303      	movs	r3, #3
 800c988:	e180      	b.n	800cc8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c98a:	4b1d      	ldr	r3, [pc, #116]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f003 0302 	and.w	r3, r3, #2
 800c992:	2b00      	cmp	r3, #0
 800c994:	d1f0      	bne.n	800c978 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f003 0308 	and.w	r3, r3, #8
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d03a      	beq.n	800ca18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	699b      	ldr	r3, [r3, #24]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d019      	beq.n	800c9de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c9aa:	4b17      	ldr	r3, [pc, #92]	; (800ca08 <HAL_RCC_OscConfig+0x274>)
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c9b0:	f7f9 fc4e 	bl	8006250 <HAL_GetTick>
 800c9b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c9b6:	e008      	b.n	800c9ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c9b8:	f7f9 fc4a 	bl	8006250 <HAL_GetTick>
 800c9bc:	4602      	mov	r2, r0
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	1ad3      	subs	r3, r2, r3
 800c9c2:	2b02      	cmp	r3, #2
 800c9c4:	d901      	bls.n	800c9ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800c9c6:	2303      	movs	r3, #3
 800c9c8:	e160      	b.n	800cc8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c9ca:	4b0d      	ldr	r3, [pc, #52]	; (800ca00 <HAL_RCC_OscConfig+0x26c>)
 800c9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ce:	f003 0302 	and.w	r3, r3, #2
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d0f0      	beq.n	800c9b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800c9d6:	2001      	movs	r0, #1
 800c9d8:	f000 fad0 	bl	800cf7c <RCC_Delay>
 800c9dc:	e01c      	b.n	800ca18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c9de:	4b0a      	ldr	r3, [pc, #40]	; (800ca08 <HAL_RCC_OscConfig+0x274>)
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c9e4:	f7f9 fc34 	bl	8006250 <HAL_GetTick>
 800c9e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c9ea:	e00f      	b.n	800ca0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c9ec:	f7f9 fc30 	bl	8006250 <HAL_GetTick>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	1ad3      	subs	r3, r2, r3
 800c9f6:	2b02      	cmp	r3, #2
 800c9f8:	d908      	bls.n	800ca0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800c9fa:	2303      	movs	r3, #3
 800c9fc:	e146      	b.n	800cc8c <HAL_RCC_OscConfig+0x4f8>
 800c9fe:	bf00      	nop
 800ca00:	40021000 	.word	0x40021000
 800ca04:	42420000 	.word	0x42420000
 800ca08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ca0c:	4b92      	ldr	r3, [pc, #584]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800ca0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca10:	f003 0302 	and.w	r3, r3, #2
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d1e9      	bne.n	800c9ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f003 0304 	and.w	r3, r3, #4
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	f000 80a6 	beq.w	800cb72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ca26:	2300      	movs	r3, #0
 800ca28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ca2a:	4b8b      	ldr	r3, [pc, #556]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800ca2c:	69db      	ldr	r3, [r3, #28]
 800ca2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d10d      	bne.n	800ca52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ca36:	4b88      	ldr	r3, [pc, #544]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800ca38:	69db      	ldr	r3, [r3, #28]
 800ca3a:	4a87      	ldr	r2, [pc, #540]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800ca3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca40:	61d3      	str	r3, [r2, #28]
 800ca42:	4b85      	ldr	r3, [pc, #532]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800ca44:	69db      	ldr	r3, [r3, #28]
 800ca46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca4a:	60bb      	str	r3, [r7, #8]
 800ca4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ca4e:	2301      	movs	r3, #1
 800ca50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca52:	4b82      	ldr	r3, [pc, #520]	; (800cc5c <HAL_RCC_OscConfig+0x4c8>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d118      	bne.n	800ca90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ca5e:	4b7f      	ldr	r3, [pc, #508]	; (800cc5c <HAL_RCC_OscConfig+0x4c8>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4a7e      	ldr	r2, [pc, #504]	; (800cc5c <HAL_RCC_OscConfig+0x4c8>)
 800ca64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ca6a:	f7f9 fbf1 	bl	8006250 <HAL_GetTick>
 800ca6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca70:	e008      	b.n	800ca84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca72:	f7f9 fbed 	bl	8006250 <HAL_GetTick>
 800ca76:	4602      	mov	r2, r0
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	1ad3      	subs	r3, r2, r3
 800ca7c:	2b64      	cmp	r3, #100	; 0x64
 800ca7e:	d901      	bls.n	800ca84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ca80:	2303      	movs	r3, #3
 800ca82:	e103      	b.n	800cc8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca84:	4b75      	ldr	r3, [pc, #468]	; (800cc5c <HAL_RCC_OscConfig+0x4c8>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d0f0      	beq.n	800ca72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	68db      	ldr	r3, [r3, #12]
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d106      	bne.n	800caa6 <HAL_RCC_OscConfig+0x312>
 800ca98:	4b6f      	ldr	r3, [pc, #444]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800ca9a:	6a1b      	ldr	r3, [r3, #32]
 800ca9c:	4a6e      	ldr	r2, [pc, #440]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800ca9e:	f043 0301 	orr.w	r3, r3, #1
 800caa2:	6213      	str	r3, [r2, #32]
 800caa4:	e02d      	b.n	800cb02 <HAL_RCC_OscConfig+0x36e>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	68db      	ldr	r3, [r3, #12]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d10c      	bne.n	800cac8 <HAL_RCC_OscConfig+0x334>
 800caae:	4b6a      	ldr	r3, [pc, #424]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800cab0:	6a1b      	ldr	r3, [r3, #32]
 800cab2:	4a69      	ldr	r2, [pc, #420]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800cab4:	f023 0301 	bic.w	r3, r3, #1
 800cab8:	6213      	str	r3, [r2, #32]
 800caba:	4b67      	ldr	r3, [pc, #412]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800cabc:	6a1b      	ldr	r3, [r3, #32]
 800cabe:	4a66      	ldr	r2, [pc, #408]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800cac0:	f023 0304 	bic.w	r3, r3, #4
 800cac4:	6213      	str	r3, [r2, #32]
 800cac6:	e01c      	b.n	800cb02 <HAL_RCC_OscConfig+0x36e>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	68db      	ldr	r3, [r3, #12]
 800cacc:	2b05      	cmp	r3, #5
 800cace:	d10c      	bne.n	800caea <HAL_RCC_OscConfig+0x356>
 800cad0:	4b61      	ldr	r3, [pc, #388]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800cad2:	6a1b      	ldr	r3, [r3, #32]
 800cad4:	4a60      	ldr	r2, [pc, #384]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800cad6:	f043 0304 	orr.w	r3, r3, #4
 800cada:	6213      	str	r3, [r2, #32]
 800cadc:	4b5e      	ldr	r3, [pc, #376]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800cade:	6a1b      	ldr	r3, [r3, #32]
 800cae0:	4a5d      	ldr	r2, [pc, #372]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800cae2:	f043 0301 	orr.w	r3, r3, #1
 800cae6:	6213      	str	r3, [r2, #32]
 800cae8:	e00b      	b.n	800cb02 <HAL_RCC_OscConfig+0x36e>
 800caea:	4b5b      	ldr	r3, [pc, #364]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800caec:	6a1b      	ldr	r3, [r3, #32]
 800caee:	4a5a      	ldr	r2, [pc, #360]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800caf0:	f023 0301 	bic.w	r3, r3, #1
 800caf4:	6213      	str	r3, [r2, #32]
 800caf6:	4b58      	ldr	r3, [pc, #352]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800caf8:	6a1b      	ldr	r3, [r3, #32]
 800cafa:	4a57      	ldr	r2, [pc, #348]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800cafc:	f023 0304 	bic.w	r3, r3, #4
 800cb00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	68db      	ldr	r3, [r3, #12]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d015      	beq.n	800cb36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cb0a:	f7f9 fba1 	bl	8006250 <HAL_GetTick>
 800cb0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cb10:	e00a      	b.n	800cb28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cb12:	f7f9 fb9d 	bl	8006250 <HAL_GetTick>
 800cb16:	4602      	mov	r2, r0
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	1ad3      	subs	r3, r2, r3
 800cb1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d901      	bls.n	800cb28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800cb24:	2303      	movs	r3, #3
 800cb26:	e0b1      	b.n	800cc8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cb28:	4b4b      	ldr	r3, [pc, #300]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800cb2a:	6a1b      	ldr	r3, [r3, #32]
 800cb2c:	f003 0302 	and.w	r3, r3, #2
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d0ee      	beq.n	800cb12 <HAL_RCC_OscConfig+0x37e>
 800cb34:	e014      	b.n	800cb60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cb36:	f7f9 fb8b 	bl	8006250 <HAL_GetTick>
 800cb3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cb3c:	e00a      	b.n	800cb54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cb3e:	f7f9 fb87 	bl	8006250 <HAL_GetTick>
 800cb42:	4602      	mov	r2, r0
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	1ad3      	subs	r3, r2, r3
 800cb48:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d901      	bls.n	800cb54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800cb50:	2303      	movs	r3, #3
 800cb52:	e09b      	b.n	800cc8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cb54:	4b40      	ldr	r3, [pc, #256]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800cb56:	6a1b      	ldr	r3, [r3, #32]
 800cb58:	f003 0302 	and.w	r3, r3, #2
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d1ee      	bne.n	800cb3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800cb60:	7dfb      	ldrb	r3, [r7, #23]
 800cb62:	2b01      	cmp	r3, #1
 800cb64:	d105      	bne.n	800cb72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cb66:	4b3c      	ldr	r3, [pc, #240]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800cb68:	69db      	ldr	r3, [r3, #28]
 800cb6a:	4a3b      	ldr	r2, [pc, #236]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800cb6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	69db      	ldr	r3, [r3, #28]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	f000 8087 	beq.w	800cc8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cb7c:	4b36      	ldr	r3, [pc, #216]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	f003 030c 	and.w	r3, r3, #12
 800cb84:	2b08      	cmp	r3, #8
 800cb86:	d061      	beq.n	800cc4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	69db      	ldr	r3, [r3, #28]
 800cb8c:	2b02      	cmp	r3, #2
 800cb8e:	d146      	bne.n	800cc1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cb90:	4b33      	ldr	r3, [pc, #204]	; (800cc60 <HAL_RCC_OscConfig+0x4cc>)
 800cb92:	2200      	movs	r2, #0
 800cb94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cb96:	f7f9 fb5b 	bl	8006250 <HAL_GetTick>
 800cb9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800cb9c:	e008      	b.n	800cbb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cb9e:	f7f9 fb57 	bl	8006250 <HAL_GetTick>
 800cba2:	4602      	mov	r2, r0
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	1ad3      	subs	r3, r2, r3
 800cba8:	2b02      	cmp	r3, #2
 800cbaa:	d901      	bls.n	800cbb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800cbac:	2303      	movs	r3, #3
 800cbae:	e06d      	b.n	800cc8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800cbb0:	4b29      	ldr	r3, [pc, #164]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d1f0      	bne.n	800cb9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6a1b      	ldr	r3, [r3, #32]
 800cbc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbc4:	d108      	bne.n	800cbd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800cbc6:	4b24      	ldr	r3, [pc, #144]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	689b      	ldr	r3, [r3, #8]
 800cbd2:	4921      	ldr	r1, [pc, #132]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cbd8:	4b1f      	ldr	r3, [pc, #124]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6a19      	ldr	r1, [r3, #32]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe8:	430b      	orrs	r3, r1
 800cbea:	491b      	ldr	r1, [pc, #108]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800cbec:	4313      	orrs	r3, r2
 800cbee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cbf0:	4b1b      	ldr	r3, [pc, #108]	; (800cc60 <HAL_RCC_OscConfig+0x4cc>)
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cbf6:	f7f9 fb2b 	bl	8006250 <HAL_GetTick>
 800cbfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800cbfc:	e008      	b.n	800cc10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cbfe:	f7f9 fb27 	bl	8006250 <HAL_GetTick>
 800cc02:	4602      	mov	r2, r0
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	1ad3      	subs	r3, r2, r3
 800cc08:	2b02      	cmp	r3, #2
 800cc0a:	d901      	bls.n	800cc10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800cc0c:	2303      	movs	r3, #3
 800cc0e:	e03d      	b.n	800cc8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800cc10:	4b11      	ldr	r3, [pc, #68]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d0f0      	beq.n	800cbfe <HAL_RCC_OscConfig+0x46a>
 800cc1c:	e035      	b.n	800cc8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cc1e:	4b10      	ldr	r3, [pc, #64]	; (800cc60 <HAL_RCC_OscConfig+0x4cc>)
 800cc20:	2200      	movs	r2, #0
 800cc22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cc24:	f7f9 fb14 	bl	8006250 <HAL_GetTick>
 800cc28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800cc2a:	e008      	b.n	800cc3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cc2c:	f7f9 fb10 	bl	8006250 <HAL_GetTick>
 800cc30:	4602      	mov	r2, r0
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	1ad3      	subs	r3, r2, r3
 800cc36:	2b02      	cmp	r3, #2
 800cc38:	d901      	bls.n	800cc3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800cc3a:	2303      	movs	r3, #3
 800cc3c:	e026      	b.n	800cc8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800cc3e:	4b06      	ldr	r3, [pc, #24]	; (800cc58 <HAL_RCC_OscConfig+0x4c4>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d1f0      	bne.n	800cc2c <HAL_RCC_OscConfig+0x498>
 800cc4a:	e01e      	b.n	800cc8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	69db      	ldr	r3, [r3, #28]
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d107      	bne.n	800cc64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800cc54:	2301      	movs	r3, #1
 800cc56:	e019      	b.n	800cc8c <HAL_RCC_OscConfig+0x4f8>
 800cc58:	40021000 	.word	0x40021000
 800cc5c:	40007000 	.word	0x40007000
 800cc60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800cc64:	4b0b      	ldr	r3, [pc, #44]	; (800cc94 <HAL_RCC_OscConfig+0x500>)
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6a1b      	ldr	r3, [r3, #32]
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d106      	bne.n	800cc86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d001      	beq.n	800cc8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800cc86:	2301      	movs	r3, #1
 800cc88:	e000      	b.n	800cc8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800cc8a:	2300      	movs	r3, #0
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3718      	adds	r7, #24
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	40021000 	.word	0x40021000

0800cc98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d101      	bne.n	800ccac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e0d0      	b.n	800ce4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ccac:	4b6a      	ldr	r3, [pc, #424]	; (800ce58 <HAL_RCC_ClockConfig+0x1c0>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f003 0307 	and.w	r3, r3, #7
 800ccb4:	683a      	ldr	r2, [r7, #0]
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d910      	bls.n	800ccdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ccba:	4b67      	ldr	r3, [pc, #412]	; (800ce58 <HAL_RCC_ClockConfig+0x1c0>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f023 0207 	bic.w	r2, r3, #7
 800ccc2:	4965      	ldr	r1, [pc, #404]	; (800ce58 <HAL_RCC_ClockConfig+0x1c0>)
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ccca:	4b63      	ldr	r3, [pc, #396]	; (800ce58 <HAL_RCC_ClockConfig+0x1c0>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f003 0307 	and.w	r3, r3, #7
 800ccd2:	683a      	ldr	r2, [r7, #0]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d001      	beq.n	800ccdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ccd8:	2301      	movs	r3, #1
 800ccda:	e0b8      	b.n	800ce4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f003 0302 	and.w	r3, r3, #2
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d020      	beq.n	800cd2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f003 0304 	and.w	r3, r3, #4
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d005      	beq.n	800cd00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ccf4:	4b59      	ldr	r3, [pc, #356]	; (800ce5c <HAL_RCC_ClockConfig+0x1c4>)
 800ccf6:	685b      	ldr	r3, [r3, #4]
 800ccf8:	4a58      	ldr	r2, [pc, #352]	; (800ce5c <HAL_RCC_ClockConfig+0x1c4>)
 800ccfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ccfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f003 0308 	and.w	r3, r3, #8
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d005      	beq.n	800cd18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cd0c:	4b53      	ldr	r3, [pc, #332]	; (800ce5c <HAL_RCC_ClockConfig+0x1c4>)
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	4a52      	ldr	r2, [pc, #328]	; (800ce5c <HAL_RCC_ClockConfig+0x1c4>)
 800cd12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800cd16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cd18:	4b50      	ldr	r3, [pc, #320]	; (800ce5c <HAL_RCC_ClockConfig+0x1c4>)
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	689b      	ldr	r3, [r3, #8]
 800cd24:	494d      	ldr	r1, [pc, #308]	; (800ce5c <HAL_RCC_ClockConfig+0x1c4>)
 800cd26:	4313      	orrs	r3, r2
 800cd28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f003 0301 	and.w	r3, r3, #1
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d040      	beq.n	800cdb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d107      	bne.n	800cd4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cd3e:	4b47      	ldr	r3, [pc, #284]	; (800ce5c <HAL_RCC_ClockConfig+0x1c4>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d115      	bne.n	800cd76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	e07f      	b.n	800ce4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	2b02      	cmp	r3, #2
 800cd54:	d107      	bne.n	800cd66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cd56:	4b41      	ldr	r3, [pc, #260]	; (800ce5c <HAL_RCC_ClockConfig+0x1c4>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d109      	bne.n	800cd76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cd62:	2301      	movs	r3, #1
 800cd64:	e073      	b.n	800ce4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cd66:	4b3d      	ldr	r3, [pc, #244]	; (800ce5c <HAL_RCC_ClockConfig+0x1c4>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f003 0302 	and.w	r3, r3, #2
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d101      	bne.n	800cd76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cd72:	2301      	movs	r3, #1
 800cd74:	e06b      	b.n	800ce4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cd76:	4b39      	ldr	r3, [pc, #228]	; (800ce5c <HAL_RCC_ClockConfig+0x1c4>)
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	f023 0203 	bic.w	r2, r3, #3
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	4936      	ldr	r1, [pc, #216]	; (800ce5c <HAL_RCC_ClockConfig+0x1c4>)
 800cd84:	4313      	orrs	r3, r2
 800cd86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cd88:	f7f9 fa62 	bl	8006250 <HAL_GetTick>
 800cd8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd8e:	e00a      	b.n	800cda6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cd90:	f7f9 fa5e 	bl	8006250 <HAL_GetTick>
 800cd94:	4602      	mov	r2, r0
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	1ad3      	subs	r3, r2, r3
 800cd9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd9e:	4293      	cmp	r3, r2
 800cda0:	d901      	bls.n	800cda6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cda2:	2303      	movs	r3, #3
 800cda4:	e053      	b.n	800ce4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cda6:	4b2d      	ldr	r3, [pc, #180]	; (800ce5c <HAL_RCC_ClockConfig+0x1c4>)
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	f003 020c 	and.w	r2, r3, #12
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	685b      	ldr	r3, [r3, #4]
 800cdb2:	009b      	lsls	r3, r3, #2
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d1eb      	bne.n	800cd90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cdb8:	4b27      	ldr	r3, [pc, #156]	; (800ce58 <HAL_RCC_ClockConfig+0x1c0>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f003 0307 	and.w	r3, r3, #7
 800cdc0:	683a      	ldr	r2, [r7, #0]
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d210      	bcs.n	800cde8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cdc6:	4b24      	ldr	r3, [pc, #144]	; (800ce58 <HAL_RCC_ClockConfig+0x1c0>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f023 0207 	bic.w	r2, r3, #7
 800cdce:	4922      	ldr	r1, [pc, #136]	; (800ce58 <HAL_RCC_ClockConfig+0x1c0>)
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	4313      	orrs	r3, r2
 800cdd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cdd6:	4b20      	ldr	r3, [pc, #128]	; (800ce58 <HAL_RCC_ClockConfig+0x1c0>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f003 0307 	and.w	r3, r3, #7
 800cdde:	683a      	ldr	r2, [r7, #0]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d001      	beq.n	800cde8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800cde4:	2301      	movs	r3, #1
 800cde6:	e032      	b.n	800ce4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f003 0304 	and.w	r3, r3, #4
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d008      	beq.n	800ce06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cdf4:	4b19      	ldr	r3, [pc, #100]	; (800ce5c <HAL_RCC_ClockConfig+0x1c4>)
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	68db      	ldr	r3, [r3, #12]
 800ce00:	4916      	ldr	r1, [pc, #88]	; (800ce5c <HAL_RCC_ClockConfig+0x1c4>)
 800ce02:	4313      	orrs	r3, r2
 800ce04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f003 0308 	and.w	r3, r3, #8
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d009      	beq.n	800ce26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ce12:	4b12      	ldr	r3, [pc, #72]	; (800ce5c <HAL_RCC_ClockConfig+0x1c4>)
 800ce14:	685b      	ldr	r3, [r3, #4]
 800ce16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	691b      	ldr	r3, [r3, #16]
 800ce1e:	00db      	lsls	r3, r3, #3
 800ce20:	490e      	ldr	r1, [pc, #56]	; (800ce5c <HAL_RCC_ClockConfig+0x1c4>)
 800ce22:	4313      	orrs	r3, r2
 800ce24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ce26:	f000 f821 	bl	800ce6c <HAL_RCC_GetSysClockFreq>
 800ce2a:	4602      	mov	r2, r0
 800ce2c:	4b0b      	ldr	r3, [pc, #44]	; (800ce5c <HAL_RCC_ClockConfig+0x1c4>)
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	091b      	lsrs	r3, r3, #4
 800ce32:	f003 030f 	and.w	r3, r3, #15
 800ce36:	490a      	ldr	r1, [pc, #40]	; (800ce60 <HAL_RCC_ClockConfig+0x1c8>)
 800ce38:	5ccb      	ldrb	r3, [r1, r3]
 800ce3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ce3e:	4a09      	ldr	r2, [pc, #36]	; (800ce64 <HAL_RCC_ClockConfig+0x1cc>)
 800ce40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800ce42:	4b09      	ldr	r3, [pc, #36]	; (800ce68 <HAL_RCC_ClockConfig+0x1d0>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7f9 f9c0 	bl	80061cc <HAL_InitTick>

  return HAL_OK;
 800ce4c:	2300      	movs	r3, #0
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3710      	adds	r7, #16
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}
 800ce56:	bf00      	nop
 800ce58:	40022000 	.word	0x40022000
 800ce5c:	40021000 	.word	0x40021000
 800ce60:	08015dcc 	.word	0x08015dcc
 800ce64:	2000068c 	.word	0x2000068c
 800ce68:	20000690 	.word	0x20000690

0800ce6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b087      	sub	sp, #28
 800ce70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ce72:	2300      	movs	r3, #0
 800ce74:	60fb      	str	r3, [r7, #12]
 800ce76:	2300      	movs	r3, #0
 800ce78:	60bb      	str	r3, [r7, #8]
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	617b      	str	r3, [r7, #20]
 800ce7e:	2300      	movs	r3, #0
 800ce80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800ce82:	2300      	movs	r3, #0
 800ce84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800ce86:	4b1e      	ldr	r3, [pc, #120]	; (800cf00 <HAL_RCC_GetSysClockFreq+0x94>)
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f003 030c 	and.w	r3, r3, #12
 800ce92:	2b04      	cmp	r3, #4
 800ce94:	d002      	beq.n	800ce9c <HAL_RCC_GetSysClockFreq+0x30>
 800ce96:	2b08      	cmp	r3, #8
 800ce98:	d003      	beq.n	800cea2 <HAL_RCC_GetSysClockFreq+0x36>
 800ce9a:	e027      	b.n	800ceec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ce9c:	4b19      	ldr	r3, [pc, #100]	; (800cf04 <HAL_RCC_GetSysClockFreq+0x98>)
 800ce9e:	613b      	str	r3, [r7, #16]
      break;
 800cea0:	e027      	b.n	800cef2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	0c9b      	lsrs	r3, r3, #18
 800cea6:	f003 030f 	and.w	r3, r3, #15
 800ceaa:	4a17      	ldr	r2, [pc, #92]	; (800cf08 <HAL_RCC_GetSysClockFreq+0x9c>)
 800ceac:	5cd3      	ldrb	r3, [r2, r3]
 800ceae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d010      	beq.n	800cedc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ceba:	4b11      	ldr	r3, [pc, #68]	; (800cf00 <HAL_RCC_GetSysClockFreq+0x94>)
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	0c5b      	lsrs	r3, r3, #17
 800cec0:	f003 0301 	and.w	r3, r3, #1
 800cec4:	4a11      	ldr	r2, [pc, #68]	; (800cf0c <HAL_RCC_GetSysClockFreq+0xa0>)
 800cec6:	5cd3      	ldrb	r3, [r2, r3]
 800cec8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	4a0d      	ldr	r2, [pc, #52]	; (800cf04 <HAL_RCC_GetSysClockFreq+0x98>)
 800cece:	fb03 f202 	mul.w	r2, r3, r2
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ced8:	617b      	str	r3, [r7, #20]
 800ceda:	e004      	b.n	800cee6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	4a0c      	ldr	r2, [pc, #48]	; (800cf10 <HAL_RCC_GetSysClockFreq+0xa4>)
 800cee0:	fb02 f303 	mul.w	r3, r2, r3
 800cee4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	613b      	str	r3, [r7, #16]
      break;
 800ceea:	e002      	b.n	800cef2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ceec:	4b09      	ldr	r3, [pc, #36]	; (800cf14 <HAL_RCC_GetSysClockFreq+0xa8>)
 800ceee:	613b      	str	r3, [r7, #16]
      break;
 800cef0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cef2:	693b      	ldr	r3, [r7, #16]
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	371c      	adds	r7, #28
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bc80      	pop	{r7}
 800cefc:	4770      	bx	lr
 800cefe:	bf00      	nop
 800cf00:	40021000 	.word	0x40021000
 800cf04:	00b71b00 	.word	0x00b71b00
 800cf08:	08015de4 	.word	0x08015de4
 800cf0c:	08015df4 	.word	0x08015df4
 800cf10:	003d0900 	.word	0x003d0900
 800cf14:	007a1200 	.word	0x007a1200

0800cf18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cf1c:	4b02      	ldr	r3, [pc, #8]	; (800cf28 <HAL_RCC_GetHCLKFreq+0x10>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bc80      	pop	{r7}
 800cf26:	4770      	bx	lr
 800cf28:	2000068c 	.word	0x2000068c

0800cf2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800cf30:	f7ff fff2 	bl	800cf18 <HAL_RCC_GetHCLKFreq>
 800cf34:	4602      	mov	r2, r0
 800cf36:	4b05      	ldr	r3, [pc, #20]	; (800cf4c <HAL_RCC_GetPCLK1Freq+0x20>)
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	0a1b      	lsrs	r3, r3, #8
 800cf3c:	f003 0307 	and.w	r3, r3, #7
 800cf40:	4903      	ldr	r1, [pc, #12]	; (800cf50 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cf42:	5ccb      	ldrb	r3, [r1, r3]
 800cf44:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	40021000 	.word	0x40021000
 800cf50:	08015ddc 	.word	0x08015ddc

0800cf54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800cf58:	f7ff ffde 	bl	800cf18 <HAL_RCC_GetHCLKFreq>
 800cf5c:	4602      	mov	r2, r0
 800cf5e:	4b05      	ldr	r3, [pc, #20]	; (800cf74 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	0adb      	lsrs	r3, r3, #11
 800cf64:	f003 0307 	and.w	r3, r3, #7
 800cf68:	4903      	ldr	r1, [pc, #12]	; (800cf78 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cf6a:	5ccb      	ldrb	r3, [r1, r3]
 800cf6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	40021000 	.word	0x40021000
 800cf78:	08015ddc 	.word	0x08015ddc

0800cf7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800cf84:	4b0a      	ldr	r3, [pc, #40]	; (800cfb0 <RCC_Delay+0x34>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4a0a      	ldr	r2, [pc, #40]	; (800cfb4 <RCC_Delay+0x38>)
 800cf8a:	fba2 2303 	umull	r2, r3, r2, r3
 800cf8e:	0a5b      	lsrs	r3, r3, #9
 800cf90:	687a      	ldr	r2, [r7, #4]
 800cf92:	fb02 f303 	mul.w	r3, r2, r3
 800cf96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800cf98:	bf00      	nop
  }
  while (Delay --);
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	1e5a      	subs	r2, r3, #1
 800cf9e:	60fa      	str	r2, [r7, #12]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d1f9      	bne.n	800cf98 <RCC_Delay+0x1c>
}
 800cfa4:	bf00      	nop
 800cfa6:	bf00      	nop
 800cfa8:	3714      	adds	r7, #20
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bc80      	pop	{r7}
 800cfae:	4770      	bx	lr
 800cfb0:	2000068c 	.word	0x2000068c
 800cfb4:	10624dd3 	.word	0x10624dd3

0800cfb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b086      	sub	sp, #24
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	613b      	str	r3, [r7, #16]
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f003 0301 	and.w	r3, r3, #1
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d07d      	beq.n	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cfd8:	4b4f      	ldr	r3, [pc, #316]	; (800d118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800cfda:	69db      	ldr	r3, [r3, #28]
 800cfdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d10d      	bne.n	800d000 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cfe4:	4b4c      	ldr	r3, [pc, #304]	; (800d118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800cfe6:	69db      	ldr	r3, [r3, #28]
 800cfe8:	4a4b      	ldr	r2, [pc, #300]	; (800d118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800cfea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfee:	61d3      	str	r3, [r2, #28]
 800cff0:	4b49      	ldr	r3, [pc, #292]	; (800d118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800cff2:	69db      	ldr	r3, [r3, #28]
 800cff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cff8:	60bb      	str	r3, [r7, #8]
 800cffa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cffc:	2301      	movs	r3, #1
 800cffe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d000:	4b46      	ldr	r3, [pc, #280]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d118      	bne.n	800d03e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d00c:	4b43      	ldr	r3, [pc, #268]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	4a42      	ldr	r2, [pc, #264]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800d012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d016:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d018:	f7f9 f91a 	bl	8006250 <HAL_GetTick>
 800d01c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d01e:	e008      	b.n	800d032 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d020:	f7f9 f916 	bl	8006250 <HAL_GetTick>
 800d024:	4602      	mov	r2, r0
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	1ad3      	subs	r3, r2, r3
 800d02a:	2b64      	cmp	r3, #100	; 0x64
 800d02c:	d901      	bls.n	800d032 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800d02e:	2303      	movs	r3, #3
 800d030:	e06d      	b.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d032:	4b3a      	ldr	r3, [pc, #232]	; (800d11c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d0f0      	beq.n	800d020 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d03e:	4b36      	ldr	r3, [pc, #216]	; (800d118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d040:	6a1b      	ldr	r3, [r3, #32]
 800d042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d046:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d02e      	beq.n	800d0ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	685b      	ldr	r3, [r3, #4]
 800d052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d056:	68fa      	ldr	r2, [r7, #12]
 800d058:	429a      	cmp	r2, r3
 800d05a:	d027      	beq.n	800d0ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d05c:	4b2e      	ldr	r3, [pc, #184]	; (800d118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d05e:	6a1b      	ldr	r3, [r3, #32]
 800d060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d064:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d066:	4b2e      	ldr	r3, [pc, #184]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800d068:	2201      	movs	r2, #1
 800d06a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d06c:	4b2c      	ldr	r3, [pc, #176]	; (800d120 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800d06e:	2200      	movs	r2, #0
 800d070:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800d072:	4a29      	ldr	r2, [pc, #164]	; (800d118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f003 0301 	and.w	r3, r3, #1
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d014      	beq.n	800d0ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d082:	f7f9 f8e5 	bl	8006250 <HAL_GetTick>
 800d086:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d088:	e00a      	b.n	800d0a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d08a:	f7f9 f8e1 	bl	8006250 <HAL_GetTick>
 800d08e:	4602      	mov	r2, r0
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	1ad3      	subs	r3, r2, r3
 800d094:	f241 3288 	movw	r2, #5000	; 0x1388
 800d098:	4293      	cmp	r3, r2
 800d09a:	d901      	bls.n	800d0a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800d09c:	2303      	movs	r3, #3
 800d09e:	e036      	b.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d0a0:	4b1d      	ldr	r3, [pc, #116]	; (800d118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d0a2:	6a1b      	ldr	r3, [r3, #32]
 800d0a4:	f003 0302 	and.w	r3, r3, #2
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d0ee      	beq.n	800d08a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d0ac:	4b1a      	ldr	r3, [pc, #104]	; (800d118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d0ae:	6a1b      	ldr	r3, [r3, #32]
 800d0b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	4917      	ldr	r1, [pc, #92]	; (800d118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d0ba:	4313      	orrs	r3, r2
 800d0bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800d0be:	7dfb      	ldrb	r3, [r7, #23]
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	d105      	bne.n	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d0c4:	4b14      	ldr	r3, [pc, #80]	; (800d118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d0c6:	69db      	ldr	r3, [r3, #28]
 800d0c8:	4a13      	ldr	r2, [pc, #76]	; (800d118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d0ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d0ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f003 0302 	and.w	r3, r3, #2
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d008      	beq.n	800d0ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d0dc:	4b0e      	ldr	r3, [pc, #56]	; (800d118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	689b      	ldr	r3, [r3, #8]
 800d0e8:	490b      	ldr	r1, [pc, #44]	; (800d118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f003 0310 	and.w	r3, r3, #16
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d008      	beq.n	800d10c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d0fa:	4b07      	ldr	r3, [pc, #28]	; (800d118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	695b      	ldr	r3, [r3, #20]
 800d106:	4904      	ldr	r1, [pc, #16]	; (800d118 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d108:	4313      	orrs	r3, r2
 800d10a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800d10c:	2300      	movs	r3, #0
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3718      	adds	r7, #24
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	40021000 	.word	0x40021000
 800d11c:	40007000 	.word	0x40007000
 800d120:	42420440 	.word	0x42420440

0800d124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d101      	bne.n	800d136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d132:	2301      	movs	r3, #1
 800d134:	e041      	b.n	800d1ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d13c:	b2db      	uxtb	r3, r3
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d106      	bne.n	800d150 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2200      	movs	r2, #0
 800d146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f7f8 fdf0 	bl	8005d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2202      	movs	r2, #2
 800d154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	3304      	adds	r3, #4
 800d160:	4619      	mov	r1, r3
 800d162:	4610      	mov	r0, r2
 800d164:	f000 faca 	bl	800d6fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2201      	movs	r2, #1
 800d16c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2201      	movs	r2, #1
 800d174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2201      	movs	r2, #1
 800d17c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2201      	movs	r2, #1
 800d184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2201      	movs	r2, #1
 800d18c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2201      	movs	r2, #1
 800d194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d1b8:	2300      	movs	r3, #0
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3708      	adds	r7, #8
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}

0800d1c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d1c2:	b580      	push	{r7, lr}
 800d1c4:	b082      	sub	sp, #8
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d101      	bne.n	800d1d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	e041      	b.n	800d258 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1da:	b2db      	uxtb	r3, r3
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d106      	bne.n	800d1ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 f839 	bl	800d260 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2202      	movs	r2, #2
 800d1f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681a      	ldr	r2, [r3, #0]
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	3304      	adds	r3, #4
 800d1fe:	4619      	mov	r1, r3
 800d200:	4610      	mov	r0, r2
 800d202:	f000 fa7b 	bl	800d6fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2201      	movs	r2, #1
 800d20a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2201      	movs	r2, #1
 800d212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2201      	movs	r2, #1
 800d21a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2201      	movs	r2, #1
 800d222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2201      	movs	r2, #1
 800d22a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2201      	movs	r2, #1
 800d232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2201      	movs	r2, #1
 800d23a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2201      	movs	r2, #1
 800d242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2201      	movs	r2, #1
 800d24a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2201      	movs	r2, #1
 800d252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d256:	2300      	movs	r3, #0
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3708      	adds	r7, #8
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d268:	bf00      	nop
 800d26a:	370c      	adds	r7, #12
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bc80      	pop	{r7}
 800d270:	4770      	bx	lr
	...

0800d274 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d109      	bne.n	800d298 <HAL_TIM_PWM_Start+0x24>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	bf14      	ite	ne
 800d290:	2301      	movne	r3, #1
 800d292:	2300      	moveq	r3, #0
 800d294:	b2db      	uxtb	r3, r3
 800d296:	e022      	b.n	800d2de <HAL_TIM_PWM_Start+0x6a>
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	2b04      	cmp	r3, #4
 800d29c:	d109      	bne.n	800d2b2 <HAL_TIM_PWM_Start+0x3e>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d2a4:	b2db      	uxtb	r3, r3
 800d2a6:	2b01      	cmp	r3, #1
 800d2a8:	bf14      	ite	ne
 800d2aa:	2301      	movne	r3, #1
 800d2ac:	2300      	moveq	r3, #0
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	e015      	b.n	800d2de <HAL_TIM_PWM_Start+0x6a>
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	2b08      	cmp	r3, #8
 800d2b6:	d109      	bne.n	800d2cc <HAL_TIM_PWM_Start+0x58>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	bf14      	ite	ne
 800d2c4:	2301      	movne	r3, #1
 800d2c6:	2300      	moveq	r3, #0
 800d2c8:	b2db      	uxtb	r3, r3
 800d2ca:	e008      	b.n	800d2de <HAL_TIM_PWM_Start+0x6a>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d2d2:	b2db      	uxtb	r3, r3
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	bf14      	ite	ne
 800d2d8:	2301      	movne	r3, #1
 800d2da:	2300      	moveq	r3, #0
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d001      	beq.n	800d2e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	e072      	b.n	800d3cc <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d104      	bne.n	800d2f6 <HAL_TIM_PWM_Start+0x82>
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2202      	movs	r2, #2
 800d2f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d2f4:	e013      	b.n	800d31e <HAL_TIM_PWM_Start+0xaa>
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	2b04      	cmp	r3, #4
 800d2fa:	d104      	bne.n	800d306 <HAL_TIM_PWM_Start+0x92>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2202      	movs	r2, #2
 800d300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d304:	e00b      	b.n	800d31e <HAL_TIM_PWM_Start+0xaa>
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	2b08      	cmp	r3, #8
 800d30a:	d104      	bne.n	800d316 <HAL_TIM_PWM_Start+0xa2>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2202      	movs	r2, #2
 800d310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d314:	e003      	b.n	800d31e <HAL_TIM_PWM_Start+0xaa>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2202      	movs	r2, #2
 800d31a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	2201      	movs	r2, #1
 800d324:	6839      	ldr	r1, [r7, #0]
 800d326:	4618      	mov	r0, r3
 800d328:	f000 fca4 	bl	800dc74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4a28      	ldr	r2, [pc, #160]	; (800d3d4 <HAL_TIM_PWM_Start+0x160>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d004      	beq.n	800d340 <HAL_TIM_PWM_Start+0xcc>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4a27      	ldr	r2, [pc, #156]	; (800d3d8 <HAL_TIM_PWM_Start+0x164>)
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d101      	bne.n	800d344 <HAL_TIM_PWM_Start+0xd0>
 800d340:	2301      	movs	r3, #1
 800d342:	e000      	b.n	800d346 <HAL_TIM_PWM_Start+0xd2>
 800d344:	2300      	movs	r3, #0
 800d346:	2b00      	cmp	r3, #0
 800d348:	d007      	beq.n	800d35a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d358:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	4a1d      	ldr	r2, [pc, #116]	; (800d3d4 <HAL_TIM_PWM_Start+0x160>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d018      	beq.n	800d396 <HAL_TIM_PWM_Start+0x122>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	4a1b      	ldr	r2, [pc, #108]	; (800d3d8 <HAL_TIM_PWM_Start+0x164>)
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d013      	beq.n	800d396 <HAL_TIM_PWM_Start+0x122>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d376:	d00e      	beq.n	800d396 <HAL_TIM_PWM_Start+0x122>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4a17      	ldr	r2, [pc, #92]	; (800d3dc <HAL_TIM_PWM_Start+0x168>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d009      	beq.n	800d396 <HAL_TIM_PWM_Start+0x122>
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	4a16      	ldr	r2, [pc, #88]	; (800d3e0 <HAL_TIM_PWM_Start+0x16c>)
 800d388:	4293      	cmp	r3, r2
 800d38a:	d004      	beq.n	800d396 <HAL_TIM_PWM_Start+0x122>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	4a14      	ldr	r2, [pc, #80]	; (800d3e4 <HAL_TIM_PWM_Start+0x170>)
 800d392:	4293      	cmp	r3, r2
 800d394:	d111      	bne.n	800d3ba <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	689b      	ldr	r3, [r3, #8]
 800d39c:	f003 0307 	and.w	r3, r3, #7
 800d3a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2b06      	cmp	r3, #6
 800d3a6:	d010      	beq.n	800d3ca <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	681a      	ldr	r2, [r3, #0]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f042 0201 	orr.w	r2, r2, #1
 800d3b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3b8:	e007      	b.n	800d3ca <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f042 0201 	orr.w	r2, r2, #1
 800d3c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d3ca:	2300      	movs	r3, #0
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3710      	adds	r7, #16
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}
 800d3d4:	40012c00 	.word	0x40012c00
 800d3d8:	40013400 	.word	0x40013400
 800d3dc:	40000400 	.word	0x40000400
 800d3e0:	40000800 	.word	0x40000800
 800d3e4:	40000c00 	.word	0x40000c00

0800d3e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b086      	sub	sp, #24
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3fe:	2b01      	cmp	r3, #1
 800d400:	d101      	bne.n	800d406 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d402:	2302      	movs	r3, #2
 800d404:	e0ae      	b.n	800d564 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2201      	movs	r2, #1
 800d40a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2b0c      	cmp	r3, #12
 800d412:	f200 809f 	bhi.w	800d554 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d416:	a201      	add	r2, pc, #4	; (adr r2, 800d41c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d41c:	0800d451 	.word	0x0800d451
 800d420:	0800d555 	.word	0x0800d555
 800d424:	0800d555 	.word	0x0800d555
 800d428:	0800d555 	.word	0x0800d555
 800d42c:	0800d491 	.word	0x0800d491
 800d430:	0800d555 	.word	0x0800d555
 800d434:	0800d555 	.word	0x0800d555
 800d438:	0800d555 	.word	0x0800d555
 800d43c:	0800d4d3 	.word	0x0800d4d3
 800d440:	0800d555 	.word	0x0800d555
 800d444:	0800d555 	.word	0x0800d555
 800d448:	0800d555 	.word	0x0800d555
 800d44c:	0800d513 	.word	0x0800d513
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	68b9      	ldr	r1, [r7, #8]
 800d456:	4618      	mov	r0, r3
 800d458:	f000 f9ca 	bl	800d7f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	699a      	ldr	r2, [r3, #24]
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f042 0208 	orr.w	r2, r2, #8
 800d46a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	699a      	ldr	r2, [r3, #24]
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f022 0204 	bic.w	r2, r2, #4
 800d47a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	6999      	ldr	r1, [r3, #24]
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	691a      	ldr	r2, [r3, #16]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	430a      	orrs	r2, r1
 800d48c:	619a      	str	r2, [r3, #24]
      break;
 800d48e:	e064      	b.n	800d55a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	68b9      	ldr	r1, [r7, #8]
 800d496:	4618      	mov	r0, r3
 800d498:	f000 fa1a 	bl	800d8d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	699a      	ldr	r2, [r3, #24]
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	699a      	ldr	r2, [r3, #24]
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d4ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	6999      	ldr	r1, [r3, #24]
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	691b      	ldr	r3, [r3, #16]
 800d4c6:	021a      	lsls	r2, r3, #8
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	430a      	orrs	r2, r1
 800d4ce:	619a      	str	r2, [r3, #24]
      break;
 800d4d0:	e043      	b.n	800d55a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	68b9      	ldr	r1, [r7, #8]
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f000 fa6d 	bl	800d9b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	69da      	ldr	r2, [r3, #28]
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	f042 0208 	orr.w	r2, r2, #8
 800d4ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	69da      	ldr	r2, [r3, #28]
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f022 0204 	bic.w	r2, r2, #4
 800d4fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	69d9      	ldr	r1, [r3, #28]
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	691a      	ldr	r2, [r3, #16]
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	430a      	orrs	r2, r1
 800d50e:	61da      	str	r2, [r3, #28]
      break;
 800d510:	e023      	b.n	800d55a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	68b9      	ldr	r1, [r7, #8]
 800d518:	4618      	mov	r0, r3
 800d51a:	f000 fac1 	bl	800daa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	69da      	ldr	r2, [r3, #28]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d52c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	69da      	ldr	r2, [r3, #28]
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d53c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	69d9      	ldr	r1, [r3, #28]
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	691b      	ldr	r3, [r3, #16]
 800d548:	021a      	lsls	r2, r3, #8
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	430a      	orrs	r2, r1
 800d550:	61da      	str	r2, [r3, #28]
      break;
 800d552:	e002      	b.n	800d55a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d554:	2301      	movs	r3, #1
 800d556:	75fb      	strb	r3, [r7, #23]
      break;
 800d558:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	2200      	movs	r2, #0
 800d55e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d562:	7dfb      	ldrb	r3, [r7, #23]
}
 800d564:	4618      	mov	r0, r3
 800d566:	3718      	adds	r7, #24
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b084      	sub	sp, #16
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d576:	2300      	movs	r3, #0
 800d578:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d580:	2b01      	cmp	r3, #1
 800d582:	d101      	bne.n	800d588 <HAL_TIM_ConfigClockSource+0x1c>
 800d584:	2302      	movs	r3, #2
 800d586:	e0b4      	b.n	800d6f2 <HAL_TIM_ConfigClockSource+0x186>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2201      	movs	r2, #1
 800d58c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2202      	movs	r2, #2
 800d594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	689b      	ldr	r3, [r3, #8]
 800d59e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d5a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d5ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	68ba      	ldr	r2, [r7, #8]
 800d5b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d5c0:	d03e      	beq.n	800d640 <HAL_TIM_ConfigClockSource+0xd4>
 800d5c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d5c6:	f200 8087 	bhi.w	800d6d8 <HAL_TIM_ConfigClockSource+0x16c>
 800d5ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5ce:	f000 8086 	beq.w	800d6de <HAL_TIM_ConfigClockSource+0x172>
 800d5d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5d6:	d87f      	bhi.n	800d6d8 <HAL_TIM_ConfigClockSource+0x16c>
 800d5d8:	2b70      	cmp	r3, #112	; 0x70
 800d5da:	d01a      	beq.n	800d612 <HAL_TIM_ConfigClockSource+0xa6>
 800d5dc:	2b70      	cmp	r3, #112	; 0x70
 800d5de:	d87b      	bhi.n	800d6d8 <HAL_TIM_ConfigClockSource+0x16c>
 800d5e0:	2b60      	cmp	r3, #96	; 0x60
 800d5e2:	d050      	beq.n	800d686 <HAL_TIM_ConfigClockSource+0x11a>
 800d5e4:	2b60      	cmp	r3, #96	; 0x60
 800d5e6:	d877      	bhi.n	800d6d8 <HAL_TIM_ConfigClockSource+0x16c>
 800d5e8:	2b50      	cmp	r3, #80	; 0x50
 800d5ea:	d03c      	beq.n	800d666 <HAL_TIM_ConfigClockSource+0xfa>
 800d5ec:	2b50      	cmp	r3, #80	; 0x50
 800d5ee:	d873      	bhi.n	800d6d8 <HAL_TIM_ConfigClockSource+0x16c>
 800d5f0:	2b40      	cmp	r3, #64	; 0x40
 800d5f2:	d058      	beq.n	800d6a6 <HAL_TIM_ConfigClockSource+0x13a>
 800d5f4:	2b40      	cmp	r3, #64	; 0x40
 800d5f6:	d86f      	bhi.n	800d6d8 <HAL_TIM_ConfigClockSource+0x16c>
 800d5f8:	2b30      	cmp	r3, #48	; 0x30
 800d5fa:	d064      	beq.n	800d6c6 <HAL_TIM_ConfigClockSource+0x15a>
 800d5fc:	2b30      	cmp	r3, #48	; 0x30
 800d5fe:	d86b      	bhi.n	800d6d8 <HAL_TIM_ConfigClockSource+0x16c>
 800d600:	2b20      	cmp	r3, #32
 800d602:	d060      	beq.n	800d6c6 <HAL_TIM_ConfigClockSource+0x15a>
 800d604:	2b20      	cmp	r3, #32
 800d606:	d867      	bhi.n	800d6d8 <HAL_TIM_ConfigClockSource+0x16c>
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d05c      	beq.n	800d6c6 <HAL_TIM_ConfigClockSource+0x15a>
 800d60c:	2b10      	cmp	r3, #16
 800d60e:	d05a      	beq.n	800d6c6 <HAL_TIM_ConfigClockSource+0x15a>
 800d610:	e062      	b.n	800d6d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d622:	f000 fb08 	bl	800dc36 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	689b      	ldr	r3, [r3, #8]
 800d62c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d634:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	68ba      	ldr	r2, [r7, #8]
 800d63c:	609a      	str	r2, [r3, #8]
      break;
 800d63e:	e04f      	b.n	800d6e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d650:	f000 faf1 	bl	800dc36 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	689a      	ldr	r2, [r3, #8]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d662:	609a      	str	r2, [r3, #8]
      break;
 800d664:	e03c      	b.n	800d6e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d672:	461a      	mov	r2, r3
 800d674:	f000 fa68 	bl	800db48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	2150      	movs	r1, #80	; 0x50
 800d67e:	4618      	mov	r0, r3
 800d680:	f000 fabf 	bl	800dc02 <TIM_ITRx_SetConfig>
      break;
 800d684:	e02c      	b.n	800d6e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d692:	461a      	mov	r2, r3
 800d694:	f000 fa86 	bl	800dba4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	2160      	movs	r1, #96	; 0x60
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f000 faaf 	bl	800dc02 <TIM_ITRx_SetConfig>
      break;
 800d6a4:	e01c      	b.n	800d6e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d6b2:	461a      	mov	r2, r3
 800d6b4:	f000 fa48 	bl	800db48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	2140      	movs	r1, #64	; 0x40
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f000 fa9f 	bl	800dc02 <TIM_ITRx_SetConfig>
      break;
 800d6c4:	e00c      	b.n	800d6e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	4610      	mov	r0, r2
 800d6d2:	f000 fa96 	bl	800dc02 <TIM_ITRx_SetConfig>
      break;
 800d6d6:	e003      	b.n	800d6e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	73fb      	strb	r3, [r7, #15]
      break;
 800d6dc:	e000      	b.n	800d6e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d6de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2201      	movs	r2, #1
 800d6e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3710      	adds	r7, #16
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}
	...

0800d6fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b085      	sub	sp, #20
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	4a33      	ldr	r2, [pc, #204]	; (800d7dc <TIM_Base_SetConfig+0xe0>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d013      	beq.n	800d73c <TIM_Base_SetConfig+0x40>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	4a32      	ldr	r2, [pc, #200]	; (800d7e0 <TIM_Base_SetConfig+0xe4>)
 800d718:	4293      	cmp	r3, r2
 800d71a:	d00f      	beq.n	800d73c <TIM_Base_SetConfig+0x40>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d722:	d00b      	beq.n	800d73c <TIM_Base_SetConfig+0x40>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	4a2f      	ldr	r2, [pc, #188]	; (800d7e4 <TIM_Base_SetConfig+0xe8>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d007      	beq.n	800d73c <TIM_Base_SetConfig+0x40>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	4a2e      	ldr	r2, [pc, #184]	; (800d7e8 <TIM_Base_SetConfig+0xec>)
 800d730:	4293      	cmp	r3, r2
 800d732:	d003      	beq.n	800d73c <TIM_Base_SetConfig+0x40>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	4a2d      	ldr	r2, [pc, #180]	; (800d7ec <TIM_Base_SetConfig+0xf0>)
 800d738:	4293      	cmp	r3, r2
 800d73a:	d108      	bne.n	800d74e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d742:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	68fa      	ldr	r2, [r7, #12]
 800d74a:	4313      	orrs	r3, r2
 800d74c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	4a22      	ldr	r2, [pc, #136]	; (800d7dc <TIM_Base_SetConfig+0xe0>)
 800d752:	4293      	cmp	r3, r2
 800d754:	d013      	beq.n	800d77e <TIM_Base_SetConfig+0x82>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	4a21      	ldr	r2, [pc, #132]	; (800d7e0 <TIM_Base_SetConfig+0xe4>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d00f      	beq.n	800d77e <TIM_Base_SetConfig+0x82>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d764:	d00b      	beq.n	800d77e <TIM_Base_SetConfig+0x82>
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	4a1e      	ldr	r2, [pc, #120]	; (800d7e4 <TIM_Base_SetConfig+0xe8>)
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d007      	beq.n	800d77e <TIM_Base_SetConfig+0x82>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	4a1d      	ldr	r2, [pc, #116]	; (800d7e8 <TIM_Base_SetConfig+0xec>)
 800d772:	4293      	cmp	r3, r2
 800d774:	d003      	beq.n	800d77e <TIM_Base_SetConfig+0x82>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	4a1c      	ldr	r2, [pc, #112]	; (800d7ec <TIM_Base_SetConfig+0xf0>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d108      	bne.n	800d790 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	68db      	ldr	r3, [r3, #12]
 800d78a:	68fa      	ldr	r2, [r7, #12]
 800d78c:	4313      	orrs	r3, r2
 800d78e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	695b      	ldr	r3, [r3, #20]
 800d79a:	4313      	orrs	r3, r2
 800d79c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	68fa      	ldr	r2, [r7, #12]
 800d7a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	689a      	ldr	r2, [r3, #8]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	681a      	ldr	r2, [r3, #0]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	4a09      	ldr	r2, [pc, #36]	; (800d7dc <TIM_Base_SetConfig+0xe0>)
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	d003      	beq.n	800d7c4 <TIM_Base_SetConfig+0xc8>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	4a08      	ldr	r2, [pc, #32]	; (800d7e0 <TIM_Base_SetConfig+0xe4>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d103      	bne.n	800d7cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	691a      	ldr	r2, [r3, #16]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	615a      	str	r2, [r3, #20]
}
 800d7d2:	bf00      	nop
 800d7d4:	3714      	adds	r7, #20
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bc80      	pop	{r7}
 800d7da:	4770      	bx	lr
 800d7dc:	40012c00 	.word	0x40012c00
 800d7e0:	40013400 	.word	0x40013400
 800d7e4:	40000400 	.word	0x40000400
 800d7e8:	40000800 	.word	0x40000800
 800d7ec:	40000c00 	.word	0x40000c00

0800d7f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b087      	sub	sp, #28
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6a1b      	ldr	r3, [r3, #32]
 800d7fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6a1b      	ldr	r3, [r3, #32]
 800d804:	f023 0201 	bic.w	r2, r3, #1
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	699b      	ldr	r3, [r3, #24]
 800d816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d81e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f023 0303 	bic.w	r3, r3, #3
 800d826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	68fa      	ldr	r2, [r7, #12]
 800d82e:	4313      	orrs	r3, r2
 800d830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	f023 0302 	bic.w	r3, r3, #2
 800d838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	689b      	ldr	r3, [r3, #8]
 800d83e:	697a      	ldr	r2, [r7, #20]
 800d840:	4313      	orrs	r3, r2
 800d842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	4a20      	ldr	r2, [pc, #128]	; (800d8c8 <TIM_OC1_SetConfig+0xd8>)
 800d848:	4293      	cmp	r3, r2
 800d84a:	d003      	beq.n	800d854 <TIM_OC1_SetConfig+0x64>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	4a1f      	ldr	r2, [pc, #124]	; (800d8cc <TIM_OC1_SetConfig+0xdc>)
 800d850:	4293      	cmp	r3, r2
 800d852:	d10c      	bne.n	800d86e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	f023 0308 	bic.w	r3, r3, #8
 800d85a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	68db      	ldr	r3, [r3, #12]
 800d860:	697a      	ldr	r2, [r7, #20]
 800d862:	4313      	orrs	r3, r2
 800d864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	f023 0304 	bic.w	r3, r3, #4
 800d86c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	4a15      	ldr	r2, [pc, #84]	; (800d8c8 <TIM_OC1_SetConfig+0xd8>)
 800d872:	4293      	cmp	r3, r2
 800d874:	d003      	beq.n	800d87e <TIM_OC1_SetConfig+0x8e>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	4a14      	ldr	r2, [pc, #80]	; (800d8cc <TIM_OC1_SetConfig+0xdc>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d111      	bne.n	800d8a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d87e:	693b      	ldr	r3, [r7, #16]
 800d880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d88c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	695b      	ldr	r3, [r3, #20]
 800d892:	693a      	ldr	r2, [r7, #16]
 800d894:	4313      	orrs	r3, r2
 800d896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	699b      	ldr	r3, [r3, #24]
 800d89c:	693a      	ldr	r2, [r7, #16]
 800d89e:	4313      	orrs	r3, r2
 800d8a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	693a      	ldr	r2, [r7, #16]
 800d8a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	68fa      	ldr	r2, [r7, #12]
 800d8ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	685a      	ldr	r2, [r3, #4]
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	697a      	ldr	r2, [r7, #20]
 800d8ba:	621a      	str	r2, [r3, #32]
}
 800d8bc:	bf00      	nop
 800d8be:	371c      	adds	r7, #28
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bc80      	pop	{r7}
 800d8c4:	4770      	bx	lr
 800d8c6:	bf00      	nop
 800d8c8:	40012c00 	.word	0x40012c00
 800d8cc:	40013400 	.word	0x40013400

0800d8d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b087      	sub	sp, #28
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6a1b      	ldr	r3, [r3, #32]
 800d8de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6a1b      	ldr	r3, [r3, #32]
 800d8e4:	f023 0210 	bic.w	r2, r3, #16
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	699b      	ldr	r3, [r3, #24]
 800d8f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d8fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	021b      	lsls	r3, r3, #8
 800d90e:	68fa      	ldr	r2, [r7, #12]
 800d910:	4313      	orrs	r3, r2
 800d912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	f023 0320 	bic.w	r3, r3, #32
 800d91a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	689b      	ldr	r3, [r3, #8]
 800d920:	011b      	lsls	r3, r3, #4
 800d922:	697a      	ldr	r2, [r7, #20]
 800d924:	4313      	orrs	r3, r2
 800d926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	4a21      	ldr	r2, [pc, #132]	; (800d9b0 <TIM_OC2_SetConfig+0xe0>)
 800d92c:	4293      	cmp	r3, r2
 800d92e:	d003      	beq.n	800d938 <TIM_OC2_SetConfig+0x68>
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	4a20      	ldr	r2, [pc, #128]	; (800d9b4 <TIM_OC2_SetConfig+0xe4>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d10d      	bne.n	800d954 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d93e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	68db      	ldr	r3, [r3, #12]
 800d944:	011b      	lsls	r3, r3, #4
 800d946:	697a      	ldr	r2, [r7, #20]
 800d948:	4313      	orrs	r3, r2
 800d94a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d952:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	4a16      	ldr	r2, [pc, #88]	; (800d9b0 <TIM_OC2_SetConfig+0xe0>)
 800d958:	4293      	cmp	r3, r2
 800d95a:	d003      	beq.n	800d964 <TIM_OC2_SetConfig+0x94>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	4a15      	ldr	r2, [pc, #84]	; (800d9b4 <TIM_OC2_SetConfig+0xe4>)
 800d960:	4293      	cmp	r3, r2
 800d962:	d113      	bne.n	800d98c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d96a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d972:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	695b      	ldr	r3, [r3, #20]
 800d978:	009b      	lsls	r3, r3, #2
 800d97a:	693a      	ldr	r2, [r7, #16]
 800d97c:	4313      	orrs	r3, r2
 800d97e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	699b      	ldr	r3, [r3, #24]
 800d984:	009b      	lsls	r3, r3, #2
 800d986:	693a      	ldr	r2, [r7, #16]
 800d988:	4313      	orrs	r3, r2
 800d98a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	693a      	ldr	r2, [r7, #16]
 800d990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	68fa      	ldr	r2, [r7, #12]
 800d996:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	685a      	ldr	r2, [r3, #4]
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	697a      	ldr	r2, [r7, #20]
 800d9a4:	621a      	str	r2, [r3, #32]
}
 800d9a6:	bf00      	nop
 800d9a8:	371c      	adds	r7, #28
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bc80      	pop	{r7}
 800d9ae:	4770      	bx	lr
 800d9b0:	40012c00 	.word	0x40012c00
 800d9b4:	40013400 	.word	0x40013400

0800d9b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b087      	sub	sp, #28
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6a1b      	ldr	r3, [r3, #32]
 800d9c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6a1b      	ldr	r3, [r3, #32]
 800d9cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	69db      	ldr	r3, [r3, #28]
 800d9de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	f023 0303 	bic.w	r3, r3, #3
 800d9ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	68fa      	ldr	r2, [r7, #12]
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d9fa:	697b      	ldr	r3, [r7, #20]
 800d9fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800da00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	689b      	ldr	r3, [r3, #8]
 800da06:	021b      	lsls	r3, r3, #8
 800da08:	697a      	ldr	r2, [r7, #20]
 800da0a:	4313      	orrs	r3, r2
 800da0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	4a21      	ldr	r2, [pc, #132]	; (800da98 <TIM_OC3_SetConfig+0xe0>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d003      	beq.n	800da1e <TIM_OC3_SetConfig+0x66>
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	4a20      	ldr	r2, [pc, #128]	; (800da9c <TIM_OC3_SetConfig+0xe4>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d10d      	bne.n	800da3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	68db      	ldr	r3, [r3, #12]
 800da2a:	021b      	lsls	r3, r3, #8
 800da2c:	697a      	ldr	r2, [r7, #20]
 800da2e:	4313      	orrs	r3, r2
 800da30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800da38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	4a16      	ldr	r2, [pc, #88]	; (800da98 <TIM_OC3_SetConfig+0xe0>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d003      	beq.n	800da4a <TIM_OC3_SetConfig+0x92>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	4a15      	ldr	r2, [pc, #84]	; (800da9c <TIM_OC3_SetConfig+0xe4>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d113      	bne.n	800da72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800da4a:	693b      	ldr	r3, [r7, #16]
 800da4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800da58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	695b      	ldr	r3, [r3, #20]
 800da5e:	011b      	lsls	r3, r3, #4
 800da60:	693a      	ldr	r2, [r7, #16]
 800da62:	4313      	orrs	r3, r2
 800da64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	699b      	ldr	r3, [r3, #24]
 800da6a:	011b      	lsls	r3, r3, #4
 800da6c:	693a      	ldr	r2, [r7, #16]
 800da6e:	4313      	orrs	r3, r2
 800da70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	693a      	ldr	r2, [r7, #16]
 800da76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	68fa      	ldr	r2, [r7, #12]
 800da7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	685a      	ldr	r2, [r3, #4]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	697a      	ldr	r2, [r7, #20]
 800da8a:	621a      	str	r2, [r3, #32]
}
 800da8c:	bf00      	nop
 800da8e:	371c      	adds	r7, #28
 800da90:	46bd      	mov	sp, r7
 800da92:	bc80      	pop	{r7}
 800da94:	4770      	bx	lr
 800da96:	bf00      	nop
 800da98:	40012c00 	.word	0x40012c00
 800da9c:	40013400 	.word	0x40013400

0800daa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b087      	sub	sp, #28
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6a1b      	ldr	r3, [r3, #32]
 800daae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6a1b      	ldr	r3, [r3, #32]
 800dab4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	69db      	ldr	r3, [r3, #28]
 800dac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	021b      	lsls	r3, r3, #8
 800dade:	68fa      	ldr	r2, [r7, #12]
 800dae0:	4313      	orrs	r3, r2
 800dae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800daea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	689b      	ldr	r3, [r3, #8]
 800daf0:	031b      	lsls	r3, r3, #12
 800daf2:	693a      	ldr	r2, [r7, #16]
 800daf4:	4313      	orrs	r3, r2
 800daf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	4a11      	ldr	r2, [pc, #68]	; (800db40 <TIM_OC4_SetConfig+0xa0>)
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d003      	beq.n	800db08 <TIM_OC4_SetConfig+0x68>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	4a10      	ldr	r2, [pc, #64]	; (800db44 <TIM_OC4_SetConfig+0xa4>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d109      	bne.n	800db1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800db0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	695b      	ldr	r3, [r3, #20]
 800db14:	019b      	lsls	r3, r3, #6
 800db16:	697a      	ldr	r2, [r7, #20]
 800db18:	4313      	orrs	r3, r2
 800db1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	697a      	ldr	r2, [r7, #20]
 800db20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	68fa      	ldr	r2, [r7, #12]
 800db26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	685a      	ldr	r2, [r3, #4]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	693a      	ldr	r2, [r7, #16]
 800db34:	621a      	str	r2, [r3, #32]
}
 800db36:	bf00      	nop
 800db38:	371c      	adds	r7, #28
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bc80      	pop	{r7}
 800db3e:	4770      	bx	lr
 800db40:	40012c00 	.word	0x40012c00
 800db44:	40013400 	.word	0x40013400

0800db48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800db48:	b480      	push	{r7}
 800db4a:	b087      	sub	sp, #28
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	60f8      	str	r0, [r7, #12]
 800db50:	60b9      	str	r1, [r7, #8]
 800db52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	6a1b      	ldr	r3, [r3, #32]
 800db58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	6a1b      	ldr	r3, [r3, #32]
 800db5e:	f023 0201 	bic.w	r2, r3, #1
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	699b      	ldr	r3, [r3, #24]
 800db6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800db6c:	693b      	ldr	r3, [r7, #16]
 800db6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800db72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	011b      	lsls	r3, r3, #4
 800db78:	693a      	ldr	r2, [r7, #16]
 800db7a:	4313      	orrs	r3, r2
 800db7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	f023 030a 	bic.w	r3, r3, #10
 800db84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800db86:	697a      	ldr	r2, [r7, #20]
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	4313      	orrs	r3, r2
 800db8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	693a      	ldr	r2, [r7, #16]
 800db92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	697a      	ldr	r2, [r7, #20]
 800db98:	621a      	str	r2, [r3, #32]
}
 800db9a:	bf00      	nop
 800db9c:	371c      	adds	r7, #28
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bc80      	pop	{r7}
 800dba2:	4770      	bx	lr

0800dba4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b087      	sub	sp, #28
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	6a1b      	ldr	r3, [r3, #32]
 800dbb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	6a1b      	ldr	r3, [r3, #32]
 800dbba:	f023 0210 	bic.w	r2, r3, #16
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	699b      	ldr	r3, [r3, #24]
 800dbc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dbce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	031b      	lsls	r3, r3, #12
 800dbd4:	693a      	ldr	r2, [r7, #16]
 800dbd6:	4313      	orrs	r3, r2
 800dbd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dbe0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	011b      	lsls	r3, r3, #4
 800dbe6:	697a      	ldr	r2, [r7, #20]
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	693a      	ldr	r2, [r7, #16]
 800dbf0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	697a      	ldr	r2, [r7, #20]
 800dbf6:	621a      	str	r2, [r3, #32]
}
 800dbf8:	bf00      	nop
 800dbfa:	371c      	adds	r7, #28
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bc80      	pop	{r7}
 800dc00:	4770      	bx	lr

0800dc02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dc02:	b480      	push	{r7}
 800dc04:	b085      	sub	sp, #20
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]
 800dc0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	689b      	ldr	r3, [r3, #8]
 800dc10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dc1a:	683a      	ldr	r2, [r7, #0]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	4313      	orrs	r3, r2
 800dc20:	f043 0307 	orr.w	r3, r3, #7
 800dc24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	68fa      	ldr	r2, [r7, #12]
 800dc2a:	609a      	str	r2, [r3, #8]
}
 800dc2c:	bf00      	nop
 800dc2e:	3714      	adds	r7, #20
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bc80      	pop	{r7}
 800dc34:	4770      	bx	lr

0800dc36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dc36:	b480      	push	{r7}
 800dc38:	b087      	sub	sp, #28
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	60f8      	str	r0, [r7, #12]
 800dc3e:	60b9      	str	r1, [r7, #8]
 800dc40:	607a      	str	r2, [r7, #4]
 800dc42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	689b      	ldr	r3, [r3, #8]
 800dc48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dc50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	021a      	lsls	r2, r3, #8
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	431a      	orrs	r2, r3
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	4313      	orrs	r3, r2
 800dc5e:	697a      	ldr	r2, [r7, #20]
 800dc60:	4313      	orrs	r3, r2
 800dc62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	697a      	ldr	r2, [r7, #20]
 800dc68:	609a      	str	r2, [r3, #8]
}
 800dc6a:	bf00      	nop
 800dc6c:	371c      	adds	r7, #28
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bc80      	pop	{r7}
 800dc72:	4770      	bx	lr

0800dc74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dc74:	b480      	push	{r7}
 800dc76:	b087      	sub	sp, #28
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	f003 031f 	and.w	r3, r3, #31
 800dc86:	2201      	movs	r2, #1
 800dc88:	fa02 f303 	lsl.w	r3, r2, r3
 800dc8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	6a1a      	ldr	r2, [r3, #32]
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	43db      	mvns	r3, r3
 800dc96:	401a      	ands	r2, r3
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	6a1a      	ldr	r2, [r3, #32]
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	f003 031f 	and.w	r3, r3, #31
 800dca6:	6879      	ldr	r1, [r7, #4]
 800dca8:	fa01 f303 	lsl.w	r3, r1, r3
 800dcac:	431a      	orrs	r2, r3
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	621a      	str	r2, [r3, #32]
}
 800dcb2:	bf00      	nop
 800dcb4:	371c      	adds	r7, #28
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bc80      	pop	{r7}
 800dcba:	4770      	bx	lr

0800dcbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b085      	sub	sp, #20
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
 800dcc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	d101      	bne.n	800dcd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dcd0:	2302      	movs	r3, #2
 800dcd2:	e050      	b.n	800dd76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2202      	movs	r2, #2
 800dce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	689b      	ldr	r3, [r3, #8]
 800dcf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	68fa      	ldr	r2, [r7, #12]
 800dd02:	4313      	orrs	r3, r2
 800dd04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	68fa      	ldr	r2, [r7, #12]
 800dd0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	4a1b      	ldr	r2, [pc, #108]	; (800dd80 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d018      	beq.n	800dd4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	4a19      	ldr	r2, [pc, #100]	; (800dd84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d013      	beq.n	800dd4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd2a:	d00e      	beq.n	800dd4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4a15      	ldr	r2, [pc, #84]	; (800dd88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800dd32:	4293      	cmp	r3, r2
 800dd34:	d009      	beq.n	800dd4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4a14      	ldr	r2, [pc, #80]	; (800dd8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d004      	beq.n	800dd4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	4a12      	ldr	r2, [pc, #72]	; (800dd90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800dd46:	4293      	cmp	r3, r2
 800dd48:	d10c      	bne.n	800dd64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	685b      	ldr	r3, [r3, #4]
 800dd56:	68ba      	ldr	r2, [r7, #8]
 800dd58:	4313      	orrs	r3, r2
 800dd5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	68ba      	ldr	r2, [r7, #8]
 800dd62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2201      	movs	r2, #1
 800dd68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd74:	2300      	movs	r3, #0
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3714      	adds	r7, #20
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bc80      	pop	{r7}
 800dd7e:	4770      	bx	lr
 800dd80:	40012c00 	.word	0x40012c00
 800dd84:	40013400 	.word	0x40013400
 800dd88:	40000400 	.word	0x40000400
 800dd8c:	40000800 	.word	0x40000800
 800dd90:	40000c00 	.word	0x40000c00

0800dd94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b082      	sub	sp, #8
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d101      	bne.n	800dda6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dda2:	2301      	movs	r3, #1
 800dda4:	e042      	b.n	800de2c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d106      	bne.n	800ddc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f7f8 f916 	bl	8005fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2224      	movs	r2, #36	; 0x24
 800ddc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	68da      	ldr	r2, [r3, #12]
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ddd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f000 fa07 	bl	800e1ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	691a      	ldr	r2, [r3, #16]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ddec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	695a      	ldr	r2, [r3, #20]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ddfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	68da      	ldr	r2, [r3, #12]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800de0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2200      	movs	r2, #0
 800de12:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2220      	movs	r2, #32
 800de18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2220      	movs	r2, #32
 800de20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2200      	movs	r2, #0
 800de28:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800de2a:	2300      	movs	r3, #0
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	3708      	adds	r7, #8
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d101      	bne.n	800de46 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800de42:	2301      	movs	r3, #1
 800de44:	e04a      	b.n	800dedc <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d106      	bne.n	800de60 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2200      	movs	r2, #0
 800de56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f7f8 f8c6 	bl	8005fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2224      	movs	r2, #36	; 0x24
 800de64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	68da      	ldr	r2, [r3, #12]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800de76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f000 f9b7 	bl	800e1ec <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	691a      	ldr	r2, [r3, #16]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800de8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	695a      	ldr	r2, [r3, #20]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800de9c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	695a      	ldr	r2, [r3, #20]
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	f042 0208 	orr.w	r2, r2, #8
 800deac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	68da      	ldr	r2, [r3, #12]
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800debc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2200      	movs	r2, #0
 800dec2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2220      	movs	r2, #32
 800dec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2220      	movs	r2, #32
 800ded0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2200      	movs	r2, #0
 800ded8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800deda:	2300      	movs	r3, #0
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3708      	adds	r7, #8
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b08a      	sub	sp, #40	; 0x28
 800dee8:	af02      	add	r7, sp, #8
 800deea:	60f8      	str	r0, [r7, #12]
 800deec:	60b9      	str	r1, [r7, #8]
 800deee:	603b      	str	r3, [r7, #0]
 800def0:	4613      	mov	r3, r2
 800def2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800def4:	2300      	movs	r3, #0
 800def6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800defe:	b2db      	uxtb	r3, r3
 800df00:	2b20      	cmp	r3, #32
 800df02:	d16d      	bne.n	800dfe0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d002      	beq.n	800df10 <HAL_UART_Transmit+0x2c>
 800df0a:	88fb      	ldrh	r3, [r7, #6]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d101      	bne.n	800df14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800df10:	2301      	movs	r3, #1
 800df12:	e066      	b.n	800dfe2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2200      	movs	r2, #0
 800df18:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	2221      	movs	r2, #33	; 0x21
 800df1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800df22:	f7f8 f995 	bl	8006250 <HAL_GetTick>
 800df26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	88fa      	ldrh	r2, [r7, #6]
 800df2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	88fa      	ldrh	r2, [r7, #6]
 800df32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df3c:	d108      	bne.n	800df50 <HAL_UART_Transmit+0x6c>
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	691b      	ldr	r3, [r3, #16]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d104      	bne.n	800df50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800df46:	2300      	movs	r3, #0
 800df48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	61bb      	str	r3, [r7, #24]
 800df4e:	e003      	b.n	800df58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800df54:	2300      	movs	r3, #0
 800df56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800df58:	e02a      	b.n	800dfb0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	9300      	str	r3, [sp, #0]
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	2200      	movs	r2, #0
 800df62:	2180      	movs	r1, #128	; 0x80
 800df64:	68f8      	ldr	r0, [r7, #12]
 800df66:	f000 f8d2 	bl	800e10e <UART_WaitOnFlagUntilTimeout>
 800df6a:	4603      	mov	r3, r0
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d001      	beq.n	800df74 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800df70:	2303      	movs	r3, #3
 800df72:	e036      	b.n	800dfe2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800df74:	69fb      	ldr	r3, [r7, #28]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d10b      	bne.n	800df92 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800df7a:	69bb      	ldr	r3, [r7, #24]
 800df7c:	881b      	ldrh	r3, [r3, #0]
 800df7e:	461a      	mov	r2, r3
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800df88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800df8a:	69bb      	ldr	r3, [r7, #24]
 800df8c:	3302      	adds	r3, #2
 800df8e:	61bb      	str	r3, [r7, #24]
 800df90:	e007      	b.n	800dfa2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800df92:	69fb      	ldr	r3, [r7, #28]
 800df94:	781a      	ldrb	r2, [r3, #0]
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800df9c:	69fb      	ldr	r3, [r7, #28]
 800df9e:	3301      	adds	r3, #1
 800dfa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dfa6:	b29b      	uxth	r3, r3
 800dfa8:	3b01      	subs	r3, #1
 800dfaa:	b29a      	uxth	r2, r3
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d1cf      	bne.n	800df5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	9300      	str	r3, [sp, #0]
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	2140      	movs	r1, #64	; 0x40
 800dfc4:	68f8      	ldr	r0, [r7, #12]
 800dfc6:	f000 f8a2 	bl	800e10e <UART_WaitOnFlagUntilTimeout>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d001      	beq.n	800dfd4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800dfd0:	2303      	movs	r3, #3
 800dfd2:	e006      	b.n	800dfe2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2220      	movs	r2, #32
 800dfd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	e000      	b.n	800dfe2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800dfe0:	2302      	movs	r3, #2
  }
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3720      	adds	r7, #32
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}

0800dfea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dfea:	b580      	push	{r7, lr}
 800dfec:	b08a      	sub	sp, #40	; 0x28
 800dfee:	af02      	add	r7, sp, #8
 800dff0:	60f8      	str	r0, [r7, #12]
 800dff2:	60b9      	str	r1, [r7, #8]
 800dff4:	603b      	str	r3, [r7, #0]
 800dff6:	4613      	mov	r3, r2
 800dff8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800dffa:	2300      	movs	r3, #0
 800dffc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e004:	b2db      	uxtb	r3, r3
 800e006:	2b20      	cmp	r3, #32
 800e008:	d17c      	bne.n	800e104 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d002      	beq.n	800e016 <HAL_UART_Receive+0x2c>
 800e010:	88fb      	ldrh	r3, [r7, #6]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d101      	bne.n	800e01a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800e016:	2301      	movs	r3, #1
 800e018:	e075      	b.n	800e106 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2200      	movs	r2, #0
 800e01e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2222      	movs	r2, #34	; 0x22
 800e024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2200      	movs	r2, #0
 800e02c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e02e:	f7f8 f90f 	bl	8006250 <HAL_GetTick>
 800e032:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	88fa      	ldrh	r2, [r7, #6]
 800e038:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	88fa      	ldrh	r2, [r7, #6]
 800e03e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	689b      	ldr	r3, [r3, #8]
 800e044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e048:	d108      	bne.n	800e05c <HAL_UART_Receive+0x72>
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	691b      	ldr	r3, [r3, #16]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d104      	bne.n	800e05c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800e052:	2300      	movs	r3, #0
 800e054:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	61bb      	str	r3, [r7, #24]
 800e05a:	e003      	b.n	800e064 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e060:	2300      	movs	r3, #0
 800e062:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800e064:	e043      	b.n	800e0ee <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	9300      	str	r3, [sp, #0]
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	2200      	movs	r2, #0
 800e06e:	2120      	movs	r1, #32
 800e070:	68f8      	ldr	r0, [r7, #12]
 800e072:	f000 f84c 	bl	800e10e <UART_WaitOnFlagUntilTimeout>
 800e076:	4603      	mov	r3, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d001      	beq.n	800e080 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800e07c:	2303      	movs	r3, #3
 800e07e:	e042      	b.n	800e106 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d10c      	bne.n	800e0a0 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	b29b      	uxth	r3, r3
 800e08e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e092:	b29a      	uxth	r2, r3
 800e094:	69bb      	ldr	r3, [r7, #24]
 800e096:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e098:	69bb      	ldr	r3, [r7, #24]
 800e09a:	3302      	adds	r3, #2
 800e09c:	61bb      	str	r3, [r7, #24]
 800e09e:	e01f      	b.n	800e0e0 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	689b      	ldr	r3, [r3, #8]
 800e0a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0a8:	d007      	beq.n	800e0ba <HAL_UART_Receive+0xd0>
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	689b      	ldr	r3, [r3, #8]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d10a      	bne.n	800e0c8 <HAL_UART_Receive+0xde>
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	691b      	ldr	r3, [r3, #16]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d106      	bne.n	800e0c8 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	685b      	ldr	r3, [r3, #4]
 800e0c0:	b2da      	uxtb	r2, r3
 800e0c2:	69fb      	ldr	r3, [r7, #28]
 800e0c4:	701a      	strb	r2, [r3, #0]
 800e0c6:	e008      	b.n	800e0da <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	685b      	ldr	r3, [r3, #4]
 800e0ce:	b2db      	uxtb	r3, r3
 800e0d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0d4:	b2da      	uxtb	r2, r3
 800e0d6:	69fb      	ldr	r3, [r7, #28]
 800e0d8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800e0da:	69fb      	ldr	r3, [r7, #28]
 800e0dc:	3301      	adds	r3, #1
 800e0de:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e0e4:	b29b      	uxth	r3, r3
 800e0e6:	3b01      	subs	r3, #1
 800e0e8:	b29a      	uxth	r2, r3
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d1b6      	bne.n	800e066 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2220      	movs	r2, #32
 800e0fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800e100:	2300      	movs	r3, #0
 800e102:	e000      	b.n	800e106 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800e104:	2302      	movs	r3, #2
  }
}
 800e106:	4618      	mov	r0, r3
 800e108:	3720      	adds	r7, #32
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}

0800e10e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e10e:	b580      	push	{r7, lr}
 800e110:	b090      	sub	sp, #64	; 0x40
 800e112:	af00      	add	r7, sp, #0
 800e114:	60f8      	str	r0, [r7, #12]
 800e116:	60b9      	str	r1, [r7, #8]
 800e118:	603b      	str	r3, [r7, #0]
 800e11a:	4613      	mov	r3, r2
 800e11c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e11e:	e050      	b.n	800e1c2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e126:	d04c      	beq.n	800e1c2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800e128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d007      	beq.n	800e13e <UART_WaitOnFlagUntilTimeout+0x30>
 800e12e:	f7f8 f88f 	bl	8006250 <HAL_GetTick>
 800e132:	4602      	mov	r2, r0
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	1ad3      	subs	r3, r2, r3
 800e138:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d241      	bcs.n	800e1c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	330c      	adds	r3, #12
 800e144:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e148:	e853 3f00 	ldrex	r3, [r3]
 800e14c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e150:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e154:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	330c      	adds	r3, #12
 800e15c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e15e:	637a      	str	r2, [r7, #52]	; 0x34
 800e160:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e162:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e166:	e841 2300 	strex	r3, r2, [r1]
 800e16a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d1e5      	bne.n	800e13e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	3314      	adds	r3, #20
 800e178:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	e853 3f00 	ldrex	r3, [r3]
 800e180:	613b      	str	r3, [r7, #16]
   return(result);
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	f023 0301 	bic.w	r3, r3, #1
 800e188:	63bb      	str	r3, [r7, #56]	; 0x38
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	3314      	adds	r3, #20
 800e190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e192:	623a      	str	r2, [r7, #32]
 800e194:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e196:	69f9      	ldr	r1, [r7, #28]
 800e198:	6a3a      	ldr	r2, [r7, #32]
 800e19a:	e841 2300 	strex	r3, r2, [r1]
 800e19e:	61bb      	str	r3, [r7, #24]
   return(result);
 800e1a0:	69bb      	ldr	r3, [r7, #24]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d1e5      	bne.n	800e172 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2220      	movs	r2, #32
 800e1aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2220      	movs	r2, #32
 800e1b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800e1be:	2303      	movs	r3, #3
 800e1c0:	e00f      	b.n	800e1e2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	4013      	ands	r3, r2
 800e1cc:	68ba      	ldr	r2, [r7, #8]
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	bf0c      	ite	eq
 800e1d2:	2301      	moveq	r3, #1
 800e1d4:	2300      	movne	r3, #0
 800e1d6:	b2db      	uxtb	r3, r3
 800e1d8:	461a      	mov	r2, r3
 800e1da:	79fb      	ldrb	r3, [r7, #7]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d09f      	beq.n	800e120 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e1e0:	2300      	movs	r3, #0
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3740      	adds	r7, #64	; 0x40
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
	...

0800e1ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	691b      	ldr	r3, [r3, #16]
 800e1fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	68da      	ldr	r2, [r3, #12]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	430a      	orrs	r2, r1
 800e208:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	689a      	ldr	r2, [r3, #8]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	691b      	ldr	r3, [r3, #16]
 800e212:	431a      	orrs	r2, r3
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	695b      	ldr	r3, [r3, #20]
 800e218:	4313      	orrs	r3, r2
 800e21a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	68db      	ldr	r3, [r3, #12]
 800e222:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800e226:	f023 030c 	bic.w	r3, r3, #12
 800e22a:	687a      	ldr	r2, [r7, #4]
 800e22c:	6812      	ldr	r2, [r2, #0]
 800e22e:	68b9      	ldr	r1, [r7, #8]
 800e230:	430b      	orrs	r3, r1
 800e232:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	695b      	ldr	r3, [r3, #20]
 800e23a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	699a      	ldr	r2, [r3, #24]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	430a      	orrs	r2, r1
 800e248:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	4a2c      	ldr	r2, [pc, #176]	; (800e300 <UART_SetConfig+0x114>)
 800e250:	4293      	cmp	r3, r2
 800e252:	d103      	bne.n	800e25c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800e254:	f7fe fe7e 	bl	800cf54 <HAL_RCC_GetPCLK2Freq>
 800e258:	60f8      	str	r0, [r7, #12]
 800e25a:	e002      	b.n	800e262 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800e25c:	f7fe fe66 	bl	800cf2c <HAL_RCC_GetPCLK1Freq>
 800e260:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e262:	68fa      	ldr	r2, [r7, #12]
 800e264:	4613      	mov	r3, r2
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	4413      	add	r3, r2
 800e26a:	009a      	lsls	r2, r3, #2
 800e26c:	441a      	add	r2, r3
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	685b      	ldr	r3, [r3, #4]
 800e272:	009b      	lsls	r3, r3, #2
 800e274:	fbb2 f3f3 	udiv	r3, r2, r3
 800e278:	4a22      	ldr	r2, [pc, #136]	; (800e304 <UART_SetConfig+0x118>)
 800e27a:	fba2 2303 	umull	r2, r3, r2, r3
 800e27e:	095b      	lsrs	r3, r3, #5
 800e280:	0119      	lsls	r1, r3, #4
 800e282:	68fa      	ldr	r2, [r7, #12]
 800e284:	4613      	mov	r3, r2
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	4413      	add	r3, r2
 800e28a:	009a      	lsls	r2, r3, #2
 800e28c:	441a      	add	r2, r3
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	685b      	ldr	r3, [r3, #4]
 800e292:	009b      	lsls	r3, r3, #2
 800e294:	fbb2 f2f3 	udiv	r2, r2, r3
 800e298:	4b1a      	ldr	r3, [pc, #104]	; (800e304 <UART_SetConfig+0x118>)
 800e29a:	fba3 0302 	umull	r0, r3, r3, r2
 800e29e:	095b      	lsrs	r3, r3, #5
 800e2a0:	2064      	movs	r0, #100	; 0x64
 800e2a2:	fb00 f303 	mul.w	r3, r0, r3
 800e2a6:	1ad3      	subs	r3, r2, r3
 800e2a8:	011b      	lsls	r3, r3, #4
 800e2aa:	3332      	adds	r3, #50	; 0x32
 800e2ac:	4a15      	ldr	r2, [pc, #84]	; (800e304 <UART_SetConfig+0x118>)
 800e2ae:	fba2 2303 	umull	r2, r3, r2, r3
 800e2b2:	095b      	lsrs	r3, r3, #5
 800e2b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e2b8:	4419      	add	r1, r3
 800e2ba:	68fa      	ldr	r2, [r7, #12]
 800e2bc:	4613      	mov	r3, r2
 800e2be:	009b      	lsls	r3, r3, #2
 800e2c0:	4413      	add	r3, r2
 800e2c2:	009a      	lsls	r2, r3, #2
 800e2c4:	441a      	add	r2, r3
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	009b      	lsls	r3, r3, #2
 800e2cc:	fbb2 f2f3 	udiv	r2, r2, r3
 800e2d0:	4b0c      	ldr	r3, [pc, #48]	; (800e304 <UART_SetConfig+0x118>)
 800e2d2:	fba3 0302 	umull	r0, r3, r3, r2
 800e2d6:	095b      	lsrs	r3, r3, #5
 800e2d8:	2064      	movs	r0, #100	; 0x64
 800e2da:	fb00 f303 	mul.w	r3, r0, r3
 800e2de:	1ad3      	subs	r3, r2, r3
 800e2e0:	011b      	lsls	r3, r3, #4
 800e2e2:	3332      	adds	r3, #50	; 0x32
 800e2e4:	4a07      	ldr	r2, [pc, #28]	; (800e304 <UART_SetConfig+0x118>)
 800e2e6:	fba2 2303 	umull	r2, r3, r2, r3
 800e2ea:	095b      	lsrs	r3, r3, #5
 800e2ec:	f003 020f 	and.w	r2, r3, #15
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	440a      	add	r2, r1
 800e2f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800e2f8:	bf00      	nop
 800e2fa:	3710      	adds	r7, #16
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}
 800e300:	40013800 	.word	0x40013800
 800e304:	51eb851f 	.word	0x51eb851f

0800e308 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800e308:	b084      	sub	sp, #16
 800e30a:	b480      	push	{r7}
 800e30c:	b083      	sub	sp, #12
 800e30e:	af00      	add	r7, sp, #0
 800e310:	6078      	str	r0, [r7, #4]
 800e312:	f107 0014 	add.w	r0, r7, #20
 800e316:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800e31a:	2300      	movs	r3, #0
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	370c      	adds	r7, #12
 800e320:	46bd      	mov	sp, r7
 800e322:	bc80      	pop	{r7}
 800e324:	b004      	add	sp, #16
 800e326:	4770      	bx	lr

0800e328 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2200      	movs	r2, #0
 800e334:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e338:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800e33c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	b29a      	uxth	r2, r3
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e348:	2300      	movs	r3, #0
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3714      	adds	r7, #20
 800e34e:	46bd      	mov	sp, r7
 800e350:	bc80      	pop	{r7}
 800e352:	4770      	bx	lr

0800e354 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800e354:	b480      	push	{r7}
 800e356:	b085      	sub	sp, #20
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e35c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800e360:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800e368:	b29a      	uxth	r2, r3
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	b29b      	uxth	r3, r3
 800e36e:	43db      	mvns	r3, r3
 800e370:	b29b      	uxth	r3, r3
 800e372:	4013      	ands	r3, r2
 800e374:	b29a      	uxth	r2, r3
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e37c:	2300      	movs	r3, #0
}
 800e37e:	4618      	mov	r0, r3
 800e380:	3714      	adds	r7, #20
 800e382:	46bd      	mov	sp, r7
 800e384:	bc80      	pop	{r7}
 800e386:	4770      	bx	lr

0800e388 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800e388:	b480      	push	{r7}
 800e38a:	b083      	sub	sp, #12
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	460b      	mov	r3, r1
 800e392:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800e394:	2300      	movs	r3, #0
}
 800e396:	4618      	mov	r0, r3
 800e398:	370c      	adds	r7, #12
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bc80      	pop	{r7}
 800e39e:	4770      	bx	lr

0800e3a0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800e3a0:	b084      	sub	sp, #16
 800e3a2:	b480      	push	{r7}
 800e3a4:	b083      	sub	sp, #12
 800e3a6:	af00      	add	r7, sp, #0
 800e3a8:	6078      	str	r0, [r7, #4]
 800e3aa:	f107 0014 	add.w	r0, r7, #20
 800e3ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2201      	movs	r2, #1
 800e3b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2200      	movs	r2, #0
 800e3be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800e3d2:	2300      	movs	r3, #0
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	370c      	adds	r7, #12
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bc80      	pop	{r7}
 800e3dc:	b004      	add	sp, #16
 800e3de:	4770      	bx	lr

0800e3e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b09d      	sub	sp, #116	; 0x74
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800e3f0:	687a      	ldr	r2, [r7, #4]
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	009b      	lsls	r3, r3, #2
 800e3f8:	4413      	add	r3, r2
 800e3fa:	881b      	ldrh	r3, [r3, #0]
 800e3fc:	b29b      	uxth	r3, r3
 800e3fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800e402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e406:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	78db      	ldrb	r3, [r3, #3]
 800e40e:	2b03      	cmp	r3, #3
 800e410:	d81f      	bhi.n	800e452 <USB_ActivateEndpoint+0x72>
 800e412:	a201      	add	r2, pc, #4	; (adr r2, 800e418 <USB_ActivateEndpoint+0x38>)
 800e414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e418:	0800e429 	.word	0x0800e429
 800e41c:	0800e445 	.word	0x0800e445
 800e420:	0800e45b 	.word	0x0800e45b
 800e424:	0800e437 	.word	0x0800e437
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800e428:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e42c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e430:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800e434:	e012      	b.n	800e45c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800e436:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e43a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800e43e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800e442:	e00b      	b.n	800e45c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800e444:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e448:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e44c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800e450:	e004      	b.n	800e45c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800e452:	2301      	movs	r3, #1
 800e454:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800e458:	e000      	b.n	800e45c <USB_ActivateEndpoint+0x7c>
      break;
 800e45a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800e45c:	687a      	ldr	r2, [r7, #4]
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	009b      	lsls	r3, r3, #2
 800e464:	441a      	add	r2, r3
 800e466:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e46a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e46e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e47a:	b29b      	uxth	r3, r3
 800e47c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	781b      	ldrb	r3, [r3, #0]
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	4413      	add	r3, r2
 800e488:	881b      	ldrh	r3, [r3, #0]
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e494:	b29a      	uxth	r2, r3
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	b29b      	uxth	r3, r3
 800e49c:	4313      	orrs	r3, r2
 800e49e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800e4a2:	687a      	ldr	r2, [r7, #4]
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	009b      	lsls	r3, r3, #2
 800e4aa:	441a      	add	r2, r3
 800e4ac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800e4b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e4b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e4b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e4bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4c0:	b29b      	uxth	r3, r3
 800e4c2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	7b1b      	ldrb	r3, [r3, #12]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	f040 8178 	bne.w	800e7be <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	785b      	ldrb	r3, [r3, #1]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	f000 8084 	beq.w	800e5e0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	61bb      	str	r3, [r7, #24]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	461a      	mov	r2, r3
 800e4e6:	69bb      	ldr	r3, [r7, #24]
 800e4e8:	4413      	add	r3, r2
 800e4ea:	61bb      	str	r3, [r7, #24]
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	781b      	ldrb	r3, [r3, #0]
 800e4f0:	011a      	lsls	r2, r3, #4
 800e4f2:	69bb      	ldr	r3, [r7, #24]
 800e4f4:	4413      	add	r3, r2
 800e4f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e4fa:	617b      	str	r3, [r7, #20]
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	88db      	ldrh	r3, [r3, #6]
 800e500:	085b      	lsrs	r3, r3, #1
 800e502:	b29b      	uxth	r3, r3
 800e504:	005b      	lsls	r3, r3, #1
 800e506:	b29a      	uxth	r2, r3
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e50c:	687a      	ldr	r2, [r7, #4]
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	009b      	lsls	r3, r3, #2
 800e514:	4413      	add	r3, r2
 800e516:	881b      	ldrh	r3, [r3, #0]
 800e518:	827b      	strh	r3, [r7, #18]
 800e51a:	8a7b      	ldrh	r3, [r7, #18]
 800e51c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e520:	2b00      	cmp	r3, #0
 800e522:	d01b      	beq.n	800e55c <USB_ActivateEndpoint+0x17c>
 800e524:	687a      	ldr	r2, [r7, #4]
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	781b      	ldrb	r3, [r3, #0]
 800e52a:	009b      	lsls	r3, r3, #2
 800e52c:	4413      	add	r3, r2
 800e52e:	881b      	ldrh	r3, [r3, #0]
 800e530:	b29b      	uxth	r3, r3
 800e532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e53a:	823b      	strh	r3, [r7, #16]
 800e53c:	687a      	ldr	r2, [r7, #4]
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	009b      	lsls	r3, r3, #2
 800e544:	441a      	add	r2, r3
 800e546:	8a3b      	ldrh	r3, [r7, #16]
 800e548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e54c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e554:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e558:	b29b      	uxth	r3, r3
 800e55a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	78db      	ldrb	r3, [r3, #3]
 800e560:	2b01      	cmp	r3, #1
 800e562:	d020      	beq.n	800e5a6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e564:	687a      	ldr	r2, [r7, #4]
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	781b      	ldrb	r3, [r3, #0]
 800e56a:	009b      	lsls	r3, r3, #2
 800e56c:	4413      	add	r3, r2
 800e56e:	881b      	ldrh	r3, [r3, #0]
 800e570:	b29b      	uxth	r3, r3
 800e572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e57a:	81bb      	strh	r3, [r7, #12]
 800e57c:	89bb      	ldrh	r3, [r7, #12]
 800e57e:	f083 0320 	eor.w	r3, r3, #32
 800e582:	81bb      	strh	r3, [r7, #12]
 800e584:	687a      	ldr	r2, [r7, #4]
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	781b      	ldrb	r3, [r3, #0]
 800e58a:	009b      	lsls	r3, r3, #2
 800e58c:	441a      	add	r2, r3
 800e58e:	89bb      	ldrh	r3, [r7, #12]
 800e590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e59c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5a0:	b29b      	uxth	r3, r3
 800e5a2:	8013      	strh	r3, [r2, #0]
 800e5a4:	e2d5      	b.n	800eb52 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e5a6:	687a      	ldr	r2, [r7, #4]
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	009b      	lsls	r3, r3, #2
 800e5ae:	4413      	add	r3, r2
 800e5b0:	881b      	ldrh	r3, [r3, #0]
 800e5b2:	b29b      	uxth	r3, r3
 800e5b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e5b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e5bc:	81fb      	strh	r3, [r7, #14]
 800e5be:	687a      	ldr	r2, [r7, #4]
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	009b      	lsls	r3, r3, #2
 800e5c6:	441a      	add	r2, r3
 800e5c8:	89fb      	ldrh	r3, [r7, #14]
 800e5ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e5ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e5d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e5d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5da:	b29b      	uxth	r3, r3
 800e5dc:	8013      	strh	r3, [r2, #0]
 800e5de:	e2b8      	b.n	800eb52 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	633b      	str	r3, [r7, #48]	; 0x30
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	461a      	mov	r2, r3
 800e5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f0:	4413      	add	r3, r2
 800e5f2:	633b      	str	r3, [r7, #48]	; 0x30
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	011a      	lsls	r2, r3, #4
 800e5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5fc:	4413      	add	r3, r2
 800e5fe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800e602:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	88db      	ldrh	r3, [r3, #6]
 800e608:	085b      	lsrs	r3, r3, #1
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	005b      	lsls	r3, r3, #1
 800e60e:	b29a      	uxth	r2, r3
 800e610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e612:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	62bb      	str	r3, [r7, #40]	; 0x28
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e61e:	b29b      	uxth	r3, r3
 800e620:	461a      	mov	r2, r3
 800e622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e624:	4413      	add	r3, r2
 800e626:	62bb      	str	r3, [r7, #40]	; 0x28
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	011a      	lsls	r2, r3, #4
 800e62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e630:	4413      	add	r3, r2
 800e632:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e636:	627b      	str	r3, [r7, #36]	; 0x24
 800e638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63a:	881b      	ldrh	r3, [r3, #0]
 800e63c:	b29b      	uxth	r3, r3
 800e63e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e642:	b29a      	uxth	r2, r3
 800e644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e646:	801a      	strh	r2, [r3, #0]
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	691b      	ldr	r3, [r3, #16]
 800e64c:	2b3e      	cmp	r3, #62	; 0x3e
 800e64e:	d91d      	bls.n	800e68c <USB_ActivateEndpoint+0x2ac>
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	691b      	ldr	r3, [r3, #16]
 800e654:	095b      	lsrs	r3, r3, #5
 800e656:	66bb      	str	r3, [r7, #104]	; 0x68
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	691b      	ldr	r3, [r3, #16]
 800e65c:	f003 031f 	and.w	r3, r3, #31
 800e660:	2b00      	cmp	r3, #0
 800e662:	d102      	bne.n	800e66a <USB_ActivateEndpoint+0x28a>
 800e664:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e666:	3b01      	subs	r3, #1
 800e668:	66bb      	str	r3, [r7, #104]	; 0x68
 800e66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66c:	881b      	ldrh	r3, [r3, #0]
 800e66e:	b29a      	uxth	r2, r3
 800e670:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e672:	b29b      	uxth	r3, r3
 800e674:	029b      	lsls	r3, r3, #10
 800e676:	b29b      	uxth	r3, r3
 800e678:	4313      	orrs	r3, r2
 800e67a:	b29b      	uxth	r3, r3
 800e67c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e684:	b29a      	uxth	r2, r3
 800e686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e688:	801a      	strh	r2, [r3, #0]
 800e68a:	e026      	b.n	800e6da <USB_ActivateEndpoint+0x2fa>
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	691b      	ldr	r3, [r3, #16]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d10a      	bne.n	800e6aa <USB_ActivateEndpoint+0x2ca>
 800e694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e696:	881b      	ldrh	r3, [r3, #0]
 800e698:	b29b      	uxth	r3, r3
 800e69a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e69e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e6a2:	b29a      	uxth	r2, r3
 800e6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a6:	801a      	strh	r2, [r3, #0]
 800e6a8:	e017      	b.n	800e6da <USB_ActivateEndpoint+0x2fa>
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	691b      	ldr	r3, [r3, #16]
 800e6ae:	085b      	lsrs	r3, r3, #1
 800e6b0:	66bb      	str	r3, [r7, #104]	; 0x68
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	691b      	ldr	r3, [r3, #16]
 800e6b6:	f003 0301 	and.w	r3, r3, #1
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d002      	beq.n	800e6c4 <USB_ActivateEndpoint+0x2e4>
 800e6be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800e6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c6:	881b      	ldrh	r3, [r3, #0]
 800e6c8:	b29a      	uxth	r2, r3
 800e6ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e6cc:	b29b      	uxth	r3, r3
 800e6ce:	029b      	lsls	r3, r3, #10
 800e6d0:	b29b      	uxth	r3, r3
 800e6d2:	4313      	orrs	r3, r2
 800e6d4:	b29a      	uxth	r2, r3
 800e6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e6da:	687a      	ldr	r2, [r7, #4]
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	009b      	lsls	r3, r3, #2
 800e6e2:	4413      	add	r3, r2
 800e6e4:	881b      	ldrh	r3, [r3, #0]
 800e6e6:	847b      	strh	r3, [r7, #34]	; 0x22
 800e6e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e6ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d01b      	beq.n	800e72a <USB_ActivateEndpoint+0x34a>
 800e6f2:	687a      	ldr	r2, [r7, #4]
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	781b      	ldrb	r3, [r3, #0]
 800e6f8:	009b      	lsls	r3, r3, #2
 800e6fa:	4413      	add	r3, r2
 800e6fc:	881b      	ldrh	r3, [r3, #0]
 800e6fe:	b29b      	uxth	r3, r3
 800e700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e708:	843b      	strh	r3, [r7, #32]
 800e70a:	687a      	ldr	r2, [r7, #4]
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	009b      	lsls	r3, r3, #2
 800e712:	441a      	add	r2, r3
 800e714:	8c3b      	ldrh	r3, [r7, #32]
 800e716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e71a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e71e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e726:	b29b      	uxth	r3, r3
 800e728:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	781b      	ldrb	r3, [r3, #0]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d124      	bne.n	800e77c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e732:	687a      	ldr	r2, [r7, #4]
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	781b      	ldrb	r3, [r3, #0]
 800e738:	009b      	lsls	r3, r3, #2
 800e73a:	4413      	add	r3, r2
 800e73c:	881b      	ldrh	r3, [r3, #0]
 800e73e:	b29b      	uxth	r3, r3
 800e740:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e748:	83bb      	strh	r3, [r7, #28]
 800e74a:	8bbb      	ldrh	r3, [r7, #28]
 800e74c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e750:	83bb      	strh	r3, [r7, #28]
 800e752:	8bbb      	ldrh	r3, [r7, #28]
 800e754:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e758:	83bb      	strh	r3, [r7, #28]
 800e75a:	687a      	ldr	r2, [r7, #4]
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	781b      	ldrb	r3, [r3, #0]
 800e760:	009b      	lsls	r3, r3, #2
 800e762:	441a      	add	r2, r3
 800e764:	8bbb      	ldrh	r3, [r7, #28]
 800e766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e76a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e76e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e776:	b29b      	uxth	r3, r3
 800e778:	8013      	strh	r3, [r2, #0]
 800e77a:	e1ea      	b.n	800eb52 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	009b      	lsls	r3, r3, #2
 800e784:	4413      	add	r3, r2
 800e786:	881b      	ldrh	r3, [r3, #0]
 800e788:	b29b      	uxth	r3, r3
 800e78a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e78e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e792:	83fb      	strh	r3, [r7, #30]
 800e794:	8bfb      	ldrh	r3, [r7, #30]
 800e796:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e79a:	83fb      	strh	r3, [r7, #30]
 800e79c:	687a      	ldr	r2, [r7, #4]
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	781b      	ldrb	r3, [r3, #0]
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	441a      	add	r2, r3
 800e7a6:	8bfb      	ldrh	r3, [r7, #30]
 800e7a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e7ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e7b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e7b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	8013      	strh	r3, [r2, #0]
 800e7bc:	e1c9      	b.n	800eb52 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	78db      	ldrb	r3, [r3, #3]
 800e7c2:	2b02      	cmp	r3, #2
 800e7c4:	d11e      	bne.n	800e804 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e7c6:	687a      	ldr	r2, [r7, #4]
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	009b      	lsls	r3, r3, #2
 800e7ce:	4413      	add	r3, r2
 800e7d0:	881b      	ldrh	r3, [r3, #0]
 800e7d2:	b29b      	uxth	r3, r3
 800e7d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e7d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e7dc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800e7e0:	687a      	ldr	r2, [r7, #4]
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	781b      	ldrb	r3, [r3, #0]
 800e7e6:	009b      	lsls	r3, r3, #2
 800e7e8:	441a      	add	r2, r3
 800e7ea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800e7ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e7f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e7f6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800e7fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7fe:	b29b      	uxth	r3, r3
 800e800:	8013      	strh	r3, [r2, #0]
 800e802:	e01d      	b.n	800e840 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800e804:	687a      	ldr	r2, [r7, #4]
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	781b      	ldrb	r3, [r3, #0]
 800e80a:	009b      	lsls	r3, r3, #2
 800e80c:	4413      	add	r3, r2
 800e80e:	881b      	ldrh	r3, [r3, #0]
 800e810:	b29b      	uxth	r3, r3
 800e812:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800e816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e81a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800e81e:	687a      	ldr	r2, [r7, #4]
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	781b      	ldrb	r3, [r3, #0]
 800e824:	009b      	lsls	r3, r3, #2
 800e826:	441a      	add	r2, r3
 800e828:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800e82c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e83c:	b29b      	uxth	r3, r3
 800e83e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e84a:	b29b      	uxth	r3, r3
 800e84c:	461a      	mov	r2, r3
 800e84e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e850:	4413      	add	r3, r2
 800e852:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	011a      	lsls	r2, r3, #4
 800e85a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e85c:	4413      	add	r3, r2
 800e85e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e862:	65bb      	str	r3, [r7, #88]	; 0x58
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	891b      	ldrh	r3, [r3, #8]
 800e868:	085b      	lsrs	r3, r3, #1
 800e86a:	b29b      	uxth	r3, r3
 800e86c:	005b      	lsls	r3, r3, #1
 800e86e:	b29a      	uxth	r2, r3
 800e870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e872:	801a      	strh	r2, [r3, #0]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	657b      	str	r3, [r7, #84]	; 0x54
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e87e:	b29b      	uxth	r3, r3
 800e880:	461a      	mov	r2, r3
 800e882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e884:	4413      	add	r3, r2
 800e886:	657b      	str	r3, [r7, #84]	; 0x54
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	011a      	lsls	r2, r3, #4
 800e88e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e890:	4413      	add	r3, r2
 800e892:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800e896:	653b      	str	r3, [r7, #80]	; 0x50
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	895b      	ldrh	r3, [r3, #10]
 800e89c:	085b      	lsrs	r3, r3, #1
 800e89e:	b29b      	uxth	r3, r3
 800e8a0:	005b      	lsls	r3, r3, #1
 800e8a2:	b29a      	uxth	r2, r3
 800e8a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8a6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	785b      	ldrb	r3, [r3, #1]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	f040 8093 	bne.w	800e9d8 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e8b2:	687a      	ldr	r2, [r7, #4]
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	009b      	lsls	r3, r3, #2
 800e8ba:	4413      	add	r3, r2
 800e8bc:	881b      	ldrh	r3, [r3, #0]
 800e8be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800e8c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e8c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d01b      	beq.n	800e906 <USB_ActivateEndpoint+0x526>
 800e8ce:	687a      	ldr	r2, [r7, #4]
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	781b      	ldrb	r3, [r3, #0]
 800e8d4:	009b      	lsls	r3, r3, #2
 800e8d6:	4413      	add	r3, r2
 800e8d8:	881b      	ldrh	r3, [r3, #0]
 800e8da:	b29b      	uxth	r3, r3
 800e8dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e8e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800e8e6:	687a      	ldr	r2, [r7, #4]
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	009b      	lsls	r3, r3, #2
 800e8ee:	441a      	add	r2, r3
 800e8f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e8f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e8f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e8fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e8fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e902:	b29b      	uxth	r3, r3
 800e904:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e906:	687a      	ldr	r2, [r7, #4]
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	009b      	lsls	r3, r3, #2
 800e90e:	4413      	add	r3, r2
 800e910:	881b      	ldrh	r3, [r3, #0]
 800e912:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800e914:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d01b      	beq.n	800e956 <USB_ActivateEndpoint+0x576>
 800e91e:	687a      	ldr	r2, [r7, #4]
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	781b      	ldrb	r3, [r3, #0]
 800e924:	009b      	lsls	r3, r3, #2
 800e926:	4413      	add	r3, r2
 800e928:	881b      	ldrh	r3, [r3, #0]
 800e92a:	b29b      	uxth	r3, r3
 800e92c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e934:	877b      	strh	r3, [r7, #58]	; 0x3a
 800e936:	687a      	ldr	r2, [r7, #4]
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	009b      	lsls	r3, r3, #2
 800e93e:	441a      	add	r2, r3
 800e940:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e94a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e94e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e952:	b29b      	uxth	r3, r3
 800e954:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e956:	687a      	ldr	r2, [r7, #4]
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	781b      	ldrb	r3, [r3, #0]
 800e95c:	009b      	lsls	r3, r3, #2
 800e95e:	4413      	add	r3, r2
 800e960:	881b      	ldrh	r3, [r3, #0]
 800e962:	b29b      	uxth	r3, r3
 800e964:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e96c:	873b      	strh	r3, [r7, #56]	; 0x38
 800e96e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e970:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e974:	873b      	strh	r3, [r7, #56]	; 0x38
 800e976:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e978:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e97c:	873b      	strh	r3, [r7, #56]	; 0x38
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	781b      	ldrb	r3, [r3, #0]
 800e984:	009b      	lsls	r3, r3, #2
 800e986:	441a      	add	r2, r3
 800e988:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e98a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e98e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e99e:	687a      	ldr	r2, [r7, #4]
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	009b      	lsls	r3, r3, #2
 800e9a6:	4413      	add	r3, r2
 800e9a8:	881b      	ldrh	r3, [r3, #0]
 800e9aa:	b29b      	uxth	r3, r3
 800e9ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e9b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e9b4:	86fb      	strh	r3, [r7, #54]	; 0x36
 800e9b6:	687a      	ldr	r2, [r7, #4]
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	009b      	lsls	r3, r3, #2
 800e9be:	441a      	add	r2, r3
 800e9c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e9c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e9c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e9ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e9ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	8013      	strh	r3, [r2, #0]
 800e9d6:	e0bc      	b.n	800eb52 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e9d8:	687a      	ldr	r2, [r7, #4]
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	781b      	ldrb	r3, [r3, #0]
 800e9de:	009b      	lsls	r3, r3, #2
 800e9e0:	4413      	add	r3, r2
 800e9e2:	881b      	ldrh	r3, [r3, #0]
 800e9e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800e9e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e9ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d01d      	beq.n	800ea30 <USB_ActivateEndpoint+0x650>
 800e9f4:	687a      	ldr	r2, [r7, #4]
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	781b      	ldrb	r3, [r3, #0]
 800e9fa:	009b      	lsls	r3, r3, #2
 800e9fc:	4413      	add	r3, r2
 800e9fe:	881b      	ldrh	r3, [r3, #0]
 800ea00:	b29b      	uxth	r3, r3
 800ea02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ea06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea0a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800ea0e:	687a      	ldr	r2, [r7, #4]
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	781b      	ldrb	r3, [r3, #0]
 800ea14:	009b      	lsls	r3, r3, #2
 800ea16:	441a      	add	r2, r3
 800ea18:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ea1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ea20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ea24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ea28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea2c:	b29b      	uxth	r3, r3
 800ea2e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ea30:	687a      	ldr	r2, [r7, #4]
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	781b      	ldrb	r3, [r3, #0]
 800ea36:	009b      	lsls	r3, r3, #2
 800ea38:	4413      	add	r3, r2
 800ea3a:	881b      	ldrh	r3, [r3, #0]
 800ea3c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ea40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ea44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d01d      	beq.n	800ea88 <USB_ActivateEndpoint+0x6a8>
 800ea4c:	687a      	ldr	r2, [r7, #4]
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	781b      	ldrb	r3, [r3, #0]
 800ea52:	009b      	lsls	r3, r3, #2
 800ea54:	4413      	add	r3, r2
 800ea56:	881b      	ldrh	r3, [r3, #0]
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ea5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea62:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ea66:	687a      	ldr	r2, [r7, #4]
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	781b      	ldrb	r3, [r3, #0]
 800ea6c:	009b      	lsls	r3, r3, #2
 800ea6e:	441a      	add	r2, r3
 800ea70:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ea74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ea78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ea7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ea80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ea84:	b29b      	uxth	r3, r3
 800ea86:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	78db      	ldrb	r3, [r3, #3]
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	d024      	beq.n	800eada <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ea90:	687a      	ldr	r2, [r7, #4]
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	009b      	lsls	r3, r3, #2
 800ea98:	4413      	add	r3, r2
 800ea9a:	881b      	ldrh	r3, [r3, #0]
 800ea9c:	b29b      	uxth	r3, r3
 800ea9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eaa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eaa6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800eaaa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800eaae:	f083 0320 	eor.w	r3, r3, #32
 800eab2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800eab6:	687a      	ldr	r2, [r7, #4]
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	009b      	lsls	r3, r3, #2
 800eabe:	441a      	add	r2, r3
 800eac0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800eac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eacc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ead0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ead4:	b29b      	uxth	r3, r3
 800ead6:	8013      	strh	r3, [r2, #0]
 800ead8:	e01d      	b.n	800eb16 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800eada:	687a      	ldr	r2, [r7, #4]
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	009b      	lsls	r3, r3, #2
 800eae2:	4413      	add	r3, r2
 800eae4:	881b      	ldrh	r3, [r3, #0]
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eaec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eaf0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800eaf4:	687a      	ldr	r2, [r7, #4]
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	781b      	ldrb	r3, [r3, #0]
 800eafa:	009b      	lsls	r3, r3, #2
 800eafc:	441a      	add	r2, r3
 800eafe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eb02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eb06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eb0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eb0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800eb16:	687a      	ldr	r2, [r7, #4]
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	009b      	lsls	r3, r3, #2
 800eb1e:	4413      	add	r3, r2
 800eb20:	881b      	ldrh	r3, [r3, #0]
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eb28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb2c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	009b      	lsls	r3, r3, #2
 800eb38:	441a      	add	r2, r3
 800eb3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eb3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eb42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eb46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eb4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb4e:	b29b      	uxth	r3, r3
 800eb50:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800eb52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3774      	adds	r7, #116	; 0x74
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bc80      	pop	{r7}
 800eb5e:	4770      	bx	lr

0800eb60 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b08d      	sub	sp, #52	; 0x34
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	7b1b      	ldrb	r3, [r3, #12]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	f040 808e 	bne.w	800ec90 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	785b      	ldrb	r3, [r3, #1]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d044      	beq.n	800ec06 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800eb7c:	687a      	ldr	r2, [r7, #4]
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	009b      	lsls	r3, r3, #2
 800eb84:	4413      	add	r3, r2
 800eb86:	881b      	ldrh	r3, [r3, #0]
 800eb88:	81bb      	strh	r3, [r7, #12]
 800eb8a:	89bb      	ldrh	r3, [r7, #12]
 800eb8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d01b      	beq.n	800ebcc <USB_DeactivateEndpoint+0x6c>
 800eb94:	687a      	ldr	r2, [r7, #4]
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	009b      	lsls	r3, r3, #2
 800eb9c:	4413      	add	r3, r2
 800eb9e:	881b      	ldrh	r3, [r3, #0]
 800eba0:	b29b      	uxth	r3, r3
 800eba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ebaa:	817b      	strh	r3, [r7, #10]
 800ebac:	687a      	ldr	r2, [r7, #4]
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	781b      	ldrb	r3, [r3, #0]
 800ebb2:	009b      	lsls	r3, r3, #2
 800ebb4:	441a      	add	r2, r3
 800ebb6:	897b      	ldrh	r3, [r7, #10]
 800ebb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ebbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ebc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ebc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ebc8:	b29b      	uxth	r3, r3
 800ebca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ebcc:	687a      	ldr	r2, [r7, #4]
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	009b      	lsls	r3, r3, #2
 800ebd4:	4413      	add	r3, r2
 800ebd6:	881b      	ldrh	r3, [r3, #0]
 800ebd8:	b29b      	uxth	r3, r3
 800ebda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ebde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebe2:	813b      	strh	r3, [r7, #8]
 800ebe4:	687a      	ldr	r2, [r7, #4]
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	009b      	lsls	r3, r3, #2
 800ebec:	441a      	add	r2, r3
 800ebee:	893b      	ldrh	r3, [r7, #8]
 800ebf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ebf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ebf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ebfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec00:	b29b      	uxth	r3, r3
 800ec02:	8013      	strh	r3, [r2, #0]
 800ec04:	e192      	b.n	800ef2c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ec06:	687a      	ldr	r2, [r7, #4]
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	009b      	lsls	r3, r3, #2
 800ec0e:	4413      	add	r3, r2
 800ec10:	881b      	ldrh	r3, [r3, #0]
 800ec12:	827b      	strh	r3, [r7, #18]
 800ec14:	8a7b      	ldrh	r3, [r7, #18]
 800ec16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d01b      	beq.n	800ec56 <USB_DeactivateEndpoint+0xf6>
 800ec1e:	687a      	ldr	r2, [r7, #4]
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	781b      	ldrb	r3, [r3, #0]
 800ec24:	009b      	lsls	r3, r3, #2
 800ec26:	4413      	add	r3, r2
 800ec28:	881b      	ldrh	r3, [r3, #0]
 800ec2a:	b29b      	uxth	r3, r3
 800ec2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec34:	823b      	strh	r3, [r7, #16]
 800ec36:	687a      	ldr	r2, [r7, #4]
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	781b      	ldrb	r3, [r3, #0]
 800ec3c:	009b      	lsls	r3, r3, #2
 800ec3e:	441a      	add	r2, r3
 800ec40:	8a3b      	ldrh	r3, [r7, #16]
 800ec42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ec4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec52:	b29b      	uxth	r3, r3
 800ec54:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ec56:	687a      	ldr	r2, [r7, #4]
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	781b      	ldrb	r3, [r3, #0]
 800ec5c:	009b      	lsls	r3, r3, #2
 800ec5e:	4413      	add	r3, r2
 800ec60:	881b      	ldrh	r3, [r3, #0]
 800ec62:	b29b      	uxth	r3, r3
 800ec64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ec68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec6c:	81fb      	strh	r3, [r7, #14]
 800ec6e:	687a      	ldr	r2, [r7, #4]
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	009b      	lsls	r3, r3, #2
 800ec76:	441a      	add	r2, r3
 800ec78:	89fb      	ldrh	r3, [r7, #14]
 800ec7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec8a:	b29b      	uxth	r3, r3
 800ec8c:	8013      	strh	r3, [r2, #0]
 800ec8e:	e14d      	b.n	800ef2c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	785b      	ldrb	r3, [r3, #1]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	f040 80a5 	bne.w	800ede4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ec9a:	687a      	ldr	r2, [r7, #4]
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	009b      	lsls	r3, r3, #2
 800eca2:	4413      	add	r3, r2
 800eca4:	881b      	ldrh	r3, [r3, #0]
 800eca6:	843b      	strh	r3, [r7, #32]
 800eca8:	8c3b      	ldrh	r3, [r7, #32]
 800ecaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d01b      	beq.n	800ecea <USB_DeactivateEndpoint+0x18a>
 800ecb2:	687a      	ldr	r2, [r7, #4]
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	781b      	ldrb	r3, [r3, #0]
 800ecb8:	009b      	lsls	r3, r3, #2
 800ecba:	4413      	add	r3, r2
 800ecbc:	881b      	ldrh	r3, [r3, #0]
 800ecbe:	b29b      	uxth	r3, r3
 800ecc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ecc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ecc8:	83fb      	strh	r3, [r7, #30]
 800ecca:	687a      	ldr	r2, [r7, #4]
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	781b      	ldrb	r3, [r3, #0]
 800ecd0:	009b      	lsls	r3, r3, #2
 800ecd2:	441a      	add	r2, r3
 800ecd4:	8bfb      	ldrh	r3, [r7, #30]
 800ecd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ecda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ecde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ece2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ece6:	b29b      	uxth	r3, r3
 800ece8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ecea:	687a      	ldr	r2, [r7, #4]
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	781b      	ldrb	r3, [r3, #0]
 800ecf0:	009b      	lsls	r3, r3, #2
 800ecf2:	4413      	add	r3, r2
 800ecf4:	881b      	ldrh	r3, [r3, #0]
 800ecf6:	83bb      	strh	r3, [r7, #28]
 800ecf8:	8bbb      	ldrh	r3, [r7, #28]
 800ecfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d01b      	beq.n	800ed3a <USB_DeactivateEndpoint+0x1da>
 800ed02:	687a      	ldr	r2, [r7, #4]
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	781b      	ldrb	r3, [r3, #0]
 800ed08:	009b      	lsls	r3, r3, #2
 800ed0a:	4413      	add	r3, r2
 800ed0c:	881b      	ldrh	r3, [r3, #0]
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed18:	837b      	strh	r3, [r7, #26]
 800ed1a:	687a      	ldr	r2, [r7, #4]
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	009b      	lsls	r3, r3, #2
 800ed22:	441a      	add	r2, r3
 800ed24:	8b7b      	ldrh	r3, [r7, #26]
 800ed26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ed2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ed2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ed32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ed36:	b29b      	uxth	r3, r3
 800ed38:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ed3a:	687a      	ldr	r2, [r7, #4]
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	781b      	ldrb	r3, [r3, #0]
 800ed40:	009b      	lsls	r3, r3, #2
 800ed42:	4413      	add	r3, r2
 800ed44:	881b      	ldrh	r3, [r3, #0]
 800ed46:	b29b      	uxth	r3, r3
 800ed48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed50:	833b      	strh	r3, [r7, #24]
 800ed52:	687a      	ldr	r2, [r7, #4]
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	781b      	ldrb	r3, [r3, #0]
 800ed58:	009b      	lsls	r3, r3, #2
 800ed5a:	441a      	add	r2, r3
 800ed5c:	8b3b      	ldrh	r3, [r7, #24]
 800ed5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ed62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ed66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ed6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	781b      	ldrb	r3, [r3, #0]
 800ed78:	009b      	lsls	r3, r3, #2
 800ed7a:	4413      	add	r3, r2
 800ed7c:	881b      	ldrh	r3, [r3, #0]
 800ed7e:	b29b      	uxth	r3, r3
 800ed80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ed84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed88:	82fb      	strh	r3, [r7, #22]
 800ed8a:	687a      	ldr	r2, [r7, #4]
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	781b      	ldrb	r3, [r3, #0]
 800ed90:	009b      	lsls	r3, r3, #2
 800ed92:	441a      	add	r2, r3
 800ed94:	8afb      	ldrh	r3, [r7, #22]
 800ed96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ed9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ed9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eda2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eda6:	b29b      	uxth	r3, r3
 800eda8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800edaa:	687a      	ldr	r2, [r7, #4]
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	009b      	lsls	r3, r3, #2
 800edb2:	4413      	add	r3, r2
 800edb4:	881b      	ldrh	r3, [r3, #0]
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800edbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800edc0:	82bb      	strh	r3, [r7, #20]
 800edc2:	687a      	ldr	r2, [r7, #4]
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	009b      	lsls	r3, r3, #2
 800edca:	441a      	add	r2, r3
 800edcc:	8abb      	ldrh	r3, [r7, #20]
 800edce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800edd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800edd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800edda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edde:	b29b      	uxth	r3, r3
 800ede0:	8013      	strh	r3, [r2, #0]
 800ede2:	e0a3      	b.n	800ef2c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ede4:	687a      	ldr	r2, [r7, #4]
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	781b      	ldrb	r3, [r3, #0]
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	4413      	add	r3, r2
 800edee:	881b      	ldrh	r3, [r3, #0]
 800edf0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800edf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800edf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d01b      	beq.n	800ee34 <USB_DeactivateEndpoint+0x2d4>
 800edfc:	687a      	ldr	r2, [r7, #4]
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	009b      	lsls	r3, r3, #2
 800ee04:	4413      	add	r3, r2
 800ee06:	881b      	ldrh	r3, [r3, #0]
 800ee08:	b29b      	uxth	r3, r3
 800ee0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee12:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ee14:	687a      	ldr	r2, [r7, #4]
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	009b      	lsls	r3, r3, #2
 800ee1c:	441a      	add	r2, r3
 800ee1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ee20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ee2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee30:	b29b      	uxth	r3, r3
 800ee32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ee34:	687a      	ldr	r2, [r7, #4]
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	781b      	ldrb	r3, [r3, #0]
 800ee3a:	009b      	lsls	r3, r3, #2
 800ee3c:	4413      	add	r3, r2
 800ee3e:	881b      	ldrh	r3, [r3, #0]
 800ee40:	857b      	strh	r3, [r7, #42]	; 0x2a
 800ee42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ee44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d01b      	beq.n	800ee84 <USB_DeactivateEndpoint+0x324>
 800ee4c:	687a      	ldr	r2, [r7, #4]
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	781b      	ldrb	r3, [r3, #0]
 800ee52:	009b      	lsls	r3, r3, #2
 800ee54:	4413      	add	r3, r2
 800ee56:	881b      	ldrh	r3, [r3, #0]
 800ee58:	b29b      	uxth	r3, r3
 800ee5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee62:	853b      	strh	r3, [r7, #40]	; 0x28
 800ee64:	687a      	ldr	r2, [r7, #4]
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	009b      	lsls	r3, r3, #2
 800ee6c:	441a      	add	r2, r3
 800ee6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ee70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ee80:	b29b      	uxth	r3, r3
 800ee82:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800ee84:	687a      	ldr	r2, [r7, #4]
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	781b      	ldrb	r3, [r3, #0]
 800ee8a:	009b      	lsls	r3, r3, #2
 800ee8c:	4413      	add	r3, r2
 800ee8e:	881b      	ldrh	r3, [r3, #0]
 800ee90:	b29b      	uxth	r3, r3
 800ee92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee9a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ee9c:	687a      	ldr	r2, [r7, #4]
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	781b      	ldrb	r3, [r3, #0]
 800eea2:	009b      	lsls	r3, r3, #2
 800eea4:	441a      	add	r2, r3
 800eea6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eeac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eeb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800eeb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800eebc:	687a      	ldr	r2, [r7, #4]
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	781b      	ldrb	r3, [r3, #0]
 800eec2:	009b      	lsls	r3, r3, #2
 800eec4:	4413      	add	r3, r2
 800eec6:	881b      	ldrh	r3, [r3, #0]
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eed2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800eed4:	687a      	ldr	r2, [r7, #4]
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	009b      	lsls	r3, r3, #2
 800eedc:	441a      	add	r2, r3
 800eede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eeec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eef0:	b29b      	uxth	r3, r3
 800eef2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800eef4:	687a      	ldr	r2, [r7, #4]
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	781b      	ldrb	r3, [r3, #0]
 800eefa:	009b      	lsls	r3, r3, #2
 800eefc:	4413      	add	r3, r2
 800eefe:	881b      	ldrh	r3, [r3, #0]
 800ef00:	b29b      	uxth	r3, r3
 800ef02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ef06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef0a:	847b      	strh	r3, [r7, #34]	; 0x22
 800ef0c:	687a      	ldr	r2, [r7, #4]
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	781b      	ldrb	r3, [r3, #0]
 800ef12:	009b      	lsls	r3, r3, #2
 800ef14:	441a      	add	r2, r3
 800ef16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ef1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ef20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef28:	b29b      	uxth	r3, r3
 800ef2a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ef2c:	2300      	movs	r3, #0
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3734      	adds	r7, #52	; 0x34
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bc80      	pop	{r7}
 800ef36:	4770      	bx	lr

0800ef38 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b0c2      	sub	sp, #264	; 0x108
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef46:	6018      	str	r0, [r3, #0]
 800ef48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef50:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ef52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	785b      	ldrb	r3, [r3, #1]
 800ef5e:	2b01      	cmp	r3, #1
 800ef60:	f040 86b7 	bne.w	800fcd2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ef64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	699a      	ldr	r2, [r3, #24]
 800ef70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	691b      	ldr	r3, [r3, #16]
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	d908      	bls.n	800ef92 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800ef80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	691b      	ldr	r3, [r3, #16]
 800ef8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ef90:	e007      	b.n	800efa2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800ef92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	699b      	ldr	r3, [r3, #24]
 800ef9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800efa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	7b1b      	ldrb	r3, [r3, #12]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d13a      	bne.n	800f028 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800efb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	6959      	ldr	r1, [r3, #20]
 800efbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	88da      	ldrh	r2, [r3, #6]
 800efca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800efce:	b29b      	uxth	r3, r3
 800efd0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800efd4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800efd8:	6800      	ldr	r0, [r0, #0]
 800efda:	f001 fc9c 	bl	8010916 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800efde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efe2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	613b      	str	r3, [r7, #16]
 800efea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eff8:	b29b      	uxth	r3, r3
 800effa:	461a      	mov	r2, r3
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	4413      	add	r3, r2
 800f000:	613b      	str	r3, [r7, #16]
 800f002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	781b      	ldrb	r3, [r3, #0]
 800f00e:	011a      	lsls	r2, r3, #4
 800f010:	693b      	ldr	r3, [r7, #16]
 800f012:	4413      	add	r3, r2
 800f014:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f018:	60fb      	str	r3, [r7, #12]
 800f01a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f01e:	b29a      	uxth	r2, r3
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	801a      	strh	r2, [r3, #0]
 800f024:	f000 be1f 	b.w	800fc66 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800f028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f02c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	78db      	ldrb	r3, [r3, #3]
 800f034:	2b02      	cmp	r3, #2
 800f036:	f040 8462 	bne.w	800f8fe <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800f03a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f03e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	6a1a      	ldr	r2, [r3, #32]
 800f046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f04a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	691b      	ldr	r3, [r3, #16]
 800f052:	429a      	cmp	r2, r3
 800f054:	f240 83df 	bls.w	800f816 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f05c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f060:	681a      	ldr	r2, [r3, #0]
 800f062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	009b      	lsls	r3, r3, #2
 800f070:	4413      	add	r3, r2
 800f072:	881b      	ldrh	r3, [r3, #0]
 800f074:	b29b      	uxth	r3, r3
 800f076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f07a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f07e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800f082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f086:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	781b      	ldrb	r3, [r3, #0]
 800f098:	009b      	lsls	r3, r3, #2
 800f09a:	441a      	add	r2, r3
 800f09c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f0a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f0a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f0a8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800f0ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0b0:	b29b      	uxth	r3, r3
 800f0b2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800f0b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	6a1a      	ldr	r2, [r3, #32]
 800f0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f0c4:	1ad2      	subs	r2, r2, r3
 800f0c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f0d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f0da:	681a      	ldr	r2, [r3, #0]
 800f0dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	009b      	lsls	r3, r3, #2
 800f0ea:	4413      	add	r3, r2
 800f0ec:	881b      	ldrh	r3, [r3, #0]
 800f0ee:	b29b      	uxth	r3, r3
 800f0f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	f000 81c7 	beq.w	800f488 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f0fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f0fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	633b      	str	r3, [r7, #48]	; 0x30
 800f106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f10a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	785b      	ldrb	r3, [r3, #1]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d177      	bne.n	800f206 <USB_EPStartXfer+0x2ce>
 800f116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f11a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	62bb      	str	r3, [r7, #40]	; 0x28
 800f122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f126:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f130:	b29b      	uxth	r3, r3
 800f132:	461a      	mov	r2, r3
 800f134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f136:	4413      	add	r3, r2
 800f138:	62bb      	str	r3, [r7, #40]	; 0x28
 800f13a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f13e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	781b      	ldrb	r3, [r3, #0]
 800f146:	011a      	lsls	r2, r3, #4
 800f148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f14a:	4413      	add	r3, r2
 800f14c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f150:	627b      	str	r3, [r7, #36]	; 0x24
 800f152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f154:	881b      	ldrh	r3, [r3, #0]
 800f156:	b29b      	uxth	r3, r3
 800f158:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f15c:	b29a      	uxth	r2, r3
 800f15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f160:	801a      	strh	r2, [r3, #0]
 800f162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f166:	2b3e      	cmp	r3, #62	; 0x3e
 800f168:	d921      	bls.n	800f1ae <USB_EPStartXfer+0x276>
 800f16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f16e:	095b      	lsrs	r3, r3, #5
 800f170:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f178:	f003 031f 	and.w	r3, r3, #31
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d104      	bne.n	800f18a <USB_EPStartXfer+0x252>
 800f180:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f184:	3b01      	subs	r3, #1
 800f186:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f18c:	881b      	ldrh	r3, [r3, #0]
 800f18e:	b29a      	uxth	r2, r3
 800f190:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f194:	b29b      	uxth	r3, r3
 800f196:	029b      	lsls	r3, r3, #10
 800f198:	b29b      	uxth	r3, r3
 800f19a:	4313      	orrs	r3, r2
 800f19c:	b29b      	uxth	r3, r3
 800f19e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f1a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f1a6:	b29a      	uxth	r2, r3
 800f1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1aa:	801a      	strh	r2, [r3, #0]
 800f1ac:	e050      	b.n	800f250 <USB_EPStartXfer+0x318>
 800f1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d10a      	bne.n	800f1cc <USB_EPStartXfer+0x294>
 800f1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b8:	881b      	ldrh	r3, [r3, #0]
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f1c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f1c4:	b29a      	uxth	r2, r3
 800f1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c8:	801a      	strh	r2, [r3, #0]
 800f1ca:	e041      	b.n	800f250 <USB_EPStartXfer+0x318>
 800f1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f1d0:	085b      	lsrs	r3, r3, #1
 800f1d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f1d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f1da:	f003 0301 	and.w	r3, r3, #1
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d004      	beq.n	800f1ec <USB_EPStartXfer+0x2b4>
 800f1e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f1e6:	3301      	adds	r3, #1
 800f1e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ee:	881b      	ldrh	r3, [r3, #0]
 800f1f0:	b29a      	uxth	r2, r3
 800f1f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f1f6:	b29b      	uxth	r3, r3
 800f1f8:	029b      	lsls	r3, r3, #10
 800f1fa:	b29b      	uxth	r3, r3
 800f1fc:	4313      	orrs	r3, r2
 800f1fe:	b29a      	uxth	r2, r3
 800f200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f202:	801a      	strh	r2, [r3, #0]
 800f204:	e024      	b.n	800f250 <USB_EPStartXfer+0x318>
 800f206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f20a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	785b      	ldrb	r3, [r3, #1]
 800f212:	2b01      	cmp	r3, #1
 800f214:	d11c      	bne.n	800f250 <USB_EPStartXfer+0x318>
 800f216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f21a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f224:	b29b      	uxth	r3, r3
 800f226:	461a      	mov	r2, r3
 800f228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f22a:	4413      	add	r3, r2
 800f22c:	633b      	str	r3, [r7, #48]	; 0x30
 800f22e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	781b      	ldrb	r3, [r3, #0]
 800f23a:	011a      	lsls	r2, r3, #4
 800f23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f23e:	4413      	add	r3, r2
 800f240:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f244:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f24a:	b29a      	uxth	r2, r3
 800f24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f24e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800f250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	895b      	ldrh	r3, [r3, #10]
 800f25c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	6959      	ldr	r1, [r3, #20]
 800f26c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f270:	b29b      	uxth	r3, r3
 800f272:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f276:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f27a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f27e:	6800      	ldr	r0, [r0, #0]
 800f280:	f001 fb49 	bl	8010916 <USB_WritePMA>
            ep->xfer_buff += len;
 800f284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	695a      	ldr	r2, [r3, #20]
 800f290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f294:	441a      	add	r2, r3
 800f296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f29a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f2a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	6a1a      	ldr	r2, [r3, #32]
 800f2ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	691b      	ldr	r3, [r3, #16]
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d90f      	bls.n	800f2de <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800f2be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	6a1a      	ldr	r2, [r3, #32]
 800f2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f2ce:	1ad2      	subs	r2, r2, r3
 800f2d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	621a      	str	r2, [r3, #32]
 800f2dc:	e00e      	b.n	800f2fc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800f2de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	6a1b      	ldr	r3, [r3, #32]
 800f2ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800f2ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f2f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f2fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	785b      	ldrb	r3, [r3, #1]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d177      	bne.n	800f3fc <USB_EPStartXfer+0x4c4>
 800f30c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f310:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	61bb      	str	r3, [r7, #24]
 800f318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f31c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f326:	b29b      	uxth	r3, r3
 800f328:	461a      	mov	r2, r3
 800f32a:	69bb      	ldr	r3, [r7, #24]
 800f32c:	4413      	add	r3, r2
 800f32e:	61bb      	str	r3, [r7, #24]
 800f330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	011a      	lsls	r2, r3, #4
 800f33e:	69bb      	ldr	r3, [r7, #24]
 800f340:	4413      	add	r3, r2
 800f342:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f346:	617b      	str	r3, [r7, #20]
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	881b      	ldrh	r3, [r3, #0]
 800f34c:	b29b      	uxth	r3, r3
 800f34e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f352:	b29a      	uxth	r2, r3
 800f354:	697b      	ldr	r3, [r7, #20]
 800f356:	801a      	strh	r2, [r3, #0]
 800f358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f35c:	2b3e      	cmp	r3, #62	; 0x3e
 800f35e:	d921      	bls.n	800f3a4 <USB_EPStartXfer+0x46c>
 800f360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f364:	095b      	lsrs	r3, r3, #5
 800f366:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f36a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f36e:	f003 031f 	and.w	r3, r3, #31
 800f372:	2b00      	cmp	r3, #0
 800f374:	d104      	bne.n	800f380 <USB_EPStartXfer+0x448>
 800f376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f37a:	3b01      	subs	r3, #1
 800f37c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	881b      	ldrh	r3, [r3, #0]
 800f384:	b29a      	uxth	r2, r3
 800f386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f38a:	b29b      	uxth	r3, r3
 800f38c:	029b      	lsls	r3, r3, #10
 800f38e:	b29b      	uxth	r3, r3
 800f390:	4313      	orrs	r3, r2
 800f392:	b29b      	uxth	r3, r3
 800f394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f39c:	b29a      	uxth	r2, r3
 800f39e:	697b      	ldr	r3, [r7, #20]
 800f3a0:	801a      	strh	r2, [r3, #0]
 800f3a2:	e056      	b.n	800f452 <USB_EPStartXfer+0x51a>
 800f3a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d10a      	bne.n	800f3c2 <USB_EPStartXfer+0x48a>
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	881b      	ldrh	r3, [r3, #0]
 800f3b0:	b29b      	uxth	r3, r3
 800f3b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f3b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f3ba:	b29a      	uxth	r2, r3
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	801a      	strh	r2, [r3, #0]
 800f3c0:	e047      	b.n	800f452 <USB_EPStartXfer+0x51a>
 800f3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f3c6:	085b      	lsrs	r3, r3, #1
 800f3c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f3cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f3d0:	f003 0301 	and.w	r3, r3, #1
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d004      	beq.n	800f3e2 <USB_EPStartXfer+0x4aa>
 800f3d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f3dc:	3301      	adds	r3, #1
 800f3de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	881b      	ldrh	r3, [r3, #0]
 800f3e6:	b29a      	uxth	r2, r3
 800f3e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f3ec:	b29b      	uxth	r3, r3
 800f3ee:	029b      	lsls	r3, r3, #10
 800f3f0:	b29b      	uxth	r3, r3
 800f3f2:	4313      	orrs	r3, r2
 800f3f4:	b29a      	uxth	r2, r3
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	801a      	strh	r2, [r3, #0]
 800f3fa:	e02a      	b.n	800f452 <USB_EPStartXfer+0x51a>
 800f3fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	785b      	ldrb	r3, [r3, #1]
 800f408:	2b01      	cmp	r3, #1
 800f40a:	d122      	bne.n	800f452 <USB_EPStartXfer+0x51a>
 800f40c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f410:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	623b      	str	r3, [r7, #32]
 800f418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f41c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f426:	b29b      	uxth	r3, r3
 800f428:	461a      	mov	r2, r3
 800f42a:	6a3b      	ldr	r3, [r7, #32]
 800f42c:	4413      	add	r3, r2
 800f42e:	623b      	str	r3, [r7, #32]
 800f430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	011a      	lsls	r2, r3, #4
 800f43e:	6a3b      	ldr	r3, [r7, #32]
 800f440:	4413      	add	r3, r2
 800f442:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f446:	61fb      	str	r3, [r7, #28]
 800f448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f44c:	b29a      	uxth	r2, r3
 800f44e:	69fb      	ldr	r3, [r7, #28]
 800f450:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800f452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	891b      	ldrh	r3, [r3, #8]
 800f45e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	6959      	ldr	r1, [r3, #20]
 800f46e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f472:	b29b      	uxth	r3, r3
 800f474:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f478:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f47c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f480:	6800      	ldr	r0, [r0, #0]
 800f482:	f001 fa48 	bl	8010916 <USB_WritePMA>
 800f486:	e3ee      	b.n	800fc66 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800f488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f48c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	785b      	ldrb	r3, [r3, #1]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d177      	bne.n	800f588 <USB_EPStartXfer+0x650>
 800f498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f49c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	64bb      	str	r3, [r7, #72]	; 0x48
 800f4a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	461a      	mov	r2, r3
 800f4b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4b8:	4413      	add	r3, r2
 800f4ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800f4bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f4c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	781b      	ldrb	r3, [r3, #0]
 800f4c8:	011a      	lsls	r2, r3, #4
 800f4ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4cc:	4413      	add	r3, r2
 800f4ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f4d2:	647b      	str	r3, [r7, #68]	; 0x44
 800f4d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4d6:	881b      	ldrh	r3, [r3, #0]
 800f4d8:	b29b      	uxth	r3, r3
 800f4da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f4de:	b29a      	uxth	r2, r3
 800f4e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4e2:	801a      	strh	r2, [r3, #0]
 800f4e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f4e8:	2b3e      	cmp	r3, #62	; 0x3e
 800f4ea:	d921      	bls.n	800f530 <USB_EPStartXfer+0x5f8>
 800f4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f4f0:	095b      	lsrs	r3, r3, #5
 800f4f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f4f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f4fa:	f003 031f 	and.w	r3, r3, #31
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d104      	bne.n	800f50c <USB_EPStartXfer+0x5d4>
 800f502:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f506:	3b01      	subs	r3, #1
 800f508:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f50c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f50e:	881b      	ldrh	r3, [r3, #0]
 800f510:	b29a      	uxth	r2, r3
 800f512:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f516:	b29b      	uxth	r3, r3
 800f518:	029b      	lsls	r3, r3, #10
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	4313      	orrs	r3, r2
 800f51e:	b29b      	uxth	r3, r3
 800f520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f528:	b29a      	uxth	r2, r3
 800f52a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f52c:	801a      	strh	r2, [r3, #0]
 800f52e:	e056      	b.n	800f5de <USB_EPStartXfer+0x6a6>
 800f530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f534:	2b00      	cmp	r3, #0
 800f536:	d10a      	bne.n	800f54e <USB_EPStartXfer+0x616>
 800f538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f53a:	881b      	ldrh	r3, [r3, #0]
 800f53c:	b29b      	uxth	r3, r3
 800f53e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f546:	b29a      	uxth	r2, r3
 800f548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f54a:	801a      	strh	r2, [r3, #0]
 800f54c:	e047      	b.n	800f5de <USB_EPStartXfer+0x6a6>
 800f54e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f552:	085b      	lsrs	r3, r3, #1
 800f554:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f55c:	f003 0301 	and.w	r3, r3, #1
 800f560:	2b00      	cmp	r3, #0
 800f562:	d004      	beq.n	800f56e <USB_EPStartXfer+0x636>
 800f564:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f568:	3301      	adds	r3, #1
 800f56a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800f56e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f570:	881b      	ldrh	r3, [r3, #0]
 800f572:	b29a      	uxth	r2, r3
 800f574:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f578:	b29b      	uxth	r3, r3
 800f57a:	029b      	lsls	r3, r3, #10
 800f57c:	b29b      	uxth	r3, r3
 800f57e:	4313      	orrs	r3, r2
 800f580:	b29a      	uxth	r2, r3
 800f582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f584:	801a      	strh	r2, [r3, #0]
 800f586:	e02a      	b.n	800f5de <USB_EPStartXfer+0x6a6>
 800f588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f58c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	785b      	ldrb	r3, [r3, #1]
 800f594:	2b01      	cmp	r3, #1
 800f596:	d122      	bne.n	800f5de <USB_EPStartXfer+0x6a6>
 800f598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f59c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	653b      	str	r3, [r7, #80]	; 0x50
 800f5a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f5b2:	b29b      	uxth	r3, r3
 800f5b4:	461a      	mov	r2, r3
 800f5b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5b8:	4413      	add	r3, r2
 800f5ba:	653b      	str	r3, [r7, #80]	; 0x50
 800f5bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	781b      	ldrb	r3, [r3, #0]
 800f5c8:	011a      	lsls	r2, r3, #4
 800f5ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5cc:	4413      	add	r3, r2
 800f5ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f5d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f5d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f5d8:	b29a      	uxth	r2, r3
 800f5da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800f5de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	891b      	ldrh	r3, [r3, #8]
 800f5ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f5ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f5f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	6959      	ldr	r1, [r3, #20]
 800f5fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f5fe:	b29b      	uxth	r3, r3
 800f600:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f604:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f608:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f60c:	6800      	ldr	r0, [r0, #0]
 800f60e:	f001 f982 	bl	8010916 <USB_WritePMA>
            ep->xfer_buff += len;
 800f612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	695a      	ldr	r2, [r3, #20]
 800f61e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f622:	441a      	add	r2, r3
 800f624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800f630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	6a1a      	ldr	r2, [r3, #32]
 800f63c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	691b      	ldr	r3, [r3, #16]
 800f648:	429a      	cmp	r2, r3
 800f64a:	d90f      	bls.n	800f66c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800f64c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	6a1a      	ldr	r2, [r3, #32]
 800f658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f65c:	1ad2      	subs	r2, r2, r3
 800f65e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	621a      	str	r2, [r3, #32]
 800f66a:	e00e      	b.n	800f68a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800f66c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	6a1b      	ldr	r3, [r3, #32]
 800f678:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800f67c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	2200      	movs	r2, #0
 800f688:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f68a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f68e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	643b      	str	r3, [r7, #64]	; 0x40
 800f696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f69a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	785b      	ldrb	r3, [r3, #1]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d177      	bne.n	800f796 <USB_EPStartXfer+0x85e>
 800f6a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	63bb      	str	r3, [r7, #56]	; 0x38
 800f6b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c6:	4413      	add	r3, r2
 800f6c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800f6ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f6ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	011a      	lsls	r2, r3, #4
 800f6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6da:	4413      	add	r3, r2
 800f6dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f6e0:	637b      	str	r3, [r7, #52]	; 0x34
 800f6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6e4:	881b      	ldrh	r3, [r3, #0]
 800f6e6:	b29b      	uxth	r3, r3
 800f6e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f6ec:	b29a      	uxth	r2, r3
 800f6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6f0:	801a      	strh	r2, [r3, #0]
 800f6f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6f6:	2b3e      	cmp	r3, #62	; 0x3e
 800f6f8:	d921      	bls.n	800f73e <USB_EPStartXfer+0x806>
 800f6fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f6fe:	095b      	lsrs	r3, r3, #5
 800f700:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f708:	f003 031f 	and.w	r3, r3, #31
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d104      	bne.n	800f71a <USB_EPStartXfer+0x7e2>
 800f710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f714:	3b01      	subs	r3, #1
 800f716:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f71a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f71c:	881b      	ldrh	r3, [r3, #0]
 800f71e:	b29a      	uxth	r2, r3
 800f720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f724:	b29b      	uxth	r3, r3
 800f726:	029b      	lsls	r3, r3, #10
 800f728:	b29b      	uxth	r3, r3
 800f72a:	4313      	orrs	r3, r2
 800f72c:	b29b      	uxth	r3, r3
 800f72e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f736:	b29a      	uxth	r2, r3
 800f738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f73a:	801a      	strh	r2, [r3, #0]
 800f73c:	e050      	b.n	800f7e0 <USB_EPStartXfer+0x8a8>
 800f73e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f742:	2b00      	cmp	r3, #0
 800f744:	d10a      	bne.n	800f75c <USB_EPStartXfer+0x824>
 800f746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f748:	881b      	ldrh	r3, [r3, #0]
 800f74a:	b29b      	uxth	r3, r3
 800f74c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f754:	b29a      	uxth	r2, r3
 800f756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f758:	801a      	strh	r2, [r3, #0]
 800f75a:	e041      	b.n	800f7e0 <USB_EPStartXfer+0x8a8>
 800f75c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f760:	085b      	lsrs	r3, r3, #1
 800f762:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f76a:	f003 0301 	and.w	r3, r3, #1
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d004      	beq.n	800f77c <USB_EPStartXfer+0x844>
 800f772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f776:	3301      	adds	r3, #1
 800f778:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f77c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f77e:	881b      	ldrh	r3, [r3, #0]
 800f780:	b29a      	uxth	r2, r3
 800f782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f786:	b29b      	uxth	r3, r3
 800f788:	029b      	lsls	r3, r3, #10
 800f78a:	b29b      	uxth	r3, r3
 800f78c:	4313      	orrs	r3, r2
 800f78e:	b29a      	uxth	r2, r3
 800f790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f792:	801a      	strh	r2, [r3, #0]
 800f794:	e024      	b.n	800f7e0 <USB_EPStartXfer+0x8a8>
 800f796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f79a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	785b      	ldrb	r3, [r3, #1]
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	d11c      	bne.n	800f7e0 <USB_EPStartXfer+0x8a8>
 800f7a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7ba:	4413      	add	r3, r2
 800f7bc:	643b      	str	r3, [r7, #64]	; 0x40
 800f7be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	781b      	ldrb	r3, [r3, #0]
 800f7ca:	011a      	lsls	r2, r3, #4
 800f7cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7ce:	4413      	add	r3, r2
 800f7d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f7d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f7da:	b29a      	uxth	r2, r3
 800f7dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800f7e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	895b      	ldrh	r3, [r3, #10]
 800f7ec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f7f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f7f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	6959      	ldr	r1, [r3, #20]
 800f7fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f800:	b29b      	uxth	r3, r3
 800f802:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f806:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f80a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f80e:	6800      	ldr	r0, [r0, #0]
 800f810:	f001 f881 	bl	8010916 <USB_WritePMA>
 800f814:	e227      	b.n	800fc66 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800f816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f81a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	6a1b      	ldr	r3, [r3, #32]
 800f822:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800f826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f82a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f82e:	681a      	ldr	r2, [r3, #0]
 800f830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	009b      	lsls	r3, r3, #2
 800f83e:	4413      	add	r3, r2
 800f840:	881b      	ldrh	r3, [r3, #0]
 800f842:	b29b      	uxth	r3, r3
 800f844:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800f848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f84c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800f850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f854:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f858:	681a      	ldr	r2, [r3, #0]
 800f85a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f85e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	781b      	ldrb	r3, [r3, #0]
 800f866:	009b      	lsls	r3, r3, #2
 800f868:	441a      	add	r2, r3
 800f86a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800f86e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f87a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f87e:	b29b      	uxth	r3, r3
 800f880:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f886:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f88e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f892:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f89c:	b29b      	uxth	r3, r3
 800f89e:	461a      	mov	r2, r3
 800f8a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8a2:	4413      	add	r3, r2
 800f8a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f8a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	011a      	lsls	r2, r3, #4
 800f8b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8b6:	4413      	add	r3, r2
 800f8b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f8bc:	65bb      	str	r3, [r7, #88]	; 0x58
 800f8be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f8c2:	b29a      	uxth	r2, r3
 800f8c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f8c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800f8c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	891b      	ldrh	r3, [r3, #8]
 800f8d4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800f8d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	6959      	ldr	r1, [r3, #20]
 800f8e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f8e8:	b29b      	uxth	r3, r3
 800f8ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f8ee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f8f2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f8f6:	6800      	ldr	r0, [r0, #0]
 800f8f8:	f001 f80d 	bl	8010916 <USB_WritePMA>
 800f8fc:	e1b3      	b.n	800fc66 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800f8fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	6a1a      	ldr	r2, [r3, #32]
 800f90a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f90e:	1ad2      	subs	r2, r2, r3
 800f910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800f91c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f920:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f924:	681a      	ldr	r2, [r3, #0]
 800f926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f92a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	009b      	lsls	r3, r3, #2
 800f934:	4413      	add	r3, r2
 800f936:	881b      	ldrh	r3, [r3, #0]
 800f938:	b29b      	uxth	r3, r3
 800f93a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f93e:	2b00      	cmp	r3, #0
 800f940:	f000 80c6 	beq.w	800fad0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800f944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f948:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	673b      	str	r3, [r7, #112]	; 0x70
 800f950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	785b      	ldrb	r3, [r3, #1]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d177      	bne.n	800fa50 <USB_EPStartXfer+0xb18>
 800f960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f964:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	66bb      	str	r3, [r7, #104]	; 0x68
 800f96c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f970:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	461a      	mov	r2, r3
 800f97e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f980:	4413      	add	r3, r2
 800f982:	66bb      	str	r3, [r7, #104]	; 0x68
 800f984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	781b      	ldrb	r3, [r3, #0]
 800f990:	011a      	lsls	r2, r3, #4
 800f992:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f994:	4413      	add	r3, r2
 800f996:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800f99a:	667b      	str	r3, [r7, #100]	; 0x64
 800f99c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f99e:	881b      	ldrh	r3, [r3, #0]
 800f9a0:	b29b      	uxth	r3, r3
 800f9a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f9a6:	b29a      	uxth	r2, r3
 800f9a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9aa:	801a      	strh	r2, [r3, #0]
 800f9ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f9b0:	2b3e      	cmp	r3, #62	; 0x3e
 800f9b2:	d921      	bls.n	800f9f8 <USB_EPStartXfer+0xac0>
 800f9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f9b8:	095b      	lsrs	r3, r3, #5
 800f9ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f9be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f9c2:	f003 031f 	and.w	r3, r3, #31
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d104      	bne.n	800f9d4 <USB_EPStartXfer+0xa9c>
 800f9ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f9ce:	3b01      	subs	r3, #1
 800f9d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f9d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9d6:	881b      	ldrh	r3, [r3, #0]
 800f9d8:	b29a      	uxth	r2, r3
 800f9da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800f9de:	b29b      	uxth	r3, r3
 800f9e0:	029b      	lsls	r3, r3, #10
 800f9e2:	b29b      	uxth	r3, r3
 800f9e4:	4313      	orrs	r3, r2
 800f9e6:	b29b      	uxth	r3, r3
 800f9e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f9ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f9f0:	b29a      	uxth	r2, r3
 800f9f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f9f4:	801a      	strh	r2, [r3, #0]
 800f9f6:	e050      	b.n	800fa9a <USB_EPStartXfer+0xb62>
 800f9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d10a      	bne.n	800fa16 <USB_EPStartXfer+0xade>
 800fa00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa02:	881b      	ldrh	r3, [r3, #0]
 800fa04:	b29b      	uxth	r3, r3
 800fa06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fa0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fa0e:	b29a      	uxth	r2, r3
 800fa10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa12:	801a      	strh	r2, [r3, #0]
 800fa14:	e041      	b.n	800fa9a <USB_EPStartXfer+0xb62>
 800fa16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa1a:	085b      	lsrs	r3, r3, #1
 800fa1c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800fa20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa24:	f003 0301 	and.w	r3, r3, #1
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d004      	beq.n	800fa36 <USB_EPStartXfer+0xafe>
 800fa2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fa30:	3301      	adds	r3, #1
 800fa32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800fa36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa38:	881b      	ldrh	r3, [r3, #0]
 800fa3a:	b29a      	uxth	r2, r3
 800fa3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800fa40:	b29b      	uxth	r3, r3
 800fa42:	029b      	lsls	r3, r3, #10
 800fa44:	b29b      	uxth	r3, r3
 800fa46:	4313      	orrs	r3, r2
 800fa48:	b29a      	uxth	r2, r3
 800fa4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa4c:	801a      	strh	r2, [r3, #0]
 800fa4e:	e024      	b.n	800fa9a <USB_EPStartXfer+0xb62>
 800fa50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	785b      	ldrb	r3, [r3, #1]
 800fa5c:	2b01      	cmp	r3, #1
 800fa5e:	d11c      	bne.n	800fa9a <USB_EPStartXfer+0xb62>
 800fa60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fa6e:	b29b      	uxth	r3, r3
 800fa70:	461a      	mov	r2, r3
 800fa72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa74:	4413      	add	r3, r2
 800fa76:	673b      	str	r3, [r7, #112]	; 0x70
 800fa78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	781b      	ldrb	r3, [r3, #0]
 800fa84:	011a      	lsls	r2, r3, #4
 800fa86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa88:	4413      	add	r3, r2
 800fa8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800fa8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fa90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa94:	b29a      	uxth	r2, r3
 800fa96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa98:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800fa9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	895b      	ldrh	r3, [r3, #10]
 800faa6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800faaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	6959      	ldr	r1, [r3, #20]
 800fab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800faba:	b29b      	uxth	r3, r3
 800fabc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fac0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fac4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fac8:	6800      	ldr	r0, [r0, #0]
 800faca:	f000 ff24 	bl	8010916 <USB_WritePMA>
 800face:	e0ca      	b.n	800fc66 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800fad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	785b      	ldrb	r3, [r3, #1]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d177      	bne.n	800fbd0 <USB_EPStartXfer+0xc98>
 800fae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fae4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	67fb      	str	r3, [r7, #124]	; 0x7c
 800faec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fafa:	b29b      	uxth	r3, r3
 800fafc:	461a      	mov	r2, r3
 800fafe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fb00:	4413      	add	r3, r2
 800fb02:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fb04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fb08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	781b      	ldrb	r3, [r3, #0]
 800fb10:	011a      	lsls	r2, r3, #4
 800fb12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fb14:	4413      	add	r3, r2
 800fb16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fb1a:	67bb      	str	r3, [r7, #120]	; 0x78
 800fb1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb1e:	881b      	ldrh	r3, [r3, #0]
 800fb20:	b29b      	uxth	r3, r3
 800fb22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fb26:	b29a      	uxth	r2, r3
 800fb28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb2a:	801a      	strh	r2, [r3, #0]
 800fb2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb30:	2b3e      	cmp	r3, #62	; 0x3e
 800fb32:	d921      	bls.n	800fb78 <USB_EPStartXfer+0xc40>
 800fb34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb38:	095b      	lsrs	r3, r3, #5
 800fb3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fb3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb42:	f003 031f 	and.w	r3, r3, #31
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d104      	bne.n	800fb54 <USB_EPStartXfer+0xc1c>
 800fb4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fb4e:	3b01      	subs	r3, #1
 800fb50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fb54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb56:	881b      	ldrh	r3, [r3, #0]
 800fb58:	b29a      	uxth	r2, r3
 800fb5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fb5e:	b29b      	uxth	r3, r3
 800fb60:	029b      	lsls	r3, r3, #10
 800fb62:	b29b      	uxth	r3, r3
 800fb64:	4313      	orrs	r3, r2
 800fb66:	b29b      	uxth	r3, r3
 800fb68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fb6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fb70:	b29a      	uxth	r2, r3
 800fb72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb74:	801a      	strh	r2, [r3, #0]
 800fb76:	e05c      	b.n	800fc32 <USB_EPStartXfer+0xcfa>
 800fb78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d10a      	bne.n	800fb96 <USB_EPStartXfer+0xc5e>
 800fb80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb82:	881b      	ldrh	r3, [r3, #0]
 800fb84:	b29b      	uxth	r3, r3
 800fb86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fb8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fb8e:	b29a      	uxth	r2, r3
 800fb90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb92:	801a      	strh	r2, [r3, #0]
 800fb94:	e04d      	b.n	800fc32 <USB_EPStartXfer+0xcfa>
 800fb96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb9a:	085b      	lsrs	r3, r3, #1
 800fb9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fba4:	f003 0301 	and.w	r3, r3, #1
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d004      	beq.n	800fbb6 <USB_EPStartXfer+0xc7e>
 800fbac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fbb0:	3301      	adds	r3, #1
 800fbb2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fbb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fbb8:	881b      	ldrh	r3, [r3, #0]
 800fbba:	b29a      	uxth	r2, r3
 800fbbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fbc0:	b29b      	uxth	r3, r3
 800fbc2:	029b      	lsls	r3, r3, #10
 800fbc4:	b29b      	uxth	r3, r3
 800fbc6:	4313      	orrs	r3, r2
 800fbc8:	b29a      	uxth	r2, r3
 800fbca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fbcc:	801a      	strh	r2, [r3, #0]
 800fbce:	e030      	b.n	800fc32 <USB_EPStartXfer+0xcfa>
 800fbd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	785b      	ldrb	r3, [r3, #1]
 800fbdc:	2b01      	cmp	r3, #1
 800fbde:	d128      	bne.n	800fc32 <USB_EPStartXfer+0xcfa>
 800fbe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbe4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fbee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fbfc:	b29b      	uxth	r3, r3
 800fbfe:	461a      	mov	r2, r3
 800fc00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fc04:	4413      	add	r3, r2
 800fc06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fc0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	781b      	ldrb	r3, [r3, #0]
 800fc16:	011a      	lsls	r2, r3, #4
 800fc18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fc1c:	4413      	add	r3, r2
 800fc1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fc22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fc26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc2a:	b29a      	uxth	r2, r3
 800fc2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fc30:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800fc32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	891b      	ldrh	r3, [r3, #8]
 800fc3e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fc42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	6959      	ldr	r1, [r3, #20]
 800fc4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc52:	b29b      	uxth	r3, r3
 800fc54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fc58:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fc5c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fc60:	6800      	ldr	r0, [r0, #0]
 800fc62:	f000 fe58 	bl	8010916 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800fc66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fc6e:	681a      	ldr	r2, [r3, #0]
 800fc70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	009b      	lsls	r3, r3, #2
 800fc7e:	4413      	add	r3, r2
 800fc80:	881b      	ldrh	r3, [r3, #0]
 800fc82:	b29b      	uxth	r3, r3
 800fc84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc8c:	817b      	strh	r3, [r7, #10]
 800fc8e:	897b      	ldrh	r3, [r7, #10]
 800fc90:	f083 0310 	eor.w	r3, r3, #16
 800fc94:	817b      	strh	r3, [r7, #10]
 800fc96:	897b      	ldrh	r3, [r7, #10]
 800fc98:	f083 0320 	eor.w	r3, r3, #32
 800fc9c:	817b      	strh	r3, [r7, #10]
 800fc9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fca2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fca6:	681a      	ldr	r2, [r3, #0]
 800fca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	009b      	lsls	r3, r3, #2
 800fcb6:	441a      	add	r2, r3
 800fcb8:	897b      	ldrh	r3, [r7, #10]
 800fcba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fcbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fcc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fcc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	8013      	strh	r3, [r2, #0]
 800fcce:	f000 bcde 	b.w	801068e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800fcd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	7b1b      	ldrb	r3, [r3, #12]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	f040 80bb 	bne.w	800fe5a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800fce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	699a      	ldr	r2, [r3, #24]
 800fcf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	691b      	ldr	r3, [r3, #16]
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d917      	bls.n	800fd30 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800fd00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	691b      	ldr	r3, [r3, #16]
 800fd0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800fd10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	699a      	ldr	r2, [r3, #24]
 800fd1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd20:	1ad2      	subs	r2, r2, r3
 800fd22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	619a      	str	r2, [r3, #24]
 800fd2e:	e00e      	b.n	800fd4e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800fd30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	699b      	ldr	r3, [r3, #24]
 800fd3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800fd40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800fd4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fd5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fd6a:	b29b      	uxth	r3, r3
 800fd6c:	461a      	mov	r2, r3
 800fd6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fd72:	4413      	add	r3, r2
 800fd74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fd78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fd7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	781b      	ldrb	r3, [r3, #0]
 800fd84:	011a      	lsls	r2, r3, #4
 800fd86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fd8a:	4413      	add	r3, r2
 800fd8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800fd90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fd94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd98:	881b      	ldrh	r3, [r3, #0]
 800fd9a:	b29b      	uxth	r3, r3
 800fd9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fda0:	b29a      	uxth	r2, r3
 800fda2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fda6:	801a      	strh	r2, [r3, #0]
 800fda8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdac:	2b3e      	cmp	r3, #62	; 0x3e
 800fdae:	d924      	bls.n	800fdfa <USB_EPStartXfer+0xec2>
 800fdb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdb4:	095b      	lsrs	r3, r3, #5
 800fdb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fdba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdbe:	f003 031f 	and.w	r3, r3, #31
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d104      	bne.n	800fdd0 <USB_EPStartXfer+0xe98>
 800fdc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fdca:	3b01      	subs	r3, #1
 800fdcc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fdd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fdd4:	881b      	ldrh	r3, [r3, #0]
 800fdd6:	b29a      	uxth	r2, r3
 800fdd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fddc:	b29b      	uxth	r3, r3
 800fdde:	029b      	lsls	r3, r3, #10
 800fde0:	b29b      	uxth	r3, r3
 800fde2:	4313      	orrs	r3, r2
 800fde4:	b29b      	uxth	r3, r3
 800fde6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fdea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fdee:	b29a      	uxth	r2, r3
 800fdf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fdf4:	801a      	strh	r2, [r3, #0]
 800fdf6:	f000 bc10 	b.w	801061a <USB_EPStartXfer+0x16e2>
 800fdfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d10c      	bne.n	800fe1c <USB_EPStartXfer+0xee4>
 800fe02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe06:	881b      	ldrh	r3, [r3, #0]
 800fe08:	b29b      	uxth	r3, r3
 800fe0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fe0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fe12:	b29a      	uxth	r2, r3
 800fe14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe18:	801a      	strh	r2, [r3, #0]
 800fe1a:	e3fe      	b.n	801061a <USB_EPStartXfer+0x16e2>
 800fe1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe20:	085b      	lsrs	r3, r3, #1
 800fe22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fe26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe2a:	f003 0301 	and.w	r3, r3, #1
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d004      	beq.n	800fe3c <USB_EPStartXfer+0xf04>
 800fe32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fe36:	3301      	adds	r3, #1
 800fe38:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fe3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe40:	881b      	ldrh	r3, [r3, #0]
 800fe42:	b29a      	uxth	r2, r3
 800fe44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fe48:	b29b      	uxth	r3, r3
 800fe4a:	029b      	lsls	r3, r3, #10
 800fe4c:	b29b      	uxth	r3, r3
 800fe4e:	4313      	orrs	r3, r2
 800fe50:	b29a      	uxth	r2, r3
 800fe52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe56:	801a      	strh	r2, [r3, #0]
 800fe58:	e3df      	b.n	801061a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800fe5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	78db      	ldrb	r3, [r3, #3]
 800fe66:	2b02      	cmp	r3, #2
 800fe68:	f040 8218 	bne.w	801029c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800fe6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	785b      	ldrb	r3, [r3, #1]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	f040 809d 	bne.w	800ffb8 <USB_EPStartXfer+0x1080>
 800fe7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fe8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fe9a:	b29b      	uxth	r3, r3
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fea2:	4413      	add	r3, r2
 800fea4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800feac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	011a      	lsls	r2, r3, #4
 800feb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800feba:	4413      	add	r3, r2
 800febc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fec0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800fec4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fec8:	881b      	ldrh	r3, [r3, #0]
 800feca:	b29b      	uxth	r3, r3
 800fecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fed0:	b29a      	uxth	r2, r3
 800fed2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fed6:	801a      	strh	r2, [r3, #0]
 800fed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fedc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	691b      	ldr	r3, [r3, #16]
 800fee4:	2b3e      	cmp	r3, #62	; 0x3e
 800fee6:	d92b      	bls.n	800ff40 <USB_EPStartXfer+0x1008>
 800fee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800feec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	691b      	ldr	r3, [r3, #16]
 800fef4:	095b      	lsrs	r3, r3, #5
 800fef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800fefa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fefe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	691b      	ldr	r3, [r3, #16]
 800ff06:	f003 031f 	and.w	r3, r3, #31
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d104      	bne.n	800ff18 <USB_EPStartXfer+0xfe0>
 800ff0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff12:	3b01      	subs	r3, #1
 800ff14:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ff18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ff1c:	881b      	ldrh	r3, [r3, #0]
 800ff1e:	b29a      	uxth	r2, r3
 800ff20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff24:	b29b      	uxth	r3, r3
 800ff26:	029b      	lsls	r3, r3, #10
 800ff28:	b29b      	uxth	r3, r3
 800ff2a:	4313      	orrs	r3, r2
 800ff2c:	b29b      	uxth	r3, r3
 800ff2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ff32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ff36:	b29a      	uxth	r2, r3
 800ff38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ff3c:	801a      	strh	r2, [r3, #0]
 800ff3e:	e070      	b.n	8010022 <USB_EPStartXfer+0x10ea>
 800ff40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	691b      	ldr	r3, [r3, #16]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d10c      	bne.n	800ff6a <USB_EPStartXfer+0x1032>
 800ff50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ff54:	881b      	ldrh	r3, [r3, #0]
 800ff56:	b29b      	uxth	r3, r3
 800ff58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ff5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ff60:	b29a      	uxth	r2, r3
 800ff62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ff66:	801a      	strh	r2, [r3, #0]
 800ff68:	e05b      	b.n	8010022 <USB_EPStartXfer+0x10ea>
 800ff6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	691b      	ldr	r3, [r3, #16]
 800ff76:	085b      	lsrs	r3, r3, #1
 800ff78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ff7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	691b      	ldr	r3, [r3, #16]
 800ff88:	f003 0301 	and.w	r3, r3, #1
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d004      	beq.n	800ff9a <USB_EPStartXfer+0x1062>
 800ff90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ff94:	3301      	adds	r3, #1
 800ff96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ff9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ff9e:	881b      	ldrh	r3, [r3, #0]
 800ffa0:	b29a      	uxth	r2, r3
 800ffa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ffa6:	b29b      	uxth	r3, r3
 800ffa8:	029b      	lsls	r3, r3, #10
 800ffaa:	b29b      	uxth	r3, r3
 800ffac:	4313      	orrs	r3, r2
 800ffae:	b29a      	uxth	r2, r3
 800ffb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ffb4:	801a      	strh	r2, [r3, #0]
 800ffb6:	e034      	b.n	8010022 <USB_EPStartXfer+0x10ea>
 800ffb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	785b      	ldrb	r3, [r3, #1]
 800ffc4:	2b01      	cmp	r3, #1
 800ffc6:	d12c      	bne.n	8010022 <USB_EPStartXfer+0x10ea>
 800ffc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ffd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ffe4:	b29b      	uxth	r3, r3
 800ffe6:	461a      	mov	r2, r3
 800ffe8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ffec:	4413      	add	r3, r2
 800ffee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	011a      	lsls	r2, r3, #4
 8010000:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010004:	4413      	add	r3, r2
 8010006:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801000a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801000e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010012:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	691b      	ldr	r3, [r3, #16]
 801001a:	b29a      	uxth	r2, r3
 801001c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010020:	801a      	strh	r2, [r3, #0]
 8010022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010026:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	785b      	ldrb	r3, [r3, #1]
 801003c:	2b00      	cmp	r3, #0
 801003e:	f040 809d 	bne.w	801017c <USB_EPStartXfer+0x1244>
 8010042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010046:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010054:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801005e:	b29b      	uxth	r3, r3
 8010060:	461a      	mov	r2, r3
 8010062:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010066:	4413      	add	r3, r2
 8010068:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801006c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	781b      	ldrb	r3, [r3, #0]
 8010078:	011a      	lsls	r2, r3, #4
 801007a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801007e:	4413      	add	r3, r2
 8010080:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8010084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010088:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801008c:	881b      	ldrh	r3, [r3, #0]
 801008e:	b29b      	uxth	r3, r3
 8010090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010094:	b29a      	uxth	r2, r3
 8010096:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801009a:	801a      	strh	r2, [r3, #0]
 801009c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	691b      	ldr	r3, [r3, #16]
 80100a8:	2b3e      	cmp	r3, #62	; 0x3e
 80100aa:	d92b      	bls.n	8010104 <USB_EPStartXfer+0x11cc>
 80100ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	691b      	ldr	r3, [r3, #16]
 80100b8:	095b      	lsrs	r3, r3, #5
 80100ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80100be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80100c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	691b      	ldr	r3, [r3, #16]
 80100ca:	f003 031f 	and.w	r3, r3, #31
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d104      	bne.n	80100dc <USB_EPStartXfer+0x11a4>
 80100d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80100d6:	3b01      	subs	r3, #1
 80100d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80100dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80100e0:	881b      	ldrh	r3, [r3, #0]
 80100e2:	b29a      	uxth	r2, r3
 80100e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80100e8:	b29b      	uxth	r3, r3
 80100ea:	029b      	lsls	r3, r3, #10
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	4313      	orrs	r3, r2
 80100f0:	b29b      	uxth	r3, r3
 80100f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80100f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80100fa:	b29a      	uxth	r2, r3
 80100fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010100:	801a      	strh	r2, [r3, #0]
 8010102:	e069      	b.n	80101d8 <USB_EPStartXfer+0x12a0>
 8010104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	691b      	ldr	r3, [r3, #16]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d10c      	bne.n	801012e <USB_EPStartXfer+0x11f6>
 8010114:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010118:	881b      	ldrh	r3, [r3, #0]
 801011a:	b29b      	uxth	r3, r3
 801011c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010124:	b29a      	uxth	r2, r3
 8010126:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801012a:	801a      	strh	r2, [r3, #0]
 801012c:	e054      	b.n	80101d8 <USB_EPStartXfer+0x12a0>
 801012e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	691b      	ldr	r3, [r3, #16]
 801013a:	085b      	lsrs	r3, r3, #1
 801013c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	691b      	ldr	r3, [r3, #16]
 801014c:	f003 0301 	and.w	r3, r3, #1
 8010150:	2b00      	cmp	r3, #0
 8010152:	d004      	beq.n	801015e <USB_EPStartXfer+0x1226>
 8010154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010158:	3301      	adds	r3, #1
 801015a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801015e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010162:	881b      	ldrh	r3, [r3, #0]
 8010164:	b29a      	uxth	r2, r3
 8010166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801016a:	b29b      	uxth	r3, r3
 801016c:	029b      	lsls	r3, r3, #10
 801016e:	b29b      	uxth	r3, r3
 8010170:	4313      	orrs	r3, r2
 8010172:	b29a      	uxth	r2, r3
 8010174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010178:	801a      	strh	r2, [r3, #0]
 801017a:	e02d      	b.n	80101d8 <USB_EPStartXfer+0x12a0>
 801017c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	785b      	ldrb	r3, [r3, #1]
 8010188:	2b01      	cmp	r3, #1
 801018a:	d125      	bne.n	80101d8 <USB_EPStartXfer+0x12a0>
 801018c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010190:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801019a:	b29b      	uxth	r3, r3
 801019c:	461a      	mov	r2, r3
 801019e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80101a2:	4413      	add	r3, r2
 80101a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80101a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	781b      	ldrb	r3, [r3, #0]
 80101b4:	011a      	lsls	r2, r3, #4
 80101b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80101ba:	4413      	add	r3, r2
 80101bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80101c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80101c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	691b      	ldr	r3, [r3, #16]
 80101d0:	b29a      	uxth	r2, r3
 80101d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80101d6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80101d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	69db      	ldr	r3, [r3, #28]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	f000 8218 	beq.w	801061a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80101ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80101f2:	681a      	ldr	r2, [r3, #0]
 80101f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	781b      	ldrb	r3, [r3, #0]
 8010200:	009b      	lsls	r3, r3, #2
 8010202:	4413      	add	r3, r2
 8010204:	881b      	ldrh	r3, [r3, #0]
 8010206:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801020a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801020e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010212:	2b00      	cmp	r3, #0
 8010214:	d005      	beq.n	8010222 <USB_EPStartXfer+0x12ea>
 8010216:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801021a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801021e:	2b00      	cmp	r3, #0
 8010220:	d10d      	bne.n	801023e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010222:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801022a:	2b00      	cmp	r3, #0
 801022c:	f040 81f5 	bne.w	801061a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010230:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010238:	2b00      	cmp	r3, #0
 801023a:	f040 81ee 	bne.w	801061a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801023e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010242:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010246:	681a      	ldr	r2, [r3, #0]
 8010248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801024c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	781b      	ldrb	r3, [r3, #0]
 8010254:	009b      	lsls	r3, r3, #2
 8010256:	4413      	add	r3, r2
 8010258:	881b      	ldrh	r3, [r3, #0]
 801025a:	b29b      	uxth	r3, r3
 801025c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010264:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8010268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801026c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010270:	681a      	ldr	r2, [r3, #0]
 8010272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	781b      	ldrb	r3, [r3, #0]
 801027e:	009b      	lsls	r3, r3, #2
 8010280:	441a      	add	r2, r3
 8010282:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8010286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801028a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801028e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010292:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010296:	b29b      	uxth	r3, r3
 8010298:	8013      	strh	r3, [r2, #0]
 801029a:	e1be      	b.n	801061a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801029c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	78db      	ldrb	r3, [r3, #3]
 80102a8:	2b01      	cmp	r3, #1
 80102aa:	f040 81b4 	bne.w	8010616 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80102ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	699a      	ldr	r2, [r3, #24]
 80102ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	691b      	ldr	r3, [r3, #16]
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d917      	bls.n	80102fa <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80102ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	691b      	ldr	r3, [r3, #16]
 80102d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80102da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	699a      	ldr	r2, [r3, #24]
 80102e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80102ea:	1ad2      	subs	r2, r2, r3
 80102ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	619a      	str	r2, [r3, #24]
 80102f8:	e00e      	b.n	8010318 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80102fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	699b      	ldr	r3, [r3, #24]
 8010306:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 801030a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801030e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	2200      	movs	r2, #0
 8010316:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8010318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801031c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	785b      	ldrb	r3, [r3, #1]
 8010324:	2b00      	cmp	r3, #0
 8010326:	f040 8085 	bne.w	8010434 <USB_EPStartXfer+0x14fc>
 801032a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801032e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801033c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010346:	b29b      	uxth	r3, r3
 8010348:	461a      	mov	r2, r3
 801034a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801034e:	4413      	add	r3, r2
 8010350:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	011a      	lsls	r2, r3, #4
 8010362:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010366:	4413      	add	r3, r2
 8010368:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801036c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010370:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010374:	881b      	ldrh	r3, [r3, #0]
 8010376:	b29b      	uxth	r3, r3
 8010378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801037c:	b29a      	uxth	r2, r3
 801037e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010382:	801a      	strh	r2, [r3, #0]
 8010384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010388:	2b3e      	cmp	r3, #62	; 0x3e
 801038a:	d923      	bls.n	80103d4 <USB_EPStartXfer+0x149c>
 801038c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010390:	095b      	lsrs	r3, r3, #5
 8010392:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801039a:	f003 031f 	and.w	r3, r3, #31
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d104      	bne.n	80103ac <USB_EPStartXfer+0x1474>
 80103a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80103a6:	3b01      	subs	r3, #1
 80103a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80103ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80103b0:	881b      	ldrh	r3, [r3, #0]
 80103b2:	b29a      	uxth	r2, r3
 80103b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80103b8:	b29b      	uxth	r3, r3
 80103ba:	029b      	lsls	r3, r3, #10
 80103bc:	b29b      	uxth	r3, r3
 80103be:	4313      	orrs	r3, r2
 80103c0:	b29b      	uxth	r3, r3
 80103c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80103c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80103ca:	b29a      	uxth	r2, r3
 80103cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80103d0:	801a      	strh	r2, [r3, #0]
 80103d2:	e060      	b.n	8010496 <USB_EPStartXfer+0x155e>
 80103d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d10c      	bne.n	80103f6 <USB_EPStartXfer+0x14be>
 80103dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80103e0:	881b      	ldrh	r3, [r3, #0]
 80103e2:	b29b      	uxth	r3, r3
 80103e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80103e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80103ec:	b29a      	uxth	r2, r3
 80103ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80103f2:	801a      	strh	r2, [r3, #0]
 80103f4:	e04f      	b.n	8010496 <USB_EPStartXfer+0x155e>
 80103f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103fa:	085b      	lsrs	r3, r3, #1
 80103fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010404:	f003 0301 	and.w	r3, r3, #1
 8010408:	2b00      	cmp	r3, #0
 801040a:	d004      	beq.n	8010416 <USB_EPStartXfer+0x14de>
 801040c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010410:	3301      	adds	r3, #1
 8010412:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010416:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801041a:	881b      	ldrh	r3, [r3, #0]
 801041c:	b29a      	uxth	r2, r3
 801041e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010422:	b29b      	uxth	r3, r3
 8010424:	029b      	lsls	r3, r3, #10
 8010426:	b29b      	uxth	r3, r3
 8010428:	4313      	orrs	r3, r2
 801042a:	b29a      	uxth	r2, r3
 801042c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010430:	801a      	strh	r2, [r3, #0]
 8010432:	e030      	b.n	8010496 <USB_EPStartXfer+0x155e>
 8010434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	785b      	ldrb	r3, [r3, #1]
 8010440:	2b01      	cmp	r3, #1
 8010442:	d128      	bne.n	8010496 <USB_EPStartXfer+0x155e>
 8010444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010448:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010456:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010460:	b29b      	uxth	r3, r3
 8010462:	461a      	mov	r2, r3
 8010464:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010468:	4413      	add	r3, r2
 801046a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801046e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	781b      	ldrb	r3, [r3, #0]
 801047a:	011a      	lsls	r2, r3, #4
 801047c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010480:	4413      	add	r3, r2
 8010482:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010486:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801048a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801048e:	b29a      	uxth	r2, r3
 8010490:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010494:	801a      	strh	r2, [r3, #0]
 8010496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801049a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80104a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	785b      	ldrb	r3, [r3, #1]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	f040 8085 	bne.w	80105c0 <USB_EPStartXfer+0x1688>
 80104b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80104c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80104d2:	b29b      	uxth	r3, r3
 80104d4:	461a      	mov	r2, r3
 80104d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80104da:	4413      	add	r3, r2
 80104dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80104e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	781b      	ldrb	r3, [r3, #0]
 80104ec:	011a      	lsls	r2, r3, #4
 80104ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80104f2:	4413      	add	r3, r2
 80104f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80104f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80104fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010500:	881b      	ldrh	r3, [r3, #0]
 8010502:	b29b      	uxth	r3, r3
 8010504:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010508:	b29a      	uxth	r2, r3
 801050a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801050e:	801a      	strh	r2, [r3, #0]
 8010510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010514:	2b3e      	cmp	r3, #62	; 0x3e
 8010516:	d923      	bls.n	8010560 <USB_EPStartXfer+0x1628>
 8010518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801051c:	095b      	lsrs	r3, r3, #5
 801051e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010526:	f003 031f 	and.w	r3, r3, #31
 801052a:	2b00      	cmp	r3, #0
 801052c:	d104      	bne.n	8010538 <USB_EPStartXfer+0x1600>
 801052e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010532:	3b01      	subs	r3, #1
 8010534:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010538:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801053c:	881b      	ldrh	r3, [r3, #0]
 801053e:	b29a      	uxth	r2, r3
 8010540:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010544:	b29b      	uxth	r3, r3
 8010546:	029b      	lsls	r3, r3, #10
 8010548:	b29b      	uxth	r3, r3
 801054a:	4313      	orrs	r3, r2
 801054c:	b29b      	uxth	r3, r3
 801054e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010556:	b29a      	uxth	r2, r3
 8010558:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801055c:	801a      	strh	r2, [r3, #0]
 801055e:	e05c      	b.n	801061a <USB_EPStartXfer+0x16e2>
 8010560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010564:	2b00      	cmp	r3, #0
 8010566:	d10c      	bne.n	8010582 <USB_EPStartXfer+0x164a>
 8010568:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801056c:	881b      	ldrh	r3, [r3, #0]
 801056e:	b29b      	uxth	r3, r3
 8010570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010578:	b29a      	uxth	r2, r3
 801057a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801057e:	801a      	strh	r2, [r3, #0]
 8010580:	e04b      	b.n	801061a <USB_EPStartXfer+0x16e2>
 8010582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010586:	085b      	lsrs	r3, r3, #1
 8010588:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801058c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010590:	f003 0301 	and.w	r3, r3, #1
 8010594:	2b00      	cmp	r3, #0
 8010596:	d004      	beq.n	80105a2 <USB_EPStartXfer+0x166a>
 8010598:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801059c:	3301      	adds	r3, #1
 801059e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80105a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80105a6:	881b      	ldrh	r3, [r3, #0]
 80105a8:	b29a      	uxth	r2, r3
 80105aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80105ae:	b29b      	uxth	r3, r3
 80105b0:	029b      	lsls	r3, r3, #10
 80105b2:	b29b      	uxth	r3, r3
 80105b4:	4313      	orrs	r3, r2
 80105b6:	b29a      	uxth	r2, r3
 80105b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80105bc:	801a      	strh	r2, [r3, #0]
 80105be:	e02c      	b.n	801061a <USB_EPStartXfer+0x16e2>
 80105c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	785b      	ldrb	r3, [r3, #1]
 80105cc:	2b01      	cmp	r3, #1
 80105ce:	d124      	bne.n	801061a <USB_EPStartXfer+0x16e2>
 80105d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80105de:	b29b      	uxth	r3, r3
 80105e0:	461a      	mov	r2, r3
 80105e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80105e6:	4413      	add	r3, r2
 80105e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80105ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	011a      	lsls	r2, r3, #4
 80105fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80105fe:	4413      	add	r3, r2
 8010600:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8010604:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801060c:	b29a      	uxth	r2, r3
 801060e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010612:	801a      	strh	r2, [r3, #0]
 8010614:	e001      	b.n	801061a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8010616:	2301      	movs	r3, #1
 8010618:	e03a      	b.n	8010690 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801061a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801061e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010622:	681a      	ldr	r2, [r3, #0]
 8010624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	781b      	ldrb	r3, [r3, #0]
 8010630:	009b      	lsls	r3, r3, #2
 8010632:	4413      	add	r3, r2
 8010634:	881b      	ldrh	r3, [r3, #0]
 8010636:	b29b      	uxth	r3, r3
 8010638:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801063c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010640:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8010644:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010648:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801064c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8010650:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010654:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010658:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801065c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010660:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010664:	681a      	ldr	r2, [r3, #0]
 8010666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801066a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	781b      	ldrb	r3, [r3, #0]
 8010672:	009b      	lsls	r3, r3, #2
 8010674:	441a      	add	r2, r3
 8010676:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801067a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801067e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801068a:	b29b      	uxth	r3, r3
 801068c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801068e:	2300      	movs	r3, #0
}
 8010690:	4618      	mov	r0, r3
 8010692:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}

0801069a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801069a:	b480      	push	{r7}
 801069c:	b085      	sub	sp, #20
 801069e:	af00      	add	r7, sp, #0
 80106a0:	6078      	str	r0, [r7, #4]
 80106a2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	785b      	ldrb	r3, [r3, #1]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d020      	beq.n	80106ee <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80106ac:	687a      	ldr	r2, [r7, #4]
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	009b      	lsls	r3, r3, #2
 80106b4:	4413      	add	r3, r2
 80106b6:	881b      	ldrh	r3, [r3, #0]
 80106b8:	b29b      	uxth	r3, r3
 80106ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80106be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80106c2:	81bb      	strh	r3, [r7, #12]
 80106c4:	89bb      	ldrh	r3, [r7, #12]
 80106c6:	f083 0310 	eor.w	r3, r3, #16
 80106ca:	81bb      	strh	r3, [r7, #12]
 80106cc:	687a      	ldr	r2, [r7, #4]
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	781b      	ldrb	r3, [r3, #0]
 80106d2:	009b      	lsls	r3, r3, #2
 80106d4:	441a      	add	r2, r3
 80106d6:	89bb      	ldrh	r3, [r7, #12]
 80106d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80106dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80106e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80106e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106e8:	b29b      	uxth	r3, r3
 80106ea:	8013      	strh	r3, [r2, #0]
 80106ec:	e01f      	b.n	801072e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80106ee:	687a      	ldr	r2, [r7, #4]
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	781b      	ldrb	r3, [r3, #0]
 80106f4:	009b      	lsls	r3, r3, #2
 80106f6:	4413      	add	r3, r2
 80106f8:	881b      	ldrh	r3, [r3, #0]
 80106fa:	b29b      	uxth	r3, r3
 80106fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010704:	81fb      	strh	r3, [r7, #14]
 8010706:	89fb      	ldrh	r3, [r7, #14]
 8010708:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801070c:	81fb      	strh	r3, [r7, #14]
 801070e:	687a      	ldr	r2, [r7, #4]
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	781b      	ldrb	r3, [r3, #0]
 8010714:	009b      	lsls	r3, r3, #2
 8010716:	441a      	add	r2, r3
 8010718:	89fb      	ldrh	r3, [r7, #14]
 801071a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801071e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801072a:	b29b      	uxth	r3, r3
 801072c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801072e:	2300      	movs	r3, #0
}
 8010730:	4618      	mov	r0, r3
 8010732:	3714      	adds	r7, #20
 8010734:	46bd      	mov	sp, r7
 8010736:	bc80      	pop	{r7}
 8010738:	4770      	bx	lr

0801073a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801073a:	b480      	push	{r7}
 801073c:	b087      	sub	sp, #28
 801073e:	af00      	add	r7, sp, #0
 8010740:	6078      	str	r0, [r7, #4]
 8010742:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	7b1b      	ldrb	r3, [r3, #12]
 8010748:	2b00      	cmp	r3, #0
 801074a:	f040 809d 	bne.w	8010888 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	785b      	ldrb	r3, [r3, #1]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d04c      	beq.n	80107f0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010756:	687a      	ldr	r2, [r7, #4]
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	009b      	lsls	r3, r3, #2
 801075e:	4413      	add	r3, r2
 8010760:	881b      	ldrh	r3, [r3, #0]
 8010762:	823b      	strh	r3, [r7, #16]
 8010764:	8a3b      	ldrh	r3, [r7, #16]
 8010766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801076a:	2b00      	cmp	r3, #0
 801076c:	d01b      	beq.n	80107a6 <USB_EPClearStall+0x6c>
 801076e:	687a      	ldr	r2, [r7, #4]
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	781b      	ldrb	r3, [r3, #0]
 8010774:	009b      	lsls	r3, r3, #2
 8010776:	4413      	add	r3, r2
 8010778:	881b      	ldrh	r3, [r3, #0]
 801077a:	b29b      	uxth	r3, r3
 801077c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010784:	81fb      	strh	r3, [r7, #14]
 8010786:	687a      	ldr	r2, [r7, #4]
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	781b      	ldrb	r3, [r3, #0]
 801078c:	009b      	lsls	r3, r3, #2
 801078e:	441a      	add	r2, r3
 8010790:	89fb      	ldrh	r3, [r7, #14]
 8010792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801079a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801079e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80107a2:	b29b      	uxth	r3, r3
 80107a4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	78db      	ldrb	r3, [r3, #3]
 80107aa:	2b01      	cmp	r3, #1
 80107ac:	d06c      	beq.n	8010888 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80107ae:	687a      	ldr	r2, [r7, #4]
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	781b      	ldrb	r3, [r3, #0]
 80107b4:	009b      	lsls	r3, r3, #2
 80107b6:	4413      	add	r3, r2
 80107b8:	881b      	ldrh	r3, [r3, #0]
 80107ba:	b29b      	uxth	r3, r3
 80107bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80107c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107c4:	81bb      	strh	r3, [r7, #12]
 80107c6:	89bb      	ldrh	r3, [r7, #12]
 80107c8:	f083 0320 	eor.w	r3, r3, #32
 80107cc:	81bb      	strh	r3, [r7, #12]
 80107ce:	687a      	ldr	r2, [r7, #4]
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	781b      	ldrb	r3, [r3, #0]
 80107d4:	009b      	lsls	r3, r3, #2
 80107d6:	441a      	add	r2, r3
 80107d8:	89bb      	ldrh	r3, [r7, #12]
 80107da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80107de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80107e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80107e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107ea:	b29b      	uxth	r3, r3
 80107ec:	8013      	strh	r3, [r2, #0]
 80107ee:	e04b      	b.n	8010888 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80107f0:	687a      	ldr	r2, [r7, #4]
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	781b      	ldrb	r3, [r3, #0]
 80107f6:	009b      	lsls	r3, r3, #2
 80107f8:	4413      	add	r3, r2
 80107fa:	881b      	ldrh	r3, [r3, #0]
 80107fc:	82fb      	strh	r3, [r7, #22]
 80107fe:	8afb      	ldrh	r3, [r7, #22]
 8010800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010804:	2b00      	cmp	r3, #0
 8010806:	d01b      	beq.n	8010840 <USB_EPClearStall+0x106>
 8010808:	687a      	ldr	r2, [r7, #4]
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	781b      	ldrb	r3, [r3, #0]
 801080e:	009b      	lsls	r3, r3, #2
 8010810:	4413      	add	r3, r2
 8010812:	881b      	ldrh	r3, [r3, #0]
 8010814:	b29b      	uxth	r3, r3
 8010816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801081a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801081e:	82bb      	strh	r3, [r7, #20]
 8010820:	687a      	ldr	r2, [r7, #4]
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	781b      	ldrb	r3, [r3, #0]
 8010826:	009b      	lsls	r3, r3, #2
 8010828:	441a      	add	r2, r3
 801082a:	8abb      	ldrh	r3, [r7, #20]
 801082c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010834:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801083c:	b29b      	uxth	r3, r3
 801083e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010840:	687a      	ldr	r2, [r7, #4]
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	781b      	ldrb	r3, [r3, #0]
 8010846:	009b      	lsls	r3, r3, #2
 8010848:	4413      	add	r3, r2
 801084a:	881b      	ldrh	r3, [r3, #0]
 801084c:	b29b      	uxth	r3, r3
 801084e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010856:	827b      	strh	r3, [r7, #18]
 8010858:	8a7b      	ldrh	r3, [r7, #18]
 801085a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801085e:	827b      	strh	r3, [r7, #18]
 8010860:	8a7b      	ldrh	r3, [r7, #18]
 8010862:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010866:	827b      	strh	r3, [r7, #18]
 8010868:	687a      	ldr	r2, [r7, #4]
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	781b      	ldrb	r3, [r3, #0]
 801086e:	009b      	lsls	r3, r3, #2
 8010870:	441a      	add	r2, r3
 8010872:	8a7b      	ldrh	r3, [r7, #18]
 8010874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801087c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010884:	b29b      	uxth	r3, r3
 8010886:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8010888:	2300      	movs	r3, #0
}
 801088a:	4618      	mov	r0, r3
 801088c:	371c      	adds	r7, #28
 801088e:	46bd      	mov	sp, r7
 8010890:	bc80      	pop	{r7}
 8010892:	4770      	bx	lr

08010894 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8010894:	b480      	push	{r7}
 8010896:	b083      	sub	sp, #12
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
 801089c:	460b      	mov	r3, r1
 801089e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80108a0:	78fb      	ldrb	r3, [r7, #3]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d103      	bne.n	80108ae <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	2280      	movs	r2, #128	; 0x80
 80108aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80108ae:	2300      	movs	r3, #0
}
 80108b0:	4618      	mov	r0, r3
 80108b2:	370c      	adds	r7, #12
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bc80      	pop	{r7}
 80108b8:	4770      	bx	lr

080108ba <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80108ba:	b480      	push	{r7}
 80108bc:	b083      	sub	sp, #12
 80108be:	af00      	add	r7, sp, #0
 80108c0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80108c2:	2300      	movs	r3, #0
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	370c      	adds	r7, #12
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bc80      	pop	{r7}
 80108cc:	4770      	bx	lr

080108ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80108ce:	b480      	push	{r7}
 80108d0:	b083      	sub	sp, #12
 80108d2:	af00      	add	r7, sp, #0
 80108d4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80108d6:	2300      	movs	r3, #0
}
 80108d8:	4618      	mov	r0, r3
 80108da:	370c      	adds	r7, #12
 80108dc:	46bd      	mov	sp, r7
 80108de:	bc80      	pop	{r7}
 80108e0:	4770      	bx	lr

080108e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80108e2:	b480      	push	{r7}
 80108e4:	b085      	sub	sp, #20
 80108e6:	af00      	add	r7, sp, #0
 80108e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80108f0:	b29b      	uxth	r3, r3
 80108f2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80108f4:	68fb      	ldr	r3, [r7, #12]
}
 80108f6:	4618      	mov	r0, r3
 80108f8:	3714      	adds	r7, #20
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bc80      	pop	{r7}
 80108fe:	4770      	bx	lr

08010900 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8010900:	b480      	push	{r7}
 8010902:	b083      	sub	sp, #12
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
 8010908:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 801090a:	2300      	movs	r3, #0
}
 801090c:	4618      	mov	r0, r3
 801090e:	370c      	adds	r7, #12
 8010910:	46bd      	mov	sp, r7
 8010912:	bc80      	pop	{r7}
 8010914:	4770      	bx	lr

08010916 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8010916:	b480      	push	{r7}
 8010918:	b08b      	sub	sp, #44	; 0x2c
 801091a:	af00      	add	r7, sp, #0
 801091c:	60f8      	str	r0, [r7, #12]
 801091e:	60b9      	str	r1, [r7, #8]
 8010920:	4611      	mov	r1, r2
 8010922:	461a      	mov	r2, r3
 8010924:	460b      	mov	r3, r1
 8010926:	80fb      	strh	r3, [r7, #6]
 8010928:	4613      	mov	r3, r2
 801092a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 801092c:	88bb      	ldrh	r3, [r7, #4]
 801092e:	3301      	adds	r3, #1
 8010930:	085b      	lsrs	r3, r3, #1
 8010932:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801093c:	88fb      	ldrh	r3, [r7, #6]
 801093e:	005a      	lsls	r2, r3, #1
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	4413      	add	r3, r2
 8010944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010948:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801094a:	69bb      	ldr	r3, [r7, #24]
 801094c:	627b      	str	r3, [r7, #36]	; 0x24
 801094e:	e01e      	b.n	801098e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8010950:	69fb      	ldr	r3, [r7, #28]
 8010952:	781b      	ldrb	r3, [r3, #0]
 8010954:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8010956:	69fb      	ldr	r3, [r7, #28]
 8010958:	3301      	adds	r3, #1
 801095a:	781b      	ldrb	r3, [r3, #0]
 801095c:	021b      	lsls	r3, r3, #8
 801095e:	b21a      	sxth	r2, r3
 8010960:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010964:	4313      	orrs	r3, r2
 8010966:	b21b      	sxth	r3, r3
 8010968:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 801096a:	6a3b      	ldr	r3, [r7, #32]
 801096c:	8a7a      	ldrh	r2, [r7, #18]
 801096e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8010970:	6a3b      	ldr	r3, [r7, #32]
 8010972:	3302      	adds	r3, #2
 8010974:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8010976:	6a3b      	ldr	r3, [r7, #32]
 8010978:	3302      	adds	r3, #2
 801097a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 801097c:	69fb      	ldr	r3, [r7, #28]
 801097e:	3301      	adds	r3, #1
 8010980:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8010982:	69fb      	ldr	r3, [r7, #28]
 8010984:	3301      	adds	r3, #1
 8010986:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8010988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801098a:	3b01      	subs	r3, #1
 801098c:	627b      	str	r3, [r7, #36]	; 0x24
 801098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010990:	2b00      	cmp	r3, #0
 8010992:	d1dd      	bne.n	8010950 <USB_WritePMA+0x3a>
  }
}
 8010994:	bf00      	nop
 8010996:	bf00      	nop
 8010998:	372c      	adds	r7, #44	; 0x2c
 801099a:	46bd      	mov	sp, r7
 801099c:	bc80      	pop	{r7}
 801099e:	4770      	bx	lr

080109a0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80109a0:	b480      	push	{r7}
 80109a2:	b08b      	sub	sp, #44	; 0x2c
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	60f8      	str	r0, [r7, #12]
 80109a8:	60b9      	str	r1, [r7, #8]
 80109aa:	4611      	mov	r1, r2
 80109ac:	461a      	mov	r2, r3
 80109ae:	460b      	mov	r3, r1
 80109b0:	80fb      	strh	r3, [r7, #6]
 80109b2:	4613      	mov	r3, r2
 80109b4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80109b6:	88bb      	ldrh	r3, [r7, #4]
 80109b8:	085b      	lsrs	r3, r3, #1
 80109ba:	b29b      	uxth	r3, r3
 80109bc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80109c2:	68bb      	ldr	r3, [r7, #8]
 80109c4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80109c6:	88fb      	ldrh	r3, [r7, #6]
 80109c8:	005a      	lsls	r2, r3, #1
 80109ca:	697b      	ldr	r3, [r7, #20]
 80109cc:	4413      	add	r3, r2
 80109ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80109d2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80109d4:	69bb      	ldr	r3, [r7, #24]
 80109d6:	627b      	str	r3, [r7, #36]	; 0x24
 80109d8:	e01b      	b.n	8010a12 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80109da:	6a3b      	ldr	r3, [r7, #32]
 80109dc:	881b      	ldrh	r3, [r3, #0]
 80109de:	b29b      	uxth	r3, r3
 80109e0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80109e2:	6a3b      	ldr	r3, [r7, #32]
 80109e4:	3302      	adds	r3, #2
 80109e6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80109e8:	693b      	ldr	r3, [r7, #16]
 80109ea:	b2da      	uxtb	r2, r3
 80109ec:	69fb      	ldr	r3, [r7, #28]
 80109ee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80109f0:	69fb      	ldr	r3, [r7, #28]
 80109f2:	3301      	adds	r3, #1
 80109f4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80109f6:	693b      	ldr	r3, [r7, #16]
 80109f8:	0a1b      	lsrs	r3, r3, #8
 80109fa:	b2da      	uxtb	r2, r3
 80109fc:	69fb      	ldr	r3, [r7, #28]
 80109fe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8010a00:	69fb      	ldr	r3, [r7, #28]
 8010a02:	3301      	adds	r3, #1
 8010a04:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8010a06:	6a3b      	ldr	r3, [r7, #32]
 8010a08:	3302      	adds	r3, #2
 8010a0a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8010a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a0e:	3b01      	subs	r3, #1
 8010a10:	627b      	str	r3, [r7, #36]	; 0x24
 8010a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d1e0      	bne.n	80109da <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8010a18:	88bb      	ldrh	r3, [r7, #4]
 8010a1a:	f003 0301 	and.w	r3, r3, #1
 8010a1e:	b29b      	uxth	r3, r3
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d007      	beq.n	8010a34 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8010a24:	6a3b      	ldr	r3, [r7, #32]
 8010a26:	881b      	ldrh	r3, [r3, #0]
 8010a28:	b29b      	uxth	r3, r3
 8010a2a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8010a2c:	693b      	ldr	r3, [r7, #16]
 8010a2e:	b2da      	uxtb	r2, r3
 8010a30:	69fb      	ldr	r3, [r7, #28]
 8010a32:	701a      	strb	r2, [r3, #0]
  }
}
 8010a34:	bf00      	nop
 8010a36:	372c      	adds	r7, #44	; 0x2c
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bc80      	pop	{r7}
 8010a3c:	4770      	bx	lr

08010a3e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010a3e:	b580      	push	{r7, lr}
 8010a40:	b084      	sub	sp, #16
 8010a42:	af00      	add	r7, sp, #0
 8010a44:	6078      	str	r0, [r7, #4]
 8010a46:	460b      	mov	r3, r1
 8010a48:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	7c1b      	ldrb	r3, [r3, #16]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d115      	bne.n	8010a82 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010a56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010a5a:	2202      	movs	r2, #2
 8010a5c:	2181      	movs	r1, #129	; 0x81
 8010a5e:	6878      	ldr	r0, [r7, #4]
 8010a60:	f001 fecb 	bl	80127fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	2201      	movs	r2, #1
 8010a68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010a6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010a6e:	2202      	movs	r2, #2
 8010a70:	2101      	movs	r1, #1
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	f001 fec1 	bl	80127fa <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2201      	movs	r2, #1
 8010a7c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8010a80:	e012      	b.n	8010aa8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8010a82:	2340      	movs	r3, #64	; 0x40
 8010a84:	2202      	movs	r2, #2
 8010a86:	2181      	movs	r1, #129	; 0x81
 8010a88:	6878      	ldr	r0, [r7, #4]
 8010a8a:	f001 feb6 	bl	80127fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	2201      	movs	r2, #1
 8010a92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8010a94:	2340      	movs	r3, #64	; 0x40
 8010a96:	2202      	movs	r2, #2
 8010a98:	2101      	movs	r1, #1
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f001 fead 	bl	80127fa <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2201      	movs	r2, #1
 8010aa4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010aa8:	2308      	movs	r3, #8
 8010aaa:	2203      	movs	r2, #3
 8010aac:	2182      	movs	r1, #130	; 0x82
 8010aae:	6878      	ldr	r0, [r7, #4]
 8010ab0:	f001 fea3 	bl	80127fa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2201      	movs	r2, #1
 8010ab8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010aba:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010abe:	f001 ffc3 	bl	8012a48 <USBD_static_malloc>
 8010ac2:	4602      	mov	r2, r0
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d102      	bne.n	8010ada <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	73fb      	strb	r3, [r7, #15]
 8010ad8:	e026      	b.n	8010b28 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ae0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	2200      	movs	r2, #0
 8010af0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8010af4:	68bb      	ldr	r3, [r7, #8]
 8010af6:	2200      	movs	r2, #0
 8010af8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	7c1b      	ldrb	r3, [r3, #16]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d109      	bne.n	8010b18 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b0e:	2101      	movs	r1, #1
 8010b10:	6878      	ldr	r0, [r7, #4]
 8010b12:	f001 ff63 	bl	80129dc <USBD_LL_PrepareReceive>
 8010b16:	e007      	b.n	8010b28 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010b1e:	2340      	movs	r3, #64	; 0x40
 8010b20:	2101      	movs	r1, #1
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f001 ff5a 	bl	80129dc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8010b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	3710      	adds	r7, #16
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}

08010b32 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010b32:	b580      	push	{r7, lr}
 8010b34:	b084      	sub	sp, #16
 8010b36:	af00      	add	r7, sp, #0
 8010b38:	6078      	str	r0, [r7, #4]
 8010b3a:	460b      	mov	r3, r1
 8010b3c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8010b42:	2181      	movs	r1, #129	; 0x81
 8010b44:	6878      	ldr	r0, [r7, #4]
 8010b46:	f001 fe7e 	bl	8012846 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8010b50:	2101      	movs	r1, #1
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f001 fe77 	bl	8012846 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8010b60:	2182      	movs	r1, #130	; 0x82
 8010b62:	6878      	ldr	r0, [r7, #4]
 8010b64:	f001 fe6f 	bl	8012846 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d00e      	beq.n	8010b96 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b7e:	685b      	ldr	r3, [r3, #4]
 8010b80:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010b88:	4618      	mov	r0, r3
 8010b8a:	f001 ff69 	bl	8012a60 <USBD_static_free>
    pdev->pClassData = NULL;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	2200      	movs	r2, #0
 8010b92:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8010b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b98:	4618      	mov	r0, r3
 8010b9a:	3710      	adds	r7, #16
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bd80      	pop	{r7, pc}

08010ba0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b086      	sub	sp, #24
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
 8010ba8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010bb0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8010bba:	2300      	movs	r3, #0
 8010bbc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	781b      	ldrb	r3, [r3, #0]
 8010bc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d039      	beq.n	8010c3e <USBD_CDC_Setup+0x9e>
 8010bca:	2b20      	cmp	r3, #32
 8010bcc:	d17f      	bne.n	8010cce <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	88db      	ldrh	r3, [r3, #6]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d029      	beq.n	8010c2a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	781b      	ldrb	r3, [r3, #0]
 8010bda:	b25b      	sxtb	r3, r3
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	da11      	bge.n	8010c04 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010be6:	689b      	ldr	r3, [r3, #8]
 8010be8:	683a      	ldr	r2, [r7, #0]
 8010bea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8010bec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010bee:	683a      	ldr	r2, [r7, #0]
 8010bf0:	88d2      	ldrh	r2, [r2, #6]
 8010bf2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8010bf4:	6939      	ldr	r1, [r7, #16]
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	88db      	ldrh	r3, [r3, #6]
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	6878      	ldr	r0, [r7, #4]
 8010bfe:	f001 fa0a 	bl	8012016 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8010c02:	e06b      	b.n	8010cdc <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	785a      	ldrb	r2, [r3, #1]
 8010c08:	693b      	ldr	r3, [r7, #16]
 8010c0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8010c0e:	683b      	ldr	r3, [r7, #0]
 8010c10:	88db      	ldrh	r3, [r3, #6]
 8010c12:	b2da      	uxtb	r2, r3
 8010c14:	693b      	ldr	r3, [r7, #16]
 8010c16:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8010c1a:	6939      	ldr	r1, [r7, #16]
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	88db      	ldrh	r3, [r3, #6]
 8010c20:	461a      	mov	r2, r3
 8010c22:	6878      	ldr	r0, [r7, #4]
 8010c24:	f001 fa25 	bl	8012072 <USBD_CtlPrepareRx>
      break;
 8010c28:	e058      	b.n	8010cdc <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010c30:	689b      	ldr	r3, [r3, #8]
 8010c32:	683a      	ldr	r2, [r7, #0]
 8010c34:	7850      	ldrb	r0, [r2, #1]
 8010c36:	2200      	movs	r2, #0
 8010c38:	6839      	ldr	r1, [r7, #0]
 8010c3a:	4798      	blx	r3
      break;
 8010c3c:	e04e      	b.n	8010cdc <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	785b      	ldrb	r3, [r3, #1]
 8010c42:	2b0b      	cmp	r3, #11
 8010c44:	d02e      	beq.n	8010ca4 <USBD_CDC_Setup+0x104>
 8010c46:	2b0b      	cmp	r3, #11
 8010c48:	dc38      	bgt.n	8010cbc <USBD_CDC_Setup+0x11c>
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d002      	beq.n	8010c54 <USBD_CDC_Setup+0xb4>
 8010c4e:	2b0a      	cmp	r3, #10
 8010c50:	d014      	beq.n	8010c7c <USBD_CDC_Setup+0xdc>
 8010c52:	e033      	b.n	8010cbc <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c5a:	2b03      	cmp	r3, #3
 8010c5c:	d107      	bne.n	8010c6e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8010c5e:	f107 030c 	add.w	r3, r7, #12
 8010c62:	2202      	movs	r2, #2
 8010c64:	4619      	mov	r1, r3
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f001 f9d5 	bl	8012016 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010c6c:	e02e      	b.n	8010ccc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8010c6e:	6839      	ldr	r1, [r7, #0]
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f001 f966 	bl	8011f42 <USBD_CtlError>
            ret = USBD_FAIL;
 8010c76:	2302      	movs	r3, #2
 8010c78:	75fb      	strb	r3, [r7, #23]
          break;
 8010c7a:	e027      	b.n	8010ccc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010c82:	2b03      	cmp	r3, #3
 8010c84:	d107      	bne.n	8010c96 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8010c86:	f107 030f 	add.w	r3, r7, #15
 8010c8a:	2201      	movs	r2, #1
 8010c8c:	4619      	mov	r1, r3
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f001 f9c1 	bl	8012016 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010c94:	e01a      	b.n	8010ccc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8010c96:	6839      	ldr	r1, [r7, #0]
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f001 f952 	bl	8011f42 <USBD_CtlError>
            ret = USBD_FAIL;
 8010c9e:	2302      	movs	r3, #2
 8010ca0:	75fb      	strb	r3, [r7, #23]
          break;
 8010ca2:	e013      	b.n	8010ccc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010caa:	2b03      	cmp	r3, #3
 8010cac:	d00d      	beq.n	8010cca <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8010cae:	6839      	ldr	r1, [r7, #0]
 8010cb0:	6878      	ldr	r0, [r7, #4]
 8010cb2:	f001 f946 	bl	8011f42 <USBD_CtlError>
            ret = USBD_FAIL;
 8010cb6:	2302      	movs	r3, #2
 8010cb8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010cba:	e006      	b.n	8010cca <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8010cbc:	6839      	ldr	r1, [r7, #0]
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f001 f93f 	bl	8011f42 <USBD_CtlError>
          ret = USBD_FAIL;
 8010cc4:	2302      	movs	r3, #2
 8010cc6:	75fb      	strb	r3, [r7, #23]
          break;
 8010cc8:	e000      	b.n	8010ccc <USBD_CDC_Setup+0x12c>
          break;
 8010cca:	bf00      	nop
      }
      break;
 8010ccc:	e006      	b.n	8010cdc <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8010cce:	6839      	ldr	r1, [r7, #0]
 8010cd0:	6878      	ldr	r0, [r7, #4]
 8010cd2:	f001 f936 	bl	8011f42 <USBD_CtlError>
      ret = USBD_FAIL;
 8010cd6:	2302      	movs	r3, #2
 8010cd8:	75fb      	strb	r3, [r7, #23]
      break;
 8010cda:	bf00      	nop
  }

  return ret;
 8010cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	3718      	adds	r7, #24
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}

08010ce6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010ce6:	b580      	push	{r7, lr}
 8010ce8:	b084      	sub	sp, #16
 8010cea:	af00      	add	r7, sp, #0
 8010cec:	6078      	str	r0, [r7, #4]
 8010cee:	460b      	mov	r3, r1
 8010cf0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cf8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010d00:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d03a      	beq.n	8010d82 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8010d0c:	78fa      	ldrb	r2, [r7, #3]
 8010d0e:	6879      	ldr	r1, [r7, #4]
 8010d10:	4613      	mov	r3, r2
 8010d12:	009b      	lsls	r3, r3, #2
 8010d14:	4413      	add	r3, r2
 8010d16:	009b      	lsls	r3, r3, #2
 8010d18:	440b      	add	r3, r1
 8010d1a:	331c      	adds	r3, #28
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d029      	beq.n	8010d76 <USBD_CDC_DataIn+0x90>
 8010d22:	78fa      	ldrb	r2, [r7, #3]
 8010d24:	6879      	ldr	r1, [r7, #4]
 8010d26:	4613      	mov	r3, r2
 8010d28:	009b      	lsls	r3, r3, #2
 8010d2a:	4413      	add	r3, r2
 8010d2c:	009b      	lsls	r3, r3, #2
 8010d2e:	440b      	add	r3, r1
 8010d30:	331c      	adds	r3, #28
 8010d32:	681a      	ldr	r2, [r3, #0]
 8010d34:	78f9      	ldrb	r1, [r7, #3]
 8010d36:	68b8      	ldr	r0, [r7, #8]
 8010d38:	460b      	mov	r3, r1
 8010d3a:	009b      	lsls	r3, r3, #2
 8010d3c:	440b      	add	r3, r1
 8010d3e:	00db      	lsls	r3, r3, #3
 8010d40:	4403      	add	r3, r0
 8010d42:	3338      	adds	r3, #56	; 0x38
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	fbb2 f1f3 	udiv	r1, r2, r3
 8010d4a:	fb01 f303 	mul.w	r3, r1, r3
 8010d4e:	1ad3      	subs	r3, r2, r3
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d110      	bne.n	8010d76 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8010d54:	78fa      	ldrb	r2, [r7, #3]
 8010d56:	6879      	ldr	r1, [r7, #4]
 8010d58:	4613      	mov	r3, r2
 8010d5a:	009b      	lsls	r3, r3, #2
 8010d5c:	4413      	add	r3, r2
 8010d5e:	009b      	lsls	r3, r3, #2
 8010d60:	440b      	add	r3, r1
 8010d62:	331c      	adds	r3, #28
 8010d64:	2200      	movs	r2, #0
 8010d66:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010d68:	78f9      	ldrb	r1, [r7, #3]
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f001 fe11 	bl	8012996 <USBD_LL_Transmit>
 8010d74:	e003      	b.n	8010d7e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	2200      	movs	r2, #0
 8010d7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8010d7e:	2300      	movs	r3, #0
 8010d80:	e000      	b.n	8010d84 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8010d82:	2302      	movs	r3, #2
  }
}
 8010d84:	4618      	mov	r0, r3
 8010d86:	3710      	adds	r7, #16
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd80      	pop	{r7, pc}

08010d8c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b084      	sub	sp, #16
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
 8010d94:	460b      	mov	r3, r1
 8010d96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010d9e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010da0:	78fb      	ldrb	r3, [r7, #3]
 8010da2:	4619      	mov	r1, r3
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f001 fe3c 	bl	8012a22 <USBD_LL_GetRxDataSize>
 8010daa:	4602      	mov	r2, r0
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d00d      	beq.n	8010dd8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010dc2:	68db      	ldr	r3, [r3, #12]
 8010dc4:	68fa      	ldr	r2, [r7, #12]
 8010dc6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010dca:	68fa      	ldr	r2, [r7, #12]
 8010dcc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010dd0:	4611      	mov	r1, r2
 8010dd2:	4798      	blx	r3

    return USBD_OK;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	e000      	b.n	8010dda <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8010dd8:	2302      	movs	r3, #2
  }
}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	3710      	adds	r7, #16
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bd80      	pop	{r7, pc}

08010de2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010de2:	b580      	push	{r7, lr}
 8010de4:	b084      	sub	sp, #16
 8010de6:	af00      	add	r7, sp, #0
 8010de8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010df0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d015      	beq.n	8010e28 <USBD_CDC_EP0_RxReady+0x46>
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010e02:	2bff      	cmp	r3, #255	; 0xff
 8010e04:	d010      	beq.n	8010e28 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e0c:	689b      	ldr	r3, [r3, #8]
 8010e0e:	68fa      	ldr	r2, [r7, #12]
 8010e10:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8010e14:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8010e16:	68fa      	ldr	r2, [r7, #12]
 8010e18:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010e1c:	b292      	uxth	r2, r2
 8010e1e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	22ff      	movs	r2, #255	; 0xff
 8010e24:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8010e28:	2300      	movs	r3, #0
}
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	3710      	adds	r7, #16
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	bd80      	pop	{r7, pc}
	...

08010e34 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010e34:	b480      	push	{r7}
 8010e36:	b083      	sub	sp, #12
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2243      	movs	r2, #67	; 0x43
 8010e40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8010e42:	4b03      	ldr	r3, [pc, #12]	; (8010e50 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	370c      	adds	r7, #12
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bc80      	pop	{r7}
 8010e4c:	4770      	bx	lr
 8010e4e:	bf00      	nop
 8010e50:	20000720 	.word	0x20000720

08010e54 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010e54:	b480      	push	{r7}
 8010e56:	b083      	sub	sp, #12
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2243      	movs	r2, #67	; 0x43
 8010e60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8010e62:	4b03      	ldr	r3, [pc, #12]	; (8010e70 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010e64:	4618      	mov	r0, r3
 8010e66:	370c      	adds	r7, #12
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bc80      	pop	{r7}
 8010e6c:	4770      	bx	lr
 8010e6e:	bf00      	nop
 8010e70:	200006dc 	.word	0x200006dc

08010e74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010e74:	b480      	push	{r7}
 8010e76:	b083      	sub	sp, #12
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2243      	movs	r2, #67	; 0x43
 8010e80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8010e82:	4b03      	ldr	r3, [pc, #12]	; (8010e90 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010e84:	4618      	mov	r0, r3
 8010e86:	370c      	adds	r7, #12
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bc80      	pop	{r7}
 8010e8c:	4770      	bx	lr
 8010e8e:	bf00      	nop
 8010e90:	20000764 	.word	0x20000764

08010e94 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010e94:	b480      	push	{r7}
 8010e96:	b083      	sub	sp, #12
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	220a      	movs	r2, #10
 8010ea0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8010ea2:	4b03      	ldr	r3, [pc, #12]	; (8010eb0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	370c      	adds	r7, #12
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bc80      	pop	{r7}
 8010eac:	4770      	bx	lr
 8010eae:	bf00      	nop
 8010eb0:	20000698 	.word	0x20000698

08010eb4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8010eb4:	b480      	push	{r7}
 8010eb6:	b085      	sub	sp, #20
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
 8010ebc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8010ebe:	2302      	movs	r3, #2
 8010ec0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d005      	beq.n	8010ed4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	683a      	ldr	r2, [r7, #0]
 8010ecc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	3714      	adds	r7, #20
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bc80      	pop	{r7}
 8010ede:	4770      	bx	lr

08010ee0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8010ee0:	b480      	push	{r7}
 8010ee2:	b087      	sub	sp, #28
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	60f8      	str	r0, [r7, #12]
 8010ee8:	60b9      	str	r1, [r7, #8]
 8010eea:	4613      	mov	r3, r2
 8010eec:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ef4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	68ba      	ldr	r2, [r7, #8]
 8010efa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010efe:	88fa      	ldrh	r2, [r7, #6]
 8010f00:	697b      	ldr	r3, [r7, #20]
 8010f02:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8010f06:	2300      	movs	r3, #0
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	371c      	adds	r7, #28
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bc80      	pop	{r7}
 8010f10:	4770      	bx	lr

08010f12 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8010f12:	b480      	push	{r7}
 8010f14:	b085      	sub	sp, #20
 8010f16:	af00      	add	r7, sp, #0
 8010f18:	6078      	str	r0, [r7, #4]
 8010f1a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f22:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	683a      	ldr	r2, [r7, #0]
 8010f28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8010f2c:	2300      	movs	r3, #0
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	3714      	adds	r7, #20
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bc80      	pop	{r7}
 8010f36:	4770      	bx	lr

08010f38 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b084      	sub	sp, #16
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d01c      	beq.n	8010f8c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d115      	bne.n	8010f88 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	2201      	movs	r2, #1
 8010f60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8010f7a:	b29b      	uxth	r3, r3
 8010f7c:	2181      	movs	r1, #129	; 0x81
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f001 fd09 	bl	8012996 <USBD_LL_Transmit>

      return USBD_OK;
 8010f84:	2300      	movs	r3, #0
 8010f86:	e002      	b.n	8010f8e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8010f88:	2301      	movs	r3, #1
 8010f8a:	e000      	b.n	8010f8e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8010f8c:	2302      	movs	r3, #2
  }
}
 8010f8e:	4618      	mov	r0, r3
 8010f90:	3710      	adds	r7, #16
 8010f92:	46bd      	mov	sp, r7
 8010f94:	bd80      	pop	{r7, pc}

08010f96 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010f96:	b580      	push	{r7, lr}
 8010f98:	b084      	sub	sp, #16
 8010f9a:	af00      	add	r7, sp, #0
 8010f9c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fa4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d017      	beq.n	8010fe0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	7c1b      	ldrb	r3, [r3, #16]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d109      	bne.n	8010fcc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010fbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010fc2:	2101      	movs	r1, #1
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f001 fd09 	bl	80129dc <USBD_LL_PrepareReceive>
 8010fca:	e007      	b.n	8010fdc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010fd2:	2340      	movs	r3, #64	; 0x40
 8010fd4:	2101      	movs	r1, #1
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f001 fd00 	bl	80129dc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8010fdc:	2300      	movs	r3, #0
 8010fde:	e000      	b.n	8010fe2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8010fe0:	2302      	movs	r3, #2
  }
}
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	3710      	adds	r7, #16
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd80      	pop	{r7, pc}

08010fea <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010fea:	b580      	push	{r7, lr}
 8010fec:	b084      	sub	sp, #16
 8010fee:	af00      	add	r7, sp, #0
 8010ff0:	60f8      	str	r0, [r7, #12]
 8010ff2:	60b9      	str	r1, [r7, #8]
 8010ff4:	4613      	mov	r3, r2
 8010ff6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d101      	bne.n	8011002 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010ffe:	2302      	movs	r3, #2
 8011000:	e01a      	b.n	8011038 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011008:	2b00      	cmp	r3, #0
 801100a:	d003      	beq.n	8011014 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	2200      	movs	r2, #0
 8011010:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011014:	68bb      	ldr	r3, [r7, #8]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d003      	beq.n	8011022 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	68ba      	ldr	r2, [r7, #8]
 801101e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	2201      	movs	r2, #1
 8011026:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	79fa      	ldrb	r2, [r7, #7]
 801102e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8011030:	68f8      	ldr	r0, [r7, #12]
 8011032:	f001 fb6d 	bl	8012710 <USBD_LL_Init>

  return USBD_OK;
 8011036:	2300      	movs	r3, #0
}
 8011038:	4618      	mov	r0, r3
 801103a:	3710      	adds	r7, #16
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}

08011040 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011040:	b480      	push	{r7}
 8011042:	b085      	sub	sp, #20
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
 8011048:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801104a:	2300      	movs	r3, #0
 801104c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d006      	beq.n	8011062 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	683a      	ldr	r2, [r7, #0]
 8011058:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 801105c:	2300      	movs	r3, #0
 801105e:	73fb      	strb	r3, [r7, #15]
 8011060:	e001      	b.n	8011066 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8011062:	2302      	movs	r3, #2
 8011064:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011066:	7bfb      	ldrb	r3, [r7, #15]
}
 8011068:	4618      	mov	r0, r3
 801106a:	3714      	adds	r7, #20
 801106c:	46bd      	mov	sp, r7
 801106e:	bc80      	pop	{r7}
 8011070:	4770      	bx	lr

08011072 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011072:	b580      	push	{r7, lr}
 8011074:	b082      	sub	sp, #8
 8011076:	af00      	add	r7, sp, #0
 8011078:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f001 fba2 	bl	80127c4 <USBD_LL_Start>

  return USBD_OK;
 8011080:	2300      	movs	r3, #0
}
 8011082:	4618      	mov	r0, r3
 8011084:	3708      	adds	r7, #8
 8011086:	46bd      	mov	sp, r7
 8011088:	bd80      	pop	{r7, pc}

0801108a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801108a:	b480      	push	{r7}
 801108c:	b083      	sub	sp, #12
 801108e:	af00      	add	r7, sp, #0
 8011090:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011092:	2300      	movs	r3, #0
}
 8011094:	4618      	mov	r0, r3
 8011096:	370c      	adds	r7, #12
 8011098:	46bd      	mov	sp, r7
 801109a:	bc80      	pop	{r7}
 801109c:	4770      	bx	lr

0801109e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801109e:	b580      	push	{r7, lr}
 80110a0:	b084      	sub	sp, #16
 80110a2:	af00      	add	r7, sp, #0
 80110a4:	6078      	str	r0, [r7, #4]
 80110a6:	460b      	mov	r3, r1
 80110a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80110aa:	2302      	movs	r3, #2
 80110ac:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d00c      	beq.n	80110d2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	78fa      	ldrb	r2, [r7, #3]
 80110c2:	4611      	mov	r1, r2
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	4798      	blx	r3
 80110c8:	4603      	mov	r3, r0
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d101      	bne.n	80110d2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80110ce:	2300      	movs	r3, #0
 80110d0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80110d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80110d4:	4618      	mov	r0, r3
 80110d6:	3710      	adds	r7, #16
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}

080110dc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b082      	sub	sp, #8
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	460b      	mov	r3, r1
 80110e6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80110ee:	685b      	ldr	r3, [r3, #4]
 80110f0:	78fa      	ldrb	r2, [r7, #3]
 80110f2:	4611      	mov	r1, r2
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	4798      	blx	r3

  return USBD_OK;
 80110f8:	2300      	movs	r3, #0
}
 80110fa:	4618      	mov	r0, r3
 80110fc:	3708      	adds	r7, #8
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}

08011102 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011102:	b580      	push	{r7, lr}
 8011104:	b082      	sub	sp, #8
 8011106:	af00      	add	r7, sp, #0
 8011108:	6078      	str	r0, [r7, #4]
 801110a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011112:	6839      	ldr	r1, [r7, #0]
 8011114:	4618      	mov	r0, r3
 8011116:	f000 fed8 	bl	8011eca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	2201      	movs	r2, #1
 801111e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011128:	461a      	mov	r2, r3
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8011136:	f003 031f 	and.w	r3, r3, #31
 801113a:	2b02      	cmp	r3, #2
 801113c:	d016      	beq.n	801116c <USBD_LL_SetupStage+0x6a>
 801113e:	2b02      	cmp	r3, #2
 8011140:	d81c      	bhi.n	801117c <USBD_LL_SetupStage+0x7a>
 8011142:	2b00      	cmp	r3, #0
 8011144:	d002      	beq.n	801114c <USBD_LL_SetupStage+0x4a>
 8011146:	2b01      	cmp	r3, #1
 8011148:	d008      	beq.n	801115c <USBD_LL_SetupStage+0x5a>
 801114a:	e017      	b.n	801117c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011152:	4619      	mov	r1, r3
 8011154:	6878      	ldr	r0, [r7, #4]
 8011156:	f000 f9cb 	bl	80114f0 <USBD_StdDevReq>
      break;
 801115a:	e01a      	b.n	8011192 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011162:	4619      	mov	r1, r3
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f000 fa2d 	bl	80115c4 <USBD_StdItfReq>
      break;
 801116a:	e012      	b.n	8011192 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8011172:	4619      	mov	r1, r3
 8011174:	6878      	ldr	r0, [r7, #4]
 8011176:	f000 fa6d 	bl	8011654 <USBD_StdEPReq>
      break;
 801117a:	e00a      	b.n	8011192 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8011182:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011186:	b2db      	uxtb	r3, r3
 8011188:	4619      	mov	r1, r3
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f001 fb7a 	bl	8012884 <USBD_LL_StallEP>
      break;
 8011190:	bf00      	nop
  }

  return USBD_OK;
 8011192:	2300      	movs	r3, #0
}
 8011194:	4618      	mov	r0, r3
 8011196:	3708      	adds	r7, #8
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}

0801119c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b086      	sub	sp, #24
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	60f8      	str	r0, [r7, #12]
 80111a4:	460b      	mov	r3, r1
 80111a6:	607a      	str	r2, [r7, #4]
 80111a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80111aa:	7afb      	ldrb	r3, [r7, #11]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d14b      	bne.n	8011248 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80111b6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80111be:	2b03      	cmp	r3, #3
 80111c0:	d134      	bne.n	801122c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80111c2:	697b      	ldr	r3, [r7, #20]
 80111c4:	68da      	ldr	r2, [r3, #12]
 80111c6:	697b      	ldr	r3, [r7, #20]
 80111c8:	691b      	ldr	r3, [r3, #16]
 80111ca:	429a      	cmp	r2, r3
 80111cc:	d919      	bls.n	8011202 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	68da      	ldr	r2, [r3, #12]
 80111d2:	697b      	ldr	r3, [r7, #20]
 80111d4:	691b      	ldr	r3, [r3, #16]
 80111d6:	1ad2      	subs	r2, r2, r3
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80111dc:	697b      	ldr	r3, [r7, #20]
 80111de:	68da      	ldr	r2, [r3, #12]
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80111e4:	429a      	cmp	r2, r3
 80111e6:	d203      	bcs.n	80111f0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80111e8:	697b      	ldr	r3, [r7, #20]
 80111ea:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80111ec:	b29b      	uxth	r3, r3
 80111ee:	e002      	b.n	80111f6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80111f0:	697b      	ldr	r3, [r7, #20]
 80111f2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80111f4:	b29b      	uxth	r3, r3
 80111f6:	461a      	mov	r2, r3
 80111f8:	6879      	ldr	r1, [r7, #4]
 80111fa:	68f8      	ldr	r0, [r7, #12]
 80111fc:	f000 ff57 	bl	80120ae <USBD_CtlContinueRx>
 8011200:	e038      	b.n	8011274 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011208:	691b      	ldr	r3, [r3, #16]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d00a      	beq.n	8011224 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011214:	2b03      	cmp	r3, #3
 8011216:	d105      	bne.n	8011224 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801121e:	691b      	ldr	r3, [r3, #16]
 8011220:	68f8      	ldr	r0, [r7, #12]
 8011222:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8011224:	68f8      	ldr	r0, [r7, #12]
 8011226:	f000 ff54 	bl	80120d2 <USBD_CtlSendStatus>
 801122a:	e023      	b.n	8011274 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011232:	2b05      	cmp	r3, #5
 8011234:	d11e      	bne.n	8011274 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	2200      	movs	r2, #0
 801123a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 801123e:	2100      	movs	r1, #0
 8011240:	68f8      	ldr	r0, [r7, #12]
 8011242:	f001 fb1f 	bl	8012884 <USBD_LL_StallEP>
 8011246:	e015      	b.n	8011274 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801124e:	699b      	ldr	r3, [r3, #24]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d00d      	beq.n	8011270 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 801125a:	2b03      	cmp	r3, #3
 801125c:	d108      	bne.n	8011270 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011264:	699b      	ldr	r3, [r3, #24]
 8011266:	7afa      	ldrb	r2, [r7, #11]
 8011268:	4611      	mov	r1, r2
 801126a:	68f8      	ldr	r0, [r7, #12]
 801126c:	4798      	blx	r3
 801126e:	e001      	b.n	8011274 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011270:	2302      	movs	r3, #2
 8011272:	e000      	b.n	8011276 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8011274:	2300      	movs	r3, #0
}
 8011276:	4618      	mov	r0, r3
 8011278:	3718      	adds	r7, #24
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}

0801127e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801127e:	b580      	push	{r7, lr}
 8011280:	b086      	sub	sp, #24
 8011282:	af00      	add	r7, sp, #0
 8011284:	60f8      	str	r0, [r7, #12]
 8011286:	460b      	mov	r3, r1
 8011288:	607a      	str	r2, [r7, #4]
 801128a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801128c:	7afb      	ldrb	r3, [r7, #11]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d17f      	bne.n	8011392 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	3314      	adds	r3, #20
 8011296:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801129e:	2b02      	cmp	r3, #2
 80112a0:	d15c      	bne.n	801135c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80112a2:	697b      	ldr	r3, [r7, #20]
 80112a4:	68da      	ldr	r2, [r3, #12]
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	691b      	ldr	r3, [r3, #16]
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d915      	bls.n	80112da <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80112ae:	697b      	ldr	r3, [r7, #20]
 80112b0:	68da      	ldr	r2, [r3, #12]
 80112b2:	697b      	ldr	r3, [r7, #20]
 80112b4:	691b      	ldr	r3, [r3, #16]
 80112b6:	1ad2      	subs	r2, r2, r3
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80112bc:	697b      	ldr	r3, [r7, #20]
 80112be:	68db      	ldr	r3, [r3, #12]
 80112c0:	b29b      	uxth	r3, r3
 80112c2:	461a      	mov	r2, r3
 80112c4:	6879      	ldr	r1, [r7, #4]
 80112c6:	68f8      	ldr	r0, [r7, #12]
 80112c8:	f000 fec1 	bl	801204e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80112cc:	2300      	movs	r3, #0
 80112ce:	2200      	movs	r2, #0
 80112d0:	2100      	movs	r1, #0
 80112d2:	68f8      	ldr	r0, [r7, #12]
 80112d4:	f001 fb82 	bl	80129dc <USBD_LL_PrepareReceive>
 80112d8:	e04e      	b.n	8011378 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80112da:	697b      	ldr	r3, [r7, #20]
 80112dc:	689b      	ldr	r3, [r3, #8]
 80112de:	697a      	ldr	r2, [r7, #20]
 80112e0:	6912      	ldr	r2, [r2, #16]
 80112e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80112e6:	fb01 f202 	mul.w	r2, r1, r2
 80112ea:	1a9b      	subs	r3, r3, r2
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d11c      	bne.n	801132a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80112f0:	697b      	ldr	r3, [r7, #20]
 80112f2:	689a      	ldr	r2, [r3, #8]
 80112f4:	697b      	ldr	r3, [r7, #20]
 80112f6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80112f8:	429a      	cmp	r2, r3
 80112fa:	d316      	bcc.n	801132a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80112fc:	697b      	ldr	r3, [r7, #20]
 80112fe:	689a      	ldr	r2, [r3, #8]
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011306:	429a      	cmp	r2, r3
 8011308:	d20f      	bcs.n	801132a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801130a:	2200      	movs	r2, #0
 801130c:	2100      	movs	r1, #0
 801130e:	68f8      	ldr	r0, [r7, #12]
 8011310:	f000 fe9d 	bl	801204e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	2200      	movs	r2, #0
 8011318:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801131c:	2300      	movs	r3, #0
 801131e:	2200      	movs	r2, #0
 8011320:	2100      	movs	r1, #0
 8011322:	68f8      	ldr	r0, [r7, #12]
 8011324:	f001 fb5a 	bl	80129dc <USBD_LL_PrepareReceive>
 8011328:	e026      	b.n	8011378 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011330:	68db      	ldr	r3, [r3, #12]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d00a      	beq.n	801134c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801133c:	2b03      	cmp	r3, #3
 801133e:	d105      	bne.n	801134c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011346:	68db      	ldr	r3, [r3, #12]
 8011348:	68f8      	ldr	r0, [r7, #12]
 801134a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801134c:	2180      	movs	r1, #128	; 0x80
 801134e:	68f8      	ldr	r0, [r7, #12]
 8011350:	f001 fa98 	bl	8012884 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8011354:	68f8      	ldr	r0, [r7, #12]
 8011356:	f000 fecf 	bl	80120f8 <USBD_CtlReceiveStatus>
 801135a:	e00d      	b.n	8011378 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011362:	2b04      	cmp	r3, #4
 8011364:	d004      	beq.n	8011370 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801136c:	2b00      	cmp	r3, #0
 801136e:	d103      	bne.n	8011378 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8011370:	2180      	movs	r1, #128	; 0x80
 8011372:	68f8      	ldr	r0, [r7, #12]
 8011374:	f001 fa86 	bl	8012884 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801137e:	2b01      	cmp	r3, #1
 8011380:	d11d      	bne.n	80113be <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8011382:	68f8      	ldr	r0, [r7, #12]
 8011384:	f7ff fe81 	bl	801108a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	2200      	movs	r2, #0
 801138c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011390:	e015      	b.n	80113be <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011398:	695b      	ldr	r3, [r3, #20]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d00d      	beq.n	80113ba <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80113a4:	2b03      	cmp	r3, #3
 80113a6:	d108      	bne.n	80113ba <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80113ae:	695b      	ldr	r3, [r3, #20]
 80113b0:	7afa      	ldrb	r2, [r7, #11]
 80113b2:	4611      	mov	r1, r2
 80113b4:	68f8      	ldr	r0, [r7, #12]
 80113b6:	4798      	blx	r3
 80113b8:	e001      	b.n	80113be <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80113ba:	2302      	movs	r3, #2
 80113bc:	e000      	b.n	80113c0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80113be:	2300      	movs	r3, #0
}
 80113c0:	4618      	mov	r0, r3
 80113c2:	3718      	adds	r7, #24
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}

080113c8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80113d0:	2340      	movs	r3, #64	; 0x40
 80113d2:	2200      	movs	r2, #0
 80113d4:	2100      	movs	r1, #0
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f001 fa0f 	bl	80127fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2201      	movs	r2, #1
 80113e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	2240      	movs	r2, #64	; 0x40
 80113e8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80113ec:	2340      	movs	r3, #64	; 0x40
 80113ee:	2200      	movs	r2, #0
 80113f0:	2180      	movs	r1, #128	; 0x80
 80113f2:	6878      	ldr	r0, [r7, #4]
 80113f4:	f001 fa01 	bl	80127fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2201      	movs	r2, #1
 80113fc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	2240      	movs	r2, #64	; 0x40
 8011402:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	2201      	movs	r2, #1
 8011408:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2200      	movs	r2, #0
 8011410:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2200      	movs	r2, #0
 8011418:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2200      	movs	r2, #0
 801141e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011428:	2b00      	cmp	r3, #0
 801142a:	d009      	beq.n	8011440 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011432:	685b      	ldr	r3, [r3, #4]
 8011434:	687a      	ldr	r2, [r7, #4]
 8011436:	6852      	ldr	r2, [r2, #4]
 8011438:	b2d2      	uxtb	r2, r2
 801143a:	4611      	mov	r1, r2
 801143c:	6878      	ldr	r0, [r7, #4]
 801143e:	4798      	blx	r3
  }

  return USBD_OK;
 8011440:	2300      	movs	r3, #0
}
 8011442:	4618      	mov	r0, r3
 8011444:	3708      	adds	r7, #8
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}

0801144a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801144a:	b480      	push	{r7}
 801144c:	b083      	sub	sp, #12
 801144e:	af00      	add	r7, sp, #0
 8011450:	6078      	str	r0, [r7, #4]
 8011452:	460b      	mov	r3, r1
 8011454:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	78fa      	ldrb	r2, [r7, #3]
 801145a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801145c:	2300      	movs	r3, #0
}
 801145e:	4618      	mov	r0, r3
 8011460:	370c      	adds	r7, #12
 8011462:	46bd      	mov	sp, r7
 8011464:	bc80      	pop	{r7}
 8011466:	4770      	bx	lr

08011468 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011468:	b480      	push	{r7}
 801146a:	b083      	sub	sp, #12
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2204      	movs	r2, #4
 8011480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011484:	2300      	movs	r3, #0
}
 8011486:	4618      	mov	r0, r3
 8011488:	370c      	adds	r7, #12
 801148a:	46bd      	mov	sp, r7
 801148c:	bc80      	pop	{r7}
 801148e:	4770      	bx	lr

08011490 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011490:	b480      	push	{r7}
 8011492:	b083      	sub	sp, #12
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801149e:	2b04      	cmp	r3, #4
 80114a0:	d105      	bne.n	80114ae <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80114ae:	2300      	movs	r3, #0
}
 80114b0:	4618      	mov	r0, r3
 80114b2:	370c      	adds	r7, #12
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bc80      	pop	{r7}
 80114b8:	4770      	bx	lr

080114ba <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80114ba:	b580      	push	{r7, lr}
 80114bc:	b082      	sub	sp, #8
 80114be:	af00      	add	r7, sp, #0
 80114c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80114c8:	2b03      	cmp	r3, #3
 80114ca:	d10b      	bne.n	80114e4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114d2:	69db      	ldr	r3, [r3, #28]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d005      	beq.n	80114e4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80114de:	69db      	ldr	r3, [r3, #28]
 80114e0:	6878      	ldr	r0, [r7, #4]
 80114e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80114e4:	2300      	movs	r3, #0
}
 80114e6:	4618      	mov	r0, r3
 80114e8:	3708      	adds	r7, #8
 80114ea:	46bd      	mov	sp, r7
 80114ec:	bd80      	pop	{r7, pc}
	...

080114f0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b084      	sub	sp, #16
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
 80114f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80114fa:	2300      	movs	r3, #0
 80114fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	781b      	ldrb	r3, [r3, #0]
 8011502:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011506:	2b40      	cmp	r3, #64	; 0x40
 8011508:	d005      	beq.n	8011516 <USBD_StdDevReq+0x26>
 801150a:	2b40      	cmp	r3, #64	; 0x40
 801150c:	d84f      	bhi.n	80115ae <USBD_StdDevReq+0xbe>
 801150e:	2b00      	cmp	r3, #0
 8011510:	d009      	beq.n	8011526 <USBD_StdDevReq+0x36>
 8011512:	2b20      	cmp	r3, #32
 8011514:	d14b      	bne.n	80115ae <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801151c:	689b      	ldr	r3, [r3, #8]
 801151e:	6839      	ldr	r1, [r7, #0]
 8011520:	6878      	ldr	r0, [r7, #4]
 8011522:	4798      	blx	r3
      break;
 8011524:	e048      	b.n	80115b8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011526:	683b      	ldr	r3, [r7, #0]
 8011528:	785b      	ldrb	r3, [r3, #1]
 801152a:	2b09      	cmp	r3, #9
 801152c:	d839      	bhi.n	80115a2 <USBD_StdDevReq+0xb2>
 801152e:	a201      	add	r2, pc, #4	; (adr r2, 8011534 <USBD_StdDevReq+0x44>)
 8011530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011534:	08011585 	.word	0x08011585
 8011538:	08011599 	.word	0x08011599
 801153c:	080115a3 	.word	0x080115a3
 8011540:	0801158f 	.word	0x0801158f
 8011544:	080115a3 	.word	0x080115a3
 8011548:	08011567 	.word	0x08011567
 801154c:	0801155d 	.word	0x0801155d
 8011550:	080115a3 	.word	0x080115a3
 8011554:	0801157b 	.word	0x0801157b
 8011558:	08011571 	.word	0x08011571
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801155c:	6839      	ldr	r1, [r7, #0]
 801155e:	6878      	ldr	r0, [r7, #4]
 8011560:	f000 f9dc 	bl	801191c <USBD_GetDescriptor>
          break;
 8011564:	e022      	b.n	80115ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011566:	6839      	ldr	r1, [r7, #0]
 8011568:	6878      	ldr	r0, [r7, #4]
 801156a:	f000 fb3f 	bl	8011bec <USBD_SetAddress>
          break;
 801156e:	e01d      	b.n	80115ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8011570:	6839      	ldr	r1, [r7, #0]
 8011572:	6878      	ldr	r0, [r7, #4]
 8011574:	f000 fb7e 	bl	8011c74 <USBD_SetConfig>
          break;
 8011578:	e018      	b.n	80115ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801157a:	6839      	ldr	r1, [r7, #0]
 801157c:	6878      	ldr	r0, [r7, #4]
 801157e:	f000 fc07 	bl	8011d90 <USBD_GetConfig>
          break;
 8011582:	e013      	b.n	80115ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011584:	6839      	ldr	r1, [r7, #0]
 8011586:	6878      	ldr	r0, [r7, #4]
 8011588:	f000 fc37 	bl	8011dfa <USBD_GetStatus>
          break;
 801158c:	e00e      	b.n	80115ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801158e:	6839      	ldr	r1, [r7, #0]
 8011590:	6878      	ldr	r0, [r7, #4]
 8011592:	f000 fc65 	bl	8011e60 <USBD_SetFeature>
          break;
 8011596:	e009      	b.n	80115ac <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011598:	6839      	ldr	r1, [r7, #0]
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	f000 fc74 	bl	8011e88 <USBD_ClrFeature>
          break;
 80115a0:	e004      	b.n	80115ac <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80115a2:	6839      	ldr	r1, [r7, #0]
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f000 fccc 	bl	8011f42 <USBD_CtlError>
          break;
 80115aa:	bf00      	nop
      }
      break;
 80115ac:	e004      	b.n	80115b8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80115ae:	6839      	ldr	r1, [r7, #0]
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f000 fcc6 	bl	8011f42 <USBD_CtlError>
      break;
 80115b6:	bf00      	nop
  }

  return ret;
 80115b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80115ba:	4618      	mov	r0, r3
 80115bc:	3710      	adds	r7, #16
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd80      	pop	{r7, pc}
 80115c2:	bf00      	nop

080115c4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b084      	sub	sp, #16
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
 80115cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80115ce:	2300      	movs	r3, #0
 80115d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	781b      	ldrb	r3, [r3, #0]
 80115d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80115da:	2b40      	cmp	r3, #64	; 0x40
 80115dc:	d005      	beq.n	80115ea <USBD_StdItfReq+0x26>
 80115de:	2b40      	cmp	r3, #64	; 0x40
 80115e0:	d82e      	bhi.n	8011640 <USBD_StdItfReq+0x7c>
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d001      	beq.n	80115ea <USBD_StdItfReq+0x26>
 80115e6:	2b20      	cmp	r3, #32
 80115e8:	d12a      	bne.n	8011640 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115f0:	3b01      	subs	r3, #1
 80115f2:	2b02      	cmp	r3, #2
 80115f4:	d81d      	bhi.n	8011632 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	889b      	ldrh	r3, [r3, #4]
 80115fa:	b2db      	uxtb	r3, r3
 80115fc:	2b01      	cmp	r3, #1
 80115fe:	d813      	bhi.n	8011628 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011606:	689b      	ldr	r3, [r3, #8]
 8011608:	6839      	ldr	r1, [r7, #0]
 801160a:	6878      	ldr	r0, [r7, #4]
 801160c:	4798      	blx	r3
 801160e:	4603      	mov	r3, r0
 8011610:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	88db      	ldrh	r3, [r3, #6]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d110      	bne.n	801163c <USBD_StdItfReq+0x78>
 801161a:	7bfb      	ldrb	r3, [r7, #15]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d10d      	bne.n	801163c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8011620:	6878      	ldr	r0, [r7, #4]
 8011622:	f000 fd56 	bl	80120d2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011626:	e009      	b.n	801163c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8011628:	6839      	ldr	r1, [r7, #0]
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	f000 fc89 	bl	8011f42 <USBD_CtlError>
          break;
 8011630:	e004      	b.n	801163c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8011632:	6839      	ldr	r1, [r7, #0]
 8011634:	6878      	ldr	r0, [r7, #4]
 8011636:	f000 fc84 	bl	8011f42 <USBD_CtlError>
          break;
 801163a:	e000      	b.n	801163e <USBD_StdItfReq+0x7a>
          break;
 801163c:	bf00      	nop
      }
      break;
 801163e:	e004      	b.n	801164a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8011640:	6839      	ldr	r1, [r7, #0]
 8011642:	6878      	ldr	r0, [r7, #4]
 8011644:	f000 fc7d 	bl	8011f42 <USBD_CtlError>
      break;
 8011648:	bf00      	nop
  }

  return USBD_OK;
 801164a:	2300      	movs	r3, #0
}
 801164c:	4618      	mov	r0, r3
 801164e:	3710      	adds	r7, #16
 8011650:	46bd      	mov	sp, r7
 8011652:	bd80      	pop	{r7, pc}

08011654 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b084      	sub	sp, #16
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
 801165c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801165e:	2300      	movs	r3, #0
 8011660:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8011662:	683b      	ldr	r3, [r7, #0]
 8011664:	889b      	ldrh	r3, [r3, #4]
 8011666:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	781b      	ldrb	r3, [r3, #0]
 801166c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011670:	2b40      	cmp	r3, #64	; 0x40
 8011672:	d007      	beq.n	8011684 <USBD_StdEPReq+0x30>
 8011674:	2b40      	cmp	r3, #64	; 0x40
 8011676:	f200 8146 	bhi.w	8011906 <USBD_StdEPReq+0x2b2>
 801167a:	2b00      	cmp	r3, #0
 801167c:	d00a      	beq.n	8011694 <USBD_StdEPReq+0x40>
 801167e:	2b20      	cmp	r3, #32
 8011680:	f040 8141 	bne.w	8011906 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801168a:	689b      	ldr	r3, [r3, #8]
 801168c:	6839      	ldr	r1, [r7, #0]
 801168e:	6878      	ldr	r0, [r7, #4]
 8011690:	4798      	blx	r3
      break;
 8011692:	e13d      	b.n	8011910 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	781b      	ldrb	r3, [r3, #0]
 8011698:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801169c:	2b20      	cmp	r3, #32
 801169e:	d10a      	bne.n	80116b6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80116a6:	689b      	ldr	r3, [r3, #8]
 80116a8:	6839      	ldr	r1, [r7, #0]
 80116aa:	6878      	ldr	r0, [r7, #4]
 80116ac:	4798      	blx	r3
 80116ae:	4603      	mov	r3, r0
 80116b0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80116b2:	7bfb      	ldrb	r3, [r7, #15]
 80116b4:	e12d      	b.n	8011912 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	785b      	ldrb	r3, [r3, #1]
 80116ba:	2b03      	cmp	r3, #3
 80116bc:	d007      	beq.n	80116ce <USBD_StdEPReq+0x7a>
 80116be:	2b03      	cmp	r3, #3
 80116c0:	f300 811b 	bgt.w	80118fa <USBD_StdEPReq+0x2a6>
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d072      	beq.n	80117ae <USBD_StdEPReq+0x15a>
 80116c8:	2b01      	cmp	r3, #1
 80116ca:	d03a      	beq.n	8011742 <USBD_StdEPReq+0xee>
 80116cc:	e115      	b.n	80118fa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80116d4:	2b02      	cmp	r3, #2
 80116d6:	d002      	beq.n	80116de <USBD_StdEPReq+0x8a>
 80116d8:	2b03      	cmp	r3, #3
 80116da:	d015      	beq.n	8011708 <USBD_StdEPReq+0xb4>
 80116dc:	e02b      	b.n	8011736 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80116de:	7bbb      	ldrb	r3, [r7, #14]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d00c      	beq.n	80116fe <USBD_StdEPReq+0xaa>
 80116e4:	7bbb      	ldrb	r3, [r7, #14]
 80116e6:	2b80      	cmp	r3, #128	; 0x80
 80116e8:	d009      	beq.n	80116fe <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80116ea:	7bbb      	ldrb	r3, [r7, #14]
 80116ec:	4619      	mov	r1, r3
 80116ee:	6878      	ldr	r0, [r7, #4]
 80116f0:	f001 f8c8 	bl	8012884 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80116f4:	2180      	movs	r1, #128	; 0x80
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	f001 f8c4 	bl	8012884 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80116fc:	e020      	b.n	8011740 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80116fe:	6839      	ldr	r1, [r7, #0]
 8011700:	6878      	ldr	r0, [r7, #4]
 8011702:	f000 fc1e 	bl	8011f42 <USBD_CtlError>
              break;
 8011706:	e01b      	b.n	8011740 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	885b      	ldrh	r3, [r3, #2]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d10e      	bne.n	801172e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8011710:	7bbb      	ldrb	r3, [r7, #14]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d00b      	beq.n	801172e <USBD_StdEPReq+0xda>
 8011716:	7bbb      	ldrb	r3, [r7, #14]
 8011718:	2b80      	cmp	r3, #128	; 0x80
 801171a:	d008      	beq.n	801172e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	88db      	ldrh	r3, [r3, #6]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d104      	bne.n	801172e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8011724:	7bbb      	ldrb	r3, [r7, #14]
 8011726:	4619      	mov	r1, r3
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	f001 f8ab 	bl	8012884 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	f000 fccf 	bl	80120d2 <USBD_CtlSendStatus>

              break;
 8011734:	e004      	b.n	8011740 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8011736:	6839      	ldr	r1, [r7, #0]
 8011738:	6878      	ldr	r0, [r7, #4]
 801173a:	f000 fc02 	bl	8011f42 <USBD_CtlError>
              break;
 801173e:	bf00      	nop
          }
          break;
 8011740:	e0e0      	b.n	8011904 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011748:	2b02      	cmp	r3, #2
 801174a:	d002      	beq.n	8011752 <USBD_StdEPReq+0xfe>
 801174c:	2b03      	cmp	r3, #3
 801174e:	d015      	beq.n	801177c <USBD_StdEPReq+0x128>
 8011750:	e026      	b.n	80117a0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011752:	7bbb      	ldrb	r3, [r7, #14]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d00c      	beq.n	8011772 <USBD_StdEPReq+0x11e>
 8011758:	7bbb      	ldrb	r3, [r7, #14]
 801175a:	2b80      	cmp	r3, #128	; 0x80
 801175c:	d009      	beq.n	8011772 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801175e:	7bbb      	ldrb	r3, [r7, #14]
 8011760:	4619      	mov	r1, r3
 8011762:	6878      	ldr	r0, [r7, #4]
 8011764:	f001 f88e 	bl	8012884 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8011768:	2180      	movs	r1, #128	; 0x80
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	f001 f88a 	bl	8012884 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011770:	e01c      	b.n	80117ac <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8011772:	6839      	ldr	r1, [r7, #0]
 8011774:	6878      	ldr	r0, [r7, #4]
 8011776:	f000 fbe4 	bl	8011f42 <USBD_CtlError>
              break;
 801177a:	e017      	b.n	80117ac <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	885b      	ldrh	r3, [r3, #2]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d112      	bne.n	80117aa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011784:	7bbb      	ldrb	r3, [r7, #14]
 8011786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801178a:	2b00      	cmp	r3, #0
 801178c:	d004      	beq.n	8011798 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801178e:	7bbb      	ldrb	r3, [r7, #14]
 8011790:	4619      	mov	r1, r3
 8011792:	6878      	ldr	r0, [r7, #4]
 8011794:	f001 f895 	bl	80128c2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8011798:	6878      	ldr	r0, [r7, #4]
 801179a:	f000 fc9a 	bl	80120d2 <USBD_CtlSendStatus>
              }
              break;
 801179e:	e004      	b.n	80117aa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80117a0:	6839      	ldr	r1, [r7, #0]
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	f000 fbcd 	bl	8011f42 <USBD_CtlError>
              break;
 80117a8:	e000      	b.n	80117ac <USBD_StdEPReq+0x158>
              break;
 80117aa:	bf00      	nop
          }
          break;
 80117ac:	e0aa      	b.n	8011904 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80117b4:	2b02      	cmp	r3, #2
 80117b6:	d002      	beq.n	80117be <USBD_StdEPReq+0x16a>
 80117b8:	2b03      	cmp	r3, #3
 80117ba:	d032      	beq.n	8011822 <USBD_StdEPReq+0x1ce>
 80117bc:	e097      	b.n	80118ee <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80117be:	7bbb      	ldrb	r3, [r7, #14]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d007      	beq.n	80117d4 <USBD_StdEPReq+0x180>
 80117c4:	7bbb      	ldrb	r3, [r7, #14]
 80117c6:	2b80      	cmp	r3, #128	; 0x80
 80117c8:	d004      	beq.n	80117d4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80117ca:	6839      	ldr	r1, [r7, #0]
 80117cc:	6878      	ldr	r0, [r7, #4]
 80117ce:	f000 fbb8 	bl	8011f42 <USBD_CtlError>
                break;
 80117d2:	e091      	b.n	80118f8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80117d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	da0b      	bge.n	80117f4 <USBD_StdEPReq+0x1a0>
 80117dc:	7bbb      	ldrb	r3, [r7, #14]
 80117de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80117e2:	4613      	mov	r3, r2
 80117e4:	009b      	lsls	r3, r3, #2
 80117e6:	4413      	add	r3, r2
 80117e8:	009b      	lsls	r3, r3, #2
 80117ea:	3310      	adds	r3, #16
 80117ec:	687a      	ldr	r2, [r7, #4]
 80117ee:	4413      	add	r3, r2
 80117f0:	3304      	adds	r3, #4
 80117f2:	e00b      	b.n	801180c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80117f4:	7bbb      	ldrb	r3, [r7, #14]
 80117f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80117fa:	4613      	mov	r3, r2
 80117fc:	009b      	lsls	r3, r3, #2
 80117fe:	4413      	add	r3, r2
 8011800:	009b      	lsls	r3, r3, #2
 8011802:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011806:	687a      	ldr	r2, [r7, #4]
 8011808:	4413      	add	r3, r2
 801180a:	3304      	adds	r3, #4
 801180c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801180e:	68bb      	ldr	r3, [r7, #8]
 8011810:	2200      	movs	r2, #0
 8011812:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8011814:	68bb      	ldr	r3, [r7, #8]
 8011816:	2202      	movs	r2, #2
 8011818:	4619      	mov	r1, r3
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f000 fbfb 	bl	8012016 <USBD_CtlSendData>
              break;
 8011820:	e06a      	b.n	80118f8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011822:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011826:	2b00      	cmp	r3, #0
 8011828:	da11      	bge.n	801184e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801182a:	7bbb      	ldrb	r3, [r7, #14]
 801182c:	f003 020f 	and.w	r2, r3, #15
 8011830:	6879      	ldr	r1, [r7, #4]
 8011832:	4613      	mov	r3, r2
 8011834:	009b      	lsls	r3, r3, #2
 8011836:	4413      	add	r3, r2
 8011838:	009b      	lsls	r3, r3, #2
 801183a:	440b      	add	r3, r1
 801183c:	3318      	adds	r3, #24
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d117      	bne.n	8011874 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8011844:	6839      	ldr	r1, [r7, #0]
 8011846:	6878      	ldr	r0, [r7, #4]
 8011848:	f000 fb7b 	bl	8011f42 <USBD_CtlError>
                  break;
 801184c:	e054      	b.n	80118f8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801184e:	7bbb      	ldrb	r3, [r7, #14]
 8011850:	f003 020f 	and.w	r2, r3, #15
 8011854:	6879      	ldr	r1, [r7, #4]
 8011856:	4613      	mov	r3, r2
 8011858:	009b      	lsls	r3, r3, #2
 801185a:	4413      	add	r3, r2
 801185c:	009b      	lsls	r3, r3, #2
 801185e:	440b      	add	r3, r1
 8011860:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d104      	bne.n	8011874 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 801186a:	6839      	ldr	r1, [r7, #0]
 801186c:	6878      	ldr	r0, [r7, #4]
 801186e:	f000 fb68 	bl	8011f42 <USBD_CtlError>
                  break;
 8011872:	e041      	b.n	80118f8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011874:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011878:	2b00      	cmp	r3, #0
 801187a:	da0b      	bge.n	8011894 <USBD_StdEPReq+0x240>
 801187c:	7bbb      	ldrb	r3, [r7, #14]
 801187e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011882:	4613      	mov	r3, r2
 8011884:	009b      	lsls	r3, r3, #2
 8011886:	4413      	add	r3, r2
 8011888:	009b      	lsls	r3, r3, #2
 801188a:	3310      	adds	r3, #16
 801188c:	687a      	ldr	r2, [r7, #4]
 801188e:	4413      	add	r3, r2
 8011890:	3304      	adds	r3, #4
 8011892:	e00b      	b.n	80118ac <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011894:	7bbb      	ldrb	r3, [r7, #14]
 8011896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801189a:	4613      	mov	r3, r2
 801189c:	009b      	lsls	r3, r3, #2
 801189e:	4413      	add	r3, r2
 80118a0:	009b      	lsls	r3, r3, #2
 80118a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80118a6:	687a      	ldr	r2, [r7, #4]
 80118a8:	4413      	add	r3, r2
 80118aa:	3304      	adds	r3, #4
 80118ac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80118ae:	7bbb      	ldrb	r3, [r7, #14]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d002      	beq.n	80118ba <USBD_StdEPReq+0x266>
 80118b4:	7bbb      	ldrb	r3, [r7, #14]
 80118b6:	2b80      	cmp	r3, #128	; 0x80
 80118b8:	d103      	bne.n	80118c2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	2200      	movs	r2, #0
 80118be:	601a      	str	r2, [r3, #0]
 80118c0:	e00e      	b.n	80118e0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80118c2:	7bbb      	ldrb	r3, [r7, #14]
 80118c4:	4619      	mov	r1, r3
 80118c6:	6878      	ldr	r0, [r7, #4]
 80118c8:	f001 f81a 	bl	8012900 <USBD_LL_IsStallEP>
 80118cc:	4603      	mov	r3, r0
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d003      	beq.n	80118da <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	2201      	movs	r2, #1
 80118d6:	601a      	str	r2, [r3, #0]
 80118d8:	e002      	b.n	80118e0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80118da:	68bb      	ldr	r3, [r7, #8]
 80118dc:	2200      	movs	r2, #0
 80118de:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80118e0:	68bb      	ldr	r3, [r7, #8]
 80118e2:	2202      	movs	r2, #2
 80118e4:	4619      	mov	r1, r3
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f000 fb95 	bl	8012016 <USBD_CtlSendData>
              break;
 80118ec:	e004      	b.n	80118f8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80118ee:	6839      	ldr	r1, [r7, #0]
 80118f0:	6878      	ldr	r0, [r7, #4]
 80118f2:	f000 fb26 	bl	8011f42 <USBD_CtlError>
              break;
 80118f6:	bf00      	nop
          }
          break;
 80118f8:	e004      	b.n	8011904 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80118fa:	6839      	ldr	r1, [r7, #0]
 80118fc:	6878      	ldr	r0, [r7, #4]
 80118fe:	f000 fb20 	bl	8011f42 <USBD_CtlError>
          break;
 8011902:	bf00      	nop
      }
      break;
 8011904:	e004      	b.n	8011910 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8011906:	6839      	ldr	r1, [r7, #0]
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f000 fb1a 	bl	8011f42 <USBD_CtlError>
      break;
 801190e:	bf00      	nop
  }

  return ret;
 8011910:	7bfb      	ldrb	r3, [r7, #15]
}
 8011912:	4618      	mov	r0, r3
 8011914:	3710      	adds	r7, #16
 8011916:	46bd      	mov	sp, r7
 8011918:	bd80      	pop	{r7, pc}
	...

0801191c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b084      	sub	sp, #16
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
 8011924:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011926:	2300      	movs	r3, #0
 8011928:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801192a:	2300      	movs	r3, #0
 801192c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801192e:	2300      	movs	r3, #0
 8011930:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	885b      	ldrh	r3, [r3, #2]
 8011936:	0a1b      	lsrs	r3, r3, #8
 8011938:	b29b      	uxth	r3, r3
 801193a:	3b01      	subs	r3, #1
 801193c:	2b06      	cmp	r3, #6
 801193e:	f200 8128 	bhi.w	8011b92 <USBD_GetDescriptor+0x276>
 8011942:	a201      	add	r2, pc, #4	; (adr r2, 8011948 <USBD_GetDescriptor+0x2c>)
 8011944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011948:	08011965 	.word	0x08011965
 801194c:	0801197d 	.word	0x0801197d
 8011950:	080119bd 	.word	0x080119bd
 8011954:	08011b93 	.word	0x08011b93
 8011958:	08011b93 	.word	0x08011b93
 801195c:	08011b33 	.word	0x08011b33
 8011960:	08011b5f 	.word	0x08011b5f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	687a      	ldr	r2, [r7, #4]
 801196e:	7c12      	ldrb	r2, [r2, #16]
 8011970:	f107 0108 	add.w	r1, r7, #8
 8011974:	4610      	mov	r0, r2
 8011976:	4798      	blx	r3
 8011978:	60f8      	str	r0, [r7, #12]
      break;
 801197a:	e112      	b.n	8011ba2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	7c1b      	ldrb	r3, [r3, #16]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d10d      	bne.n	80119a0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801198c:	f107 0208 	add.w	r2, r7, #8
 8011990:	4610      	mov	r0, r2
 8011992:	4798      	blx	r3
 8011994:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	3301      	adds	r3, #1
 801199a:	2202      	movs	r2, #2
 801199c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801199e:	e100      	b.n	8011ba2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80119a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119a8:	f107 0208 	add.w	r2, r7, #8
 80119ac:	4610      	mov	r0, r2
 80119ae:	4798      	blx	r3
 80119b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	3301      	adds	r3, #1
 80119b6:	2202      	movs	r2, #2
 80119b8:	701a      	strb	r2, [r3, #0]
      break;
 80119ba:	e0f2      	b.n	8011ba2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	885b      	ldrh	r3, [r3, #2]
 80119c0:	b2db      	uxtb	r3, r3
 80119c2:	2b05      	cmp	r3, #5
 80119c4:	f200 80ac 	bhi.w	8011b20 <USBD_GetDescriptor+0x204>
 80119c8:	a201      	add	r2, pc, #4	; (adr r2, 80119d0 <USBD_GetDescriptor+0xb4>)
 80119ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119ce:	bf00      	nop
 80119d0:	080119e9 	.word	0x080119e9
 80119d4:	08011a1d 	.word	0x08011a1d
 80119d8:	08011a51 	.word	0x08011a51
 80119dc:	08011a85 	.word	0x08011a85
 80119e0:	08011ab9 	.word	0x08011ab9
 80119e4:	08011aed 	.word	0x08011aed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80119ee:	685b      	ldr	r3, [r3, #4]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d00b      	beq.n	8011a0c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80119fa:	685b      	ldr	r3, [r3, #4]
 80119fc:	687a      	ldr	r2, [r7, #4]
 80119fe:	7c12      	ldrb	r2, [r2, #16]
 8011a00:	f107 0108 	add.w	r1, r7, #8
 8011a04:	4610      	mov	r0, r2
 8011a06:	4798      	blx	r3
 8011a08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011a0a:	e091      	b.n	8011b30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011a0c:	6839      	ldr	r1, [r7, #0]
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f000 fa97 	bl	8011f42 <USBD_CtlError>
            err++;
 8011a14:	7afb      	ldrb	r3, [r7, #11]
 8011a16:	3301      	adds	r3, #1
 8011a18:	72fb      	strb	r3, [r7, #11]
          break;
 8011a1a:	e089      	b.n	8011b30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011a22:	689b      	ldr	r3, [r3, #8]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d00b      	beq.n	8011a40 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011a2e:	689b      	ldr	r3, [r3, #8]
 8011a30:	687a      	ldr	r2, [r7, #4]
 8011a32:	7c12      	ldrb	r2, [r2, #16]
 8011a34:	f107 0108 	add.w	r1, r7, #8
 8011a38:	4610      	mov	r0, r2
 8011a3a:	4798      	blx	r3
 8011a3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011a3e:	e077      	b.n	8011b30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011a40:	6839      	ldr	r1, [r7, #0]
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f000 fa7d 	bl	8011f42 <USBD_CtlError>
            err++;
 8011a48:	7afb      	ldrb	r3, [r7, #11]
 8011a4a:	3301      	adds	r3, #1
 8011a4c:	72fb      	strb	r3, [r7, #11]
          break;
 8011a4e:	e06f      	b.n	8011b30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011a56:	68db      	ldr	r3, [r3, #12]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d00b      	beq.n	8011a74 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011a62:	68db      	ldr	r3, [r3, #12]
 8011a64:	687a      	ldr	r2, [r7, #4]
 8011a66:	7c12      	ldrb	r2, [r2, #16]
 8011a68:	f107 0108 	add.w	r1, r7, #8
 8011a6c:	4610      	mov	r0, r2
 8011a6e:	4798      	blx	r3
 8011a70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011a72:	e05d      	b.n	8011b30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011a74:	6839      	ldr	r1, [r7, #0]
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f000 fa63 	bl	8011f42 <USBD_CtlError>
            err++;
 8011a7c:	7afb      	ldrb	r3, [r7, #11]
 8011a7e:	3301      	adds	r3, #1
 8011a80:	72fb      	strb	r3, [r7, #11]
          break;
 8011a82:	e055      	b.n	8011b30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011a8a:	691b      	ldr	r3, [r3, #16]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d00b      	beq.n	8011aa8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011a96:	691b      	ldr	r3, [r3, #16]
 8011a98:	687a      	ldr	r2, [r7, #4]
 8011a9a:	7c12      	ldrb	r2, [r2, #16]
 8011a9c:	f107 0108 	add.w	r1, r7, #8
 8011aa0:	4610      	mov	r0, r2
 8011aa2:	4798      	blx	r3
 8011aa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011aa6:	e043      	b.n	8011b30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011aa8:	6839      	ldr	r1, [r7, #0]
 8011aaa:	6878      	ldr	r0, [r7, #4]
 8011aac:	f000 fa49 	bl	8011f42 <USBD_CtlError>
            err++;
 8011ab0:	7afb      	ldrb	r3, [r7, #11]
 8011ab2:	3301      	adds	r3, #1
 8011ab4:	72fb      	strb	r3, [r7, #11]
          break;
 8011ab6:	e03b      	b.n	8011b30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011abe:	695b      	ldr	r3, [r3, #20]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d00b      	beq.n	8011adc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011aca:	695b      	ldr	r3, [r3, #20]
 8011acc:	687a      	ldr	r2, [r7, #4]
 8011ace:	7c12      	ldrb	r2, [r2, #16]
 8011ad0:	f107 0108 	add.w	r1, r7, #8
 8011ad4:	4610      	mov	r0, r2
 8011ad6:	4798      	blx	r3
 8011ad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011ada:	e029      	b.n	8011b30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011adc:	6839      	ldr	r1, [r7, #0]
 8011ade:	6878      	ldr	r0, [r7, #4]
 8011ae0:	f000 fa2f 	bl	8011f42 <USBD_CtlError>
            err++;
 8011ae4:	7afb      	ldrb	r3, [r7, #11]
 8011ae6:	3301      	adds	r3, #1
 8011ae8:	72fb      	strb	r3, [r7, #11]
          break;
 8011aea:	e021      	b.n	8011b30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011af2:	699b      	ldr	r3, [r3, #24]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d00b      	beq.n	8011b10 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011afe:	699b      	ldr	r3, [r3, #24]
 8011b00:	687a      	ldr	r2, [r7, #4]
 8011b02:	7c12      	ldrb	r2, [r2, #16]
 8011b04:	f107 0108 	add.w	r1, r7, #8
 8011b08:	4610      	mov	r0, r2
 8011b0a:	4798      	blx	r3
 8011b0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011b0e:	e00f      	b.n	8011b30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011b10:	6839      	ldr	r1, [r7, #0]
 8011b12:	6878      	ldr	r0, [r7, #4]
 8011b14:	f000 fa15 	bl	8011f42 <USBD_CtlError>
            err++;
 8011b18:	7afb      	ldrb	r3, [r7, #11]
 8011b1a:	3301      	adds	r3, #1
 8011b1c:	72fb      	strb	r3, [r7, #11]
          break;
 8011b1e:	e007      	b.n	8011b30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8011b20:	6839      	ldr	r1, [r7, #0]
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	f000 fa0d 	bl	8011f42 <USBD_CtlError>
          err++;
 8011b28:	7afb      	ldrb	r3, [r7, #11]
 8011b2a:	3301      	adds	r3, #1
 8011b2c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8011b2e:	e038      	b.n	8011ba2 <USBD_GetDescriptor+0x286>
 8011b30:	e037      	b.n	8011ba2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	7c1b      	ldrb	r3, [r3, #16]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d109      	bne.n	8011b4e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b42:	f107 0208 	add.w	r2, r7, #8
 8011b46:	4610      	mov	r0, r2
 8011b48:	4798      	blx	r3
 8011b4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011b4c:	e029      	b.n	8011ba2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011b4e:	6839      	ldr	r1, [r7, #0]
 8011b50:	6878      	ldr	r0, [r7, #4]
 8011b52:	f000 f9f6 	bl	8011f42 <USBD_CtlError>
        err++;
 8011b56:	7afb      	ldrb	r3, [r7, #11]
 8011b58:	3301      	adds	r3, #1
 8011b5a:	72fb      	strb	r3, [r7, #11]
      break;
 8011b5c:	e021      	b.n	8011ba2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	7c1b      	ldrb	r3, [r3, #16]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d10d      	bne.n	8011b82 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b6e:	f107 0208 	add.w	r2, r7, #8
 8011b72:	4610      	mov	r0, r2
 8011b74:	4798      	blx	r3
 8011b76:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	3301      	adds	r3, #1
 8011b7c:	2207      	movs	r2, #7
 8011b7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011b80:	e00f      	b.n	8011ba2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011b82:	6839      	ldr	r1, [r7, #0]
 8011b84:	6878      	ldr	r0, [r7, #4]
 8011b86:	f000 f9dc 	bl	8011f42 <USBD_CtlError>
        err++;
 8011b8a:	7afb      	ldrb	r3, [r7, #11]
 8011b8c:	3301      	adds	r3, #1
 8011b8e:	72fb      	strb	r3, [r7, #11]
      break;
 8011b90:	e007      	b.n	8011ba2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8011b92:	6839      	ldr	r1, [r7, #0]
 8011b94:	6878      	ldr	r0, [r7, #4]
 8011b96:	f000 f9d4 	bl	8011f42 <USBD_CtlError>
      err++;
 8011b9a:	7afb      	ldrb	r3, [r7, #11]
 8011b9c:	3301      	adds	r3, #1
 8011b9e:	72fb      	strb	r3, [r7, #11]
      break;
 8011ba0:	bf00      	nop
  }

  if (err != 0U)
 8011ba2:	7afb      	ldrb	r3, [r7, #11]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d11c      	bne.n	8011be2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8011ba8:	893b      	ldrh	r3, [r7, #8]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d011      	beq.n	8011bd2 <USBD_GetDescriptor+0x2b6>
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	88db      	ldrh	r3, [r3, #6]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d00d      	beq.n	8011bd2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	88da      	ldrh	r2, [r3, #6]
 8011bba:	893b      	ldrh	r3, [r7, #8]
 8011bbc:	4293      	cmp	r3, r2
 8011bbe:	bf28      	it	cs
 8011bc0:	4613      	movcs	r3, r2
 8011bc2:	b29b      	uxth	r3, r3
 8011bc4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011bc6:	893b      	ldrh	r3, [r7, #8]
 8011bc8:	461a      	mov	r2, r3
 8011bca:	68f9      	ldr	r1, [r7, #12]
 8011bcc:	6878      	ldr	r0, [r7, #4]
 8011bce:	f000 fa22 	bl	8012016 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	88db      	ldrh	r3, [r3, #6]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d104      	bne.n	8011be4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f000 fa79 	bl	80120d2 <USBD_CtlSendStatus>
 8011be0:	e000      	b.n	8011be4 <USBD_GetDescriptor+0x2c8>
    return;
 8011be2:	bf00      	nop
    }
  }
}
 8011be4:	3710      	adds	r7, #16
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}
 8011bea:	bf00      	nop

08011bec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b084      	sub	sp, #16
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
 8011bf4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	889b      	ldrh	r3, [r3, #4]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d130      	bne.n	8011c60 <USBD_SetAddress+0x74>
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	88db      	ldrh	r3, [r3, #6]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d12c      	bne.n	8011c60 <USBD_SetAddress+0x74>
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	885b      	ldrh	r3, [r3, #2]
 8011c0a:	2b7f      	cmp	r3, #127	; 0x7f
 8011c0c:	d828      	bhi.n	8011c60 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	885b      	ldrh	r3, [r3, #2]
 8011c12:	b2db      	uxtb	r3, r3
 8011c14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011c18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011c20:	2b03      	cmp	r3, #3
 8011c22:	d104      	bne.n	8011c2e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8011c24:	6839      	ldr	r1, [r7, #0]
 8011c26:	6878      	ldr	r0, [r7, #4]
 8011c28:	f000 f98b 	bl	8011f42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c2c:	e01d      	b.n	8011c6a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	7bfa      	ldrb	r2, [r7, #15]
 8011c32:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011c36:	7bfb      	ldrb	r3, [r7, #15]
 8011c38:	4619      	mov	r1, r3
 8011c3a:	6878      	ldr	r0, [r7, #4]
 8011c3c:	f000 fe8c 	bl	8012958 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f000 fa46 	bl	80120d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011c46:	7bfb      	ldrb	r3, [r7, #15]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d004      	beq.n	8011c56 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	2202      	movs	r2, #2
 8011c50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c54:	e009      	b.n	8011c6a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	2201      	movs	r2, #1
 8011c5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011c5e:	e004      	b.n	8011c6a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011c60:	6839      	ldr	r1, [r7, #0]
 8011c62:	6878      	ldr	r0, [r7, #4]
 8011c64:	f000 f96d 	bl	8011f42 <USBD_CtlError>
  }
}
 8011c68:	bf00      	nop
 8011c6a:	bf00      	nop
 8011c6c:	3710      	adds	r7, #16
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}
	...

08011c74 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b082      	sub	sp, #8
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
 8011c7c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	885b      	ldrh	r3, [r3, #2]
 8011c82:	b2da      	uxtb	r2, r3
 8011c84:	4b41      	ldr	r3, [pc, #260]	; (8011d8c <USBD_SetConfig+0x118>)
 8011c86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011c88:	4b40      	ldr	r3, [pc, #256]	; (8011d8c <USBD_SetConfig+0x118>)
 8011c8a:	781b      	ldrb	r3, [r3, #0]
 8011c8c:	2b01      	cmp	r3, #1
 8011c8e:	d904      	bls.n	8011c9a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8011c90:	6839      	ldr	r1, [r7, #0]
 8011c92:	6878      	ldr	r0, [r7, #4]
 8011c94:	f000 f955 	bl	8011f42 <USBD_CtlError>
 8011c98:	e075      	b.n	8011d86 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ca0:	2b02      	cmp	r3, #2
 8011ca2:	d002      	beq.n	8011caa <USBD_SetConfig+0x36>
 8011ca4:	2b03      	cmp	r3, #3
 8011ca6:	d023      	beq.n	8011cf0 <USBD_SetConfig+0x7c>
 8011ca8:	e062      	b.n	8011d70 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8011caa:	4b38      	ldr	r3, [pc, #224]	; (8011d8c <USBD_SetConfig+0x118>)
 8011cac:	781b      	ldrb	r3, [r3, #0]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d01a      	beq.n	8011ce8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8011cb2:	4b36      	ldr	r3, [pc, #216]	; (8011d8c <USBD_SetConfig+0x118>)
 8011cb4:	781b      	ldrb	r3, [r3, #0]
 8011cb6:	461a      	mov	r2, r3
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	2203      	movs	r2, #3
 8011cc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8011cc4:	4b31      	ldr	r3, [pc, #196]	; (8011d8c <USBD_SetConfig+0x118>)
 8011cc6:	781b      	ldrb	r3, [r3, #0]
 8011cc8:	4619      	mov	r1, r3
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f7ff f9e7 	bl	801109e <USBD_SetClassConfig>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	2b02      	cmp	r3, #2
 8011cd4:	d104      	bne.n	8011ce0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8011cd6:	6839      	ldr	r1, [r7, #0]
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f000 f932 	bl	8011f42 <USBD_CtlError>
            return;
 8011cde:	e052      	b.n	8011d86 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8011ce0:	6878      	ldr	r0, [r7, #4]
 8011ce2:	f000 f9f6 	bl	80120d2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8011ce6:	e04e      	b.n	8011d86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8011ce8:	6878      	ldr	r0, [r7, #4]
 8011cea:	f000 f9f2 	bl	80120d2 <USBD_CtlSendStatus>
        break;
 8011cee:	e04a      	b.n	8011d86 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8011cf0:	4b26      	ldr	r3, [pc, #152]	; (8011d8c <USBD_SetConfig+0x118>)
 8011cf2:	781b      	ldrb	r3, [r3, #0]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d112      	bne.n	8011d1e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	2202      	movs	r2, #2
 8011cfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8011d00:	4b22      	ldr	r3, [pc, #136]	; (8011d8c <USBD_SetConfig+0x118>)
 8011d02:	781b      	ldrb	r3, [r3, #0]
 8011d04:	461a      	mov	r2, r3
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8011d0a:	4b20      	ldr	r3, [pc, #128]	; (8011d8c <USBD_SetConfig+0x118>)
 8011d0c:	781b      	ldrb	r3, [r3, #0]
 8011d0e:	4619      	mov	r1, r3
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f7ff f9e3 	bl	80110dc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f000 f9db 	bl	80120d2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8011d1c:	e033      	b.n	8011d86 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8011d1e:	4b1b      	ldr	r3, [pc, #108]	; (8011d8c <USBD_SetConfig+0x118>)
 8011d20:	781b      	ldrb	r3, [r3, #0]
 8011d22:	461a      	mov	r2, r3
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	685b      	ldr	r3, [r3, #4]
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d01d      	beq.n	8011d68 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	685b      	ldr	r3, [r3, #4]
 8011d30:	b2db      	uxtb	r3, r3
 8011d32:	4619      	mov	r1, r3
 8011d34:	6878      	ldr	r0, [r7, #4]
 8011d36:	f7ff f9d1 	bl	80110dc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8011d3a:	4b14      	ldr	r3, [pc, #80]	; (8011d8c <USBD_SetConfig+0x118>)
 8011d3c:	781b      	ldrb	r3, [r3, #0]
 8011d3e:	461a      	mov	r2, r3
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8011d44:	4b11      	ldr	r3, [pc, #68]	; (8011d8c <USBD_SetConfig+0x118>)
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	4619      	mov	r1, r3
 8011d4a:	6878      	ldr	r0, [r7, #4]
 8011d4c:	f7ff f9a7 	bl	801109e <USBD_SetClassConfig>
 8011d50:	4603      	mov	r3, r0
 8011d52:	2b02      	cmp	r3, #2
 8011d54:	d104      	bne.n	8011d60 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8011d56:	6839      	ldr	r1, [r7, #0]
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	f000 f8f2 	bl	8011f42 <USBD_CtlError>
            return;
 8011d5e:	e012      	b.n	8011d86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8011d60:	6878      	ldr	r0, [r7, #4]
 8011d62:	f000 f9b6 	bl	80120d2 <USBD_CtlSendStatus>
        break;
 8011d66:	e00e      	b.n	8011d86 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8011d68:	6878      	ldr	r0, [r7, #4]
 8011d6a:	f000 f9b2 	bl	80120d2 <USBD_CtlSendStatus>
        break;
 8011d6e:	e00a      	b.n	8011d86 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8011d70:	6839      	ldr	r1, [r7, #0]
 8011d72:	6878      	ldr	r0, [r7, #4]
 8011d74:	f000 f8e5 	bl	8011f42 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8011d78:	4b04      	ldr	r3, [pc, #16]	; (8011d8c <USBD_SetConfig+0x118>)
 8011d7a:	781b      	ldrb	r3, [r3, #0]
 8011d7c:	4619      	mov	r1, r3
 8011d7e:	6878      	ldr	r0, [r7, #4]
 8011d80:	f7ff f9ac 	bl	80110dc <USBD_ClrClassConfig>
        break;
 8011d84:	bf00      	nop
    }
  }
}
 8011d86:	3708      	adds	r7, #8
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}
 8011d8c:	200028ac 	.word	0x200028ac

08011d90 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b082      	sub	sp, #8
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
 8011d98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	88db      	ldrh	r3, [r3, #6]
 8011d9e:	2b01      	cmp	r3, #1
 8011da0:	d004      	beq.n	8011dac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011da2:	6839      	ldr	r1, [r7, #0]
 8011da4:	6878      	ldr	r0, [r7, #4]
 8011da6:	f000 f8cc 	bl	8011f42 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011daa:	e022      	b.n	8011df2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011db2:	2b02      	cmp	r3, #2
 8011db4:	dc02      	bgt.n	8011dbc <USBD_GetConfig+0x2c>
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	dc03      	bgt.n	8011dc2 <USBD_GetConfig+0x32>
 8011dba:	e015      	b.n	8011de8 <USBD_GetConfig+0x58>
 8011dbc:	2b03      	cmp	r3, #3
 8011dbe:	d00b      	beq.n	8011dd8 <USBD_GetConfig+0x48>
 8011dc0:	e012      	b.n	8011de8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	2200      	movs	r2, #0
 8011dc6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	3308      	adds	r3, #8
 8011dcc:	2201      	movs	r2, #1
 8011dce:	4619      	mov	r1, r3
 8011dd0:	6878      	ldr	r0, [r7, #4]
 8011dd2:	f000 f920 	bl	8012016 <USBD_CtlSendData>
        break;
 8011dd6:	e00c      	b.n	8011df2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	3304      	adds	r3, #4
 8011ddc:	2201      	movs	r2, #1
 8011dde:	4619      	mov	r1, r3
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f000 f918 	bl	8012016 <USBD_CtlSendData>
        break;
 8011de6:	e004      	b.n	8011df2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8011de8:	6839      	ldr	r1, [r7, #0]
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f000 f8a9 	bl	8011f42 <USBD_CtlError>
        break;
 8011df0:	bf00      	nop
}
 8011df2:	bf00      	nop
 8011df4:	3708      	adds	r7, #8
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}

08011dfa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011dfa:	b580      	push	{r7, lr}
 8011dfc:	b082      	sub	sp, #8
 8011dfe:	af00      	add	r7, sp, #0
 8011e00:	6078      	str	r0, [r7, #4]
 8011e02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e0a:	3b01      	subs	r3, #1
 8011e0c:	2b02      	cmp	r3, #2
 8011e0e:	d81e      	bhi.n	8011e4e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	88db      	ldrh	r3, [r3, #6]
 8011e14:	2b02      	cmp	r3, #2
 8011e16:	d004      	beq.n	8011e22 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8011e18:	6839      	ldr	r1, [r7, #0]
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f000 f891 	bl	8011f42 <USBD_CtlError>
        break;
 8011e20:	e01a      	b.n	8011e58 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	2201      	movs	r2, #1
 8011e26:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d005      	beq.n	8011e3e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	68db      	ldr	r3, [r3, #12]
 8011e36:	f043 0202 	orr.w	r2, r3, #2
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	330c      	adds	r3, #12
 8011e42:	2202      	movs	r2, #2
 8011e44:	4619      	mov	r1, r3
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f000 f8e5 	bl	8012016 <USBD_CtlSendData>
      break;
 8011e4c:	e004      	b.n	8011e58 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8011e4e:	6839      	ldr	r1, [r7, #0]
 8011e50:	6878      	ldr	r0, [r7, #4]
 8011e52:	f000 f876 	bl	8011f42 <USBD_CtlError>
      break;
 8011e56:	bf00      	nop
  }
}
 8011e58:	bf00      	nop
 8011e5a:	3708      	adds	r7, #8
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}

08011e60 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b082      	sub	sp, #8
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011e6a:	683b      	ldr	r3, [r7, #0]
 8011e6c:	885b      	ldrh	r3, [r3, #2]
 8011e6e:	2b01      	cmp	r3, #1
 8011e70:	d106      	bne.n	8011e80 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	2201      	movs	r2, #1
 8011e76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f000 f929 	bl	80120d2 <USBD_CtlSendStatus>
  }
}
 8011e80:	bf00      	nop
 8011e82:	3708      	adds	r7, #8
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bd80      	pop	{r7, pc}

08011e88 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b082      	sub	sp, #8
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
 8011e90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e98:	3b01      	subs	r3, #1
 8011e9a:	2b02      	cmp	r3, #2
 8011e9c:	d80b      	bhi.n	8011eb6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011e9e:	683b      	ldr	r3, [r7, #0]
 8011ea0:	885b      	ldrh	r3, [r3, #2]
 8011ea2:	2b01      	cmp	r3, #1
 8011ea4:	d10c      	bne.n	8011ec0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8011eae:	6878      	ldr	r0, [r7, #4]
 8011eb0:	f000 f90f 	bl	80120d2 <USBD_CtlSendStatus>
      }
      break;
 8011eb4:	e004      	b.n	8011ec0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8011eb6:	6839      	ldr	r1, [r7, #0]
 8011eb8:	6878      	ldr	r0, [r7, #4]
 8011eba:	f000 f842 	bl	8011f42 <USBD_CtlError>
      break;
 8011ebe:	e000      	b.n	8011ec2 <USBD_ClrFeature+0x3a>
      break;
 8011ec0:	bf00      	nop
  }
}
 8011ec2:	bf00      	nop
 8011ec4:	3708      	adds	r7, #8
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	bd80      	pop	{r7, pc}

08011eca <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011eca:	b480      	push	{r7}
 8011ecc:	b083      	sub	sp, #12
 8011ece:	af00      	add	r7, sp, #0
 8011ed0:	6078      	str	r0, [r7, #4]
 8011ed2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	781a      	ldrb	r2, [r3, #0]
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8011edc:	683b      	ldr	r3, [r7, #0]
 8011ede:	785a      	ldrb	r2, [r3, #1]
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	3302      	adds	r3, #2
 8011ee8:	781b      	ldrb	r3, [r3, #0]
 8011eea:	b29a      	uxth	r2, r3
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	3303      	adds	r3, #3
 8011ef0:	781b      	ldrb	r3, [r3, #0]
 8011ef2:	b29b      	uxth	r3, r3
 8011ef4:	021b      	lsls	r3, r3, #8
 8011ef6:	b29b      	uxth	r3, r3
 8011ef8:	4413      	add	r3, r2
 8011efa:	b29a      	uxth	r2, r3
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	3304      	adds	r3, #4
 8011f04:	781b      	ldrb	r3, [r3, #0]
 8011f06:	b29a      	uxth	r2, r3
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	3305      	adds	r3, #5
 8011f0c:	781b      	ldrb	r3, [r3, #0]
 8011f0e:	b29b      	uxth	r3, r3
 8011f10:	021b      	lsls	r3, r3, #8
 8011f12:	b29b      	uxth	r3, r3
 8011f14:	4413      	add	r3, r2
 8011f16:	b29a      	uxth	r2, r3
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	3306      	adds	r3, #6
 8011f20:	781b      	ldrb	r3, [r3, #0]
 8011f22:	b29a      	uxth	r2, r3
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	3307      	adds	r3, #7
 8011f28:	781b      	ldrb	r3, [r3, #0]
 8011f2a:	b29b      	uxth	r3, r3
 8011f2c:	021b      	lsls	r3, r3, #8
 8011f2e:	b29b      	uxth	r3, r3
 8011f30:	4413      	add	r3, r2
 8011f32:	b29a      	uxth	r2, r3
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	80da      	strh	r2, [r3, #6]

}
 8011f38:	bf00      	nop
 8011f3a:	370c      	adds	r7, #12
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bc80      	pop	{r7}
 8011f40:	4770      	bx	lr

08011f42 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8011f42:	b580      	push	{r7, lr}
 8011f44:	b082      	sub	sp, #8
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	6078      	str	r0, [r7, #4]
 8011f4a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8011f4c:	2180      	movs	r1, #128	; 0x80
 8011f4e:	6878      	ldr	r0, [r7, #4]
 8011f50:	f000 fc98 	bl	8012884 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8011f54:	2100      	movs	r1, #0
 8011f56:	6878      	ldr	r0, [r7, #4]
 8011f58:	f000 fc94 	bl	8012884 <USBD_LL_StallEP>
}
 8011f5c:	bf00      	nop
 8011f5e:	3708      	adds	r7, #8
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd80      	pop	{r7, pc}

08011f64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b086      	sub	sp, #24
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	60f8      	str	r0, [r7, #12]
 8011f6c:	60b9      	str	r1, [r7, #8]
 8011f6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011f70:	2300      	movs	r3, #0
 8011f72:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d032      	beq.n	8011fe0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8011f7a:	68f8      	ldr	r0, [r7, #12]
 8011f7c:	f000 f834 	bl	8011fe8 <USBD_GetLen>
 8011f80:	4603      	mov	r3, r0
 8011f82:	3301      	adds	r3, #1
 8011f84:	b29b      	uxth	r3, r3
 8011f86:	005b      	lsls	r3, r3, #1
 8011f88:	b29a      	uxth	r2, r3
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8011f8e:	7dfb      	ldrb	r3, [r7, #23]
 8011f90:	1c5a      	adds	r2, r3, #1
 8011f92:	75fa      	strb	r2, [r7, #23]
 8011f94:	461a      	mov	r2, r3
 8011f96:	68bb      	ldr	r3, [r7, #8]
 8011f98:	4413      	add	r3, r2
 8011f9a:	687a      	ldr	r2, [r7, #4]
 8011f9c:	7812      	ldrb	r2, [r2, #0]
 8011f9e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8011fa0:	7dfb      	ldrb	r3, [r7, #23]
 8011fa2:	1c5a      	adds	r2, r3, #1
 8011fa4:	75fa      	strb	r2, [r7, #23]
 8011fa6:	461a      	mov	r2, r3
 8011fa8:	68bb      	ldr	r3, [r7, #8]
 8011faa:	4413      	add	r3, r2
 8011fac:	2203      	movs	r2, #3
 8011fae:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8011fb0:	e012      	b.n	8011fd8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	1c5a      	adds	r2, r3, #1
 8011fb6:	60fa      	str	r2, [r7, #12]
 8011fb8:	7dfa      	ldrb	r2, [r7, #23]
 8011fba:	1c51      	adds	r1, r2, #1
 8011fbc:	75f9      	strb	r1, [r7, #23]
 8011fbe:	4611      	mov	r1, r2
 8011fc0:	68ba      	ldr	r2, [r7, #8]
 8011fc2:	440a      	add	r2, r1
 8011fc4:	781b      	ldrb	r3, [r3, #0]
 8011fc6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8011fc8:	7dfb      	ldrb	r3, [r7, #23]
 8011fca:	1c5a      	adds	r2, r3, #1
 8011fcc:	75fa      	strb	r2, [r7, #23]
 8011fce:	461a      	mov	r2, r3
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	4413      	add	r3, r2
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	781b      	ldrb	r3, [r3, #0]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d1e8      	bne.n	8011fb2 <USBD_GetString+0x4e>
    }
  }
}
 8011fe0:	bf00      	nop
 8011fe2:	3718      	adds	r7, #24
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd80      	pop	{r7, pc}

08011fe8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011fe8:	b480      	push	{r7}
 8011fea:	b085      	sub	sp, #20
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8011ff4:	e005      	b.n	8012002 <USBD_GetLen+0x1a>
  {
    len++;
 8011ff6:	7bfb      	ldrb	r3, [r7, #15]
 8011ff8:	3301      	adds	r3, #1
 8011ffa:	73fb      	strb	r3, [r7, #15]
    buf++;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	3301      	adds	r3, #1
 8012000:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	781b      	ldrb	r3, [r3, #0]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d1f5      	bne.n	8011ff6 <USBD_GetLen+0xe>
  }

  return len;
 801200a:	7bfb      	ldrb	r3, [r7, #15]
}
 801200c:	4618      	mov	r0, r3
 801200e:	3714      	adds	r7, #20
 8012010:	46bd      	mov	sp, r7
 8012012:	bc80      	pop	{r7}
 8012014:	4770      	bx	lr

08012016 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8012016:	b580      	push	{r7, lr}
 8012018:	b084      	sub	sp, #16
 801201a:	af00      	add	r7, sp, #0
 801201c:	60f8      	str	r0, [r7, #12]
 801201e:	60b9      	str	r1, [r7, #8]
 8012020:	4613      	mov	r3, r2
 8012022:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	2202      	movs	r2, #2
 8012028:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801202c:	88fa      	ldrh	r2, [r7, #6]
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8012032:	88fa      	ldrh	r2, [r7, #6]
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012038:	88fb      	ldrh	r3, [r7, #6]
 801203a:	68ba      	ldr	r2, [r7, #8]
 801203c:	2100      	movs	r1, #0
 801203e:	68f8      	ldr	r0, [r7, #12]
 8012040:	f000 fca9 	bl	8012996 <USBD_LL_Transmit>

  return USBD_OK;
 8012044:	2300      	movs	r3, #0
}
 8012046:	4618      	mov	r0, r3
 8012048:	3710      	adds	r7, #16
 801204a:	46bd      	mov	sp, r7
 801204c:	bd80      	pop	{r7, pc}

0801204e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801204e:	b580      	push	{r7, lr}
 8012050:	b084      	sub	sp, #16
 8012052:	af00      	add	r7, sp, #0
 8012054:	60f8      	str	r0, [r7, #12]
 8012056:	60b9      	str	r1, [r7, #8]
 8012058:	4613      	mov	r3, r2
 801205a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801205c:	88fb      	ldrh	r3, [r7, #6]
 801205e:	68ba      	ldr	r2, [r7, #8]
 8012060:	2100      	movs	r1, #0
 8012062:	68f8      	ldr	r0, [r7, #12]
 8012064:	f000 fc97 	bl	8012996 <USBD_LL_Transmit>

  return USBD_OK;
 8012068:	2300      	movs	r3, #0
}
 801206a:	4618      	mov	r0, r3
 801206c:	3710      	adds	r7, #16
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}

08012072 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8012072:	b580      	push	{r7, lr}
 8012074:	b084      	sub	sp, #16
 8012076:	af00      	add	r7, sp, #0
 8012078:	60f8      	str	r0, [r7, #12]
 801207a:	60b9      	str	r1, [r7, #8]
 801207c:	4613      	mov	r3, r2
 801207e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	2203      	movs	r2, #3
 8012084:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012088:	88fa      	ldrh	r2, [r7, #6]
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8012090:	88fa      	ldrh	r2, [r7, #6]
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012098:	88fb      	ldrh	r3, [r7, #6]
 801209a:	68ba      	ldr	r2, [r7, #8]
 801209c:	2100      	movs	r1, #0
 801209e:	68f8      	ldr	r0, [r7, #12]
 80120a0:	f000 fc9c 	bl	80129dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80120a4:	2300      	movs	r3, #0
}
 80120a6:	4618      	mov	r0, r3
 80120a8:	3710      	adds	r7, #16
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd80      	pop	{r7, pc}

080120ae <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80120ae:	b580      	push	{r7, lr}
 80120b0:	b084      	sub	sp, #16
 80120b2:	af00      	add	r7, sp, #0
 80120b4:	60f8      	str	r0, [r7, #12]
 80120b6:	60b9      	str	r1, [r7, #8]
 80120b8:	4613      	mov	r3, r2
 80120ba:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80120bc:	88fb      	ldrh	r3, [r7, #6]
 80120be:	68ba      	ldr	r2, [r7, #8]
 80120c0:	2100      	movs	r1, #0
 80120c2:	68f8      	ldr	r0, [r7, #12]
 80120c4:	f000 fc8a 	bl	80129dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80120c8:	2300      	movs	r3, #0
}
 80120ca:	4618      	mov	r0, r3
 80120cc:	3710      	adds	r7, #16
 80120ce:	46bd      	mov	sp, r7
 80120d0:	bd80      	pop	{r7, pc}

080120d2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80120d2:	b580      	push	{r7, lr}
 80120d4:	b082      	sub	sp, #8
 80120d6:	af00      	add	r7, sp, #0
 80120d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	2204      	movs	r2, #4
 80120de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80120e2:	2300      	movs	r3, #0
 80120e4:	2200      	movs	r2, #0
 80120e6:	2100      	movs	r1, #0
 80120e8:	6878      	ldr	r0, [r7, #4]
 80120ea:	f000 fc54 	bl	8012996 <USBD_LL_Transmit>

  return USBD_OK;
 80120ee:	2300      	movs	r3, #0
}
 80120f0:	4618      	mov	r0, r3
 80120f2:	3708      	adds	r7, #8
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd80      	pop	{r7, pc}

080120f8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b082      	sub	sp, #8
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	2205      	movs	r2, #5
 8012104:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012108:	2300      	movs	r3, #0
 801210a:	2200      	movs	r2, #0
 801210c:	2100      	movs	r1, #0
 801210e:	6878      	ldr	r0, [r7, #4]
 8012110:	f000 fc64 	bl	80129dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012114:	2300      	movs	r3, #0
}
 8012116:	4618      	mov	r0, r3
 8012118:	3708      	adds	r7, #8
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}
	...

08012120 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b086      	sub	sp, #24
 8012124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
	 /* Rendering hardware reset harmless (no need to replug USB cable): */
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012126:	f107 0308 	add.w	r3, r7, #8
 801212a:	2200      	movs	r2, #0
 801212c:	601a      	str	r2, [r3, #0]
 801212e:	605a      	str	r2, [r3, #4]
 8012130:	609a      	str	r2, [r3, #8]
 8012132:	60da      	str	r2, [r3, #12]

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8012134:	4b25      	ldr	r3, [pc, #148]	; (80121cc <MX_USB_DEVICE_Init+0xac>)
 8012136:	699b      	ldr	r3, [r3, #24]
 8012138:	4a24      	ldr	r2, [pc, #144]	; (80121cc <MX_USB_DEVICE_Init+0xac>)
 801213a:	f043 0304 	orr.w	r3, r3, #4
 801213e:	6193      	str	r3, [r2, #24]
 8012140:	4b22      	ldr	r3, [pc, #136]	; (80121cc <MX_USB_DEVICE_Init+0xac>)
 8012142:	699b      	ldr	r3, [r3, #24]
 8012144:	f003 0304 	and.w	r3, r3, #4
 8012148:	607b      	str	r3, [r7, #4]
 801214a:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 801214c:	2200      	movs	r2, #0
 801214e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012152:	481f      	ldr	r0, [pc, #124]	; (80121d0 <MX_USB_DEVICE_Init+0xb0>)
 8012154:	f7f5 fc79 	bl	8007a4a <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : PA12, a.k.a. USB_DP */
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8012158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801215c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801215e:	2301      	movs	r3, #1
 8012160:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012162:	2300      	movs	r3, #0
 8012164:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012166:	2302      	movs	r3, #2
 8012168:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801216a:	f107 0308 	add.w	r3, r7, #8
 801216e:	4619      	mov	r1, r3
 8012170:	4817      	ldr	r0, [pc, #92]	; (80121d0 <MX_USB_DEVICE_Init+0xb0>)
 8012172:	f7f5 fabf 	bl	80076f4 <HAL_GPIO_Init>

	  HAL_Delay(5);
 8012176:	2005      	movs	r0, #5
 8012178:	f7f4 f874 	bl	8006264 <HAL_Delay>
	  /* Hardware reset rendered harmless! */
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801217c:	2200      	movs	r2, #0
 801217e:	4915      	ldr	r1, [pc, #84]	; (80121d4 <MX_USB_DEVICE_Init+0xb4>)
 8012180:	4815      	ldr	r0, [pc, #84]	; (80121d8 <MX_USB_DEVICE_Init+0xb8>)
 8012182:	f7fe ff32 	bl	8010fea <USBD_Init>
 8012186:	4603      	mov	r3, r0
 8012188:	2b00      	cmp	r3, #0
 801218a:	d001      	beq.n	8012190 <MX_USB_DEVICE_Init+0x70>
  {
    Error_Handler();
 801218c:	f7f2 f972 	bl	8004474 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012190:	4912      	ldr	r1, [pc, #72]	; (80121dc <MX_USB_DEVICE_Init+0xbc>)
 8012192:	4811      	ldr	r0, [pc, #68]	; (80121d8 <MX_USB_DEVICE_Init+0xb8>)
 8012194:	f7fe ff54 	bl	8011040 <USBD_RegisterClass>
 8012198:	4603      	mov	r3, r0
 801219a:	2b00      	cmp	r3, #0
 801219c:	d001      	beq.n	80121a2 <MX_USB_DEVICE_Init+0x82>
  {
    Error_Handler();
 801219e:	f7f2 f969 	bl	8004474 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80121a2:	490f      	ldr	r1, [pc, #60]	; (80121e0 <MX_USB_DEVICE_Init+0xc0>)
 80121a4:	480c      	ldr	r0, [pc, #48]	; (80121d8 <MX_USB_DEVICE_Init+0xb8>)
 80121a6:	f7fe fe85 	bl	8010eb4 <USBD_CDC_RegisterInterface>
 80121aa:	4603      	mov	r3, r0
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d001      	beq.n	80121b4 <MX_USB_DEVICE_Init+0x94>
  {
    Error_Handler();
 80121b0:	f7f2 f960 	bl	8004474 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80121b4:	4808      	ldr	r0, [pc, #32]	; (80121d8 <MX_USB_DEVICE_Init+0xb8>)
 80121b6:	f7fe ff5c 	bl	8011072 <USBD_Start>
 80121ba:	4603      	mov	r3, r0
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d001      	beq.n	80121c4 <MX_USB_DEVICE_Init+0xa4>
  {
    Error_Handler();
 80121c0:	f7f2 f958 	bl	8004474 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80121c4:	bf00      	nop
 80121c6:	3718      	adds	r7, #24
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}
 80121cc:	40021000 	.word	0x40021000
 80121d0:	40010800 	.word	0x40010800
 80121d4:	200007c0 	.word	0x200007c0
 80121d8:	200028b0 	.word	0x200028b0
 80121dc:	200006a4 	.word	0x200006a4
 80121e0:	200007a8 	.word	0x200007a8

080121e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80121e8:	2200      	movs	r2, #0
 80121ea:	4905      	ldr	r1, [pc, #20]	; (8012200 <CDC_Init_FS+0x1c>)
 80121ec:	4805      	ldr	r0, [pc, #20]	; (8012204 <CDC_Init_FS+0x20>)
 80121ee:	f7fe fe77 	bl	8010ee0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80121f2:	4905      	ldr	r1, [pc, #20]	; (8012208 <CDC_Init_FS+0x24>)
 80121f4:	4803      	ldr	r0, [pc, #12]	; (8012204 <CDC_Init_FS+0x20>)
 80121f6:	f7fe fe8c 	bl	8010f12 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80121fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80121fc:	4618      	mov	r0, r3
 80121fe:	bd80      	pop	{r7, pc}
 8012200:	20002f74 	.word	0x20002f74
 8012204:	200028b0 	.word	0x200028b0
 8012208:	20002b74 	.word	0x20002b74

0801220c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801220c:	b480      	push	{r7}
 801220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012210:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012212:	4618      	mov	r0, r3
 8012214:	46bd      	mov	sp, r7
 8012216:	bc80      	pop	{r7}
 8012218:	4770      	bx	lr
	...

0801221c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801221c:	b480      	push	{r7}
 801221e:	b083      	sub	sp, #12
 8012220:	af00      	add	r7, sp, #0
 8012222:	4603      	mov	r3, r0
 8012224:	6039      	str	r1, [r7, #0]
 8012226:	71fb      	strb	r3, [r7, #7]
 8012228:	4613      	mov	r3, r2
 801222a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801222c:	79fb      	ldrb	r3, [r7, #7]
 801222e:	2b23      	cmp	r3, #35	; 0x23
 8012230:	d85c      	bhi.n	80122ec <CDC_Control_FS+0xd0>
 8012232:	a201      	add	r2, pc, #4	; (adr r2, 8012238 <CDC_Control_FS+0x1c>)
 8012234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012238:	080122ed 	.word	0x080122ed
 801223c:	080122ed 	.word	0x080122ed
 8012240:	080122ed 	.word	0x080122ed
 8012244:	080122ed 	.word	0x080122ed
 8012248:	080122ed 	.word	0x080122ed
 801224c:	080122ed 	.word	0x080122ed
 8012250:	080122ed 	.word	0x080122ed
 8012254:	080122ed 	.word	0x080122ed
 8012258:	080122ed 	.word	0x080122ed
 801225c:	080122ed 	.word	0x080122ed
 8012260:	080122ed 	.word	0x080122ed
 8012264:	080122ed 	.word	0x080122ed
 8012268:	080122ed 	.word	0x080122ed
 801226c:	080122ed 	.word	0x080122ed
 8012270:	080122ed 	.word	0x080122ed
 8012274:	080122ed 	.word	0x080122ed
 8012278:	080122ed 	.word	0x080122ed
 801227c:	080122ed 	.word	0x080122ed
 8012280:	080122ed 	.word	0x080122ed
 8012284:	080122ed 	.word	0x080122ed
 8012288:	080122ed 	.word	0x080122ed
 801228c:	080122ed 	.word	0x080122ed
 8012290:	080122ed 	.word	0x080122ed
 8012294:	080122ed 	.word	0x080122ed
 8012298:	080122ed 	.word	0x080122ed
 801229c:	080122ed 	.word	0x080122ed
 80122a0:	080122ed 	.word	0x080122ed
 80122a4:	080122ed 	.word	0x080122ed
 80122a8:	080122ed 	.word	0x080122ed
 80122ac:	080122ed 	.word	0x080122ed
 80122b0:	080122ed 	.word	0x080122ed
 80122b4:	080122ed 	.word	0x080122ed
 80122b8:	080122c9 	.word	0x080122c9
 80122bc:	080122db 	.word	0x080122db
 80122c0:	080122ed 	.word	0x080122ed
 80122c4:	080122ed 	.word	0x080122ed
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit
                    = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };
    case CDC_SET_LINE_CODING:
        	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 80122c8:	4b0c      	ldr	r3, [pc, #48]	; (80122fc <CDC_Control_FS+0xe0>)
 80122ca:	683a      	ldr	r2, [r7, #0]
 80122cc:	6810      	ldr	r0, [r2, #0]
 80122ce:	6018      	str	r0, [r3, #0]
 80122d0:	8891      	ldrh	r1, [r2, #4]
 80122d2:	7992      	ldrb	r2, [r2, #6]
 80122d4:	8099      	strh	r1, [r3, #4]
 80122d6:	719a      	strb	r2, [r3, #6]
    break;
 80122d8:	e009      	b.n	80122ee <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
        	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	4a07      	ldr	r2, [pc, #28]	; (80122fc <CDC_Control_FS+0xe0>)
 80122de:	6810      	ldr	r0, [r2, #0]
 80122e0:	6018      	str	r0, [r3, #0]
 80122e2:	8891      	ldrh	r1, [r2, #4]
 80122e4:	7992      	ldrb	r2, [r2, #6]
 80122e6:	8099      	strh	r1, [r3, #4]
 80122e8:	719a      	strb	r2, [r3, #6]
    break;
 80122ea:	e000      	b.n	80122ee <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80122ec:	bf00      	nop
  }

  return (USBD_OK);
 80122ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80122f0:	4618      	mov	r0, r3
 80122f2:	370c      	adds	r7, #12
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bc80      	pop	{r7}
 80122f8:	4770      	bx	lr
 80122fa:	bf00      	nop
 80122fc:	200007b8 	.word	0x200007b8

08012300 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b082      	sub	sp, #8
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
 8012308:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801230a:	6879      	ldr	r1, [r7, #4]
 801230c:	4808      	ldr	r0, [pc, #32]	; (8012330 <CDC_Receive_FS+0x30>)
 801230e:	f7fe fe00 	bl	8010f12 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012312:	4807      	ldr	r0, [pc, #28]	; (8012330 <CDC_Receive_FS+0x30>)
 8012314:	f7fe fe3f 	bl	8010f96 <USBD_CDC_ReceivePacket>
  CDC_ReveiveCallback(Buf, Len[0]); // My callback function
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	b2db      	uxtb	r3, r3
 801231e:	4619      	mov	r1, r3
 8012320:	6878      	ldr	r0, [r7, #4]
 8012322:	f7f1 fff9 	bl	8004318 <CDC_ReveiveCallback>

  return (USBD_OK);
 8012326:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012328:	4618      	mov	r0, r3
 801232a:	3708      	adds	r7, #8
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}
 8012330:	200028b0 	.word	0x200028b0

08012334 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b084      	sub	sp, #16
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
 801233c:	460b      	mov	r3, r1
 801233e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012340:	2300      	movs	r3, #0
 8012342:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012344:	4b0d      	ldr	r3, [pc, #52]	; (801237c <CDC_Transmit_FS+0x48>)
 8012346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801234a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801234c:	68bb      	ldr	r3, [r7, #8]
 801234e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012352:	2b00      	cmp	r3, #0
 8012354:	d001      	beq.n	801235a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012356:	2301      	movs	r3, #1
 8012358:	e00b      	b.n	8012372 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801235a:	887b      	ldrh	r3, [r7, #2]
 801235c:	461a      	mov	r2, r3
 801235e:	6879      	ldr	r1, [r7, #4]
 8012360:	4806      	ldr	r0, [pc, #24]	; (801237c <CDC_Transmit_FS+0x48>)
 8012362:	f7fe fdbd 	bl	8010ee0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012366:	4805      	ldr	r0, [pc, #20]	; (801237c <CDC_Transmit_FS+0x48>)
 8012368:	f7fe fde6 	bl	8010f38 <USBD_CDC_TransmitPacket>
 801236c:	4603      	mov	r3, r0
 801236e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012370:	7bfb      	ldrb	r3, [r7, #15]
}
 8012372:	4618      	mov	r0, r3
 8012374:	3710      	adds	r7, #16
 8012376:	46bd      	mov	sp, r7
 8012378:	bd80      	pop	{r7, pc}
 801237a:	bf00      	nop
 801237c:	200028b0 	.word	0x200028b0

08012380 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012380:	b480      	push	{r7}
 8012382:	b083      	sub	sp, #12
 8012384:	af00      	add	r7, sp, #0
 8012386:	4603      	mov	r3, r0
 8012388:	6039      	str	r1, [r7, #0]
 801238a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801238c:	683b      	ldr	r3, [r7, #0]
 801238e:	2212      	movs	r2, #18
 8012390:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012392:	4b03      	ldr	r3, [pc, #12]	; (80123a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012394:	4618      	mov	r0, r3
 8012396:	370c      	adds	r7, #12
 8012398:	46bd      	mov	sp, r7
 801239a:	bc80      	pop	{r7}
 801239c:	4770      	bx	lr
 801239e:	bf00      	nop
 80123a0:	200007dc 	.word	0x200007dc

080123a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80123a4:	b480      	push	{r7}
 80123a6:	b083      	sub	sp, #12
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	4603      	mov	r3, r0
 80123ac:	6039      	str	r1, [r7, #0]
 80123ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	2204      	movs	r2, #4
 80123b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80123b6:	4b03      	ldr	r3, [pc, #12]	; (80123c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80123b8:	4618      	mov	r0, r3
 80123ba:	370c      	adds	r7, #12
 80123bc:	46bd      	mov	sp, r7
 80123be:	bc80      	pop	{r7}
 80123c0:	4770      	bx	lr
 80123c2:	bf00      	nop
 80123c4:	200007f0 	.word	0x200007f0

080123c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b082      	sub	sp, #8
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	4603      	mov	r3, r0
 80123d0:	6039      	str	r1, [r7, #0]
 80123d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80123d4:	79fb      	ldrb	r3, [r7, #7]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d105      	bne.n	80123e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80123da:	683a      	ldr	r2, [r7, #0]
 80123dc:	4907      	ldr	r1, [pc, #28]	; (80123fc <USBD_FS_ProductStrDescriptor+0x34>)
 80123de:	4808      	ldr	r0, [pc, #32]	; (8012400 <USBD_FS_ProductStrDescriptor+0x38>)
 80123e0:	f7ff fdc0 	bl	8011f64 <USBD_GetString>
 80123e4:	e004      	b.n	80123f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80123e6:	683a      	ldr	r2, [r7, #0]
 80123e8:	4904      	ldr	r1, [pc, #16]	; (80123fc <USBD_FS_ProductStrDescriptor+0x34>)
 80123ea:	4805      	ldr	r0, [pc, #20]	; (8012400 <USBD_FS_ProductStrDescriptor+0x38>)
 80123ec:	f7ff fdba 	bl	8011f64 <USBD_GetString>
  }
  return USBD_StrDesc;
 80123f0:	4b02      	ldr	r3, [pc, #8]	; (80123fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80123f2:	4618      	mov	r0, r3
 80123f4:	3708      	adds	r7, #8
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bd80      	pop	{r7, pc}
 80123fa:	bf00      	nop
 80123fc:	20003374 	.word	0x20003374
 8012400:	08015ba4 	.word	0x08015ba4

08012404 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b082      	sub	sp, #8
 8012408:	af00      	add	r7, sp, #0
 801240a:	4603      	mov	r3, r0
 801240c:	6039      	str	r1, [r7, #0]
 801240e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012410:	683a      	ldr	r2, [r7, #0]
 8012412:	4904      	ldr	r1, [pc, #16]	; (8012424 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012414:	4804      	ldr	r0, [pc, #16]	; (8012428 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012416:	f7ff fda5 	bl	8011f64 <USBD_GetString>
  return USBD_StrDesc;
 801241a:	4b02      	ldr	r3, [pc, #8]	; (8012424 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801241c:	4618      	mov	r0, r3
 801241e:	3708      	adds	r7, #8
 8012420:	46bd      	mov	sp, r7
 8012422:	bd80      	pop	{r7, pc}
 8012424:	20003374 	.word	0x20003374
 8012428:	08015bbc 	.word	0x08015bbc

0801242c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b082      	sub	sp, #8
 8012430:	af00      	add	r7, sp, #0
 8012432:	4603      	mov	r3, r0
 8012434:	6039      	str	r1, [r7, #0]
 8012436:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012438:	683b      	ldr	r3, [r7, #0]
 801243a:	221a      	movs	r2, #26
 801243c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801243e:	f000 f843 	bl	80124c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012442:	4b02      	ldr	r3, [pc, #8]	; (801244c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012444:	4618      	mov	r0, r3
 8012446:	3708      	adds	r7, #8
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}
 801244c:	200007f4 	.word	0x200007f4

08012450 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b082      	sub	sp, #8
 8012454:	af00      	add	r7, sp, #0
 8012456:	4603      	mov	r3, r0
 8012458:	6039      	str	r1, [r7, #0]
 801245a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801245c:	79fb      	ldrb	r3, [r7, #7]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d105      	bne.n	801246e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012462:	683a      	ldr	r2, [r7, #0]
 8012464:	4907      	ldr	r1, [pc, #28]	; (8012484 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012466:	4808      	ldr	r0, [pc, #32]	; (8012488 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012468:	f7ff fd7c 	bl	8011f64 <USBD_GetString>
 801246c:	e004      	b.n	8012478 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801246e:	683a      	ldr	r2, [r7, #0]
 8012470:	4904      	ldr	r1, [pc, #16]	; (8012484 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012472:	4805      	ldr	r0, [pc, #20]	; (8012488 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012474:	f7ff fd76 	bl	8011f64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012478:	4b02      	ldr	r3, [pc, #8]	; (8012484 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801247a:	4618      	mov	r0, r3
 801247c:	3708      	adds	r7, #8
 801247e:	46bd      	mov	sp, r7
 8012480:	bd80      	pop	{r7, pc}
 8012482:	bf00      	nop
 8012484:	20003374 	.word	0x20003374
 8012488:	08015bc8 	.word	0x08015bc8

0801248c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b082      	sub	sp, #8
 8012490:	af00      	add	r7, sp, #0
 8012492:	4603      	mov	r3, r0
 8012494:	6039      	str	r1, [r7, #0]
 8012496:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012498:	79fb      	ldrb	r3, [r7, #7]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d105      	bne.n	80124aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801249e:	683a      	ldr	r2, [r7, #0]
 80124a0:	4907      	ldr	r1, [pc, #28]	; (80124c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80124a2:	4808      	ldr	r0, [pc, #32]	; (80124c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80124a4:	f7ff fd5e 	bl	8011f64 <USBD_GetString>
 80124a8:	e004      	b.n	80124b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80124aa:	683a      	ldr	r2, [r7, #0]
 80124ac:	4904      	ldr	r1, [pc, #16]	; (80124c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80124ae:	4805      	ldr	r0, [pc, #20]	; (80124c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80124b0:	f7ff fd58 	bl	8011f64 <USBD_GetString>
  }
  return USBD_StrDesc;
 80124b4:	4b02      	ldr	r3, [pc, #8]	; (80124c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80124b6:	4618      	mov	r0, r3
 80124b8:	3708      	adds	r7, #8
 80124ba:	46bd      	mov	sp, r7
 80124bc:	bd80      	pop	{r7, pc}
 80124be:	bf00      	nop
 80124c0:	20003374 	.word	0x20003374
 80124c4:	08015bd4 	.word	0x08015bd4

080124c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b084      	sub	sp, #16
 80124cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80124ce:	4b0f      	ldr	r3, [pc, #60]	; (801250c <Get_SerialNum+0x44>)
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80124d4:	4b0e      	ldr	r3, [pc, #56]	; (8012510 <Get_SerialNum+0x48>)
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80124da:	4b0e      	ldr	r3, [pc, #56]	; (8012514 <Get_SerialNum+0x4c>)
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80124e0:	68fa      	ldr	r2, [r7, #12]
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	4413      	add	r3, r2
 80124e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d009      	beq.n	8012502 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80124ee:	2208      	movs	r2, #8
 80124f0:	4909      	ldr	r1, [pc, #36]	; (8012518 <Get_SerialNum+0x50>)
 80124f2:	68f8      	ldr	r0, [r7, #12]
 80124f4:	f000 f814 	bl	8012520 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80124f8:	2204      	movs	r2, #4
 80124fa:	4908      	ldr	r1, [pc, #32]	; (801251c <Get_SerialNum+0x54>)
 80124fc:	68b8      	ldr	r0, [r7, #8]
 80124fe:	f000 f80f 	bl	8012520 <IntToUnicode>
  }
}
 8012502:	bf00      	nop
 8012504:	3710      	adds	r7, #16
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}
 801250a:	bf00      	nop
 801250c:	1ffff7e8 	.word	0x1ffff7e8
 8012510:	1ffff7ec 	.word	0x1ffff7ec
 8012514:	1ffff7f0 	.word	0x1ffff7f0
 8012518:	200007f6 	.word	0x200007f6
 801251c:	20000806 	.word	0x20000806

08012520 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012520:	b480      	push	{r7}
 8012522:	b087      	sub	sp, #28
 8012524:	af00      	add	r7, sp, #0
 8012526:	60f8      	str	r0, [r7, #12]
 8012528:	60b9      	str	r1, [r7, #8]
 801252a:	4613      	mov	r3, r2
 801252c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801252e:	2300      	movs	r3, #0
 8012530:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012532:	2300      	movs	r3, #0
 8012534:	75fb      	strb	r3, [r7, #23]
 8012536:	e027      	b.n	8012588 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	0f1b      	lsrs	r3, r3, #28
 801253c:	2b09      	cmp	r3, #9
 801253e:	d80b      	bhi.n	8012558 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	0f1b      	lsrs	r3, r3, #28
 8012544:	b2da      	uxtb	r2, r3
 8012546:	7dfb      	ldrb	r3, [r7, #23]
 8012548:	005b      	lsls	r3, r3, #1
 801254a:	4619      	mov	r1, r3
 801254c:	68bb      	ldr	r3, [r7, #8]
 801254e:	440b      	add	r3, r1
 8012550:	3230      	adds	r2, #48	; 0x30
 8012552:	b2d2      	uxtb	r2, r2
 8012554:	701a      	strb	r2, [r3, #0]
 8012556:	e00a      	b.n	801256e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	0f1b      	lsrs	r3, r3, #28
 801255c:	b2da      	uxtb	r2, r3
 801255e:	7dfb      	ldrb	r3, [r7, #23]
 8012560:	005b      	lsls	r3, r3, #1
 8012562:	4619      	mov	r1, r3
 8012564:	68bb      	ldr	r3, [r7, #8]
 8012566:	440b      	add	r3, r1
 8012568:	3237      	adds	r2, #55	; 0x37
 801256a:	b2d2      	uxtb	r2, r2
 801256c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	011b      	lsls	r3, r3, #4
 8012572:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012574:	7dfb      	ldrb	r3, [r7, #23]
 8012576:	005b      	lsls	r3, r3, #1
 8012578:	3301      	adds	r3, #1
 801257a:	68ba      	ldr	r2, [r7, #8]
 801257c:	4413      	add	r3, r2
 801257e:	2200      	movs	r2, #0
 8012580:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012582:	7dfb      	ldrb	r3, [r7, #23]
 8012584:	3301      	adds	r3, #1
 8012586:	75fb      	strb	r3, [r7, #23]
 8012588:	7dfa      	ldrb	r2, [r7, #23]
 801258a:	79fb      	ldrb	r3, [r7, #7]
 801258c:	429a      	cmp	r2, r3
 801258e:	d3d3      	bcc.n	8012538 <IntToUnicode+0x18>
  }
}
 8012590:	bf00      	nop
 8012592:	bf00      	nop
 8012594:	371c      	adds	r7, #28
 8012596:	46bd      	mov	sp, r7
 8012598:	bc80      	pop	{r7}
 801259a:	4770      	bx	lr

0801259c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801259c:	b480      	push	{r7}
 801259e:	b085      	sub	sp, #20
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	4a09      	ldr	r2, [pc, #36]	; (80125d0 <HAL_PCD_MspInit+0x34>)
 80125aa:	4293      	cmp	r3, r2
 80125ac:	d10b      	bne.n	80125c6 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80125ae:	4b09      	ldr	r3, [pc, #36]	; (80125d4 <HAL_PCD_MspInit+0x38>)
 80125b0:	69db      	ldr	r3, [r3, #28]
 80125b2:	4a08      	ldr	r2, [pc, #32]	; (80125d4 <HAL_PCD_MspInit+0x38>)
 80125b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80125b8:	61d3      	str	r3, [r2, #28]
 80125ba:	4b06      	ldr	r3, [pc, #24]	; (80125d4 <HAL_PCD_MspInit+0x38>)
 80125bc:	69db      	ldr	r3, [r3, #28]
 80125be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80125c2:	60fb      	str	r3, [r7, #12]
 80125c4:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80125c6:	bf00      	nop
 80125c8:	3714      	adds	r7, #20
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bc80      	pop	{r7}
 80125ce:	4770      	bx	lr
 80125d0:	40005c00 	.word	0x40005c00
 80125d4:	40021000 	.word	0x40021000

080125d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b082      	sub	sp, #8
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80125ec:	4619      	mov	r1, r3
 80125ee:	4610      	mov	r0, r2
 80125f0:	f7fe fd87 	bl	8011102 <USBD_LL_SetupStage>
}
 80125f4:	bf00      	nop
 80125f6:	3708      	adds	r7, #8
 80125f8:	46bd      	mov	sp, r7
 80125fa:	bd80      	pop	{r7, pc}

080125fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80125fc:	b580      	push	{r7, lr}
 80125fe:	b082      	sub	sp, #8
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
 8012604:	460b      	mov	r3, r1
 8012606:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 801260e:	78fa      	ldrb	r2, [r7, #3]
 8012610:	6879      	ldr	r1, [r7, #4]
 8012612:	4613      	mov	r3, r2
 8012614:	009b      	lsls	r3, r3, #2
 8012616:	4413      	add	r3, r2
 8012618:	00db      	lsls	r3, r3, #3
 801261a:	440b      	add	r3, r1
 801261c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8012620:	681a      	ldr	r2, [r3, #0]
 8012622:	78fb      	ldrb	r3, [r7, #3]
 8012624:	4619      	mov	r1, r3
 8012626:	f7fe fdb9 	bl	801119c <USBD_LL_DataOutStage>
}
 801262a:	bf00      	nop
 801262c:	3708      	adds	r7, #8
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}

08012632 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012632:	b580      	push	{r7, lr}
 8012634:	b082      	sub	sp, #8
 8012636:	af00      	add	r7, sp, #0
 8012638:	6078      	str	r0, [r7, #4]
 801263a:	460b      	mov	r3, r1
 801263c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8012644:	78fa      	ldrb	r2, [r7, #3]
 8012646:	6879      	ldr	r1, [r7, #4]
 8012648:	4613      	mov	r3, r2
 801264a:	009b      	lsls	r3, r3, #2
 801264c:	4413      	add	r3, r2
 801264e:	00db      	lsls	r3, r3, #3
 8012650:	440b      	add	r3, r1
 8012652:	333c      	adds	r3, #60	; 0x3c
 8012654:	681a      	ldr	r2, [r3, #0]
 8012656:	78fb      	ldrb	r3, [r7, #3]
 8012658:	4619      	mov	r1, r3
 801265a:	f7fe fe10 	bl	801127e <USBD_LL_DataInStage>
}
 801265e:	bf00      	nop
 8012660:	3708      	adds	r7, #8
 8012662:	46bd      	mov	sp, r7
 8012664:	bd80      	pop	{r7, pc}

08012666 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012666:	b580      	push	{r7, lr}
 8012668:	b082      	sub	sp, #8
 801266a:	af00      	add	r7, sp, #0
 801266c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8012674:	4618      	mov	r0, r3
 8012676:	f7fe ff20 	bl	80114ba <USBD_LL_SOF>
}
 801267a:	bf00      	nop
 801267c:	3708      	adds	r7, #8
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}

08012682 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012682:	b580      	push	{r7, lr}
 8012684:	b084      	sub	sp, #16
 8012686:	af00      	add	r7, sp, #0
 8012688:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801268a:	2301      	movs	r3, #1
 801268c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	689b      	ldr	r3, [r3, #8]
 8012692:	2b02      	cmp	r3, #2
 8012694:	d001      	beq.n	801269a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012696:	f7f1 feed 	bl	8004474 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80126a0:	7bfa      	ldrb	r2, [r7, #15]
 80126a2:	4611      	mov	r1, r2
 80126a4:	4618      	mov	r0, r3
 80126a6:	f7fe fed0 	bl	801144a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80126b0:	4618      	mov	r0, r3
 80126b2:	f7fe fe89 	bl	80113c8 <USBD_LL_Reset>
}
 80126b6:	bf00      	nop
 80126b8:	3710      	adds	r7, #16
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bd80      	pop	{r7, pc}
	...

080126c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b082      	sub	sp, #8
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80126ce:	4618      	mov	r0, r3
 80126d0:	f7fe feca 	bl	8011468 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	699b      	ldr	r3, [r3, #24]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d005      	beq.n	80126e8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80126dc:	4b04      	ldr	r3, [pc, #16]	; (80126f0 <HAL_PCD_SuspendCallback+0x30>)
 80126de:	691b      	ldr	r3, [r3, #16]
 80126e0:	4a03      	ldr	r2, [pc, #12]	; (80126f0 <HAL_PCD_SuspendCallback+0x30>)
 80126e2:	f043 0306 	orr.w	r3, r3, #6
 80126e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80126e8:	bf00      	nop
 80126ea:	3708      	adds	r7, #8
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}
 80126f0:	e000ed00 	.word	0xe000ed00

080126f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b082      	sub	sp, #8
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8012702:	4618      	mov	r0, r3
 8012704:	f7fe fec4 	bl	8011490 <USBD_LL_Resume>
}
 8012708:	bf00      	nop
 801270a:	3708      	adds	r7, #8
 801270c:	46bd      	mov	sp, r7
 801270e:	bd80      	pop	{r7, pc}

08012710 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b082      	sub	sp, #8
 8012714:	af00      	add	r7, sp, #0
 8012716:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8012718:	4a28      	ldr	r2, [pc, #160]	; (80127bc <USBD_LL_Init+0xac>)
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	4a26      	ldr	r2, [pc, #152]	; (80127bc <USBD_LL_Init+0xac>)
 8012724:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8012728:	4b24      	ldr	r3, [pc, #144]	; (80127bc <USBD_LL_Init+0xac>)
 801272a:	4a25      	ldr	r2, [pc, #148]	; (80127c0 <USBD_LL_Init+0xb0>)
 801272c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801272e:	4b23      	ldr	r3, [pc, #140]	; (80127bc <USBD_LL_Init+0xac>)
 8012730:	2208      	movs	r2, #8
 8012732:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8012734:	4b21      	ldr	r3, [pc, #132]	; (80127bc <USBD_LL_Init+0xac>)
 8012736:	2202      	movs	r2, #2
 8012738:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801273a:	4b20      	ldr	r3, [pc, #128]	; (80127bc <USBD_LL_Init+0xac>)
 801273c:	2200      	movs	r2, #0
 801273e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8012740:	4b1e      	ldr	r3, [pc, #120]	; (80127bc <USBD_LL_Init+0xac>)
 8012742:	2200      	movs	r2, #0
 8012744:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8012746:	4b1d      	ldr	r3, [pc, #116]	; (80127bc <USBD_LL_Init+0xac>)
 8012748:	2200      	movs	r2, #0
 801274a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801274c:	481b      	ldr	r0, [pc, #108]	; (80127bc <USBD_LL_Init+0xac>)
 801274e:	f7f8 fab2 	bl	800acb6 <HAL_PCD_Init>
 8012752:	4603      	mov	r3, r0
 8012754:	2b00      	cmp	r3, #0
 8012756:	d001      	beq.n	801275c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8012758:	f7f1 fe8c 	bl	8004474 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8012762:	2318      	movs	r3, #24
 8012764:	2200      	movs	r2, #0
 8012766:	2100      	movs	r1, #0
 8012768:	f7f9 ffd1 	bl	800c70e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8012772:	2358      	movs	r3, #88	; 0x58
 8012774:	2200      	movs	r2, #0
 8012776:	2180      	movs	r1, #128	; 0x80
 8012778:	f7f9 ffc9 	bl	800c70e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8012782:	23c0      	movs	r3, #192	; 0xc0
 8012784:	2200      	movs	r2, #0
 8012786:	2181      	movs	r1, #129	; 0x81
 8012788:	f7f9 ffc1 	bl	800c70e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8012792:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012796:	2200      	movs	r2, #0
 8012798:	2101      	movs	r1, #1
 801279a:	f7f9 ffb8 	bl	800c70e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80127a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80127a8:	2200      	movs	r2, #0
 80127aa:	2182      	movs	r1, #130	; 0x82
 80127ac:	f7f9 ffaf 	bl	800c70e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80127b0:	2300      	movs	r3, #0
}
 80127b2:	4618      	mov	r0, r3
 80127b4:	3708      	adds	r7, #8
 80127b6:	46bd      	mov	sp, r7
 80127b8:	bd80      	pop	{r7, pc}
 80127ba:	bf00      	nop
 80127bc:	20003574 	.word	0x20003574
 80127c0:	40005c00 	.word	0x40005c00

080127c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80127c4:	b580      	push	{r7, lr}
 80127c6:	b084      	sub	sp, #16
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127cc:	2300      	movs	r3, #0
 80127ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80127d0:	2300      	movs	r3, #0
 80127d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80127da:	4618      	mov	r0, r3
 80127dc:	f7f8 fb6a 	bl	800aeb4 <HAL_PCD_Start>
 80127e0:	4603      	mov	r3, r0
 80127e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80127e4:	7bfb      	ldrb	r3, [r7, #15]
 80127e6:	4618      	mov	r0, r3
 80127e8:	f000 f94e 	bl	8012a88 <USBD_Get_USB_Status>
 80127ec:	4603      	mov	r3, r0
 80127ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80127f2:	4618      	mov	r0, r3
 80127f4:	3710      	adds	r7, #16
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}

080127fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80127fa:	b580      	push	{r7, lr}
 80127fc:	b084      	sub	sp, #16
 80127fe:	af00      	add	r7, sp, #0
 8012800:	6078      	str	r0, [r7, #4]
 8012802:	4608      	mov	r0, r1
 8012804:	4611      	mov	r1, r2
 8012806:	461a      	mov	r2, r3
 8012808:	4603      	mov	r3, r0
 801280a:	70fb      	strb	r3, [r7, #3]
 801280c:	460b      	mov	r3, r1
 801280e:	70bb      	strb	r3, [r7, #2]
 8012810:	4613      	mov	r3, r2
 8012812:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012814:	2300      	movs	r3, #0
 8012816:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012818:	2300      	movs	r3, #0
 801281a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8012822:	78bb      	ldrb	r3, [r7, #2]
 8012824:	883a      	ldrh	r2, [r7, #0]
 8012826:	78f9      	ldrb	r1, [r7, #3]
 8012828:	f7f8 fcbf 	bl	800b1aa <HAL_PCD_EP_Open>
 801282c:	4603      	mov	r3, r0
 801282e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012830:	7bfb      	ldrb	r3, [r7, #15]
 8012832:	4618      	mov	r0, r3
 8012834:	f000 f928 	bl	8012a88 <USBD_Get_USB_Status>
 8012838:	4603      	mov	r3, r0
 801283a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801283c:	7bbb      	ldrb	r3, [r7, #14]
}
 801283e:	4618      	mov	r0, r3
 8012840:	3710      	adds	r7, #16
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}

08012846 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012846:	b580      	push	{r7, lr}
 8012848:	b084      	sub	sp, #16
 801284a:	af00      	add	r7, sp, #0
 801284c:	6078      	str	r0, [r7, #4]
 801284e:	460b      	mov	r3, r1
 8012850:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012852:	2300      	movs	r3, #0
 8012854:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012856:	2300      	movs	r3, #0
 8012858:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012860:	78fa      	ldrb	r2, [r7, #3]
 8012862:	4611      	mov	r1, r2
 8012864:	4618      	mov	r0, r3
 8012866:	f7f8 fcfd 	bl	800b264 <HAL_PCD_EP_Close>
 801286a:	4603      	mov	r3, r0
 801286c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801286e:	7bfb      	ldrb	r3, [r7, #15]
 8012870:	4618      	mov	r0, r3
 8012872:	f000 f909 	bl	8012a88 <USBD_Get_USB_Status>
 8012876:	4603      	mov	r3, r0
 8012878:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801287a:	7bbb      	ldrb	r3, [r7, #14]
}
 801287c:	4618      	mov	r0, r3
 801287e:	3710      	adds	r7, #16
 8012880:	46bd      	mov	sp, r7
 8012882:	bd80      	pop	{r7, pc}

08012884 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b084      	sub	sp, #16
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
 801288c:	460b      	mov	r3, r1
 801288e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012890:	2300      	movs	r3, #0
 8012892:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012894:	2300      	movs	r3, #0
 8012896:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801289e:	78fa      	ldrb	r2, [r7, #3]
 80128a0:	4611      	mov	r1, r2
 80128a2:	4618      	mov	r0, r3
 80128a4:	f7f8 fda5 	bl	800b3f2 <HAL_PCD_EP_SetStall>
 80128a8:	4603      	mov	r3, r0
 80128aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128ac:	7bfb      	ldrb	r3, [r7, #15]
 80128ae:	4618      	mov	r0, r3
 80128b0:	f000 f8ea 	bl	8012a88 <USBD_Get_USB_Status>
 80128b4:	4603      	mov	r3, r0
 80128b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	3710      	adds	r7, #16
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd80      	pop	{r7, pc}

080128c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80128c2:	b580      	push	{r7, lr}
 80128c4:	b084      	sub	sp, #16
 80128c6:	af00      	add	r7, sp, #0
 80128c8:	6078      	str	r0, [r7, #4]
 80128ca:	460b      	mov	r3, r1
 80128cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80128ce:	2300      	movs	r3, #0
 80128d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80128d2:	2300      	movs	r3, #0
 80128d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80128dc:	78fa      	ldrb	r2, [r7, #3]
 80128de:	4611      	mov	r1, r2
 80128e0:	4618      	mov	r0, r3
 80128e2:	f7f8 fde6 	bl	800b4b2 <HAL_PCD_EP_ClrStall>
 80128e6:	4603      	mov	r3, r0
 80128e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80128ea:	7bfb      	ldrb	r3, [r7, #15]
 80128ec:	4618      	mov	r0, r3
 80128ee:	f000 f8cb 	bl	8012a88 <USBD_Get_USB_Status>
 80128f2:	4603      	mov	r3, r0
 80128f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80128f8:	4618      	mov	r0, r3
 80128fa:	3710      	adds	r7, #16
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}

08012900 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012900:	b480      	push	{r7}
 8012902:	b085      	sub	sp, #20
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
 8012908:	460b      	mov	r3, r1
 801290a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012912:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012914:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012918:	2b00      	cmp	r3, #0
 801291a:	da0c      	bge.n	8012936 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801291c:	78fb      	ldrb	r3, [r7, #3]
 801291e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012922:	68f9      	ldr	r1, [r7, #12]
 8012924:	1c5a      	adds	r2, r3, #1
 8012926:	4613      	mov	r3, r2
 8012928:	009b      	lsls	r3, r3, #2
 801292a:	4413      	add	r3, r2
 801292c:	00db      	lsls	r3, r3, #3
 801292e:	440b      	add	r3, r1
 8012930:	3302      	adds	r3, #2
 8012932:	781b      	ldrb	r3, [r3, #0]
 8012934:	e00b      	b.n	801294e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012936:	78fb      	ldrb	r3, [r7, #3]
 8012938:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801293c:	68f9      	ldr	r1, [r7, #12]
 801293e:	4613      	mov	r3, r2
 8012940:	009b      	lsls	r3, r3, #2
 8012942:	4413      	add	r3, r2
 8012944:	00db      	lsls	r3, r3, #3
 8012946:	440b      	add	r3, r1
 8012948:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 801294c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801294e:	4618      	mov	r0, r3
 8012950:	3714      	adds	r7, #20
 8012952:	46bd      	mov	sp, r7
 8012954:	bc80      	pop	{r7}
 8012956:	4770      	bx	lr

08012958 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b084      	sub	sp, #16
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
 8012960:	460b      	mov	r3, r1
 8012962:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012964:	2300      	movs	r3, #0
 8012966:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012968:	2300      	movs	r3, #0
 801296a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012972:	78fa      	ldrb	r2, [r7, #3]
 8012974:	4611      	mov	r1, r2
 8012976:	4618      	mov	r0, r3
 8012978:	f7f8 fbf2 	bl	800b160 <HAL_PCD_SetAddress>
 801297c:	4603      	mov	r3, r0
 801297e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012980:	7bfb      	ldrb	r3, [r7, #15]
 8012982:	4618      	mov	r0, r3
 8012984:	f000 f880 	bl	8012a88 <USBD_Get_USB_Status>
 8012988:	4603      	mov	r3, r0
 801298a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801298c:	7bbb      	ldrb	r3, [r7, #14]
}
 801298e:	4618      	mov	r0, r3
 8012990:	3710      	adds	r7, #16
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}

08012996 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8012996:	b580      	push	{r7, lr}
 8012998:	b086      	sub	sp, #24
 801299a:	af00      	add	r7, sp, #0
 801299c:	60f8      	str	r0, [r7, #12]
 801299e:	607a      	str	r2, [r7, #4]
 80129a0:	461a      	mov	r2, r3
 80129a2:	460b      	mov	r3, r1
 80129a4:	72fb      	strb	r3, [r7, #11]
 80129a6:	4613      	mov	r3, r2
 80129a8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80129aa:	2300      	movs	r3, #0
 80129ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129ae:	2300      	movs	r3, #0
 80129b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80129b8:	893b      	ldrh	r3, [r7, #8]
 80129ba:	7af9      	ldrb	r1, [r7, #11]
 80129bc:	687a      	ldr	r2, [r7, #4]
 80129be:	f7f8 fce1 	bl	800b384 <HAL_PCD_EP_Transmit>
 80129c2:	4603      	mov	r3, r0
 80129c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80129c6:	7dfb      	ldrb	r3, [r7, #23]
 80129c8:	4618      	mov	r0, r3
 80129ca:	f000 f85d 	bl	8012a88 <USBD_Get_USB_Status>
 80129ce:	4603      	mov	r3, r0
 80129d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80129d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80129d4:	4618      	mov	r0, r3
 80129d6:	3718      	adds	r7, #24
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}

080129dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b086      	sub	sp, #24
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	60f8      	str	r0, [r7, #12]
 80129e4:	607a      	str	r2, [r7, #4]
 80129e6:	461a      	mov	r2, r3
 80129e8:	460b      	mov	r3, r1
 80129ea:	72fb      	strb	r3, [r7, #11]
 80129ec:	4613      	mov	r3, r2
 80129ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80129f0:	2300      	movs	r3, #0
 80129f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129f4:	2300      	movs	r3, #0
 80129f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80129fe:	893b      	ldrh	r3, [r7, #8]
 8012a00:	7af9      	ldrb	r1, [r7, #11]
 8012a02:	687a      	ldr	r2, [r7, #4]
 8012a04:	f7f8 fc76 	bl	800b2f4 <HAL_PCD_EP_Receive>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a0c:	7dfb      	ldrb	r3, [r7, #23]
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f000 f83a 	bl	8012a88 <USBD_Get_USB_Status>
 8012a14:	4603      	mov	r3, r0
 8012a16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012a18:	7dbb      	ldrb	r3, [r7, #22]
}
 8012a1a:	4618      	mov	r0, r3
 8012a1c:	3718      	adds	r7, #24
 8012a1e:	46bd      	mov	sp, r7
 8012a20:	bd80      	pop	{r7, pc}

08012a22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012a22:	b580      	push	{r7, lr}
 8012a24:	b082      	sub	sp, #8
 8012a26:	af00      	add	r7, sp, #0
 8012a28:	6078      	str	r0, [r7, #4]
 8012a2a:	460b      	mov	r3, r1
 8012a2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012a34:	78fa      	ldrb	r2, [r7, #3]
 8012a36:	4611      	mov	r1, r2
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f7f8 fc8c 	bl	800b356 <HAL_PCD_EP_GetRxCount>
 8012a3e:	4603      	mov	r3, r0
}
 8012a40:	4618      	mov	r0, r3
 8012a42:	3708      	adds	r7, #8
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}

08012a48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012a48:	b480      	push	{r7}
 8012a4a:	b083      	sub	sp, #12
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012a50:	4b02      	ldr	r3, [pc, #8]	; (8012a5c <USBD_static_malloc+0x14>)
}
 8012a52:	4618      	mov	r0, r3
 8012a54:	370c      	adds	r7, #12
 8012a56:	46bd      	mov	sp, r7
 8012a58:	bc80      	pop	{r7}
 8012a5a:	4770      	bx	lr
 8012a5c:	20003864 	.word	0x20003864

08012a60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012a60:	b480      	push	{r7}
 8012a62:	b083      	sub	sp, #12
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]

}
 8012a68:	bf00      	nop
 8012a6a:	370c      	adds	r7, #12
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bc80      	pop	{r7}
 8012a70:	4770      	bx	lr

08012a72 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a72:	b480      	push	{r7}
 8012a74:	b083      	sub	sp, #12
 8012a76:	af00      	add	r7, sp, #0
 8012a78:	6078      	str	r0, [r7, #4]
 8012a7a:	460b      	mov	r3, r1
 8012a7c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8012a7e:	bf00      	nop
 8012a80:	370c      	adds	r7, #12
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bc80      	pop	{r7}
 8012a86:	4770      	bx	lr

08012a88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012a88:	b480      	push	{r7}
 8012a8a:	b085      	sub	sp, #20
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	4603      	mov	r3, r0
 8012a90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a92:	2300      	movs	r3, #0
 8012a94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012a96:	79fb      	ldrb	r3, [r7, #7]
 8012a98:	2b03      	cmp	r3, #3
 8012a9a:	d817      	bhi.n	8012acc <USBD_Get_USB_Status+0x44>
 8012a9c:	a201      	add	r2, pc, #4	; (adr r2, 8012aa4 <USBD_Get_USB_Status+0x1c>)
 8012a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aa2:	bf00      	nop
 8012aa4:	08012ab5 	.word	0x08012ab5
 8012aa8:	08012abb 	.word	0x08012abb
 8012aac:	08012ac1 	.word	0x08012ac1
 8012ab0:	08012ac7 	.word	0x08012ac7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8012ab8:	e00b      	b.n	8012ad2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012aba:	2302      	movs	r3, #2
 8012abc:	73fb      	strb	r3, [r7, #15]
    break;
 8012abe:	e008      	b.n	8012ad2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012ac0:	2301      	movs	r3, #1
 8012ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8012ac4:	e005      	b.n	8012ad2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012ac6:	2302      	movs	r3, #2
 8012ac8:	73fb      	strb	r3, [r7, #15]
    break;
 8012aca:	e002      	b.n	8012ad2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012acc:	2302      	movs	r3, #2
 8012ace:	73fb      	strb	r3, [r7, #15]
    break;
 8012ad0:	bf00      	nop
  }
  return usb_status;
 8012ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	3714      	adds	r7, #20
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bc80      	pop	{r7}
 8012adc:	4770      	bx	lr
 8012ade:	bf00      	nop

08012ae0 <atoi>:
 8012ae0:	220a      	movs	r2, #10
 8012ae2:	2100      	movs	r1, #0
 8012ae4:	f000 b87e 	b.w	8012be4 <strtol>

08012ae8 <_strtol_l.constprop.0>:
 8012ae8:	2b01      	cmp	r3, #1
 8012aea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012aee:	4686      	mov	lr, r0
 8012af0:	4690      	mov	r8, r2
 8012af2:	d001      	beq.n	8012af8 <_strtol_l.constprop.0+0x10>
 8012af4:	2b24      	cmp	r3, #36	; 0x24
 8012af6:	d906      	bls.n	8012b06 <_strtol_l.constprop.0+0x1e>
 8012af8:	f000 fe9e 	bl	8013838 <__errno>
 8012afc:	2316      	movs	r3, #22
 8012afe:	6003      	str	r3, [r0, #0]
 8012b00:	2000      	movs	r0, #0
 8012b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b06:	460d      	mov	r5, r1
 8012b08:	4835      	ldr	r0, [pc, #212]	; (8012be0 <_strtol_l.constprop.0+0xf8>)
 8012b0a:	462a      	mov	r2, r5
 8012b0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b10:	5d06      	ldrb	r6, [r0, r4]
 8012b12:	f016 0608 	ands.w	r6, r6, #8
 8012b16:	d1f8      	bne.n	8012b0a <_strtol_l.constprop.0+0x22>
 8012b18:	2c2d      	cmp	r4, #45	; 0x2d
 8012b1a:	d12e      	bne.n	8012b7a <_strtol_l.constprop.0+0x92>
 8012b1c:	2601      	movs	r6, #1
 8012b1e:	782c      	ldrb	r4, [r5, #0]
 8012b20:	1c95      	adds	r5, r2, #2
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d057      	beq.n	8012bd6 <_strtol_l.constprop.0+0xee>
 8012b26:	2b10      	cmp	r3, #16
 8012b28:	d109      	bne.n	8012b3e <_strtol_l.constprop.0+0x56>
 8012b2a:	2c30      	cmp	r4, #48	; 0x30
 8012b2c:	d107      	bne.n	8012b3e <_strtol_l.constprop.0+0x56>
 8012b2e:	782a      	ldrb	r2, [r5, #0]
 8012b30:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8012b34:	2a58      	cmp	r2, #88	; 0x58
 8012b36:	d149      	bne.n	8012bcc <_strtol_l.constprop.0+0xe4>
 8012b38:	2310      	movs	r3, #16
 8012b3a:	786c      	ldrb	r4, [r5, #1]
 8012b3c:	3502      	adds	r5, #2
 8012b3e:	2200      	movs	r2, #0
 8012b40:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8012b44:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012b48:	fbbc f9f3 	udiv	r9, ip, r3
 8012b4c:	4610      	mov	r0, r2
 8012b4e:	fb03 ca19 	mls	sl, r3, r9, ip
 8012b52:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8012b56:	2f09      	cmp	r7, #9
 8012b58:	d814      	bhi.n	8012b84 <_strtol_l.constprop.0+0x9c>
 8012b5a:	463c      	mov	r4, r7
 8012b5c:	42a3      	cmp	r3, r4
 8012b5e:	dd20      	ble.n	8012ba2 <_strtol_l.constprop.0+0xba>
 8012b60:	1c57      	adds	r7, r2, #1
 8012b62:	d007      	beq.n	8012b74 <_strtol_l.constprop.0+0x8c>
 8012b64:	4581      	cmp	r9, r0
 8012b66:	d319      	bcc.n	8012b9c <_strtol_l.constprop.0+0xb4>
 8012b68:	d101      	bne.n	8012b6e <_strtol_l.constprop.0+0x86>
 8012b6a:	45a2      	cmp	sl, r4
 8012b6c:	db16      	blt.n	8012b9c <_strtol_l.constprop.0+0xb4>
 8012b6e:	2201      	movs	r2, #1
 8012b70:	fb00 4003 	mla	r0, r0, r3, r4
 8012b74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012b78:	e7eb      	b.n	8012b52 <_strtol_l.constprop.0+0x6a>
 8012b7a:	2c2b      	cmp	r4, #43	; 0x2b
 8012b7c:	bf04      	itt	eq
 8012b7e:	782c      	ldrbeq	r4, [r5, #0]
 8012b80:	1c95      	addeq	r5, r2, #2
 8012b82:	e7ce      	b.n	8012b22 <_strtol_l.constprop.0+0x3a>
 8012b84:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8012b88:	2f19      	cmp	r7, #25
 8012b8a:	d801      	bhi.n	8012b90 <_strtol_l.constprop.0+0xa8>
 8012b8c:	3c37      	subs	r4, #55	; 0x37
 8012b8e:	e7e5      	b.n	8012b5c <_strtol_l.constprop.0+0x74>
 8012b90:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8012b94:	2f19      	cmp	r7, #25
 8012b96:	d804      	bhi.n	8012ba2 <_strtol_l.constprop.0+0xba>
 8012b98:	3c57      	subs	r4, #87	; 0x57
 8012b9a:	e7df      	b.n	8012b5c <_strtol_l.constprop.0+0x74>
 8012b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8012ba0:	e7e8      	b.n	8012b74 <_strtol_l.constprop.0+0x8c>
 8012ba2:	1c53      	adds	r3, r2, #1
 8012ba4:	d108      	bne.n	8012bb8 <_strtol_l.constprop.0+0xd0>
 8012ba6:	2322      	movs	r3, #34	; 0x22
 8012ba8:	4660      	mov	r0, ip
 8012baa:	f8ce 3000 	str.w	r3, [lr]
 8012bae:	f1b8 0f00 	cmp.w	r8, #0
 8012bb2:	d0a6      	beq.n	8012b02 <_strtol_l.constprop.0+0x1a>
 8012bb4:	1e69      	subs	r1, r5, #1
 8012bb6:	e006      	b.n	8012bc6 <_strtol_l.constprop.0+0xde>
 8012bb8:	b106      	cbz	r6, 8012bbc <_strtol_l.constprop.0+0xd4>
 8012bba:	4240      	negs	r0, r0
 8012bbc:	f1b8 0f00 	cmp.w	r8, #0
 8012bc0:	d09f      	beq.n	8012b02 <_strtol_l.constprop.0+0x1a>
 8012bc2:	2a00      	cmp	r2, #0
 8012bc4:	d1f6      	bne.n	8012bb4 <_strtol_l.constprop.0+0xcc>
 8012bc6:	f8c8 1000 	str.w	r1, [r8]
 8012bca:	e79a      	b.n	8012b02 <_strtol_l.constprop.0+0x1a>
 8012bcc:	2430      	movs	r4, #48	; 0x30
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d1b5      	bne.n	8012b3e <_strtol_l.constprop.0+0x56>
 8012bd2:	2308      	movs	r3, #8
 8012bd4:	e7b3      	b.n	8012b3e <_strtol_l.constprop.0+0x56>
 8012bd6:	2c30      	cmp	r4, #48	; 0x30
 8012bd8:	d0a9      	beq.n	8012b2e <_strtol_l.constprop.0+0x46>
 8012bda:	230a      	movs	r3, #10
 8012bdc:	e7af      	b.n	8012b3e <_strtol_l.constprop.0+0x56>
 8012bde:	bf00      	nop
 8012be0:	08015df7 	.word	0x08015df7

08012be4 <strtol>:
 8012be4:	4613      	mov	r3, r2
 8012be6:	460a      	mov	r2, r1
 8012be8:	4601      	mov	r1, r0
 8012bea:	4802      	ldr	r0, [pc, #8]	; (8012bf4 <strtol+0x10>)
 8012bec:	6800      	ldr	r0, [r0, #0]
 8012bee:	f7ff bf7b 	b.w	8012ae8 <_strtol_l.constprop.0>
 8012bf2:	bf00      	nop
 8012bf4:	20000868 	.word	0x20000868

08012bf8 <__cvt>:
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bfe:	461f      	mov	r7, r3
 8012c00:	bfbb      	ittet	lt
 8012c02:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8012c06:	461f      	movlt	r7, r3
 8012c08:	2300      	movge	r3, #0
 8012c0a:	232d      	movlt	r3, #45	; 0x2d
 8012c0c:	b088      	sub	sp, #32
 8012c0e:	4614      	mov	r4, r2
 8012c10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012c12:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8012c14:	7013      	strb	r3, [r2, #0]
 8012c16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012c18:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8012c1c:	f023 0820 	bic.w	r8, r3, #32
 8012c20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012c24:	d005      	beq.n	8012c32 <__cvt+0x3a>
 8012c26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012c2a:	d100      	bne.n	8012c2e <__cvt+0x36>
 8012c2c:	3501      	adds	r5, #1
 8012c2e:	2302      	movs	r3, #2
 8012c30:	e000      	b.n	8012c34 <__cvt+0x3c>
 8012c32:	2303      	movs	r3, #3
 8012c34:	aa07      	add	r2, sp, #28
 8012c36:	9204      	str	r2, [sp, #16]
 8012c38:	aa06      	add	r2, sp, #24
 8012c3a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8012c3e:	e9cd 3500 	strd	r3, r5, [sp]
 8012c42:	4622      	mov	r2, r4
 8012c44:	463b      	mov	r3, r7
 8012c46:	f000 fedb 	bl	8013a00 <_dtoa_r>
 8012c4a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012c4e:	4606      	mov	r6, r0
 8012c50:	d102      	bne.n	8012c58 <__cvt+0x60>
 8012c52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012c54:	07db      	lsls	r3, r3, #31
 8012c56:	d522      	bpl.n	8012c9e <__cvt+0xa6>
 8012c58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012c5c:	eb06 0905 	add.w	r9, r6, r5
 8012c60:	d110      	bne.n	8012c84 <__cvt+0x8c>
 8012c62:	7833      	ldrb	r3, [r6, #0]
 8012c64:	2b30      	cmp	r3, #48	; 0x30
 8012c66:	d10a      	bne.n	8012c7e <__cvt+0x86>
 8012c68:	2200      	movs	r2, #0
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	4620      	mov	r0, r4
 8012c6e:	4639      	mov	r1, r7
 8012c70:	f7ed ff06 	bl	8000a80 <__aeabi_dcmpeq>
 8012c74:	b918      	cbnz	r0, 8012c7e <__cvt+0x86>
 8012c76:	f1c5 0501 	rsb	r5, r5, #1
 8012c7a:	f8ca 5000 	str.w	r5, [sl]
 8012c7e:	f8da 3000 	ldr.w	r3, [sl]
 8012c82:	4499      	add	r9, r3
 8012c84:	2200      	movs	r2, #0
 8012c86:	2300      	movs	r3, #0
 8012c88:	4620      	mov	r0, r4
 8012c8a:	4639      	mov	r1, r7
 8012c8c:	f7ed fef8 	bl	8000a80 <__aeabi_dcmpeq>
 8012c90:	b108      	cbz	r0, 8012c96 <__cvt+0x9e>
 8012c92:	f8cd 901c 	str.w	r9, [sp, #28]
 8012c96:	2230      	movs	r2, #48	; 0x30
 8012c98:	9b07      	ldr	r3, [sp, #28]
 8012c9a:	454b      	cmp	r3, r9
 8012c9c:	d307      	bcc.n	8012cae <__cvt+0xb6>
 8012c9e:	4630      	mov	r0, r6
 8012ca0:	9b07      	ldr	r3, [sp, #28]
 8012ca2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012ca4:	1b9b      	subs	r3, r3, r6
 8012ca6:	6013      	str	r3, [r2, #0]
 8012ca8:	b008      	add	sp, #32
 8012caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cae:	1c59      	adds	r1, r3, #1
 8012cb0:	9107      	str	r1, [sp, #28]
 8012cb2:	701a      	strb	r2, [r3, #0]
 8012cb4:	e7f0      	b.n	8012c98 <__cvt+0xa0>

08012cb6 <__exponent>:
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012cba:	2900      	cmp	r1, #0
 8012cbc:	f803 2b02 	strb.w	r2, [r3], #2
 8012cc0:	bfb6      	itet	lt
 8012cc2:	222d      	movlt	r2, #45	; 0x2d
 8012cc4:	222b      	movge	r2, #43	; 0x2b
 8012cc6:	4249      	neglt	r1, r1
 8012cc8:	2909      	cmp	r1, #9
 8012cca:	7042      	strb	r2, [r0, #1]
 8012ccc:	dd2a      	ble.n	8012d24 <__exponent+0x6e>
 8012cce:	f10d 0207 	add.w	r2, sp, #7
 8012cd2:	4617      	mov	r7, r2
 8012cd4:	260a      	movs	r6, #10
 8012cd6:	fb91 f5f6 	sdiv	r5, r1, r6
 8012cda:	4694      	mov	ip, r2
 8012cdc:	fb06 1415 	mls	r4, r6, r5, r1
 8012ce0:	3430      	adds	r4, #48	; 0x30
 8012ce2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8012ce6:	460c      	mov	r4, r1
 8012ce8:	2c63      	cmp	r4, #99	; 0x63
 8012cea:	4629      	mov	r1, r5
 8012cec:	f102 32ff 	add.w	r2, r2, #4294967295
 8012cf0:	dcf1      	bgt.n	8012cd6 <__exponent+0x20>
 8012cf2:	3130      	adds	r1, #48	; 0x30
 8012cf4:	f1ac 0402 	sub.w	r4, ip, #2
 8012cf8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012cfc:	4622      	mov	r2, r4
 8012cfe:	1c41      	adds	r1, r0, #1
 8012d00:	42ba      	cmp	r2, r7
 8012d02:	d30a      	bcc.n	8012d1a <__exponent+0x64>
 8012d04:	f10d 0209 	add.w	r2, sp, #9
 8012d08:	eba2 020c 	sub.w	r2, r2, ip
 8012d0c:	42bc      	cmp	r4, r7
 8012d0e:	bf88      	it	hi
 8012d10:	2200      	movhi	r2, #0
 8012d12:	4413      	add	r3, r2
 8012d14:	1a18      	subs	r0, r3, r0
 8012d16:	b003      	add	sp, #12
 8012d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d1a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012d1e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8012d22:	e7ed      	b.n	8012d00 <__exponent+0x4a>
 8012d24:	2330      	movs	r3, #48	; 0x30
 8012d26:	3130      	adds	r1, #48	; 0x30
 8012d28:	7083      	strb	r3, [r0, #2]
 8012d2a:	70c1      	strb	r1, [r0, #3]
 8012d2c:	1d03      	adds	r3, r0, #4
 8012d2e:	e7f1      	b.n	8012d14 <__exponent+0x5e>

08012d30 <_printf_float>:
 8012d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d34:	b091      	sub	sp, #68	; 0x44
 8012d36:	460c      	mov	r4, r1
 8012d38:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8012d3c:	4616      	mov	r6, r2
 8012d3e:	461f      	mov	r7, r3
 8012d40:	4605      	mov	r5, r0
 8012d42:	f000 fd2f 	bl	80137a4 <_localeconv_r>
 8012d46:	6803      	ldr	r3, [r0, #0]
 8012d48:	4618      	mov	r0, r3
 8012d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8012d4c:	f7ed fa6c 	bl	8000228 <strlen>
 8012d50:	2300      	movs	r3, #0
 8012d52:	930e      	str	r3, [sp, #56]	; 0x38
 8012d54:	f8d8 3000 	ldr.w	r3, [r8]
 8012d58:	900a      	str	r0, [sp, #40]	; 0x28
 8012d5a:	3307      	adds	r3, #7
 8012d5c:	f023 0307 	bic.w	r3, r3, #7
 8012d60:	f103 0208 	add.w	r2, r3, #8
 8012d64:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012d68:	f8d4 b000 	ldr.w	fp, [r4]
 8012d6c:	f8c8 2000 	str.w	r2, [r8]
 8012d70:	e9d3 a800 	ldrd	sl, r8, [r3]
 8012d74:	4652      	mov	r2, sl
 8012d76:	4643      	mov	r3, r8
 8012d78:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012d7c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8012d80:	930b      	str	r3, [sp, #44]	; 0x2c
 8012d82:	f04f 32ff 	mov.w	r2, #4294967295
 8012d86:	4650      	mov	r0, sl
 8012d88:	4b9c      	ldr	r3, [pc, #624]	; (8012ffc <_printf_float+0x2cc>)
 8012d8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012d8c:	f7ed feaa 	bl	8000ae4 <__aeabi_dcmpun>
 8012d90:	bb70      	cbnz	r0, 8012df0 <_printf_float+0xc0>
 8012d92:	f04f 32ff 	mov.w	r2, #4294967295
 8012d96:	4650      	mov	r0, sl
 8012d98:	4b98      	ldr	r3, [pc, #608]	; (8012ffc <_printf_float+0x2cc>)
 8012d9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012d9c:	f7ed fe84 	bl	8000aa8 <__aeabi_dcmple>
 8012da0:	bb30      	cbnz	r0, 8012df0 <_printf_float+0xc0>
 8012da2:	2200      	movs	r2, #0
 8012da4:	2300      	movs	r3, #0
 8012da6:	4650      	mov	r0, sl
 8012da8:	4641      	mov	r1, r8
 8012daa:	f7ed fe73 	bl	8000a94 <__aeabi_dcmplt>
 8012dae:	b110      	cbz	r0, 8012db6 <_printf_float+0x86>
 8012db0:	232d      	movs	r3, #45	; 0x2d
 8012db2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012db6:	4a92      	ldr	r2, [pc, #584]	; (8013000 <_printf_float+0x2d0>)
 8012db8:	4b92      	ldr	r3, [pc, #584]	; (8013004 <_printf_float+0x2d4>)
 8012dba:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8012dbe:	bf94      	ite	ls
 8012dc0:	4690      	movls	r8, r2
 8012dc2:	4698      	movhi	r8, r3
 8012dc4:	2303      	movs	r3, #3
 8012dc6:	f04f 0a00 	mov.w	sl, #0
 8012dca:	6123      	str	r3, [r4, #16]
 8012dcc:	f02b 0304 	bic.w	r3, fp, #4
 8012dd0:	6023      	str	r3, [r4, #0]
 8012dd2:	4633      	mov	r3, r6
 8012dd4:	4621      	mov	r1, r4
 8012dd6:	4628      	mov	r0, r5
 8012dd8:	9700      	str	r7, [sp, #0]
 8012dda:	aa0f      	add	r2, sp, #60	; 0x3c
 8012ddc:	f000 f9d6 	bl	801318c <_printf_common>
 8012de0:	3001      	adds	r0, #1
 8012de2:	f040 8090 	bne.w	8012f06 <_printf_float+0x1d6>
 8012de6:	f04f 30ff 	mov.w	r0, #4294967295
 8012dea:	b011      	add	sp, #68	; 0x44
 8012dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012df0:	4652      	mov	r2, sl
 8012df2:	4643      	mov	r3, r8
 8012df4:	4650      	mov	r0, sl
 8012df6:	4641      	mov	r1, r8
 8012df8:	f7ed fe74 	bl	8000ae4 <__aeabi_dcmpun>
 8012dfc:	b148      	cbz	r0, 8012e12 <_printf_float+0xe2>
 8012dfe:	f1b8 0f00 	cmp.w	r8, #0
 8012e02:	bfb8      	it	lt
 8012e04:	232d      	movlt	r3, #45	; 0x2d
 8012e06:	4a80      	ldr	r2, [pc, #512]	; (8013008 <_printf_float+0x2d8>)
 8012e08:	bfb8      	it	lt
 8012e0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012e0e:	4b7f      	ldr	r3, [pc, #508]	; (801300c <_printf_float+0x2dc>)
 8012e10:	e7d3      	b.n	8012dba <_printf_float+0x8a>
 8012e12:	6863      	ldr	r3, [r4, #4]
 8012e14:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8012e18:	1c5a      	adds	r2, r3, #1
 8012e1a:	d142      	bne.n	8012ea2 <_printf_float+0x172>
 8012e1c:	2306      	movs	r3, #6
 8012e1e:	6063      	str	r3, [r4, #4]
 8012e20:	2200      	movs	r2, #0
 8012e22:	9206      	str	r2, [sp, #24]
 8012e24:	aa0e      	add	r2, sp, #56	; 0x38
 8012e26:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8012e2a:	aa0d      	add	r2, sp, #52	; 0x34
 8012e2c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8012e30:	9203      	str	r2, [sp, #12]
 8012e32:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8012e36:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8012e3a:	6023      	str	r3, [r4, #0]
 8012e3c:	6863      	ldr	r3, [r4, #4]
 8012e3e:	4652      	mov	r2, sl
 8012e40:	9300      	str	r3, [sp, #0]
 8012e42:	4628      	mov	r0, r5
 8012e44:	4643      	mov	r3, r8
 8012e46:	910b      	str	r1, [sp, #44]	; 0x2c
 8012e48:	f7ff fed6 	bl	8012bf8 <__cvt>
 8012e4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012e4e:	4680      	mov	r8, r0
 8012e50:	2947      	cmp	r1, #71	; 0x47
 8012e52:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012e54:	d108      	bne.n	8012e68 <_printf_float+0x138>
 8012e56:	1cc8      	adds	r0, r1, #3
 8012e58:	db02      	blt.n	8012e60 <_printf_float+0x130>
 8012e5a:	6863      	ldr	r3, [r4, #4]
 8012e5c:	4299      	cmp	r1, r3
 8012e5e:	dd40      	ble.n	8012ee2 <_printf_float+0x1b2>
 8012e60:	f1a9 0902 	sub.w	r9, r9, #2
 8012e64:	fa5f f989 	uxtb.w	r9, r9
 8012e68:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012e6c:	d81f      	bhi.n	8012eae <_printf_float+0x17e>
 8012e6e:	464a      	mov	r2, r9
 8012e70:	3901      	subs	r1, #1
 8012e72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012e76:	910d      	str	r1, [sp, #52]	; 0x34
 8012e78:	f7ff ff1d 	bl	8012cb6 <__exponent>
 8012e7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012e7e:	4682      	mov	sl, r0
 8012e80:	1813      	adds	r3, r2, r0
 8012e82:	2a01      	cmp	r2, #1
 8012e84:	6123      	str	r3, [r4, #16]
 8012e86:	dc02      	bgt.n	8012e8e <_printf_float+0x15e>
 8012e88:	6822      	ldr	r2, [r4, #0]
 8012e8a:	07d2      	lsls	r2, r2, #31
 8012e8c:	d501      	bpl.n	8012e92 <_printf_float+0x162>
 8012e8e:	3301      	adds	r3, #1
 8012e90:	6123      	str	r3, [r4, #16]
 8012e92:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d09b      	beq.n	8012dd2 <_printf_float+0xa2>
 8012e9a:	232d      	movs	r3, #45	; 0x2d
 8012e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012ea0:	e797      	b.n	8012dd2 <_printf_float+0xa2>
 8012ea2:	2947      	cmp	r1, #71	; 0x47
 8012ea4:	d1bc      	bne.n	8012e20 <_printf_float+0xf0>
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d1ba      	bne.n	8012e20 <_printf_float+0xf0>
 8012eaa:	2301      	movs	r3, #1
 8012eac:	e7b7      	b.n	8012e1e <_printf_float+0xee>
 8012eae:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8012eb2:	d118      	bne.n	8012ee6 <_printf_float+0x1b6>
 8012eb4:	2900      	cmp	r1, #0
 8012eb6:	6863      	ldr	r3, [r4, #4]
 8012eb8:	dd0b      	ble.n	8012ed2 <_printf_float+0x1a2>
 8012eba:	6121      	str	r1, [r4, #16]
 8012ebc:	b913      	cbnz	r3, 8012ec4 <_printf_float+0x194>
 8012ebe:	6822      	ldr	r2, [r4, #0]
 8012ec0:	07d0      	lsls	r0, r2, #31
 8012ec2:	d502      	bpl.n	8012eca <_printf_float+0x19a>
 8012ec4:	3301      	adds	r3, #1
 8012ec6:	440b      	add	r3, r1
 8012ec8:	6123      	str	r3, [r4, #16]
 8012eca:	f04f 0a00 	mov.w	sl, #0
 8012ece:	65a1      	str	r1, [r4, #88]	; 0x58
 8012ed0:	e7df      	b.n	8012e92 <_printf_float+0x162>
 8012ed2:	b913      	cbnz	r3, 8012eda <_printf_float+0x1aa>
 8012ed4:	6822      	ldr	r2, [r4, #0]
 8012ed6:	07d2      	lsls	r2, r2, #31
 8012ed8:	d501      	bpl.n	8012ede <_printf_float+0x1ae>
 8012eda:	3302      	adds	r3, #2
 8012edc:	e7f4      	b.n	8012ec8 <_printf_float+0x198>
 8012ede:	2301      	movs	r3, #1
 8012ee0:	e7f2      	b.n	8012ec8 <_printf_float+0x198>
 8012ee2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8012ee6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012ee8:	4299      	cmp	r1, r3
 8012eea:	db05      	blt.n	8012ef8 <_printf_float+0x1c8>
 8012eec:	6823      	ldr	r3, [r4, #0]
 8012eee:	6121      	str	r1, [r4, #16]
 8012ef0:	07d8      	lsls	r0, r3, #31
 8012ef2:	d5ea      	bpl.n	8012eca <_printf_float+0x19a>
 8012ef4:	1c4b      	adds	r3, r1, #1
 8012ef6:	e7e7      	b.n	8012ec8 <_printf_float+0x198>
 8012ef8:	2900      	cmp	r1, #0
 8012efa:	bfcc      	ite	gt
 8012efc:	2201      	movgt	r2, #1
 8012efe:	f1c1 0202 	rsble	r2, r1, #2
 8012f02:	4413      	add	r3, r2
 8012f04:	e7e0      	b.n	8012ec8 <_printf_float+0x198>
 8012f06:	6823      	ldr	r3, [r4, #0]
 8012f08:	055a      	lsls	r2, r3, #21
 8012f0a:	d407      	bmi.n	8012f1c <_printf_float+0x1ec>
 8012f0c:	6923      	ldr	r3, [r4, #16]
 8012f0e:	4642      	mov	r2, r8
 8012f10:	4631      	mov	r1, r6
 8012f12:	4628      	mov	r0, r5
 8012f14:	47b8      	blx	r7
 8012f16:	3001      	adds	r0, #1
 8012f18:	d12b      	bne.n	8012f72 <_printf_float+0x242>
 8012f1a:	e764      	b.n	8012de6 <_printf_float+0xb6>
 8012f1c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012f20:	f240 80dd 	bls.w	80130de <_printf_float+0x3ae>
 8012f24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012f28:	2200      	movs	r2, #0
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	f7ed fda8 	bl	8000a80 <__aeabi_dcmpeq>
 8012f30:	2800      	cmp	r0, #0
 8012f32:	d033      	beq.n	8012f9c <_printf_float+0x26c>
 8012f34:	2301      	movs	r3, #1
 8012f36:	4631      	mov	r1, r6
 8012f38:	4628      	mov	r0, r5
 8012f3a:	4a35      	ldr	r2, [pc, #212]	; (8013010 <_printf_float+0x2e0>)
 8012f3c:	47b8      	blx	r7
 8012f3e:	3001      	adds	r0, #1
 8012f40:	f43f af51 	beq.w	8012de6 <_printf_float+0xb6>
 8012f44:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	db02      	blt.n	8012f52 <_printf_float+0x222>
 8012f4c:	6823      	ldr	r3, [r4, #0]
 8012f4e:	07d8      	lsls	r0, r3, #31
 8012f50:	d50f      	bpl.n	8012f72 <_printf_float+0x242>
 8012f52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012f56:	4631      	mov	r1, r6
 8012f58:	4628      	mov	r0, r5
 8012f5a:	47b8      	blx	r7
 8012f5c:	3001      	adds	r0, #1
 8012f5e:	f43f af42 	beq.w	8012de6 <_printf_float+0xb6>
 8012f62:	f04f 0800 	mov.w	r8, #0
 8012f66:	f104 091a 	add.w	r9, r4, #26
 8012f6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f6c:	3b01      	subs	r3, #1
 8012f6e:	4543      	cmp	r3, r8
 8012f70:	dc09      	bgt.n	8012f86 <_printf_float+0x256>
 8012f72:	6823      	ldr	r3, [r4, #0]
 8012f74:	079b      	lsls	r3, r3, #30
 8012f76:	f100 8104 	bmi.w	8013182 <_printf_float+0x452>
 8012f7a:	68e0      	ldr	r0, [r4, #12]
 8012f7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012f7e:	4298      	cmp	r0, r3
 8012f80:	bfb8      	it	lt
 8012f82:	4618      	movlt	r0, r3
 8012f84:	e731      	b.n	8012dea <_printf_float+0xba>
 8012f86:	2301      	movs	r3, #1
 8012f88:	464a      	mov	r2, r9
 8012f8a:	4631      	mov	r1, r6
 8012f8c:	4628      	mov	r0, r5
 8012f8e:	47b8      	blx	r7
 8012f90:	3001      	adds	r0, #1
 8012f92:	f43f af28 	beq.w	8012de6 <_printf_float+0xb6>
 8012f96:	f108 0801 	add.w	r8, r8, #1
 8012f9a:	e7e6      	b.n	8012f6a <_printf_float+0x23a>
 8012f9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	dc38      	bgt.n	8013014 <_printf_float+0x2e4>
 8012fa2:	2301      	movs	r3, #1
 8012fa4:	4631      	mov	r1, r6
 8012fa6:	4628      	mov	r0, r5
 8012fa8:	4a19      	ldr	r2, [pc, #100]	; (8013010 <_printf_float+0x2e0>)
 8012faa:	47b8      	blx	r7
 8012fac:	3001      	adds	r0, #1
 8012fae:	f43f af1a 	beq.w	8012de6 <_printf_float+0xb6>
 8012fb2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8012fb6:	4313      	orrs	r3, r2
 8012fb8:	d102      	bne.n	8012fc0 <_printf_float+0x290>
 8012fba:	6823      	ldr	r3, [r4, #0]
 8012fbc:	07d9      	lsls	r1, r3, #31
 8012fbe:	d5d8      	bpl.n	8012f72 <_printf_float+0x242>
 8012fc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012fc4:	4631      	mov	r1, r6
 8012fc6:	4628      	mov	r0, r5
 8012fc8:	47b8      	blx	r7
 8012fca:	3001      	adds	r0, #1
 8012fcc:	f43f af0b 	beq.w	8012de6 <_printf_float+0xb6>
 8012fd0:	f04f 0900 	mov.w	r9, #0
 8012fd4:	f104 0a1a 	add.w	sl, r4, #26
 8012fd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012fda:	425b      	negs	r3, r3
 8012fdc:	454b      	cmp	r3, r9
 8012fde:	dc01      	bgt.n	8012fe4 <_printf_float+0x2b4>
 8012fe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012fe2:	e794      	b.n	8012f0e <_printf_float+0x1de>
 8012fe4:	2301      	movs	r3, #1
 8012fe6:	4652      	mov	r2, sl
 8012fe8:	4631      	mov	r1, r6
 8012fea:	4628      	mov	r0, r5
 8012fec:	47b8      	blx	r7
 8012fee:	3001      	adds	r0, #1
 8012ff0:	f43f aef9 	beq.w	8012de6 <_printf_float+0xb6>
 8012ff4:	f109 0901 	add.w	r9, r9, #1
 8012ff8:	e7ee      	b.n	8012fd8 <_printf_float+0x2a8>
 8012ffa:	bf00      	nop
 8012ffc:	7fefffff 	.word	0x7fefffff
 8013000:	08015ef7 	.word	0x08015ef7
 8013004:	08015efb 	.word	0x08015efb
 8013008:	08015eff 	.word	0x08015eff
 801300c:	08015f03 	.word	0x08015f03
 8013010:	08015f07 	.word	0x08015f07
 8013014:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013016:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013018:	429a      	cmp	r2, r3
 801301a:	bfa8      	it	ge
 801301c:	461a      	movge	r2, r3
 801301e:	2a00      	cmp	r2, #0
 8013020:	4691      	mov	r9, r2
 8013022:	dc37      	bgt.n	8013094 <_printf_float+0x364>
 8013024:	f04f 0b00 	mov.w	fp, #0
 8013028:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801302c:	f104 021a 	add.w	r2, r4, #26
 8013030:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013034:	ebaa 0309 	sub.w	r3, sl, r9
 8013038:	455b      	cmp	r3, fp
 801303a:	dc33      	bgt.n	80130a4 <_printf_float+0x374>
 801303c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8013040:	429a      	cmp	r2, r3
 8013042:	db3b      	blt.n	80130bc <_printf_float+0x38c>
 8013044:	6823      	ldr	r3, [r4, #0]
 8013046:	07da      	lsls	r2, r3, #31
 8013048:	d438      	bmi.n	80130bc <_printf_float+0x38c>
 801304a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 801304e:	eba2 0903 	sub.w	r9, r2, r3
 8013052:	eba2 020a 	sub.w	r2, r2, sl
 8013056:	4591      	cmp	r9, r2
 8013058:	bfa8      	it	ge
 801305a:	4691      	movge	r9, r2
 801305c:	f1b9 0f00 	cmp.w	r9, #0
 8013060:	dc34      	bgt.n	80130cc <_printf_float+0x39c>
 8013062:	f04f 0800 	mov.w	r8, #0
 8013066:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801306a:	f104 0a1a 	add.w	sl, r4, #26
 801306e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8013072:	1a9b      	subs	r3, r3, r2
 8013074:	eba3 0309 	sub.w	r3, r3, r9
 8013078:	4543      	cmp	r3, r8
 801307a:	f77f af7a 	ble.w	8012f72 <_printf_float+0x242>
 801307e:	2301      	movs	r3, #1
 8013080:	4652      	mov	r2, sl
 8013082:	4631      	mov	r1, r6
 8013084:	4628      	mov	r0, r5
 8013086:	47b8      	blx	r7
 8013088:	3001      	adds	r0, #1
 801308a:	f43f aeac 	beq.w	8012de6 <_printf_float+0xb6>
 801308e:	f108 0801 	add.w	r8, r8, #1
 8013092:	e7ec      	b.n	801306e <_printf_float+0x33e>
 8013094:	4613      	mov	r3, r2
 8013096:	4631      	mov	r1, r6
 8013098:	4642      	mov	r2, r8
 801309a:	4628      	mov	r0, r5
 801309c:	47b8      	blx	r7
 801309e:	3001      	adds	r0, #1
 80130a0:	d1c0      	bne.n	8013024 <_printf_float+0x2f4>
 80130a2:	e6a0      	b.n	8012de6 <_printf_float+0xb6>
 80130a4:	2301      	movs	r3, #1
 80130a6:	4631      	mov	r1, r6
 80130a8:	4628      	mov	r0, r5
 80130aa:	920b      	str	r2, [sp, #44]	; 0x2c
 80130ac:	47b8      	blx	r7
 80130ae:	3001      	adds	r0, #1
 80130b0:	f43f ae99 	beq.w	8012de6 <_printf_float+0xb6>
 80130b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80130b6:	f10b 0b01 	add.w	fp, fp, #1
 80130ba:	e7b9      	b.n	8013030 <_printf_float+0x300>
 80130bc:	4631      	mov	r1, r6
 80130be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80130c2:	4628      	mov	r0, r5
 80130c4:	47b8      	blx	r7
 80130c6:	3001      	adds	r0, #1
 80130c8:	d1bf      	bne.n	801304a <_printf_float+0x31a>
 80130ca:	e68c      	b.n	8012de6 <_printf_float+0xb6>
 80130cc:	464b      	mov	r3, r9
 80130ce:	4631      	mov	r1, r6
 80130d0:	4628      	mov	r0, r5
 80130d2:	eb08 020a 	add.w	r2, r8, sl
 80130d6:	47b8      	blx	r7
 80130d8:	3001      	adds	r0, #1
 80130da:	d1c2      	bne.n	8013062 <_printf_float+0x332>
 80130dc:	e683      	b.n	8012de6 <_printf_float+0xb6>
 80130de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80130e0:	2a01      	cmp	r2, #1
 80130e2:	dc01      	bgt.n	80130e8 <_printf_float+0x3b8>
 80130e4:	07db      	lsls	r3, r3, #31
 80130e6:	d539      	bpl.n	801315c <_printf_float+0x42c>
 80130e8:	2301      	movs	r3, #1
 80130ea:	4642      	mov	r2, r8
 80130ec:	4631      	mov	r1, r6
 80130ee:	4628      	mov	r0, r5
 80130f0:	47b8      	blx	r7
 80130f2:	3001      	adds	r0, #1
 80130f4:	f43f ae77 	beq.w	8012de6 <_printf_float+0xb6>
 80130f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80130fc:	4631      	mov	r1, r6
 80130fe:	4628      	mov	r0, r5
 8013100:	47b8      	blx	r7
 8013102:	3001      	adds	r0, #1
 8013104:	f43f ae6f 	beq.w	8012de6 <_printf_float+0xb6>
 8013108:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801310c:	2200      	movs	r2, #0
 801310e:	2300      	movs	r3, #0
 8013110:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8013114:	f7ed fcb4 	bl	8000a80 <__aeabi_dcmpeq>
 8013118:	b9d8      	cbnz	r0, 8013152 <_printf_float+0x422>
 801311a:	f109 33ff 	add.w	r3, r9, #4294967295
 801311e:	f108 0201 	add.w	r2, r8, #1
 8013122:	4631      	mov	r1, r6
 8013124:	4628      	mov	r0, r5
 8013126:	47b8      	blx	r7
 8013128:	3001      	adds	r0, #1
 801312a:	d10e      	bne.n	801314a <_printf_float+0x41a>
 801312c:	e65b      	b.n	8012de6 <_printf_float+0xb6>
 801312e:	2301      	movs	r3, #1
 8013130:	464a      	mov	r2, r9
 8013132:	4631      	mov	r1, r6
 8013134:	4628      	mov	r0, r5
 8013136:	47b8      	blx	r7
 8013138:	3001      	adds	r0, #1
 801313a:	f43f ae54 	beq.w	8012de6 <_printf_float+0xb6>
 801313e:	f108 0801 	add.w	r8, r8, #1
 8013142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013144:	3b01      	subs	r3, #1
 8013146:	4543      	cmp	r3, r8
 8013148:	dcf1      	bgt.n	801312e <_printf_float+0x3fe>
 801314a:	4653      	mov	r3, sl
 801314c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013150:	e6de      	b.n	8012f10 <_printf_float+0x1e0>
 8013152:	f04f 0800 	mov.w	r8, #0
 8013156:	f104 091a 	add.w	r9, r4, #26
 801315a:	e7f2      	b.n	8013142 <_printf_float+0x412>
 801315c:	2301      	movs	r3, #1
 801315e:	4642      	mov	r2, r8
 8013160:	e7df      	b.n	8013122 <_printf_float+0x3f2>
 8013162:	2301      	movs	r3, #1
 8013164:	464a      	mov	r2, r9
 8013166:	4631      	mov	r1, r6
 8013168:	4628      	mov	r0, r5
 801316a:	47b8      	blx	r7
 801316c:	3001      	adds	r0, #1
 801316e:	f43f ae3a 	beq.w	8012de6 <_printf_float+0xb6>
 8013172:	f108 0801 	add.w	r8, r8, #1
 8013176:	68e3      	ldr	r3, [r4, #12]
 8013178:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801317a:	1a5b      	subs	r3, r3, r1
 801317c:	4543      	cmp	r3, r8
 801317e:	dcf0      	bgt.n	8013162 <_printf_float+0x432>
 8013180:	e6fb      	b.n	8012f7a <_printf_float+0x24a>
 8013182:	f04f 0800 	mov.w	r8, #0
 8013186:	f104 0919 	add.w	r9, r4, #25
 801318a:	e7f4      	b.n	8013176 <_printf_float+0x446>

0801318c <_printf_common>:
 801318c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013190:	4616      	mov	r6, r2
 8013192:	4699      	mov	r9, r3
 8013194:	688a      	ldr	r2, [r1, #8]
 8013196:	690b      	ldr	r3, [r1, #16]
 8013198:	4607      	mov	r7, r0
 801319a:	4293      	cmp	r3, r2
 801319c:	bfb8      	it	lt
 801319e:	4613      	movlt	r3, r2
 80131a0:	6033      	str	r3, [r6, #0]
 80131a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80131a6:	460c      	mov	r4, r1
 80131a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80131ac:	b10a      	cbz	r2, 80131b2 <_printf_common+0x26>
 80131ae:	3301      	adds	r3, #1
 80131b0:	6033      	str	r3, [r6, #0]
 80131b2:	6823      	ldr	r3, [r4, #0]
 80131b4:	0699      	lsls	r1, r3, #26
 80131b6:	bf42      	ittt	mi
 80131b8:	6833      	ldrmi	r3, [r6, #0]
 80131ba:	3302      	addmi	r3, #2
 80131bc:	6033      	strmi	r3, [r6, #0]
 80131be:	6825      	ldr	r5, [r4, #0]
 80131c0:	f015 0506 	ands.w	r5, r5, #6
 80131c4:	d106      	bne.n	80131d4 <_printf_common+0x48>
 80131c6:	f104 0a19 	add.w	sl, r4, #25
 80131ca:	68e3      	ldr	r3, [r4, #12]
 80131cc:	6832      	ldr	r2, [r6, #0]
 80131ce:	1a9b      	subs	r3, r3, r2
 80131d0:	42ab      	cmp	r3, r5
 80131d2:	dc2b      	bgt.n	801322c <_printf_common+0xa0>
 80131d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80131d8:	1e13      	subs	r3, r2, #0
 80131da:	6822      	ldr	r2, [r4, #0]
 80131dc:	bf18      	it	ne
 80131de:	2301      	movne	r3, #1
 80131e0:	0692      	lsls	r2, r2, #26
 80131e2:	d430      	bmi.n	8013246 <_printf_common+0xba>
 80131e4:	4649      	mov	r1, r9
 80131e6:	4638      	mov	r0, r7
 80131e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80131ec:	47c0      	blx	r8
 80131ee:	3001      	adds	r0, #1
 80131f0:	d023      	beq.n	801323a <_printf_common+0xae>
 80131f2:	6823      	ldr	r3, [r4, #0]
 80131f4:	6922      	ldr	r2, [r4, #16]
 80131f6:	f003 0306 	and.w	r3, r3, #6
 80131fa:	2b04      	cmp	r3, #4
 80131fc:	bf14      	ite	ne
 80131fe:	2500      	movne	r5, #0
 8013200:	6833      	ldreq	r3, [r6, #0]
 8013202:	f04f 0600 	mov.w	r6, #0
 8013206:	bf08      	it	eq
 8013208:	68e5      	ldreq	r5, [r4, #12]
 801320a:	f104 041a 	add.w	r4, r4, #26
 801320e:	bf08      	it	eq
 8013210:	1aed      	subeq	r5, r5, r3
 8013212:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8013216:	bf08      	it	eq
 8013218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801321c:	4293      	cmp	r3, r2
 801321e:	bfc4      	itt	gt
 8013220:	1a9b      	subgt	r3, r3, r2
 8013222:	18ed      	addgt	r5, r5, r3
 8013224:	42b5      	cmp	r5, r6
 8013226:	d11a      	bne.n	801325e <_printf_common+0xd2>
 8013228:	2000      	movs	r0, #0
 801322a:	e008      	b.n	801323e <_printf_common+0xb2>
 801322c:	2301      	movs	r3, #1
 801322e:	4652      	mov	r2, sl
 8013230:	4649      	mov	r1, r9
 8013232:	4638      	mov	r0, r7
 8013234:	47c0      	blx	r8
 8013236:	3001      	adds	r0, #1
 8013238:	d103      	bne.n	8013242 <_printf_common+0xb6>
 801323a:	f04f 30ff 	mov.w	r0, #4294967295
 801323e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013242:	3501      	adds	r5, #1
 8013244:	e7c1      	b.n	80131ca <_printf_common+0x3e>
 8013246:	2030      	movs	r0, #48	; 0x30
 8013248:	18e1      	adds	r1, r4, r3
 801324a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801324e:	1c5a      	adds	r2, r3, #1
 8013250:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013254:	4422      	add	r2, r4
 8013256:	3302      	adds	r3, #2
 8013258:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801325c:	e7c2      	b.n	80131e4 <_printf_common+0x58>
 801325e:	2301      	movs	r3, #1
 8013260:	4622      	mov	r2, r4
 8013262:	4649      	mov	r1, r9
 8013264:	4638      	mov	r0, r7
 8013266:	47c0      	blx	r8
 8013268:	3001      	adds	r0, #1
 801326a:	d0e6      	beq.n	801323a <_printf_common+0xae>
 801326c:	3601      	adds	r6, #1
 801326e:	e7d9      	b.n	8013224 <_printf_common+0x98>

08013270 <_printf_i>:
 8013270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013274:	7e0f      	ldrb	r7, [r1, #24]
 8013276:	4691      	mov	r9, r2
 8013278:	2f78      	cmp	r7, #120	; 0x78
 801327a:	4680      	mov	r8, r0
 801327c:	460c      	mov	r4, r1
 801327e:	469a      	mov	sl, r3
 8013280:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013282:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013286:	d807      	bhi.n	8013298 <_printf_i+0x28>
 8013288:	2f62      	cmp	r7, #98	; 0x62
 801328a:	d80a      	bhi.n	80132a2 <_printf_i+0x32>
 801328c:	2f00      	cmp	r7, #0
 801328e:	f000 80d5 	beq.w	801343c <_printf_i+0x1cc>
 8013292:	2f58      	cmp	r7, #88	; 0x58
 8013294:	f000 80c1 	beq.w	801341a <_printf_i+0x1aa>
 8013298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801329c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80132a0:	e03a      	b.n	8013318 <_printf_i+0xa8>
 80132a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80132a6:	2b15      	cmp	r3, #21
 80132a8:	d8f6      	bhi.n	8013298 <_printf_i+0x28>
 80132aa:	a101      	add	r1, pc, #4	; (adr r1, 80132b0 <_printf_i+0x40>)
 80132ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80132b0:	08013309 	.word	0x08013309
 80132b4:	0801331d 	.word	0x0801331d
 80132b8:	08013299 	.word	0x08013299
 80132bc:	08013299 	.word	0x08013299
 80132c0:	08013299 	.word	0x08013299
 80132c4:	08013299 	.word	0x08013299
 80132c8:	0801331d 	.word	0x0801331d
 80132cc:	08013299 	.word	0x08013299
 80132d0:	08013299 	.word	0x08013299
 80132d4:	08013299 	.word	0x08013299
 80132d8:	08013299 	.word	0x08013299
 80132dc:	08013423 	.word	0x08013423
 80132e0:	08013349 	.word	0x08013349
 80132e4:	080133dd 	.word	0x080133dd
 80132e8:	08013299 	.word	0x08013299
 80132ec:	08013299 	.word	0x08013299
 80132f0:	08013445 	.word	0x08013445
 80132f4:	08013299 	.word	0x08013299
 80132f8:	08013349 	.word	0x08013349
 80132fc:	08013299 	.word	0x08013299
 8013300:	08013299 	.word	0x08013299
 8013304:	080133e5 	.word	0x080133e5
 8013308:	682b      	ldr	r3, [r5, #0]
 801330a:	1d1a      	adds	r2, r3, #4
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	602a      	str	r2, [r5, #0]
 8013310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013314:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013318:	2301      	movs	r3, #1
 801331a:	e0a0      	b.n	801345e <_printf_i+0x1ee>
 801331c:	6820      	ldr	r0, [r4, #0]
 801331e:	682b      	ldr	r3, [r5, #0]
 8013320:	0607      	lsls	r7, r0, #24
 8013322:	f103 0104 	add.w	r1, r3, #4
 8013326:	6029      	str	r1, [r5, #0]
 8013328:	d501      	bpl.n	801332e <_printf_i+0xbe>
 801332a:	681e      	ldr	r6, [r3, #0]
 801332c:	e003      	b.n	8013336 <_printf_i+0xc6>
 801332e:	0646      	lsls	r6, r0, #25
 8013330:	d5fb      	bpl.n	801332a <_printf_i+0xba>
 8013332:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013336:	2e00      	cmp	r6, #0
 8013338:	da03      	bge.n	8013342 <_printf_i+0xd2>
 801333a:	232d      	movs	r3, #45	; 0x2d
 801333c:	4276      	negs	r6, r6
 801333e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013342:	230a      	movs	r3, #10
 8013344:	4859      	ldr	r0, [pc, #356]	; (80134ac <_printf_i+0x23c>)
 8013346:	e012      	b.n	801336e <_printf_i+0xfe>
 8013348:	682b      	ldr	r3, [r5, #0]
 801334a:	6820      	ldr	r0, [r4, #0]
 801334c:	1d19      	adds	r1, r3, #4
 801334e:	6029      	str	r1, [r5, #0]
 8013350:	0605      	lsls	r5, r0, #24
 8013352:	d501      	bpl.n	8013358 <_printf_i+0xe8>
 8013354:	681e      	ldr	r6, [r3, #0]
 8013356:	e002      	b.n	801335e <_printf_i+0xee>
 8013358:	0641      	lsls	r1, r0, #25
 801335a:	d5fb      	bpl.n	8013354 <_printf_i+0xe4>
 801335c:	881e      	ldrh	r6, [r3, #0]
 801335e:	2f6f      	cmp	r7, #111	; 0x6f
 8013360:	bf0c      	ite	eq
 8013362:	2308      	moveq	r3, #8
 8013364:	230a      	movne	r3, #10
 8013366:	4851      	ldr	r0, [pc, #324]	; (80134ac <_printf_i+0x23c>)
 8013368:	2100      	movs	r1, #0
 801336a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801336e:	6865      	ldr	r5, [r4, #4]
 8013370:	2d00      	cmp	r5, #0
 8013372:	bfa8      	it	ge
 8013374:	6821      	ldrge	r1, [r4, #0]
 8013376:	60a5      	str	r5, [r4, #8]
 8013378:	bfa4      	itt	ge
 801337a:	f021 0104 	bicge.w	r1, r1, #4
 801337e:	6021      	strge	r1, [r4, #0]
 8013380:	b90e      	cbnz	r6, 8013386 <_printf_i+0x116>
 8013382:	2d00      	cmp	r5, #0
 8013384:	d04b      	beq.n	801341e <_printf_i+0x1ae>
 8013386:	4615      	mov	r5, r2
 8013388:	fbb6 f1f3 	udiv	r1, r6, r3
 801338c:	fb03 6711 	mls	r7, r3, r1, r6
 8013390:	5dc7      	ldrb	r7, [r0, r7]
 8013392:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013396:	4637      	mov	r7, r6
 8013398:	42bb      	cmp	r3, r7
 801339a:	460e      	mov	r6, r1
 801339c:	d9f4      	bls.n	8013388 <_printf_i+0x118>
 801339e:	2b08      	cmp	r3, #8
 80133a0:	d10b      	bne.n	80133ba <_printf_i+0x14a>
 80133a2:	6823      	ldr	r3, [r4, #0]
 80133a4:	07de      	lsls	r6, r3, #31
 80133a6:	d508      	bpl.n	80133ba <_printf_i+0x14a>
 80133a8:	6923      	ldr	r3, [r4, #16]
 80133aa:	6861      	ldr	r1, [r4, #4]
 80133ac:	4299      	cmp	r1, r3
 80133ae:	bfde      	ittt	le
 80133b0:	2330      	movle	r3, #48	; 0x30
 80133b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80133b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80133ba:	1b52      	subs	r2, r2, r5
 80133bc:	6122      	str	r2, [r4, #16]
 80133be:	464b      	mov	r3, r9
 80133c0:	4621      	mov	r1, r4
 80133c2:	4640      	mov	r0, r8
 80133c4:	f8cd a000 	str.w	sl, [sp]
 80133c8:	aa03      	add	r2, sp, #12
 80133ca:	f7ff fedf 	bl	801318c <_printf_common>
 80133ce:	3001      	adds	r0, #1
 80133d0:	d14a      	bne.n	8013468 <_printf_i+0x1f8>
 80133d2:	f04f 30ff 	mov.w	r0, #4294967295
 80133d6:	b004      	add	sp, #16
 80133d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133dc:	6823      	ldr	r3, [r4, #0]
 80133de:	f043 0320 	orr.w	r3, r3, #32
 80133e2:	6023      	str	r3, [r4, #0]
 80133e4:	2778      	movs	r7, #120	; 0x78
 80133e6:	4832      	ldr	r0, [pc, #200]	; (80134b0 <_printf_i+0x240>)
 80133e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80133ec:	6823      	ldr	r3, [r4, #0]
 80133ee:	6829      	ldr	r1, [r5, #0]
 80133f0:	061f      	lsls	r7, r3, #24
 80133f2:	f851 6b04 	ldr.w	r6, [r1], #4
 80133f6:	d402      	bmi.n	80133fe <_printf_i+0x18e>
 80133f8:	065f      	lsls	r7, r3, #25
 80133fa:	bf48      	it	mi
 80133fc:	b2b6      	uxthmi	r6, r6
 80133fe:	07df      	lsls	r7, r3, #31
 8013400:	bf48      	it	mi
 8013402:	f043 0320 	orrmi.w	r3, r3, #32
 8013406:	6029      	str	r1, [r5, #0]
 8013408:	bf48      	it	mi
 801340a:	6023      	strmi	r3, [r4, #0]
 801340c:	b91e      	cbnz	r6, 8013416 <_printf_i+0x1a6>
 801340e:	6823      	ldr	r3, [r4, #0]
 8013410:	f023 0320 	bic.w	r3, r3, #32
 8013414:	6023      	str	r3, [r4, #0]
 8013416:	2310      	movs	r3, #16
 8013418:	e7a6      	b.n	8013368 <_printf_i+0xf8>
 801341a:	4824      	ldr	r0, [pc, #144]	; (80134ac <_printf_i+0x23c>)
 801341c:	e7e4      	b.n	80133e8 <_printf_i+0x178>
 801341e:	4615      	mov	r5, r2
 8013420:	e7bd      	b.n	801339e <_printf_i+0x12e>
 8013422:	682b      	ldr	r3, [r5, #0]
 8013424:	6826      	ldr	r6, [r4, #0]
 8013426:	1d18      	adds	r0, r3, #4
 8013428:	6961      	ldr	r1, [r4, #20]
 801342a:	6028      	str	r0, [r5, #0]
 801342c:	0635      	lsls	r5, r6, #24
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	d501      	bpl.n	8013436 <_printf_i+0x1c6>
 8013432:	6019      	str	r1, [r3, #0]
 8013434:	e002      	b.n	801343c <_printf_i+0x1cc>
 8013436:	0670      	lsls	r0, r6, #25
 8013438:	d5fb      	bpl.n	8013432 <_printf_i+0x1c2>
 801343a:	8019      	strh	r1, [r3, #0]
 801343c:	2300      	movs	r3, #0
 801343e:	4615      	mov	r5, r2
 8013440:	6123      	str	r3, [r4, #16]
 8013442:	e7bc      	b.n	80133be <_printf_i+0x14e>
 8013444:	682b      	ldr	r3, [r5, #0]
 8013446:	2100      	movs	r1, #0
 8013448:	1d1a      	adds	r2, r3, #4
 801344a:	602a      	str	r2, [r5, #0]
 801344c:	681d      	ldr	r5, [r3, #0]
 801344e:	6862      	ldr	r2, [r4, #4]
 8013450:	4628      	mov	r0, r5
 8013452:	f000 fa1d 	bl	8013890 <memchr>
 8013456:	b108      	cbz	r0, 801345c <_printf_i+0x1ec>
 8013458:	1b40      	subs	r0, r0, r5
 801345a:	6060      	str	r0, [r4, #4]
 801345c:	6863      	ldr	r3, [r4, #4]
 801345e:	6123      	str	r3, [r4, #16]
 8013460:	2300      	movs	r3, #0
 8013462:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013466:	e7aa      	b.n	80133be <_printf_i+0x14e>
 8013468:	462a      	mov	r2, r5
 801346a:	4649      	mov	r1, r9
 801346c:	4640      	mov	r0, r8
 801346e:	6923      	ldr	r3, [r4, #16]
 8013470:	47d0      	blx	sl
 8013472:	3001      	adds	r0, #1
 8013474:	d0ad      	beq.n	80133d2 <_printf_i+0x162>
 8013476:	6823      	ldr	r3, [r4, #0]
 8013478:	079b      	lsls	r3, r3, #30
 801347a:	d413      	bmi.n	80134a4 <_printf_i+0x234>
 801347c:	68e0      	ldr	r0, [r4, #12]
 801347e:	9b03      	ldr	r3, [sp, #12]
 8013480:	4298      	cmp	r0, r3
 8013482:	bfb8      	it	lt
 8013484:	4618      	movlt	r0, r3
 8013486:	e7a6      	b.n	80133d6 <_printf_i+0x166>
 8013488:	2301      	movs	r3, #1
 801348a:	4632      	mov	r2, r6
 801348c:	4649      	mov	r1, r9
 801348e:	4640      	mov	r0, r8
 8013490:	47d0      	blx	sl
 8013492:	3001      	adds	r0, #1
 8013494:	d09d      	beq.n	80133d2 <_printf_i+0x162>
 8013496:	3501      	adds	r5, #1
 8013498:	68e3      	ldr	r3, [r4, #12]
 801349a:	9903      	ldr	r1, [sp, #12]
 801349c:	1a5b      	subs	r3, r3, r1
 801349e:	42ab      	cmp	r3, r5
 80134a0:	dcf2      	bgt.n	8013488 <_printf_i+0x218>
 80134a2:	e7eb      	b.n	801347c <_printf_i+0x20c>
 80134a4:	2500      	movs	r5, #0
 80134a6:	f104 0619 	add.w	r6, r4, #25
 80134aa:	e7f5      	b.n	8013498 <_printf_i+0x228>
 80134ac:	08015f09 	.word	0x08015f09
 80134b0:	08015f1a 	.word	0x08015f1a

080134b4 <std>:
 80134b4:	2300      	movs	r3, #0
 80134b6:	b510      	push	{r4, lr}
 80134b8:	4604      	mov	r4, r0
 80134ba:	e9c0 3300 	strd	r3, r3, [r0]
 80134be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80134c2:	6083      	str	r3, [r0, #8]
 80134c4:	8181      	strh	r1, [r0, #12]
 80134c6:	6643      	str	r3, [r0, #100]	; 0x64
 80134c8:	81c2      	strh	r2, [r0, #14]
 80134ca:	6183      	str	r3, [r0, #24]
 80134cc:	4619      	mov	r1, r3
 80134ce:	2208      	movs	r2, #8
 80134d0:	305c      	adds	r0, #92	; 0x5c
 80134d2:	f000 f902 	bl	80136da <memset>
 80134d6:	4b05      	ldr	r3, [pc, #20]	; (80134ec <std+0x38>)
 80134d8:	6224      	str	r4, [r4, #32]
 80134da:	6263      	str	r3, [r4, #36]	; 0x24
 80134dc:	4b04      	ldr	r3, [pc, #16]	; (80134f0 <std+0x3c>)
 80134de:	62a3      	str	r3, [r4, #40]	; 0x28
 80134e0:	4b04      	ldr	r3, [pc, #16]	; (80134f4 <std+0x40>)
 80134e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80134e4:	4b04      	ldr	r3, [pc, #16]	; (80134f8 <std+0x44>)
 80134e6:	6323      	str	r3, [r4, #48]	; 0x30
 80134e8:	bd10      	pop	{r4, pc}
 80134ea:	bf00      	nop
 80134ec:	08013655 	.word	0x08013655
 80134f0:	08013677 	.word	0x08013677
 80134f4:	080136af 	.word	0x080136af
 80134f8:	080136d3 	.word	0x080136d3

080134fc <stdio_exit_handler>:
 80134fc:	4a02      	ldr	r2, [pc, #8]	; (8013508 <stdio_exit_handler+0xc>)
 80134fe:	4903      	ldr	r1, [pc, #12]	; (801350c <stdio_exit_handler+0x10>)
 8013500:	4803      	ldr	r0, [pc, #12]	; (8013510 <stdio_exit_handler+0x14>)
 8013502:	f000 b869 	b.w	80135d8 <_fwalk_sglue>
 8013506:	bf00      	nop
 8013508:	20000810 	.word	0x20000810
 801350c:	08015265 	.word	0x08015265
 8013510:	2000081c 	.word	0x2000081c

08013514 <cleanup_stdio>:
 8013514:	6841      	ldr	r1, [r0, #4]
 8013516:	4b0c      	ldr	r3, [pc, #48]	; (8013548 <cleanup_stdio+0x34>)
 8013518:	b510      	push	{r4, lr}
 801351a:	4299      	cmp	r1, r3
 801351c:	4604      	mov	r4, r0
 801351e:	d001      	beq.n	8013524 <cleanup_stdio+0x10>
 8013520:	f001 fea0 	bl	8015264 <_fflush_r>
 8013524:	68a1      	ldr	r1, [r4, #8]
 8013526:	4b09      	ldr	r3, [pc, #36]	; (801354c <cleanup_stdio+0x38>)
 8013528:	4299      	cmp	r1, r3
 801352a:	d002      	beq.n	8013532 <cleanup_stdio+0x1e>
 801352c:	4620      	mov	r0, r4
 801352e:	f001 fe99 	bl	8015264 <_fflush_r>
 8013532:	68e1      	ldr	r1, [r4, #12]
 8013534:	4b06      	ldr	r3, [pc, #24]	; (8013550 <cleanup_stdio+0x3c>)
 8013536:	4299      	cmp	r1, r3
 8013538:	d004      	beq.n	8013544 <cleanup_stdio+0x30>
 801353a:	4620      	mov	r0, r4
 801353c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013540:	f001 be90 	b.w	8015264 <_fflush_r>
 8013544:	bd10      	pop	{r4, pc}
 8013546:	bf00      	nop
 8013548:	20003a84 	.word	0x20003a84
 801354c:	20003aec 	.word	0x20003aec
 8013550:	20003b54 	.word	0x20003b54

08013554 <global_stdio_init.part.0>:
 8013554:	b510      	push	{r4, lr}
 8013556:	4b0b      	ldr	r3, [pc, #44]	; (8013584 <global_stdio_init.part.0+0x30>)
 8013558:	4c0b      	ldr	r4, [pc, #44]	; (8013588 <global_stdio_init.part.0+0x34>)
 801355a:	4a0c      	ldr	r2, [pc, #48]	; (801358c <global_stdio_init.part.0+0x38>)
 801355c:	4620      	mov	r0, r4
 801355e:	601a      	str	r2, [r3, #0]
 8013560:	2104      	movs	r1, #4
 8013562:	2200      	movs	r2, #0
 8013564:	f7ff ffa6 	bl	80134b4 <std>
 8013568:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801356c:	2201      	movs	r2, #1
 801356e:	2109      	movs	r1, #9
 8013570:	f7ff ffa0 	bl	80134b4 <std>
 8013574:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8013578:	2202      	movs	r2, #2
 801357a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801357e:	2112      	movs	r1, #18
 8013580:	f7ff bf98 	b.w	80134b4 <std>
 8013584:	20003bbc 	.word	0x20003bbc
 8013588:	20003a84 	.word	0x20003a84
 801358c:	080134fd 	.word	0x080134fd

08013590 <__sfp_lock_acquire>:
 8013590:	4801      	ldr	r0, [pc, #4]	; (8013598 <__sfp_lock_acquire+0x8>)
 8013592:	f000 b97b 	b.w	801388c <__retarget_lock_acquire_recursive>
 8013596:	bf00      	nop
 8013598:	20003bc5 	.word	0x20003bc5

0801359c <__sfp_lock_release>:
 801359c:	4801      	ldr	r0, [pc, #4]	; (80135a4 <__sfp_lock_release+0x8>)
 801359e:	f000 b976 	b.w	801388e <__retarget_lock_release_recursive>
 80135a2:	bf00      	nop
 80135a4:	20003bc5 	.word	0x20003bc5

080135a8 <__sinit>:
 80135a8:	b510      	push	{r4, lr}
 80135aa:	4604      	mov	r4, r0
 80135ac:	f7ff fff0 	bl	8013590 <__sfp_lock_acquire>
 80135b0:	6a23      	ldr	r3, [r4, #32]
 80135b2:	b11b      	cbz	r3, 80135bc <__sinit+0x14>
 80135b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135b8:	f7ff bff0 	b.w	801359c <__sfp_lock_release>
 80135bc:	4b04      	ldr	r3, [pc, #16]	; (80135d0 <__sinit+0x28>)
 80135be:	6223      	str	r3, [r4, #32]
 80135c0:	4b04      	ldr	r3, [pc, #16]	; (80135d4 <__sinit+0x2c>)
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d1f5      	bne.n	80135b4 <__sinit+0xc>
 80135c8:	f7ff ffc4 	bl	8013554 <global_stdio_init.part.0>
 80135cc:	e7f2      	b.n	80135b4 <__sinit+0xc>
 80135ce:	bf00      	nop
 80135d0:	08013515 	.word	0x08013515
 80135d4:	20003bbc 	.word	0x20003bbc

080135d8 <_fwalk_sglue>:
 80135d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135dc:	4607      	mov	r7, r0
 80135de:	4688      	mov	r8, r1
 80135e0:	4614      	mov	r4, r2
 80135e2:	2600      	movs	r6, #0
 80135e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80135e8:	f1b9 0901 	subs.w	r9, r9, #1
 80135ec:	d505      	bpl.n	80135fa <_fwalk_sglue+0x22>
 80135ee:	6824      	ldr	r4, [r4, #0]
 80135f0:	2c00      	cmp	r4, #0
 80135f2:	d1f7      	bne.n	80135e4 <_fwalk_sglue+0xc>
 80135f4:	4630      	mov	r0, r6
 80135f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80135fa:	89ab      	ldrh	r3, [r5, #12]
 80135fc:	2b01      	cmp	r3, #1
 80135fe:	d907      	bls.n	8013610 <_fwalk_sglue+0x38>
 8013600:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013604:	3301      	adds	r3, #1
 8013606:	d003      	beq.n	8013610 <_fwalk_sglue+0x38>
 8013608:	4629      	mov	r1, r5
 801360a:	4638      	mov	r0, r7
 801360c:	47c0      	blx	r8
 801360e:	4306      	orrs	r6, r0
 8013610:	3568      	adds	r5, #104	; 0x68
 8013612:	e7e9      	b.n	80135e8 <_fwalk_sglue+0x10>

08013614 <siprintf>:
 8013614:	b40e      	push	{r1, r2, r3}
 8013616:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801361a:	b500      	push	{lr}
 801361c:	b09c      	sub	sp, #112	; 0x70
 801361e:	ab1d      	add	r3, sp, #116	; 0x74
 8013620:	9002      	str	r0, [sp, #8]
 8013622:	9006      	str	r0, [sp, #24]
 8013624:	9107      	str	r1, [sp, #28]
 8013626:	9104      	str	r1, [sp, #16]
 8013628:	4808      	ldr	r0, [pc, #32]	; (801364c <siprintf+0x38>)
 801362a:	4909      	ldr	r1, [pc, #36]	; (8013650 <siprintf+0x3c>)
 801362c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013630:	9105      	str	r1, [sp, #20]
 8013632:	6800      	ldr	r0, [r0, #0]
 8013634:	a902      	add	r1, sp, #8
 8013636:	9301      	str	r3, [sp, #4]
 8013638:	f001 fc94 	bl	8014f64 <_svfiprintf_r>
 801363c:	2200      	movs	r2, #0
 801363e:	9b02      	ldr	r3, [sp, #8]
 8013640:	701a      	strb	r2, [r3, #0]
 8013642:	b01c      	add	sp, #112	; 0x70
 8013644:	f85d eb04 	ldr.w	lr, [sp], #4
 8013648:	b003      	add	sp, #12
 801364a:	4770      	bx	lr
 801364c:	20000868 	.word	0x20000868
 8013650:	ffff0208 	.word	0xffff0208

08013654 <__sread>:
 8013654:	b510      	push	{r4, lr}
 8013656:	460c      	mov	r4, r1
 8013658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801365c:	f000 f8c8 	bl	80137f0 <_read_r>
 8013660:	2800      	cmp	r0, #0
 8013662:	bfab      	itete	ge
 8013664:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013666:	89a3      	ldrhlt	r3, [r4, #12]
 8013668:	181b      	addge	r3, r3, r0
 801366a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801366e:	bfac      	ite	ge
 8013670:	6563      	strge	r3, [r4, #84]	; 0x54
 8013672:	81a3      	strhlt	r3, [r4, #12]
 8013674:	bd10      	pop	{r4, pc}

08013676 <__swrite>:
 8013676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801367a:	461f      	mov	r7, r3
 801367c:	898b      	ldrh	r3, [r1, #12]
 801367e:	4605      	mov	r5, r0
 8013680:	05db      	lsls	r3, r3, #23
 8013682:	460c      	mov	r4, r1
 8013684:	4616      	mov	r6, r2
 8013686:	d505      	bpl.n	8013694 <__swrite+0x1e>
 8013688:	2302      	movs	r3, #2
 801368a:	2200      	movs	r2, #0
 801368c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013690:	f000 f89c 	bl	80137cc <_lseek_r>
 8013694:	89a3      	ldrh	r3, [r4, #12]
 8013696:	4632      	mov	r2, r6
 8013698:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801369c:	81a3      	strh	r3, [r4, #12]
 801369e:	4628      	mov	r0, r5
 80136a0:	463b      	mov	r3, r7
 80136a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80136a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136aa:	f000 b8b3 	b.w	8013814 <_write_r>

080136ae <__sseek>:
 80136ae:	b510      	push	{r4, lr}
 80136b0:	460c      	mov	r4, r1
 80136b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136b6:	f000 f889 	bl	80137cc <_lseek_r>
 80136ba:	1c43      	adds	r3, r0, #1
 80136bc:	89a3      	ldrh	r3, [r4, #12]
 80136be:	bf15      	itete	ne
 80136c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80136c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80136c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80136ca:	81a3      	strheq	r3, [r4, #12]
 80136cc:	bf18      	it	ne
 80136ce:	81a3      	strhne	r3, [r4, #12]
 80136d0:	bd10      	pop	{r4, pc}

080136d2 <__sclose>:
 80136d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136d6:	f000 b869 	b.w	80137ac <_close_r>

080136da <memset>:
 80136da:	4603      	mov	r3, r0
 80136dc:	4402      	add	r2, r0
 80136de:	4293      	cmp	r3, r2
 80136e0:	d100      	bne.n	80136e4 <memset+0xa>
 80136e2:	4770      	bx	lr
 80136e4:	f803 1b01 	strb.w	r1, [r3], #1
 80136e8:	e7f9      	b.n	80136de <memset+0x4>
	...

080136ec <strtok>:
 80136ec:	4b16      	ldr	r3, [pc, #88]	; (8013748 <strtok+0x5c>)
 80136ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136f2:	681f      	ldr	r7, [r3, #0]
 80136f4:	4605      	mov	r5, r0
 80136f6:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80136f8:	460e      	mov	r6, r1
 80136fa:	b9ec      	cbnz	r4, 8013738 <strtok+0x4c>
 80136fc:	2050      	movs	r0, #80	; 0x50
 80136fe:	f000 ffab 	bl	8014658 <malloc>
 8013702:	4602      	mov	r2, r0
 8013704:	6478      	str	r0, [r7, #68]	; 0x44
 8013706:	b920      	cbnz	r0, 8013712 <strtok+0x26>
 8013708:	215b      	movs	r1, #91	; 0x5b
 801370a:	4b10      	ldr	r3, [pc, #64]	; (801374c <strtok+0x60>)
 801370c:	4810      	ldr	r0, [pc, #64]	; (8013750 <strtok+0x64>)
 801370e:	f000 f8cd 	bl	80138ac <__assert_func>
 8013712:	e9c0 4400 	strd	r4, r4, [r0]
 8013716:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801371a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801371e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8013722:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8013726:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801372a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801372e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8013732:	6184      	str	r4, [r0, #24]
 8013734:	7704      	strb	r4, [r0, #28]
 8013736:	6244      	str	r4, [r0, #36]	; 0x24
 8013738:	4631      	mov	r1, r6
 801373a:	4628      	mov	r0, r5
 801373c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801373e:	2301      	movs	r3, #1
 8013740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013744:	f000 b806 	b.w	8013754 <__strtok_r>
 8013748:	20000868 	.word	0x20000868
 801374c:	08015f2b 	.word	0x08015f2b
 8013750:	08015f42 	.word	0x08015f42

08013754 <__strtok_r>:
 8013754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013756:	b908      	cbnz	r0, 801375c <__strtok_r+0x8>
 8013758:	6810      	ldr	r0, [r2, #0]
 801375a:	b188      	cbz	r0, 8013780 <__strtok_r+0x2c>
 801375c:	4604      	mov	r4, r0
 801375e:	460f      	mov	r7, r1
 8013760:	4620      	mov	r0, r4
 8013762:	f814 5b01 	ldrb.w	r5, [r4], #1
 8013766:	f817 6b01 	ldrb.w	r6, [r7], #1
 801376a:	b91e      	cbnz	r6, 8013774 <__strtok_r+0x20>
 801376c:	b965      	cbnz	r5, 8013788 <__strtok_r+0x34>
 801376e:	4628      	mov	r0, r5
 8013770:	6015      	str	r5, [r2, #0]
 8013772:	e005      	b.n	8013780 <__strtok_r+0x2c>
 8013774:	42b5      	cmp	r5, r6
 8013776:	d1f6      	bne.n	8013766 <__strtok_r+0x12>
 8013778:	2b00      	cmp	r3, #0
 801377a:	d1f0      	bne.n	801375e <__strtok_r+0xa>
 801377c:	6014      	str	r4, [r2, #0]
 801377e:	7003      	strb	r3, [r0, #0]
 8013780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013782:	461c      	mov	r4, r3
 8013784:	e00c      	b.n	80137a0 <__strtok_r+0x4c>
 8013786:	b915      	cbnz	r5, 801378e <__strtok_r+0x3a>
 8013788:	460e      	mov	r6, r1
 801378a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801378e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8013792:	42ab      	cmp	r3, r5
 8013794:	d1f7      	bne.n	8013786 <__strtok_r+0x32>
 8013796:	2b00      	cmp	r3, #0
 8013798:	d0f3      	beq.n	8013782 <__strtok_r+0x2e>
 801379a:	2300      	movs	r3, #0
 801379c:	f804 3c01 	strb.w	r3, [r4, #-1]
 80137a0:	6014      	str	r4, [r2, #0]
 80137a2:	e7ed      	b.n	8013780 <__strtok_r+0x2c>

080137a4 <_localeconv_r>:
 80137a4:	4800      	ldr	r0, [pc, #0]	; (80137a8 <_localeconv_r+0x4>)
 80137a6:	4770      	bx	lr
 80137a8:	2000095c 	.word	0x2000095c

080137ac <_close_r>:
 80137ac:	b538      	push	{r3, r4, r5, lr}
 80137ae:	2300      	movs	r3, #0
 80137b0:	4d05      	ldr	r5, [pc, #20]	; (80137c8 <_close_r+0x1c>)
 80137b2:	4604      	mov	r4, r0
 80137b4:	4608      	mov	r0, r1
 80137b6:	602b      	str	r3, [r5, #0]
 80137b8:	f7f2 f8c4 	bl	8005944 <_close>
 80137bc:	1c43      	adds	r3, r0, #1
 80137be:	d102      	bne.n	80137c6 <_close_r+0x1a>
 80137c0:	682b      	ldr	r3, [r5, #0]
 80137c2:	b103      	cbz	r3, 80137c6 <_close_r+0x1a>
 80137c4:	6023      	str	r3, [r4, #0]
 80137c6:	bd38      	pop	{r3, r4, r5, pc}
 80137c8:	20003bc0 	.word	0x20003bc0

080137cc <_lseek_r>:
 80137cc:	b538      	push	{r3, r4, r5, lr}
 80137ce:	4604      	mov	r4, r0
 80137d0:	4608      	mov	r0, r1
 80137d2:	4611      	mov	r1, r2
 80137d4:	2200      	movs	r2, #0
 80137d6:	4d05      	ldr	r5, [pc, #20]	; (80137ec <_lseek_r+0x20>)
 80137d8:	602a      	str	r2, [r5, #0]
 80137da:	461a      	mov	r2, r3
 80137dc:	f7f2 f8d6 	bl	800598c <_lseek>
 80137e0:	1c43      	adds	r3, r0, #1
 80137e2:	d102      	bne.n	80137ea <_lseek_r+0x1e>
 80137e4:	682b      	ldr	r3, [r5, #0]
 80137e6:	b103      	cbz	r3, 80137ea <_lseek_r+0x1e>
 80137e8:	6023      	str	r3, [r4, #0]
 80137ea:	bd38      	pop	{r3, r4, r5, pc}
 80137ec:	20003bc0 	.word	0x20003bc0

080137f0 <_read_r>:
 80137f0:	b538      	push	{r3, r4, r5, lr}
 80137f2:	4604      	mov	r4, r0
 80137f4:	4608      	mov	r0, r1
 80137f6:	4611      	mov	r1, r2
 80137f8:	2200      	movs	r2, #0
 80137fa:	4d05      	ldr	r5, [pc, #20]	; (8013810 <_read_r+0x20>)
 80137fc:	602a      	str	r2, [r5, #0]
 80137fe:	461a      	mov	r2, r3
 8013800:	f7f2 f867 	bl	80058d2 <_read>
 8013804:	1c43      	adds	r3, r0, #1
 8013806:	d102      	bne.n	801380e <_read_r+0x1e>
 8013808:	682b      	ldr	r3, [r5, #0]
 801380a:	b103      	cbz	r3, 801380e <_read_r+0x1e>
 801380c:	6023      	str	r3, [r4, #0]
 801380e:	bd38      	pop	{r3, r4, r5, pc}
 8013810:	20003bc0 	.word	0x20003bc0

08013814 <_write_r>:
 8013814:	b538      	push	{r3, r4, r5, lr}
 8013816:	4604      	mov	r4, r0
 8013818:	4608      	mov	r0, r1
 801381a:	4611      	mov	r1, r2
 801381c:	2200      	movs	r2, #0
 801381e:	4d05      	ldr	r5, [pc, #20]	; (8013834 <_write_r+0x20>)
 8013820:	602a      	str	r2, [r5, #0]
 8013822:	461a      	mov	r2, r3
 8013824:	f7f2 f872 	bl	800590c <_write>
 8013828:	1c43      	adds	r3, r0, #1
 801382a:	d102      	bne.n	8013832 <_write_r+0x1e>
 801382c:	682b      	ldr	r3, [r5, #0]
 801382e:	b103      	cbz	r3, 8013832 <_write_r+0x1e>
 8013830:	6023      	str	r3, [r4, #0]
 8013832:	bd38      	pop	{r3, r4, r5, pc}
 8013834:	20003bc0 	.word	0x20003bc0

08013838 <__errno>:
 8013838:	4b01      	ldr	r3, [pc, #4]	; (8013840 <__errno+0x8>)
 801383a:	6818      	ldr	r0, [r3, #0]
 801383c:	4770      	bx	lr
 801383e:	bf00      	nop
 8013840:	20000868 	.word	0x20000868

08013844 <__libc_init_array>:
 8013844:	b570      	push	{r4, r5, r6, lr}
 8013846:	2600      	movs	r6, #0
 8013848:	4d0c      	ldr	r5, [pc, #48]	; (801387c <__libc_init_array+0x38>)
 801384a:	4c0d      	ldr	r4, [pc, #52]	; (8013880 <__libc_init_array+0x3c>)
 801384c:	1b64      	subs	r4, r4, r5
 801384e:	10a4      	asrs	r4, r4, #2
 8013850:	42a6      	cmp	r6, r4
 8013852:	d109      	bne.n	8013868 <__libc_init_array+0x24>
 8013854:	f002 f888 	bl	8015968 <_init>
 8013858:	2600      	movs	r6, #0
 801385a:	4d0a      	ldr	r5, [pc, #40]	; (8013884 <__libc_init_array+0x40>)
 801385c:	4c0a      	ldr	r4, [pc, #40]	; (8013888 <__libc_init_array+0x44>)
 801385e:	1b64      	subs	r4, r4, r5
 8013860:	10a4      	asrs	r4, r4, #2
 8013862:	42a6      	cmp	r6, r4
 8013864:	d105      	bne.n	8013872 <__libc_init_array+0x2e>
 8013866:	bd70      	pop	{r4, r5, r6, pc}
 8013868:	f855 3b04 	ldr.w	r3, [r5], #4
 801386c:	4798      	blx	r3
 801386e:	3601      	adds	r6, #1
 8013870:	e7ee      	b.n	8013850 <__libc_init_array+0xc>
 8013872:	f855 3b04 	ldr.w	r3, [r5], #4
 8013876:	4798      	blx	r3
 8013878:	3601      	adds	r6, #1
 801387a:	e7f2      	b.n	8013862 <__libc_init_array+0x1e>
 801387c:	080161c0 	.word	0x080161c0
 8013880:	080161c0 	.word	0x080161c0
 8013884:	080161c0 	.word	0x080161c0
 8013888:	080161c4 	.word	0x080161c4

0801388c <__retarget_lock_acquire_recursive>:
 801388c:	4770      	bx	lr

0801388e <__retarget_lock_release_recursive>:
 801388e:	4770      	bx	lr

08013890 <memchr>:
 8013890:	4603      	mov	r3, r0
 8013892:	b510      	push	{r4, lr}
 8013894:	b2c9      	uxtb	r1, r1
 8013896:	4402      	add	r2, r0
 8013898:	4293      	cmp	r3, r2
 801389a:	4618      	mov	r0, r3
 801389c:	d101      	bne.n	80138a2 <memchr+0x12>
 801389e:	2000      	movs	r0, #0
 80138a0:	e003      	b.n	80138aa <memchr+0x1a>
 80138a2:	7804      	ldrb	r4, [r0, #0]
 80138a4:	3301      	adds	r3, #1
 80138a6:	428c      	cmp	r4, r1
 80138a8:	d1f6      	bne.n	8013898 <memchr+0x8>
 80138aa:	bd10      	pop	{r4, pc}

080138ac <__assert_func>:
 80138ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80138ae:	4614      	mov	r4, r2
 80138b0:	461a      	mov	r2, r3
 80138b2:	4b09      	ldr	r3, [pc, #36]	; (80138d8 <__assert_func+0x2c>)
 80138b4:	4605      	mov	r5, r0
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	68d8      	ldr	r0, [r3, #12]
 80138ba:	b14c      	cbz	r4, 80138d0 <__assert_func+0x24>
 80138bc:	4b07      	ldr	r3, [pc, #28]	; (80138dc <__assert_func+0x30>)
 80138be:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80138c2:	9100      	str	r1, [sp, #0]
 80138c4:	462b      	mov	r3, r5
 80138c6:	4906      	ldr	r1, [pc, #24]	; (80138e0 <__assert_func+0x34>)
 80138c8:	f001 fcf4 	bl	80152b4 <fiprintf>
 80138cc:	f001 fd3c 	bl	8015348 <abort>
 80138d0:	4b04      	ldr	r3, [pc, #16]	; (80138e4 <__assert_func+0x38>)
 80138d2:	461c      	mov	r4, r3
 80138d4:	e7f3      	b.n	80138be <__assert_func+0x12>
 80138d6:	bf00      	nop
 80138d8:	20000868 	.word	0x20000868
 80138dc:	08015f9c 	.word	0x08015f9c
 80138e0:	08015fa9 	.word	0x08015fa9
 80138e4:	08015fd7 	.word	0x08015fd7

080138e8 <quorem>:
 80138e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138ec:	6903      	ldr	r3, [r0, #16]
 80138ee:	690c      	ldr	r4, [r1, #16]
 80138f0:	4607      	mov	r7, r0
 80138f2:	42a3      	cmp	r3, r4
 80138f4:	db7f      	blt.n	80139f6 <quorem+0x10e>
 80138f6:	3c01      	subs	r4, #1
 80138f8:	f100 0514 	add.w	r5, r0, #20
 80138fc:	f101 0814 	add.w	r8, r1, #20
 8013900:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013904:	9301      	str	r3, [sp, #4]
 8013906:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801390a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801390e:	3301      	adds	r3, #1
 8013910:	429a      	cmp	r2, r3
 8013912:	fbb2 f6f3 	udiv	r6, r2, r3
 8013916:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801391a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801391e:	d331      	bcc.n	8013984 <quorem+0x9c>
 8013920:	f04f 0e00 	mov.w	lr, #0
 8013924:	4640      	mov	r0, r8
 8013926:	46ac      	mov	ip, r5
 8013928:	46f2      	mov	sl, lr
 801392a:	f850 2b04 	ldr.w	r2, [r0], #4
 801392e:	b293      	uxth	r3, r2
 8013930:	fb06 e303 	mla	r3, r6, r3, lr
 8013934:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013938:	0c1a      	lsrs	r2, r3, #16
 801393a:	b29b      	uxth	r3, r3
 801393c:	fb06 220e 	mla	r2, r6, lr, r2
 8013940:	ebaa 0303 	sub.w	r3, sl, r3
 8013944:	f8dc a000 	ldr.w	sl, [ip]
 8013948:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801394c:	fa1f fa8a 	uxth.w	sl, sl
 8013950:	4453      	add	r3, sl
 8013952:	f8dc a000 	ldr.w	sl, [ip]
 8013956:	b292      	uxth	r2, r2
 8013958:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801395c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013960:	b29b      	uxth	r3, r3
 8013962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013966:	4581      	cmp	r9, r0
 8013968:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801396c:	f84c 3b04 	str.w	r3, [ip], #4
 8013970:	d2db      	bcs.n	801392a <quorem+0x42>
 8013972:	f855 300b 	ldr.w	r3, [r5, fp]
 8013976:	b92b      	cbnz	r3, 8013984 <quorem+0x9c>
 8013978:	9b01      	ldr	r3, [sp, #4]
 801397a:	3b04      	subs	r3, #4
 801397c:	429d      	cmp	r5, r3
 801397e:	461a      	mov	r2, r3
 8013980:	d32d      	bcc.n	80139de <quorem+0xf6>
 8013982:	613c      	str	r4, [r7, #16]
 8013984:	4638      	mov	r0, r7
 8013986:	f001 f995 	bl	8014cb4 <__mcmp>
 801398a:	2800      	cmp	r0, #0
 801398c:	db23      	blt.n	80139d6 <quorem+0xee>
 801398e:	4629      	mov	r1, r5
 8013990:	2000      	movs	r0, #0
 8013992:	3601      	adds	r6, #1
 8013994:	f858 2b04 	ldr.w	r2, [r8], #4
 8013998:	f8d1 c000 	ldr.w	ip, [r1]
 801399c:	b293      	uxth	r3, r2
 801399e:	1ac3      	subs	r3, r0, r3
 80139a0:	0c12      	lsrs	r2, r2, #16
 80139a2:	fa1f f08c 	uxth.w	r0, ip
 80139a6:	4403      	add	r3, r0
 80139a8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80139ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80139b0:	b29b      	uxth	r3, r3
 80139b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80139b6:	45c1      	cmp	r9, r8
 80139b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80139bc:	f841 3b04 	str.w	r3, [r1], #4
 80139c0:	d2e8      	bcs.n	8013994 <quorem+0xac>
 80139c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80139c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80139ca:	b922      	cbnz	r2, 80139d6 <quorem+0xee>
 80139cc:	3b04      	subs	r3, #4
 80139ce:	429d      	cmp	r5, r3
 80139d0:	461a      	mov	r2, r3
 80139d2:	d30a      	bcc.n	80139ea <quorem+0x102>
 80139d4:	613c      	str	r4, [r7, #16]
 80139d6:	4630      	mov	r0, r6
 80139d8:	b003      	add	sp, #12
 80139da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139de:	6812      	ldr	r2, [r2, #0]
 80139e0:	3b04      	subs	r3, #4
 80139e2:	2a00      	cmp	r2, #0
 80139e4:	d1cd      	bne.n	8013982 <quorem+0x9a>
 80139e6:	3c01      	subs	r4, #1
 80139e8:	e7c8      	b.n	801397c <quorem+0x94>
 80139ea:	6812      	ldr	r2, [r2, #0]
 80139ec:	3b04      	subs	r3, #4
 80139ee:	2a00      	cmp	r2, #0
 80139f0:	d1f0      	bne.n	80139d4 <quorem+0xec>
 80139f2:	3c01      	subs	r4, #1
 80139f4:	e7eb      	b.n	80139ce <quorem+0xe6>
 80139f6:	2000      	movs	r0, #0
 80139f8:	e7ee      	b.n	80139d8 <quorem+0xf0>
 80139fa:	0000      	movs	r0, r0
 80139fc:	0000      	movs	r0, r0
	...

08013a00 <_dtoa_r>:
 8013a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a04:	4616      	mov	r6, r2
 8013a06:	461f      	mov	r7, r3
 8013a08:	69c4      	ldr	r4, [r0, #28]
 8013a0a:	b099      	sub	sp, #100	; 0x64
 8013a0c:	4605      	mov	r5, r0
 8013a0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013a12:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8013a16:	b974      	cbnz	r4, 8013a36 <_dtoa_r+0x36>
 8013a18:	2010      	movs	r0, #16
 8013a1a:	f000 fe1d 	bl	8014658 <malloc>
 8013a1e:	4602      	mov	r2, r0
 8013a20:	61e8      	str	r0, [r5, #28]
 8013a22:	b920      	cbnz	r0, 8013a2e <_dtoa_r+0x2e>
 8013a24:	21ef      	movs	r1, #239	; 0xef
 8013a26:	4bac      	ldr	r3, [pc, #688]	; (8013cd8 <_dtoa_r+0x2d8>)
 8013a28:	48ac      	ldr	r0, [pc, #688]	; (8013cdc <_dtoa_r+0x2dc>)
 8013a2a:	f7ff ff3f 	bl	80138ac <__assert_func>
 8013a2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013a32:	6004      	str	r4, [r0, #0]
 8013a34:	60c4      	str	r4, [r0, #12]
 8013a36:	69eb      	ldr	r3, [r5, #28]
 8013a38:	6819      	ldr	r1, [r3, #0]
 8013a3a:	b151      	cbz	r1, 8013a52 <_dtoa_r+0x52>
 8013a3c:	685a      	ldr	r2, [r3, #4]
 8013a3e:	2301      	movs	r3, #1
 8013a40:	4093      	lsls	r3, r2
 8013a42:	604a      	str	r2, [r1, #4]
 8013a44:	608b      	str	r3, [r1, #8]
 8013a46:	4628      	mov	r0, r5
 8013a48:	f000 fefa 	bl	8014840 <_Bfree>
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	69eb      	ldr	r3, [r5, #28]
 8013a50:	601a      	str	r2, [r3, #0]
 8013a52:	1e3b      	subs	r3, r7, #0
 8013a54:	bfaf      	iteee	ge
 8013a56:	2300      	movge	r3, #0
 8013a58:	2201      	movlt	r2, #1
 8013a5a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013a5e:	9305      	strlt	r3, [sp, #20]
 8013a60:	bfa8      	it	ge
 8013a62:	f8c8 3000 	strge.w	r3, [r8]
 8013a66:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8013a6a:	4b9d      	ldr	r3, [pc, #628]	; (8013ce0 <_dtoa_r+0x2e0>)
 8013a6c:	bfb8      	it	lt
 8013a6e:	f8c8 2000 	strlt.w	r2, [r8]
 8013a72:	ea33 0309 	bics.w	r3, r3, r9
 8013a76:	d119      	bne.n	8013aac <_dtoa_r+0xac>
 8013a78:	f242 730f 	movw	r3, #9999	; 0x270f
 8013a7c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013a7e:	6013      	str	r3, [r2, #0]
 8013a80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013a84:	4333      	orrs	r3, r6
 8013a86:	f000 8589 	beq.w	801459c <_dtoa_r+0xb9c>
 8013a8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013a8c:	b953      	cbnz	r3, 8013aa4 <_dtoa_r+0xa4>
 8013a8e:	4b95      	ldr	r3, [pc, #596]	; (8013ce4 <_dtoa_r+0x2e4>)
 8013a90:	e023      	b.n	8013ada <_dtoa_r+0xda>
 8013a92:	4b95      	ldr	r3, [pc, #596]	; (8013ce8 <_dtoa_r+0x2e8>)
 8013a94:	9303      	str	r3, [sp, #12]
 8013a96:	3308      	adds	r3, #8
 8013a98:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013a9a:	6013      	str	r3, [r2, #0]
 8013a9c:	9803      	ldr	r0, [sp, #12]
 8013a9e:	b019      	add	sp, #100	; 0x64
 8013aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aa4:	4b8f      	ldr	r3, [pc, #572]	; (8013ce4 <_dtoa_r+0x2e4>)
 8013aa6:	9303      	str	r3, [sp, #12]
 8013aa8:	3303      	adds	r3, #3
 8013aaa:	e7f5      	b.n	8013a98 <_dtoa_r+0x98>
 8013aac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013ab0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8013ab4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013ab8:	2200      	movs	r2, #0
 8013aba:	2300      	movs	r3, #0
 8013abc:	f7ec ffe0 	bl	8000a80 <__aeabi_dcmpeq>
 8013ac0:	4680      	mov	r8, r0
 8013ac2:	b160      	cbz	r0, 8013ade <_dtoa_r+0xde>
 8013ac4:	2301      	movs	r3, #1
 8013ac6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8013ac8:	6013      	str	r3, [r2, #0]
 8013aca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	f000 8562 	beq.w	8014596 <_dtoa_r+0xb96>
 8013ad2:	4b86      	ldr	r3, [pc, #536]	; (8013cec <_dtoa_r+0x2ec>)
 8013ad4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8013ad6:	6013      	str	r3, [r2, #0]
 8013ad8:	3b01      	subs	r3, #1
 8013ada:	9303      	str	r3, [sp, #12]
 8013adc:	e7de      	b.n	8013a9c <_dtoa_r+0x9c>
 8013ade:	ab16      	add	r3, sp, #88	; 0x58
 8013ae0:	9301      	str	r3, [sp, #4]
 8013ae2:	ab17      	add	r3, sp, #92	; 0x5c
 8013ae4:	9300      	str	r3, [sp, #0]
 8013ae6:	4628      	mov	r0, r5
 8013ae8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013aec:	f001 f98a 	bl	8014e04 <__d2b>
 8013af0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013af4:	4682      	mov	sl, r0
 8013af6:	2c00      	cmp	r4, #0
 8013af8:	d07e      	beq.n	8013bf8 <_dtoa_r+0x1f8>
 8013afa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013afe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013b00:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8013b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013b08:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8013b0c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013b10:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8013b14:	4619      	mov	r1, r3
 8013b16:	2200      	movs	r2, #0
 8013b18:	4b75      	ldr	r3, [pc, #468]	; (8013cf0 <_dtoa_r+0x2f0>)
 8013b1a:	f7ec fb91 	bl	8000240 <__aeabi_dsub>
 8013b1e:	a368      	add	r3, pc, #416	; (adr r3, 8013cc0 <_dtoa_r+0x2c0>)
 8013b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b24:	f7ec fd44 	bl	80005b0 <__aeabi_dmul>
 8013b28:	a367      	add	r3, pc, #412	; (adr r3, 8013cc8 <_dtoa_r+0x2c8>)
 8013b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b2e:	f7ec fb89 	bl	8000244 <__adddf3>
 8013b32:	4606      	mov	r6, r0
 8013b34:	4620      	mov	r0, r4
 8013b36:	460f      	mov	r7, r1
 8013b38:	f7ec fcd0 	bl	80004dc <__aeabi_i2d>
 8013b3c:	a364      	add	r3, pc, #400	; (adr r3, 8013cd0 <_dtoa_r+0x2d0>)
 8013b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b42:	f7ec fd35 	bl	80005b0 <__aeabi_dmul>
 8013b46:	4602      	mov	r2, r0
 8013b48:	460b      	mov	r3, r1
 8013b4a:	4630      	mov	r0, r6
 8013b4c:	4639      	mov	r1, r7
 8013b4e:	f7ec fb79 	bl	8000244 <__adddf3>
 8013b52:	4606      	mov	r6, r0
 8013b54:	460f      	mov	r7, r1
 8013b56:	f7ec ffdb 	bl	8000b10 <__aeabi_d2iz>
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	4683      	mov	fp, r0
 8013b5e:	2300      	movs	r3, #0
 8013b60:	4630      	mov	r0, r6
 8013b62:	4639      	mov	r1, r7
 8013b64:	f7ec ff96 	bl	8000a94 <__aeabi_dcmplt>
 8013b68:	b148      	cbz	r0, 8013b7e <_dtoa_r+0x17e>
 8013b6a:	4658      	mov	r0, fp
 8013b6c:	f7ec fcb6 	bl	80004dc <__aeabi_i2d>
 8013b70:	4632      	mov	r2, r6
 8013b72:	463b      	mov	r3, r7
 8013b74:	f7ec ff84 	bl	8000a80 <__aeabi_dcmpeq>
 8013b78:	b908      	cbnz	r0, 8013b7e <_dtoa_r+0x17e>
 8013b7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013b7e:	f1bb 0f16 	cmp.w	fp, #22
 8013b82:	d857      	bhi.n	8013c34 <_dtoa_r+0x234>
 8013b84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013b88:	4b5a      	ldr	r3, [pc, #360]	; (8013cf4 <_dtoa_r+0x2f4>)
 8013b8a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b92:	f7ec ff7f 	bl	8000a94 <__aeabi_dcmplt>
 8013b96:	2800      	cmp	r0, #0
 8013b98:	d04e      	beq.n	8013c38 <_dtoa_r+0x238>
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013ba0:	930f      	str	r3, [sp, #60]	; 0x3c
 8013ba2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013ba4:	1b1b      	subs	r3, r3, r4
 8013ba6:	1e5a      	subs	r2, r3, #1
 8013ba8:	bf46      	itte	mi
 8013baa:	f1c3 0901 	rsbmi	r9, r3, #1
 8013bae:	2300      	movmi	r3, #0
 8013bb0:	f04f 0900 	movpl.w	r9, #0
 8013bb4:	9209      	str	r2, [sp, #36]	; 0x24
 8013bb6:	bf48      	it	mi
 8013bb8:	9309      	strmi	r3, [sp, #36]	; 0x24
 8013bba:	f1bb 0f00 	cmp.w	fp, #0
 8013bbe:	db3d      	blt.n	8013c3c <_dtoa_r+0x23c>
 8013bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013bc2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8013bc6:	445b      	add	r3, fp
 8013bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8013bca:	2300      	movs	r3, #0
 8013bcc:	930a      	str	r3, [sp, #40]	; 0x28
 8013bce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013bd0:	2b09      	cmp	r3, #9
 8013bd2:	d867      	bhi.n	8013ca4 <_dtoa_r+0x2a4>
 8013bd4:	2b05      	cmp	r3, #5
 8013bd6:	bfc4      	itt	gt
 8013bd8:	3b04      	subgt	r3, #4
 8013bda:	9322      	strgt	r3, [sp, #136]	; 0x88
 8013bdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013bde:	bfc8      	it	gt
 8013be0:	2400      	movgt	r4, #0
 8013be2:	f1a3 0302 	sub.w	r3, r3, #2
 8013be6:	bfd8      	it	le
 8013be8:	2401      	movle	r4, #1
 8013bea:	2b03      	cmp	r3, #3
 8013bec:	f200 8086 	bhi.w	8013cfc <_dtoa_r+0x2fc>
 8013bf0:	e8df f003 	tbb	[pc, r3]
 8013bf4:	5637392c 	.word	0x5637392c
 8013bf8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8013bfc:	441c      	add	r4, r3
 8013bfe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8013c02:	2b20      	cmp	r3, #32
 8013c04:	bfc1      	itttt	gt
 8013c06:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013c0a:	fa09 f903 	lslgt.w	r9, r9, r3
 8013c0e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8013c12:	fa26 f303 	lsrgt.w	r3, r6, r3
 8013c16:	bfd6      	itet	le
 8013c18:	f1c3 0320 	rsble	r3, r3, #32
 8013c1c:	ea49 0003 	orrgt.w	r0, r9, r3
 8013c20:	fa06 f003 	lslle.w	r0, r6, r3
 8013c24:	f7ec fc4a 	bl	80004bc <__aeabi_ui2d>
 8013c28:	2201      	movs	r2, #1
 8013c2a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8013c2e:	3c01      	subs	r4, #1
 8013c30:	9213      	str	r2, [sp, #76]	; 0x4c
 8013c32:	e76f      	b.n	8013b14 <_dtoa_r+0x114>
 8013c34:	2301      	movs	r3, #1
 8013c36:	e7b3      	b.n	8013ba0 <_dtoa_r+0x1a0>
 8013c38:	900f      	str	r0, [sp, #60]	; 0x3c
 8013c3a:	e7b2      	b.n	8013ba2 <_dtoa_r+0x1a2>
 8013c3c:	f1cb 0300 	rsb	r3, fp, #0
 8013c40:	930a      	str	r3, [sp, #40]	; 0x28
 8013c42:	2300      	movs	r3, #0
 8013c44:	eba9 090b 	sub.w	r9, r9, fp
 8013c48:	930e      	str	r3, [sp, #56]	; 0x38
 8013c4a:	e7c0      	b.n	8013bce <_dtoa_r+0x1ce>
 8013c4c:	2300      	movs	r3, #0
 8013c4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	dc55      	bgt.n	8013d02 <_dtoa_r+0x302>
 8013c56:	2301      	movs	r3, #1
 8013c58:	461a      	mov	r2, r3
 8013c5a:	9306      	str	r3, [sp, #24]
 8013c5c:	9308      	str	r3, [sp, #32]
 8013c5e:	9223      	str	r2, [sp, #140]	; 0x8c
 8013c60:	e00b      	b.n	8013c7a <_dtoa_r+0x27a>
 8013c62:	2301      	movs	r3, #1
 8013c64:	e7f3      	b.n	8013c4e <_dtoa_r+0x24e>
 8013c66:	2300      	movs	r3, #0
 8013c68:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013c6c:	445b      	add	r3, fp
 8013c6e:	9306      	str	r3, [sp, #24]
 8013c70:	3301      	adds	r3, #1
 8013c72:	2b01      	cmp	r3, #1
 8013c74:	9308      	str	r3, [sp, #32]
 8013c76:	bfb8      	it	lt
 8013c78:	2301      	movlt	r3, #1
 8013c7a:	2100      	movs	r1, #0
 8013c7c:	2204      	movs	r2, #4
 8013c7e:	69e8      	ldr	r0, [r5, #28]
 8013c80:	f102 0614 	add.w	r6, r2, #20
 8013c84:	429e      	cmp	r6, r3
 8013c86:	d940      	bls.n	8013d0a <_dtoa_r+0x30a>
 8013c88:	6041      	str	r1, [r0, #4]
 8013c8a:	4628      	mov	r0, r5
 8013c8c:	f000 fd98 	bl	80147c0 <_Balloc>
 8013c90:	9003      	str	r0, [sp, #12]
 8013c92:	2800      	cmp	r0, #0
 8013c94:	d13c      	bne.n	8013d10 <_dtoa_r+0x310>
 8013c96:	4602      	mov	r2, r0
 8013c98:	f240 11af 	movw	r1, #431	; 0x1af
 8013c9c:	4b16      	ldr	r3, [pc, #88]	; (8013cf8 <_dtoa_r+0x2f8>)
 8013c9e:	e6c3      	b.n	8013a28 <_dtoa_r+0x28>
 8013ca0:	2301      	movs	r3, #1
 8013ca2:	e7e1      	b.n	8013c68 <_dtoa_r+0x268>
 8013ca4:	2401      	movs	r4, #1
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	940b      	str	r4, [sp, #44]	; 0x2c
 8013caa:	9322      	str	r3, [sp, #136]	; 0x88
 8013cac:	f04f 33ff 	mov.w	r3, #4294967295
 8013cb0:	2200      	movs	r2, #0
 8013cb2:	9306      	str	r3, [sp, #24]
 8013cb4:	9308      	str	r3, [sp, #32]
 8013cb6:	2312      	movs	r3, #18
 8013cb8:	e7d1      	b.n	8013c5e <_dtoa_r+0x25e>
 8013cba:	bf00      	nop
 8013cbc:	f3af 8000 	nop.w
 8013cc0:	636f4361 	.word	0x636f4361
 8013cc4:	3fd287a7 	.word	0x3fd287a7
 8013cc8:	8b60c8b3 	.word	0x8b60c8b3
 8013ccc:	3fc68a28 	.word	0x3fc68a28
 8013cd0:	509f79fb 	.word	0x509f79fb
 8013cd4:	3fd34413 	.word	0x3fd34413
 8013cd8:	08015f2b 	.word	0x08015f2b
 8013cdc:	08015fe5 	.word	0x08015fe5
 8013ce0:	7ff00000 	.word	0x7ff00000
 8013ce4:	08015fe1 	.word	0x08015fe1
 8013ce8:	08015fd8 	.word	0x08015fd8
 8013cec:	08015f08 	.word	0x08015f08
 8013cf0:	3ff80000 	.word	0x3ff80000
 8013cf4:	080160d0 	.word	0x080160d0
 8013cf8:	0801603d 	.word	0x0801603d
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8013d00:	e7d4      	b.n	8013cac <_dtoa_r+0x2ac>
 8013d02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013d04:	9306      	str	r3, [sp, #24]
 8013d06:	9308      	str	r3, [sp, #32]
 8013d08:	e7b7      	b.n	8013c7a <_dtoa_r+0x27a>
 8013d0a:	3101      	adds	r1, #1
 8013d0c:	0052      	lsls	r2, r2, #1
 8013d0e:	e7b7      	b.n	8013c80 <_dtoa_r+0x280>
 8013d10:	69eb      	ldr	r3, [r5, #28]
 8013d12:	9a03      	ldr	r2, [sp, #12]
 8013d14:	601a      	str	r2, [r3, #0]
 8013d16:	9b08      	ldr	r3, [sp, #32]
 8013d18:	2b0e      	cmp	r3, #14
 8013d1a:	f200 80a8 	bhi.w	8013e6e <_dtoa_r+0x46e>
 8013d1e:	2c00      	cmp	r4, #0
 8013d20:	f000 80a5 	beq.w	8013e6e <_dtoa_r+0x46e>
 8013d24:	f1bb 0f00 	cmp.w	fp, #0
 8013d28:	dd34      	ble.n	8013d94 <_dtoa_r+0x394>
 8013d2a:	4b9a      	ldr	r3, [pc, #616]	; (8013f94 <_dtoa_r+0x594>)
 8013d2c:	f00b 020f 	and.w	r2, fp, #15
 8013d30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013d34:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013d38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013d3c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8013d40:	ea4f 142b 	mov.w	r4, fp, asr #4
 8013d44:	d016      	beq.n	8013d74 <_dtoa_r+0x374>
 8013d46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013d4a:	4b93      	ldr	r3, [pc, #588]	; (8013f98 <_dtoa_r+0x598>)
 8013d4c:	2703      	movs	r7, #3
 8013d4e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013d52:	f7ec fd57 	bl	8000804 <__aeabi_ddiv>
 8013d56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013d5a:	f004 040f 	and.w	r4, r4, #15
 8013d5e:	4e8e      	ldr	r6, [pc, #568]	; (8013f98 <_dtoa_r+0x598>)
 8013d60:	b954      	cbnz	r4, 8013d78 <_dtoa_r+0x378>
 8013d62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013d66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013d6a:	f7ec fd4b 	bl	8000804 <__aeabi_ddiv>
 8013d6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013d72:	e029      	b.n	8013dc8 <_dtoa_r+0x3c8>
 8013d74:	2702      	movs	r7, #2
 8013d76:	e7f2      	b.n	8013d5e <_dtoa_r+0x35e>
 8013d78:	07e1      	lsls	r1, r4, #31
 8013d7a:	d508      	bpl.n	8013d8e <_dtoa_r+0x38e>
 8013d7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013d80:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013d84:	f7ec fc14 	bl	80005b0 <__aeabi_dmul>
 8013d88:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013d8c:	3701      	adds	r7, #1
 8013d8e:	1064      	asrs	r4, r4, #1
 8013d90:	3608      	adds	r6, #8
 8013d92:	e7e5      	b.n	8013d60 <_dtoa_r+0x360>
 8013d94:	f000 80a5 	beq.w	8013ee2 <_dtoa_r+0x4e2>
 8013d98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013d9c:	f1cb 0400 	rsb	r4, fp, #0
 8013da0:	4b7c      	ldr	r3, [pc, #496]	; (8013f94 <_dtoa_r+0x594>)
 8013da2:	f004 020f 	and.w	r2, r4, #15
 8013da6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dae:	f7ec fbff 	bl	80005b0 <__aeabi_dmul>
 8013db2:	2702      	movs	r7, #2
 8013db4:	2300      	movs	r3, #0
 8013db6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013dba:	4e77      	ldr	r6, [pc, #476]	; (8013f98 <_dtoa_r+0x598>)
 8013dbc:	1124      	asrs	r4, r4, #4
 8013dbe:	2c00      	cmp	r4, #0
 8013dc0:	f040 8084 	bne.w	8013ecc <_dtoa_r+0x4cc>
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d1d2      	bne.n	8013d6e <_dtoa_r+0x36e>
 8013dc8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013dcc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8013dd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	f000 8087 	beq.w	8013ee6 <_dtoa_r+0x4e6>
 8013dd8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013ddc:	2200      	movs	r2, #0
 8013dde:	4b6f      	ldr	r3, [pc, #444]	; (8013f9c <_dtoa_r+0x59c>)
 8013de0:	f7ec fe58 	bl	8000a94 <__aeabi_dcmplt>
 8013de4:	2800      	cmp	r0, #0
 8013de6:	d07e      	beq.n	8013ee6 <_dtoa_r+0x4e6>
 8013de8:	9b08      	ldr	r3, [sp, #32]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d07b      	beq.n	8013ee6 <_dtoa_r+0x4e6>
 8013dee:	9b06      	ldr	r3, [sp, #24]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	dd38      	ble.n	8013e66 <_dtoa_r+0x466>
 8013df4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013df8:	2200      	movs	r2, #0
 8013dfa:	4b69      	ldr	r3, [pc, #420]	; (8013fa0 <_dtoa_r+0x5a0>)
 8013dfc:	f7ec fbd8 	bl	80005b0 <__aeabi_dmul>
 8013e00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013e04:	9c06      	ldr	r4, [sp, #24]
 8013e06:	f10b 38ff 	add.w	r8, fp, #4294967295
 8013e0a:	3701      	adds	r7, #1
 8013e0c:	4638      	mov	r0, r7
 8013e0e:	f7ec fb65 	bl	80004dc <__aeabi_i2d>
 8013e12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e16:	f7ec fbcb 	bl	80005b0 <__aeabi_dmul>
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	4b61      	ldr	r3, [pc, #388]	; (8013fa4 <_dtoa_r+0x5a4>)
 8013e1e:	f7ec fa11 	bl	8000244 <__adddf3>
 8013e22:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8013e26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013e2a:	9611      	str	r6, [sp, #68]	; 0x44
 8013e2c:	2c00      	cmp	r4, #0
 8013e2e:	d15d      	bne.n	8013eec <_dtoa_r+0x4ec>
 8013e30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013e34:	2200      	movs	r2, #0
 8013e36:	4b5c      	ldr	r3, [pc, #368]	; (8013fa8 <_dtoa_r+0x5a8>)
 8013e38:	f7ec fa02 	bl	8000240 <__aeabi_dsub>
 8013e3c:	4602      	mov	r2, r0
 8013e3e:	460b      	mov	r3, r1
 8013e40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013e44:	4633      	mov	r3, r6
 8013e46:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013e48:	f7ec fe42 	bl	8000ad0 <__aeabi_dcmpgt>
 8013e4c:	2800      	cmp	r0, #0
 8013e4e:	f040 8295 	bne.w	801437c <_dtoa_r+0x97c>
 8013e52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013e56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013e58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013e5c:	f7ec fe1a 	bl	8000a94 <__aeabi_dcmplt>
 8013e60:	2800      	cmp	r0, #0
 8013e62:	f040 8289 	bne.w	8014378 <_dtoa_r+0x978>
 8013e66:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8013e6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8013e6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	f2c0 8151 	blt.w	8014118 <_dtoa_r+0x718>
 8013e76:	f1bb 0f0e 	cmp.w	fp, #14
 8013e7a:	f300 814d 	bgt.w	8014118 <_dtoa_r+0x718>
 8013e7e:	4b45      	ldr	r3, [pc, #276]	; (8013f94 <_dtoa_r+0x594>)
 8013e80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013e84:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013e88:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8013e8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	f280 80da 	bge.w	8014048 <_dtoa_r+0x648>
 8013e94:	9b08      	ldr	r3, [sp, #32]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	f300 80d6 	bgt.w	8014048 <_dtoa_r+0x648>
 8013e9c:	f040 826b 	bne.w	8014376 <_dtoa_r+0x976>
 8013ea0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	4b40      	ldr	r3, [pc, #256]	; (8013fa8 <_dtoa_r+0x5a8>)
 8013ea8:	f7ec fb82 	bl	80005b0 <__aeabi_dmul>
 8013eac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013eb0:	f7ec fe04 	bl	8000abc <__aeabi_dcmpge>
 8013eb4:	9c08      	ldr	r4, [sp, #32]
 8013eb6:	4626      	mov	r6, r4
 8013eb8:	2800      	cmp	r0, #0
 8013eba:	f040 8241 	bne.w	8014340 <_dtoa_r+0x940>
 8013ebe:	2331      	movs	r3, #49	; 0x31
 8013ec0:	9f03      	ldr	r7, [sp, #12]
 8013ec2:	f10b 0b01 	add.w	fp, fp, #1
 8013ec6:	f807 3b01 	strb.w	r3, [r7], #1
 8013eca:	e23d      	b.n	8014348 <_dtoa_r+0x948>
 8013ecc:	07e2      	lsls	r2, r4, #31
 8013ece:	d505      	bpl.n	8013edc <_dtoa_r+0x4dc>
 8013ed0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013ed4:	f7ec fb6c 	bl	80005b0 <__aeabi_dmul>
 8013ed8:	2301      	movs	r3, #1
 8013eda:	3701      	adds	r7, #1
 8013edc:	1064      	asrs	r4, r4, #1
 8013ede:	3608      	adds	r6, #8
 8013ee0:	e76d      	b.n	8013dbe <_dtoa_r+0x3be>
 8013ee2:	2702      	movs	r7, #2
 8013ee4:	e770      	b.n	8013dc8 <_dtoa_r+0x3c8>
 8013ee6:	46d8      	mov	r8, fp
 8013ee8:	9c08      	ldr	r4, [sp, #32]
 8013eea:	e78f      	b.n	8013e0c <_dtoa_r+0x40c>
 8013eec:	9903      	ldr	r1, [sp, #12]
 8013eee:	4b29      	ldr	r3, [pc, #164]	; (8013f94 <_dtoa_r+0x594>)
 8013ef0:	4421      	add	r1, r4
 8013ef2:	9112      	str	r1, [sp, #72]	; 0x48
 8013ef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013ef6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013efa:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8013efe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013f02:	2900      	cmp	r1, #0
 8013f04:	d054      	beq.n	8013fb0 <_dtoa_r+0x5b0>
 8013f06:	2000      	movs	r0, #0
 8013f08:	4928      	ldr	r1, [pc, #160]	; (8013fac <_dtoa_r+0x5ac>)
 8013f0a:	f7ec fc7b 	bl	8000804 <__aeabi_ddiv>
 8013f0e:	463b      	mov	r3, r7
 8013f10:	4632      	mov	r2, r6
 8013f12:	f7ec f995 	bl	8000240 <__aeabi_dsub>
 8013f16:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013f1a:	9f03      	ldr	r7, [sp, #12]
 8013f1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013f20:	f7ec fdf6 	bl	8000b10 <__aeabi_d2iz>
 8013f24:	4604      	mov	r4, r0
 8013f26:	f7ec fad9 	bl	80004dc <__aeabi_i2d>
 8013f2a:	4602      	mov	r2, r0
 8013f2c:	460b      	mov	r3, r1
 8013f2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013f32:	f7ec f985 	bl	8000240 <__aeabi_dsub>
 8013f36:	4602      	mov	r2, r0
 8013f38:	460b      	mov	r3, r1
 8013f3a:	3430      	adds	r4, #48	; 0x30
 8013f3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013f40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013f44:	f807 4b01 	strb.w	r4, [r7], #1
 8013f48:	f7ec fda4 	bl	8000a94 <__aeabi_dcmplt>
 8013f4c:	2800      	cmp	r0, #0
 8013f4e:	d173      	bne.n	8014038 <_dtoa_r+0x638>
 8013f50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013f54:	2000      	movs	r0, #0
 8013f56:	4911      	ldr	r1, [pc, #68]	; (8013f9c <_dtoa_r+0x59c>)
 8013f58:	f7ec f972 	bl	8000240 <__aeabi_dsub>
 8013f5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013f60:	f7ec fd98 	bl	8000a94 <__aeabi_dcmplt>
 8013f64:	2800      	cmp	r0, #0
 8013f66:	f040 80b6 	bne.w	80140d6 <_dtoa_r+0x6d6>
 8013f6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013f6c:	429f      	cmp	r7, r3
 8013f6e:	f43f af7a 	beq.w	8013e66 <_dtoa_r+0x466>
 8013f72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013f76:	2200      	movs	r2, #0
 8013f78:	4b09      	ldr	r3, [pc, #36]	; (8013fa0 <_dtoa_r+0x5a0>)
 8013f7a:	f7ec fb19 	bl	80005b0 <__aeabi_dmul>
 8013f7e:	2200      	movs	r2, #0
 8013f80:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013f84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013f88:	4b05      	ldr	r3, [pc, #20]	; (8013fa0 <_dtoa_r+0x5a0>)
 8013f8a:	f7ec fb11 	bl	80005b0 <__aeabi_dmul>
 8013f8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013f92:	e7c3      	b.n	8013f1c <_dtoa_r+0x51c>
 8013f94:	080160d0 	.word	0x080160d0
 8013f98:	080160a8 	.word	0x080160a8
 8013f9c:	3ff00000 	.word	0x3ff00000
 8013fa0:	40240000 	.word	0x40240000
 8013fa4:	401c0000 	.word	0x401c0000
 8013fa8:	40140000 	.word	0x40140000
 8013fac:	3fe00000 	.word	0x3fe00000
 8013fb0:	4630      	mov	r0, r6
 8013fb2:	4639      	mov	r1, r7
 8013fb4:	f7ec fafc 	bl	80005b0 <__aeabi_dmul>
 8013fb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013fba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013fbe:	9c03      	ldr	r4, [sp, #12]
 8013fc0:	9314      	str	r3, [sp, #80]	; 0x50
 8013fc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013fc6:	f7ec fda3 	bl	8000b10 <__aeabi_d2iz>
 8013fca:	9015      	str	r0, [sp, #84]	; 0x54
 8013fcc:	f7ec fa86 	bl	80004dc <__aeabi_i2d>
 8013fd0:	4602      	mov	r2, r0
 8013fd2:	460b      	mov	r3, r1
 8013fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013fd8:	f7ec f932 	bl	8000240 <__aeabi_dsub>
 8013fdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013fde:	4606      	mov	r6, r0
 8013fe0:	3330      	adds	r3, #48	; 0x30
 8013fe2:	f804 3b01 	strb.w	r3, [r4], #1
 8013fe6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013fe8:	460f      	mov	r7, r1
 8013fea:	429c      	cmp	r4, r3
 8013fec:	f04f 0200 	mov.w	r2, #0
 8013ff0:	d124      	bne.n	801403c <_dtoa_r+0x63c>
 8013ff2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013ff6:	4baf      	ldr	r3, [pc, #700]	; (80142b4 <_dtoa_r+0x8b4>)
 8013ff8:	f7ec f924 	bl	8000244 <__adddf3>
 8013ffc:	4602      	mov	r2, r0
 8013ffe:	460b      	mov	r3, r1
 8014000:	4630      	mov	r0, r6
 8014002:	4639      	mov	r1, r7
 8014004:	f7ec fd64 	bl	8000ad0 <__aeabi_dcmpgt>
 8014008:	2800      	cmp	r0, #0
 801400a:	d163      	bne.n	80140d4 <_dtoa_r+0x6d4>
 801400c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014010:	2000      	movs	r0, #0
 8014012:	49a8      	ldr	r1, [pc, #672]	; (80142b4 <_dtoa_r+0x8b4>)
 8014014:	f7ec f914 	bl	8000240 <__aeabi_dsub>
 8014018:	4602      	mov	r2, r0
 801401a:	460b      	mov	r3, r1
 801401c:	4630      	mov	r0, r6
 801401e:	4639      	mov	r1, r7
 8014020:	f7ec fd38 	bl	8000a94 <__aeabi_dcmplt>
 8014024:	2800      	cmp	r0, #0
 8014026:	f43f af1e 	beq.w	8013e66 <_dtoa_r+0x466>
 801402a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801402c:	1e7b      	subs	r3, r7, #1
 801402e:	9314      	str	r3, [sp, #80]	; 0x50
 8014030:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8014034:	2b30      	cmp	r3, #48	; 0x30
 8014036:	d0f8      	beq.n	801402a <_dtoa_r+0x62a>
 8014038:	46c3      	mov	fp, r8
 801403a:	e03b      	b.n	80140b4 <_dtoa_r+0x6b4>
 801403c:	4b9e      	ldr	r3, [pc, #632]	; (80142b8 <_dtoa_r+0x8b8>)
 801403e:	f7ec fab7 	bl	80005b0 <__aeabi_dmul>
 8014042:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014046:	e7bc      	b.n	8013fc2 <_dtoa_r+0x5c2>
 8014048:	9f03      	ldr	r7, [sp, #12]
 801404a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801404e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014052:	4640      	mov	r0, r8
 8014054:	4649      	mov	r1, r9
 8014056:	f7ec fbd5 	bl	8000804 <__aeabi_ddiv>
 801405a:	f7ec fd59 	bl	8000b10 <__aeabi_d2iz>
 801405e:	4604      	mov	r4, r0
 8014060:	f7ec fa3c 	bl	80004dc <__aeabi_i2d>
 8014064:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014068:	f7ec faa2 	bl	80005b0 <__aeabi_dmul>
 801406c:	4602      	mov	r2, r0
 801406e:	460b      	mov	r3, r1
 8014070:	4640      	mov	r0, r8
 8014072:	4649      	mov	r1, r9
 8014074:	f7ec f8e4 	bl	8000240 <__aeabi_dsub>
 8014078:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801407c:	f807 6b01 	strb.w	r6, [r7], #1
 8014080:	9e03      	ldr	r6, [sp, #12]
 8014082:	f8dd c020 	ldr.w	ip, [sp, #32]
 8014086:	1bbe      	subs	r6, r7, r6
 8014088:	45b4      	cmp	ip, r6
 801408a:	4602      	mov	r2, r0
 801408c:	460b      	mov	r3, r1
 801408e:	d136      	bne.n	80140fe <_dtoa_r+0x6fe>
 8014090:	f7ec f8d8 	bl	8000244 <__adddf3>
 8014094:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014098:	4680      	mov	r8, r0
 801409a:	4689      	mov	r9, r1
 801409c:	f7ec fd18 	bl	8000ad0 <__aeabi_dcmpgt>
 80140a0:	bb58      	cbnz	r0, 80140fa <_dtoa_r+0x6fa>
 80140a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80140a6:	4640      	mov	r0, r8
 80140a8:	4649      	mov	r1, r9
 80140aa:	f7ec fce9 	bl	8000a80 <__aeabi_dcmpeq>
 80140ae:	b108      	cbz	r0, 80140b4 <_dtoa_r+0x6b4>
 80140b0:	07e3      	lsls	r3, r4, #31
 80140b2:	d422      	bmi.n	80140fa <_dtoa_r+0x6fa>
 80140b4:	4651      	mov	r1, sl
 80140b6:	4628      	mov	r0, r5
 80140b8:	f000 fbc2 	bl	8014840 <_Bfree>
 80140bc:	2300      	movs	r3, #0
 80140be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80140c0:	703b      	strb	r3, [r7, #0]
 80140c2:	f10b 0301 	add.w	r3, fp, #1
 80140c6:	6013      	str	r3, [r2, #0]
 80140c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	f43f ace6 	beq.w	8013a9c <_dtoa_r+0x9c>
 80140d0:	601f      	str	r7, [r3, #0]
 80140d2:	e4e3      	b.n	8013a9c <_dtoa_r+0x9c>
 80140d4:	4627      	mov	r7, r4
 80140d6:	463b      	mov	r3, r7
 80140d8:	461f      	mov	r7, r3
 80140da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80140de:	2a39      	cmp	r2, #57	; 0x39
 80140e0:	d107      	bne.n	80140f2 <_dtoa_r+0x6f2>
 80140e2:	9a03      	ldr	r2, [sp, #12]
 80140e4:	429a      	cmp	r2, r3
 80140e6:	d1f7      	bne.n	80140d8 <_dtoa_r+0x6d8>
 80140e8:	2230      	movs	r2, #48	; 0x30
 80140ea:	9903      	ldr	r1, [sp, #12]
 80140ec:	f108 0801 	add.w	r8, r8, #1
 80140f0:	700a      	strb	r2, [r1, #0]
 80140f2:	781a      	ldrb	r2, [r3, #0]
 80140f4:	3201      	adds	r2, #1
 80140f6:	701a      	strb	r2, [r3, #0]
 80140f8:	e79e      	b.n	8014038 <_dtoa_r+0x638>
 80140fa:	46d8      	mov	r8, fp
 80140fc:	e7eb      	b.n	80140d6 <_dtoa_r+0x6d6>
 80140fe:	2200      	movs	r2, #0
 8014100:	4b6d      	ldr	r3, [pc, #436]	; (80142b8 <_dtoa_r+0x8b8>)
 8014102:	f7ec fa55 	bl	80005b0 <__aeabi_dmul>
 8014106:	2200      	movs	r2, #0
 8014108:	2300      	movs	r3, #0
 801410a:	4680      	mov	r8, r0
 801410c:	4689      	mov	r9, r1
 801410e:	f7ec fcb7 	bl	8000a80 <__aeabi_dcmpeq>
 8014112:	2800      	cmp	r0, #0
 8014114:	d09b      	beq.n	801404e <_dtoa_r+0x64e>
 8014116:	e7cd      	b.n	80140b4 <_dtoa_r+0x6b4>
 8014118:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801411a:	2a00      	cmp	r2, #0
 801411c:	f000 80c4 	beq.w	80142a8 <_dtoa_r+0x8a8>
 8014120:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014122:	2a01      	cmp	r2, #1
 8014124:	f300 80a8 	bgt.w	8014278 <_dtoa_r+0x878>
 8014128:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801412a:	2a00      	cmp	r2, #0
 801412c:	f000 80a0 	beq.w	8014270 <_dtoa_r+0x870>
 8014130:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014134:	464f      	mov	r7, r9
 8014136:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801413a:	2101      	movs	r1, #1
 801413c:	441a      	add	r2, r3
 801413e:	4628      	mov	r0, r5
 8014140:	4499      	add	r9, r3
 8014142:	9209      	str	r2, [sp, #36]	; 0x24
 8014144:	f000 fc32 	bl	80149ac <__i2b>
 8014148:	4606      	mov	r6, r0
 801414a:	b15f      	cbz	r7, 8014164 <_dtoa_r+0x764>
 801414c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801414e:	2b00      	cmp	r3, #0
 8014150:	dd08      	ble.n	8014164 <_dtoa_r+0x764>
 8014152:	42bb      	cmp	r3, r7
 8014154:	bfa8      	it	ge
 8014156:	463b      	movge	r3, r7
 8014158:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801415a:	eba9 0903 	sub.w	r9, r9, r3
 801415e:	1aff      	subs	r7, r7, r3
 8014160:	1ad3      	subs	r3, r2, r3
 8014162:	9309      	str	r3, [sp, #36]	; 0x24
 8014164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014166:	b1f3      	cbz	r3, 80141a6 <_dtoa_r+0x7a6>
 8014168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801416a:	2b00      	cmp	r3, #0
 801416c:	f000 80a0 	beq.w	80142b0 <_dtoa_r+0x8b0>
 8014170:	2c00      	cmp	r4, #0
 8014172:	dd10      	ble.n	8014196 <_dtoa_r+0x796>
 8014174:	4631      	mov	r1, r6
 8014176:	4622      	mov	r2, r4
 8014178:	4628      	mov	r0, r5
 801417a:	f000 fcd5 	bl	8014b28 <__pow5mult>
 801417e:	4652      	mov	r2, sl
 8014180:	4601      	mov	r1, r0
 8014182:	4606      	mov	r6, r0
 8014184:	4628      	mov	r0, r5
 8014186:	f000 fc27 	bl	80149d8 <__multiply>
 801418a:	4680      	mov	r8, r0
 801418c:	4651      	mov	r1, sl
 801418e:	4628      	mov	r0, r5
 8014190:	f000 fb56 	bl	8014840 <_Bfree>
 8014194:	46c2      	mov	sl, r8
 8014196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014198:	1b1a      	subs	r2, r3, r4
 801419a:	d004      	beq.n	80141a6 <_dtoa_r+0x7a6>
 801419c:	4651      	mov	r1, sl
 801419e:	4628      	mov	r0, r5
 80141a0:	f000 fcc2 	bl	8014b28 <__pow5mult>
 80141a4:	4682      	mov	sl, r0
 80141a6:	2101      	movs	r1, #1
 80141a8:	4628      	mov	r0, r5
 80141aa:	f000 fbff 	bl	80149ac <__i2b>
 80141ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80141b0:	4604      	mov	r4, r0
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	f340 8082 	ble.w	80142bc <_dtoa_r+0x8bc>
 80141b8:	461a      	mov	r2, r3
 80141ba:	4601      	mov	r1, r0
 80141bc:	4628      	mov	r0, r5
 80141be:	f000 fcb3 	bl	8014b28 <__pow5mult>
 80141c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80141c4:	4604      	mov	r4, r0
 80141c6:	2b01      	cmp	r3, #1
 80141c8:	dd7b      	ble.n	80142c2 <_dtoa_r+0x8c2>
 80141ca:	f04f 0800 	mov.w	r8, #0
 80141ce:	6923      	ldr	r3, [r4, #16]
 80141d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80141d4:	6918      	ldr	r0, [r3, #16]
 80141d6:	f000 fb9b 	bl	8014910 <__hi0bits>
 80141da:	f1c0 0020 	rsb	r0, r0, #32
 80141de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141e0:	4418      	add	r0, r3
 80141e2:	f010 001f 	ands.w	r0, r0, #31
 80141e6:	f000 8092 	beq.w	801430e <_dtoa_r+0x90e>
 80141ea:	f1c0 0320 	rsb	r3, r0, #32
 80141ee:	2b04      	cmp	r3, #4
 80141f0:	f340 8085 	ble.w	80142fe <_dtoa_r+0x8fe>
 80141f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141f6:	f1c0 001c 	rsb	r0, r0, #28
 80141fa:	4403      	add	r3, r0
 80141fc:	4481      	add	r9, r0
 80141fe:	4407      	add	r7, r0
 8014200:	9309      	str	r3, [sp, #36]	; 0x24
 8014202:	f1b9 0f00 	cmp.w	r9, #0
 8014206:	dd05      	ble.n	8014214 <_dtoa_r+0x814>
 8014208:	4651      	mov	r1, sl
 801420a:	464a      	mov	r2, r9
 801420c:	4628      	mov	r0, r5
 801420e:	f000 fce5 	bl	8014bdc <__lshift>
 8014212:	4682      	mov	sl, r0
 8014214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014216:	2b00      	cmp	r3, #0
 8014218:	dd05      	ble.n	8014226 <_dtoa_r+0x826>
 801421a:	4621      	mov	r1, r4
 801421c:	461a      	mov	r2, r3
 801421e:	4628      	mov	r0, r5
 8014220:	f000 fcdc 	bl	8014bdc <__lshift>
 8014224:	4604      	mov	r4, r0
 8014226:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014228:	2b00      	cmp	r3, #0
 801422a:	d072      	beq.n	8014312 <_dtoa_r+0x912>
 801422c:	4621      	mov	r1, r4
 801422e:	4650      	mov	r0, sl
 8014230:	f000 fd40 	bl	8014cb4 <__mcmp>
 8014234:	2800      	cmp	r0, #0
 8014236:	da6c      	bge.n	8014312 <_dtoa_r+0x912>
 8014238:	2300      	movs	r3, #0
 801423a:	4651      	mov	r1, sl
 801423c:	220a      	movs	r2, #10
 801423e:	4628      	mov	r0, r5
 8014240:	f000 fb20 	bl	8014884 <__multadd>
 8014244:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014246:	4682      	mov	sl, r0
 8014248:	f10b 3bff 	add.w	fp, fp, #4294967295
 801424c:	2b00      	cmp	r3, #0
 801424e:	f000 81ac 	beq.w	80145aa <_dtoa_r+0xbaa>
 8014252:	2300      	movs	r3, #0
 8014254:	4631      	mov	r1, r6
 8014256:	220a      	movs	r2, #10
 8014258:	4628      	mov	r0, r5
 801425a:	f000 fb13 	bl	8014884 <__multadd>
 801425e:	9b06      	ldr	r3, [sp, #24]
 8014260:	4606      	mov	r6, r0
 8014262:	2b00      	cmp	r3, #0
 8014264:	f300 8093 	bgt.w	801438e <_dtoa_r+0x98e>
 8014268:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801426a:	2b02      	cmp	r3, #2
 801426c:	dc59      	bgt.n	8014322 <_dtoa_r+0x922>
 801426e:	e08e      	b.n	801438e <_dtoa_r+0x98e>
 8014270:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8014272:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014276:	e75d      	b.n	8014134 <_dtoa_r+0x734>
 8014278:	9b08      	ldr	r3, [sp, #32]
 801427a:	1e5c      	subs	r4, r3, #1
 801427c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801427e:	42a3      	cmp	r3, r4
 8014280:	bfbf      	itttt	lt
 8014282:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014284:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8014286:	1ae3      	sublt	r3, r4, r3
 8014288:	18d2      	addlt	r2, r2, r3
 801428a:	bfa8      	it	ge
 801428c:	1b1c      	subge	r4, r3, r4
 801428e:	9b08      	ldr	r3, [sp, #32]
 8014290:	bfbe      	ittt	lt
 8014292:	940a      	strlt	r4, [sp, #40]	; 0x28
 8014294:	920e      	strlt	r2, [sp, #56]	; 0x38
 8014296:	2400      	movlt	r4, #0
 8014298:	2b00      	cmp	r3, #0
 801429a:	bfb5      	itete	lt
 801429c:	eba9 0703 	sublt.w	r7, r9, r3
 80142a0:	464f      	movge	r7, r9
 80142a2:	2300      	movlt	r3, #0
 80142a4:	9b08      	ldrge	r3, [sp, #32]
 80142a6:	e747      	b.n	8014138 <_dtoa_r+0x738>
 80142a8:	464f      	mov	r7, r9
 80142aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80142ac:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80142ae:	e74c      	b.n	801414a <_dtoa_r+0x74a>
 80142b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80142b2:	e773      	b.n	801419c <_dtoa_r+0x79c>
 80142b4:	3fe00000 	.word	0x3fe00000
 80142b8:	40240000 	.word	0x40240000
 80142bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80142be:	2b01      	cmp	r3, #1
 80142c0:	dc18      	bgt.n	80142f4 <_dtoa_r+0x8f4>
 80142c2:	9b04      	ldr	r3, [sp, #16]
 80142c4:	b9b3      	cbnz	r3, 80142f4 <_dtoa_r+0x8f4>
 80142c6:	9b05      	ldr	r3, [sp, #20]
 80142c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80142cc:	b993      	cbnz	r3, 80142f4 <_dtoa_r+0x8f4>
 80142ce:	9b05      	ldr	r3, [sp, #20]
 80142d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80142d4:	0d1b      	lsrs	r3, r3, #20
 80142d6:	051b      	lsls	r3, r3, #20
 80142d8:	b17b      	cbz	r3, 80142fa <_dtoa_r+0x8fa>
 80142da:	f04f 0801 	mov.w	r8, #1
 80142de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142e0:	f109 0901 	add.w	r9, r9, #1
 80142e4:	3301      	adds	r3, #1
 80142e6:	9309      	str	r3, [sp, #36]	; 0x24
 80142e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	f47f af6f 	bne.w	80141ce <_dtoa_r+0x7ce>
 80142f0:	2001      	movs	r0, #1
 80142f2:	e774      	b.n	80141de <_dtoa_r+0x7de>
 80142f4:	f04f 0800 	mov.w	r8, #0
 80142f8:	e7f6      	b.n	80142e8 <_dtoa_r+0x8e8>
 80142fa:	4698      	mov	r8, r3
 80142fc:	e7f4      	b.n	80142e8 <_dtoa_r+0x8e8>
 80142fe:	d080      	beq.n	8014202 <_dtoa_r+0x802>
 8014300:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014302:	331c      	adds	r3, #28
 8014304:	441a      	add	r2, r3
 8014306:	4499      	add	r9, r3
 8014308:	441f      	add	r7, r3
 801430a:	9209      	str	r2, [sp, #36]	; 0x24
 801430c:	e779      	b.n	8014202 <_dtoa_r+0x802>
 801430e:	4603      	mov	r3, r0
 8014310:	e7f6      	b.n	8014300 <_dtoa_r+0x900>
 8014312:	9b08      	ldr	r3, [sp, #32]
 8014314:	2b00      	cmp	r3, #0
 8014316:	dc34      	bgt.n	8014382 <_dtoa_r+0x982>
 8014318:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801431a:	2b02      	cmp	r3, #2
 801431c:	dd31      	ble.n	8014382 <_dtoa_r+0x982>
 801431e:	9b08      	ldr	r3, [sp, #32]
 8014320:	9306      	str	r3, [sp, #24]
 8014322:	9b06      	ldr	r3, [sp, #24]
 8014324:	b963      	cbnz	r3, 8014340 <_dtoa_r+0x940>
 8014326:	4621      	mov	r1, r4
 8014328:	2205      	movs	r2, #5
 801432a:	4628      	mov	r0, r5
 801432c:	f000 faaa 	bl	8014884 <__multadd>
 8014330:	4601      	mov	r1, r0
 8014332:	4604      	mov	r4, r0
 8014334:	4650      	mov	r0, sl
 8014336:	f000 fcbd 	bl	8014cb4 <__mcmp>
 801433a:	2800      	cmp	r0, #0
 801433c:	f73f adbf 	bgt.w	8013ebe <_dtoa_r+0x4be>
 8014340:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014342:	9f03      	ldr	r7, [sp, #12]
 8014344:	ea6f 0b03 	mvn.w	fp, r3
 8014348:	f04f 0800 	mov.w	r8, #0
 801434c:	4621      	mov	r1, r4
 801434e:	4628      	mov	r0, r5
 8014350:	f000 fa76 	bl	8014840 <_Bfree>
 8014354:	2e00      	cmp	r6, #0
 8014356:	f43f aead 	beq.w	80140b4 <_dtoa_r+0x6b4>
 801435a:	f1b8 0f00 	cmp.w	r8, #0
 801435e:	d005      	beq.n	801436c <_dtoa_r+0x96c>
 8014360:	45b0      	cmp	r8, r6
 8014362:	d003      	beq.n	801436c <_dtoa_r+0x96c>
 8014364:	4641      	mov	r1, r8
 8014366:	4628      	mov	r0, r5
 8014368:	f000 fa6a 	bl	8014840 <_Bfree>
 801436c:	4631      	mov	r1, r6
 801436e:	4628      	mov	r0, r5
 8014370:	f000 fa66 	bl	8014840 <_Bfree>
 8014374:	e69e      	b.n	80140b4 <_dtoa_r+0x6b4>
 8014376:	2400      	movs	r4, #0
 8014378:	4626      	mov	r6, r4
 801437a:	e7e1      	b.n	8014340 <_dtoa_r+0x940>
 801437c:	46c3      	mov	fp, r8
 801437e:	4626      	mov	r6, r4
 8014380:	e59d      	b.n	8013ebe <_dtoa_r+0x4be>
 8014382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014384:	2b00      	cmp	r3, #0
 8014386:	f000 80c8 	beq.w	801451a <_dtoa_r+0xb1a>
 801438a:	9b08      	ldr	r3, [sp, #32]
 801438c:	9306      	str	r3, [sp, #24]
 801438e:	2f00      	cmp	r7, #0
 8014390:	dd05      	ble.n	801439e <_dtoa_r+0x99e>
 8014392:	4631      	mov	r1, r6
 8014394:	463a      	mov	r2, r7
 8014396:	4628      	mov	r0, r5
 8014398:	f000 fc20 	bl	8014bdc <__lshift>
 801439c:	4606      	mov	r6, r0
 801439e:	f1b8 0f00 	cmp.w	r8, #0
 80143a2:	d05b      	beq.n	801445c <_dtoa_r+0xa5c>
 80143a4:	4628      	mov	r0, r5
 80143a6:	6871      	ldr	r1, [r6, #4]
 80143a8:	f000 fa0a 	bl	80147c0 <_Balloc>
 80143ac:	4607      	mov	r7, r0
 80143ae:	b928      	cbnz	r0, 80143bc <_dtoa_r+0x9bc>
 80143b0:	4602      	mov	r2, r0
 80143b2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80143b6:	4b81      	ldr	r3, [pc, #516]	; (80145bc <_dtoa_r+0xbbc>)
 80143b8:	f7ff bb36 	b.w	8013a28 <_dtoa_r+0x28>
 80143bc:	6932      	ldr	r2, [r6, #16]
 80143be:	f106 010c 	add.w	r1, r6, #12
 80143c2:	3202      	adds	r2, #2
 80143c4:	0092      	lsls	r2, r2, #2
 80143c6:	300c      	adds	r0, #12
 80143c8:	f000 ffb0 	bl	801532c <memcpy>
 80143cc:	2201      	movs	r2, #1
 80143ce:	4639      	mov	r1, r7
 80143d0:	4628      	mov	r0, r5
 80143d2:	f000 fc03 	bl	8014bdc <__lshift>
 80143d6:	46b0      	mov	r8, r6
 80143d8:	4606      	mov	r6, r0
 80143da:	9b03      	ldr	r3, [sp, #12]
 80143dc:	9a03      	ldr	r2, [sp, #12]
 80143de:	3301      	adds	r3, #1
 80143e0:	9308      	str	r3, [sp, #32]
 80143e2:	9b06      	ldr	r3, [sp, #24]
 80143e4:	4413      	add	r3, r2
 80143e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80143e8:	9b04      	ldr	r3, [sp, #16]
 80143ea:	f003 0301 	and.w	r3, r3, #1
 80143ee:	930a      	str	r3, [sp, #40]	; 0x28
 80143f0:	9b08      	ldr	r3, [sp, #32]
 80143f2:	4621      	mov	r1, r4
 80143f4:	3b01      	subs	r3, #1
 80143f6:	4650      	mov	r0, sl
 80143f8:	9304      	str	r3, [sp, #16]
 80143fa:	f7ff fa75 	bl	80138e8 <quorem>
 80143fe:	4641      	mov	r1, r8
 8014400:	9006      	str	r0, [sp, #24]
 8014402:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8014406:	4650      	mov	r0, sl
 8014408:	f000 fc54 	bl	8014cb4 <__mcmp>
 801440c:	4632      	mov	r2, r6
 801440e:	9009      	str	r0, [sp, #36]	; 0x24
 8014410:	4621      	mov	r1, r4
 8014412:	4628      	mov	r0, r5
 8014414:	f000 fc6a 	bl	8014cec <__mdiff>
 8014418:	68c2      	ldr	r2, [r0, #12]
 801441a:	4607      	mov	r7, r0
 801441c:	bb02      	cbnz	r2, 8014460 <_dtoa_r+0xa60>
 801441e:	4601      	mov	r1, r0
 8014420:	4650      	mov	r0, sl
 8014422:	f000 fc47 	bl	8014cb4 <__mcmp>
 8014426:	4602      	mov	r2, r0
 8014428:	4639      	mov	r1, r7
 801442a:	4628      	mov	r0, r5
 801442c:	920c      	str	r2, [sp, #48]	; 0x30
 801442e:	f000 fa07 	bl	8014840 <_Bfree>
 8014432:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8014434:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014436:	9f08      	ldr	r7, [sp, #32]
 8014438:	ea43 0102 	orr.w	r1, r3, r2
 801443c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801443e:	4319      	orrs	r1, r3
 8014440:	d110      	bne.n	8014464 <_dtoa_r+0xa64>
 8014442:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014446:	d029      	beq.n	801449c <_dtoa_r+0xa9c>
 8014448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801444a:	2b00      	cmp	r3, #0
 801444c:	dd02      	ble.n	8014454 <_dtoa_r+0xa54>
 801444e:	9b06      	ldr	r3, [sp, #24]
 8014450:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8014454:	9b04      	ldr	r3, [sp, #16]
 8014456:	f883 9000 	strb.w	r9, [r3]
 801445a:	e777      	b.n	801434c <_dtoa_r+0x94c>
 801445c:	4630      	mov	r0, r6
 801445e:	e7ba      	b.n	80143d6 <_dtoa_r+0x9d6>
 8014460:	2201      	movs	r2, #1
 8014462:	e7e1      	b.n	8014428 <_dtoa_r+0xa28>
 8014464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014466:	2b00      	cmp	r3, #0
 8014468:	db04      	blt.n	8014474 <_dtoa_r+0xa74>
 801446a:	9922      	ldr	r1, [sp, #136]	; 0x88
 801446c:	430b      	orrs	r3, r1
 801446e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014470:	430b      	orrs	r3, r1
 8014472:	d120      	bne.n	80144b6 <_dtoa_r+0xab6>
 8014474:	2a00      	cmp	r2, #0
 8014476:	dded      	ble.n	8014454 <_dtoa_r+0xa54>
 8014478:	4651      	mov	r1, sl
 801447a:	2201      	movs	r2, #1
 801447c:	4628      	mov	r0, r5
 801447e:	f000 fbad 	bl	8014bdc <__lshift>
 8014482:	4621      	mov	r1, r4
 8014484:	4682      	mov	sl, r0
 8014486:	f000 fc15 	bl	8014cb4 <__mcmp>
 801448a:	2800      	cmp	r0, #0
 801448c:	dc03      	bgt.n	8014496 <_dtoa_r+0xa96>
 801448e:	d1e1      	bne.n	8014454 <_dtoa_r+0xa54>
 8014490:	f019 0f01 	tst.w	r9, #1
 8014494:	d0de      	beq.n	8014454 <_dtoa_r+0xa54>
 8014496:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801449a:	d1d8      	bne.n	801444e <_dtoa_r+0xa4e>
 801449c:	2339      	movs	r3, #57	; 0x39
 801449e:	9a04      	ldr	r2, [sp, #16]
 80144a0:	7013      	strb	r3, [r2, #0]
 80144a2:	463b      	mov	r3, r7
 80144a4:	461f      	mov	r7, r3
 80144a6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80144aa:	3b01      	subs	r3, #1
 80144ac:	2a39      	cmp	r2, #57	; 0x39
 80144ae:	d06b      	beq.n	8014588 <_dtoa_r+0xb88>
 80144b0:	3201      	adds	r2, #1
 80144b2:	701a      	strb	r2, [r3, #0]
 80144b4:	e74a      	b.n	801434c <_dtoa_r+0x94c>
 80144b6:	2a00      	cmp	r2, #0
 80144b8:	dd07      	ble.n	80144ca <_dtoa_r+0xaca>
 80144ba:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80144be:	d0ed      	beq.n	801449c <_dtoa_r+0xa9c>
 80144c0:	9a04      	ldr	r2, [sp, #16]
 80144c2:	f109 0301 	add.w	r3, r9, #1
 80144c6:	7013      	strb	r3, [r2, #0]
 80144c8:	e740      	b.n	801434c <_dtoa_r+0x94c>
 80144ca:	9b08      	ldr	r3, [sp, #32]
 80144cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80144ce:	f803 9c01 	strb.w	r9, [r3, #-1]
 80144d2:	4293      	cmp	r3, r2
 80144d4:	d042      	beq.n	801455c <_dtoa_r+0xb5c>
 80144d6:	4651      	mov	r1, sl
 80144d8:	2300      	movs	r3, #0
 80144da:	220a      	movs	r2, #10
 80144dc:	4628      	mov	r0, r5
 80144de:	f000 f9d1 	bl	8014884 <__multadd>
 80144e2:	45b0      	cmp	r8, r6
 80144e4:	4682      	mov	sl, r0
 80144e6:	f04f 0300 	mov.w	r3, #0
 80144ea:	f04f 020a 	mov.w	r2, #10
 80144ee:	4641      	mov	r1, r8
 80144f0:	4628      	mov	r0, r5
 80144f2:	d107      	bne.n	8014504 <_dtoa_r+0xb04>
 80144f4:	f000 f9c6 	bl	8014884 <__multadd>
 80144f8:	4680      	mov	r8, r0
 80144fa:	4606      	mov	r6, r0
 80144fc:	9b08      	ldr	r3, [sp, #32]
 80144fe:	3301      	adds	r3, #1
 8014500:	9308      	str	r3, [sp, #32]
 8014502:	e775      	b.n	80143f0 <_dtoa_r+0x9f0>
 8014504:	f000 f9be 	bl	8014884 <__multadd>
 8014508:	4631      	mov	r1, r6
 801450a:	4680      	mov	r8, r0
 801450c:	2300      	movs	r3, #0
 801450e:	220a      	movs	r2, #10
 8014510:	4628      	mov	r0, r5
 8014512:	f000 f9b7 	bl	8014884 <__multadd>
 8014516:	4606      	mov	r6, r0
 8014518:	e7f0      	b.n	80144fc <_dtoa_r+0xafc>
 801451a:	9b08      	ldr	r3, [sp, #32]
 801451c:	9306      	str	r3, [sp, #24]
 801451e:	9f03      	ldr	r7, [sp, #12]
 8014520:	4621      	mov	r1, r4
 8014522:	4650      	mov	r0, sl
 8014524:	f7ff f9e0 	bl	80138e8 <quorem>
 8014528:	9b03      	ldr	r3, [sp, #12]
 801452a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801452e:	f807 9b01 	strb.w	r9, [r7], #1
 8014532:	1afa      	subs	r2, r7, r3
 8014534:	9b06      	ldr	r3, [sp, #24]
 8014536:	4293      	cmp	r3, r2
 8014538:	dd07      	ble.n	801454a <_dtoa_r+0xb4a>
 801453a:	4651      	mov	r1, sl
 801453c:	2300      	movs	r3, #0
 801453e:	220a      	movs	r2, #10
 8014540:	4628      	mov	r0, r5
 8014542:	f000 f99f 	bl	8014884 <__multadd>
 8014546:	4682      	mov	sl, r0
 8014548:	e7ea      	b.n	8014520 <_dtoa_r+0xb20>
 801454a:	9b06      	ldr	r3, [sp, #24]
 801454c:	f04f 0800 	mov.w	r8, #0
 8014550:	2b00      	cmp	r3, #0
 8014552:	bfcc      	ite	gt
 8014554:	461f      	movgt	r7, r3
 8014556:	2701      	movle	r7, #1
 8014558:	9b03      	ldr	r3, [sp, #12]
 801455a:	441f      	add	r7, r3
 801455c:	4651      	mov	r1, sl
 801455e:	2201      	movs	r2, #1
 8014560:	4628      	mov	r0, r5
 8014562:	f000 fb3b 	bl	8014bdc <__lshift>
 8014566:	4621      	mov	r1, r4
 8014568:	4682      	mov	sl, r0
 801456a:	f000 fba3 	bl	8014cb4 <__mcmp>
 801456e:	2800      	cmp	r0, #0
 8014570:	dc97      	bgt.n	80144a2 <_dtoa_r+0xaa2>
 8014572:	d102      	bne.n	801457a <_dtoa_r+0xb7a>
 8014574:	f019 0f01 	tst.w	r9, #1
 8014578:	d193      	bne.n	80144a2 <_dtoa_r+0xaa2>
 801457a:	463b      	mov	r3, r7
 801457c:	461f      	mov	r7, r3
 801457e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014582:	2a30      	cmp	r2, #48	; 0x30
 8014584:	d0fa      	beq.n	801457c <_dtoa_r+0xb7c>
 8014586:	e6e1      	b.n	801434c <_dtoa_r+0x94c>
 8014588:	9a03      	ldr	r2, [sp, #12]
 801458a:	429a      	cmp	r2, r3
 801458c:	d18a      	bne.n	80144a4 <_dtoa_r+0xaa4>
 801458e:	2331      	movs	r3, #49	; 0x31
 8014590:	f10b 0b01 	add.w	fp, fp, #1
 8014594:	e797      	b.n	80144c6 <_dtoa_r+0xac6>
 8014596:	4b0a      	ldr	r3, [pc, #40]	; (80145c0 <_dtoa_r+0xbc0>)
 8014598:	f7ff ba9f 	b.w	8013ada <_dtoa_r+0xda>
 801459c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801459e:	2b00      	cmp	r3, #0
 80145a0:	f47f aa77 	bne.w	8013a92 <_dtoa_r+0x92>
 80145a4:	4b07      	ldr	r3, [pc, #28]	; (80145c4 <_dtoa_r+0xbc4>)
 80145a6:	f7ff ba98 	b.w	8013ada <_dtoa_r+0xda>
 80145aa:	9b06      	ldr	r3, [sp, #24]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	dcb6      	bgt.n	801451e <_dtoa_r+0xb1e>
 80145b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80145b2:	2b02      	cmp	r3, #2
 80145b4:	f73f aeb5 	bgt.w	8014322 <_dtoa_r+0x922>
 80145b8:	e7b1      	b.n	801451e <_dtoa_r+0xb1e>
 80145ba:	bf00      	nop
 80145bc:	0801603d 	.word	0x0801603d
 80145c0:	08015f07 	.word	0x08015f07
 80145c4:	08015fd8 	.word	0x08015fd8

080145c8 <_free_r>:
 80145c8:	b538      	push	{r3, r4, r5, lr}
 80145ca:	4605      	mov	r5, r0
 80145cc:	2900      	cmp	r1, #0
 80145ce:	d040      	beq.n	8014652 <_free_r+0x8a>
 80145d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80145d4:	1f0c      	subs	r4, r1, #4
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	bfb8      	it	lt
 80145da:	18e4      	addlt	r4, r4, r3
 80145dc:	f000 f8e4 	bl	80147a8 <__malloc_lock>
 80145e0:	4a1c      	ldr	r2, [pc, #112]	; (8014654 <_free_r+0x8c>)
 80145e2:	6813      	ldr	r3, [r2, #0]
 80145e4:	b933      	cbnz	r3, 80145f4 <_free_r+0x2c>
 80145e6:	6063      	str	r3, [r4, #4]
 80145e8:	6014      	str	r4, [r2, #0]
 80145ea:	4628      	mov	r0, r5
 80145ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80145f0:	f000 b8e0 	b.w	80147b4 <__malloc_unlock>
 80145f4:	42a3      	cmp	r3, r4
 80145f6:	d908      	bls.n	801460a <_free_r+0x42>
 80145f8:	6820      	ldr	r0, [r4, #0]
 80145fa:	1821      	adds	r1, r4, r0
 80145fc:	428b      	cmp	r3, r1
 80145fe:	bf01      	itttt	eq
 8014600:	6819      	ldreq	r1, [r3, #0]
 8014602:	685b      	ldreq	r3, [r3, #4]
 8014604:	1809      	addeq	r1, r1, r0
 8014606:	6021      	streq	r1, [r4, #0]
 8014608:	e7ed      	b.n	80145e6 <_free_r+0x1e>
 801460a:	461a      	mov	r2, r3
 801460c:	685b      	ldr	r3, [r3, #4]
 801460e:	b10b      	cbz	r3, 8014614 <_free_r+0x4c>
 8014610:	42a3      	cmp	r3, r4
 8014612:	d9fa      	bls.n	801460a <_free_r+0x42>
 8014614:	6811      	ldr	r1, [r2, #0]
 8014616:	1850      	adds	r0, r2, r1
 8014618:	42a0      	cmp	r0, r4
 801461a:	d10b      	bne.n	8014634 <_free_r+0x6c>
 801461c:	6820      	ldr	r0, [r4, #0]
 801461e:	4401      	add	r1, r0
 8014620:	1850      	adds	r0, r2, r1
 8014622:	4283      	cmp	r3, r0
 8014624:	6011      	str	r1, [r2, #0]
 8014626:	d1e0      	bne.n	80145ea <_free_r+0x22>
 8014628:	6818      	ldr	r0, [r3, #0]
 801462a:	685b      	ldr	r3, [r3, #4]
 801462c:	4408      	add	r0, r1
 801462e:	6010      	str	r0, [r2, #0]
 8014630:	6053      	str	r3, [r2, #4]
 8014632:	e7da      	b.n	80145ea <_free_r+0x22>
 8014634:	d902      	bls.n	801463c <_free_r+0x74>
 8014636:	230c      	movs	r3, #12
 8014638:	602b      	str	r3, [r5, #0]
 801463a:	e7d6      	b.n	80145ea <_free_r+0x22>
 801463c:	6820      	ldr	r0, [r4, #0]
 801463e:	1821      	adds	r1, r4, r0
 8014640:	428b      	cmp	r3, r1
 8014642:	bf01      	itttt	eq
 8014644:	6819      	ldreq	r1, [r3, #0]
 8014646:	685b      	ldreq	r3, [r3, #4]
 8014648:	1809      	addeq	r1, r1, r0
 801464a:	6021      	streq	r1, [r4, #0]
 801464c:	6063      	str	r3, [r4, #4]
 801464e:	6054      	str	r4, [r2, #4]
 8014650:	e7cb      	b.n	80145ea <_free_r+0x22>
 8014652:	bd38      	pop	{r3, r4, r5, pc}
 8014654:	20003bc8 	.word	0x20003bc8

08014658 <malloc>:
 8014658:	4b02      	ldr	r3, [pc, #8]	; (8014664 <malloc+0xc>)
 801465a:	4601      	mov	r1, r0
 801465c:	6818      	ldr	r0, [r3, #0]
 801465e:	f000 b823 	b.w	80146a8 <_malloc_r>
 8014662:	bf00      	nop
 8014664:	20000868 	.word	0x20000868

08014668 <sbrk_aligned>:
 8014668:	b570      	push	{r4, r5, r6, lr}
 801466a:	4e0e      	ldr	r6, [pc, #56]	; (80146a4 <sbrk_aligned+0x3c>)
 801466c:	460c      	mov	r4, r1
 801466e:	6831      	ldr	r1, [r6, #0]
 8014670:	4605      	mov	r5, r0
 8014672:	b911      	cbnz	r1, 801467a <sbrk_aligned+0x12>
 8014674:	f000 fe4a 	bl	801530c <_sbrk_r>
 8014678:	6030      	str	r0, [r6, #0]
 801467a:	4621      	mov	r1, r4
 801467c:	4628      	mov	r0, r5
 801467e:	f000 fe45 	bl	801530c <_sbrk_r>
 8014682:	1c43      	adds	r3, r0, #1
 8014684:	d00a      	beq.n	801469c <sbrk_aligned+0x34>
 8014686:	1cc4      	adds	r4, r0, #3
 8014688:	f024 0403 	bic.w	r4, r4, #3
 801468c:	42a0      	cmp	r0, r4
 801468e:	d007      	beq.n	80146a0 <sbrk_aligned+0x38>
 8014690:	1a21      	subs	r1, r4, r0
 8014692:	4628      	mov	r0, r5
 8014694:	f000 fe3a 	bl	801530c <_sbrk_r>
 8014698:	3001      	adds	r0, #1
 801469a:	d101      	bne.n	80146a0 <sbrk_aligned+0x38>
 801469c:	f04f 34ff 	mov.w	r4, #4294967295
 80146a0:	4620      	mov	r0, r4
 80146a2:	bd70      	pop	{r4, r5, r6, pc}
 80146a4:	20003bcc 	.word	0x20003bcc

080146a8 <_malloc_r>:
 80146a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146ac:	1ccd      	adds	r5, r1, #3
 80146ae:	f025 0503 	bic.w	r5, r5, #3
 80146b2:	3508      	adds	r5, #8
 80146b4:	2d0c      	cmp	r5, #12
 80146b6:	bf38      	it	cc
 80146b8:	250c      	movcc	r5, #12
 80146ba:	2d00      	cmp	r5, #0
 80146bc:	4607      	mov	r7, r0
 80146be:	db01      	blt.n	80146c4 <_malloc_r+0x1c>
 80146c0:	42a9      	cmp	r1, r5
 80146c2:	d905      	bls.n	80146d0 <_malloc_r+0x28>
 80146c4:	230c      	movs	r3, #12
 80146c6:	2600      	movs	r6, #0
 80146c8:	603b      	str	r3, [r7, #0]
 80146ca:	4630      	mov	r0, r6
 80146cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80147a4 <_malloc_r+0xfc>
 80146d4:	f000 f868 	bl	80147a8 <__malloc_lock>
 80146d8:	f8d8 3000 	ldr.w	r3, [r8]
 80146dc:	461c      	mov	r4, r3
 80146de:	bb5c      	cbnz	r4, 8014738 <_malloc_r+0x90>
 80146e0:	4629      	mov	r1, r5
 80146e2:	4638      	mov	r0, r7
 80146e4:	f7ff ffc0 	bl	8014668 <sbrk_aligned>
 80146e8:	1c43      	adds	r3, r0, #1
 80146ea:	4604      	mov	r4, r0
 80146ec:	d155      	bne.n	801479a <_malloc_r+0xf2>
 80146ee:	f8d8 4000 	ldr.w	r4, [r8]
 80146f2:	4626      	mov	r6, r4
 80146f4:	2e00      	cmp	r6, #0
 80146f6:	d145      	bne.n	8014784 <_malloc_r+0xdc>
 80146f8:	2c00      	cmp	r4, #0
 80146fa:	d048      	beq.n	801478e <_malloc_r+0xe6>
 80146fc:	6823      	ldr	r3, [r4, #0]
 80146fe:	4631      	mov	r1, r6
 8014700:	4638      	mov	r0, r7
 8014702:	eb04 0903 	add.w	r9, r4, r3
 8014706:	f000 fe01 	bl	801530c <_sbrk_r>
 801470a:	4581      	cmp	r9, r0
 801470c:	d13f      	bne.n	801478e <_malloc_r+0xe6>
 801470e:	6821      	ldr	r1, [r4, #0]
 8014710:	4638      	mov	r0, r7
 8014712:	1a6d      	subs	r5, r5, r1
 8014714:	4629      	mov	r1, r5
 8014716:	f7ff ffa7 	bl	8014668 <sbrk_aligned>
 801471a:	3001      	adds	r0, #1
 801471c:	d037      	beq.n	801478e <_malloc_r+0xe6>
 801471e:	6823      	ldr	r3, [r4, #0]
 8014720:	442b      	add	r3, r5
 8014722:	6023      	str	r3, [r4, #0]
 8014724:	f8d8 3000 	ldr.w	r3, [r8]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d038      	beq.n	801479e <_malloc_r+0xf6>
 801472c:	685a      	ldr	r2, [r3, #4]
 801472e:	42a2      	cmp	r2, r4
 8014730:	d12b      	bne.n	801478a <_malloc_r+0xe2>
 8014732:	2200      	movs	r2, #0
 8014734:	605a      	str	r2, [r3, #4]
 8014736:	e00f      	b.n	8014758 <_malloc_r+0xb0>
 8014738:	6822      	ldr	r2, [r4, #0]
 801473a:	1b52      	subs	r2, r2, r5
 801473c:	d41f      	bmi.n	801477e <_malloc_r+0xd6>
 801473e:	2a0b      	cmp	r2, #11
 8014740:	d917      	bls.n	8014772 <_malloc_r+0xca>
 8014742:	1961      	adds	r1, r4, r5
 8014744:	42a3      	cmp	r3, r4
 8014746:	6025      	str	r5, [r4, #0]
 8014748:	bf18      	it	ne
 801474a:	6059      	strne	r1, [r3, #4]
 801474c:	6863      	ldr	r3, [r4, #4]
 801474e:	bf08      	it	eq
 8014750:	f8c8 1000 	streq.w	r1, [r8]
 8014754:	5162      	str	r2, [r4, r5]
 8014756:	604b      	str	r3, [r1, #4]
 8014758:	4638      	mov	r0, r7
 801475a:	f104 060b 	add.w	r6, r4, #11
 801475e:	f000 f829 	bl	80147b4 <__malloc_unlock>
 8014762:	f026 0607 	bic.w	r6, r6, #7
 8014766:	1d23      	adds	r3, r4, #4
 8014768:	1af2      	subs	r2, r6, r3
 801476a:	d0ae      	beq.n	80146ca <_malloc_r+0x22>
 801476c:	1b9b      	subs	r3, r3, r6
 801476e:	50a3      	str	r3, [r4, r2]
 8014770:	e7ab      	b.n	80146ca <_malloc_r+0x22>
 8014772:	42a3      	cmp	r3, r4
 8014774:	6862      	ldr	r2, [r4, #4]
 8014776:	d1dd      	bne.n	8014734 <_malloc_r+0x8c>
 8014778:	f8c8 2000 	str.w	r2, [r8]
 801477c:	e7ec      	b.n	8014758 <_malloc_r+0xb0>
 801477e:	4623      	mov	r3, r4
 8014780:	6864      	ldr	r4, [r4, #4]
 8014782:	e7ac      	b.n	80146de <_malloc_r+0x36>
 8014784:	4634      	mov	r4, r6
 8014786:	6876      	ldr	r6, [r6, #4]
 8014788:	e7b4      	b.n	80146f4 <_malloc_r+0x4c>
 801478a:	4613      	mov	r3, r2
 801478c:	e7cc      	b.n	8014728 <_malloc_r+0x80>
 801478e:	230c      	movs	r3, #12
 8014790:	4638      	mov	r0, r7
 8014792:	603b      	str	r3, [r7, #0]
 8014794:	f000 f80e 	bl	80147b4 <__malloc_unlock>
 8014798:	e797      	b.n	80146ca <_malloc_r+0x22>
 801479a:	6025      	str	r5, [r4, #0]
 801479c:	e7dc      	b.n	8014758 <_malloc_r+0xb0>
 801479e:	605b      	str	r3, [r3, #4]
 80147a0:	deff      	udf	#255	; 0xff
 80147a2:	bf00      	nop
 80147a4:	20003bc8 	.word	0x20003bc8

080147a8 <__malloc_lock>:
 80147a8:	4801      	ldr	r0, [pc, #4]	; (80147b0 <__malloc_lock+0x8>)
 80147aa:	f7ff b86f 	b.w	801388c <__retarget_lock_acquire_recursive>
 80147ae:	bf00      	nop
 80147b0:	20003bc4 	.word	0x20003bc4

080147b4 <__malloc_unlock>:
 80147b4:	4801      	ldr	r0, [pc, #4]	; (80147bc <__malloc_unlock+0x8>)
 80147b6:	f7ff b86a 	b.w	801388e <__retarget_lock_release_recursive>
 80147ba:	bf00      	nop
 80147bc:	20003bc4 	.word	0x20003bc4

080147c0 <_Balloc>:
 80147c0:	b570      	push	{r4, r5, r6, lr}
 80147c2:	69c6      	ldr	r6, [r0, #28]
 80147c4:	4604      	mov	r4, r0
 80147c6:	460d      	mov	r5, r1
 80147c8:	b976      	cbnz	r6, 80147e8 <_Balloc+0x28>
 80147ca:	2010      	movs	r0, #16
 80147cc:	f7ff ff44 	bl	8014658 <malloc>
 80147d0:	4602      	mov	r2, r0
 80147d2:	61e0      	str	r0, [r4, #28]
 80147d4:	b920      	cbnz	r0, 80147e0 <_Balloc+0x20>
 80147d6:	216b      	movs	r1, #107	; 0x6b
 80147d8:	4b17      	ldr	r3, [pc, #92]	; (8014838 <_Balloc+0x78>)
 80147da:	4818      	ldr	r0, [pc, #96]	; (801483c <_Balloc+0x7c>)
 80147dc:	f7ff f866 	bl	80138ac <__assert_func>
 80147e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80147e4:	6006      	str	r6, [r0, #0]
 80147e6:	60c6      	str	r6, [r0, #12]
 80147e8:	69e6      	ldr	r6, [r4, #28]
 80147ea:	68f3      	ldr	r3, [r6, #12]
 80147ec:	b183      	cbz	r3, 8014810 <_Balloc+0x50>
 80147ee:	69e3      	ldr	r3, [r4, #28]
 80147f0:	68db      	ldr	r3, [r3, #12]
 80147f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80147f6:	b9b8      	cbnz	r0, 8014828 <_Balloc+0x68>
 80147f8:	2101      	movs	r1, #1
 80147fa:	fa01 f605 	lsl.w	r6, r1, r5
 80147fe:	1d72      	adds	r2, r6, #5
 8014800:	4620      	mov	r0, r4
 8014802:	0092      	lsls	r2, r2, #2
 8014804:	f000 fda7 	bl	8015356 <_calloc_r>
 8014808:	b160      	cbz	r0, 8014824 <_Balloc+0x64>
 801480a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801480e:	e00e      	b.n	801482e <_Balloc+0x6e>
 8014810:	2221      	movs	r2, #33	; 0x21
 8014812:	2104      	movs	r1, #4
 8014814:	4620      	mov	r0, r4
 8014816:	f000 fd9e 	bl	8015356 <_calloc_r>
 801481a:	69e3      	ldr	r3, [r4, #28]
 801481c:	60f0      	str	r0, [r6, #12]
 801481e:	68db      	ldr	r3, [r3, #12]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d1e4      	bne.n	80147ee <_Balloc+0x2e>
 8014824:	2000      	movs	r0, #0
 8014826:	bd70      	pop	{r4, r5, r6, pc}
 8014828:	6802      	ldr	r2, [r0, #0]
 801482a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801482e:	2300      	movs	r3, #0
 8014830:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014834:	e7f7      	b.n	8014826 <_Balloc+0x66>
 8014836:	bf00      	nop
 8014838:	08015f2b 	.word	0x08015f2b
 801483c:	0801604e 	.word	0x0801604e

08014840 <_Bfree>:
 8014840:	b570      	push	{r4, r5, r6, lr}
 8014842:	69c6      	ldr	r6, [r0, #28]
 8014844:	4605      	mov	r5, r0
 8014846:	460c      	mov	r4, r1
 8014848:	b976      	cbnz	r6, 8014868 <_Bfree+0x28>
 801484a:	2010      	movs	r0, #16
 801484c:	f7ff ff04 	bl	8014658 <malloc>
 8014850:	4602      	mov	r2, r0
 8014852:	61e8      	str	r0, [r5, #28]
 8014854:	b920      	cbnz	r0, 8014860 <_Bfree+0x20>
 8014856:	218f      	movs	r1, #143	; 0x8f
 8014858:	4b08      	ldr	r3, [pc, #32]	; (801487c <_Bfree+0x3c>)
 801485a:	4809      	ldr	r0, [pc, #36]	; (8014880 <_Bfree+0x40>)
 801485c:	f7ff f826 	bl	80138ac <__assert_func>
 8014860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014864:	6006      	str	r6, [r0, #0]
 8014866:	60c6      	str	r6, [r0, #12]
 8014868:	b13c      	cbz	r4, 801487a <_Bfree+0x3a>
 801486a:	69eb      	ldr	r3, [r5, #28]
 801486c:	6862      	ldr	r2, [r4, #4]
 801486e:	68db      	ldr	r3, [r3, #12]
 8014870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014874:	6021      	str	r1, [r4, #0]
 8014876:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801487a:	bd70      	pop	{r4, r5, r6, pc}
 801487c:	08015f2b 	.word	0x08015f2b
 8014880:	0801604e 	.word	0x0801604e

08014884 <__multadd>:
 8014884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014888:	4607      	mov	r7, r0
 801488a:	460c      	mov	r4, r1
 801488c:	461e      	mov	r6, r3
 801488e:	2000      	movs	r0, #0
 8014890:	690d      	ldr	r5, [r1, #16]
 8014892:	f101 0c14 	add.w	ip, r1, #20
 8014896:	f8dc 3000 	ldr.w	r3, [ip]
 801489a:	3001      	adds	r0, #1
 801489c:	b299      	uxth	r1, r3
 801489e:	fb02 6101 	mla	r1, r2, r1, r6
 80148a2:	0c1e      	lsrs	r6, r3, #16
 80148a4:	0c0b      	lsrs	r3, r1, #16
 80148a6:	fb02 3306 	mla	r3, r2, r6, r3
 80148aa:	b289      	uxth	r1, r1
 80148ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80148b0:	4285      	cmp	r5, r0
 80148b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80148b6:	f84c 1b04 	str.w	r1, [ip], #4
 80148ba:	dcec      	bgt.n	8014896 <__multadd+0x12>
 80148bc:	b30e      	cbz	r6, 8014902 <__multadd+0x7e>
 80148be:	68a3      	ldr	r3, [r4, #8]
 80148c0:	42ab      	cmp	r3, r5
 80148c2:	dc19      	bgt.n	80148f8 <__multadd+0x74>
 80148c4:	6861      	ldr	r1, [r4, #4]
 80148c6:	4638      	mov	r0, r7
 80148c8:	3101      	adds	r1, #1
 80148ca:	f7ff ff79 	bl	80147c0 <_Balloc>
 80148ce:	4680      	mov	r8, r0
 80148d0:	b928      	cbnz	r0, 80148de <__multadd+0x5a>
 80148d2:	4602      	mov	r2, r0
 80148d4:	21ba      	movs	r1, #186	; 0xba
 80148d6:	4b0c      	ldr	r3, [pc, #48]	; (8014908 <__multadd+0x84>)
 80148d8:	480c      	ldr	r0, [pc, #48]	; (801490c <__multadd+0x88>)
 80148da:	f7fe ffe7 	bl	80138ac <__assert_func>
 80148de:	6922      	ldr	r2, [r4, #16]
 80148e0:	f104 010c 	add.w	r1, r4, #12
 80148e4:	3202      	adds	r2, #2
 80148e6:	0092      	lsls	r2, r2, #2
 80148e8:	300c      	adds	r0, #12
 80148ea:	f000 fd1f 	bl	801532c <memcpy>
 80148ee:	4621      	mov	r1, r4
 80148f0:	4638      	mov	r0, r7
 80148f2:	f7ff ffa5 	bl	8014840 <_Bfree>
 80148f6:	4644      	mov	r4, r8
 80148f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80148fc:	3501      	adds	r5, #1
 80148fe:	615e      	str	r6, [r3, #20]
 8014900:	6125      	str	r5, [r4, #16]
 8014902:	4620      	mov	r0, r4
 8014904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014908:	0801603d 	.word	0x0801603d
 801490c:	0801604e 	.word	0x0801604e

08014910 <__hi0bits>:
 8014910:	0c02      	lsrs	r2, r0, #16
 8014912:	0412      	lsls	r2, r2, #16
 8014914:	4603      	mov	r3, r0
 8014916:	b9ca      	cbnz	r2, 801494c <__hi0bits+0x3c>
 8014918:	0403      	lsls	r3, r0, #16
 801491a:	2010      	movs	r0, #16
 801491c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014920:	bf04      	itt	eq
 8014922:	021b      	lsleq	r3, r3, #8
 8014924:	3008      	addeq	r0, #8
 8014926:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801492a:	bf04      	itt	eq
 801492c:	011b      	lsleq	r3, r3, #4
 801492e:	3004      	addeq	r0, #4
 8014930:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014934:	bf04      	itt	eq
 8014936:	009b      	lsleq	r3, r3, #2
 8014938:	3002      	addeq	r0, #2
 801493a:	2b00      	cmp	r3, #0
 801493c:	db05      	blt.n	801494a <__hi0bits+0x3a>
 801493e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8014942:	f100 0001 	add.w	r0, r0, #1
 8014946:	bf08      	it	eq
 8014948:	2020      	moveq	r0, #32
 801494a:	4770      	bx	lr
 801494c:	2000      	movs	r0, #0
 801494e:	e7e5      	b.n	801491c <__hi0bits+0xc>

08014950 <__lo0bits>:
 8014950:	6803      	ldr	r3, [r0, #0]
 8014952:	4602      	mov	r2, r0
 8014954:	f013 0007 	ands.w	r0, r3, #7
 8014958:	d00b      	beq.n	8014972 <__lo0bits+0x22>
 801495a:	07d9      	lsls	r1, r3, #31
 801495c:	d421      	bmi.n	80149a2 <__lo0bits+0x52>
 801495e:	0798      	lsls	r0, r3, #30
 8014960:	bf49      	itett	mi
 8014962:	085b      	lsrmi	r3, r3, #1
 8014964:	089b      	lsrpl	r3, r3, #2
 8014966:	2001      	movmi	r0, #1
 8014968:	6013      	strmi	r3, [r2, #0]
 801496a:	bf5c      	itt	pl
 801496c:	2002      	movpl	r0, #2
 801496e:	6013      	strpl	r3, [r2, #0]
 8014970:	4770      	bx	lr
 8014972:	b299      	uxth	r1, r3
 8014974:	b909      	cbnz	r1, 801497a <__lo0bits+0x2a>
 8014976:	2010      	movs	r0, #16
 8014978:	0c1b      	lsrs	r3, r3, #16
 801497a:	b2d9      	uxtb	r1, r3
 801497c:	b909      	cbnz	r1, 8014982 <__lo0bits+0x32>
 801497e:	3008      	adds	r0, #8
 8014980:	0a1b      	lsrs	r3, r3, #8
 8014982:	0719      	lsls	r1, r3, #28
 8014984:	bf04      	itt	eq
 8014986:	091b      	lsreq	r3, r3, #4
 8014988:	3004      	addeq	r0, #4
 801498a:	0799      	lsls	r1, r3, #30
 801498c:	bf04      	itt	eq
 801498e:	089b      	lsreq	r3, r3, #2
 8014990:	3002      	addeq	r0, #2
 8014992:	07d9      	lsls	r1, r3, #31
 8014994:	d403      	bmi.n	801499e <__lo0bits+0x4e>
 8014996:	085b      	lsrs	r3, r3, #1
 8014998:	f100 0001 	add.w	r0, r0, #1
 801499c:	d003      	beq.n	80149a6 <__lo0bits+0x56>
 801499e:	6013      	str	r3, [r2, #0]
 80149a0:	4770      	bx	lr
 80149a2:	2000      	movs	r0, #0
 80149a4:	4770      	bx	lr
 80149a6:	2020      	movs	r0, #32
 80149a8:	4770      	bx	lr
	...

080149ac <__i2b>:
 80149ac:	b510      	push	{r4, lr}
 80149ae:	460c      	mov	r4, r1
 80149b0:	2101      	movs	r1, #1
 80149b2:	f7ff ff05 	bl	80147c0 <_Balloc>
 80149b6:	4602      	mov	r2, r0
 80149b8:	b928      	cbnz	r0, 80149c6 <__i2b+0x1a>
 80149ba:	f240 1145 	movw	r1, #325	; 0x145
 80149be:	4b04      	ldr	r3, [pc, #16]	; (80149d0 <__i2b+0x24>)
 80149c0:	4804      	ldr	r0, [pc, #16]	; (80149d4 <__i2b+0x28>)
 80149c2:	f7fe ff73 	bl	80138ac <__assert_func>
 80149c6:	2301      	movs	r3, #1
 80149c8:	6144      	str	r4, [r0, #20]
 80149ca:	6103      	str	r3, [r0, #16]
 80149cc:	bd10      	pop	{r4, pc}
 80149ce:	bf00      	nop
 80149d0:	0801603d 	.word	0x0801603d
 80149d4:	0801604e 	.word	0x0801604e

080149d8 <__multiply>:
 80149d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149dc:	4691      	mov	r9, r2
 80149de:	690a      	ldr	r2, [r1, #16]
 80149e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80149e4:	460c      	mov	r4, r1
 80149e6:	429a      	cmp	r2, r3
 80149e8:	bfbe      	ittt	lt
 80149ea:	460b      	movlt	r3, r1
 80149ec:	464c      	movlt	r4, r9
 80149ee:	4699      	movlt	r9, r3
 80149f0:	6927      	ldr	r7, [r4, #16]
 80149f2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80149f6:	68a3      	ldr	r3, [r4, #8]
 80149f8:	6861      	ldr	r1, [r4, #4]
 80149fa:	eb07 060a 	add.w	r6, r7, sl
 80149fe:	42b3      	cmp	r3, r6
 8014a00:	b085      	sub	sp, #20
 8014a02:	bfb8      	it	lt
 8014a04:	3101      	addlt	r1, #1
 8014a06:	f7ff fedb 	bl	80147c0 <_Balloc>
 8014a0a:	b930      	cbnz	r0, 8014a1a <__multiply+0x42>
 8014a0c:	4602      	mov	r2, r0
 8014a0e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8014a12:	4b43      	ldr	r3, [pc, #268]	; (8014b20 <__multiply+0x148>)
 8014a14:	4843      	ldr	r0, [pc, #268]	; (8014b24 <__multiply+0x14c>)
 8014a16:	f7fe ff49 	bl	80138ac <__assert_func>
 8014a1a:	f100 0514 	add.w	r5, r0, #20
 8014a1e:	462b      	mov	r3, r5
 8014a20:	2200      	movs	r2, #0
 8014a22:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014a26:	4543      	cmp	r3, r8
 8014a28:	d321      	bcc.n	8014a6e <__multiply+0x96>
 8014a2a:	f104 0314 	add.w	r3, r4, #20
 8014a2e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014a32:	f109 0314 	add.w	r3, r9, #20
 8014a36:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014a3a:	9202      	str	r2, [sp, #8]
 8014a3c:	1b3a      	subs	r2, r7, r4
 8014a3e:	3a15      	subs	r2, #21
 8014a40:	f022 0203 	bic.w	r2, r2, #3
 8014a44:	3204      	adds	r2, #4
 8014a46:	f104 0115 	add.w	r1, r4, #21
 8014a4a:	428f      	cmp	r7, r1
 8014a4c:	bf38      	it	cc
 8014a4e:	2204      	movcc	r2, #4
 8014a50:	9201      	str	r2, [sp, #4]
 8014a52:	9a02      	ldr	r2, [sp, #8]
 8014a54:	9303      	str	r3, [sp, #12]
 8014a56:	429a      	cmp	r2, r3
 8014a58:	d80c      	bhi.n	8014a74 <__multiply+0x9c>
 8014a5a:	2e00      	cmp	r6, #0
 8014a5c:	dd03      	ble.n	8014a66 <__multiply+0x8e>
 8014a5e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d05a      	beq.n	8014b1c <__multiply+0x144>
 8014a66:	6106      	str	r6, [r0, #16]
 8014a68:	b005      	add	sp, #20
 8014a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a6e:	f843 2b04 	str.w	r2, [r3], #4
 8014a72:	e7d8      	b.n	8014a26 <__multiply+0x4e>
 8014a74:	f8b3 a000 	ldrh.w	sl, [r3]
 8014a78:	f1ba 0f00 	cmp.w	sl, #0
 8014a7c:	d023      	beq.n	8014ac6 <__multiply+0xee>
 8014a7e:	46a9      	mov	r9, r5
 8014a80:	f04f 0c00 	mov.w	ip, #0
 8014a84:	f104 0e14 	add.w	lr, r4, #20
 8014a88:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014a8c:	f8d9 1000 	ldr.w	r1, [r9]
 8014a90:	fa1f fb82 	uxth.w	fp, r2
 8014a94:	b289      	uxth	r1, r1
 8014a96:	fb0a 110b 	mla	r1, sl, fp, r1
 8014a9a:	4461      	add	r1, ip
 8014a9c:	f8d9 c000 	ldr.w	ip, [r9]
 8014aa0:	0c12      	lsrs	r2, r2, #16
 8014aa2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8014aa6:	fb0a c202 	mla	r2, sl, r2, ip
 8014aaa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014aae:	b289      	uxth	r1, r1
 8014ab0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014ab4:	4577      	cmp	r7, lr
 8014ab6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014aba:	f849 1b04 	str.w	r1, [r9], #4
 8014abe:	d8e3      	bhi.n	8014a88 <__multiply+0xb0>
 8014ac0:	9a01      	ldr	r2, [sp, #4]
 8014ac2:	f845 c002 	str.w	ip, [r5, r2]
 8014ac6:	9a03      	ldr	r2, [sp, #12]
 8014ac8:	3304      	adds	r3, #4
 8014aca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014ace:	f1b9 0f00 	cmp.w	r9, #0
 8014ad2:	d021      	beq.n	8014b18 <__multiply+0x140>
 8014ad4:	46ae      	mov	lr, r5
 8014ad6:	f04f 0a00 	mov.w	sl, #0
 8014ada:	6829      	ldr	r1, [r5, #0]
 8014adc:	f104 0c14 	add.w	ip, r4, #20
 8014ae0:	f8bc b000 	ldrh.w	fp, [ip]
 8014ae4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014ae8:	b289      	uxth	r1, r1
 8014aea:	fb09 220b 	mla	r2, r9, fp, r2
 8014aee:	4452      	add	r2, sl
 8014af0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014af4:	f84e 1b04 	str.w	r1, [lr], #4
 8014af8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014afc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014b00:	f8be 1000 	ldrh.w	r1, [lr]
 8014b04:	4567      	cmp	r7, ip
 8014b06:	fb09 110a 	mla	r1, r9, sl, r1
 8014b0a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8014b0e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014b12:	d8e5      	bhi.n	8014ae0 <__multiply+0x108>
 8014b14:	9a01      	ldr	r2, [sp, #4]
 8014b16:	50a9      	str	r1, [r5, r2]
 8014b18:	3504      	adds	r5, #4
 8014b1a:	e79a      	b.n	8014a52 <__multiply+0x7a>
 8014b1c:	3e01      	subs	r6, #1
 8014b1e:	e79c      	b.n	8014a5a <__multiply+0x82>
 8014b20:	0801603d 	.word	0x0801603d
 8014b24:	0801604e 	.word	0x0801604e

08014b28 <__pow5mult>:
 8014b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b2c:	4615      	mov	r5, r2
 8014b2e:	f012 0203 	ands.w	r2, r2, #3
 8014b32:	4606      	mov	r6, r0
 8014b34:	460f      	mov	r7, r1
 8014b36:	d007      	beq.n	8014b48 <__pow5mult+0x20>
 8014b38:	4c25      	ldr	r4, [pc, #148]	; (8014bd0 <__pow5mult+0xa8>)
 8014b3a:	3a01      	subs	r2, #1
 8014b3c:	2300      	movs	r3, #0
 8014b3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014b42:	f7ff fe9f 	bl	8014884 <__multadd>
 8014b46:	4607      	mov	r7, r0
 8014b48:	10ad      	asrs	r5, r5, #2
 8014b4a:	d03d      	beq.n	8014bc8 <__pow5mult+0xa0>
 8014b4c:	69f4      	ldr	r4, [r6, #28]
 8014b4e:	b97c      	cbnz	r4, 8014b70 <__pow5mult+0x48>
 8014b50:	2010      	movs	r0, #16
 8014b52:	f7ff fd81 	bl	8014658 <malloc>
 8014b56:	4602      	mov	r2, r0
 8014b58:	61f0      	str	r0, [r6, #28]
 8014b5a:	b928      	cbnz	r0, 8014b68 <__pow5mult+0x40>
 8014b5c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8014b60:	4b1c      	ldr	r3, [pc, #112]	; (8014bd4 <__pow5mult+0xac>)
 8014b62:	481d      	ldr	r0, [pc, #116]	; (8014bd8 <__pow5mult+0xb0>)
 8014b64:	f7fe fea2 	bl	80138ac <__assert_func>
 8014b68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014b6c:	6004      	str	r4, [r0, #0]
 8014b6e:	60c4      	str	r4, [r0, #12]
 8014b70:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8014b74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014b78:	b94c      	cbnz	r4, 8014b8e <__pow5mult+0x66>
 8014b7a:	f240 2171 	movw	r1, #625	; 0x271
 8014b7e:	4630      	mov	r0, r6
 8014b80:	f7ff ff14 	bl	80149ac <__i2b>
 8014b84:	2300      	movs	r3, #0
 8014b86:	4604      	mov	r4, r0
 8014b88:	f8c8 0008 	str.w	r0, [r8, #8]
 8014b8c:	6003      	str	r3, [r0, #0]
 8014b8e:	f04f 0900 	mov.w	r9, #0
 8014b92:	07eb      	lsls	r3, r5, #31
 8014b94:	d50a      	bpl.n	8014bac <__pow5mult+0x84>
 8014b96:	4639      	mov	r1, r7
 8014b98:	4622      	mov	r2, r4
 8014b9a:	4630      	mov	r0, r6
 8014b9c:	f7ff ff1c 	bl	80149d8 <__multiply>
 8014ba0:	4680      	mov	r8, r0
 8014ba2:	4639      	mov	r1, r7
 8014ba4:	4630      	mov	r0, r6
 8014ba6:	f7ff fe4b 	bl	8014840 <_Bfree>
 8014baa:	4647      	mov	r7, r8
 8014bac:	106d      	asrs	r5, r5, #1
 8014bae:	d00b      	beq.n	8014bc8 <__pow5mult+0xa0>
 8014bb0:	6820      	ldr	r0, [r4, #0]
 8014bb2:	b938      	cbnz	r0, 8014bc4 <__pow5mult+0x9c>
 8014bb4:	4622      	mov	r2, r4
 8014bb6:	4621      	mov	r1, r4
 8014bb8:	4630      	mov	r0, r6
 8014bba:	f7ff ff0d 	bl	80149d8 <__multiply>
 8014bbe:	6020      	str	r0, [r4, #0]
 8014bc0:	f8c0 9000 	str.w	r9, [r0]
 8014bc4:	4604      	mov	r4, r0
 8014bc6:	e7e4      	b.n	8014b92 <__pow5mult+0x6a>
 8014bc8:	4638      	mov	r0, r7
 8014bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014bce:	bf00      	nop
 8014bd0:	08016198 	.word	0x08016198
 8014bd4:	08015f2b 	.word	0x08015f2b
 8014bd8:	0801604e 	.word	0x0801604e

08014bdc <__lshift>:
 8014bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014be0:	460c      	mov	r4, r1
 8014be2:	4607      	mov	r7, r0
 8014be4:	4691      	mov	r9, r2
 8014be6:	6923      	ldr	r3, [r4, #16]
 8014be8:	6849      	ldr	r1, [r1, #4]
 8014bea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014bee:	68a3      	ldr	r3, [r4, #8]
 8014bf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014bf4:	f108 0601 	add.w	r6, r8, #1
 8014bf8:	42b3      	cmp	r3, r6
 8014bfa:	db0b      	blt.n	8014c14 <__lshift+0x38>
 8014bfc:	4638      	mov	r0, r7
 8014bfe:	f7ff fddf 	bl	80147c0 <_Balloc>
 8014c02:	4605      	mov	r5, r0
 8014c04:	b948      	cbnz	r0, 8014c1a <__lshift+0x3e>
 8014c06:	4602      	mov	r2, r0
 8014c08:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8014c0c:	4b27      	ldr	r3, [pc, #156]	; (8014cac <__lshift+0xd0>)
 8014c0e:	4828      	ldr	r0, [pc, #160]	; (8014cb0 <__lshift+0xd4>)
 8014c10:	f7fe fe4c 	bl	80138ac <__assert_func>
 8014c14:	3101      	adds	r1, #1
 8014c16:	005b      	lsls	r3, r3, #1
 8014c18:	e7ee      	b.n	8014bf8 <__lshift+0x1c>
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	f100 0114 	add.w	r1, r0, #20
 8014c20:	f100 0210 	add.w	r2, r0, #16
 8014c24:	4618      	mov	r0, r3
 8014c26:	4553      	cmp	r3, sl
 8014c28:	db33      	blt.n	8014c92 <__lshift+0xb6>
 8014c2a:	6920      	ldr	r0, [r4, #16]
 8014c2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014c30:	f104 0314 	add.w	r3, r4, #20
 8014c34:	f019 091f 	ands.w	r9, r9, #31
 8014c38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014c3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014c40:	d02b      	beq.n	8014c9a <__lshift+0xbe>
 8014c42:	468a      	mov	sl, r1
 8014c44:	2200      	movs	r2, #0
 8014c46:	f1c9 0e20 	rsb	lr, r9, #32
 8014c4a:	6818      	ldr	r0, [r3, #0]
 8014c4c:	fa00 f009 	lsl.w	r0, r0, r9
 8014c50:	4310      	orrs	r0, r2
 8014c52:	f84a 0b04 	str.w	r0, [sl], #4
 8014c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c5a:	459c      	cmp	ip, r3
 8014c5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8014c60:	d8f3      	bhi.n	8014c4a <__lshift+0x6e>
 8014c62:	ebac 0304 	sub.w	r3, ip, r4
 8014c66:	3b15      	subs	r3, #21
 8014c68:	f023 0303 	bic.w	r3, r3, #3
 8014c6c:	3304      	adds	r3, #4
 8014c6e:	f104 0015 	add.w	r0, r4, #21
 8014c72:	4584      	cmp	ip, r0
 8014c74:	bf38      	it	cc
 8014c76:	2304      	movcc	r3, #4
 8014c78:	50ca      	str	r2, [r1, r3]
 8014c7a:	b10a      	cbz	r2, 8014c80 <__lshift+0xa4>
 8014c7c:	f108 0602 	add.w	r6, r8, #2
 8014c80:	3e01      	subs	r6, #1
 8014c82:	4638      	mov	r0, r7
 8014c84:	4621      	mov	r1, r4
 8014c86:	612e      	str	r6, [r5, #16]
 8014c88:	f7ff fdda 	bl	8014840 <_Bfree>
 8014c8c:	4628      	mov	r0, r5
 8014c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c92:	f842 0f04 	str.w	r0, [r2, #4]!
 8014c96:	3301      	adds	r3, #1
 8014c98:	e7c5      	b.n	8014c26 <__lshift+0x4a>
 8014c9a:	3904      	subs	r1, #4
 8014c9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ca0:	459c      	cmp	ip, r3
 8014ca2:	f841 2f04 	str.w	r2, [r1, #4]!
 8014ca6:	d8f9      	bhi.n	8014c9c <__lshift+0xc0>
 8014ca8:	e7ea      	b.n	8014c80 <__lshift+0xa4>
 8014caa:	bf00      	nop
 8014cac:	0801603d 	.word	0x0801603d
 8014cb0:	0801604e 	.word	0x0801604e

08014cb4 <__mcmp>:
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	690a      	ldr	r2, [r1, #16]
 8014cb8:	6900      	ldr	r0, [r0, #16]
 8014cba:	b530      	push	{r4, r5, lr}
 8014cbc:	1a80      	subs	r0, r0, r2
 8014cbe:	d10d      	bne.n	8014cdc <__mcmp+0x28>
 8014cc0:	3314      	adds	r3, #20
 8014cc2:	3114      	adds	r1, #20
 8014cc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014cc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014ccc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014cd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014cd4:	4295      	cmp	r5, r2
 8014cd6:	d002      	beq.n	8014cde <__mcmp+0x2a>
 8014cd8:	d304      	bcc.n	8014ce4 <__mcmp+0x30>
 8014cda:	2001      	movs	r0, #1
 8014cdc:	bd30      	pop	{r4, r5, pc}
 8014cde:	42a3      	cmp	r3, r4
 8014ce0:	d3f4      	bcc.n	8014ccc <__mcmp+0x18>
 8014ce2:	e7fb      	b.n	8014cdc <__mcmp+0x28>
 8014ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8014ce8:	e7f8      	b.n	8014cdc <__mcmp+0x28>
	...

08014cec <__mdiff>:
 8014cec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cf0:	460d      	mov	r5, r1
 8014cf2:	4607      	mov	r7, r0
 8014cf4:	4611      	mov	r1, r2
 8014cf6:	4628      	mov	r0, r5
 8014cf8:	4614      	mov	r4, r2
 8014cfa:	f7ff ffdb 	bl	8014cb4 <__mcmp>
 8014cfe:	1e06      	subs	r6, r0, #0
 8014d00:	d111      	bne.n	8014d26 <__mdiff+0x3a>
 8014d02:	4631      	mov	r1, r6
 8014d04:	4638      	mov	r0, r7
 8014d06:	f7ff fd5b 	bl	80147c0 <_Balloc>
 8014d0a:	4602      	mov	r2, r0
 8014d0c:	b928      	cbnz	r0, 8014d1a <__mdiff+0x2e>
 8014d0e:	f240 2137 	movw	r1, #567	; 0x237
 8014d12:	4b3a      	ldr	r3, [pc, #232]	; (8014dfc <__mdiff+0x110>)
 8014d14:	483a      	ldr	r0, [pc, #232]	; (8014e00 <__mdiff+0x114>)
 8014d16:	f7fe fdc9 	bl	80138ac <__assert_func>
 8014d1a:	2301      	movs	r3, #1
 8014d1c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014d20:	4610      	mov	r0, r2
 8014d22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d26:	bfa4      	itt	ge
 8014d28:	4623      	movge	r3, r4
 8014d2a:	462c      	movge	r4, r5
 8014d2c:	4638      	mov	r0, r7
 8014d2e:	6861      	ldr	r1, [r4, #4]
 8014d30:	bfa6      	itte	ge
 8014d32:	461d      	movge	r5, r3
 8014d34:	2600      	movge	r6, #0
 8014d36:	2601      	movlt	r6, #1
 8014d38:	f7ff fd42 	bl	80147c0 <_Balloc>
 8014d3c:	4602      	mov	r2, r0
 8014d3e:	b918      	cbnz	r0, 8014d48 <__mdiff+0x5c>
 8014d40:	f240 2145 	movw	r1, #581	; 0x245
 8014d44:	4b2d      	ldr	r3, [pc, #180]	; (8014dfc <__mdiff+0x110>)
 8014d46:	e7e5      	b.n	8014d14 <__mdiff+0x28>
 8014d48:	f102 0814 	add.w	r8, r2, #20
 8014d4c:	46c2      	mov	sl, r8
 8014d4e:	f04f 0c00 	mov.w	ip, #0
 8014d52:	6927      	ldr	r7, [r4, #16]
 8014d54:	60c6      	str	r6, [r0, #12]
 8014d56:	692e      	ldr	r6, [r5, #16]
 8014d58:	f104 0014 	add.w	r0, r4, #20
 8014d5c:	f105 0914 	add.w	r9, r5, #20
 8014d60:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8014d64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014d68:	3410      	adds	r4, #16
 8014d6a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8014d6e:	f859 3b04 	ldr.w	r3, [r9], #4
 8014d72:	fa1f f18b 	uxth.w	r1, fp
 8014d76:	4461      	add	r1, ip
 8014d78:	fa1f fc83 	uxth.w	ip, r3
 8014d7c:	0c1b      	lsrs	r3, r3, #16
 8014d7e:	eba1 010c 	sub.w	r1, r1, ip
 8014d82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014d86:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8014d8a:	b289      	uxth	r1, r1
 8014d8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8014d90:	454e      	cmp	r6, r9
 8014d92:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8014d96:	f84a 1b04 	str.w	r1, [sl], #4
 8014d9a:	d8e6      	bhi.n	8014d6a <__mdiff+0x7e>
 8014d9c:	1b73      	subs	r3, r6, r5
 8014d9e:	3b15      	subs	r3, #21
 8014da0:	f023 0303 	bic.w	r3, r3, #3
 8014da4:	3515      	adds	r5, #21
 8014da6:	3304      	adds	r3, #4
 8014da8:	42ae      	cmp	r6, r5
 8014daa:	bf38      	it	cc
 8014dac:	2304      	movcc	r3, #4
 8014dae:	4418      	add	r0, r3
 8014db0:	4443      	add	r3, r8
 8014db2:	461e      	mov	r6, r3
 8014db4:	4605      	mov	r5, r0
 8014db6:	4575      	cmp	r5, lr
 8014db8:	d30e      	bcc.n	8014dd8 <__mdiff+0xec>
 8014dba:	f10e 0103 	add.w	r1, lr, #3
 8014dbe:	1a09      	subs	r1, r1, r0
 8014dc0:	f021 0103 	bic.w	r1, r1, #3
 8014dc4:	3803      	subs	r0, #3
 8014dc6:	4586      	cmp	lr, r0
 8014dc8:	bf38      	it	cc
 8014dca:	2100      	movcc	r1, #0
 8014dcc:	440b      	add	r3, r1
 8014dce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014dd2:	b189      	cbz	r1, 8014df8 <__mdiff+0x10c>
 8014dd4:	6117      	str	r7, [r2, #16]
 8014dd6:	e7a3      	b.n	8014d20 <__mdiff+0x34>
 8014dd8:	f855 8b04 	ldr.w	r8, [r5], #4
 8014ddc:	fa1f f188 	uxth.w	r1, r8
 8014de0:	4461      	add	r1, ip
 8014de2:	140c      	asrs	r4, r1, #16
 8014de4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014de8:	b289      	uxth	r1, r1
 8014dea:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014dee:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8014df2:	f846 1b04 	str.w	r1, [r6], #4
 8014df6:	e7de      	b.n	8014db6 <__mdiff+0xca>
 8014df8:	3f01      	subs	r7, #1
 8014dfa:	e7e8      	b.n	8014dce <__mdiff+0xe2>
 8014dfc:	0801603d 	.word	0x0801603d
 8014e00:	0801604e 	.word	0x0801604e

08014e04 <__d2b>:
 8014e04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014e06:	2101      	movs	r1, #1
 8014e08:	4617      	mov	r7, r2
 8014e0a:	461c      	mov	r4, r3
 8014e0c:	9e08      	ldr	r6, [sp, #32]
 8014e0e:	f7ff fcd7 	bl	80147c0 <_Balloc>
 8014e12:	4605      	mov	r5, r0
 8014e14:	b930      	cbnz	r0, 8014e24 <__d2b+0x20>
 8014e16:	4602      	mov	r2, r0
 8014e18:	f240 310f 	movw	r1, #783	; 0x30f
 8014e1c:	4b22      	ldr	r3, [pc, #136]	; (8014ea8 <__d2b+0xa4>)
 8014e1e:	4823      	ldr	r0, [pc, #140]	; (8014eac <__d2b+0xa8>)
 8014e20:	f7fe fd44 	bl	80138ac <__assert_func>
 8014e24:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8014e28:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8014e2c:	bb24      	cbnz	r4, 8014e78 <__d2b+0x74>
 8014e2e:	2f00      	cmp	r7, #0
 8014e30:	9301      	str	r3, [sp, #4]
 8014e32:	d026      	beq.n	8014e82 <__d2b+0x7e>
 8014e34:	4668      	mov	r0, sp
 8014e36:	9700      	str	r7, [sp, #0]
 8014e38:	f7ff fd8a 	bl	8014950 <__lo0bits>
 8014e3c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014e40:	b1e8      	cbz	r0, 8014e7e <__d2b+0x7a>
 8014e42:	f1c0 0320 	rsb	r3, r0, #32
 8014e46:	fa02 f303 	lsl.w	r3, r2, r3
 8014e4a:	430b      	orrs	r3, r1
 8014e4c:	40c2      	lsrs	r2, r0
 8014e4e:	616b      	str	r3, [r5, #20]
 8014e50:	9201      	str	r2, [sp, #4]
 8014e52:	9b01      	ldr	r3, [sp, #4]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	bf14      	ite	ne
 8014e58:	2102      	movne	r1, #2
 8014e5a:	2101      	moveq	r1, #1
 8014e5c:	61ab      	str	r3, [r5, #24]
 8014e5e:	6129      	str	r1, [r5, #16]
 8014e60:	b1bc      	cbz	r4, 8014e92 <__d2b+0x8e>
 8014e62:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8014e66:	4404      	add	r4, r0
 8014e68:	6034      	str	r4, [r6, #0]
 8014e6a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e70:	6018      	str	r0, [r3, #0]
 8014e72:	4628      	mov	r0, r5
 8014e74:	b003      	add	sp, #12
 8014e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014e7c:	e7d7      	b.n	8014e2e <__d2b+0x2a>
 8014e7e:	6169      	str	r1, [r5, #20]
 8014e80:	e7e7      	b.n	8014e52 <__d2b+0x4e>
 8014e82:	a801      	add	r0, sp, #4
 8014e84:	f7ff fd64 	bl	8014950 <__lo0bits>
 8014e88:	9b01      	ldr	r3, [sp, #4]
 8014e8a:	2101      	movs	r1, #1
 8014e8c:	616b      	str	r3, [r5, #20]
 8014e8e:	3020      	adds	r0, #32
 8014e90:	e7e5      	b.n	8014e5e <__d2b+0x5a>
 8014e92:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014e96:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8014e9a:	6030      	str	r0, [r6, #0]
 8014e9c:	6918      	ldr	r0, [r3, #16]
 8014e9e:	f7ff fd37 	bl	8014910 <__hi0bits>
 8014ea2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8014ea6:	e7e2      	b.n	8014e6e <__d2b+0x6a>
 8014ea8:	0801603d 	.word	0x0801603d
 8014eac:	0801604e 	.word	0x0801604e

08014eb0 <__ssputs_r>:
 8014eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014eb4:	461f      	mov	r7, r3
 8014eb6:	688e      	ldr	r6, [r1, #8]
 8014eb8:	4682      	mov	sl, r0
 8014eba:	42be      	cmp	r6, r7
 8014ebc:	460c      	mov	r4, r1
 8014ebe:	4690      	mov	r8, r2
 8014ec0:	680b      	ldr	r3, [r1, #0]
 8014ec2:	d82c      	bhi.n	8014f1e <__ssputs_r+0x6e>
 8014ec4:	898a      	ldrh	r2, [r1, #12]
 8014ec6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014eca:	d026      	beq.n	8014f1a <__ssputs_r+0x6a>
 8014ecc:	6965      	ldr	r5, [r4, #20]
 8014ece:	6909      	ldr	r1, [r1, #16]
 8014ed0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014ed4:	eba3 0901 	sub.w	r9, r3, r1
 8014ed8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014edc:	1c7b      	adds	r3, r7, #1
 8014ede:	444b      	add	r3, r9
 8014ee0:	106d      	asrs	r5, r5, #1
 8014ee2:	429d      	cmp	r5, r3
 8014ee4:	bf38      	it	cc
 8014ee6:	461d      	movcc	r5, r3
 8014ee8:	0553      	lsls	r3, r2, #21
 8014eea:	d527      	bpl.n	8014f3c <__ssputs_r+0x8c>
 8014eec:	4629      	mov	r1, r5
 8014eee:	f7ff fbdb 	bl	80146a8 <_malloc_r>
 8014ef2:	4606      	mov	r6, r0
 8014ef4:	b360      	cbz	r0, 8014f50 <__ssputs_r+0xa0>
 8014ef6:	464a      	mov	r2, r9
 8014ef8:	6921      	ldr	r1, [r4, #16]
 8014efa:	f000 fa17 	bl	801532c <memcpy>
 8014efe:	89a3      	ldrh	r3, [r4, #12]
 8014f00:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f08:	81a3      	strh	r3, [r4, #12]
 8014f0a:	6126      	str	r6, [r4, #16]
 8014f0c:	444e      	add	r6, r9
 8014f0e:	6026      	str	r6, [r4, #0]
 8014f10:	463e      	mov	r6, r7
 8014f12:	6165      	str	r5, [r4, #20]
 8014f14:	eba5 0509 	sub.w	r5, r5, r9
 8014f18:	60a5      	str	r5, [r4, #8]
 8014f1a:	42be      	cmp	r6, r7
 8014f1c:	d900      	bls.n	8014f20 <__ssputs_r+0x70>
 8014f1e:	463e      	mov	r6, r7
 8014f20:	4632      	mov	r2, r6
 8014f22:	4641      	mov	r1, r8
 8014f24:	6820      	ldr	r0, [r4, #0]
 8014f26:	f000 f9d7 	bl	80152d8 <memmove>
 8014f2a:	2000      	movs	r0, #0
 8014f2c:	68a3      	ldr	r3, [r4, #8]
 8014f2e:	1b9b      	subs	r3, r3, r6
 8014f30:	60a3      	str	r3, [r4, #8]
 8014f32:	6823      	ldr	r3, [r4, #0]
 8014f34:	4433      	add	r3, r6
 8014f36:	6023      	str	r3, [r4, #0]
 8014f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f3c:	462a      	mov	r2, r5
 8014f3e:	f000 fa30 	bl	80153a2 <_realloc_r>
 8014f42:	4606      	mov	r6, r0
 8014f44:	2800      	cmp	r0, #0
 8014f46:	d1e0      	bne.n	8014f0a <__ssputs_r+0x5a>
 8014f48:	4650      	mov	r0, sl
 8014f4a:	6921      	ldr	r1, [r4, #16]
 8014f4c:	f7ff fb3c 	bl	80145c8 <_free_r>
 8014f50:	230c      	movs	r3, #12
 8014f52:	f8ca 3000 	str.w	r3, [sl]
 8014f56:	89a3      	ldrh	r3, [r4, #12]
 8014f58:	f04f 30ff 	mov.w	r0, #4294967295
 8014f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f60:	81a3      	strh	r3, [r4, #12]
 8014f62:	e7e9      	b.n	8014f38 <__ssputs_r+0x88>

08014f64 <_svfiprintf_r>:
 8014f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f68:	4698      	mov	r8, r3
 8014f6a:	898b      	ldrh	r3, [r1, #12]
 8014f6c:	4607      	mov	r7, r0
 8014f6e:	061b      	lsls	r3, r3, #24
 8014f70:	460d      	mov	r5, r1
 8014f72:	4614      	mov	r4, r2
 8014f74:	b09d      	sub	sp, #116	; 0x74
 8014f76:	d50e      	bpl.n	8014f96 <_svfiprintf_r+0x32>
 8014f78:	690b      	ldr	r3, [r1, #16]
 8014f7a:	b963      	cbnz	r3, 8014f96 <_svfiprintf_r+0x32>
 8014f7c:	2140      	movs	r1, #64	; 0x40
 8014f7e:	f7ff fb93 	bl	80146a8 <_malloc_r>
 8014f82:	6028      	str	r0, [r5, #0]
 8014f84:	6128      	str	r0, [r5, #16]
 8014f86:	b920      	cbnz	r0, 8014f92 <_svfiprintf_r+0x2e>
 8014f88:	230c      	movs	r3, #12
 8014f8a:	603b      	str	r3, [r7, #0]
 8014f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8014f90:	e0d0      	b.n	8015134 <_svfiprintf_r+0x1d0>
 8014f92:	2340      	movs	r3, #64	; 0x40
 8014f94:	616b      	str	r3, [r5, #20]
 8014f96:	2300      	movs	r3, #0
 8014f98:	9309      	str	r3, [sp, #36]	; 0x24
 8014f9a:	2320      	movs	r3, #32
 8014f9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014fa0:	2330      	movs	r3, #48	; 0x30
 8014fa2:	f04f 0901 	mov.w	r9, #1
 8014fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8014faa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 801514c <_svfiprintf_r+0x1e8>
 8014fae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014fb2:	4623      	mov	r3, r4
 8014fb4:	469a      	mov	sl, r3
 8014fb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014fba:	b10a      	cbz	r2, 8014fc0 <_svfiprintf_r+0x5c>
 8014fbc:	2a25      	cmp	r2, #37	; 0x25
 8014fbe:	d1f9      	bne.n	8014fb4 <_svfiprintf_r+0x50>
 8014fc0:	ebba 0b04 	subs.w	fp, sl, r4
 8014fc4:	d00b      	beq.n	8014fde <_svfiprintf_r+0x7a>
 8014fc6:	465b      	mov	r3, fp
 8014fc8:	4622      	mov	r2, r4
 8014fca:	4629      	mov	r1, r5
 8014fcc:	4638      	mov	r0, r7
 8014fce:	f7ff ff6f 	bl	8014eb0 <__ssputs_r>
 8014fd2:	3001      	adds	r0, #1
 8014fd4:	f000 80a9 	beq.w	801512a <_svfiprintf_r+0x1c6>
 8014fd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014fda:	445a      	add	r2, fp
 8014fdc:	9209      	str	r2, [sp, #36]	; 0x24
 8014fde:	f89a 3000 	ldrb.w	r3, [sl]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	f000 80a1 	beq.w	801512a <_svfiprintf_r+0x1c6>
 8014fe8:	2300      	movs	r3, #0
 8014fea:	f04f 32ff 	mov.w	r2, #4294967295
 8014fee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014ff2:	f10a 0a01 	add.w	sl, sl, #1
 8014ff6:	9304      	str	r3, [sp, #16]
 8014ff8:	9307      	str	r3, [sp, #28]
 8014ffa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014ffe:	931a      	str	r3, [sp, #104]	; 0x68
 8015000:	4654      	mov	r4, sl
 8015002:	2205      	movs	r2, #5
 8015004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015008:	4850      	ldr	r0, [pc, #320]	; (801514c <_svfiprintf_r+0x1e8>)
 801500a:	f7fe fc41 	bl	8013890 <memchr>
 801500e:	9a04      	ldr	r2, [sp, #16]
 8015010:	b9d8      	cbnz	r0, 801504a <_svfiprintf_r+0xe6>
 8015012:	06d0      	lsls	r0, r2, #27
 8015014:	bf44      	itt	mi
 8015016:	2320      	movmi	r3, #32
 8015018:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801501c:	0711      	lsls	r1, r2, #28
 801501e:	bf44      	itt	mi
 8015020:	232b      	movmi	r3, #43	; 0x2b
 8015022:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015026:	f89a 3000 	ldrb.w	r3, [sl]
 801502a:	2b2a      	cmp	r3, #42	; 0x2a
 801502c:	d015      	beq.n	801505a <_svfiprintf_r+0xf6>
 801502e:	4654      	mov	r4, sl
 8015030:	2000      	movs	r0, #0
 8015032:	f04f 0c0a 	mov.w	ip, #10
 8015036:	9a07      	ldr	r2, [sp, #28]
 8015038:	4621      	mov	r1, r4
 801503a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801503e:	3b30      	subs	r3, #48	; 0x30
 8015040:	2b09      	cmp	r3, #9
 8015042:	d94d      	bls.n	80150e0 <_svfiprintf_r+0x17c>
 8015044:	b1b0      	cbz	r0, 8015074 <_svfiprintf_r+0x110>
 8015046:	9207      	str	r2, [sp, #28]
 8015048:	e014      	b.n	8015074 <_svfiprintf_r+0x110>
 801504a:	eba0 0308 	sub.w	r3, r0, r8
 801504e:	fa09 f303 	lsl.w	r3, r9, r3
 8015052:	4313      	orrs	r3, r2
 8015054:	46a2      	mov	sl, r4
 8015056:	9304      	str	r3, [sp, #16]
 8015058:	e7d2      	b.n	8015000 <_svfiprintf_r+0x9c>
 801505a:	9b03      	ldr	r3, [sp, #12]
 801505c:	1d19      	adds	r1, r3, #4
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	9103      	str	r1, [sp, #12]
 8015062:	2b00      	cmp	r3, #0
 8015064:	bfbb      	ittet	lt
 8015066:	425b      	neglt	r3, r3
 8015068:	f042 0202 	orrlt.w	r2, r2, #2
 801506c:	9307      	strge	r3, [sp, #28]
 801506e:	9307      	strlt	r3, [sp, #28]
 8015070:	bfb8      	it	lt
 8015072:	9204      	strlt	r2, [sp, #16]
 8015074:	7823      	ldrb	r3, [r4, #0]
 8015076:	2b2e      	cmp	r3, #46	; 0x2e
 8015078:	d10c      	bne.n	8015094 <_svfiprintf_r+0x130>
 801507a:	7863      	ldrb	r3, [r4, #1]
 801507c:	2b2a      	cmp	r3, #42	; 0x2a
 801507e:	d134      	bne.n	80150ea <_svfiprintf_r+0x186>
 8015080:	9b03      	ldr	r3, [sp, #12]
 8015082:	3402      	adds	r4, #2
 8015084:	1d1a      	adds	r2, r3, #4
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	9203      	str	r2, [sp, #12]
 801508a:	2b00      	cmp	r3, #0
 801508c:	bfb8      	it	lt
 801508e:	f04f 33ff 	movlt.w	r3, #4294967295
 8015092:	9305      	str	r3, [sp, #20]
 8015094:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8015150 <_svfiprintf_r+0x1ec>
 8015098:	2203      	movs	r2, #3
 801509a:	4650      	mov	r0, sl
 801509c:	7821      	ldrb	r1, [r4, #0]
 801509e:	f7fe fbf7 	bl	8013890 <memchr>
 80150a2:	b138      	cbz	r0, 80150b4 <_svfiprintf_r+0x150>
 80150a4:	2240      	movs	r2, #64	; 0x40
 80150a6:	9b04      	ldr	r3, [sp, #16]
 80150a8:	eba0 000a 	sub.w	r0, r0, sl
 80150ac:	4082      	lsls	r2, r0
 80150ae:	4313      	orrs	r3, r2
 80150b0:	3401      	adds	r4, #1
 80150b2:	9304      	str	r3, [sp, #16]
 80150b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150b8:	2206      	movs	r2, #6
 80150ba:	4826      	ldr	r0, [pc, #152]	; (8015154 <_svfiprintf_r+0x1f0>)
 80150bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80150c0:	f7fe fbe6 	bl	8013890 <memchr>
 80150c4:	2800      	cmp	r0, #0
 80150c6:	d038      	beq.n	801513a <_svfiprintf_r+0x1d6>
 80150c8:	4b23      	ldr	r3, [pc, #140]	; (8015158 <_svfiprintf_r+0x1f4>)
 80150ca:	bb1b      	cbnz	r3, 8015114 <_svfiprintf_r+0x1b0>
 80150cc:	9b03      	ldr	r3, [sp, #12]
 80150ce:	3307      	adds	r3, #7
 80150d0:	f023 0307 	bic.w	r3, r3, #7
 80150d4:	3308      	adds	r3, #8
 80150d6:	9303      	str	r3, [sp, #12]
 80150d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150da:	4433      	add	r3, r6
 80150dc:	9309      	str	r3, [sp, #36]	; 0x24
 80150de:	e768      	b.n	8014fb2 <_svfiprintf_r+0x4e>
 80150e0:	460c      	mov	r4, r1
 80150e2:	2001      	movs	r0, #1
 80150e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80150e8:	e7a6      	b.n	8015038 <_svfiprintf_r+0xd4>
 80150ea:	2300      	movs	r3, #0
 80150ec:	f04f 0c0a 	mov.w	ip, #10
 80150f0:	4619      	mov	r1, r3
 80150f2:	3401      	adds	r4, #1
 80150f4:	9305      	str	r3, [sp, #20]
 80150f6:	4620      	mov	r0, r4
 80150f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80150fc:	3a30      	subs	r2, #48	; 0x30
 80150fe:	2a09      	cmp	r2, #9
 8015100:	d903      	bls.n	801510a <_svfiprintf_r+0x1a6>
 8015102:	2b00      	cmp	r3, #0
 8015104:	d0c6      	beq.n	8015094 <_svfiprintf_r+0x130>
 8015106:	9105      	str	r1, [sp, #20]
 8015108:	e7c4      	b.n	8015094 <_svfiprintf_r+0x130>
 801510a:	4604      	mov	r4, r0
 801510c:	2301      	movs	r3, #1
 801510e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015112:	e7f0      	b.n	80150f6 <_svfiprintf_r+0x192>
 8015114:	ab03      	add	r3, sp, #12
 8015116:	9300      	str	r3, [sp, #0]
 8015118:	462a      	mov	r2, r5
 801511a:	4638      	mov	r0, r7
 801511c:	4b0f      	ldr	r3, [pc, #60]	; (801515c <_svfiprintf_r+0x1f8>)
 801511e:	a904      	add	r1, sp, #16
 8015120:	f7fd fe06 	bl	8012d30 <_printf_float>
 8015124:	1c42      	adds	r2, r0, #1
 8015126:	4606      	mov	r6, r0
 8015128:	d1d6      	bne.n	80150d8 <_svfiprintf_r+0x174>
 801512a:	89ab      	ldrh	r3, [r5, #12]
 801512c:	065b      	lsls	r3, r3, #25
 801512e:	f53f af2d 	bmi.w	8014f8c <_svfiprintf_r+0x28>
 8015132:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015134:	b01d      	add	sp, #116	; 0x74
 8015136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801513a:	ab03      	add	r3, sp, #12
 801513c:	9300      	str	r3, [sp, #0]
 801513e:	462a      	mov	r2, r5
 8015140:	4638      	mov	r0, r7
 8015142:	4b06      	ldr	r3, [pc, #24]	; (801515c <_svfiprintf_r+0x1f8>)
 8015144:	a904      	add	r1, sp, #16
 8015146:	f7fe f893 	bl	8013270 <_printf_i>
 801514a:	e7eb      	b.n	8015124 <_svfiprintf_r+0x1c0>
 801514c:	080161a4 	.word	0x080161a4
 8015150:	080161aa 	.word	0x080161aa
 8015154:	080161ae 	.word	0x080161ae
 8015158:	08012d31 	.word	0x08012d31
 801515c:	08014eb1 	.word	0x08014eb1

08015160 <__sflush_r>:
 8015160:	898a      	ldrh	r2, [r1, #12]
 8015162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015164:	4605      	mov	r5, r0
 8015166:	0710      	lsls	r0, r2, #28
 8015168:	460c      	mov	r4, r1
 801516a:	d457      	bmi.n	801521c <__sflush_r+0xbc>
 801516c:	684b      	ldr	r3, [r1, #4]
 801516e:	2b00      	cmp	r3, #0
 8015170:	dc04      	bgt.n	801517c <__sflush_r+0x1c>
 8015172:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015174:	2b00      	cmp	r3, #0
 8015176:	dc01      	bgt.n	801517c <__sflush_r+0x1c>
 8015178:	2000      	movs	r0, #0
 801517a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801517c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801517e:	2e00      	cmp	r6, #0
 8015180:	d0fa      	beq.n	8015178 <__sflush_r+0x18>
 8015182:	2300      	movs	r3, #0
 8015184:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015188:	682f      	ldr	r7, [r5, #0]
 801518a:	6a21      	ldr	r1, [r4, #32]
 801518c:	602b      	str	r3, [r5, #0]
 801518e:	d032      	beq.n	80151f6 <__sflush_r+0x96>
 8015190:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015192:	89a3      	ldrh	r3, [r4, #12]
 8015194:	075a      	lsls	r2, r3, #29
 8015196:	d505      	bpl.n	80151a4 <__sflush_r+0x44>
 8015198:	6863      	ldr	r3, [r4, #4]
 801519a:	1ac0      	subs	r0, r0, r3
 801519c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801519e:	b10b      	cbz	r3, 80151a4 <__sflush_r+0x44>
 80151a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80151a2:	1ac0      	subs	r0, r0, r3
 80151a4:	2300      	movs	r3, #0
 80151a6:	4602      	mov	r2, r0
 80151a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80151aa:	4628      	mov	r0, r5
 80151ac:	6a21      	ldr	r1, [r4, #32]
 80151ae:	47b0      	blx	r6
 80151b0:	1c43      	adds	r3, r0, #1
 80151b2:	89a3      	ldrh	r3, [r4, #12]
 80151b4:	d106      	bne.n	80151c4 <__sflush_r+0x64>
 80151b6:	6829      	ldr	r1, [r5, #0]
 80151b8:	291d      	cmp	r1, #29
 80151ba:	d82b      	bhi.n	8015214 <__sflush_r+0xb4>
 80151bc:	4a28      	ldr	r2, [pc, #160]	; (8015260 <__sflush_r+0x100>)
 80151be:	410a      	asrs	r2, r1
 80151c0:	07d6      	lsls	r6, r2, #31
 80151c2:	d427      	bmi.n	8015214 <__sflush_r+0xb4>
 80151c4:	2200      	movs	r2, #0
 80151c6:	6062      	str	r2, [r4, #4]
 80151c8:	6922      	ldr	r2, [r4, #16]
 80151ca:	04d9      	lsls	r1, r3, #19
 80151cc:	6022      	str	r2, [r4, #0]
 80151ce:	d504      	bpl.n	80151da <__sflush_r+0x7a>
 80151d0:	1c42      	adds	r2, r0, #1
 80151d2:	d101      	bne.n	80151d8 <__sflush_r+0x78>
 80151d4:	682b      	ldr	r3, [r5, #0]
 80151d6:	b903      	cbnz	r3, 80151da <__sflush_r+0x7a>
 80151d8:	6560      	str	r0, [r4, #84]	; 0x54
 80151da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80151dc:	602f      	str	r7, [r5, #0]
 80151de:	2900      	cmp	r1, #0
 80151e0:	d0ca      	beq.n	8015178 <__sflush_r+0x18>
 80151e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80151e6:	4299      	cmp	r1, r3
 80151e8:	d002      	beq.n	80151f0 <__sflush_r+0x90>
 80151ea:	4628      	mov	r0, r5
 80151ec:	f7ff f9ec 	bl	80145c8 <_free_r>
 80151f0:	2000      	movs	r0, #0
 80151f2:	6360      	str	r0, [r4, #52]	; 0x34
 80151f4:	e7c1      	b.n	801517a <__sflush_r+0x1a>
 80151f6:	2301      	movs	r3, #1
 80151f8:	4628      	mov	r0, r5
 80151fa:	47b0      	blx	r6
 80151fc:	1c41      	adds	r1, r0, #1
 80151fe:	d1c8      	bne.n	8015192 <__sflush_r+0x32>
 8015200:	682b      	ldr	r3, [r5, #0]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d0c5      	beq.n	8015192 <__sflush_r+0x32>
 8015206:	2b1d      	cmp	r3, #29
 8015208:	d001      	beq.n	801520e <__sflush_r+0xae>
 801520a:	2b16      	cmp	r3, #22
 801520c:	d101      	bne.n	8015212 <__sflush_r+0xb2>
 801520e:	602f      	str	r7, [r5, #0]
 8015210:	e7b2      	b.n	8015178 <__sflush_r+0x18>
 8015212:	89a3      	ldrh	r3, [r4, #12]
 8015214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015218:	81a3      	strh	r3, [r4, #12]
 801521a:	e7ae      	b.n	801517a <__sflush_r+0x1a>
 801521c:	690f      	ldr	r7, [r1, #16]
 801521e:	2f00      	cmp	r7, #0
 8015220:	d0aa      	beq.n	8015178 <__sflush_r+0x18>
 8015222:	0793      	lsls	r3, r2, #30
 8015224:	bf18      	it	ne
 8015226:	2300      	movne	r3, #0
 8015228:	680e      	ldr	r6, [r1, #0]
 801522a:	bf08      	it	eq
 801522c:	694b      	ldreq	r3, [r1, #20]
 801522e:	1bf6      	subs	r6, r6, r7
 8015230:	600f      	str	r7, [r1, #0]
 8015232:	608b      	str	r3, [r1, #8]
 8015234:	2e00      	cmp	r6, #0
 8015236:	dd9f      	ble.n	8015178 <__sflush_r+0x18>
 8015238:	4633      	mov	r3, r6
 801523a:	463a      	mov	r2, r7
 801523c:	4628      	mov	r0, r5
 801523e:	6a21      	ldr	r1, [r4, #32]
 8015240:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8015244:	47e0      	blx	ip
 8015246:	2800      	cmp	r0, #0
 8015248:	dc06      	bgt.n	8015258 <__sflush_r+0xf8>
 801524a:	89a3      	ldrh	r3, [r4, #12]
 801524c:	f04f 30ff 	mov.w	r0, #4294967295
 8015250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015254:	81a3      	strh	r3, [r4, #12]
 8015256:	e790      	b.n	801517a <__sflush_r+0x1a>
 8015258:	4407      	add	r7, r0
 801525a:	1a36      	subs	r6, r6, r0
 801525c:	e7ea      	b.n	8015234 <__sflush_r+0xd4>
 801525e:	bf00      	nop
 8015260:	dfbffffe 	.word	0xdfbffffe

08015264 <_fflush_r>:
 8015264:	b538      	push	{r3, r4, r5, lr}
 8015266:	690b      	ldr	r3, [r1, #16]
 8015268:	4605      	mov	r5, r0
 801526a:	460c      	mov	r4, r1
 801526c:	b913      	cbnz	r3, 8015274 <_fflush_r+0x10>
 801526e:	2500      	movs	r5, #0
 8015270:	4628      	mov	r0, r5
 8015272:	bd38      	pop	{r3, r4, r5, pc}
 8015274:	b118      	cbz	r0, 801527e <_fflush_r+0x1a>
 8015276:	6a03      	ldr	r3, [r0, #32]
 8015278:	b90b      	cbnz	r3, 801527e <_fflush_r+0x1a>
 801527a:	f7fe f995 	bl	80135a8 <__sinit>
 801527e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015282:	2b00      	cmp	r3, #0
 8015284:	d0f3      	beq.n	801526e <_fflush_r+0xa>
 8015286:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015288:	07d0      	lsls	r0, r2, #31
 801528a:	d404      	bmi.n	8015296 <_fflush_r+0x32>
 801528c:	0599      	lsls	r1, r3, #22
 801528e:	d402      	bmi.n	8015296 <_fflush_r+0x32>
 8015290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015292:	f7fe fafb 	bl	801388c <__retarget_lock_acquire_recursive>
 8015296:	4628      	mov	r0, r5
 8015298:	4621      	mov	r1, r4
 801529a:	f7ff ff61 	bl	8015160 <__sflush_r>
 801529e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80152a0:	4605      	mov	r5, r0
 80152a2:	07da      	lsls	r2, r3, #31
 80152a4:	d4e4      	bmi.n	8015270 <_fflush_r+0xc>
 80152a6:	89a3      	ldrh	r3, [r4, #12]
 80152a8:	059b      	lsls	r3, r3, #22
 80152aa:	d4e1      	bmi.n	8015270 <_fflush_r+0xc>
 80152ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80152ae:	f7fe faee 	bl	801388e <__retarget_lock_release_recursive>
 80152b2:	e7dd      	b.n	8015270 <_fflush_r+0xc>

080152b4 <fiprintf>:
 80152b4:	b40e      	push	{r1, r2, r3}
 80152b6:	b503      	push	{r0, r1, lr}
 80152b8:	4601      	mov	r1, r0
 80152ba:	ab03      	add	r3, sp, #12
 80152bc:	4805      	ldr	r0, [pc, #20]	; (80152d4 <fiprintf+0x20>)
 80152be:	f853 2b04 	ldr.w	r2, [r3], #4
 80152c2:	6800      	ldr	r0, [r0, #0]
 80152c4:	9301      	str	r3, [sp, #4]
 80152c6:	f000 f8cf 	bl	8015468 <_vfiprintf_r>
 80152ca:	b002      	add	sp, #8
 80152cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80152d0:	b003      	add	sp, #12
 80152d2:	4770      	bx	lr
 80152d4:	20000868 	.word	0x20000868

080152d8 <memmove>:
 80152d8:	4288      	cmp	r0, r1
 80152da:	b510      	push	{r4, lr}
 80152dc:	eb01 0402 	add.w	r4, r1, r2
 80152e0:	d902      	bls.n	80152e8 <memmove+0x10>
 80152e2:	4284      	cmp	r4, r0
 80152e4:	4623      	mov	r3, r4
 80152e6:	d807      	bhi.n	80152f8 <memmove+0x20>
 80152e8:	1e43      	subs	r3, r0, #1
 80152ea:	42a1      	cmp	r1, r4
 80152ec:	d008      	beq.n	8015300 <memmove+0x28>
 80152ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80152f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80152f6:	e7f8      	b.n	80152ea <memmove+0x12>
 80152f8:	4601      	mov	r1, r0
 80152fa:	4402      	add	r2, r0
 80152fc:	428a      	cmp	r2, r1
 80152fe:	d100      	bne.n	8015302 <memmove+0x2a>
 8015300:	bd10      	pop	{r4, pc}
 8015302:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015306:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801530a:	e7f7      	b.n	80152fc <memmove+0x24>

0801530c <_sbrk_r>:
 801530c:	b538      	push	{r3, r4, r5, lr}
 801530e:	2300      	movs	r3, #0
 8015310:	4d05      	ldr	r5, [pc, #20]	; (8015328 <_sbrk_r+0x1c>)
 8015312:	4604      	mov	r4, r0
 8015314:	4608      	mov	r0, r1
 8015316:	602b      	str	r3, [r5, #0]
 8015318:	f7f0 fb44 	bl	80059a4 <_sbrk>
 801531c:	1c43      	adds	r3, r0, #1
 801531e:	d102      	bne.n	8015326 <_sbrk_r+0x1a>
 8015320:	682b      	ldr	r3, [r5, #0]
 8015322:	b103      	cbz	r3, 8015326 <_sbrk_r+0x1a>
 8015324:	6023      	str	r3, [r4, #0]
 8015326:	bd38      	pop	{r3, r4, r5, pc}
 8015328:	20003bc0 	.word	0x20003bc0

0801532c <memcpy>:
 801532c:	440a      	add	r2, r1
 801532e:	4291      	cmp	r1, r2
 8015330:	f100 33ff 	add.w	r3, r0, #4294967295
 8015334:	d100      	bne.n	8015338 <memcpy+0xc>
 8015336:	4770      	bx	lr
 8015338:	b510      	push	{r4, lr}
 801533a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801533e:	4291      	cmp	r1, r2
 8015340:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015344:	d1f9      	bne.n	801533a <memcpy+0xe>
 8015346:	bd10      	pop	{r4, pc}

08015348 <abort>:
 8015348:	2006      	movs	r0, #6
 801534a:	b508      	push	{r3, lr}
 801534c:	f000 fa64 	bl	8015818 <raise>
 8015350:	2001      	movs	r0, #1
 8015352:	f7f0 fab4 	bl	80058be <_exit>

08015356 <_calloc_r>:
 8015356:	b570      	push	{r4, r5, r6, lr}
 8015358:	fba1 5402 	umull	r5, r4, r1, r2
 801535c:	b934      	cbnz	r4, 801536c <_calloc_r+0x16>
 801535e:	4629      	mov	r1, r5
 8015360:	f7ff f9a2 	bl	80146a8 <_malloc_r>
 8015364:	4606      	mov	r6, r0
 8015366:	b928      	cbnz	r0, 8015374 <_calloc_r+0x1e>
 8015368:	4630      	mov	r0, r6
 801536a:	bd70      	pop	{r4, r5, r6, pc}
 801536c:	220c      	movs	r2, #12
 801536e:	2600      	movs	r6, #0
 8015370:	6002      	str	r2, [r0, #0]
 8015372:	e7f9      	b.n	8015368 <_calloc_r+0x12>
 8015374:	462a      	mov	r2, r5
 8015376:	4621      	mov	r1, r4
 8015378:	f7fe f9af 	bl	80136da <memset>
 801537c:	e7f4      	b.n	8015368 <_calloc_r+0x12>

0801537e <__ascii_mbtowc>:
 801537e:	b082      	sub	sp, #8
 8015380:	b901      	cbnz	r1, 8015384 <__ascii_mbtowc+0x6>
 8015382:	a901      	add	r1, sp, #4
 8015384:	b142      	cbz	r2, 8015398 <__ascii_mbtowc+0x1a>
 8015386:	b14b      	cbz	r3, 801539c <__ascii_mbtowc+0x1e>
 8015388:	7813      	ldrb	r3, [r2, #0]
 801538a:	600b      	str	r3, [r1, #0]
 801538c:	7812      	ldrb	r2, [r2, #0]
 801538e:	1e10      	subs	r0, r2, #0
 8015390:	bf18      	it	ne
 8015392:	2001      	movne	r0, #1
 8015394:	b002      	add	sp, #8
 8015396:	4770      	bx	lr
 8015398:	4610      	mov	r0, r2
 801539a:	e7fb      	b.n	8015394 <__ascii_mbtowc+0x16>
 801539c:	f06f 0001 	mvn.w	r0, #1
 80153a0:	e7f8      	b.n	8015394 <__ascii_mbtowc+0x16>

080153a2 <_realloc_r>:
 80153a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153a6:	4680      	mov	r8, r0
 80153a8:	4614      	mov	r4, r2
 80153aa:	460e      	mov	r6, r1
 80153ac:	b921      	cbnz	r1, 80153b8 <_realloc_r+0x16>
 80153ae:	4611      	mov	r1, r2
 80153b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80153b4:	f7ff b978 	b.w	80146a8 <_malloc_r>
 80153b8:	b92a      	cbnz	r2, 80153c6 <_realloc_r+0x24>
 80153ba:	f7ff f905 	bl	80145c8 <_free_r>
 80153be:	4625      	mov	r5, r4
 80153c0:	4628      	mov	r0, r5
 80153c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153c6:	f000 fa43 	bl	8015850 <_malloc_usable_size_r>
 80153ca:	4284      	cmp	r4, r0
 80153cc:	4607      	mov	r7, r0
 80153ce:	d802      	bhi.n	80153d6 <_realloc_r+0x34>
 80153d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80153d4:	d812      	bhi.n	80153fc <_realloc_r+0x5a>
 80153d6:	4621      	mov	r1, r4
 80153d8:	4640      	mov	r0, r8
 80153da:	f7ff f965 	bl	80146a8 <_malloc_r>
 80153de:	4605      	mov	r5, r0
 80153e0:	2800      	cmp	r0, #0
 80153e2:	d0ed      	beq.n	80153c0 <_realloc_r+0x1e>
 80153e4:	42bc      	cmp	r4, r7
 80153e6:	4622      	mov	r2, r4
 80153e8:	4631      	mov	r1, r6
 80153ea:	bf28      	it	cs
 80153ec:	463a      	movcs	r2, r7
 80153ee:	f7ff ff9d 	bl	801532c <memcpy>
 80153f2:	4631      	mov	r1, r6
 80153f4:	4640      	mov	r0, r8
 80153f6:	f7ff f8e7 	bl	80145c8 <_free_r>
 80153fa:	e7e1      	b.n	80153c0 <_realloc_r+0x1e>
 80153fc:	4635      	mov	r5, r6
 80153fe:	e7df      	b.n	80153c0 <_realloc_r+0x1e>

08015400 <__ascii_wctomb>:
 8015400:	4603      	mov	r3, r0
 8015402:	4608      	mov	r0, r1
 8015404:	b141      	cbz	r1, 8015418 <__ascii_wctomb+0x18>
 8015406:	2aff      	cmp	r2, #255	; 0xff
 8015408:	d904      	bls.n	8015414 <__ascii_wctomb+0x14>
 801540a:	228a      	movs	r2, #138	; 0x8a
 801540c:	f04f 30ff 	mov.w	r0, #4294967295
 8015410:	601a      	str	r2, [r3, #0]
 8015412:	4770      	bx	lr
 8015414:	2001      	movs	r0, #1
 8015416:	700a      	strb	r2, [r1, #0]
 8015418:	4770      	bx	lr

0801541a <__sfputc_r>:
 801541a:	6893      	ldr	r3, [r2, #8]
 801541c:	b410      	push	{r4}
 801541e:	3b01      	subs	r3, #1
 8015420:	2b00      	cmp	r3, #0
 8015422:	6093      	str	r3, [r2, #8]
 8015424:	da07      	bge.n	8015436 <__sfputc_r+0x1c>
 8015426:	6994      	ldr	r4, [r2, #24]
 8015428:	42a3      	cmp	r3, r4
 801542a:	db01      	blt.n	8015430 <__sfputc_r+0x16>
 801542c:	290a      	cmp	r1, #10
 801542e:	d102      	bne.n	8015436 <__sfputc_r+0x1c>
 8015430:	bc10      	pop	{r4}
 8015432:	f000 b933 	b.w	801569c <__swbuf_r>
 8015436:	6813      	ldr	r3, [r2, #0]
 8015438:	1c58      	adds	r0, r3, #1
 801543a:	6010      	str	r0, [r2, #0]
 801543c:	7019      	strb	r1, [r3, #0]
 801543e:	4608      	mov	r0, r1
 8015440:	bc10      	pop	{r4}
 8015442:	4770      	bx	lr

08015444 <__sfputs_r>:
 8015444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015446:	4606      	mov	r6, r0
 8015448:	460f      	mov	r7, r1
 801544a:	4614      	mov	r4, r2
 801544c:	18d5      	adds	r5, r2, r3
 801544e:	42ac      	cmp	r4, r5
 8015450:	d101      	bne.n	8015456 <__sfputs_r+0x12>
 8015452:	2000      	movs	r0, #0
 8015454:	e007      	b.n	8015466 <__sfputs_r+0x22>
 8015456:	463a      	mov	r2, r7
 8015458:	4630      	mov	r0, r6
 801545a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801545e:	f7ff ffdc 	bl	801541a <__sfputc_r>
 8015462:	1c43      	adds	r3, r0, #1
 8015464:	d1f3      	bne.n	801544e <__sfputs_r+0xa>
 8015466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015468 <_vfiprintf_r>:
 8015468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801546c:	460d      	mov	r5, r1
 801546e:	4614      	mov	r4, r2
 8015470:	4698      	mov	r8, r3
 8015472:	4606      	mov	r6, r0
 8015474:	b09d      	sub	sp, #116	; 0x74
 8015476:	b118      	cbz	r0, 8015480 <_vfiprintf_r+0x18>
 8015478:	6a03      	ldr	r3, [r0, #32]
 801547a:	b90b      	cbnz	r3, 8015480 <_vfiprintf_r+0x18>
 801547c:	f7fe f894 	bl	80135a8 <__sinit>
 8015480:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015482:	07d9      	lsls	r1, r3, #31
 8015484:	d405      	bmi.n	8015492 <_vfiprintf_r+0x2a>
 8015486:	89ab      	ldrh	r3, [r5, #12]
 8015488:	059a      	lsls	r2, r3, #22
 801548a:	d402      	bmi.n	8015492 <_vfiprintf_r+0x2a>
 801548c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801548e:	f7fe f9fd 	bl	801388c <__retarget_lock_acquire_recursive>
 8015492:	89ab      	ldrh	r3, [r5, #12]
 8015494:	071b      	lsls	r3, r3, #28
 8015496:	d501      	bpl.n	801549c <_vfiprintf_r+0x34>
 8015498:	692b      	ldr	r3, [r5, #16]
 801549a:	b99b      	cbnz	r3, 80154c4 <_vfiprintf_r+0x5c>
 801549c:	4629      	mov	r1, r5
 801549e:	4630      	mov	r0, r6
 80154a0:	f000 f93a 	bl	8015718 <__swsetup_r>
 80154a4:	b170      	cbz	r0, 80154c4 <_vfiprintf_r+0x5c>
 80154a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80154a8:	07dc      	lsls	r4, r3, #31
 80154aa:	d504      	bpl.n	80154b6 <_vfiprintf_r+0x4e>
 80154ac:	f04f 30ff 	mov.w	r0, #4294967295
 80154b0:	b01d      	add	sp, #116	; 0x74
 80154b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154b6:	89ab      	ldrh	r3, [r5, #12]
 80154b8:	0598      	lsls	r0, r3, #22
 80154ba:	d4f7      	bmi.n	80154ac <_vfiprintf_r+0x44>
 80154bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80154be:	f7fe f9e6 	bl	801388e <__retarget_lock_release_recursive>
 80154c2:	e7f3      	b.n	80154ac <_vfiprintf_r+0x44>
 80154c4:	2300      	movs	r3, #0
 80154c6:	9309      	str	r3, [sp, #36]	; 0x24
 80154c8:	2320      	movs	r3, #32
 80154ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80154ce:	2330      	movs	r3, #48	; 0x30
 80154d0:	f04f 0901 	mov.w	r9, #1
 80154d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80154d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8015688 <_vfiprintf_r+0x220>
 80154dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80154e0:	4623      	mov	r3, r4
 80154e2:	469a      	mov	sl, r3
 80154e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80154e8:	b10a      	cbz	r2, 80154ee <_vfiprintf_r+0x86>
 80154ea:	2a25      	cmp	r2, #37	; 0x25
 80154ec:	d1f9      	bne.n	80154e2 <_vfiprintf_r+0x7a>
 80154ee:	ebba 0b04 	subs.w	fp, sl, r4
 80154f2:	d00b      	beq.n	801550c <_vfiprintf_r+0xa4>
 80154f4:	465b      	mov	r3, fp
 80154f6:	4622      	mov	r2, r4
 80154f8:	4629      	mov	r1, r5
 80154fa:	4630      	mov	r0, r6
 80154fc:	f7ff ffa2 	bl	8015444 <__sfputs_r>
 8015500:	3001      	adds	r0, #1
 8015502:	f000 80a9 	beq.w	8015658 <_vfiprintf_r+0x1f0>
 8015506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015508:	445a      	add	r2, fp
 801550a:	9209      	str	r2, [sp, #36]	; 0x24
 801550c:	f89a 3000 	ldrb.w	r3, [sl]
 8015510:	2b00      	cmp	r3, #0
 8015512:	f000 80a1 	beq.w	8015658 <_vfiprintf_r+0x1f0>
 8015516:	2300      	movs	r3, #0
 8015518:	f04f 32ff 	mov.w	r2, #4294967295
 801551c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015520:	f10a 0a01 	add.w	sl, sl, #1
 8015524:	9304      	str	r3, [sp, #16]
 8015526:	9307      	str	r3, [sp, #28]
 8015528:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801552c:	931a      	str	r3, [sp, #104]	; 0x68
 801552e:	4654      	mov	r4, sl
 8015530:	2205      	movs	r2, #5
 8015532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015536:	4854      	ldr	r0, [pc, #336]	; (8015688 <_vfiprintf_r+0x220>)
 8015538:	f7fe f9aa 	bl	8013890 <memchr>
 801553c:	9a04      	ldr	r2, [sp, #16]
 801553e:	b9d8      	cbnz	r0, 8015578 <_vfiprintf_r+0x110>
 8015540:	06d1      	lsls	r1, r2, #27
 8015542:	bf44      	itt	mi
 8015544:	2320      	movmi	r3, #32
 8015546:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801554a:	0713      	lsls	r3, r2, #28
 801554c:	bf44      	itt	mi
 801554e:	232b      	movmi	r3, #43	; 0x2b
 8015550:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015554:	f89a 3000 	ldrb.w	r3, [sl]
 8015558:	2b2a      	cmp	r3, #42	; 0x2a
 801555a:	d015      	beq.n	8015588 <_vfiprintf_r+0x120>
 801555c:	4654      	mov	r4, sl
 801555e:	2000      	movs	r0, #0
 8015560:	f04f 0c0a 	mov.w	ip, #10
 8015564:	9a07      	ldr	r2, [sp, #28]
 8015566:	4621      	mov	r1, r4
 8015568:	f811 3b01 	ldrb.w	r3, [r1], #1
 801556c:	3b30      	subs	r3, #48	; 0x30
 801556e:	2b09      	cmp	r3, #9
 8015570:	d94d      	bls.n	801560e <_vfiprintf_r+0x1a6>
 8015572:	b1b0      	cbz	r0, 80155a2 <_vfiprintf_r+0x13a>
 8015574:	9207      	str	r2, [sp, #28]
 8015576:	e014      	b.n	80155a2 <_vfiprintf_r+0x13a>
 8015578:	eba0 0308 	sub.w	r3, r0, r8
 801557c:	fa09 f303 	lsl.w	r3, r9, r3
 8015580:	4313      	orrs	r3, r2
 8015582:	46a2      	mov	sl, r4
 8015584:	9304      	str	r3, [sp, #16]
 8015586:	e7d2      	b.n	801552e <_vfiprintf_r+0xc6>
 8015588:	9b03      	ldr	r3, [sp, #12]
 801558a:	1d19      	adds	r1, r3, #4
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	9103      	str	r1, [sp, #12]
 8015590:	2b00      	cmp	r3, #0
 8015592:	bfbb      	ittet	lt
 8015594:	425b      	neglt	r3, r3
 8015596:	f042 0202 	orrlt.w	r2, r2, #2
 801559a:	9307      	strge	r3, [sp, #28]
 801559c:	9307      	strlt	r3, [sp, #28]
 801559e:	bfb8      	it	lt
 80155a0:	9204      	strlt	r2, [sp, #16]
 80155a2:	7823      	ldrb	r3, [r4, #0]
 80155a4:	2b2e      	cmp	r3, #46	; 0x2e
 80155a6:	d10c      	bne.n	80155c2 <_vfiprintf_r+0x15a>
 80155a8:	7863      	ldrb	r3, [r4, #1]
 80155aa:	2b2a      	cmp	r3, #42	; 0x2a
 80155ac:	d134      	bne.n	8015618 <_vfiprintf_r+0x1b0>
 80155ae:	9b03      	ldr	r3, [sp, #12]
 80155b0:	3402      	adds	r4, #2
 80155b2:	1d1a      	adds	r2, r3, #4
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	9203      	str	r2, [sp, #12]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	bfb8      	it	lt
 80155bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80155c0:	9305      	str	r3, [sp, #20]
 80155c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801568c <_vfiprintf_r+0x224>
 80155c6:	2203      	movs	r2, #3
 80155c8:	4650      	mov	r0, sl
 80155ca:	7821      	ldrb	r1, [r4, #0]
 80155cc:	f7fe f960 	bl	8013890 <memchr>
 80155d0:	b138      	cbz	r0, 80155e2 <_vfiprintf_r+0x17a>
 80155d2:	2240      	movs	r2, #64	; 0x40
 80155d4:	9b04      	ldr	r3, [sp, #16]
 80155d6:	eba0 000a 	sub.w	r0, r0, sl
 80155da:	4082      	lsls	r2, r0
 80155dc:	4313      	orrs	r3, r2
 80155de:	3401      	adds	r4, #1
 80155e0:	9304      	str	r3, [sp, #16]
 80155e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155e6:	2206      	movs	r2, #6
 80155e8:	4829      	ldr	r0, [pc, #164]	; (8015690 <_vfiprintf_r+0x228>)
 80155ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80155ee:	f7fe f94f 	bl	8013890 <memchr>
 80155f2:	2800      	cmp	r0, #0
 80155f4:	d03f      	beq.n	8015676 <_vfiprintf_r+0x20e>
 80155f6:	4b27      	ldr	r3, [pc, #156]	; (8015694 <_vfiprintf_r+0x22c>)
 80155f8:	bb1b      	cbnz	r3, 8015642 <_vfiprintf_r+0x1da>
 80155fa:	9b03      	ldr	r3, [sp, #12]
 80155fc:	3307      	adds	r3, #7
 80155fe:	f023 0307 	bic.w	r3, r3, #7
 8015602:	3308      	adds	r3, #8
 8015604:	9303      	str	r3, [sp, #12]
 8015606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015608:	443b      	add	r3, r7
 801560a:	9309      	str	r3, [sp, #36]	; 0x24
 801560c:	e768      	b.n	80154e0 <_vfiprintf_r+0x78>
 801560e:	460c      	mov	r4, r1
 8015610:	2001      	movs	r0, #1
 8015612:	fb0c 3202 	mla	r2, ip, r2, r3
 8015616:	e7a6      	b.n	8015566 <_vfiprintf_r+0xfe>
 8015618:	2300      	movs	r3, #0
 801561a:	f04f 0c0a 	mov.w	ip, #10
 801561e:	4619      	mov	r1, r3
 8015620:	3401      	adds	r4, #1
 8015622:	9305      	str	r3, [sp, #20]
 8015624:	4620      	mov	r0, r4
 8015626:	f810 2b01 	ldrb.w	r2, [r0], #1
 801562a:	3a30      	subs	r2, #48	; 0x30
 801562c:	2a09      	cmp	r2, #9
 801562e:	d903      	bls.n	8015638 <_vfiprintf_r+0x1d0>
 8015630:	2b00      	cmp	r3, #0
 8015632:	d0c6      	beq.n	80155c2 <_vfiprintf_r+0x15a>
 8015634:	9105      	str	r1, [sp, #20]
 8015636:	e7c4      	b.n	80155c2 <_vfiprintf_r+0x15a>
 8015638:	4604      	mov	r4, r0
 801563a:	2301      	movs	r3, #1
 801563c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015640:	e7f0      	b.n	8015624 <_vfiprintf_r+0x1bc>
 8015642:	ab03      	add	r3, sp, #12
 8015644:	9300      	str	r3, [sp, #0]
 8015646:	462a      	mov	r2, r5
 8015648:	4630      	mov	r0, r6
 801564a:	4b13      	ldr	r3, [pc, #76]	; (8015698 <_vfiprintf_r+0x230>)
 801564c:	a904      	add	r1, sp, #16
 801564e:	f7fd fb6f 	bl	8012d30 <_printf_float>
 8015652:	4607      	mov	r7, r0
 8015654:	1c78      	adds	r0, r7, #1
 8015656:	d1d6      	bne.n	8015606 <_vfiprintf_r+0x19e>
 8015658:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801565a:	07d9      	lsls	r1, r3, #31
 801565c:	d405      	bmi.n	801566a <_vfiprintf_r+0x202>
 801565e:	89ab      	ldrh	r3, [r5, #12]
 8015660:	059a      	lsls	r2, r3, #22
 8015662:	d402      	bmi.n	801566a <_vfiprintf_r+0x202>
 8015664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015666:	f7fe f912 	bl	801388e <__retarget_lock_release_recursive>
 801566a:	89ab      	ldrh	r3, [r5, #12]
 801566c:	065b      	lsls	r3, r3, #25
 801566e:	f53f af1d 	bmi.w	80154ac <_vfiprintf_r+0x44>
 8015672:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015674:	e71c      	b.n	80154b0 <_vfiprintf_r+0x48>
 8015676:	ab03      	add	r3, sp, #12
 8015678:	9300      	str	r3, [sp, #0]
 801567a:	462a      	mov	r2, r5
 801567c:	4630      	mov	r0, r6
 801567e:	4b06      	ldr	r3, [pc, #24]	; (8015698 <_vfiprintf_r+0x230>)
 8015680:	a904      	add	r1, sp, #16
 8015682:	f7fd fdf5 	bl	8013270 <_printf_i>
 8015686:	e7e4      	b.n	8015652 <_vfiprintf_r+0x1ea>
 8015688:	080161a4 	.word	0x080161a4
 801568c:	080161aa 	.word	0x080161aa
 8015690:	080161ae 	.word	0x080161ae
 8015694:	08012d31 	.word	0x08012d31
 8015698:	08015445 	.word	0x08015445

0801569c <__swbuf_r>:
 801569c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801569e:	460e      	mov	r6, r1
 80156a0:	4614      	mov	r4, r2
 80156a2:	4605      	mov	r5, r0
 80156a4:	b118      	cbz	r0, 80156ae <__swbuf_r+0x12>
 80156a6:	6a03      	ldr	r3, [r0, #32]
 80156a8:	b90b      	cbnz	r3, 80156ae <__swbuf_r+0x12>
 80156aa:	f7fd ff7d 	bl	80135a8 <__sinit>
 80156ae:	69a3      	ldr	r3, [r4, #24]
 80156b0:	60a3      	str	r3, [r4, #8]
 80156b2:	89a3      	ldrh	r3, [r4, #12]
 80156b4:	071a      	lsls	r2, r3, #28
 80156b6:	d525      	bpl.n	8015704 <__swbuf_r+0x68>
 80156b8:	6923      	ldr	r3, [r4, #16]
 80156ba:	b31b      	cbz	r3, 8015704 <__swbuf_r+0x68>
 80156bc:	6823      	ldr	r3, [r4, #0]
 80156be:	6922      	ldr	r2, [r4, #16]
 80156c0:	b2f6      	uxtb	r6, r6
 80156c2:	1a98      	subs	r0, r3, r2
 80156c4:	6963      	ldr	r3, [r4, #20]
 80156c6:	4637      	mov	r7, r6
 80156c8:	4283      	cmp	r3, r0
 80156ca:	dc04      	bgt.n	80156d6 <__swbuf_r+0x3a>
 80156cc:	4621      	mov	r1, r4
 80156ce:	4628      	mov	r0, r5
 80156d0:	f7ff fdc8 	bl	8015264 <_fflush_r>
 80156d4:	b9e0      	cbnz	r0, 8015710 <__swbuf_r+0x74>
 80156d6:	68a3      	ldr	r3, [r4, #8]
 80156d8:	3b01      	subs	r3, #1
 80156da:	60a3      	str	r3, [r4, #8]
 80156dc:	6823      	ldr	r3, [r4, #0]
 80156de:	1c5a      	adds	r2, r3, #1
 80156e0:	6022      	str	r2, [r4, #0]
 80156e2:	701e      	strb	r6, [r3, #0]
 80156e4:	6962      	ldr	r2, [r4, #20]
 80156e6:	1c43      	adds	r3, r0, #1
 80156e8:	429a      	cmp	r2, r3
 80156ea:	d004      	beq.n	80156f6 <__swbuf_r+0x5a>
 80156ec:	89a3      	ldrh	r3, [r4, #12]
 80156ee:	07db      	lsls	r3, r3, #31
 80156f0:	d506      	bpl.n	8015700 <__swbuf_r+0x64>
 80156f2:	2e0a      	cmp	r6, #10
 80156f4:	d104      	bne.n	8015700 <__swbuf_r+0x64>
 80156f6:	4621      	mov	r1, r4
 80156f8:	4628      	mov	r0, r5
 80156fa:	f7ff fdb3 	bl	8015264 <_fflush_r>
 80156fe:	b938      	cbnz	r0, 8015710 <__swbuf_r+0x74>
 8015700:	4638      	mov	r0, r7
 8015702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015704:	4621      	mov	r1, r4
 8015706:	4628      	mov	r0, r5
 8015708:	f000 f806 	bl	8015718 <__swsetup_r>
 801570c:	2800      	cmp	r0, #0
 801570e:	d0d5      	beq.n	80156bc <__swbuf_r+0x20>
 8015710:	f04f 37ff 	mov.w	r7, #4294967295
 8015714:	e7f4      	b.n	8015700 <__swbuf_r+0x64>
	...

08015718 <__swsetup_r>:
 8015718:	b538      	push	{r3, r4, r5, lr}
 801571a:	4b2a      	ldr	r3, [pc, #168]	; (80157c4 <__swsetup_r+0xac>)
 801571c:	4605      	mov	r5, r0
 801571e:	6818      	ldr	r0, [r3, #0]
 8015720:	460c      	mov	r4, r1
 8015722:	b118      	cbz	r0, 801572c <__swsetup_r+0x14>
 8015724:	6a03      	ldr	r3, [r0, #32]
 8015726:	b90b      	cbnz	r3, 801572c <__swsetup_r+0x14>
 8015728:	f7fd ff3e 	bl	80135a8 <__sinit>
 801572c:	89a3      	ldrh	r3, [r4, #12]
 801572e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015732:	0718      	lsls	r0, r3, #28
 8015734:	d422      	bmi.n	801577c <__swsetup_r+0x64>
 8015736:	06d9      	lsls	r1, r3, #27
 8015738:	d407      	bmi.n	801574a <__swsetup_r+0x32>
 801573a:	2309      	movs	r3, #9
 801573c:	602b      	str	r3, [r5, #0]
 801573e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015742:	f04f 30ff 	mov.w	r0, #4294967295
 8015746:	81a3      	strh	r3, [r4, #12]
 8015748:	e034      	b.n	80157b4 <__swsetup_r+0x9c>
 801574a:	0758      	lsls	r0, r3, #29
 801574c:	d512      	bpl.n	8015774 <__swsetup_r+0x5c>
 801574e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015750:	b141      	cbz	r1, 8015764 <__swsetup_r+0x4c>
 8015752:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015756:	4299      	cmp	r1, r3
 8015758:	d002      	beq.n	8015760 <__swsetup_r+0x48>
 801575a:	4628      	mov	r0, r5
 801575c:	f7fe ff34 	bl	80145c8 <_free_r>
 8015760:	2300      	movs	r3, #0
 8015762:	6363      	str	r3, [r4, #52]	; 0x34
 8015764:	89a3      	ldrh	r3, [r4, #12]
 8015766:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801576a:	81a3      	strh	r3, [r4, #12]
 801576c:	2300      	movs	r3, #0
 801576e:	6063      	str	r3, [r4, #4]
 8015770:	6923      	ldr	r3, [r4, #16]
 8015772:	6023      	str	r3, [r4, #0]
 8015774:	89a3      	ldrh	r3, [r4, #12]
 8015776:	f043 0308 	orr.w	r3, r3, #8
 801577a:	81a3      	strh	r3, [r4, #12]
 801577c:	6923      	ldr	r3, [r4, #16]
 801577e:	b94b      	cbnz	r3, 8015794 <__swsetup_r+0x7c>
 8015780:	89a3      	ldrh	r3, [r4, #12]
 8015782:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801578a:	d003      	beq.n	8015794 <__swsetup_r+0x7c>
 801578c:	4621      	mov	r1, r4
 801578e:	4628      	mov	r0, r5
 8015790:	f000 f88b 	bl	80158aa <__smakebuf_r>
 8015794:	89a0      	ldrh	r0, [r4, #12]
 8015796:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801579a:	f010 0301 	ands.w	r3, r0, #1
 801579e:	d00a      	beq.n	80157b6 <__swsetup_r+0x9e>
 80157a0:	2300      	movs	r3, #0
 80157a2:	60a3      	str	r3, [r4, #8]
 80157a4:	6963      	ldr	r3, [r4, #20]
 80157a6:	425b      	negs	r3, r3
 80157a8:	61a3      	str	r3, [r4, #24]
 80157aa:	6923      	ldr	r3, [r4, #16]
 80157ac:	b943      	cbnz	r3, 80157c0 <__swsetup_r+0xa8>
 80157ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80157b2:	d1c4      	bne.n	801573e <__swsetup_r+0x26>
 80157b4:	bd38      	pop	{r3, r4, r5, pc}
 80157b6:	0781      	lsls	r1, r0, #30
 80157b8:	bf58      	it	pl
 80157ba:	6963      	ldrpl	r3, [r4, #20]
 80157bc:	60a3      	str	r3, [r4, #8]
 80157be:	e7f4      	b.n	80157aa <__swsetup_r+0x92>
 80157c0:	2000      	movs	r0, #0
 80157c2:	e7f7      	b.n	80157b4 <__swsetup_r+0x9c>
 80157c4:	20000868 	.word	0x20000868

080157c8 <_raise_r>:
 80157c8:	291f      	cmp	r1, #31
 80157ca:	b538      	push	{r3, r4, r5, lr}
 80157cc:	4604      	mov	r4, r0
 80157ce:	460d      	mov	r5, r1
 80157d0:	d904      	bls.n	80157dc <_raise_r+0x14>
 80157d2:	2316      	movs	r3, #22
 80157d4:	6003      	str	r3, [r0, #0]
 80157d6:	f04f 30ff 	mov.w	r0, #4294967295
 80157da:	bd38      	pop	{r3, r4, r5, pc}
 80157dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80157de:	b112      	cbz	r2, 80157e6 <_raise_r+0x1e>
 80157e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80157e4:	b94b      	cbnz	r3, 80157fa <_raise_r+0x32>
 80157e6:	4620      	mov	r0, r4
 80157e8:	f000 f830 	bl	801584c <_getpid_r>
 80157ec:	462a      	mov	r2, r5
 80157ee:	4601      	mov	r1, r0
 80157f0:	4620      	mov	r0, r4
 80157f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80157f6:	f000 b817 	b.w	8015828 <_kill_r>
 80157fa:	2b01      	cmp	r3, #1
 80157fc:	d00a      	beq.n	8015814 <_raise_r+0x4c>
 80157fe:	1c59      	adds	r1, r3, #1
 8015800:	d103      	bne.n	801580a <_raise_r+0x42>
 8015802:	2316      	movs	r3, #22
 8015804:	6003      	str	r3, [r0, #0]
 8015806:	2001      	movs	r0, #1
 8015808:	e7e7      	b.n	80157da <_raise_r+0x12>
 801580a:	2400      	movs	r4, #0
 801580c:	4628      	mov	r0, r5
 801580e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015812:	4798      	blx	r3
 8015814:	2000      	movs	r0, #0
 8015816:	e7e0      	b.n	80157da <_raise_r+0x12>

08015818 <raise>:
 8015818:	4b02      	ldr	r3, [pc, #8]	; (8015824 <raise+0xc>)
 801581a:	4601      	mov	r1, r0
 801581c:	6818      	ldr	r0, [r3, #0]
 801581e:	f7ff bfd3 	b.w	80157c8 <_raise_r>
 8015822:	bf00      	nop
 8015824:	20000868 	.word	0x20000868

08015828 <_kill_r>:
 8015828:	b538      	push	{r3, r4, r5, lr}
 801582a:	2300      	movs	r3, #0
 801582c:	4d06      	ldr	r5, [pc, #24]	; (8015848 <_kill_r+0x20>)
 801582e:	4604      	mov	r4, r0
 8015830:	4608      	mov	r0, r1
 8015832:	4611      	mov	r1, r2
 8015834:	602b      	str	r3, [r5, #0]
 8015836:	f7f0 f832 	bl	800589e <_kill>
 801583a:	1c43      	adds	r3, r0, #1
 801583c:	d102      	bne.n	8015844 <_kill_r+0x1c>
 801583e:	682b      	ldr	r3, [r5, #0]
 8015840:	b103      	cbz	r3, 8015844 <_kill_r+0x1c>
 8015842:	6023      	str	r3, [r4, #0]
 8015844:	bd38      	pop	{r3, r4, r5, pc}
 8015846:	bf00      	nop
 8015848:	20003bc0 	.word	0x20003bc0

0801584c <_getpid_r>:
 801584c:	f7f0 b820 	b.w	8005890 <_getpid>

08015850 <_malloc_usable_size_r>:
 8015850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015854:	1f18      	subs	r0, r3, #4
 8015856:	2b00      	cmp	r3, #0
 8015858:	bfbc      	itt	lt
 801585a:	580b      	ldrlt	r3, [r1, r0]
 801585c:	18c0      	addlt	r0, r0, r3
 801585e:	4770      	bx	lr

08015860 <__swhatbuf_r>:
 8015860:	b570      	push	{r4, r5, r6, lr}
 8015862:	460c      	mov	r4, r1
 8015864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015868:	4615      	mov	r5, r2
 801586a:	2900      	cmp	r1, #0
 801586c:	461e      	mov	r6, r3
 801586e:	b096      	sub	sp, #88	; 0x58
 8015870:	da0c      	bge.n	801588c <__swhatbuf_r+0x2c>
 8015872:	89a3      	ldrh	r3, [r4, #12]
 8015874:	2100      	movs	r1, #0
 8015876:	f013 0f80 	tst.w	r3, #128	; 0x80
 801587a:	bf0c      	ite	eq
 801587c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015880:	2340      	movne	r3, #64	; 0x40
 8015882:	2000      	movs	r0, #0
 8015884:	6031      	str	r1, [r6, #0]
 8015886:	602b      	str	r3, [r5, #0]
 8015888:	b016      	add	sp, #88	; 0x58
 801588a:	bd70      	pop	{r4, r5, r6, pc}
 801588c:	466a      	mov	r2, sp
 801588e:	f000 f849 	bl	8015924 <_fstat_r>
 8015892:	2800      	cmp	r0, #0
 8015894:	dbed      	blt.n	8015872 <__swhatbuf_r+0x12>
 8015896:	9901      	ldr	r1, [sp, #4]
 8015898:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801589c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80158a0:	4259      	negs	r1, r3
 80158a2:	4159      	adcs	r1, r3
 80158a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80158a8:	e7eb      	b.n	8015882 <__swhatbuf_r+0x22>

080158aa <__smakebuf_r>:
 80158aa:	898b      	ldrh	r3, [r1, #12]
 80158ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80158ae:	079d      	lsls	r5, r3, #30
 80158b0:	4606      	mov	r6, r0
 80158b2:	460c      	mov	r4, r1
 80158b4:	d507      	bpl.n	80158c6 <__smakebuf_r+0x1c>
 80158b6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80158ba:	6023      	str	r3, [r4, #0]
 80158bc:	6123      	str	r3, [r4, #16]
 80158be:	2301      	movs	r3, #1
 80158c0:	6163      	str	r3, [r4, #20]
 80158c2:	b002      	add	sp, #8
 80158c4:	bd70      	pop	{r4, r5, r6, pc}
 80158c6:	466a      	mov	r2, sp
 80158c8:	ab01      	add	r3, sp, #4
 80158ca:	f7ff ffc9 	bl	8015860 <__swhatbuf_r>
 80158ce:	9900      	ldr	r1, [sp, #0]
 80158d0:	4605      	mov	r5, r0
 80158d2:	4630      	mov	r0, r6
 80158d4:	f7fe fee8 	bl	80146a8 <_malloc_r>
 80158d8:	b948      	cbnz	r0, 80158ee <__smakebuf_r+0x44>
 80158da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80158de:	059a      	lsls	r2, r3, #22
 80158e0:	d4ef      	bmi.n	80158c2 <__smakebuf_r+0x18>
 80158e2:	f023 0303 	bic.w	r3, r3, #3
 80158e6:	f043 0302 	orr.w	r3, r3, #2
 80158ea:	81a3      	strh	r3, [r4, #12]
 80158ec:	e7e3      	b.n	80158b6 <__smakebuf_r+0xc>
 80158ee:	89a3      	ldrh	r3, [r4, #12]
 80158f0:	6020      	str	r0, [r4, #0]
 80158f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80158f6:	81a3      	strh	r3, [r4, #12]
 80158f8:	9b00      	ldr	r3, [sp, #0]
 80158fa:	6120      	str	r0, [r4, #16]
 80158fc:	6163      	str	r3, [r4, #20]
 80158fe:	9b01      	ldr	r3, [sp, #4]
 8015900:	b15b      	cbz	r3, 801591a <__smakebuf_r+0x70>
 8015902:	4630      	mov	r0, r6
 8015904:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015908:	f000 f81e 	bl	8015948 <_isatty_r>
 801590c:	b128      	cbz	r0, 801591a <__smakebuf_r+0x70>
 801590e:	89a3      	ldrh	r3, [r4, #12]
 8015910:	f023 0303 	bic.w	r3, r3, #3
 8015914:	f043 0301 	orr.w	r3, r3, #1
 8015918:	81a3      	strh	r3, [r4, #12]
 801591a:	89a3      	ldrh	r3, [r4, #12]
 801591c:	431d      	orrs	r5, r3
 801591e:	81a5      	strh	r5, [r4, #12]
 8015920:	e7cf      	b.n	80158c2 <__smakebuf_r+0x18>
	...

08015924 <_fstat_r>:
 8015924:	b538      	push	{r3, r4, r5, lr}
 8015926:	2300      	movs	r3, #0
 8015928:	4d06      	ldr	r5, [pc, #24]	; (8015944 <_fstat_r+0x20>)
 801592a:	4604      	mov	r4, r0
 801592c:	4608      	mov	r0, r1
 801592e:	4611      	mov	r1, r2
 8015930:	602b      	str	r3, [r5, #0]
 8015932:	f7f0 f812 	bl	800595a <_fstat>
 8015936:	1c43      	adds	r3, r0, #1
 8015938:	d102      	bne.n	8015940 <_fstat_r+0x1c>
 801593a:	682b      	ldr	r3, [r5, #0]
 801593c:	b103      	cbz	r3, 8015940 <_fstat_r+0x1c>
 801593e:	6023      	str	r3, [r4, #0]
 8015940:	bd38      	pop	{r3, r4, r5, pc}
 8015942:	bf00      	nop
 8015944:	20003bc0 	.word	0x20003bc0

08015948 <_isatty_r>:
 8015948:	b538      	push	{r3, r4, r5, lr}
 801594a:	2300      	movs	r3, #0
 801594c:	4d05      	ldr	r5, [pc, #20]	; (8015964 <_isatty_r+0x1c>)
 801594e:	4604      	mov	r4, r0
 8015950:	4608      	mov	r0, r1
 8015952:	602b      	str	r3, [r5, #0]
 8015954:	f7f0 f810 	bl	8005978 <_isatty>
 8015958:	1c43      	adds	r3, r0, #1
 801595a:	d102      	bne.n	8015962 <_isatty_r+0x1a>
 801595c:	682b      	ldr	r3, [r5, #0]
 801595e:	b103      	cbz	r3, 8015962 <_isatty_r+0x1a>
 8015960:	6023      	str	r3, [r4, #0]
 8015962:	bd38      	pop	{r3, r4, r5, pc}
 8015964:	20003bc0 	.word	0x20003bc0

08015968 <_init>:
 8015968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801596a:	bf00      	nop
 801596c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801596e:	bc08      	pop	{r3}
 8015970:	469e      	mov	lr, r3
 8015972:	4770      	bx	lr

08015974 <_fini>:
 8015974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015976:	bf00      	nop
 8015978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801597a:	bc08      	pop	{r3}
 801597c:	469e      	mov	lr, r3
 801597e:	4770      	bx	lr
