
FalconEye ControlBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010214  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  080103f8  080103f8  000203f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010958  08010958  00030434  2**0
                  CONTENTS
  4 .ARM          00000000  08010958  08010958  00030434  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010958  08010958  00030434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010958  08010958  00020958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801095c  0801095c  0002095c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000434  20000000  08010960  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002778  20000434  08010d94  00030434  2**2
                  ALLOC
 10 ._user_heap_stack 00001804  20002bac  08010d94  00032bac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030434  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020263  00000000  00000000  0003045d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053c7  00000000  00000000  000506c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b80  00000000  00000000  00055a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001928  00000000  00000000  00057608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000210a6  00000000  00000000  00058f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000259ca  00000000  00000000  00079fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a87c4  00000000  00000000  0009f9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00148164  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007aac  00000000  00000000  001481b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000434 	.word	0x20000434
 8000200:	00000000 	.word	0x00000000
 8000204:	080103e0 	.word	0x080103e0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000438 	.word	0x20000438
 8000220:	080103e0 	.word	0x080103e0

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_frsub>:
 8000234:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000238:	e002      	b.n	8000240 <__addsf3>
 800023a:	bf00      	nop

0800023c <__aeabi_fsub>:
 800023c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000240 <__addsf3>:
 8000240:	0042      	lsls	r2, r0, #1
 8000242:	bf1f      	itttt	ne
 8000244:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000248:	ea92 0f03 	teqne	r2, r3
 800024c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000250:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000254:	d06a      	beq.n	800032c <__addsf3+0xec>
 8000256:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800025a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800025e:	bfc1      	itttt	gt
 8000260:	18d2      	addgt	r2, r2, r3
 8000262:	4041      	eorgt	r1, r0
 8000264:	4048      	eorgt	r0, r1
 8000266:	4041      	eorgt	r1, r0
 8000268:	bfb8      	it	lt
 800026a:	425b      	neglt	r3, r3
 800026c:	2b19      	cmp	r3, #25
 800026e:	bf88      	it	hi
 8000270:	4770      	bxhi	lr
 8000272:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000276:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800027a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4240      	negne	r0, r0
 8000282:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000286:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800028a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800028e:	bf18      	it	ne
 8000290:	4249      	negne	r1, r1
 8000292:	ea92 0f03 	teq	r2, r3
 8000296:	d03f      	beq.n	8000318 <__addsf3+0xd8>
 8000298:	f1a2 0201 	sub.w	r2, r2, #1
 800029c:	fa41 fc03 	asr.w	ip, r1, r3
 80002a0:	eb10 000c 	adds.w	r0, r0, ip
 80002a4:	f1c3 0320 	rsb	r3, r3, #32
 80002a8:	fa01 f103 	lsl.w	r1, r1, r3
 80002ac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b0:	d502      	bpl.n	80002b8 <__addsf3+0x78>
 80002b2:	4249      	negs	r1, r1
 80002b4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002bc:	d313      	bcc.n	80002e6 <__addsf3+0xa6>
 80002be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002c2:	d306      	bcc.n	80002d2 <__addsf3+0x92>
 80002c4:	0840      	lsrs	r0, r0, #1
 80002c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ca:	f102 0201 	add.w	r2, r2, #1
 80002ce:	2afe      	cmp	r2, #254	; 0xfe
 80002d0:	d251      	bcs.n	8000376 <__addsf3+0x136>
 80002d2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002da:	bf08      	it	eq
 80002dc:	f020 0001 	biceq.w	r0, r0, #1
 80002e0:	ea40 0003 	orr.w	r0, r0, r3
 80002e4:	4770      	bx	lr
 80002e6:	0049      	lsls	r1, r1, #1
 80002e8:	eb40 0000 	adc.w	r0, r0, r0
 80002ec:	3a01      	subs	r2, #1
 80002ee:	bf28      	it	cs
 80002f0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002f4:	d2ed      	bcs.n	80002d2 <__addsf3+0x92>
 80002f6:	fab0 fc80 	clz	ip, r0
 80002fa:	f1ac 0c08 	sub.w	ip, ip, #8
 80002fe:	ebb2 020c 	subs.w	r2, r2, ip
 8000302:	fa00 f00c 	lsl.w	r0, r0, ip
 8000306:	bfaa      	itet	ge
 8000308:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800030c:	4252      	neglt	r2, r2
 800030e:	4318      	orrge	r0, r3
 8000310:	bfbc      	itt	lt
 8000312:	40d0      	lsrlt	r0, r2
 8000314:	4318      	orrlt	r0, r3
 8000316:	4770      	bx	lr
 8000318:	f092 0f00 	teq	r2, #0
 800031c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000320:	bf06      	itte	eq
 8000322:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000326:	3201      	addeq	r2, #1
 8000328:	3b01      	subne	r3, #1
 800032a:	e7b5      	b.n	8000298 <__addsf3+0x58>
 800032c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000330:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000334:	bf18      	it	ne
 8000336:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800033a:	d021      	beq.n	8000380 <__addsf3+0x140>
 800033c:	ea92 0f03 	teq	r2, r3
 8000340:	d004      	beq.n	800034c <__addsf3+0x10c>
 8000342:	f092 0f00 	teq	r2, #0
 8000346:	bf08      	it	eq
 8000348:	4608      	moveq	r0, r1
 800034a:	4770      	bx	lr
 800034c:	ea90 0f01 	teq	r0, r1
 8000350:	bf1c      	itt	ne
 8000352:	2000      	movne	r0, #0
 8000354:	4770      	bxne	lr
 8000356:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800035a:	d104      	bne.n	8000366 <__addsf3+0x126>
 800035c:	0040      	lsls	r0, r0, #1
 800035e:	bf28      	it	cs
 8000360:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000364:	4770      	bx	lr
 8000366:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800036a:	bf3c      	itt	cc
 800036c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000370:	4770      	bxcc	lr
 8000372:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000376:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800037a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800037e:	4770      	bx	lr
 8000380:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000384:	bf16      	itet	ne
 8000386:	4608      	movne	r0, r1
 8000388:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800038c:	4601      	movne	r1, r0
 800038e:	0242      	lsls	r2, r0, #9
 8000390:	bf06      	itte	eq
 8000392:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000396:	ea90 0f01 	teqeq	r0, r1
 800039a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_ui2f>:
 80003a0:	f04f 0300 	mov.w	r3, #0
 80003a4:	e004      	b.n	80003b0 <__aeabi_i2f+0x8>
 80003a6:	bf00      	nop

080003a8 <__aeabi_i2f>:
 80003a8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003ac:	bf48      	it	mi
 80003ae:	4240      	negmi	r0, r0
 80003b0:	ea5f 0c00 	movs.w	ip, r0
 80003b4:	bf08      	it	eq
 80003b6:	4770      	bxeq	lr
 80003b8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003bc:	4601      	mov	r1, r0
 80003be:	f04f 0000 	mov.w	r0, #0
 80003c2:	e01c      	b.n	80003fe <__aeabi_l2f+0x2a>

080003c4 <__aeabi_ul2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f04f 0300 	mov.w	r3, #0
 80003d0:	e00a      	b.n	80003e8 <__aeabi_l2f+0x14>
 80003d2:	bf00      	nop

080003d4 <__aeabi_l2f>:
 80003d4:	ea50 0201 	orrs.w	r2, r0, r1
 80003d8:	bf08      	it	eq
 80003da:	4770      	bxeq	lr
 80003dc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003e0:	d502      	bpl.n	80003e8 <__aeabi_l2f+0x14>
 80003e2:	4240      	negs	r0, r0
 80003e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e8:	ea5f 0c01 	movs.w	ip, r1
 80003ec:	bf02      	ittt	eq
 80003ee:	4684      	moveq	ip, r0
 80003f0:	4601      	moveq	r1, r0
 80003f2:	2000      	moveq	r0, #0
 80003f4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003f8:	bf08      	it	eq
 80003fa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003fe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000402:	fabc f28c 	clz	r2, ip
 8000406:	3a08      	subs	r2, #8
 8000408:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800040c:	db10      	blt.n	8000430 <__aeabi_l2f+0x5c>
 800040e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000412:	4463      	add	r3, ip
 8000414:	fa00 fc02 	lsl.w	ip, r0, r2
 8000418:	f1c2 0220 	rsb	r2, r2, #32
 800041c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000420:	fa20 f202 	lsr.w	r2, r0, r2
 8000424:	eb43 0002 	adc.w	r0, r3, r2
 8000428:	bf08      	it	eq
 800042a:	f020 0001 	biceq.w	r0, r0, #1
 800042e:	4770      	bx	lr
 8000430:	f102 0220 	add.w	r2, r2, #32
 8000434:	fa01 fc02 	lsl.w	ip, r1, r2
 8000438:	f1c2 0220 	rsb	r2, r2, #32
 800043c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000440:	fa21 f202 	lsr.w	r2, r1, r2
 8000444:	eb43 0002 	adc.w	r0, r3, r2
 8000448:	bf08      	it	eq
 800044a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800044e:	4770      	bx	lr

08000450 <__aeabi_fmul>:
 8000450:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000454:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000458:	bf1e      	ittt	ne
 800045a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800045e:	ea92 0f0c 	teqne	r2, ip
 8000462:	ea93 0f0c 	teqne	r3, ip
 8000466:	d06f      	beq.n	8000548 <__aeabi_fmul+0xf8>
 8000468:	441a      	add	r2, r3
 800046a:	ea80 0c01 	eor.w	ip, r0, r1
 800046e:	0240      	lsls	r0, r0, #9
 8000470:	bf18      	it	ne
 8000472:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000476:	d01e      	beq.n	80004b6 <__aeabi_fmul+0x66>
 8000478:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800047c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000480:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000484:	fba0 3101 	umull	r3, r1, r0, r1
 8000488:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800048c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000490:	bf3e      	ittt	cc
 8000492:	0049      	lslcc	r1, r1, #1
 8000494:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000498:	005b      	lslcc	r3, r3, #1
 800049a:	ea40 0001 	orr.w	r0, r0, r1
 800049e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004a2:	2afd      	cmp	r2, #253	; 0xfd
 80004a4:	d81d      	bhi.n	80004e2 <__aeabi_fmul+0x92>
 80004a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004ae:	bf08      	it	eq
 80004b0:	f020 0001 	biceq.w	r0, r0, #1
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004be:	bf08      	it	eq
 80004c0:	0249      	lsleq	r1, r1, #9
 80004c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ca:	3a7f      	subs	r2, #127	; 0x7f
 80004cc:	bfc2      	ittt	gt
 80004ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004d6:	4770      	bxgt	lr
 80004d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004dc:	f04f 0300 	mov.w	r3, #0
 80004e0:	3a01      	subs	r2, #1
 80004e2:	dc5d      	bgt.n	80005a0 <__aeabi_fmul+0x150>
 80004e4:	f112 0f19 	cmn.w	r2, #25
 80004e8:	bfdc      	itt	le
 80004ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004ee:	4770      	bxle	lr
 80004f0:	f1c2 0200 	rsb	r2, r2, #0
 80004f4:	0041      	lsls	r1, r0, #1
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	f1c2 0220 	rsb	r2, r2, #32
 80004fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000502:	ea5f 0031 	movs.w	r0, r1, rrx
 8000506:	f140 0000 	adc.w	r0, r0, #0
 800050a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800050e:	bf08      	it	eq
 8000510:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000514:	4770      	bx	lr
 8000516:	f092 0f00 	teq	r2, #0
 800051a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800051e:	bf02      	ittt	eq
 8000520:	0040      	lsleq	r0, r0, #1
 8000522:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000526:	3a01      	subeq	r2, #1
 8000528:	d0f9      	beq.n	800051e <__aeabi_fmul+0xce>
 800052a:	ea40 000c 	orr.w	r0, r0, ip
 800052e:	f093 0f00 	teq	r3, #0
 8000532:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000536:	bf02      	ittt	eq
 8000538:	0049      	lsleq	r1, r1, #1
 800053a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800053e:	3b01      	subeq	r3, #1
 8000540:	d0f9      	beq.n	8000536 <__aeabi_fmul+0xe6>
 8000542:	ea41 010c 	orr.w	r1, r1, ip
 8000546:	e78f      	b.n	8000468 <__aeabi_fmul+0x18>
 8000548:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800054c:	ea92 0f0c 	teq	r2, ip
 8000550:	bf18      	it	ne
 8000552:	ea93 0f0c 	teqne	r3, ip
 8000556:	d00a      	beq.n	800056e <__aeabi_fmul+0x11e>
 8000558:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800055c:	bf18      	it	ne
 800055e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000562:	d1d8      	bne.n	8000516 <__aeabi_fmul+0xc6>
 8000564:	ea80 0001 	eor.w	r0, r0, r1
 8000568:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800056c:	4770      	bx	lr
 800056e:	f090 0f00 	teq	r0, #0
 8000572:	bf17      	itett	ne
 8000574:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000578:	4608      	moveq	r0, r1
 800057a:	f091 0f00 	teqne	r1, #0
 800057e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000582:	d014      	beq.n	80005ae <__aeabi_fmul+0x15e>
 8000584:	ea92 0f0c 	teq	r2, ip
 8000588:	d101      	bne.n	800058e <__aeabi_fmul+0x13e>
 800058a:	0242      	lsls	r2, r0, #9
 800058c:	d10f      	bne.n	80005ae <__aeabi_fmul+0x15e>
 800058e:	ea93 0f0c 	teq	r3, ip
 8000592:	d103      	bne.n	800059c <__aeabi_fmul+0x14c>
 8000594:	024b      	lsls	r3, r1, #9
 8000596:	bf18      	it	ne
 8000598:	4608      	movne	r0, r1
 800059a:	d108      	bne.n	80005ae <__aeabi_fmul+0x15e>
 800059c:	ea80 0001 	eor.w	r0, r0, r1
 80005a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ac:	4770      	bx	lr
 80005ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005b6:	4770      	bx	lr

080005b8 <__aeabi_fdiv>:
 80005b8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005bc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005c0:	bf1e      	ittt	ne
 80005c2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005c6:	ea92 0f0c 	teqne	r2, ip
 80005ca:	ea93 0f0c 	teqne	r3, ip
 80005ce:	d069      	beq.n	80006a4 <__aeabi_fdiv+0xec>
 80005d0:	eba2 0203 	sub.w	r2, r2, r3
 80005d4:	ea80 0c01 	eor.w	ip, r0, r1
 80005d8:	0249      	lsls	r1, r1, #9
 80005da:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005de:	d037      	beq.n	8000650 <__aeabi_fdiv+0x98>
 80005e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005e4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005e8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005ec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005f0:	428b      	cmp	r3, r1
 80005f2:	bf38      	it	cc
 80005f4:	005b      	lslcc	r3, r3, #1
 80005f6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005fa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005fe:	428b      	cmp	r3, r1
 8000600:	bf24      	itt	cs
 8000602:	1a5b      	subcs	r3, r3, r1
 8000604:	ea40 000c 	orrcs.w	r0, r0, ip
 8000608:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800060c:	bf24      	itt	cs
 800060e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000612:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000616:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800061a:	bf24      	itt	cs
 800061c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000620:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000624:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000628:	bf24      	itt	cs
 800062a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800062e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	bf18      	it	ne
 8000636:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800063a:	d1e0      	bne.n	80005fe <__aeabi_fdiv+0x46>
 800063c:	2afd      	cmp	r2, #253	; 0xfd
 800063e:	f63f af50 	bhi.w	80004e2 <__aeabi_fmul+0x92>
 8000642:	428b      	cmp	r3, r1
 8000644:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000648:	bf08      	it	eq
 800064a:	f020 0001 	biceq.w	r0, r0, #1
 800064e:	4770      	bx	lr
 8000650:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000654:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000658:	327f      	adds	r2, #127	; 0x7f
 800065a:	bfc2      	ittt	gt
 800065c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000660:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000664:	4770      	bxgt	lr
 8000666:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800066a:	f04f 0300 	mov.w	r3, #0
 800066e:	3a01      	subs	r2, #1
 8000670:	e737      	b.n	80004e2 <__aeabi_fmul+0x92>
 8000672:	f092 0f00 	teq	r2, #0
 8000676:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800067a:	bf02      	ittt	eq
 800067c:	0040      	lsleq	r0, r0, #1
 800067e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000682:	3a01      	subeq	r2, #1
 8000684:	d0f9      	beq.n	800067a <__aeabi_fdiv+0xc2>
 8000686:	ea40 000c 	orr.w	r0, r0, ip
 800068a:	f093 0f00 	teq	r3, #0
 800068e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000692:	bf02      	ittt	eq
 8000694:	0049      	lsleq	r1, r1, #1
 8000696:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800069a:	3b01      	subeq	r3, #1
 800069c:	d0f9      	beq.n	8000692 <__aeabi_fdiv+0xda>
 800069e:	ea41 010c 	orr.w	r1, r1, ip
 80006a2:	e795      	b.n	80005d0 <__aeabi_fdiv+0x18>
 80006a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006a8:	ea92 0f0c 	teq	r2, ip
 80006ac:	d108      	bne.n	80006c0 <__aeabi_fdiv+0x108>
 80006ae:	0242      	lsls	r2, r0, #9
 80006b0:	f47f af7d 	bne.w	80005ae <__aeabi_fmul+0x15e>
 80006b4:	ea93 0f0c 	teq	r3, ip
 80006b8:	f47f af70 	bne.w	800059c <__aeabi_fmul+0x14c>
 80006bc:	4608      	mov	r0, r1
 80006be:	e776      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006c0:	ea93 0f0c 	teq	r3, ip
 80006c4:	d104      	bne.n	80006d0 <__aeabi_fdiv+0x118>
 80006c6:	024b      	lsls	r3, r1, #9
 80006c8:	f43f af4c 	beq.w	8000564 <__aeabi_fmul+0x114>
 80006cc:	4608      	mov	r0, r1
 80006ce:	e76e      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006d0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006d4:	bf18      	it	ne
 80006d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006da:	d1ca      	bne.n	8000672 <__aeabi_fdiv+0xba>
 80006dc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006e0:	f47f af5c 	bne.w	800059c <__aeabi_fmul+0x14c>
 80006e4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006e8:	f47f af3c 	bne.w	8000564 <__aeabi_fmul+0x114>
 80006ec:	e75f      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006ee:	bf00      	nop

080006f0 <set_baudrate>:
#include "usart.h"



static void set_baudrate(uint32_t baudrate)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	  huart3.Instance = USART3;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <set_baudrate+0x50>)
 80006fa:	4a12      	ldr	r2, [pc, #72]	; (8000744 <set_baudrate+0x54>)
 80006fc:	601a      	str	r2, [r3, #0]
	  huart3.Init.BaudRate = baudrate;
 80006fe:	4a10      	ldr	r2, [pc, #64]	; (8000740 <set_baudrate+0x50>)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6053      	str	r3, [r2, #4]
	  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000704:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <set_baudrate+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
	  huart3.Init.StopBits = UART_STOPBITS_1;
 800070a:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <set_baudrate+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
	  huart3.Init.Parity = UART_PARITY_NONE;
 8000710:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <set_baudrate+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
	  huart3.Init.Mode = UART_MODE_TX_RX;
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <set_baudrate+0x50>)
 8000718:	220c      	movs	r2, #12
 800071a:	615a      	str	r2, [r3, #20]
	  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <set_baudrate+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
	  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000722:	4b07      	ldr	r3, [pc, #28]	; (8000740 <set_baudrate+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
	  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8000728:	4805      	ldr	r0, [pc, #20]	; (8000740 <set_baudrate+0x50>)
 800072a:	f009 ff1d 	bl	800a568 <HAL_HalfDuplex_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <set_baudrate+0x48>
	  {
	    Error_Handler();
 8000734:	f001 fc42 	bl	8001fbc <Error_Handler>
	  }
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20001978 	.word	0x20001978
 8000744:	40004800 	.word	0x40004800

08000748 <wire_reset>:


HAL_StatusTypeDef wire_reset(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
	uint8_t data_out = 0xF0;
 800074e:	23f0      	movs	r3, #240	; 0xf0
 8000750:	71fb      	strb	r3, [r7, #7]
	uint8_t data_in = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	71bb      	strb	r3, [r7, #6]

	set_baudrate(9600);
 8000756:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 800075a:	f7ff ffc9 	bl	80006f0 <set_baudrate>
	HAL_UART_Transmit(&UART, &data_out, 1, 100);
 800075e:	1df9      	adds	r1, r7, #7
 8000760:	2364      	movs	r3, #100	; 0x64
 8000762:	2201      	movs	r2, #1
 8000764:	480b      	ldr	r0, [pc, #44]	; (8000794 <wire_reset+0x4c>)
 8000766:	f009 ff57 	bl	800a618 <HAL_UART_Transmit>
	HAL_UART_Receive(&UART, &data_in, 1, 100);
 800076a:	1db9      	adds	r1, r7, #6
 800076c:	2364      	movs	r3, #100	; 0x64
 800076e:	2201      	movs	r2, #1
 8000770:	4808      	ldr	r0, [pc, #32]	; (8000794 <wire_reset+0x4c>)
 8000772:	f009 ffd4 	bl	800a71e <HAL_UART_Receive>
	set_baudrate(115200);
 8000776:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 800077a:	f7ff ffb9 	bl	80006f0 <set_baudrate>

	if (data_in != 0xF0)
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	2bf0      	cmp	r3, #240	; 0xf0
 8000782:	d001      	beq.n	8000788 <wire_reset+0x40>
		return HAL_OK;
 8000784:	2300      	movs	r3, #0
 8000786:	e000      	b.n	800078a <wire_reset+0x42>
	else
		return HAL_ERROR;
 8000788:	2301      	movs	r3, #1
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20001978 	.word	0x20001978

08000798 <read_bit>:

static int read_bit(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
	uint8_t data_out = 0xff;
 800079e:	23ff      	movs	r3, #255	; 0xff
 80007a0:	71fb      	strb	r3, [r7, #7]
	uint8_t data_in = 0x0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	71bb      	strb	r3, [r7, #6]
	data_in = 0x0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	71bb      	strb	r3, [r7, #6]
	if(USARTn -> SR & (1<<5))
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <read_bit+0x4c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f003 0320 	and.w	r3, r3, #32
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <read_bit+0x22>
	{
		USARTn -> DR;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <read_bit+0x4c>)
 80007b8:	685b      	ldr	r3, [r3, #4]
	}
	HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 80007ba:	1df9      	adds	r1, r7, #7
 80007bc:	f04f 33ff 	mov.w	r3, #4294967295
 80007c0:	2201      	movs	r2, #1
 80007c2:	4809      	ldr	r0, [pc, #36]	; (80007e8 <read_bit+0x50>)
 80007c4:	f009 ff28 	bl	800a618 <HAL_UART_Transmit>
	HAL_UART_Receive(&UART, &data_in, 1, HAL_MAX_DELAY);
 80007c8:	1db9      	adds	r1, r7, #6
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	2201      	movs	r2, #1
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <read_bit+0x50>)
 80007d2:	f009 ffa4 	bl	800a71e <HAL_UART_Receive>

	return data_in & 0x01;
 80007d6:	79bb      	ldrb	r3, [r7, #6]
 80007d8:	f003 0301 	and.w	r3, r3, #1
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40004800 	.word	0x40004800
 80007e8:	20001978 	.word	0x20001978

080007ec <wire_read>:

uint8_t wire_read(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++)
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	e00e      	b.n	800081a <wire_read+0x2e>
  {
    value >>= 1;
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	085b      	lsrs	r3, r3, #1
 8000800:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 8000802:	f7ff ffc9 	bl	8000798 <read_bit>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d003      	beq.n	8000814 <wire_read+0x28>
      value |= 0x80;
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000812:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++)
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	2b07      	cmp	r3, #7
 800081e:	dded      	ble.n	80007fc <wire_read+0x10>
  }
  return value;
 8000820:	79fb      	ldrb	r3, [r7, #7]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <write_bit>:

static void write_bit(int value)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if (value)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d00a      	beq.n	8000850 <write_bit+0x24>
  {
    uint8_t data_out = 0xff;
 800083a:	23ff      	movs	r3, #255	; 0xff
 800083c:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 800083e:	f107 010f 	add.w	r1, r7, #15
 8000842:	f04f 33ff 	mov.w	r3, #4294967295
 8000846:	2201      	movs	r2, #1
 8000848:	4808      	ldr	r0, [pc, #32]	; (800086c <write_bit+0x40>)
 800084a:	f009 fee5 	bl	800a618 <HAL_UART_Transmit>
  else
  {
    uint8_t data_out = 0x0;
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
  }
}
 800084e:	e009      	b.n	8000864 <write_bit+0x38>
    uint8_t data_out = 0x0;
 8000850:	2300      	movs	r3, #0
 8000852:	73bb      	strb	r3, [r7, #14]
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8000854:	f107 010e 	add.w	r1, r7, #14
 8000858:	f04f 33ff 	mov.w	r3, #4294967295
 800085c:	2201      	movs	r2, #1
 800085e:	4803      	ldr	r0, [pc, #12]	; (800086c <write_bit+0x40>)
 8000860:	f009 feda 	bl	800a618 <HAL_UART_Transmit>
}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20001978 	.word	0x20001978

08000870 <wire_write>:

void wire_write(uint8_t byte)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	e00b      	b.n	8000898 <wire_write+0x28>
    write_bit(byte & 0x01);
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ffd0 	bl	800082c <write_bit>
    byte >>= 1;
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	085b      	lsrs	r3, r3, #1
 8000890:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	3301      	adds	r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2b07      	cmp	r3, #7
 800089c:	ddf0      	ble.n	8000880 <wire_write+0x10>
  }
}
 800089e:	bf00      	nop
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	460a      	mov	r2, r1
 80008b2:	71fb      	strb	r3, [r7, #7]
 80008b4:	4613      	mov	r3, r2
 80008b6:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	e016      	b.n	80008ec <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 80008be:	79fa      	ldrb	r2, [r7, #7]
 80008c0:	79bb      	ldrb	r3, [r7, #6]
 80008c2:	4053      	eors	r3, r2
 80008c4:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 80008cc:	7afb      	ldrb	r3, [r7, #11]
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d004      	beq.n	80008e0 <byte_crc+0x38>
      crc ^= 0x8c;
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80008dc:	43db      	mvns	r3, r3
 80008de:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 80008e0:	79bb      	ldrb	r3, [r7, #6]
 80008e2:	085b      	lsrs	r3, r3, #1
 80008e4:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	3301      	adds	r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	2b07      	cmp	r3, #7
 80008f0:	dde5      	ble.n	80008be <byte_crc+0x16>
  }
  return crc;
 80008f2:	79fb      	ldrb	r3, [r7, #7]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr

080008fe <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b084      	sub	sp, #16
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
 8000906:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	e00d      	b.n	800092e <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	4413      	add	r3, r2
 8000918:	781a      	ldrb	r2, [r3, #0]
 800091a:	7afb      	ldrb	r3, [r7, #11]
 800091c:	4611      	mov	r1, r2
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ffc2 	bl	80008a8 <byte_crc>
 8000924:	4603      	mov	r3, r0
 8000926:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	3301      	adds	r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	429a      	cmp	r2, r3
 8000934:	dbed      	blt.n	8000912 <wire_crc+0x14>

    return crc;
 8000936:	7afb      	ldrb	r3, [r7, #11]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000948:	4a03      	ldr	r2, [pc, #12]	; (8000958 <GFX_SetFont+0x18>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6013      	str	r3, [r2, #0]
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	20000450 	.word	0x20000450

0800095c <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d002      	beq.n	8000972 <GFX_SetFontSize+0x16>
		size = size_t;
 800096c:	4a03      	ldr	r2, [pc, #12]	; (800097c <GFX_SetFontSize+0x20>)
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	7013      	strb	r3, [r2, #0]
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	20000000 	.word	0x20000000

08000980 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b089      	sub	sp, #36	; 0x24
 8000984:	af02      	add	r7, sp, #8
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	4611      	mov	r1, r2
 800098c:	461a      	mov	r2, r3
 800098e:	460b      	mov	r3, r1
 8000990:	71fb      	strb	r3, [r7, #7]
 8000992:	4613      	mov	r3, r2
 8000994:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b7e      	cmp	r3, #126	; 0x7e
 800099a:	f200 80a3 	bhi.w	8000ae4 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 800099e:	2300      	movs	r3, #0
 80009a0:	75fb      	strb	r3, [r7, #23]
 80009a2:	e096      	b.n	8000ad2 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 80009a4:	4b51      	ldr	r3, [pc, #324]	; (8000aec <GFX_DrawChar+0x16c>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	3b20      	subs	r3, #32
 80009ac:	494f      	ldr	r1, [pc, #316]	; (8000aec <GFX_DrawChar+0x16c>)
 80009ae:	6809      	ldr	r1, [r1, #0]
 80009b0:	3101      	adds	r1, #1
 80009b2:	7809      	ldrb	r1, [r1, #0]
 80009b4:	fb03 f101 	mul.w	r1, r3, r1
 80009b8:	7dfb      	ldrb	r3, [r7, #23]
 80009ba:	440b      	add	r3, r1
 80009bc:	3302      	adds	r3, #2
 80009be:	4413      	add	r3, r2
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80009c4:	2300      	movs	r3, #0
 80009c6:	757b      	strb	r3, [r7, #21]
 80009c8:	e078      	b.n	8000abc <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 80009ca:	7dbb      	ldrb	r3, [r7, #22]
 80009cc:	f003 0301 	and.w	r3, r3, #1
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d032      	beq.n	8000a3a <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 80009d4:	4b46      	ldr	r3, [pc, #280]	; (8000af0 <GFX_DrawChar+0x170>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d113      	bne.n	8000a04 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 80009dc:	7dfb      	ldrb	r3, [r7, #23]
 80009de:	b29a      	uxth	r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	4413      	add	r3, r2
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	b218      	sxth	r0, r3
 80009ea:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	4413      	add	r3, r2
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	b21b      	sxth	r3, r3
 80009fa:	79ba      	ldrb	r2, [r7, #6]
 80009fc:	4619      	mov	r1, r3
 80009fe:	f002 f82f 	bl	8002a60 <SSD1306_DrawPixel>
 8000a02:	e052      	b.n	8000aaa <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8000a04:	7dfb      	ldrb	r3, [r7, #23]
 8000a06:	4a3a      	ldr	r2, [pc, #232]	; (8000af0 <GFX_DrawChar+0x170>)
 8000a08:	7812      	ldrb	r2, [r2, #0]
 8000a0a:	fb03 f202 	mul.w	r2, r3, r2
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	18d0      	adds	r0, r2, r3
 8000a12:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000a16:	4a36      	ldr	r2, [pc, #216]	; (8000af0 <GFX_DrawChar+0x170>)
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	fb03 f202 	mul.w	r2, r3, r2
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	18d1      	adds	r1, r2, r3
 8000a22:	4b33      	ldr	r3, [pc, #204]	; (8000af0 <GFX_DrawChar+0x170>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	4b31      	ldr	r3, [pc, #196]	; (8000af0 <GFX_DrawChar+0x170>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	b29c      	uxth	r4, r3
 8000a2e:	79bb      	ldrb	r3, [r7, #6]
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	4623      	mov	r3, r4
 8000a34:	f000 f960 	bl	8000cf8 <GFX_DrawFillRectangle>
 8000a38:	e037      	b.n	8000aaa <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 8000a3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d133      	bne.n	8000aaa <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 8000a42:	4b2b      	ldr	r3, [pc, #172]	; (8000af0 <GFX_DrawChar+0x170>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d114      	bne.n	8000a74 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 8000a4a:	7dfb      	ldrb	r3, [r7, #23]
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	4413      	add	r3, r2
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	b218      	sxth	r0, r3
 8000a58:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	4413      	add	r3, r2
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f001 fff7 	bl	8002a60 <SSD1306_DrawPixel>
 8000a72:	e01a      	b.n	8000aaa <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 8000a74:	7dfb      	ldrb	r3, [r7, #23]
 8000a76:	4a1e      	ldr	r2, [pc, #120]	; (8000af0 <GFX_DrawChar+0x170>)
 8000a78:	7812      	ldrb	r2, [r2, #0]
 8000a7a:	fb03 f202 	mul.w	r2, r3, r2
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	18d0      	adds	r0, r2, r3
 8000a82:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000a86:	4a1a      	ldr	r2, [pc, #104]	; (8000af0 <GFX_DrawChar+0x170>)
 8000a88:	7812      	ldrb	r2, [r2, #0]
 8000a8a:	fb03 f202 	mul.w	r2, r3, r2
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	18d1      	adds	r1, r2, r3
 8000a92:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <GFX_DrawChar+0x170>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <GFX_DrawChar+0x170>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b29c      	uxth	r4, r3
 8000a9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	4623      	mov	r3, r4
 8000aa6:	f000 f927 	bl	8000cf8 <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8000aaa:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	757b      	strb	r3, [r7, #21]
 8000ab6:	7dbb      	ldrb	r3, [r7, #22]
 8000ab8:	085b      	lsrs	r3, r3, #1
 8000aba:	75bb      	strb	r3, [r7, #22]
 8000abc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000ac0:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <GFX_DrawChar+0x16c>)
 8000ac2:	6812      	ldr	r2, [r2, #0]
 8000ac4:	7812      	ldrb	r2, [r2, #0]
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	f6ff af7f 	blt.w	80009ca <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000acc:	7dfb      	ldrb	r3, [r7, #23]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	75fb      	strb	r3, [r7, #23]
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <GFX_DrawChar+0x16c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	7dfa      	ldrb	r2, [r7, #23]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	f4ff af61 	bcc.w	80009a4 <GFX_DrawChar+0x24>
 8000ae2:	e000      	b.n	8000ae6 <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8000ae4:	bf00      	nop
            }
        }
    }
}
 8000ae6:	371c      	adds	r7, #28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd90      	pop	{r4, r7, pc}
 8000aec:	20000450 	.word	0x20000450
 8000af0:	20000000 	.word	0x20000000

08000af4 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af02      	add	r7, sp, #8
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
 8000b00:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8000b0c:	e03e      	b.n	8000b8c <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 8000b0e:	78f9      	ldrb	r1, [r7, #3]
 8000b10:	7cfa      	ldrb	r2, [r7, #19]
 8000b12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	68b9      	ldr	r1, [r7, #8]
 8000b1c:	6978      	ldr	r0, [r7, #20]
 8000b1e:	f7ff ff2f 	bl	8000980 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <GFX_DrawString+0xb0>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	3301      	adds	r3, #1
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <GFX_DrawString+0xb4>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	fb02 f303 	mul.w	r3, r2, r3
 8000b34:	3301      	adds	r3, #1
 8000b36:	697a      	ldr	r2, [r7, #20]
 8000b38:	4413      	add	r3, r2
 8000b3a:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 8000b3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d120      	bne.n	8000b86 <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8000b44:	2300      	movs	r3, #0
 8000b46:	74bb      	strb	r3, [r7, #18]
 8000b48:	e012      	b.n	8000b70 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	b218      	sxth	r0, r3
 8000b54:	7cbb      	ldrb	r3, [r7, #18]
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	4413      	add	r3, r2
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	b21b      	sxth	r3, r3
 8000b62:	2200      	movs	r2, #0
 8000b64:	4619      	mov	r1, r3
 8000b66:	f001 ff7b 	bl	8002a60 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 8000b6a:	7cbb      	ldrb	r3, [r7, #18]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	74bb      	strb	r3, [r7, #18]
 8000b70:	7cba      	ldrb	r2, [r7, #18]
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <GFX_DrawString+0xb0>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <GFX_DrawString+0xb4>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	fb01 f303 	mul.w	r3, r1, r3
 8000b82:	429a      	cmp	r2, r3
 8000b84:	dbe1      	blt.n	8000b4a <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1ba      	bne.n	8000b0e <GFX_DrawString+0x1a>
	}
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	3718      	adds	r7, #24
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000450 	.word	0x20000450
 8000ba8:	20000000 	.word	0x20000000

08000bac <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08c      	sub	sp, #48	; 0x30
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
 8000bb8:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000bc4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000bc8:	6879      	ldr	r1, [r7, #4]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	1acb      	subs	r3, r1, r3
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	bfb8      	it	lt
 8000bd2:	425b      	neglt	r3, r3
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	bfcc      	ite	gt
 8000bd8:	2301      	movgt	r3, #1
 8000bda:	2300      	movle	r3, #0
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8000be0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d00b      	beq.n	8000c00 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf2:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	623b      	str	r3, [r7, #32]
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	6a3b      	ldr	r3, [r7, #32]
 8000bfe:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dd0b      	ble.n	8000c20 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	61fb      	str	r3, [r7, #28]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	61bb      	str	r3, [r7, #24]
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8000c2e:	683a      	ldr	r2, [r7, #0]
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	bfb8      	it	lt
 8000c38:	425b      	neglt	r3, r3
 8000c3a:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8000c3c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c40:	0fda      	lsrs	r2, r3, #31
 8000c42:	4413      	add	r3, r2
 8000c44:	105b      	asrs	r3, r3, #1
 8000c46:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8000c48:	68ba      	ldr	r2, [r7, #8]
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	da02      	bge.n	8000c56 <GFX_WriteLine+0xaa>
	        ystep = 1;
 8000c50:	2301      	movs	r3, #1
 8000c52:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000c54:	e030      	b.n	8000cb8 <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 8000c56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c5a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8000c5c:	e02c      	b.n	8000cb8 <GFX_WriteLine+0x10c>
	        if (steep) {
 8000c5e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d009      	beq.n	8000c7a <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	b211      	sxth	r1, r2
 8000c6e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 fef4 	bl	8002a60 <SSD1306_DrawPixel>
 8000c78:	e008      	b.n	8000c8c <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	b21b      	sxth	r3, r3
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	b211      	sxth	r1, r2
 8000c82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000c86:	4618      	mov	r0, r3
 8000c88:	f001 feea 	bl	8002a60 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 8000c8c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000c8e:	8abb      	ldrh	r3, [r7, #20]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8000c96:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	da09      	bge.n	8000cb2 <GFX_WriteLine+0x106>
	            y_start += ystep;
 8000c9e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8000ca8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000caa:	8afb      	ldrh	r3, [r7, #22]
 8000cac:	4413      	add	r3, r2
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	ddce      	ble.n	8000c5e <GFX_WriteLine+0xb2>
	        }
	    }
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3730      	adds	r7, #48	; 0x30
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af02      	add	r7, sp, #8
 8000cd0:	60f8      	str	r0, [r7, #12]
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8000cd8:	68ba      	ldr	r2, [r7, #8]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	1e5a      	subs	r2, r3, #1
 8000ce0:	78fb      	ldrb	r3, [r7, #3]
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	68b9      	ldr	r1, [r7, #8]
 8000cea:	68f8      	ldr	r0, [r7, #12]
 8000cec:	f7ff ff5e 	bl	8000bac <GFX_WriteLine>
}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	4611      	mov	r1, r2
 8000d04:	461a      	mov	r2, r3
 8000d06:	460b      	mov	r3, r1
 8000d08:	80fb      	strh	r3, [r7, #6]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	e009      	b.n	8000d28 <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 8000d14:	88ba      	ldrh	r2, [r7, #4]
 8000d16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d1a:	68b9      	ldr	r1, [r7, #8]
 8000d1c:	6978      	ldr	r0, [r7, #20]
 8000d1e:	f7ff ffd4 	bl	8000cca <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	88fa      	ldrh	r2, [r7, #6]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	dbef      	blt.n	8000d14 <GFX_DrawFillRectangle+0x1c>
    }

}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <GFX_DrawCircle>:
#endif
#if USING_CIRCLE == 1
void GFX_DrawCircle(int x0, int y0, uint16_t r, uint8_t color)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b088      	sub	sp, #32
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	60f8      	str	r0, [r7, #12]
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	4611      	mov	r1, r2
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	80fb      	strh	r3, [r7, #6]
 8000d50:	4613      	mov	r3, r2
 8000d52:	717b      	strb	r3, [r7, #5]
    int16_t f = 1 - r;
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	f1c3 0301 	rsb	r3, r3, #1
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	461a      	mov	r2, r3
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	837b      	strh	r3, [r7, #26]
    int16_t x = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	833b      	strh	r3, [r7, #24]
    int16_t y = r;
 8000d74:	88fb      	ldrh	r3, [r7, #6]
 8000d76:	82fb      	strh	r3, [r7, #22]

    GFX_DrawPixel(x0  , y0+r, color);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	b218      	sxth	r0, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	4413      	add	r3, r2
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	797a      	ldrb	r2, [r7, #5]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f001 fe68 	bl	8002a60 <SSD1306_DrawPixel>
    GFX_DrawPixel(x0  , y0-r, color);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	b218      	sxth	r0, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	b21b      	sxth	r3, r3
 8000da0:	797a      	ldrb	r2, [r7, #5]
 8000da2:	4619      	mov	r1, r3
 8000da4:	f001 fe5c 	bl	8002a60 <SSD1306_DrawPixel>
    GFX_DrawPixel(x0+r, y0  , color);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	4413      	add	r3, r2
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	b21b      	sxth	r3, r3
 8000db4:	68ba      	ldr	r2, [r7, #8]
 8000db6:	b211      	sxth	r1, r2
 8000db8:	797a      	ldrb	r2, [r7, #5]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f001 fe50 	bl	8002a60 <SSD1306_DrawPixel>
    GFX_DrawPixel(x0-r, y0  , color);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	b21b      	sxth	r3, r3
 8000dcc:	68ba      	ldr	r2, [r7, #8]
 8000dce:	b211      	sxth	r1, r2
 8000dd0:	797a      	ldrb	r2, [r7, #5]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f001 fe44 	bl	8002a60 <SSD1306_DrawPixel>

    while (x<y) {
 8000dd8:	e0a1      	b.n	8000f1e <GFX_DrawCircle+0x1e0>
        if (f >= 0) {
 8000dda:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	db0e      	blt.n	8000e00 <GFX_DrawCircle+0xc2>
            y--;
 8000de2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	3b01      	subs	r3, #1
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8000dee:	8b7b      	ldrh	r3, [r7, #26]
 8000df0:	3302      	adds	r3, #2
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	837b      	strh	r3, [r7, #26]
            f += ddF_y;
 8000df6:	8bfa      	ldrh	r2, [r7, #30]
 8000df8:	8b7b      	ldrh	r3, [r7, #26]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8000e00:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	3301      	adds	r3, #1
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8000e0c:	8bbb      	ldrh	r3, [r7, #28]
 8000e0e:	3302      	adds	r3, #2
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	83bb      	strh	r3, [r7, #28]
        f += ddF_x;
 8000e14:	8bfa      	ldrh	r2, [r7, #30]
 8000e16:	8bbb      	ldrh	r3, [r7, #28]
 8000e18:	4413      	add	r3, r2
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	83fb      	strh	r3, [r7, #30]

        GFX_DrawPixel(x0 + x, y0 + y, color);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	8b3b      	ldrh	r3, [r7, #24]
 8000e24:	4413      	add	r3, r2
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	b218      	sxth	r0, r3
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	8afb      	ldrh	r3, [r7, #22]
 8000e30:	4413      	add	r3, r2
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	b21b      	sxth	r3, r3
 8000e36:	797a      	ldrb	r2, [r7, #5]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f001 fe11 	bl	8002a60 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 - x, y0 + y, color);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	8b3b      	ldrh	r3, [r7, #24]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	b218      	sxth	r0, r3
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	8afb      	ldrh	r3, [r7, #22]
 8000e50:	4413      	add	r3, r2
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	b21b      	sxth	r3, r3
 8000e56:	797a      	ldrb	r2, [r7, #5]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f001 fe01 	bl	8002a60 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 + x, y0 - y, color);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	8b3b      	ldrh	r3, [r7, #24]
 8000e64:	4413      	add	r3, r2
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	b218      	sxth	r0, r3
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	8afb      	ldrh	r3, [r7, #22]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	797a      	ldrb	r2, [r7, #5]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f001 fdf1 	bl	8002a60 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 - x, y0 - y, color);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	8b3b      	ldrh	r3, [r7, #24]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	b218      	sxth	r0, r3
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	8afb      	ldrh	r3, [r7, #22]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	b21b      	sxth	r3, r3
 8000e96:	797a      	ldrb	r2, [r7, #5]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f001 fde1 	bl	8002a60 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 + y, y0 + x, color);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	8afb      	ldrh	r3, [r7, #22]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b218      	sxth	r0, r3
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	8b3b      	ldrh	r3, [r7, #24]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	b21b      	sxth	r3, r3
 8000eb6:	797a      	ldrb	r2, [r7, #5]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f001 fdd1 	bl	8002a60 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 - y, y0 + x, color);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	8afb      	ldrh	r3, [r7, #22]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	b218      	sxth	r0, r3
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	8b3b      	ldrh	r3, [r7, #24]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	b21b      	sxth	r3, r3
 8000ed6:	797a      	ldrb	r2, [r7, #5]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f001 fdc1 	bl	8002a60 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 + y, y0 - x, color);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	8afb      	ldrh	r3, [r7, #22]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	b218      	sxth	r0, r3
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	8b3b      	ldrh	r3, [r7, #24]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	b21b      	sxth	r3, r3
 8000ef6:	797a      	ldrb	r2, [r7, #5]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f001 fdb1 	bl	8002a60 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 - y, y0 - x, color);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	8afb      	ldrh	r3, [r7, #22]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	b218      	sxth	r0, r3
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	8b3b      	ldrh	r3, [r7, #24]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	b21b      	sxth	r3, r3
 8000f16:	797a      	ldrb	r2, [r7, #5]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f001 fda1 	bl	8002a60 <SSD1306_DrawPixel>
    while (x<y) {
 8000f1e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000f22:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	f6ff af57 	blt.w	8000dda <GFX_DrawCircle+0x9c>
    }

}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	3720      	adds	r7, #32
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <GFX_DrawFillCircleHelper>:
    }
}
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, uint8_t color)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b088      	sub	sp, #32
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	4611      	mov	r1, r2
 8000f42:	461a      	mov	r2, r3
 8000f44:	460b      	mov	r3, r1
 8000f46:	80fb      	strh	r3, [r7, #6]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	f1c3 0301 	rsb	r3, r3, #1
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	03d2      	lsls	r2, r2, #15
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8000f70:	e077      	b.n	8001062 <GFX_DrawFillCircleHelper+0x12c>
        if (f >= 0) {
 8000f72:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	db0e      	blt.n	8000f98 <GFX_DrawFillCircleHelper+0x62>
            y--;
 8000f7a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	3b01      	subs	r3, #1
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8000f86:	8b7b      	ldrh	r3, [r7, #26]
 8000f88:	3302      	adds	r3, #2
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8000f8e:	8bfa      	ldrh	r2, [r7, #30]
 8000f90:	8b7b      	ldrh	r3, [r7, #26]
 8000f92:	4413      	add	r3, r2
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8000f98:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8000fa4:	8bbb      	ldrh	r3, [r7, #28]
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8000fac:	8bfa      	ldrh	r2, [r7, #30]
 8000fae:	8bbb      	ldrh	r3, [r7, #28]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8000fb6:	797b      	ldrb	r3, [r7, #5]
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d025      	beq.n	800100c <GFX_DrawFillCircleHelper+0xd6>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 8000fc0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	18d0      	adds	r0, r2, r3
 8000fc8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	1ad1      	subs	r1, r2, r3
 8000fd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	1c5a      	adds	r2, r3, #1
 8000fd8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000fdc:	441a      	add	r2, r3
 8000fde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fe2:	f7ff fe72 	bl	8000cca <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8000fe6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	18d0      	adds	r0, r2, r3
 8000fee:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	1ad1      	subs	r1, r2, r3
 8000ff6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	1c5a      	adds	r2, r3, #1
 8000ffe:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001002:	441a      	add	r2, r3
 8001004:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001008:	f7ff fe5f 	bl	8000cca <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 800100c:	797b      	ldrb	r3, [r7, #5]
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d025      	beq.n	8001062 <GFX_DrawFillCircleHelper+0x12c>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 8001016:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	1ad0      	subs	r0, r2, r3
 800101e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	1ad1      	subs	r1, r2, r3
 8001026:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	1c5a      	adds	r2, r3, #1
 800102e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001032:	441a      	add	r2, r3
 8001034:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001038:	f7ff fe47 	bl	8000cca <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 800103c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	1ad0      	subs	r0, r2, r3
 8001044:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001048:	68ba      	ldr	r2, [r7, #8]
 800104a:	1ad1      	subs	r1, r2, r3
 800104c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001058:	441a      	add	r2, r3
 800105a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800105e:	f7ff fe34 	bl	8000cca <GFX_DrawFastVLine>
    while (x<y) {
 8001062:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001066:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800106a:	429a      	cmp	r2, r3
 800106c:	db81      	blt.n	8000f72 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 800106e:	bf00      	nop
 8001070:	bf00      	nop
 8001072:	3720      	adds	r7, #32
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <GFX_DrawFillCircle>:
#endif
#if USING_FILL_CIRCLE == 1
void GFX_DrawFillCircle(int x0, int y0, uint16_t r, uint8_t color)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af02      	add	r7, sp, #8
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	4611      	mov	r1, r2
 8001084:	461a      	mov	r2, r3
 8001086:	460b      	mov	r3, r1
 8001088:	80fb      	strh	r3, [r7, #6]
 800108a:	4613      	mov	r3, r2
 800108c:	717b      	strb	r3, [r7, #5]

	GFX_DrawFastVLine(x0, y0-r, 2*r+1, color);
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	1ad1      	subs	r1, r2, r3
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	797b      	ldrb	r3, [r7, #5]
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f7ff fe14 	bl	8000cca <GFX_DrawFastVLine>
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
 80010a2:	88fa      	ldrh	r2, [r7, #6]
 80010a4:	797b      	ldrb	r3, [r7, #5]
 80010a6:	9301      	str	r3, [sp, #4]
 80010a8:	2300      	movs	r3, #0
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2303      	movs	r3, #3
 80010ae:	68b9      	ldr	r1, [r7, #8]
 80010b0:	68f8      	ldr	r0, [r7, #12]
 80010b2:	f7ff ff40 	bl	8000f36 <GFX_DrawFillCircleHelper>
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <m24cxxInit>:
#include "M24Cxx.h"



void m24cxxInit(m24cxx_t *m24, I2C_HandleTypeDef *i2c, uint8_t addr, uint16_t memsize, GPIO_TypeDef *WcPort, uint16_t WcPin)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	4611      	mov	r1, r2
 80010ca:	461a      	mov	r2, r3
 80010cc:	460b      	mov	r3, r1
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	4613      	mov	r3, r2
 80010d2:	80bb      	strh	r3, [r7, #4]
	m24 -> addr    = addr<<1;
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	701a      	strb	r2, [r3, #0]
	m24 -> i2c     = i2c;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	605a      	str	r2, [r3, #4]
	m24 -> memsize = memsize;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	88ba      	ldrh	r2, [r7, #4]
 80010e8:	811a      	strh	r2, [r3, #8]
	m24 -> WcPort  = WcPort;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	60da      	str	r2, [r3, #12]
	m24 -> WcPin   = WcPin;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	8bba      	ldrh	r2, [r7, #28]
 80010f4:	821a      	strh	r2, [r3, #16]
	HAL_GPIO_WritePin(m24->WcPort, m24->WcPin, SET);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	68d8      	ldr	r0, [r3, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	8a1b      	ldrh	r3, [r3, #16]
 80010fe:	2201      	movs	r2, #1
 8001100:	4619      	mov	r1, r3
 8001102:	f003 fbf8 	bl	80048f6 <HAL_GPIO_WritePin>
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <m24cxxFullRead>:
	m24 -> WcIsZero = 1;
	HAL_I2C_Mem_Write_DMA(m24 -> i2c, m24 -> addr, DataAddr, 1, Data, 4);
}

void m24cxxFullRead(m24cxx_t *m24, uint8_t *Data)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af02      	add	r7, sp, #8
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Read_DMA(m24 -> i2c, m24 -> addr, 0x00, 1, Data, m24 -> memsize);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6858      	ldr	r0, [r3, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	b299      	uxth	r1, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	891b      	ldrh	r3, [r3, #8]
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	2200      	movs	r2, #0
 8001130:	f003 ffba 	bl	80050a8 <HAL_I2C_Mem_Read_DMA>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <m24cxxWcSetIt>:
		}
	HAL_GPIO_WritePin(m24->WcPort, m24->WcPin, SET);
}

void m24cxxWcSetIt(m24cxx_t *m24, I2C_HandleTypeDef *hi2c)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
	if(hi2c->Instance == m24->i2c->Instance && m24->WcIsZero == 1)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	d10e      	bne.n	8001172 <m24cxxWcSetIt+0x36>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	7c9b      	ldrb	r3, [r3, #18]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d10a      	bne.n	8001172 <m24cxxWcSetIt+0x36>
	{
		HAL_GPIO_WritePin(m24->WcPort, m24->WcPin, SET);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68d8      	ldr	r0, [r3, #12]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	8a1b      	ldrh	r3, [r3, #16]
 8001164:	2201      	movs	r2, #1
 8001166:	4619      	mov	r1, r3
 8001168:	f003 fbc5 	bl	80048f6 <HAL_GPIO_WritePin>
		m24->WcIsZero = 0;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	749a      	strb	r2, [r3, #18]
	}
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MX_ADC1_Init+0x74>)
 800118e:	4a19      	ldr	r2, [pc, #100]	; (80011f4 <MX_ADC1_Init+0x78>)
 8001190:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <MX_ADC1_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <MX_ADC1_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800119e:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_ADC1_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <MX_ADC1_Init+0x74>)
 80011a6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <MX_ADC1_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_ADC1_Init+0x74>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011b8:	480d      	ldr	r0, [pc, #52]	; (80011f0 <MX_ADC1_Init+0x74>)
 80011ba:	f002 fa6b 	bl	8003694 <HAL_ADC_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80011c4:	f000 fefa 	bl	8001fbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011c8:	2306      	movs	r3, #6
 80011ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011cc:	2301      	movs	r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_ADC1_Init+0x74>)
 80011da:	f002 fb45 	bl	8003868 <HAL_ADC_ConfigChannel>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80011e4:	f000 feea 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000454 	.word	0x20000454
 80011f4:	40012400 	.word	0x40012400

080011f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0318 	add.w	r3, r7, #24
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a1f      	ldr	r2, [pc, #124]	; (8001290 <HAL_ADC_MspInit+0x98>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d137      	bne.n	8001288 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001218:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <HAL_ADC_MspInit+0x9c>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a1d      	ldr	r2, [pc, #116]	; (8001294 <HAL_ADC_MspInit+0x9c>)
 800121e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b1b      	ldr	r3, [pc, #108]	; (8001294 <HAL_ADC_MspInit+0x9c>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <HAL_ADC_MspInit+0x9c>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a17      	ldr	r2, [pc, #92]	; (8001294 <HAL_ADC_MspInit+0x9c>)
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_ADC_MspInit+0x9c>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_ADC_MspInit+0x9c>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a11      	ldr	r2, [pc, #68]	; (8001294 <HAL_ADC_MspInit+0x9c>)
 800124e:	f043 0308 	orr.w	r3, r3, #8
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <HAL_ADC_MspInit+0x9c>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001260:	23c0      	movs	r3, #192	; 0xc0
 8001262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001264:	2303      	movs	r3, #3
 8001266:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	f107 0318 	add.w	r3, r7, #24
 800126c:	4619      	mov	r1, r3
 800126e:	480a      	ldr	r0, [pc, #40]	; (8001298 <HAL_ADC_MspInit+0xa0>)
 8001270:	f003 f996 	bl	80045a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001274:	2301      	movs	r3, #1
 8001276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001278:	2303      	movs	r3, #3
 800127a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f107 0318 	add.w	r3, r7, #24
 8001280:	4619      	mov	r1, r3
 8001282:	4806      	ldr	r0, [pc, #24]	; (800129c <HAL_ADC_MspInit+0xa4>)
 8001284:	f003 f98c 	bl	80045a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	; 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40012400 	.word	0x40012400
 8001294:	40021000 	.word	0x40021000
 8001298:	40010800 	.word	0x40010800
 800129c:	40010c00 	.word	0x40010c00

080012a0 <ButtonInitKey>:
#include "main.h"
#include "button.h"

//Button init
void ButtonInitKey(button_t * Key, GPIO_TypeDef *GpioPort, uint16_t GpioPin, uint32_t TimerDebounce, uint32_t TimerLongPressed, uint32_t TimerRepeat)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	4613      	mov	r3, r2
 80012ae:	80fb      	strh	r3, [r7, #6]
	Key->State = IDLE;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
	Key->GpioPort = GpioPort;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	605a      	str	r2, [r3, #4]
	Key->GpioPin = GpioPin;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	88fa      	ldrh	r2, [r7, #6]
 80012c0:	811a      	strh	r2, [r3, #8]
	Key->TimerDebounce = TimerDebounce;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	611a      	str	r2, [r3, #16]
	Key->TimerLongPressed = TimerLongPressed;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	615a      	str	r2, [r3, #20]
	Key->TimerRepeat = TimerRepeat;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	69fa      	ldr	r2, [r7, #28]
 80012d2:	619a      	str	r2, [r3, #24]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <ButtonRegisterPressCallback>:
	Key->TimerRepeat = Miliseconds;
}

//Callbacks
void ButtonRegisterPressCallback(button_t *Key, void *Callback)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
	Key->ButtonPressed = Callback;
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	61da      	str	r2, [r3, #28]
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <ButtonRegisterRepeatCallback>:
{
	Key->ButtonLongPressed = Callback;
}

void ButtonRegisterRepeatCallback(button_t *Key, void *Callback)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	Key->ButtonRepeat = Callback;
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	bc80      	pop	{r7}
 8001310:	4770      	bx	lr

08001312 <ButtonIdleRoutine>:
{
	Key->ButtonRelease = Callback;
}
//States routine
void ButtonIdleRoutine(button_t *Key)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	891b      	ldrh	r3, [r3, #8]
 8001322:	4619      	mov	r1, r3
 8001324:	4610      	mov	r0, r2
 8001326:	f003 facf 	bl	80048c8 <HAL_GPIO_ReadPin>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d107      	bne.n	8001340 <ButtonIdleRoutine+0x2e>
	{
		Key->LastTick = HAL_GetTick();
 8001330:	f002 f982 	bl	8003638 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	60da      	str	r2, [r3, #12]
		Key->State = DEBOUNCE;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
	}
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <ButtonDebounceRoutine>:

void ButtonDebounceRoutine(button_t *Key)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - Key->LastTick) >= Key->TimerDebounce)
 8001350:	f002 f972 	bl	8003638 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	1ad2      	subs	r2, r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	429a      	cmp	r2, r3
 8001362:	d31d      	bcc.n	80013a0 <ButtonDebounceRoutine+0x58>
	{
		if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	891b      	ldrh	r3, [r3, #8]
 800136c:	4619      	mov	r1, r3
 800136e:	4610      	mov	r0, r2
 8001370:	f003 faaa 	bl	80048c8 <HAL_GPIO_ReadPin>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10f      	bne.n	800139a <ButtonDebounceRoutine+0x52>
		{
			Key->State = PRESSED;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2202      	movs	r2, #2
 800137e:	701a      	strb	r2, [r3, #0]
			Key->LastTick = HAL_GetTick();
 8001380:	f002 f95a 	bl	8003638 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	60da      	str	r2, [r3, #12]
			if(Key->ButtonPressed != NULL)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d006      	beq.n	80013a0 <ButtonDebounceRoutine+0x58>
			{
				Key->ButtonPressed();
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	4798      	blx	r3
		else
		{
			Key->State = IDLE;
		}
	}
}
 8001398:	e002      	b.n	80013a0 <ButtonDebounceRoutine+0x58>
			Key->State = IDLE;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <ButtonPressedRoutine>:

void ButtonPressedRoutine(button_t *Key)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_SET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	891b      	ldrh	r3, [r3, #8]
 80013b8:	4619      	mov	r1, r3
 80013ba:	4610      	mov	r0, r2
 80013bc:	f003 fa84 	bl	80048c8 <HAL_GPIO_ReadPin>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d103      	bne.n	80013ce <ButtonPressedRoutine+0x26>
	{
		Key->State = RELEASE;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2204      	movs	r2, #4
 80013ca:	701a      	strb	r2, [r3, #0]
		if(Key->ButtonLongPressed != NULL)
		{
			Key->ButtonLongPressed();
		}
	}
}
 80013cc:	e018      	b.n	8001400 <ButtonPressedRoutine+0x58>
	else if(HAL_GetTick() - Key->LastTick >= Key->TimerLongPressed)
 80013ce:	f002 f933 	bl	8003638 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	1ad2      	subs	r2, r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d30e      	bcc.n	8001400 <ButtonPressedRoutine+0x58>
		Key->State = REPEAT;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2203      	movs	r2, #3
 80013e6:	701a      	strb	r2, [r3, #0]
		Key->LastTick = HAL_GetTick();
 80013e8:	f002 f926 	bl	8003638 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	60da      	str	r2, [r3, #12]
		if(Key->ButtonLongPressed != NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <ButtonPressedRoutine+0x58>
			Key->ButtonLongPressed();
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	4798      	blx	r3
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <ButtonRepeatRoutine>:

void ButtonRepeatRoutine(button_t *Key)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_SET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	891b      	ldrh	r3, [r3, #8]
 8001418:	4619      	mov	r1, r3
 800141a:	4610      	mov	r0, r2
 800141c:	f003 fa54 	bl	80048c8 <HAL_GPIO_ReadPin>
 8001420:	4603      	mov	r3, r0
 8001422:	2b01      	cmp	r3, #1
 8001424:	d103      	bne.n	800142e <ButtonRepeatRoutine+0x26>
	{
		Key->State = RELEASE;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2204      	movs	r2, #4
 800142a:	701a      	strb	r2, [r3, #0]
		if(Key->ButtonRepeat != NULL)
		{
			Key->ButtonRepeat();
		}
	}
}
 800142c:	e015      	b.n	800145a <ButtonRepeatRoutine+0x52>
	else if(HAL_GetTick() - Key->LastTick >= Key->TimerRepeat)
 800142e:	f002 f903 	bl	8003638 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	1ad2      	subs	r2, r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	429a      	cmp	r2, r3
 8001440:	d30b      	bcc.n	800145a <ButtonRepeatRoutine+0x52>
		Key->LastTick = HAL_GetTick();
 8001442:	f002 f8f9 	bl	8003638 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	60da      	str	r2, [r3, #12]
		if(Key->ButtonRepeat != NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001450:	2b00      	cmp	r3, #0
 8001452:	d002      	beq.n	800145a <ButtonRepeatRoutine+0x52>
			Key->ButtonRepeat();
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	4798      	blx	r3
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <ButtonReleaseRoutine>:

void ButtonReleaseRoutine(button_t *Key)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
	if(Key->ButtonRelease != NULL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146e:	2b00      	cmp	r3, #0
 8001470:	d002      	beq.n	8001478 <ButtonReleaseRoutine+0x16>
	{
		Key->ButtonRelease();
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001476:	4798      	blx	r3
	}
	Key->State = IDLE;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <ButtonTask>:

//State machines
void ButtonTask(button_t *Key)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	switch(Key->State)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b04      	cmp	r3, #4
 8001496:	d821      	bhi.n	80014dc <ButtonTask+0x54>
 8001498:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <ButtonTask+0x18>)
 800149a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149e:	bf00      	nop
 80014a0:	080014b5 	.word	0x080014b5
 80014a4:	080014bd 	.word	0x080014bd
 80014a8:	080014c5 	.word	0x080014c5
 80014ac:	080014cd 	.word	0x080014cd
 80014b0:	080014d5 	.word	0x080014d5
	{
	case IDLE:
		ButtonIdleRoutine(Key);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff2c 	bl	8001312 <ButtonIdleRoutine>
		break;
 80014ba:	e00f      	b.n	80014dc <ButtonTask+0x54>

	case DEBOUNCE:
		ButtonDebounceRoutine(Key);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff43 	bl	8001348 <ButtonDebounceRoutine>
		break;
 80014c2:	e00b      	b.n	80014dc <ButtonTask+0x54>

	case PRESSED:
		ButtonPressedRoutine(Key);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff6f 	bl	80013a8 <ButtonPressedRoutine>
		break;
 80014ca:	e007      	b.n	80014dc <ButtonTask+0x54>

	case REPEAT:
		ButtonRepeatRoutine(Key);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ff9b 	bl	8001408 <ButtonRepeatRoutine>
		break;
 80014d2:	e003      	b.n	80014dc <ButtonTask+0x54>

	case RELEASE:
		ButtonReleaseRoutine(Key);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ffc4 	bl	8001462 <ButtonReleaseRoutine>
		break;
 80014da:	bf00      	nop
	}
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <MX_DMA_Init+0x28>)
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	4a07      	ldr	r2, [pc, #28]	; (800150c <MX_DMA_Init+0x28>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6153      	str	r3, [r2, #20]
 80014f6:	4b05      	ldr	r3, [pc, #20]	; (800150c <MX_DMA_Init+0x28>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]

}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	40021000 	.word	0x40021000

08001510 <ds18b20_read_address>:
#define DS18B20_READ_SCRATCHPAD    0xBE



HAL_StatusTypeDef ds18b20_read_address(uint8_t* rom_code)
{
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t crc;

  if (wire_reset() != HAL_OK)
 8001518:	f7ff f916 	bl	8000748 <wire_reset>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <ds18b20_read_address+0x16>
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e021      	b.n	800156a <ds18b20_read_address+0x5a>

  wire_write(DS18B20_READ_ROM);
 8001526:	2033      	movs	r0, #51	; 0x33
 8001528:	f7ff f9a2 	bl	8000870 <wire_write>

  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	e009      	b.n	8001546 <ds18b20_read_address+0x36>
    rom_code[i] = wire_read();
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	18d4      	adds	r4, r2, r3
 8001538:	f7ff f958 	bl	80007ec <wire_read>
 800153c:	4603      	mov	r3, r0
 800153e:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	3301      	adds	r3, #1
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2b07      	cmp	r3, #7
 800154a:	ddf2      	ble.n	8001532 <ds18b20_read_address+0x22>

  crc = wire_crc(rom_code, DS18B20_ROM_CODE_SIZE - 1);
 800154c:	2107      	movs	r1, #7
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff f9d5 	bl	80008fe <wire_crc>
 8001554:	4603      	mov	r3, r0
 8001556:	72fb      	strb	r3, [r7, #11]
  if (rom_code[DS18B20_ROM_CODE_SIZE - 1] == crc)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3307      	adds	r3, #7
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	7afa      	ldrb	r2, [r7, #11]
 8001560:	429a      	cmp	r2, r3
 8001562:	d101      	bne.n	8001568 <ds18b20_read_address+0x58>
    return HAL_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	e000      	b.n	800156a <ds18b20_read_address+0x5a>
  else
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
}
 800156a:	4618      	mov	r0, r3
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}

08001572 <send_cmd>:

static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	460b      	mov	r3, r1
 800157c:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 800157e:	f7ff f8e3 	bl	8000748 <wire_reset>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <send_cmd+0x1a>
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e01e      	b.n	80015ca <send_cmd+0x58>

  if (!rom_code) {
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d103      	bne.n	800159a <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 8001592:	20cc      	movs	r0, #204	; 0xcc
 8001594:	f7ff f96c 	bl	8000870 <wire_write>
 8001598:	e012      	b.n	80015c0 <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 800159a:	2055      	movs	r0, #85	; 0x55
 800159c:	f7ff f968 	bl	8000870 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	e009      	b.n	80015ba <send_cmd+0x48>
      wire_write(rom_code[i]);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	4413      	add	r3, r2
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff f95e 	bl	8000870 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	3301      	adds	r3, #1
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2b07      	cmp	r3, #7
 80015be:	ddf2      	ble.n	80015a6 <send_cmd+0x34>
  }
  wire_write(cmd);
 80015c0:	78fb      	ldrb	r3, [r7, #3]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff f954 	bl	8000870 <wire_write>
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <ds18b20_start_measure>:

HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 80015da:	2144      	movs	r1, #68	; 0x44
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ffc8 	bl	8001572 <send_cmd>
 80015e2:	4603      	mov	r3, r0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <ds18b20_read_scratchpad>:

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 80015f6:	21be      	movs	r1, #190	; 0xbe
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ffba 	bl	8001572 <send_cmd>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e01e      	b.n	8001646 <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	e009      	b.n	8001622 <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	18d4      	adds	r4, r2, r3
 8001614:	f7ff f8ea 	bl	80007ec <wire_read>
 8001618:	4603      	mov	r3, r0
 800161a:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	3301      	adds	r3, #1
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2b08      	cmp	r3, #8
 8001626:	ddf2      	ble.n	800160e <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 8001628:	2108      	movs	r1, #8
 800162a:	6838      	ldr	r0, [r7, #0]
 800162c:	f7ff f967 	bl	80008fe <wire_crc>
 8001630:	4603      	mov	r3, r0
 8001632:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	3308      	adds	r3, #8
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	7afa      	ldrb	r2, [r7, #11]
 800163c:	429a      	cmp	r2, r3
 800163e:	d101      	bne.n	8001644 <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	e000      	b.n	8001646 <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	bd90      	pop	{r4, r7, pc}

0800164e <ds18b20_get_temp_wo_fp>:

  return temp / 16.0f;
}

uint32_t ds18b20_get_temp_wo_fp(const uint8_t* rom_code)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	4619      	mov	r1, r3
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ffc5 	bl	80015ec <ds18b20_read_scratchpad>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <ds18b20_get_temp_wo_fp+0x20>
    return 8500;
 8001668:	f242 1334 	movw	r3, #8500	; 0x2134
 800166c:	e00b      	b.n	8001686 <ds18b20_get_temp_wo_fp+0x38>
 800166e:	89bb      	ldrh	r3, [r7, #12]

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 8001670:	817b      	strh	r3, [r7, #10]

  return (temp * 100) / 16;
 8001672:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001676:	461a      	mov	r2, r3
 8001678:	2364      	movs	r3, #100	; 0x64
 800167a:	fb02 f303 	mul.w	r3, r2, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	da00      	bge.n	8001684 <ds18b20_get_temp_wo_fp+0x36>
 8001682:	330f      	adds	r3, #15
 8001684:	111b      	asrs	r3, r3, #4
}
 8001686:	4618      	mov	r0, r3
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08c      	sub	sp, #48	; 0x30
 8001694:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001696:	f107 0320 	add.w	r3, r7, #32
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016a4:	4b6f      	ldr	r3, [pc, #444]	; (8001864 <MX_GPIO_Init+0x1d4>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	4a6e      	ldr	r2, [pc, #440]	; (8001864 <MX_GPIO_Init+0x1d4>)
 80016aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ae:	6193      	str	r3, [r2, #24]
 80016b0:	4b6c      	ldr	r3, [pc, #432]	; (8001864 <MX_GPIO_Init+0x1d4>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b8:	61fb      	str	r3, [r7, #28]
 80016ba:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016bc:	4b69      	ldr	r3, [pc, #420]	; (8001864 <MX_GPIO_Init+0x1d4>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a68      	ldr	r2, [pc, #416]	; (8001864 <MX_GPIO_Init+0x1d4>)
 80016c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b66      	ldr	r3, [pc, #408]	; (8001864 <MX_GPIO_Init+0x1d4>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d0:	61bb      	str	r3, [r7, #24]
 80016d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d4:	4b63      	ldr	r3, [pc, #396]	; (8001864 <MX_GPIO_Init+0x1d4>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a62      	ldr	r2, [pc, #392]	; (8001864 <MX_GPIO_Init+0x1d4>)
 80016da:	f043 0310 	orr.w	r3, r3, #16
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b60      	ldr	r3, [pc, #384]	; (8001864 <MX_GPIO_Init+0x1d4>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b5d      	ldr	r3, [pc, #372]	; (8001864 <MX_GPIO_Init+0x1d4>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a5c      	ldr	r2, [pc, #368]	; (8001864 <MX_GPIO_Init+0x1d4>)
 80016f2:	f043 0304 	orr.w	r3, r3, #4
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b5a      	ldr	r3, [pc, #360]	; (8001864 <MX_GPIO_Init+0x1d4>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001704:	4b57      	ldr	r3, [pc, #348]	; (8001864 <MX_GPIO_Init+0x1d4>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	4a56      	ldr	r2, [pc, #344]	; (8001864 <MX_GPIO_Init+0x1d4>)
 800170a:	f043 0308 	orr.w	r3, r3, #8
 800170e:	6193      	str	r3, [r2, #24]
 8001710:	4b54      	ldr	r3, [pc, #336]	; (8001864 <MX_GPIO_Init+0x1d4>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800171c:	4b51      	ldr	r3, [pc, #324]	; (8001864 <MX_GPIO_Init+0x1d4>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	4a50      	ldr	r2, [pc, #320]	; (8001864 <MX_GPIO_Init+0x1d4>)
 8001722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001726:	6193      	str	r3, [r2, #24]
 8001728:	4b4e      	ldr	r3, [pc, #312]	; (8001864 <MX_GPIO_Init+0x1d4>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001734:	4b4b      	ldr	r3, [pc, #300]	; (8001864 <MX_GPIO_Init+0x1d4>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a4a      	ldr	r2, [pc, #296]	; (8001864 <MX_GPIO_Init+0x1d4>)
 800173a:	f043 0320 	orr.w	r3, r3, #32
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b48      	ldr	r3, [pc, #288]	; (8001864 <MX_GPIO_Init+0x1d4>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 0320 	and.w	r3, r3, #32
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800174c:	2200      	movs	r2, #0
 800174e:	f64b 71ff 	movw	r1, #49151	; 0xbfff
 8001752:	4845      	ldr	r0, [pc, #276]	; (8001868 <MX_GPIO_Init+0x1d8>)
 8001754:	f003 f8cf 	bl	80048f6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, COMM_PC_LED_Pin|COMM_CAN_LED_Pin|COMM_CAN_CHECK_LED_Pin|COMM_UART_LED_Pin
 8001758:	2200      	movs	r2, #0
 800175a:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800175e:	4843      	ldr	r0, [pc, #268]	; (800186c <MX_GPIO_Init+0x1dc>)
 8001760:	f003 f8c9 	bl	80048f6 <HAL_GPIO_WritePin>
                          |COMM_RS485_LED_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|RS485_TXE_Pin, GPIO_PIN_RESET);
 8001764:	2200      	movs	r2, #0
 8001766:	2112      	movs	r1, #18
 8001768:	4841      	ldr	r0, [pc, #260]	; (8001870 <MX_GPIO_Init+0x1e0>)
 800176a:	f003 f8c4 	bl	80048f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 800176e:	2201      	movs	r2, #1
 8001770:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001774:	483c      	ldr	r0, [pc, #240]	; (8001868 <MX_GPIO_Init+0x1d8>)
 8001776:	f003 f8be 	bl	80048f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WC_EEPROM_GPIO_Port, WC_EEPROM_Pin, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	2120      	movs	r1, #32
 800177e:	483d      	ldr	r0, [pc, #244]	; (8001874 <MX_GPIO_Init+0x1e4>)
 8001780:	f003 f8b9 	bl	80048f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001784:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001788:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178a:	2301      	movs	r3, #1
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2302      	movs	r3, #2
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001796:	f107 0320 	add.w	r3, r7, #32
 800179a:	4619      	mov	r1, r3
 800179c:	4832      	ldr	r0, [pc, #200]	; (8001868 <MX_GPIO_Init+0x1d8>)
 800179e:	f002 feff 	bl	80045a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017a2:	2304      	movs	r3, #4
 80017a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a6:	2300      	movs	r3, #0
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017aa:	2301      	movs	r3, #1
 80017ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017ae:	f107 0320 	add.w	r3, r7, #32
 80017b2:	4619      	mov	r1, r3
 80017b4:	482d      	ldr	r0, [pc, #180]	; (800186c <MX_GPIO_Init+0x1dc>)
 80017b6:	f002 fef3 	bl	80045a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin */
  GPIO_InitStruct.Pin = COMM_PC_LED_Pin|COMM_CAN_LED_Pin|COMM_CAN_CHECK_LED_Pin|COMM_UART_LED_Pin
 80017ba:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80017be:	623b      	str	r3, [r7, #32]
                          |COMM_RS485_LED_Pin|ERROR_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2302      	movs	r3, #2
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017cc:	f107 0320 	add.w	r3, r7, #32
 80017d0:	4619      	mov	r1, r3
 80017d2:	4826      	ldr	r0, [pc, #152]	; (800186c <MX_GPIO_Init+0x1dc>)
 80017d4:	f002 fee4 	bl	80045a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = CHECK_WIRE_1_Pin|CHECK_WIRE_2_Pin|CHECK_WIRE_3_Pin|CHECK_WIRE_4_Pin
 80017d8:	f240 330f 	movw	r3, #783	; 0x30f
 80017dc:	623b      	str	r3, [r7, #32]
                          |BUTTON_DOWN_Pin|BUTTON_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e6:	f107 0320 	add.w	r3, r7, #32
 80017ea:	4619      	mov	r1, r3
 80017ec:	4822      	ldr	r0, [pc, #136]	; (8001878 <MX_GPIO_Init+0x1e8>)
 80017ee:	f002 fed7 	bl	80045a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_OPEN_Pin;
 80017f2:	2301      	movs	r3, #1
 80017f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f6:	2300      	movs	r3, #0
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SW_OPEN_GPIO_Port, &GPIO_InitStruct);
 80017fe:	f107 0320 	add.w	r3, r7, #32
 8001802:	4619      	mov	r1, r3
 8001804:	481a      	ldr	r0, [pc, #104]	; (8001870 <MX_GPIO_Init+0x1e0>)
 8001806:	f002 fecb 	bl	80045a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RS485_TXE_Pin;
 800180a:	2312      	movs	r3, #18
 800180c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180e:	2301      	movs	r3, #1
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001816:	2302      	movs	r3, #2
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181a:	f107 0320 	add.w	r3, r7, #32
 800181e:	4619      	mov	r1, r3
 8001820:	4813      	ldr	r0, [pc, #76]	; (8001870 <MX_GPIO_Init+0x1e0>)
 8001822:	f002 febd 	bl	80045a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001826:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800182a:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182c:	2300      	movs	r3, #0
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001834:	f107 0320 	add.w	r3, r7, #32
 8001838:	4619      	mov	r1, r3
 800183a:	4810      	ldr	r0, [pc, #64]	; (800187c <MX_GPIO_Init+0x1ec>)
 800183c:	f002 feb0 	bl	80045a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WC_EEPROM_Pin;
 8001840:	2320      	movs	r3, #32
 8001842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	2301      	movs	r3, #1
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2302      	movs	r3, #2
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(WC_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 0320 	add.w	r3, r7, #32
 8001854:	4619      	mov	r1, r3
 8001856:	4807      	ldr	r0, [pc, #28]	; (8001874 <MX_GPIO_Init+0x1e4>)
 8001858:	f002 fea2 	bl	80045a0 <HAL_GPIO_Init>

}
 800185c:	bf00      	nop
 800185e:	3730      	adds	r7, #48	; 0x30
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40021000 	.word	0x40021000
 8001868:	40011800 	.word	0x40011800
 800186c:	40011c00 	.word	0x40011c00
 8001870:	40010800 	.word	0x40010800
 8001874:	40010c00 	.word	0x40010c00
 8001878:	40011000 	.word	0x40011000
 800187c:	40012000 	.word	0x40012000

08001880 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <MX_I2C1_Init+0x50>)
 8001886:	4a13      	ldr	r2, [pc, #76]	; (80018d4 <MX_I2C1_Init+0x54>)
 8001888:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <MX_I2C1_Init+0x50>)
 800188c:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <MX_I2C1_Init+0x58>)
 800188e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <MX_I2C1_Init+0x50>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <MX_I2C1_Init+0x50>)
 8001898:	2200      	movs	r2, #0
 800189a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <MX_I2C1_Init+0x50>)
 800189e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018a4:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <MX_I2C1_Init+0x50>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <MX_I2C1_Init+0x50>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <MX_I2C1_Init+0x50>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <MX_I2C1_Init+0x50>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018bc:	4804      	ldr	r0, [pc, #16]	; (80018d0 <MX_I2C1_Init+0x50>)
 80018be:	f003 f84b 	bl	8004958 <HAL_I2C_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018c8:	f000 fb78 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000484 	.word	0x20000484
 80018d4:	40005400 	.word	0x40005400
 80018d8:	00061a80 	.word	0x00061a80

080018dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0310 	add.w	r3, r7, #16
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a3b      	ldr	r2, [pc, #236]	; (80019e4 <HAL_I2C_MspInit+0x108>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d16f      	bne.n	80019dc <HAL_I2C_MspInit+0x100>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fc:	4b3a      	ldr	r3, [pc, #232]	; (80019e8 <HAL_I2C_MspInit+0x10c>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a39      	ldr	r2, [pc, #228]	; (80019e8 <HAL_I2C_MspInit+0x10c>)
 8001902:	f043 0308 	orr.w	r3, r3, #8
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b37      	ldr	r3, [pc, #220]	; (80019e8 <HAL_I2C_MspInit+0x10c>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001914:	23c0      	movs	r3, #192	; 0xc0
 8001916:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001918:	2312      	movs	r3, #18
 800191a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	4619      	mov	r1, r3
 8001926:	4831      	ldr	r0, [pc, #196]	; (80019ec <HAL_I2C_MspInit+0x110>)
 8001928:	f002 fe3a 	bl	80045a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800192c:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <HAL_I2C_MspInit+0x10c>)
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	4a2d      	ldr	r2, [pc, #180]	; (80019e8 <HAL_I2C_MspInit+0x10c>)
 8001932:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001936:	61d3      	str	r3, [r2, #28]
 8001938:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <HAL_I2C_MspInit+0x10c>)
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001944:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <HAL_I2C_MspInit+0x114>)
 8001946:	4a2b      	ldr	r2, [pc, #172]	; (80019f4 <HAL_I2C_MspInit+0x118>)
 8001948:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800194a:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <HAL_I2C_MspInit+0x114>)
 800194c:	2200      	movs	r2, #0
 800194e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001950:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <HAL_I2C_MspInit+0x114>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001956:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <HAL_I2C_MspInit+0x114>)
 8001958:	2280      	movs	r2, #128	; 0x80
 800195a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800195c:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <HAL_I2C_MspInit+0x114>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001962:	4b23      	ldr	r3, [pc, #140]	; (80019f0 <HAL_I2C_MspInit+0x114>)
 8001964:	2200      	movs	r2, #0
 8001966:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001968:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <HAL_I2C_MspInit+0x114>)
 800196a:	2200      	movs	r2, #0
 800196c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800196e:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <HAL_I2C_MspInit+0x114>)
 8001970:	2200      	movs	r2, #0
 8001972:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001974:	481e      	ldr	r0, [pc, #120]	; (80019f0 <HAL_I2C_MspInit+0x114>)
 8001976:	f002 f9bf 	bl	8003cf8 <HAL_DMA_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8001980:	f000 fb1c 	bl	8001fbc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a1a      	ldr	r2, [pc, #104]	; (80019f0 <HAL_I2C_MspInit+0x114>)
 8001988:	639a      	str	r2, [r3, #56]	; 0x38
 800198a:	4a19      	ldr	r2, [pc, #100]	; (80019f0 <HAL_I2C_MspInit+0x114>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_I2C_MspInit+0x11c>)
 8001992:	4a1a      	ldr	r2, [pc, #104]	; (80019fc <HAL_I2C_MspInit+0x120>)
 8001994:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001996:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <HAL_I2C_MspInit+0x11c>)
 8001998:	2210      	movs	r2, #16
 800199a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800199c:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <HAL_I2C_MspInit+0x11c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <HAL_I2C_MspInit+0x11c>)
 80019a4:	2280      	movs	r2, #128	; 0x80
 80019a6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <HAL_I2C_MspInit+0x11c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_I2C_MspInit+0x11c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80019b4:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_I2C_MspInit+0x11c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019ba:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <HAL_I2C_MspInit+0x11c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80019c0:	480d      	ldr	r0, [pc, #52]	; (80019f8 <HAL_I2C_MspInit+0x11c>)
 80019c2:	f002 f999 	bl	8003cf8 <HAL_DMA_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 80019cc:	f000 faf6 	bl	8001fbc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <HAL_I2C_MspInit+0x11c>)
 80019d4:	635a      	str	r2, [r3, #52]	; 0x34
 80019d6:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <HAL_I2C_MspInit+0x11c>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80019dc:	bf00      	nop
 80019de:	3720      	adds	r7, #32
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40005400 	.word	0x40005400
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010c00 	.word	0x40010c00
 80019f0:	200004d8 	.word	0x200004d8
 80019f4:	40020080 	.word	0x40020080
 80019f8:	2000051c 	.word	0x2000051c
 80019fc:	4002006c 	.word	0x4002006c

08001a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	for(uint8_t i = 0; i<255; i++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	71fb      	strb	r3, [r7, #7]
 8001a0a:	e006      	b.n	8001a1a <main+0x1a>
	{
		buff[i] = 'a';
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	4a5f      	ldr	r2, [pc, #380]	; (8001b8c <main+0x18c>)
 8001a10:	2161      	movs	r1, #97	; 0x61
 8001a12:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<255; i++)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	3301      	adds	r3, #1
 8001a18:	71fb      	strb	r3, [r7, #7]
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	2bff      	cmp	r3, #255	; 0xff
 8001a1e:	d1f5      	bne.n	8001a0c <main+0xc>
	}
	buff[254] = 0;
 8001a20:	4b5a      	ldr	r3, [pc, #360]	; (8001b8c <main+0x18c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a28:	f001 fdae 	bl	8003588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a2c:	f000 f8d8 	bl	8001be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a30:	f7ff fe2e 	bl	8001690 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a34:	f7ff fd56 	bl	80014e4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001a38:	f001 fca2 	bl	8003380 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001a3c:	f7ff ff20 	bl	8001880 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001a40:	f00c ff08 	bl	800e854 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001a44:	f7ff fb9a 	bl	800117c <MX_ADC1_Init>
  MX_TIM3_Init();
 8001a48:	f001 fa8c 	bl	8002f64 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a4c:	f001 fb00 	bl	8003050 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001a50:	f001 fc42 	bl	80032d8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001a54:	f001 fc6a 	bl	800332c <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001a58:	f000 f921 	bl	8001c9e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  OldTick500ms = HAL_GetTick();
 8001a5c:	f001 fdec 	bl	8003638 <HAL_GetTick>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4a4b      	ldr	r2, [pc, #300]	; (8001b90 <main+0x190>)
 8001a64:	6013      	str	r3, [r2, #0]
  OldTick100ms = HAL_GetTick();
 8001a66:	f001 fde7 	bl	8003638 <HAL_GetTick>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4a49      	ldr	r2, [pc, #292]	; (8001b94 <main+0x194>)
 8001a6e:	6013      	str	r3, [r2, #0]
  OldTick50ms = HAL_GetTick();
 8001a70:	f001 fde2 	bl	8003638 <HAL_GetTick>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4a48      	ldr	r2, [pc, #288]	; (8001b98 <main+0x198>)
 8001a78:	6013      	str	r3, [r2, #0]

  if (ds18b20_read_address(ds1) != HAL_OK)
 8001a7a:	4848      	ldr	r0, [pc, #288]	; (8001b9c <main+0x19c>)
 8001a7c:	f7ff fd48 	bl	8001510 <ds18b20_read_address>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <main+0x8a>
  {
    Error_Handler();
 8001a86:	f000 fa99 	bl	8001fbc <Error_Handler>
  }

  ButtonInitKey(&KeyUp, BUTTON_UP_GPIO_Port, BUTTON_UP_Pin, 20, 1000, 500);
 8001a8a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	2314      	movs	r3, #20
 8001a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a9c:	4940      	ldr	r1, [pc, #256]	; (8001ba0 <main+0x1a0>)
 8001a9e:	4841      	ldr	r0, [pc, #260]	; (8001ba4 <main+0x1a4>)
 8001aa0:	f7ff fbfe 	bl	80012a0 <ButtonInitKey>
  ButtonInitKey(&KeyDown, BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin, 20, 1000, 500);
 8001aa4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001aa8:	9301      	str	r3, [sp, #4]
 8001aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	2314      	movs	r3, #20
 8001ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ab6:	493a      	ldr	r1, [pc, #232]	; (8001ba0 <main+0x1a0>)
 8001ab8:	483b      	ldr	r0, [pc, #236]	; (8001ba8 <main+0x1a8>)
 8001aba:	f7ff fbf1 	bl	80012a0 <ButtonInitKey>

  ButtonRegisterPressCallback(&KeyDown, MenuNext);
 8001abe:	493b      	ldr	r1, [pc, #236]	; (8001bac <main+0x1ac>)
 8001ac0:	4839      	ldr	r0, [pc, #228]	; (8001ba8 <main+0x1a8>)
 8001ac2:	f7ff fc0c 	bl	80012de <ButtonRegisterPressCallback>
  ButtonRegisterRepeatCallback(&KeyDown, MenuPrev);
 8001ac6:	493a      	ldr	r1, [pc, #232]	; (8001bb0 <main+0x1b0>)
 8001ac8:	4837      	ldr	r0, [pc, #220]	; (8001ba8 <main+0x1a8>)
 8001aca:	f7ff fc15 	bl	80012f8 <ButtonRegisterRepeatCallback>
  ButtonRegisterPressCallback(&KeyUp, MenuEnter);
 8001ace:	4939      	ldr	r1, [pc, #228]	; (8001bb4 <main+0x1b4>)
 8001ad0:	4834      	ldr	r0, [pc, #208]	; (8001ba4 <main+0x1a4>)
 8001ad2:	f7ff fc04 	bl	80012de <ButtonRegisterPressCallback>

  SSD1306_Init(&hi2c1);
 8001ad6:	4838      	ldr	r0, [pc, #224]	; (8001bb8 <main+0x1b8>)
 8001ad8:	f001 f8a0 	bl	8002c1c <SSD1306_Init>

  MenuRefresh();
 8001adc:	f000 fc68 	bl	80023b0 <MenuRefresh>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4836      	ldr	r0, [pc, #216]	; (8001bbc <main+0x1bc>)
 8001ae4:	f007 ff60 	bl	80099a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001ae8:	2104      	movs	r1, #4
 8001aea:	4834      	ldr	r0, [pc, #208]	; (8001bbc <main+0x1bc>)
 8001aec:	f007 ff5c 	bl	80099a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001af0:	2108      	movs	r1, #8
 8001af2:	4832      	ldr	r0, [pc, #200]	; (8001bbc <main+0x1bc>)
 8001af4:	f007 ff58 	bl	80099a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001af8:	210c      	movs	r1, #12
 8001afa:	4830      	ldr	r0, [pc, #192]	; (8001bbc <main+0x1bc>)
 8001afc:	f007 ff54 	bl	80099a8 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 100);
 8001b00:	4b2e      	ldr	r3, [pc, #184]	; (8001bbc <main+0x1bc>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2264      	movs	r2, #100	; 0x64
 8001b06:	635a      	str	r2, [r3, #52]	; 0x34

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  GPIOF->ODR = 0x400;
 8001b08:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <main+0x1c0>)
 8001b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b0e:	60da      	str	r2, [r3, #12]

  m24cxxInit(&M24C02, &hi2c1, EEPROM_ADDRES, M24C02_MEM_SIZE, WC_EEPROM_GPIO_Port, WC_EEPROM_Pin);
 8001b10:	2320      	movs	r3, #32
 8001b12:	9301      	str	r3, [sp, #4]
 8001b14:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <main+0x1c4>)
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b1c:	2250      	movs	r2, #80	; 0x50
 8001b1e:	4926      	ldr	r1, [pc, #152]	; (8001bb8 <main+0x1b8>)
 8001b20:	4829      	ldr	r0, [pc, #164]	; (8001bc8 <main+0x1c8>)
 8001b22:	f7ff facc 	bl	80010be <m24cxxInit>

  while (1)
  {
	  if(LineCounter)
 8001b26:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <main+0x1cc>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00c      	beq.n	8001b48 <main+0x148>
	  {
		  Parser_TakeLine(&ReceiveBuffer, ReceivedData);
 8001b2e:	4928      	ldr	r1, [pc, #160]	; (8001bd0 <main+0x1d0>)
 8001b30:	4828      	ldr	r0, [pc, #160]	; (8001bd4 <main+0x1d4>)
 8001b32:	f000 fe81 	bl	8002838 <Parser_TakeLine>

		  LineCounter--;
 8001b36:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <main+0x1cc>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <main+0x1cc>)
 8001b40:	701a      	strb	r2, [r3, #0]

		  Parser_parse(ReceivedData);
 8001b42:	4823      	ldr	r0, [pc, #140]	; (8001bd0 <main+0x1d0>)
 8001b44:	f000 fea0 	bl	8002888 <Parser_parse>
	  }
	  if(DataToTransmit > 0 )
 8001b48:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <main+0x1d8>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d010      	beq.n	8001b72 <main+0x172>
	  {

		  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8001b50:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <main+0x1dc>)
 8001b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8001b56:	603b      	str	r3, [r7, #0]
		  if (hcdc->TxState == 0)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d107      	bne.n	8001b72 <main+0x172>
		  {
			  UsbTransmitTask();
 8001b62:	f000 fa01 	bl	8001f68 <UsbTransmitTask>

			  DataToTransmit--;
 8001b66:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <main+0x1d8>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <main+0x1d8>)
 8001b70:	701a      	strb	r2, [r3, #0]
		  }

	  }

	  IntervalFunc100ms();
 8001b72:	f000 f93b 	bl	8001dec <IntervalFunc100ms>
	  IntervalFunc500ms();
 8001b76:	f000 f8df 	bl	8001d38 <IntervalFunc500ms>
	  IntervalFunc50ms();
 8001b7a:	f000 f94f 	bl	8001e1c <IntervalFunc50ms>

	  ButtonTask(&KeyDown);
 8001b7e:	480a      	ldr	r0, [pc, #40]	; (8001ba8 <main+0x1a8>)
 8001b80:	f7ff fc82 	bl	8001488 <ButtonTask>
	  ButtonTask(&KeyUp);
 8001b84:	4807      	ldr	r0, [pc, #28]	; (8001ba4 <main+0x1a4>)
 8001b86:	f7ff fc7f 	bl	8001488 <ButtonTask>
	  if(LineCounter)
 8001b8a:	e7cc      	b.n	8001b26 <main+0x126>
 8001b8c:	20000ef8 	.word	0x20000ef8
 8001b90:	20000dc8 	.word	0x20000dc8
 8001b94:	20000dcc 	.word	0x20000dcc
 8001b98:	20000dd0 	.word	0x20000dd0
 8001b9c:	20000ddc 	.word	0x20000ddc
 8001ba0:	40011000 	.word	0x40011000
 8001ba4:	20000560 	.word	0x20000560
 8001ba8:	2000058c 	.word	0x2000058c
 8001bac:	08002135 	.word	0x08002135
 8001bb0:	080021b9 	.word	0x080021b9
 8001bb4:	08002231 	.word	0x08002231
 8001bb8:	20000484 	.word	0x20000484
 8001bbc:	200018a0 	.word	0x200018a0
 8001bc0:	40011c00 	.word	0x40011c00
 8001bc4:	40010c00 	.word	0x40010c00
 8001bc8:	20000de4 	.word	0x20000de4
 8001bcc:	200009c0 	.word	0x200009c0
 8001bd0:	200009c4 	.word	0x200009c4
 8001bd4:	200005b8 	.word	0x200005b8
 8001bd8:	20000dc4 	.word	0x20000dc4
 8001bdc:	200019c8 	.word	0x200019c8

08001be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b096      	sub	sp, #88	; 0x58
 8001be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bea:	2228      	movs	r2, #40	; 0x28
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f00d fb0c 	bl	800f20c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
 8001c10:	611a      	str	r2, [r3, #16]
 8001c12:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c14:	2301      	movs	r3, #1
 8001c16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c1c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c22:	2301      	movs	r3, #1
 8001c24:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c26:	2302      	movs	r3, #2
 8001c28:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c2e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001c30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c34:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f007 f944 	bl	8008ec8 <HAL_RCC_OscConfig>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001c46:	f000 f9b9 	bl	8001fbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c4a:	230f      	movs	r3, #15
 8001c4c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c52:	2300      	movs	r3, #0
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	2102      	movs	r1, #2
 8001c66:	4618      	mov	r0, r3
 8001c68:	f007 fbb0 	bl	80093cc <HAL_RCC_ClockConfig>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001c72:	f000 f9a3 	bl	8001fbc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001c76:	2312      	movs	r3, #18
 8001c78:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c7e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	4618      	mov	r0, r3
 8001c88:	f007 fd30 	bl	80096ec <HAL_RCCEx_PeriphCLKConfig>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001c92:	f000 f993 	bl	8001fbc <Error_Handler>
  }
}
 8001c96:	bf00      	nop
 8001c98:	3758      	adds	r7, #88	; 0x58
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	201f      	movs	r0, #31
 8001ca8:	f001 ffef 	bl	8003c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001cac:	201f      	movs	r0, #31
 8001cae:	f002 f808 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	2011      	movs	r0, #17
 8001cb8:	f001 ffe7 	bl	8003c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001cbc:	2011      	movs	r0, #17
 8001cbe:	f002 f800 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2010      	movs	r0, #16
 8001cc8:	f001 ffdf 	bl	8003c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001ccc:	2010      	movs	r0, #16
 8001cce:	f001 fff8 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
  /* USB_LP_CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2014      	movs	r0, #20
 8001cd8:	f001 ffd7 	bl	8003c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001cdc:	2014      	movs	r0, #20
 8001cde:	f001 fff0 	bl	8003cc2 <HAL_NVIC_EnableIRQ>
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <all>:

/* USER CODE BEGIN 4 */

void all(uint8_t x)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(x);
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f001 fcaa 	bl	800364c <HAL_Delay>
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <GpioFLedToggle>:



void GpioFLedToggle()
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
	GPIOF->ODR = GPIOF->ODR << 1;
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <GpioFLedToggle+0x34>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <GpioFLedToggle+0x34>)
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	60d3      	str	r3, [r2, #12]
	if(!(GPIOF->ODR <= 0x8000 && GPIOF->ODR >= 0x200))
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <GpioFLedToggle+0x34>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d16:	d804      	bhi.n	8001d22 <GpioFLedToggle+0x22>
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <GpioFLedToggle+0x34>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d20:	d203      	bcs.n	8001d2a <GpioFLedToggle+0x2a>
	{
		GPIOF->ODR = 0x200;
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <GpioFLedToggle+0x34>)
 8001d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d28:	60da      	str	r2, [r3, #12]
	}
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40011c00 	.word	0x40011c00

08001d38 <IntervalFunc500ms>:

void IntervalFunc500ms(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	  if(HAL_GetTick() - OldTick500ms >500)
 8001d3c:	f001 fc7c 	bl	8003638 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <IntervalFunc500ms+0x94>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d4c:	d93c      	bls.n	8001dc8 <IntervalFunc500ms+0x90>
	  {
		  OldTick500ms = HAL_GetTick();
 8001d4e:	f001 fc73 	bl	8003638 <HAL_GetTick>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4a1d      	ldr	r2, [pc, #116]	; (8001dcc <IntervalFunc500ms+0x94>)
 8001d56:	6013      	str	r3, [r2, #0]

		  if(M24C02.i2c -> State == HAL_I2C_STATE_READY)
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <IntervalFunc500ms+0x98>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b20      	cmp	r3, #32
 8001d64:	d103      	bne.n	8001d6e <IntervalFunc500ms+0x36>
		  {
			  m24cxxFullRead(&M24C02, EpromBufer);
 8001d66:	491b      	ldr	r1, [pc, #108]	; (8001dd4 <IntervalFunc500ms+0x9c>)
 8001d68:	4819      	ldr	r0, [pc, #100]	; (8001dd0 <IntervalFunc500ms+0x98>)
 8001d6a:	f7ff f9d0 	bl	800110e <m24cxxFullRead>
		  }

//		  GpioELedToggle();
		  GpioFLedToggle();
 8001d6e:	f7ff ffc7 	bl	8001d00 <GpioFLedToggle>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8001d72:	2102      	movs	r1, #2
 8001d74:	4818      	ldr	r0, [pc, #96]	; (8001dd8 <IntervalFunc500ms+0xa0>)
 8001d76:	f002 fdd6 	bl	8004926 <HAL_GPIO_TogglePin>

		  static uint8_t TempMeasureFlag = 0;
		  if(!TempMeasureFlag)
 8001d7a:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <IntervalFunc500ms+0xa4>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d106      	bne.n	8001d90 <IntervalFunc500ms+0x58>
		  {
			  ds18b20_start_measure(NULL);
 8001d82:	2000      	movs	r0, #0
 8001d84:	f7ff fc25 	bl	80015d2 <ds18b20_start_measure>
			  TempMeasureFlag = 1;
 8001d88:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <IntervalFunc500ms+0xa4>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
			  Temperature = Temp;
			  Temperature = Temperature/100;
			  TempMeasureFlag = 0;
		  }
	  }
}
 8001d8e:	e01b      	b.n	8001dc8 <IntervalFunc500ms+0x90>
			  Temp = ds18b20_get_temp_wo_fp(NULL);
 8001d90:	2000      	movs	r0, #0
 8001d92:	f7ff fc5c 	bl	800164e <ds18b20_get_temp_wo_fp>
 8001d96:	4603      	mov	r3, r0
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <IntervalFunc500ms+0xa8>)
 8001d9c:	601a      	str	r2, [r3, #0]
			  Temperature = Temp;
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <IntervalFunc500ms+0xa8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fb00 	bl	80003a8 <__aeabi_i2f>
 8001da8:	4603      	mov	r3, r0
 8001daa:	4a0e      	ldr	r2, [pc, #56]	; (8001de4 <IntervalFunc500ms+0xac>)
 8001dac:	6013      	str	r3, [r2, #0]
			  Temperature = Temperature/100;
 8001dae:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <IntervalFunc500ms+0xac>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	490d      	ldr	r1, [pc, #52]	; (8001de8 <IntervalFunc500ms+0xb0>)
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fbff 	bl	80005b8 <__aeabi_fdiv>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <IntervalFunc500ms+0xac>)
 8001dc0:	601a      	str	r2, [r3, #0]
			  TempMeasureFlag = 0;
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <IntervalFunc500ms+0xa4>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000dc8 	.word	0x20000dc8
 8001dd0:	20000de4 	.word	0x20000de4
 8001dd4:	20000df8 	.word	0x20000df8
 8001dd8:	40010800 	.word	0x40010800
 8001ddc:	20000ff8 	.word	0x20000ff8
 8001de0:	20000dd4 	.word	0x20000dd4
 8001de4:	20000dd8 	.word	0x20000dd8
 8001de8:	42c80000 	.word	0x42c80000

08001dec <IntervalFunc100ms>:

void IntervalFunc100ms(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - OldTick100ms >100)
 8001df0:	f001 fc22 	bl	8003638 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <IntervalFunc100ms+0x28>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b64      	cmp	r3, #100	; 0x64
 8001dfe:	d907      	bls.n	8001e10 <IntervalFunc100ms+0x24>
	{
		UsbBuffWrite((char*)buff);
 8001e00:	4805      	ldr	r0, [pc, #20]	; (8001e18 <IntervalFunc100ms+0x2c>)
 8001e02:	f000 f86d 	bl	8001ee0 <UsbBuffWrite>
		OldTick100ms = HAL_GetTick();
 8001e06:	f001 fc17 	bl	8003638 <HAL_GetTick>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4a01      	ldr	r2, [pc, #4]	; (8001e14 <IntervalFunc100ms+0x28>)
 8001e0e:	6013      	str	r3, [r2, #0]
	}

}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000dcc 	.word	0x20000dcc
 8001e18:	20000ef8 	.word	0x20000ef8

08001e1c <IntervalFunc50ms>:

void IntervalFunc50ms(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - OldTick50ms >50)
 8001e20:	f001 fc0a 	bl	8003638 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <IntervalFunc50ms+0x2c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b32      	cmp	r3, #50	; 0x32
 8001e2e:	d908      	bls.n	8001e42 <IntervalFunc50ms+0x26>
	{
		ScrollString();
 8001e30:	f000 fb88 	bl	8002544 <ScrollString>
		SSD1306_Display();
 8001e34:	f000 fec0 	bl	8002bb8 <SSD1306_Display>

		OldTick50ms = HAL_GetTick();
 8001e38:	f001 fbfe 	bl	8003638 <HAL_GetTick>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	4a02      	ldr	r2, [pc, #8]	; (8001e48 <IntervalFunc50ms+0x2c>)
 8001e40:	6013      	str	r3, [r2, #0]
	}

}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000dd0 	.word	0x20000dd0

08001e4c <HAL_I2C_MemTxCpltCallback>:



void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	m24cxxWcSetIt(&M24C02, hi2c);
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	4803      	ldr	r0, [pc, #12]	; (8001e64 <HAL_I2C_MemTxCpltCallback+0x18>)
 8001e58:	f7ff f970 	bl	800113c <m24cxxWcSetIt>
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000de4 	.word	0x20000de4

08001e68 <CDC_ReveiveCallback>:

void CDC_ReveiveCallback(uint8_t *Buffer, uint8_t Length)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	70fb      	strb	r3, [r7, #3]
	if(Length > 0)
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d027      	beq.n	8001eca <CDC_ReveiveCallback+0x62>
	{
		uint8_t i = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	73fb      	strb	r3, [r7, #15]
		while(i < Length)
 8001e7e:	e020      	b.n	8001ec2 <CDC_ReveiveCallback+0x5a>
		{
		if (RB_OK == Ring_Buffer_Write(&ReceiveBuffer, Buffer[i]))
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4812      	ldr	r0, [pc, #72]	; (8001ed4 <CDC_ReveiveCallback+0x6c>)
 8001e8c:	f000 fd76 	bl	800297c <Ring_Buffer_Write>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10c      	bne.n	8001eb0 <CDC_ReveiveCallback+0x48>
		{
			if(Buffer[i] == ENDLINE)
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b5e      	cmp	r3, #94	; 0x5e
 8001ea0:	d10c      	bne.n	8001ebc <CDC_ReveiveCallback+0x54>
			{
				LineCounter++;
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <CDC_ReveiveCallback+0x70>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <CDC_ReveiveCallback+0x70>)
 8001eac:	701a      	strb	r2, [r3, #0]
 8001eae:	e005      	b.n	8001ebc <CDC_ReveiveCallback+0x54>
			}
		}
		else
		{
			Ring_Buffer_Flush(&ReceiveBuffer);
 8001eb0:	4808      	ldr	r0, [pc, #32]	; (8001ed4 <CDC_ReveiveCallback+0x6c>)
 8001eb2:	f000 fd8b 	bl	80029cc <Ring_Buffer_Flush>
			UsbBuffWrite("ERROR");
 8001eb6:	4809      	ldr	r0, [pc, #36]	; (8001edc <CDC_ReveiveCallback+0x74>)
 8001eb8:	f000 f812 	bl	8001ee0 <UsbBuffWrite>
		}
		i++;
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	73fb      	strb	r3, [r7, #15]
		while(i < Length)
 8001ec2:	7bfa      	ldrb	r2, [r7, #15]
 8001ec4:	78fb      	ldrb	r3, [r7, #3]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d3da      	bcc.n	8001e80 <CDC_ReveiveCallback+0x18>
		}
	}
}
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200005b8 	.word	0x200005b8
 8001ed8:	200009c0 	.word	0x200009c0
 8001edc:	080103f8 	.word	0x080103f8

08001ee0 <UsbBuffWrite>:

void UsbBuffWrite(char * Message)
{
 8001ee0:	b590      	push	{r4, r7, lr}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

	DataToTransmit++;
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <UsbBuffWrite+0x80>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	3301      	adds	r3, #1
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <UsbBuffWrite+0x80>)
 8001ef2:	701a      	strb	r2, [r3, #0]
	for(uint8_t y = 0 ; y < strlen(Message) ; y++)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	73fb      	strb	r3, [r7, #15]
 8001ef8:	e016      	b.n	8001f28 <UsbBuffWrite+0x48>
	{
		if(RB_OK == Ring_Buffer_Write(&TransmitBuffer, Message[y]))
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	4413      	add	r3, r2
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	4619      	mov	r1, r3
 8001f04:	4817      	ldr	r0, [pc, #92]	; (8001f64 <UsbBuffWrite+0x84>)
 8001f06:	f000 fd39 	bl	800297c <Ring_Buffer_Write>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <UsbBuffWrite+0x42>
		{

		}
		else
		{
			Ring_Buffer_Flush(&TransmitBuffer);
 8001f10:	4814      	ldr	r0, [pc, #80]	; (8001f64 <UsbBuffWrite+0x84>)
 8001f12:	f000 fd5b 	bl	80029cc <Ring_Buffer_Flush>
			DataToTransmit--;
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <UsbBuffWrite+0x80>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <UsbBuffWrite+0x80>)
 8001f20:	701a      	strb	r2, [r3, #0]
	for(uint8_t y = 0 ; y < strlen(Message) ; y++)
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	3301      	adds	r3, #1
 8001f26:	73fb      	strb	r3, [r7, #15]
 8001f28:	7bfc      	ldrb	r4, [r7, #15]
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7fe f97a 	bl	8000224 <strlen>
 8001f30:	4603      	mov	r3, r0
 8001f32:	429c      	cmp	r4, r3
 8001f34:	d3e1      	bcc.n	8001efa <UsbBuffWrite+0x1a>
		}
	}

	if(RB_OK == Ring_Buffer_Write(&TransmitBuffer, '^'))
 8001f36:	215e      	movs	r1, #94	; 0x5e
 8001f38:	480a      	ldr	r0, [pc, #40]	; (8001f64 <UsbBuffWrite+0x84>)
 8001f3a:	f000 fd1f 	bl	800297c <Ring_Buffer_Write>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d008      	beq.n	8001f56 <UsbBuffWrite+0x76>
	{

	}
	else
	{
		Ring_Buffer_Flush(&TransmitBuffer);
 8001f44:	4807      	ldr	r0, [pc, #28]	; (8001f64 <UsbBuffWrite+0x84>)
 8001f46:	f000 fd41 	bl	80029cc <Ring_Buffer_Flush>
		DataToTransmit--;
 8001f4a:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <UsbBuffWrite+0x80>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <UsbBuffWrite+0x80>)
 8001f54:	701a      	strb	r2, [r3, #0]
	}

}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd90      	pop	{r4, r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000dc4 	.word	0x20000dc4
 8001f64:	200007bc 	.word	0x200007bc

08001f68 <UsbTransmitTask>:

void UsbTransmitTask(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	71bb      	strb	r3, [r7, #6]
		do
		{
			if(Ring_Buffer_Read(&TransmitBuffer, &tmp) == RB_OK)
 8001f76:	1dbb      	adds	r3, r7, #6
 8001f78:	4619      	mov	r1, r3
 8001f7a:	480e      	ldr	r0, [pc, #56]	; (8001fb4 <UsbTransmitTask+0x4c>)
 8001f7c:	f000 fcd6 	bl	800292c <Ring_Buffer_Read>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10a      	bne.n	8001f9c <UsbTransmitTask+0x34>
			{
			TransmitData[i] = tmp;
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	79b9      	ldrb	r1, [r7, #6]
 8001f8a:	4a0b      	ldr	r2, [pc, #44]	; (8001fb8 <UsbTransmitTask+0x50>)
 8001f8c:	54d1      	strb	r1, [r2, r3]
			i++;
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	3301      	adds	r3, #1
 8001f92:	71fb      	strb	r3, [r7, #7]
			else
			{
				break;
			}

		} while(tmp != '^');
 8001f94:	79bb      	ldrb	r3, [r7, #6]
 8001f96:	2b5e      	cmp	r3, #94	; 0x5e
 8001f98:	d1ed      	bne.n	8001f76 <UsbTransmitTask+0xe>
 8001f9a:	e000      	b.n	8001f9e <UsbTransmitTask+0x36>
				break;
 8001f9c:	bf00      	nop

		CDC_Transmit_FS(TransmitData, i);
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4804      	ldr	r0, [pc, #16]	; (8001fb8 <UsbTransmitTask+0x50>)
 8001fa6:	f00c fd2d 	bl	800ea04 <CDC_Transmit_FS>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200007bc 	.word	0x200007bc
 8001fb8:	20000bc4 	.word	0x20000bc4

08001fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc0:	b672      	cpsid	i
}
 8001fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <Error_Handler+0x8>
	...

08001fc8 <HeaderDraw>:
menu_t menu6 = { "ELEMENT 6", NULL, &menu5, NULL, NULL, NULL };


void HeaderDraw(char *header)

{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08c      	sub	sp, #48	; 0x30
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	6078      	str	r0, [r7, #4]
	  GFX_SetFont(font_8x5);
 8001fd0:	4857      	ldr	r0, [pc, #348]	; (8002130 <HeaderDraw+0x168>)
 8001fd2:	f7fe fcb5 	bl	8000940 <GFX_SetFont>
	  GFX_SetFontSize(1);
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f7fe fcc0 	bl	800095c <GFX_SetFontSize>
	  size_t headerLen = strlen(header);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7fe f921 	bl	8000224 <strlen>
 8001fe2:	6238      	str	r0, [r7, #32]
	  char buff[20];
	  if(headerLen % 2)
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d04e      	beq.n	800208c <HeaderDraw+0xc4>
	  {
		  for(uint8_t i = 0; i<19; i++)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ff4:	e03a      	b.n	800206c <HeaderDraw+0xa4>
		  {
			  if(i<9-(headerLen/2))
 8001ff6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001ffa:	6a3b      	ldr	r3, [r7, #32]
 8001ffc:	085b      	lsrs	r3, r3, #1
 8001ffe:	f1c3 0309 	rsb	r3, r3, #9
 8002002:	429a      	cmp	r2, r3
 8002004:	d207      	bcs.n	8002016 <HeaderDraw+0x4e>
			  {
				  buff[i] = '-';
 8002006:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800200a:	3328      	adds	r3, #40	; 0x28
 800200c:	443b      	add	r3, r7
 800200e:	222d      	movs	r2, #45	; 0x2d
 8002010:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002014:	e025      	b.n	8002062 <HeaderDraw+0x9a>
			  }
			  else if(i>=9-(headerLen/2) && i<9+(headerLen/2) + 1)
 8002016:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800201a:	6a3b      	ldr	r3, [r7, #32]
 800201c:	085b      	lsrs	r3, r3, #1
 800201e:	f1c3 0309 	rsb	r3, r3, #9
 8002022:	429a      	cmp	r2, r3
 8002024:	d316      	bcc.n	8002054 <HeaderDraw+0x8c>
 8002026:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	085b      	lsrs	r3, r3, #1
 800202e:	330a      	adds	r3, #10
 8002030:	429a      	cmp	r2, r3
 8002032:	d20f      	bcs.n	8002054 <HeaderDraw+0x8c>
			  {
				  buff[i] = header[i-9+(headerLen/2)];
 8002034:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	085b      	lsrs	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	3b09      	subs	r3, #9
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	441a      	add	r2, r3
 8002044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002048:	7812      	ldrb	r2, [r2, #0]
 800204a:	3328      	adds	r3, #40	; 0x28
 800204c:	443b      	add	r3, r7
 800204e:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002052:	e006      	b.n	8002062 <HeaderDraw+0x9a>
			  }
			  else
			  {
				  buff[i] = '-';
 8002054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002058:	3328      	adds	r3, #40	; 0x28
 800205a:	443b      	add	r3, r7
 800205c:	222d      	movs	r2, #45	; 0x2d
 800205e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		  for(uint8_t i = 0; i<19; i++)
 8002062:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002066:	3301      	adds	r3, #1
 8002068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800206c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002070:	2b12      	cmp	r3, #18
 8002072:	d9c0      	bls.n	8001ff6 <HeaderDraw+0x2e>
			  }
		  }
		  buff[19] = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	77fb      	strb	r3, [r7, #31]
		  GFX_DrawString(9, 0, buff, WHITE, 0);
 8002078:	f107 020c 	add.w	r2, r7, #12
 800207c:	2300      	movs	r3, #0
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	2301      	movs	r3, #1
 8002082:	2100      	movs	r1, #0
 8002084:	2009      	movs	r0, #9
 8002086:	f7fe fd35 	bl	8000af4 <GFX_DrawString>
			  }
		  }
		  buff[18] = 0;
		  GFX_DrawString(11, 0, buff, WHITE, 0);
	  }
}
 800208a:	e04d      	b.n	8002128 <HeaderDraw+0x160>
		  for(uint8_t i = 0; i<18; i++)
 800208c:	2300      	movs	r3, #0
 800208e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002092:	e03a      	b.n	800210a <HeaderDraw+0x142>
			  if(i<9-(headerLen/2))
 8002094:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	085b      	lsrs	r3, r3, #1
 800209c:	f1c3 0309 	rsb	r3, r3, #9
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d207      	bcs.n	80020b4 <HeaderDraw+0xec>
				  buff[i] = '-';
 80020a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020a8:	3328      	adds	r3, #40	; 0x28
 80020aa:	443b      	add	r3, r7
 80020ac:	222d      	movs	r2, #45	; 0x2d
 80020ae:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80020b2:	e025      	b.n	8002100 <HeaderDraw+0x138>
			  else if(i>=9-(headerLen/2) && i<9+(headerLen/2))
 80020b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	085b      	lsrs	r3, r3, #1
 80020bc:	f1c3 0309 	rsb	r3, r3, #9
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d316      	bcc.n	80020f2 <HeaderDraw+0x12a>
 80020c4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	085b      	lsrs	r3, r3, #1
 80020cc:	3309      	adds	r3, #9
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d20f      	bcs.n	80020f2 <HeaderDraw+0x12a>
				  buff[i] = header[i-9+(headerLen/2)];
 80020d2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	085b      	lsrs	r3, r3, #1
 80020da:	4413      	add	r3, r2
 80020dc:	3b09      	subs	r3, #9
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	441a      	add	r2, r3
 80020e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020e6:	7812      	ldrb	r2, [r2, #0]
 80020e8:	3328      	adds	r3, #40	; 0x28
 80020ea:	443b      	add	r3, r7
 80020ec:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80020f0:	e006      	b.n	8002100 <HeaderDraw+0x138>
				  buff[i] = '-';
 80020f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020f6:	3328      	adds	r3, #40	; 0x28
 80020f8:	443b      	add	r3, r7
 80020fa:	222d      	movs	r2, #45	; 0x2d
 80020fc:	f803 2c1c 	strb.w	r2, [r3, #-28]
		  for(uint8_t i = 0; i<18; i++)
 8002100:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002104:	3301      	adds	r3, #1
 8002106:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800210a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800210e:	2b11      	cmp	r3, #17
 8002110:	d9c0      	bls.n	8002094 <HeaderDraw+0xcc>
		  buff[18] = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	77bb      	strb	r3, [r7, #30]
		  GFX_DrawString(11, 0, buff, WHITE, 0);
 8002116:	f107 020c 	add.w	r2, r7, #12
 800211a:	2300      	movs	r3, #0
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	2301      	movs	r3, #1
 8002120:	2100      	movs	r1, #0
 8002122:	200b      	movs	r0, #11
 8002124:	f7fe fce6 	bl	8000af4 <GFX_DrawString>
}
 8002128:	bf00      	nop
 800212a:	3728      	adds	r7, #40	; 0x28
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	080104fc 	.word	0x080104fc

08002134 <MenuNext>:

void MenuNext(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
	if(CurrentPointer->next)
 8002138:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <MenuNext+0x74>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d018      	beq.n	8002174 <MenuNext+0x40>
	{
		CurrentPointer = CurrentPointer->next;
 8002142:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <MenuNext+0x74>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	4a17      	ldr	r2, [pc, #92]	; (80021a8 <MenuNext+0x74>)
 800214a:	6013      	str	r3, [r2, #0]
		MenuIndex++;
 800214c:	4b17      	ldr	r3, [pc, #92]	; (80021ac <MenuNext+0x78>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	3301      	adds	r3, #1
 8002152:	b2da      	uxtb	r2, r3
 8002154:	4b15      	ldr	r3, [pc, #84]	; (80021ac <MenuNext+0x78>)
 8002156:	701a      	strb	r2, [r3, #0]
		if(++OledRowPos > OLED_ROWS - 1)
 8002158:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <MenuNext+0x7c>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	3301      	adds	r3, #1
 800215e:	b2da      	uxtb	r2, r3
 8002160:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <MenuNext+0x7c>)
 8002162:	701a      	strb	r2, [r3, #0]
 8002164:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <MenuNext+0x7c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d918      	bls.n	800219e <MenuNext+0x6a>
		{
			OledRowPos = OLED_ROWS - 1;
 800216c:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <MenuNext+0x7c>)
 800216e:	2202      	movs	r2, #2
 8002170:	701a      	strb	r2, [r3, #0]
 8002172:	e014      	b.n	800219e <MenuNext+0x6a>
		}
	}
	else
	{
		MenuIndex = 0;
 8002174:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <MenuNext+0x78>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
		OledRowPos = 0;
 800217a:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <MenuNext+0x7c>)
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
		if(CurrentPointer->parent)
 8002180:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <MenuNext+0x74>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d006      	beq.n	8002198 <MenuNext+0x64>
		{
			CurrentPointer = (CurrentPointer -> parent) -> child;
 800218a:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <MenuNext+0x74>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	4a05      	ldr	r2, [pc, #20]	; (80021a8 <MenuNext+0x74>)
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e002      	b.n	800219e <MenuNext+0x6a>
		}
		else
		{
			CurrentPointer = &menu1;
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <MenuNext+0x74>)
 800219a:	4a06      	ldr	r2, [pc, #24]	; (80021b4 <MenuNext+0x80>)
 800219c:	601a      	str	r2, [r3, #0]
		}
	}
	MenuRefresh();
 800219e:	f000 f907 	bl	80023b0 <MenuRefresh>
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000004 	.word	0x20000004
 80021ac:	20000ff9 	.word	0x20000ff9
 80021b0:	20000ffa 	.word	0x20000ffa
 80021b4:	20000008 	.word	0x20000008

080021b8 <MenuPrev>:

void MenuPrev(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
	CurrentPointer = CurrentPointer -> prev;
 80021bc:	4b19      	ldr	r3, [pc, #100]	; (8002224 <MenuPrev+0x6c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	4a18      	ldr	r2, [pc, #96]	; (8002224 <MenuPrev+0x6c>)
 80021c4:	6013      	str	r3, [r2, #0]

	if(MenuIndex)
 80021c6:	4b18      	ldr	r3, [pc, #96]	; (8002228 <MenuPrev+0x70>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d010      	beq.n	80021f0 <MenuPrev+0x38>
	{
		MenuIndex--;
 80021ce:	4b16      	ldr	r3, [pc, #88]	; (8002228 <MenuPrev+0x70>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4b14      	ldr	r3, [pc, #80]	; (8002228 <MenuPrev+0x70>)
 80021d8:	701a      	strb	r2, [r3, #0]
		if(OledRowPos > 0)
 80021da:	4b14      	ldr	r3, [pc, #80]	; (800222c <MenuPrev+0x74>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d01b      	beq.n	800221a <MenuPrev+0x62>
		{
			OledRowPos--;
 80021e2:	4b12      	ldr	r3, [pc, #72]	; (800222c <MenuPrev+0x74>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <MenuPrev+0x74>)
 80021ec:	701a      	strb	r2, [r3, #0]
 80021ee:	e014      	b.n	800221a <MenuPrev+0x62>
		}
	}
	else
	{
		MenuIndex = MenuGetIndex(CurrentPointer);
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <MenuPrev+0x6c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 f899 	bl	800232c <MenuGetIndex>
 80021fa:	4603      	mov	r3, r0
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <MenuPrev+0x70>)
 8002200:	701a      	strb	r2, [r3, #0]
		{
			if(MenuIndex >= OLED_ROWS)
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <MenuPrev+0x70>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d903      	bls.n	8002212 <MenuPrev+0x5a>
			{
				OledRowPos = OLED_ROWS - 1;
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <MenuPrev+0x74>)
 800220c:	2202      	movs	r2, #2
 800220e:	701a      	strb	r2, [r3, #0]
 8002210:	e003      	b.n	800221a <MenuPrev+0x62>
			}
			else
			{
				OledRowPos = MenuIndex;
 8002212:	4b05      	ldr	r3, [pc, #20]	; (8002228 <MenuPrev+0x70>)
 8002214:	781a      	ldrb	r2, [r3, #0]
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <MenuPrev+0x74>)
 8002218:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	MenuRefresh();
 800221a:	f000 f8c9 	bl	80023b0 <MenuRefresh>
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000004 	.word	0x20000004
 8002228:	20000ff9 	.word	0x20000ff9
 800222c:	20000ffa 	.word	0x20000ffa

08002230 <MenuEnter>:

void MenuEnter(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
	uint8_t Back = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	71fb      	strb	r3, [r7, #7]

	if(CurrentPointer->menu_function != NULL && CurrentPointer->menu_function !=MenuBack)
 800223a:	4b21      	ldr	r3, [pc, #132]	; (80022c0 <MenuEnter+0x90>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <MenuEnter+0x2a>
 8002244:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <MenuEnter+0x90>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	4a1e      	ldr	r2, [pc, #120]	; (80022c4 <MenuEnter+0x94>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d004      	beq.n	800225a <MenuEnter+0x2a>
	{
		CurrentPointer -> menu_function();
 8002250:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <MenuEnter+0x90>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	4798      	blx	r3
 8002258:	e00c      	b.n	8002274 <MenuEnter+0x44>
	}
	else if(CurrentPointer->menu_function != NULL && CurrentPointer->menu_function == MenuBack)
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <MenuEnter+0x90>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d007      	beq.n	8002274 <MenuEnter+0x44>
 8002264:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <MenuEnter+0x90>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	4a16      	ldr	r2, [pc, #88]	; (80022c4 <MenuEnter+0x94>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d101      	bne.n	8002274 <MenuEnter+0x44>
	{
		Back = 1;
 8002270:	2301      	movs	r3, #1
 8002272:	71fb      	strb	r3, [r7, #7]
	}

	if(CurrentPointer->child != NULL)
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <MenuEnter+0x90>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d015      	beq.n	80022aa <MenuEnter+0x7a>
	{

			OledRowPosLevel[MenuGetLevel(CurrentPointer)] = OledRowPos;
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <MenuEnter+0x90>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f000 f876 	bl	8002374 <MenuGetLevel>
 8002288:	4603      	mov	r3, r0
 800228a:	461a      	mov	r2, r3
 800228c:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <MenuEnter+0x98>)
 800228e:	7819      	ldrb	r1, [r3, #0]
 8002290:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <MenuEnter+0x9c>)
 8002292:	5499      	strb	r1, [r3, r2]

		MenuIndex = 0;
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <MenuEnter+0xa0>)
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
		OledRowPos = 0;
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <MenuEnter+0x98>)
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
		CurrentPointer = CurrentPointer -> child;
 80022a0:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <MenuEnter+0x90>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	4a06      	ldr	r2, [pc, #24]	; (80022c0 <MenuEnter+0x90>)
 80022a8:	6013      	str	r3, [r2, #0]
	}

	if(Back == 1)
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <MenuEnter+0x84>
	{
		MenuBack();
 80022b0:	f000 f810 	bl	80022d4 <MenuBack>
	}

	MenuRefresh();
 80022b4:	f000 f87c 	bl	80023b0 <MenuRefresh>
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000004 	.word	0x20000004
 80022c4:	080022d5 	.word	0x080022d5
 80022c8:	20000ffa 	.word	0x20000ffa
 80022cc:	20000ffc 	.word	0x20000ffc
 80022d0:	20000ff9 	.word	0x20000ff9

080022d4 <MenuBack>:

void MenuBack(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
	if(CurrentPointer->parent != NULL)
 80022d8:	4b10      	ldr	r3, [pc, #64]	; (800231c <MenuBack+0x48>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00f      	beq.n	8002302 <MenuBack+0x2e>
	{
		CurrentPointer = CurrentPointer -> parent;
 80022e2:	4b0e      	ldr	r3, [pc, #56]	; (800231c <MenuBack+0x48>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	4a0c      	ldr	r2, [pc, #48]	; (800231c <MenuBack+0x48>)
 80022ea:	6013      	str	r3, [r2, #0]
		OledRowPos = OledRowPosLevel[MenuGetLevel(CurrentPointer)];
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <MenuBack+0x48>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 f83f 	bl	8002374 <MenuGetLevel>
 80022f6:	4603      	mov	r3, r0
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <MenuBack+0x4c>)
 80022fc:	5c9a      	ldrb	r2, [r3, r2]
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <MenuBack+0x50>)
 8002300:	701a      	strb	r2, [r3, #0]
	}

//	CurrentPointer = CurrentPointer -> parent;
	MenuIndex = MenuGetIndex(CurrentPointer);
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <MenuBack+0x48>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f810 	bl	800232c <MenuGetIndex>
 800230c:	4603      	mov	r3, r0
 800230e:	461a      	mov	r2, r3
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <MenuBack+0x54>)
 8002312:	701a      	strb	r2, [r3, #0]

	MenuRefresh();
 8002314:	f000 f84c 	bl	80023b0 <MenuRefresh>
}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000004 	.word	0x20000004
 8002320:	20000ffc 	.word	0x20000ffc
 8002324:	20000ffa 	.word	0x20000ffa
 8002328:	20000ff9 	.word	0x20000ff9

0800232c <MenuGetIndex>:

uint8_t MenuGetIndex(menu_t *menu)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
	menu_t *temp;
	uint8_t i = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	72fb      	strb	r3, [r7, #11]

	if(menu->parent)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d004      	beq.n	800234a <MenuGetIndex+0x1e>
	{
		temp = (menu->parent) -> child;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	e008      	b.n	800235c <MenuGetIndex+0x30>
	}
	else
	{
		temp = &menu1;
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <MenuGetIndex+0x44>)
 800234c:	60fb      	str	r3, [r7, #12]
	}

	while(temp != menu)
 800234e:	e005      	b.n	800235c <MenuGetIndex+0x30>
	{
		temp = temp -> next;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	60fb      	str	r3, [r7, #12]
		i++;
 8002356:	7afb      	ldrb	r3, [r7, #11]
 8002358:	3301      	adds	r3, #1
 800235a:	72fb      	strb	r3, [r7, #11]
	while(temp != menu)
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	d1f5      	bne.n	8002350 <MenuGetIndex+0x24>
	}

	return i;
 8002364:	7afb      	ldrb	r3, [r7, #11]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	20000008 	.word	0x20000008

08002374 <MenuGetLevel>:

uint8_t MenuGetLevel(menu_t *menu)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	menu_t *temp = menu;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	60fb      	str	r3, [r7, #12]
	uint8_t i = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	72fb      	strb	r3, [r7, #11]

	if(menu->parent == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d107      	bne.n	800239c <MenuGetLevel+0x28>
	{
		return 0;
 800238c:	2300      	movs	r3, #0
 800238e:	e00a      	b.n	80023a6 <MenuGetLevel+0x32>
	}

	while(temp->parent != NULL)
	{
		temp = temp -> parent;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	60fb      	str	r3, [r7, #12]
		i++;
 8002396:	7afb      	ldrb	r3, [r7, #11]
 8002398:	3301      	adds	r3, #1
 800239a:	72fb      	strb	r3, [r7, #11]
	while(temp->parent != NULL)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1f5      	bne.n	8002390 <MenuGetLevel+0x1c>
	}
	return i;
 80023a4:	7afb      	ldrb	r3, [r7, #11]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <MenuRefresh>:

void MenuRefresh(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af02      	add	r7, sp, #8
	menu_t *temp;
	uint8_t i;

	SSD1306_Clear(BLACK);
 80023b6:	2000      	movs	r0, #0
 80023b8:	f000 fbe0 	bl	8002b7c <SSD1306_Clear>

	if(CurrentPointer->parent)
 80023bc:	4b56      	ldr	r3, [pc, #344]	; (8002518 <MenuRefresh+0x168>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00c      	beq.n	80023e0 <MenuRefresh+0x30>
	{
		temp = (CurrentPointer->parent) -> child;
 80023c6:	4b54      	ldr	r3, [pc, #336]	; (8002518 <MenuRefresh+0x168>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	607b      	str	r3, [r7, #4]
		HeaderDraw((CurrentPointer->parent) -> name);
 80023d0:	4b51      	ldr	r3, [pc, #324]	; (8002518 <MenuRefresh+0x168>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fdf5 	bl	8001fc8 <HeaderDraw>
 80023de:	e004      	b.n	80023ea <MenuRefresh+0x3a>
	}
	else
	{
		temp = &menu1;
 80023e0:	4b4e      	ldr	r3, [pc, #312]	; (800251c <MenuRefresh+0x16c>)
 80023e2:	607b      	str	r3, [r7, #4]
		HeaderDraw("Menu");
 80023e4:	484e      	ldr	r0, [pc, #312]	; (8002520 <MenuRefresh+0x170>)
 80023e6:	f7ff fdef 	bl	8001fc8 <HeaderDraw>
	}

	for(i=0; i!=MenuIndex - OledRowPos; i++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	70fb      	strb	r3, [r7, #3]
 80023ee:	e009      	b.n	8002404 <MenuRefresh+0x54>
	{
		if(temp -> next == NULL) break; // Hard fault protection
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00f      	beq.n	8002418 <MenuRefresh+0x68>

		temp = temp -> next;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	607b      	str	r3, [r7, #4]
	for(i=0; i!=MenuIndex - OledRowPos; i++)
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	3301      	adds	r3, #1
 8002402:	70fb      	strb	r3, [r7, #3]
 8002404:	78fa      	ldrb	r2, [r7, #3]
 8002406:	4b47      	ldr	r3, [pc, #284]	; (8002524 <MenuRefresh+0x174>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	4619      	mov	r1, r3
 800240c:	4b46      	ldr	r3, [pc, #280]	; (8002528 <MenuRefresh+0x178>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	1acb      	subs	r3, r1, r3
 8002412:	429a      	cmp	r2, r3
 8002414:	d1ec      	bne.n	80023f0 <MenuRefresh+0x40>
 8002416:	e000      	b.n	800241a <MenuRefresh+0x6a>
		if(temp -> next == NULL) break; // Hard fault protection
 8002418:	bf00      	nop
	}

	GFX_SetFont(font_8x5);
 800241a:	4844      	ldr	r0, [pc, #272]	; (800252c <MenuRefresh+0x17c>)
 800241c:	f7fe fa90 	bl	8000940 <GFX_SetFont>
	GFX_SetFontSize(2);
 8002420:	2002      	movs	r0, #2
 8002422:	f7fe fa9b 	bl	800095c <GFX_SetFontSize>
	for(i=0; i<OLED_ROWS; i++)
 8002426:	2300      	movs	r3, #0
 8002428:	70fb      	strb	r3, [r7, #3]
 800242a:	e06c      	b.n	8002506 <MenuRefresh+0x156>
	{
		if(temp == CurrentPointer)
 800242c:	4b3a      	ldr	r3, [pc, #232]	; (8002518 <MenuRefresh+0x168>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	429a      	cmp	r2, r3
 8002434:	d14a      	bne.n	80024cc <MenuRefresh+0x11c>
		{
//			GFX_DrawFillRectangle(5, (i*20) + OLED_MENU_Y_OFFSET, 123, 16, WHITE);
//			GFX_DrawFillCircle(10, (i*20) + OLED_MENU_Y_OFFSET + 8, 4, BLACK);
//			GFX_DrawString(20, (i*20) + OLED_MENU_Y_OFFSET + 1, temp->name, BLACK, 1);

			TempStr = temp->name;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a3d      	ldr	r2, [pc, #244]	; (8002530 <MenuRefresh+0x180>)
 800243c:	6013      	str	r3, [r2, #0]
			uint8_t TempStrLength = strlen(TempStr);
 800243e:	4b3c      	ldr	r3, [pc, #240]	; (8002530 <MenuRefresh+0x180>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7fd feee 	bl	8000224 <strlen>
 8002448:	4603      	mov	r3, r0
 800244a:	70bb      	strb	r3, [r7, #2]
			TempStrLengthVar = -(TempStrLength * 5);
 800244c:	78bb      	ldrb	r3, [r7, #2]
 800244e:	b29b      	uxth	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	0392      	lsls	r2, r2, #14
 8002454:	1ad2      	subs	r2, r2, r3
 8002456:	0092      	lsls	r2, r2, #2
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	b29b      	uxth	r3, r3
 800245c:	b21a      	sxth	r2, r3
 800245e:	4b35      	ldr	r3, [pc, #212]	; (8002534 <MenuRefresh+0x184>)
 8002460:	801a      	strh	r2, [r3, #0]
			TempId = i;
 8002462:	4a35      	ldr	r2, [pc, #212]	; (8002538 <MenuRefresh+0x188>)
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	7013      	strb	r3, [r2, #0]

			if(TempStrLength >= 10)
 8002468:	78bb      	ldrb	r3, [r7, #2]
 800246a:	2b09      	cmp	r3, #9
 800246c:	d908      	bls.n	8002480 <MenuRefresh+0xd0>
			{
				ScrollEn = 1;
 800246e:	4b33      	ldr	r3, [pc, #204]	; (800253c <MenuRefresh+0x18c>)
 8002470:	2201      	movs	r2, #1
 8002472:	701a      	strb	r2, [r3, #0]
				ScrollFirst =1;
 8002474:	4b32      	ldr	r3, [pc, #200]	; (8002540 <MenuRefresh+0x190>)
 8002476:	2201      	movs	r2, #1
 8002478:	701a      	strb	r2, [r3, #0]
				ScrollString();
 800247a:	f000 f863 	bl	8002544 <ScrollString>
 800247e:	e039      	b.n	80024f4 <MenuRefresh+0x144>
			}
			else
			{
				ScrollEn = 0;
 8002480:	4b2e      	ldr	r3, [pc, #184]	; (800253c <MenuRefresh+0x18c>)
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
				GFX_DrawFillRectangle(5, (i*20) + OLED_MENU_Y_OFFSET, 123, 16, WHITE);
 8002486:	78fa      	ldrb	r2, [r7, #3]
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	f103 0109 	add.w	r1, r3, #9
 8002494:	2301      	movs	r3, #1
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	2310      	movs	r3, #16
 800249a:	227b      	movs	r2, #123	; 0x7b
 800249c:	2005      	movs	r0, #5
 800249e:	f7fe fc2b 	bl	8000cf8 <GFX_DrawFillRectangle>
//				GFX_DrawFillCircle(10, (i*20) + OLED_MENU_Y_OFFSET + 8, 4, BLACK);
//				GFX_DrawChar(5, (i*20) + OLED_MENU_Y_OFFSET + 1, '>', BLACK, 1);
				StateIndicator(temp, i);
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	4619      	mov	r1, r3
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f904 	bl	80026b4 <StateIndicator>
				GFX_DrawString(20, (i*20) + OLED_MENU_Y_OFFSET + 1, temp->name, BLACK, 1);
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	f103 010a 	add.w	r1, r3, #10
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	2301      	movs	r3, #1
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	2300      	movs	r3, #0
 80024c4:	2014      	movs	r0, #20
 80024c6:	f7fe fb15 	bl	8000af4 <GFX_DrawString>
 80024ca:	e013      	b.n	80024f4 <MenuRefresh+0x144>

		}
		else
		{
//			GFX_DrawChar(5, (i*20) + OLED_MENU_Y_OFFSET + 1, '>', WHITE, 0);
			StateIndicator(temp, i);
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	4619      	mov	r1, r3
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f8ef 	bl	80026b4 <StateIndicator>
			GFX_DrawString(20, (i*20) + OLED_MENU_Y_OFFSET, temp->name, WHITE, 0);
 80024d6:	78fa      	ldrb	r2, [r7, #3]
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	f103 0109 	add.w	r1, r3, #9
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2300      	movs	r3, #0
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	2301      	movs	r3, #1
 80024ee:	2014      	movs	r0, #20
 80024f0:	f7fe fb00 	bl	8000af4 <GFX_DrawString>
		}

		temp = temp -> next;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	607b      	str	r3, [r7, #4]
		if(!temp) break;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d006      	beq.n	800250e <MenuRefresh+0x15e>
	for(i=0; i<OLED_ROWS; i++)
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	3301      	adds	r3, #1
 8002504:	70fb      	strb	r3, [r7, #3]
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d98f      	bls.n	800242c <MenuRefresh+0x7c>
	}
}
 800250c:	e000      	b.n	8002510 <MenuRefresh+0x160>
		if(!temp) break;
 800250e:	bf00      	nop
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000004 	.word	0x20000004
 800251c:	20000008 	.word	0x20000008
 8002520:	080104b0 	.word	0x080104b0
 8002524:	20000ff9 	.word	0x20000ff9
 8002528:	20000ffa 	.word	0x20000ffa
 800252c:	080104fc 	.word	0x080104fc
 8002530:	20001004 	.word	0x20001004
 8002534:	20001002 	.word	0x20001002
 8002538:	20001008 	.word	0x20001008
 800253c:	20001009 	.word	0x20001009
 8002540:	2000100a 	.word	0x2000100a

08002544 <ScrollString>:

void ScrollString(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af02      	add	r7, sp, #8
	  static int16_t ScrollVar = 20;
	  static int16_t ScrollVar2 = 123;

	  static uint32_t OldTick = 0;

	  if(ScrollFirst)
 800254a:	4b51      	ldr	r3, [pc, #324]	; (8002690 <ScrollString+0x14c>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00d      	beq.n	800256e <ScrollString+0x2a>
	  {
		  ScrollFirst = 0;
 8002552:	4b4f      	ldr	r3, [pc, #316]	; (8002690 <ScrollString+0x14c>)
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
		  ScrollVar = 20;
 8002558:	4b4e      	ldr	r3, [pc, #312]	; (8002694 <ScrollString+0x150>)
 800255a:	2214      	movs	r2, #20
 800255c:	801a      	strh	r2, [r3, #0]
		  ScrollVar2 = 123;
 800255e:	4b4e      	ldr	r3, [pc, #312]	; (8002698 <ScrollString+0x154>)
 8002560:	227b      	movs	r2, #123	; 0x7b
 8002562:	801a      	strh	r2, [r3, #0]
		  OldTick = HAL_GetTick();
 8002564:	f001 f868 	bl	8003638 <HAL_GetTick>
 8002568:	4603      	mov	r3, r0
 800256a:	4a4c      	ldr	r2, [pc, #304]	; (800269c <ScrollString+0x158>)
 800256c:	6013      	str	r3, [r2, #0]
	  }

	  if(ScrollEn)
 800256e:	4b4c      	ldr	r3, [pc, #304]	; (80026a0 <ScrollString+0x15c>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8088 	beq.w	8002688 <ScrollString+0x144>
	  {

	  int16_t var = TempStrLengthVar;
 8002578:	4b4a      	ldr	r3, [pc, #296]	; (80026a4 <ScrollString+0x160>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	80fb      	strh	r3, [r7, #6]

		GFX_DrawFillRectangle(5, (TempId*20) + OLED_MENU_Y_OFFSET, 123, 16, WHITE);
 800257e:	4b4a      	ldr	r3, [pc, #296]	; (80026a8 <ScrollString+0x164>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	f103 0109 	add.w	r1, r3, #9
 8002590:	2301      	movs	r3, #1
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	2310      	movs	r3, #16
 8002596:	227b      	movs	r2, #123	; 0x7b
 8002598:	2005      	movs	r0, #5
 800259a:	f7fe fbad 	bl	8000cf8 <GFX_DrawFillRectangle>
		if(ScrollVar>var-75)
 800259e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025a2:	3b4a      	subs	r3, #74	; 0x4a
 80025a4:	4a3b      	ldr	r2, [pc, #236]	; (8002694 <ScrollString+0x150>)
 80025a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80025aa:	4293      	cmp	r3, r2
 80025ac:	dc13      	bgt.n	80025d6 <ScrollString+0x92>
		{
		GFX_DrawString(ScrollVar, (TempId*20) + OLED_MENU_Y_OFFSET + 1, TempStr, BLACK, 1);
 80025ae:	4b39      	ldr	r3, [pc, #228]	; (8002694 <ScrollString+0x150>)
 80025b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025b4:	4618      	mov	r0, r3
 80025b6:	4b3c      	ldr	r3, [pc, #240]	; (80026a8 <ScrollString+0x164>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	f103 010a 	add.w	r1, r3, #10
 80025c8:	4b38      	ldr	r3, [pc, #224]	; (80026ac <ScrollString+0x168>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	2301      	movs	r3, #1
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	2300      	movs	r3, #0
 80025d2:	f7fe fa8f 	bl	8000af4 <GFX_DrawString>
		}

		GFX_DrawFillRectangle(5, (TempId*20) + OLED_MENU_Y_OFFSET, 15, 16, WHITE);
 80025d6:	4b34      	ldr	r3, [pc, #208]	; (80026a8 <ScrollString+0x164>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	f103 0109 	add.w	r1, r3, #9
 80025e8:	2301      	movs	r3, #1
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2310      	movs	r3, #16
 80025ee:	220f      	movs	r2, #15
 80025f0:	2005      	movs	r0, #5
 80025f2:	f7fe fb81 	bl	8000cf8 <GFX_DrawFillRectangle>
//		GFX_DrawFillCircle(10, (TempId*20) + OLED_MENU_Y_OFFSET + 8, 4, BLACK);
//		GFX_DrawChar(5, (TempId*20) + OLED_MENU_Y_OFFSET + 1, '>', BLACK, 1);
		StateIndicator(CurrentPointer, TempId);
 80025f6:	4b2e      	ldr	r3, [pc, #184]	; (80026b0 <ScrollString+0x16c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a2b      	ldr	r2, [pc, #172]	; (80026a8 <ScrollString+0x164>)
 80025fc:	7812      	ldrb	r2, [r2, #0]
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f000 f857 	bl	80026b4 <StateIndicator>

		if(HAL_GetTick() - OldTick >= SCROLL_FREEZE) ScrollVar--;
 8002606:	f001 f817 	bl	8003638 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	4b23      	ldr	r3, [pc, #140]	; (800269c <ScrollString+0x158>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002616:	d308      	bcc.n	800262a <ScrollString+0xe6>
 8002618:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <ScrollString+0x150>)
 800261a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800261e:	b29b      	uxth	r3, r3
 8002620:	3b01      	subs	r3, #1
 8002622:	b29b      	uxth	r3, r3
 8002624:	b21a      	sxth	r2, r3
 8002626:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <ScrollString+0x150>)
 8002628:	801a      	strh	r2, [r3, #0]

		  if(ScrollVar < var)
 800262a:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <ScrollString+0x150>)
 800262c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002630:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002634:	429a      	cmp	r2, r3
 8002636:	dd27      	ble.n	8002688 <ScrollString+0x144>
		  {
			  GFX_DrawString(ScrollVar2, (TempId*20) + OLED_MENU_Y_OFFSET + 1, TempStr, BLACK, 1);
 8002638:	4b17      	ldr	r3, [pc, #92]	; (8002698 <ScrollString+0x154>)
 800263a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800263e:	4618      	mov	r0, r3
 8002640:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <ScrollString+0x164>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	f103 010a 	add.w	r1, r3, #10
 8002652:	4b16      	ldr	r3, [pc, #88]	; (80026ac <ScrollString+0x168>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	2301      	movs	r3, #1
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	2300      	movs	r3, #0
 800265c:	f7fe fa4a 	bl	8000af4 <GFX_DrawString>
			  ScrollVar2--;
 8002660:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <ScrollString+0x154>)
 8002662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29b      	uxth	r3, r3
 800266c:	b21a      	sxth	r2, r3
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <ScrollString+0x154>)
 8002670:	801a      	strh	r2, [r3, #0]
			  if(ScrollVar2 == 20)
 8002672:	4b09      	ldr	r3, [pc, #36]	; (8002698 <ScrollString+0x154>)
 8002674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002678:	2b14      	cmp	r3, #20
 800267a:	d105      	bne.n	8002688 <ScrollString+0x144>
			  {
				  ScrollVar = 20;
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <ScrollString+0x150>)
 800267e:	2214      	movs	r2, #20
 8002680:	801a      	strh	r2, [r3, #0]
				  ScrollVar2 = 123;
 8002682:	4b05      	ldr	r3, [pc, #20]	; (8002698 <ScrollString+0x154>)
 8002684:	227b      	movs	r2, #123	; 0x7b
 8002686:	801a      	strh	r2, [r3, #0]
			  }
		  }

	  }

}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	2000100a 	.word	0x2000100a
 8002694:	20000200 	.word	0x20000200
 8002698:	20000202 	.word	0x20000202
 800269c:	2000100c 	.word	0x2000100c
 80026a0:	20001009 	.word	0x20001009
 80026a4:	20001002 	.word	0x20001002
 80026a8:	20001008 	.word	0x20001008
 80026ac:	20001004 	.word	0x20001004
 80026b0:	20000004 	.word	0x20000004

080026b4 <StateIndicator>:

void StateIndicator(menu_t *menu, uint8_t pos)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af02      	add	r7, sp, #8
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	70fb      	strb	r3, [r7, #3]
	if(menu == CurrentPointer)
 80026c0:	4b5b      	ldr	r3, [pc, #364]	; (8002830 <StateIndicator+0x17c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d156      	bne.n	8002778 <StateIndicator+0xc4>
	{
		if(menu->menu_state == 0 && menu->name != BackStr)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d113      	bne.n	80026fc <StateIndicator+0x48>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a56      	ldr	r2, [pc, #344]	; (8002834 <StateIndicator+0x180>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00e      	beq.n	80026fc <StateIndicator+0x48>
		{
			GFX_DrawChar(5, (pos*20) + OLED_MENU_Y_OFFSET + 1, '>', BLACK, 1);
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	f103 010a 	add.w	r1, r3, #10
 80026ec:	2301      	movs	r3, #1
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	2300      	movs	r3, #0
 80026f2:	223e      	movs	r2, #62	; 0x3e
 80026f4:	2005      	movs	r0, #5
 80026f6:	f7fe f943 	bl	8000980 <GFX_DrawChar>
 80026fa:	e094      	b.n	8002826 <StateIndicator+0x172>
		}
		else if(menu->menu_state == 0 && menu->name == BackStr)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d113      	bne.n	800272e <StateIndicator+0x7a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a4a      	ldr	r2, [pc, #296]	; (8002834 <StateIndicator+0x180>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d10e      	bne.n	800272e <StateIndicator+0x7a>
		{
			GFX_DrawChar(5, (pos*20) + OLED_MENU_Y_OFFSET + 1, '<', BLACK, 1);
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	f103 010a 	add.w	r1, r3, #10
 800271e:	2301      	movs	r3, #1
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	2300      	movs	r3, #0
 8002724:	223c      	movs	r2, #60	; 0x3c
 8002726:	2005      	movs	r0, #5
 8002728:	f7fe f92a 	bl	8000980 <GFX_DrawChar>
 800272c:	e07b      	b.n	8002826 <StateIndicator+0x172>
		}
		else if(menu->menu_state == 1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d10c      	bne.n	8002752 <StateIndicator+0x9e>
		{
			GFX_DrawFillCircle(10, (pos*20) + OLED_MENU_Y_OFFSET + 8, 4, BLACK);
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	f103 0111 	add.w	r1, r3, #17
 8002746:	2300      	movs	r3, #0
 8002748:	2204      	movs	r2, #4
 800274a:	200a      	movs	r0, #10
 800274c:	f7fe fc94 	bl	8001078 <GFX_DrawFillCircle>
		else if(menu->menu_state == -1)
		{
			GFX_DrawCircle(10, (pos*20) + OLED_MENU_Y_OFFSET + 8, 4, WHITE);
		}
	}
}
 8002750:	e069      	b.n	8002826 <StateIndicator+0x172>
		else if(menu->menu_state == -1)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d163      	bne.n	8002826 <StateIndicator+0x172>
			GFX_DrawCircle(10, (pos*20) + OLED_MENU_Y_OFFSET + 8, 4, BLACK);
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	f103 0111 	add.w	r1, r3, #17
 800276c:	2300      	movs	r3, #0
 800276e:	2204      	movs	r2, #4
 8002770:	200a      	movs	r0, #10
 8002772:	f7fe fae4 	bl	8000d3e <GFX_DrawCircle>
}
 8002776:	e056      	b.n	8002826 <StateIndicator+0x172>
		if(menu->menu_state == 0 && menu->name != BackStr)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d113      	bne.n	80027aa <StateIndicator+0xf6>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a2b      	ldr	r2, [pc, #172]	; (8002834 <StateIndicator+0x180>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00e      	beq.n	80027aa <StateIndicator+0xf6>
			GFX_DrawChar(5, (pos*20) + OLED_MENU_Y_OFFSET + 1, '>', WHITE, 0);
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	f103 010a 	add.w	r1, r3, #10
 800279a:	2300      	movs	r3, #0
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	2301      	movs	r3, #1
 80027a0:	223e      	movs	r2, #62	; 0x3e
 80027a2:	2005      	movs	r0, #5
 80027a4:	f7fe f8ec 	bl	8000980 <GFX_DrawChar>
 80027a8:	e03d      	b.n	8002826 <StateIndicator+0x172>
		else if(menu->menu_state == 0 && menu->name == BackStr)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d113      	bne.n	80027dc <StateIndicator+0x128>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <StateIndicator+0x180>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d10e      	bne.n	80027dc <StateIndicator+0x128>
			GFX_DrawChar(5, (pos*20) + OLED_MENU_Y_OFFSET + 1, '<', WHITE, 0);
 80027be:	78fa      	ldrb	r2, [r7, #3]
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	f103 010a 	add.w	r1, r3, #10
 80027cc:	2300      	movs	r3, #0
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	2301      	movs	r3, #1
 80027d2:	223c      	movs	r2, #60	; 0x3c
 80027d4:	2005      	movs	r0, #5
 80027d6:	f7fe f8d3 	bl	8000980 <GFX_DrawChar>
 80027da:	e024      	b.n	8002826 <StateIndicator+0x172>
		else if(menu->menu_state == 1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d10c      	bne.n	8002800 <StateIndicator+0x14c>
			GFX_DrawFillCircle(10, (pos*20) + OLED_MENU_Y_OFFSET + 8, 4, WHITE);
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	f103 0111 	add.w	r1, r3, #17
 80027f4:	2301      	movs	r3, #1
 80027f6:	2204      	movs	r2, #4
 80027f8:	200a      	movs	r0, #10
 80027fa:	f7fe fc3d 	bl	8001078 <GFX_DrawFillCircle>
}
 80027fe:	e012      	b.n	8002826 <StateIndicator+0x172>
		else if(menu->menu_state == -1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8002806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280a:	d10c      	bne.n	8002826 <StateIndicator+0x172>
			GFX_DrawCircle(10, (pos*20) + OLED_MENU_Y_OFFSET + 8, 4, WHITE);
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	f103 0111 	add.w	r1, r3, #17
 800281a:	2301      	movs	r3, #1
 800281c:	2204      	movs	r2, #4
 800281e:	200a      	movs	r0, #10
 8002820:	f7fe fa8d 	bl	8000d3e <GFX_DrawCircle>
}
 8002824:	e7ff      	b.n	8002826 <StateIndicator+0x172>
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000004 	.word	0x20000004
 8002834:	080106dc 	.word	0x080106dc

08002838 <Parser_TakeLine>:
		{PWM3, all, 1},
		{PWM4, all, 1},
};

void Parser_TakeLine(RingBuffer_t *Buff, uint8_t *Destination)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
	  uint8_t i = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	73fb      	strb	r3, [r7, #15]
	  uint8_t tmp = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	73bb      	strb	r3, [r7, #14]
	do
	{
		 Ring_Buffer_Read(Buff, &tmp);
 800284a:	f107 030e 	add.w	r3, r7, #14
 800284e:	4619      	mov	r1, r3
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f86b 	bl	800292c <Ring_Buffer_Read>
		 if(tmp == ENDLINE)
 8002856:	7bbb      	ldrb	r3, [r7, #14]
 8002858:	2b5e      	cmp	r3, #94	; 0x5e
 800285a:	d105      	bne.n	8002868 <Parser_TakeLine+0x30>
			{
			 Destination[i] = 0;
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	4413      	add	r3, r2
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
 8002866:	e004      	b.n	8002872 <Parser_TakeLine+0x3a>
			}
		else
			{
			Destination[i] = tmp;
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	4413      	add	r3, r2
 800286e:	7bba      	ldrb	r2, [r7, #14]
 8002870:	701a      	strb	r2, [r3, #0]
			}

			i++;
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	3301      	adds	r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]

	} while(tmp != ENDLINE);
 8002878:	7bbb      	ldrb	r3, [r7, #14]
 800287a:	2b5e      	cmp	r3, #94	; 0x5e
 800287c:	d1e5      	bne.n	800284a <Parser_TakeLine+0x12>
}
 800287e:	bf00      	nop
 8002880:	bf00      	nop
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <Parser_parse>:




void Parser_parse(uint8_t * DataToParse)
{
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b087      	sub	sp, #28
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	char * ParsePointer = strtok((char*)DataToParse, "/");
 8002890:	4923      	ldr	r1, [pc, #140]	; (8002920 <Parser_parse+0x98>)
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f00c fcc2 	bl	800f21c <strtok>
 8002898:	6138      	str	r0, [r7, #16]
	uint8_t CommandID = atoi(ParsePointer);
 800289a:	6938      	ldr	r0, [r7, #16]
 800289c:	f00c fc88 	bl	800f1b0 <atoi>
 80028a0:	4603      	mov	r3, r0
 80028a2:	73fb      	strb	r3, [r7, #15]

	if(CommandMapper[CommandID].Action != NULL)
 80028a4:	7bfa      	ldrb	r2, [r7, #15]
 80028a6:	491f      	ldr	r1, [pc, #124]	; (8002924 <Parser_parse+0x9c>)
 80028a8:	4613      	mov	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4413      	add	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	3304      	adds	r3, #4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d02e      	beq.n	8002918 <Parser_parse+0x90>
	{
		for(uint8_t i = 0; i<CommandMapper[CommandID].CommandArgQ; i++)
 80028ba:	2300      	movs	r3, #0
 80028bc:	75fb      	strb	r3, [r7, #23]
 80028be:	e00f      	b.n	80028e0 <Parser_parse+0x58>
		{
			char * ParsePointer = strtok(NULL, "/");
 80028c0:	4917      	ldr	r1, [pc, #92]	; (8002920 <Parser_parse+0x98>)
 80028c2:	2000      	movs	r0, #0
 80028c4:	f00c fcaa 	bl	800f21c <strtok>
 80028c8:	60b8      	str	r0, [r7, #8]
			ReceivedCommandArgument[i] = atoi(ParsePointer);
 80028ca:	7dfc      	ldrb	r4, [r7, #23]
 80028cc:	68b8      	ldr	r0, [r7, #8]
 80028ce:	f00c fc6f 	bl	800f1b0 <atoi>
 80028d2:	4603      	mov	r3, r0
 80028d4:	4a14      	ldr	r2, [pc, #80]	; (8002928 <Parser_parse+0xa0>)
 80028d6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		for(uint8_t i = 0; i<CommandMapper[CommandID].CommandArgQ; i++)
 80028da:	7dfb      	ldrb	r3, [r7, #23]
 80028dc:	3301      	adds	r3, #1
 80028de:	75fb      	strb	r3, [r7, #23]
 80028e0:	7bfa      	ldrb	r2, [r7, #15]
 80028e2:	4910      	ldr	r1, [pc, #64]	; (8002924 <Parser_parse+0x9c>)
 80028e4:	4613      	mov	r3, r2
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	4413      	add	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	3308      	adds	r3, #8
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	7dfa      	ldrb	r2, [r7, #23]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d3e3      	bcc.n	80028c0 <Parser_parse+0x38>
		}

		CommandMapper[CommandID].Action(ReceivedCommandArgument[0], ReceivedCommandArgument[1], ReceivedCommandArgument[2]);
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	490a      	ldr	r1, [pc, #40]	; (8002924 <Parser_parse+0x9c>)
 80028fc:	4613      	mov	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	3304      	adds	r3, #4
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a07      	ldr	r2, [pc, #28]	; (8002928 <Parser_parse+0xa0>)
 800290c:	6810      	ldr	r0, [r2, #0]
 800290e:	4a06      	ldr	r2, [pc, #24]	; (8002928 <Parser_parse+0xa0>)
 8002910:	6851      	ldr	r1, [r2, #4]
 8002912:	4a05      	ldr	r2, [pc, #20]	; (8002928 <Parser_parse+0xa0>)
 8002914:	6892      	ldr	r2, [r2, #8]
 8002916:	4798      	blx	r3
	}
}
 8002918:	bf00      	nop
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	bd90      	pop	{r4, r7, pc}
 8002920:	080104b8 	.word	0x080104b8
 8002924:	20000204 	.word	0x20000204
 8002928:	20001010 	.word	0x20001010

0800292c <Ring_Buffer_Read>:
 */
#include "main.h"
#include "ring_buffer.h"

RbStatus_t Ring_Buffer_Read(RingBuffer_t * Buff, uint8_t *value)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
	if(Buff->Head == Buff->Tail)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	881a      	ldrh	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	885b      	ldrh	r3, [r3, #2]
 800293e:	429a      	cmp	r2, r3
 8002940:	d101      	bne.n	8002946 <Ring_Buffer_Read+0x1a>
	{
		return RB_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e015      	b.n	8002972 <Ring_Buffer_Read+0x46>
	}
	*value = Buff->Buffer[Buff->Tail];
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	885b      	ldrh	r3, [r3, #2]
 800294a:	461a      	mov	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4413      	add	r3, r2
 8002950:	791a      	ldrb	r2, [r3, #4]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	701a      	strb	r2, [r3, #0]

	Buff->Tail = (Buff->Tail + 1) % RING_BUFFER_SIZE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	885b      	ldrh	r3, [r3, #2]
 800295a:	3301      	adds	r3, #1
 800295c:	425a      	negs	r2, r3
 800295e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002962:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002966:	bf58      	it	pl
 8002968:	4253      	negpl	r3, r2
 800296a:	b29a      	uxth	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	805a      	strh	r2, [r3, #2]

	return RB_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr

0800297c <Ring_Buffer_Write>:

RbStatus_t Ring_Buffer_Write(RingBuffer_t * Buff, uint8_t value)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	70fb      	strb	r3, [r7, #3]
	uint16_t Head_tmp = (Buff->Head + 1) % RING_BUFFER_SIZE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	3301      	adds	r3, #1
 800298e:	425a      	negs	r2, r3
 8002990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002998:	bf58      	it	pl
 800299a:	4253      	negpl	r3, r2
 800299c:	81fb      	strh	r3, [r7, #14]

	if(Head_tmp == Buff->Tail)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	885b      	ldrh	r3, [r3, #2]
 80029a2:	89fa      	ldrh	r2, [r7, #14]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d101      	bne.n	80029ac <Ring_Buffer_Write+0x30>
	{
		return RB_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e00a      	b.n	80029c2 <Ring_Buffer_Write+0x46>
	}
	Buff->Buffer[Buff->Head] = value;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4413      	add	r3, r2
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	711a      	strb	r2, [r3, #4]
	Buff->Head = Head_tmp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	89fa      	ldrh	r2, [r7, #14]
 80029be:	801a      	strh	r2, [r3, #0]

	return RB_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <Ring_Buffer_Flush>:

void Ring_Buffer_Flush(RingBuffer_t * Buff)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
	Buff->Head = 0;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	801a      	strh	r2, [r3, #0]
	Buff->Tail = 0;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	805a      	strh	r2, [r3, #2]
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr
	...

080029ec <SSD1306_Command>:

static uint8_t buffer[SSD1306_BUFFER_SIZE];
static uint8_t buffer_disp[SSD1306_BUFFER_SIZE];

static void SSD1306_Command(uint8_t Command)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af04      	add	r7, sp, #16
 80029f2:	4603      	mov	r3, r0
 80029f4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <SSD1306_Command+0x30>)
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029fe:	9302      	str	r3, [sp, #8]
 8002a00:	2301      	movs	r3, #1
 8002a02:	9301      	str	r3, [sp, #4]
 8002a04:	1dfb      	adds	r3, r7, #7
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	2301      	movs	r3, #1
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2178      	movs	r1, #120	; 0x78
 8002a0e:	f002 f8fb 	bl	8004c08 <HAL_I2C_Mem_Write>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20001050 	.word	0x20001050

08002a20 <SSD1306_Data>:

static void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	807b      	strh	r3, [r7, #2]
#ifdef SSD1306_USE_DMA
	if(oled_i2c -> hdmatx -> State == HAL_DMA_STATE_READY)
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <SSD1306_Data+0x3c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d10a      	bne.n	8002a52 <SSD1306_Data+0x32>
	{
		HAL_I2C_Mem_Write_DMA(oled_i2c, (SSD1306_ADRESS<<1), 0x40, 1, Data, Size);
 8002a3c:	4b07      	ldr	r3, [pc, #28]	; (8002a5c <SSD1306_Data+0x3c>)
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	887b      	ldrh	r3, [r7, #2]
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	2301      	movs	r3, #1
 8002a4a:	2240      	movs	r2, #64	; 0x40
 8002a4c:	2178      	movs	r1, #120	; 0x78
 8002a4e:	f002 f9d5 	bl	8004dfc <HAL_I2C_Mem_Write_DMA>
	}
#else
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
#endif
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20001050 	.word	0x20001050

08002a60 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	80fb      	strh	r3, [r7, #6]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	80bb      	strh	r3, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 8002a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	db79      	blt.n	8002b6e <SSD1306_DrawPixel+0x10e>
 8002a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8002a80:	dc75      	bgt.n	8002b6e <SSD1306_DrawPixel+0x10e>
 8002a82:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	db71      	blt.n	8002b6e <SSD1306_DrawPixel+0x10e>
 8002a8a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a8e:	2b3f      	cmp	r3, #63	; 0x3f
 8002a90:	dc6d      	bgt.n	8002b6e <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 8002a92:	78fb      	ldrb	r3, [r7, #3]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d049      	beq.n	8002b2c <SSD1306_DrawPixel+0xcc>
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	dc69      	bgt.n	8002b70 <SSD1306_DrawPixel+0x110>
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d022      	beq.n	8002ae6 <SSD1306_DrawPixel+0x86>
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d165      	bne.n	8002b70 <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 8002aa4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002aa8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	da00      	bge.n	8002ab2 <SSD1306_DrawPixel+0x52>
 8002ab0:	3307      	adds	r3, #7
 8002ab2:	10db      	asrs	r3, r3, #3
 8002ab4:	b218      	sxth	r0, r3
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	01db      	lsls	r3, r3, #7
 8002aba:	4413      	add	r3, r2
 8002abc:	4a2e      	ldr	r2, [pc, #184]	; (8002b78 <SSD1306_DrawPixel+0x118>)
 8002abe:	5cd3      	ldrb	r3, [r2, r3]
 8002ac0:	b25a      	sxtb	r2, r3
 8002ac2:	88bb      	ldrh	r3, [r7, #4]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	2101      	movs	r1, #1
 8002aca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ace:	b25b      	sxtb	r3, r3
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	b259      	sxtb	r1, r3
 8002ad4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ad8:	4603      	mov	r3, r0
 8002ada:	01db      	lsls	r3, r3, #7
 8002adc:	4413      	add	r3, r2
 8002ade:	b2c9      	uxtb	r1, r1
 8002ae0:	4a25      	ldr	r2, [pc, #148]	; (8002b78 <SSD1306_DrawPixel+0x118>)
 8002ae2:	54d1      	strb	r1, [r2, r3]
      break;
 8002ae4:	e044      	b.n	8002b70 <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 8002ae6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002aea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	da00      	bge.n	8002af4 <SSD1306_DrawPixel+0x94>
 8002af2:	3307      	adds	r3, #7
 8002af4:	10db      	asrs	r3, r3, #3
 8002af6:	b218      	sxth	r0, r3
 8002af8:	4603      	mov	r3, r0
 8002afa:	01db      	lsls	r3, r3, #7
 8002afc:	4413      	add	r3, r2
 8002afe:	4a1e      	ldr	r2, [pc, #120]	; (8002b78 <SSD1306_DrawPixel+0x118>)
 8002b00:	5cd3      	ldrb	r3, [r2, r3]
 8002b02:	b25a      	sxtb	r2, r3
 8002b04:	88bb      	ldrh	r3, [r7, #4]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b10:	b25b      	sxtb	r3, r3
 8002b12:	43db      	mvns	r3, r3
 8002b14:	b25b      	sxtb	r3, r3
 8002b16:	4013      	ands	r3, r2
 8002b18:	b259      	sxtb	r1, r3
 8002b1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b1e:	4603      	mov	r3, r0
 8002b20:	01db      	lsls	r3, r3, #7
 8002b22:	4413      	add	r3, r2
 8002b24:	b2c9      	uxtb	r1, r1
 8002b26:	4a14      	ldr	r2, [pc, #80]	; (8002b78 <SSD1306_DrawPixel+0x118>)
 8002b28:	54d1      	strb	r1, [r2, r3]
      break;
 8002b2a:	e021      	b.n	8002b70 <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 8002b2c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b30:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	da00      	bge.n	8002b3a <SSD1306_DrawPixel+0xda>
 8002b38:	3307      	adds	r3, #7
 8002b3a:	10db      	asrs	r3, r3, #3
 8002b3c:	b218      	sxth	r0, r3
 8002b3e:	4603      	mov	r3, r0
 8002b40:	01db      	lsls	r3, r3, #7
 8002b42:	4413      	add	r3, r2
 8002b44:	4a0c      	ldr	r2, [pc, #48]	; (8002b78 <SSD1306_DrawPixel+0x118>)
 8002b46:	5cd3      	ldrb	r3, [r2, r3]
 8002b48:	b25a      	sxtb	r2, r3
 8002b4a:	88bb      	ldrh	r3, [r7, #4]
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	2101      	movs	r1, #1
 8002b52:	fa01 f303 	lsl.w	r3, r1, r3
 8002b56:	b25b      	sxtb	r3, r3
 8002b58:	4053      	eors	r3, r2
 8002b5a:	b259      	sxtb	r1, r3
 8002b5c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b60:	4603      	mov	r3, r0
 8002b62:	01db      	lsls	r3, r3, #7
 8002b64:	4413      	add	r3, r2
 8002b66:	b2c9      	uxtb	r1, r1
 8002b68:	4a03      	ldr	r2, [pc, #12]	; (8002b78 <SSD1306_DrawPixel+0x118>)
 8002b6a:	54d1      	strb	r1, [r2, r3]
      break;
 8002b6c:	e000      	b.n	8002b70 <SSD1306_DrawPixel+0x110>
	  return;
 8002b6e:	bf00      	nop
    }
}
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr
 8002b78:	20001054 	.word	0x20001054

08002b7c <SSD1306_Clear>:


void SSD1306_Clear(uint8_t Color)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <SSD1306_Clear+0x22>
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d10d      	bne.n	8002bac <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xff, SSD1306_BUFFER_SIZE);
 8002b90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b94:	21ff      	movs	r1, #255	; 0xff
 8002b96:	4807      	ldr	r0, [pc, #28]	; (8002bb4 <SSD1306_Clear+0x38>)
 8002b98:	f00c fb38 	bl	800f20c <memset>
		break;
 8002b9c:	e006      	b.n	8002bac <SSD1306_Clear+0x30>
	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 8002b9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4803      	ldr	r0, [pc, #12]	; (8002bb4 <SSD1306_Clear+0x38>)
 8002ba6:	f00c fb31 	bl	800f20c <memset>
		break;
 8002baa:	bf00      	nop
	}
}
 8002bac:	bf00      	nop
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20001054 	.word	0x20001054

08002bb8 <SSD1306_Display>:

void SSD1306_Display(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_PAGEADDR);
 8002bbe:	2022      	movs	r0, #34	; 0x22
 8002bc0:	f7ff ff14 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(0);                      // Page start address
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f7ff ff11 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(0xFF);                   // Page end (not really, but works here)
 8002bca:	20ff      	movs	r0, #255	; 0xff
 8002bcc:	f7ff ff0e 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 8002bd0:	2021      	movs	r0, #33	; 0x21
 8002bd2:	f7ff ff0b 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(0); // Column start address
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	f7ff ff08 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 8002bdc:	207f      	movs	r0, #127	; 0x7f
 8002bde:	f7ff ff05 	bl	80029ec <SSD1306_Command>


	for(uint16_t i = 0; i<SSD1306_BUFFER_SIZE; i++)
 8002be2:	2300      	movs	r3, #0
 8002be4:	80fb      	strh	r3, [r7, #6]
 8002be6:	e008      	b.n	8002bfa <SSD1306_Display+0x42>
	{
		buffer_disp[i] = buffer[i];
 8002be8:	88fa      	ldrh	r2, [r7, #6]
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	4909      	ldr	r1, [pc, #36]	; (8002c14 <SSD1306_Display+0x5c>)
 8002bee:	5c89      	ldrb	r1, [r1, r2]
 8002bf0:	4a09      	ldr	r2, [pc, #36]	; (8002c18 <SSD1306_Display+0x60>)
 8002bf2:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i<SSD1306_BUFFER_SIZE; i++)
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	80fb      	strh	r3, [r7, #6]
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c00:	d3f2      	bcc.n	8002be8 <SSD1306_Display+0x30>
	}

	SSD1306_Data(buffer_disp, SSD1306_BUFFER_SIZE);
 8002c02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c06:	4804      	ldr	r0, [pc, #16]	; (8002c18 <SSD1306_Display+0x60>)
 8002c08:	f7ff ff0a 	bl	8002a20 <SSD1306_Data>

}
 8002c0c:	bf00      	nop
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20001054 	.word	0x20001054
 8002c18:	20001454 	.word	0x20001454

08002c1c <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 8002c24:	4a2a      	ldr	r2, [pc, #168]	; (8002cd0 <SSD1306_Init+0xb4>)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 8002c2a:	20ae      	movs	r0, #174	; 0xae
 8002c2c:	f7ff fede 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 8002c30:	20d5      	movs	r0, #213	; 0xd5
 8002c32:	f7ff fedb 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(0x80);
 8002c36:	2080      	movs	r0, #128	; 0x80
 8002c38:	f7ff fed8 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(SSD1306_SETMULTIPLEX);
 8002c3c:	20a8      	movs	r0, #168	; 0xa8
 8002c3e:	f7ff fed5 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 8002c42:	203f      	movs	r0, #63	; 0x3f
 8002c44:	f7ff fed2 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 8002c48:	20d3      	movs	r0, #211	; 0xd3
 8002c4a:	f7ff fecf 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(0x00);
 8002c4e:	2000      	movs	r0, #0
 8002c50:	f7ff fecc 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 8002c54:	2040      	movs	r0, #64	; 0x40
 8002c56:	f7ff fec9 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(SSD1306_CHARGEPUMP);
 8002c5a:	208d      	movs	r0, #141	; 0x8d
 8002c5c:	f7ff fec6 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(0x14);
 8002c60:	2014      	movs	r0, #20
 8002c62:	f7ff fec3 	bl	80029ec <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 8002c66:	2020      	movs	r0, #32
 8002c68:	f7ff fec0 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f7ff febd 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 8002c72:	20a1      	movs	r0, #161	; 0xa1
 8002c74:	f7ff feba 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 8002c78:	20c8      	movs	r0, #200	; 0xc8
 8002c7a:	f7ff feb7 	bl	80029ec <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 8002c7e:	20da      	movs	r0, #218	; 0xda
 8002c80:	f7ff feb4 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(0x12);
 8002c84:	2012      	movs	r0, #18
 8002c86:	f7ff feb1 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 8002c8a:	2081      	movs	r0, #129	; 0x81
 8002c8c:	f7ff feae 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(0xFF);
 8002c90:	20ff      	movs	r0, #255	; 0xff
 8002c92:	f7ff feab 	bl	80029ec <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 8002c96:	20d9      	movs	r0, #217	; 0xd9
 8002c98:	f7ff fea8 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(0xF1);
 8002c9c:	20f1      	movs	r0, #241	; 0xf1
 8002c9e:	f7ff fea5 	bl	80029ec <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 8002ca2:	20db      	movs	r0, #219	; 0xdb
 8002ca4:	f7ff fea2 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(0x40);
 8002ca8:	2040      	movs	r0, #64	; 0x40
 8002caa:	f7ff fe9f 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 8002cae:	20a4      	movs	r0, #164	; 0xa4
 8002cb0:	f7ff fe9c 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 8002cb4:	20a6      	movs	r0, #166	; 0xa6
 8002cb6:	f7ff fe99 	bl	80029ec <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 8002cba:	202e      	movs	r0, #46	; 0x2e
 8002cbc:	f7ff fe96 	bl	80029ec <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON);
 8002cc0:	20af      	movs	r0, #175	; 0xaf
 8002cc2:	f7ff fe93 	bl	80029ec <SSD1306_Command>



}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20001050 	.word	0x20001050

08002cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cda:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <HAL_MspInit+0x5c>)
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	4a14      	ldr	r2, [pc, #80]	; (8002d30 <HAL_MspInit+0x5c>)
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	6193      	str	r3, [r2, #24]
 8002ce6:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <HAL_MspInit+0x5c>)
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cf2:	4b0f      	ldr	r3, [pc, #60]	; (8002d30 <HAL_MspInit+0x5c>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	4a0e      	ldr	r2, [pc, #56]	; (8002d30 <HAL_MspInit+0x5c>)
 8002cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	61d3      	str	r3, [r2, #28]
 8002cfe:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <HAL_MspInit+0x5c>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d06:	607b      	str	r3, [r7, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <HAL_MspInit+0x60>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	4a04      	ldr	r2, [pc, #16]	; (8002d34 <HAL_MspInit+0x60>)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40010000 	.word	0x40010000

08002d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d3c:	e7fe      	b.n	8002d3c <NMI_Handler+0x4>

08002d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d42:	e7fe      	b.n	8002d42 <HardFault_Handler+0x4>

08002d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d48:	e7fe      	b.n	8002d48 <MemManage_Handler+0x4>

08002d4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d4e:	e7fe      	b.n	8002d4e <BusFault_Handler+0x4>

08002d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d54:	e7fe      	b.n	8002d54 <UsageFault_Handler+0x4>

08002d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d56:	b480      	push	{r7}
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr

08002d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr

08002d7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d7e:	f000 fc49 	bl	8003614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002d8c:	4802      	ldr	r0, [pc, #8]	; (8002d98 <DMA1_Channel6_IRQHandler+0x10>)
 8002d8e:	f001 f991 	bl	80040b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	2000051c 	.word	0x2000051c

08002d9c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002da0:	4802      	ldr	r0, [pc, #8]	; (8002dac <DMA1_Channel7_IRQHandler+0x10>)
 8002da2:	f001 f987 	bl	80040b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	200004d8 	.word	0x200004d8

08002db0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002db4:	4802      	ldr	r0, [pc, #8]	; (8002dc0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002db6:	f004 fc3e 	bl	8007636 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	2000268c 	.word	0x2000268c

08002dc4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002dc8:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <I2C1_EV_IRQHandler+0x10>)
 8002dca:	f002 faf3 	bl	80053b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000484 	.word	0x20000484

08002dd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return 1;
 8002ddc:	2301      	movs	r3, #1
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr

08002de6 <_kill>:

int _kill(int pid, int sig)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002df0:	f00c f9e2 	bl	800f1b8 <__errno>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2216      	movs	r2, #22
 8002df8:	601a      	str	r2, [r3, #0]
  return -1;
 8002dfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <_exit>:

void _exit (int status)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e0e:	f04f 31ff 	mov.w	r1, #4294967295
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff ffe7 	bl	8002de6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e18:	e7fe      	b.n	8002e18 <_exit+0x12>

08002e1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	e00a      	b.n	8002e42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e2c:	f3af 8000 	nop.w
 8002e30:	4601      	mov	r1, r0
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	60ba      	str	r2, [r7, #8]
 8002e38:	b2ca      	uxtb	r2, r1
 8002e3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	dbf0      	blt.n	8002e2c <_read+0x12>
  }

  return len;
 8002e4a:	687b      	ldr	r3, [r7, #4]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3718      	adds	r7, #24
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	e009      	b.n	8002e7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	60ba      	str	r2, [r7, #8]
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	3301      	adds	r3, #1
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	dbf1      	blt.n	8002e66 <_write+0x12>
  }
  return len;
 8002e82:	687b      	ldr	r3, [r7, #4]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <_close>:

int _close(int file)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr

08002ea2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
 8002eaa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eb2:	605a      	str	r2, [r3, #4]
  return 0;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <_isatty>:

int _isatty(int file)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ec8:	2301      	movs	r3, #1
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr

08002ed4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ef4:	4a14      	ldr	r2, [pc, #80]	; (8002f48 <_sbrk+0x5c>)
 8002ef6:	4b15      	ldr	r3, [pc, #84]	; (8002f4c <_sbrk+0x60>)
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f00:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <_sbrk+0x64>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d102      	bne.n	8002f0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f08:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <_sbrk+0x64>)
 8002f0a:	4a12      	ldr	r2, [pc, #72]	; (8002f54 <_sbrk+0x68>)
 8002f0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f0e:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <_sbrk+0x64>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4413      	add	r3, r2
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d207      	bcs.n	8002f2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f1c:	f00c f94c 	bl	800f1b8 <__errno>
 8002f20:	4603      	mov	r3, r0
 8002f22:	220c      	movs	r2, #12
 8002f24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f26:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2a:	e009      	b.n	8002f40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f2c:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <_sbrk+0x64>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f32:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <_sbrk+0x64>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4413      	add	r3, r2
 8002f3a:	4a05      	ldr	r2, [pc, #20]	; (8002f50 <_sbrk+0x64>)
 8002f3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	20010000 	.word	0x20010000
 8002f4c:	00001000 	.word	0x00001000
 8002f50:	20001854 	.word	0x20001854
 8002f54:	20002bb0 	.word	0x20002bb0

08002f58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f5c:	bf00      	nop
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08e      	sub	sp, #56	; 0x38
 8002f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f78:	f107 0320 	add.w	r3, r7, #32
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f82:	1d3b      	adds	r3, r7, #4
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	60da      	str	r2, [r3, #12]
 8002f8e:	611a      	str	r2, [r3, #16]
 8002f90:	615a      	str	r2, [r3, #20]
 8002f92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f94:	4b2c      	ldr	r3, [pc, #176]	; (8003048 <MX_TIM3_Init+0xe4>)
 8002f96:	4a2d      	ldr	r2, [pc, #180]	; (800304c <MX_TIM3_Init+0xe8>)
 8002f98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002f9a:	4b2b      	ldr	r3, [pc, #172]	; (8003048 <MX_TIM3_Init+0xe4>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fa0:	4b29      	ldr	r3, [pc, #164]	; (8003048 <MX_TIM3_Init+0xe4>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002fa6:	4b28      	ldr	r3, [pc, #160]	; (8003048 <MX_TIM3_Init+0xe4>)
 8002fa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fae:	4b26      	ldr	r3, [pc, #152]	; (8003048 <MX_TIM3_Init+0xe4>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fb4:	4b24      	ldr	r3, [pc, #144]	; (8003048 <MX_TIM3_Init+0xe4>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002fba:	4823      	ldr	r0, [pc, #140]	; (8003048 <MX_TIM3_Init+0xe4>)
 8002fbc:	f006 fc4c 	bl	8009858 <HAL_TIM_Base_Init>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002fc6:	f7fe fff9 	bl	8001fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002fd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	481c      	ldr	r0, [pc, #112]	; (8003048 <MX_TIM3_Init+0xe4>)
 8002fd8:	f006 fe62 	bl	8009ca0 <HAL_TIM_ConfigClockSource>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002fe2:	f7fe ffeb 	bl	8001fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002fe6:	4818      	ldr	r0, [pc, #96]	; (8003048 <MX_TIM3_Init+0xe4>)
 8002fe8:	f006 fc85 	bl	80098f6 <HAL_TIM_PWM_Init>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002ff2:	f7fe ffe3 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ffe:	f107 0320 	add.w	r3, r7, #32
 8003002:	4619      	mov	r1, r3
 8003004:	4810      	ldr	r0, [pc, #64]	; (8003048 <MX_TIM3_Init+0xe4>)
 8003006:	f007 f9f3 	bl	800a3f0 <HAL_TIMEx_MasterConfigSynchronization>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003010:	f7fe ffd4 	bl	8001fbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003014:	2360      	movs	r3, #96	; 0x60
 8003016:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003024:	1d3b      	adds	r3, r7, #4
 8003026:	2200      	movs	r2, #0
 8003028:	4619      	mov	r1, r3
 800302a:	4807      	ldr	r0, [pc, #28]	; (8003048 <MX_TIM3_Init+0xe4>)
 800302c:	f006 fd76 	bl	8009b1c <HAL_TIM_PWM_ConfigChannel>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003036:	f7fe ffc1 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800303a:	4803      	ldr	r0, [pc, #12]	; (8003048 <MX_TIM3_Init+0xe4>)
 800303c:	f000 f8d4 	bl	80031e8 <HAL_TIM_MspPostInit>

}
 8003040:	bf00      	nop
 8003042:	3738      	adds	r7, #56	; 0x38
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	20001858 	.word	0x20001858
 800304c:	40000400 	.word	0x40000400

08003050 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08e      	sub	sp, #56	; 0x38
 8003054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003056:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	605a      	str	r2, [r3, #4]
 8003060:	609a      	str	r2, [r3, #8]
 8003062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003064:	f107 0320 	add.w	r3, r7, #32
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800306e:	1d3b      	adds	r3, r7, #4
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	60da      	str	r2, [r3, #12]
 800307a:	611a      	str	r2, [r3, #16]
 800307c:	615a      	str	r2, [r3, #20]
 800307e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003080:	4b3e      	ldr	r3, [pc, #248]	; (800317c <MX_TIM4_Init+0x12c>)
 8003082:	4a3f      	ldr	r2, [pc, #252]	; (8003180 <MX_TIM4_Init+0x130>)
 8003084:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 8003086:	4b3d      	ldr	r3, [pc, #244]	; (800317c <MX_TIM4_Init+0x12c>)
 8003088:	f240 22cf 	movw	r2, #719	; 0x2cf
 800308c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800308e:	4b3b      	ldr	r3, [pc, #236]	; (800317c <MX_TIM4_Init+0x12c>)
 8003090:	2200      	movs	r2, #0
 8003092:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8003094:	4b39      	ldr	r3, [pc, #228]	; (800317c <MX_TIM4_Init+0x12c>)
 8003096:	f240 32e7 	movw	r2, #999	; 0x3e7
 800309a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800309c:	4b37      	ldr	r3, [pc, #220]	; (800317c <MX_TIM4_Init+0x12c>)
 800309e:	2200      	movs	r2, #0
 80030a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030a2:	4b36      	ldr	r3, [pc, #216]	; (800317c <MX_TIM4_Init+0x12c>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80030a8:	4834      	ldr	r0, [pc, #208]	; (800317c <MX_TIM4_Init+0x12c>)
 80030aa:	f006 fbd5 	bl	8009858 <HAL_TIM_Base_Init>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80030b4:	f7fe ff82 	bl	8001fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030bc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80030be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030c2:	4619      	mov	r1, r3
 80030c4:	482d      	ldr	r0, [pc, #180]	; (800317c <MX_TIM4_Init+0x12c>)
 80030c6:	f006 fdeb 	bl	8009ca0 <HAL_TIM_ConfigClockSource>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80030d0:	f7fe ff74 	bl	8001fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80030d4:	4829      	ldr	r0, [pc, #164]	; (800317c <MX_TIM4_Init+0x12c>)
 80030d6:	f006 fc0e 	bl	80098f6 <HAL_TIM_PWM_Init>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80030e0:	f7fe ff6c 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030e4:	2300      	movs	r3, #0
 80030e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030e8:	2300      	movs	r3, #0
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80030ec:	f107 0320 	add.w	r3, r7, #32
 80030f0:	4619      	mov	r1, r3
 80030f2:	4822      	ldr	r0, [pc, #136]	; (800317c <MX_TIM4_Init+0x12c>)
 80030f4:	f007 f97c 	bl	800a3f0 <HAL_TIMEx_MasterConfigSynchronization>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80030fe:	f7fe ff5d 	bl	8001fbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003102:	2360      	movs	r3, #96	; 0x60
 8003104:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 8003106:	f240 13f3 	movw	r3, #499	; 0x1f3
 800310a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003114:	1d3b      	adds	r3, r7, #4
 8003116:	2200      	movs	r2, #0
 8003118:	4619      	mov	r1, r3
 800311a:	4818      	ldr	r0, [pc, #96]	; (800317c <MX_TIM4_Init+0x12c>)
 800311c:	f006 fcfe 	bl	8009b1c <HAL_TIM_PWM_ConfigChannel>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8003126:	f7fe ff49 	bl	8001fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800312a:	1d3b      	adds	r3, r7, #4
 800312c:	2204      	movs	r2, #4
 800312e:	4619      	mov	r1, r3
 8003130:	4812      	ldr	r0, [pc, #72]	; (800317c <MX_TIM4_Init+0x12c>)
 8003132:	f006 fcf3 	bl	8009b1c <HAL_TIM_PWM_ConfigChannel>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 800313c:	f7fe ff3e 	bl	8001fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003140:	1d3b      	adds	r3, r7, #4
 8003142:	2208      	movs	r2, #8
 8003144:	4619      	mov	r1, r3
 8003146:	480d      	ldr	r0, [pc, #52]	; (800317c <MX_TIM4_Init+0x12c>)
 8003148:	f006 fce8 	bl	8009b1c <HAL_TIM_PWM_ConfigChannel>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 8003152:	f7fe ff33 	bl	8001fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003156:	1d3b      	adds	r3, r7, #4
 8003158:	220c      	movs	r2, #12
 800315a:	4619      	mov	r1, r3
 800315c:	4807      	ldr	r0, [pc, #28]	; (800317c <MX_TIM4_Init+0x12c>)
 800315e:	f006 fcdd 	bl	8009b1c <HAL_TIM_PWM_ConfigChannel>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <MX_TIM4_Init+0x11c>
  {
    Error_Handler();
 8003168:	f7fe ff28 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800316c:	4803      	ldr	r0, [pc, #12]	; (800317c <MX_TIM4_Init+0x12c>)
 800316e:	f000 f83b 	bl	80031e8 <HAL_TIM_MspPostInit>

}
 8003172:	bf00      	nop
 8003174:	3738      	adds	r7, #56	; 0x38
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	200018a0 	.word	0x200018a0
 8003180:	40000800 	.word	0x40000800

08003184 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a12      	ldr	r2, [pc, #72]	; (80031dc <HAL_TIM_Base_MspInit+0x58>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d10c      	bne.n	80031b0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003196:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <HAL_TIM_Base_MspInit+0x5c>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	4a11      	ldr	r2, [pc, #68]	; (80031e0 <HAL_TIM_Base_MspInit+0x5c>)
 800319c:	f043 0302 	orr.w	r3, r3, #2
 80031a0:	61d3      	str	r3, [r2, #28]
 80031a2:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <HAL_TIM_Base_MspInit+0x5c>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80031ae:	e010      	b.n	80031d2 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a0b      	ldr	r2, [pc, #44]	; (80031e4 <HAL_TIM_Base_MspInit+0x60>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d10b      	bne.n	80031d2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <HAL_TIM_Base_MspInit+0x5c>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	4a08      	ldr	r2, [pc, #32]	; (80031e0 <HAL_TIM_Base_MspInit+0x5c>)
 80031c0:	f043 0304 	orr.w	r3, r3, #4
 80031c4:	61d3      	str	r3, [r2, #28]
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_TIM_Base_MspInit+0x5c>)
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	68bb      	ldr	r3, [r7, #8]
}
 80031d2:	bf00      	nop
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr
 80031dc:	40000400 	.word	0x40000400
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40000800 	.word	0x40000800

080031e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	; 0x28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f0:	f107 0310 	add.w	r3, r7, #16
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a2f      	ldr	r2, [pc, #188]	; (80032c0 <HAL_TIM_MspPostInit+0xd8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d12a      	bne.n	800325e <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003208:	4b2e      	ldr	r3, [pc, #184]	; (80032c4 <HAL_TIM_MspPostInit+0xdc>)
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	4a2d      	ldr	r2, [pc, #180]	; (80032c4 <HAL_TIM_MspPostInit+0xdc>)
 800320e:	f043 0310 	orr.w	r3, r3, #16
 8003212:	6193      	str	r3, [r2, #24]
 8003214:	4b2b      	ldr	r3, [pc, #172]	; (80032c4 <HAL_TIM_MspPostInit+0xdc>)
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003220:	2340      	movs	r3, #64	; 0x40
 8003222:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003224:	2302      	movs	r3, #2
 8003226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003228:	2302      	movs	r3, #2
 800322a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800322c:	f107 0310 	add.w	r3, r7, #16
 8003230:	4619      	mov	r1, r3
 8003232:	4825      	ldr	r0, [pc, #148]	; (80032c8 <HAL_TIM_MspPostInit+0xe0>)
 8003234:	f001 f9b4 	bl	80045a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8003238:	4b24      	ldr	r3, [pc, #144]	; (80032cc <HAL_TIM_MspPostInit+0xe4>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	623b      	str	r3, [r7, #32]
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003244:	623b      	str	r3, [r7, #32]
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800324c:	623b      	str	r3, [r7, #32]
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8003254:	623b      	str	r3, [r7, #32]
 8003256:	4a1d      	ldr	r2, [pc, #116]	; (80032cc <HAL_TIM_MspPostInit+0xe4>)
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800325c:	e02b      	b.n	80032b6 <HAL_TIM_MspPostInit+0xce>
  else if(timHandle->Instance==TIM4)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a1b      	ldr	r2, [pc, #108]	; (80032d0 <HAL_TIM_MspPostInit+0xe8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d126      	bne.n	80032b6 <HAL_TIM_MspPostInit+0xce>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003268:	4b16      	ldr	r3, [pc, #88]	; (80032c4 <HAL_TIM_MspPostInit+0xdc>)
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	4a15      	ldr	r2, [pc, #84]	; (80032c4 <HAL_TIM_MspPostInit+0xdc>)
 800326e:	f043 0320 	orr.w	r3, r3, #32
 8003272:	6193      	str	r3, [r2, #24]
 8003274:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <HAL_TIM_MspPostInit+0xdc>)
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003280:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003284:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003286:	2302      	movs	r3, #2
 8003288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328a:	2302      	movs	r3, #2
 800328c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800328e:	f107 0310 	add.w	r3, r7, #16
 8003292:	4619      	mov	r1, r3
 8003294:	480f      	ldr	r0, [pc, #60]	; (80032d4 <HAL_TIM_MspPostInit+0xec>)
 8003296:	f001 f983 	bl	80045a0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 800329a:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <HAL_TIM_MspPostInit+0xe4>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
 80032b0:	4a06      	ldr	r2, [pc, #24]	; (80032cc <HAL_TIM_MspPostInit+0xe4>)
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	6053      	str	r3, [r2, #4]
}
 80032b6:	bf00      	nop
 80032b8:	3728      	adds	r7, #40	; 0x28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40000400 	.word	0x40000400
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40011000 	.word	0x40011000
 80032cc:	40010000 	.word	0x40010000
 80032d0:	40000800 	.word	0x40000800
 80032d4:	40011400 	.word	0x40011400

080032d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032dc:	4b11      	ldr	r3, [pc, #68]	; (8003324 <MX_USART1_UART_Init+0x4c>)
 80032de:	4a12      	ldr	r2, [pc, #72]	; (8003328 <MX_USART1_UART_Init+0x50>)
 80032e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80032e2:	4b10      	ldr	r3, [pc, #64]	; (8003324 <MX_USART1_UART_Init+0x4c>)
 80032e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032ea:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <MX_USART1_UART_Init+0x4c>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80032f0:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <MX_USART1_UART_Init+0x4c>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80032f6:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <MX_USART1_UART_Init+0x4c>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80032fc:	4b09      	ldr	r3, [pc, #36]	; (8003324 <MX_USART1_UART_Init+0x4c>)
 80032fe:	220c      	movs	r2, #12
 8003300:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <MX_USART1_UART_Init+0x4c>)
 8003304:	2200      	movs	r2, #0
 8003306:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <MX_USART1_UART_Init+0x4c>)
 800330a:	2200      	movs	r2, #0
 800330c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800330e:	4805      	ldr	r0, [pc, #20]	; (8003324 <MX_USART1_UART_Init+0x4c>)
 8003310:	f007 f8da 	bl	800a4c8 <HAL_UART_Init>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800331a:	f7fe fe4f 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	200018e8 	.word	0x200018e8
 8003328:	40013800 	.word	0x40013800

0800332c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003330:	4b11      	ldr	r3, [pc, #68]	; (8003378 <MX_USART2_UART_Init+0x4c>)
 8003332:	4a12      	ldr	r2, [pc, #72]	; (800337c <MX_USART2_UART_Init+0x50>)
 8003334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003336:	4b10      	ldr	r3, [pc, #64]	; (8003378 <MX_USART2_UART_Init+0x4c>)
 8003338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800333c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800333e:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <MX_USART2_UART_Init+0x4c>)
 8003340:	2200      	movs	r2, #0
 8003342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003344:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <MX_USART2_UART_Init+0x4c>)
 8003346:	2200      	movs	r2, #0
 8003348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800334a:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <MX_USART2_UART_Init+0x4c>)
 800334c:	2200      	movs	r2, #0
 800334e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003350:	4b09      	ldr	r3, [pc, #36]	; (8003378 <MX_USART2_UART_Init+0x4c>)
 8003352:	220c      	movs	r2, #12
 8003354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003356:	4b08      	ldr	r3, [pc, #32]	; (8003378 <MX_USART2_UART_Init+0x4c>)
 8003358:	2200      	movs	r2, #0
 800335a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <MX_USART2_UART_Init+0x4c>)
 800335e:	2200      	movs	r2, #0
 8003360:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003362:	4805      	ldr	r0, [pc, #20]	; (8003378 <MX_USART2_UART_Init+0x4c>)
 8003364:	f007 f8b0 	bl	800a4c8 <HAL_UART_Init>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800336e:	f7fe fe25 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003372:	bf00      	nop
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20001930 	.word	0x20001930
 800337c:	40004400 	.word	0x40004400

08003380 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003384:	4b11      	ldr	r3, [pc, #68]	; (80033cc <MX_USART3_UART_Init+0x4c>)
 8003386:	4a12      	ldr	r2, [pc, #72]	; (80033d0 <MX_USART3_UART_Init+0x50>)
 8003388:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800338a:	4b10      	ldr	r3, [pc, #64]	; (80033cc <MX_USART3_UART_Init+0x4c>)
 800338c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003390:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003392:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <MX_USART3_UART_Init+0x4c>)
 8003394:	2200      	movs	r2, #0
 8003396:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <MX_USART3_UART_Init+0x4c>)
 800339a:	2200      	movs	r2, #0
 800339c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800339e:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <MX_USART3_UART_Init+0x4c>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033a4:	4b09      	ldr	r3, [pc, #36]	; (80033cc <MX_USART3_UART_Init+0x4c>)
 80033a6:	220c      	movs	r2, #12
 80033a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033aa:	4b08      	ldr	r3, [pc, #32]	; (80033cc <MX_USART3_UART_Init+0x4c>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033b0:	4b06      	ldr	r3, [pc, #24]	; (80033cc <MX_USART3_UART_Init+0x4c>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 80033b6:	4805      	ldr	r0, [pc, #20]	; (80033cc <MX_USART3_UART_Init+0x4c>)
 80033b8:	f007 f8d6 	bl	800a568 <HAL_HalfDuplex_Init>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80033c2:	f7fe fdfb 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20001978 	.word	0x20001978
 80033d0:	40004800 	.word	0x40004800

080033d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08c      	sub	sp, #48	; 0x30
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	f107 0320 	add.w	r3, r7, #32
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a4d      	ldr	r2, [pc, #308]	; (8003524 <HAL_UART_MspInit+0x150>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d132      	bne.n	800345a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033f4:	4b4c      	ldr	r3, [pc, #304]	; (8003528 <HAL_UART_MspInit+0x154>)
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	4a4b      	ldr	r2, [pc, #300]	; (8003528 <HAL_UART_MspInit+0x154>)
 80033fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033fe:	6193      	str	r3, [r2, #24]
 8003400:	4b49      	ldr	r3, [pc, #292]	; (8003528 <HAL_UART_MspInit+0x154>)
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800340c:	4b46      	ldr	r3, [pc, #280]	; (8003528 <HAL_UART_MspInit+0x154>)
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	4a45      	ldr	r2, [pc, #276]	; (8003528 <HAL_UART_MspInit+0x154>)
 8003412:	f043 0304 	orr.w	r3, r3, #4
 8003416:	6193      	str	r3, [r2, #24]
 8003418:	4b43      	ldr	r3, [pc, #268]	; (8003528 <HAL_UART_MspInit+0x154>)
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	61bb      	str	r3, [r7, #24]
 8003422:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342a:	2302      	movs	r3, #2
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800342e:	2303      	movs	r3, #3
 8003430:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003432:	f107 0320 	add.w	r3, r7, #32
 8003436:	4619      	mov	r1, r3
 8003438:	483c      	ldr	r0, [pc, #240]	; (800352c <HAL_UART_MspInit+0x158>)
 800343a:	f001 f8b1 	bl	80045a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800343e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003444:	2300      	movs	r3, #0
 8003446:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003448:	2300      	movs	r3, #0
 800344a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344c:	f107 0320 	add.w	r3, r7, #32
 8003450:	4619      	mov	r1, r3
 8003452:	4836      	ldr	r0, [pc, #216]	; (800352c <HAL_UART_MspInit+0x158>)
 8003454:	f001 f8a4 	bl	80045a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003458:	e05f      	b.n	800351a <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a34      	ldr	r2, [pc, #208]	; (8003530 <HAL_UART_MspInit+0x15c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d130      	bne.n	80034c6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003464:	4b30      	ldr	r3, [pc, #192]	; (8003528 <HAL_UART_MspInit+0x154>)
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	4a2f      	ldr	r2, [pc, #188]	; (8003528 <HAL_UART_MspInit+0x154>)
 800346a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800346e:	61d3      	str	r3, [r2, #28]
 8003470:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <HAL_UART_MspInit+0x154>)
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800347c:	4b2a      	ldr	r3, [pc, #168]	; (8003528 <HAL_UART_MspInit+0x154>)
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	4a29      	ldr	r2, [pc, #164]	; (8003528 <HAL_UART_MspInit+0x154>)
 8003482:	f043 0304 	orr.w	r3, r3, #4
 8003486:	6193      	str	r3, [r2, #24]
 8003488:	4b27      	ldr	r3, [pc, #156]	; (8003528 <HAL_UART_MspInit+0x154>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003494:	2304      	movs	r3, #4
 8003496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003498:	2302      	movs	r3, #2
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800349c:	2303      	movs	r3, #3
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a0:	f107 0320 	add.w	r3, r7, #32
 80034a4:	4619      	mov	r1, r3
 80034a6:	4821      	ldr	r0, [pc, #132]	; (800352c <HAL_UART_MspInit+0x158>)
 80034a8:	f001 f87a 	bl	80045a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034ac:	2308      	movs	r3, #8
 80034ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034b0:	2300      	movs	r3, #0
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b8:	f107 0320 	add.w	r3, r7, #32
 80034bc:	4619      	mov	r1, r3
 80034be:	481b      	ldr	r0, [pc, #108]	; (800352c <HAL_UART_MspInit+0x158>)
 80034c0:	f001 f86e 	bl	80045a0 <HAL_GPIO_Init>
}
 80034c4:	e029      	b.n	800351a <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART3)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a1a      	ldr	r2, [pc, #104]	; (8003534 <HAL_UART_MspInit+0x160>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d124      	bne.n	800351a <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 80034d0:	4b15      	ldr	r3, [pc, #84]	; (8003528 <HAL_UART_MspInit+0x154>)
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	4a14      	ldr	r2, [pc, #80]	; (8003528 <HAL_UART_MspInit+0x154>)
 80034d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034da:	61d3      	str	r3, [r2, #28]
 80034dc:	4b12      	ldr	r3, [pc, #72]	; (8003528 <HAL_UART_MspInit+0x154>)
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e8:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <HAL_UART_MspInit+0x154>)
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	4a0e      	ldr	r2, [pc, #56]	; (8003528 <HAL_UART_MspInit+0x154>)
 80034ee:	f043 0308 	orr.w	r3, r3, #8
 80034f2:	6193      	str	r3, [r2, #24]
 80034f4:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <HAL_UART_MspInit+0x154>)
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003506:	2312      	movs	r3, #18
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800350a:	2303      	movs	r3, #3
 800350c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350e:	f107 0320 	add.w	r3, r7, #32
 8003512:	4619      	mov	r1, r3
 8003514:	4808      	ldr	r0, [pc, #32]	; (8003538 <HAL_UART_MspInit+0x164>)
 8003516:	f001 f843 	bl	80045a0 <HAL_GPIO_Init>
}
 800351a:	bf00      	nop
 800351c:	3730      	adds	r7, #48	; 0x30
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40013800 	.word	0x40013800
 8003528:	40021000 	.word	0x40021000
 800352c:	40010800 	.word	0x40010800
 8003530:	40004400 	.word	0x40004400
 8003534:	40004800 	.word	0x40004800
 8003538:	40010c00 	.word	0x40010c00

0800353c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800353c:	f7ff fd0c 	bl	8002f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003540:	480b      	ldr	r0, [pc, #44]	; (8003570 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003542:	490c      	ldr	r1, [pc, #48]	; (8003574 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003544:	4a0c      	ldr	r2, [pc, #48]	; (8003578 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003548:	e002      	b.n	8003550 <LoopCopyDataInit>

0800354a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800354a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800354c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800354e:	3304      	adds	r3, #4

08003550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003554:	d3f9      	bcc.n	800354a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003556:	4a09      	ldr	r2, [pc, #36]	; (800357c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003558:	4c09      	ldr	r4, [pc, #36]	; (8003580 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800355a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800355c:	e001      	b.n	8003562 <LoopFillZerobss>

0800355e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800355e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003560:	3204      	adds	r2, #4

08003562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003564:	d3fb      	bcc.n	800355e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003566:	f00b fe2d 	bl	800f1c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800356a:	f7fe fa49 	bl	8001a00 <main>
  bx lr
 800356e:	4770      	bx	lr
  ldr r0, =_sdata
 8003570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003574:	20000434 	.word	0x20000434
  ldr r2, =_sidata
 8003578:	08010960 	.word	0x08010960
  ldr r2, =_sbss
 800357c:	20000434 	.word	0x20000434
  ldr r4, =_ebss
 8003580:	20002bac 	.word	0x20002bac

08003584 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003584:	e7fe      	b.n	8003584 <ADC1_2_IRQHandler>
	...

08003588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800358c:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <HAL_Init+0x28>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a07      	ldr	r2, [pc, #28]	; (80035b0 <HAL_Init+0x28>)
 8003592:	f043 0310 	orr.w	r3, r3, #16
 8003596:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003598:	2003      	movs	r0, #3
 800359a:	f000 fb6b 	bl	8003c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800359e:	200f      	movs	r0, #15
 80035a0:	f000 f808 	bl	80035b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035a4:	f7ff fb96 	bl	8002cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40022000 	.word	0x40022000

080035b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035bc:	4b12      	ldr	r3, [pc, #72]	; (8003608 <HAL_InitTick+0x54>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	4b12      	ldr	r3, [pc, #72]	; (800360c <HAL_InitTick+0x58>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	4619      	mov	r1, r3
 80035c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80035ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 fb83 	bl	8003cde <HAL_SYSTICK_Config>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e00e      	b.n	8003600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b0f      	cmp	r3, #15
 80035e6:	d80a      	bhi.n	80035fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035e8:	2200      	movs	r2, #0
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	f04f 30ff 	mov.w	r0, #4294967295
 80035f0:	f000 fb4b 	bl	8003c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035f4:	4a06      	ldr	r2, [pc, #24]	; (8003610 <HAL_InitTick+0x5c>)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	e000      	b.n	8003600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
}
 8003600:	4618      	mov	r0, r3
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	2000024c 	.word	0x2000024c
 800360c:	20000254 	.word	0x20000254
 8003610:	20000250 	.word	0x20000250

08003614 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_IncTick+0x1c>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	461a      	mov	r2, r3
 800361e:	4b05      	ldr	r3, [pc, #20]	; (8003634 <HAL_IncTick+0x20>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4413      	add	r3, r2
 8003624:	4a03      	ldr	r2, [pc, #12]	; (8003634 <HAL_IncTick+0x20>)
 8003626:	6013      	str	r3, [r2, #0]
}
 8003628:	bf00      	nop
 800362a:	46bd      	mov	sp, r7
 800362c:	bc80      	pop	{r7}
 800362e:	4770      	bx	lr
 8003630:	20000254 	.word	0x20000254
 8003634:	200019c0 	.word	0x200019c0

08003638 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  return uwTick;
 800363c:	4b02      	ldr	r3, [pc, #8]	; (8003648 <HAL_GetTick+0x10>)
 800363e:	681b      	ldr	r3, [r3, #0]
}
 8003640:	4618      	mov	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr
 8003648:	200019c0 	.word	0x200019c0

0800364c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003654:	f7ff fff0 	bl	8003638 <HAL_GetTick>
 8003658:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003664:	d005      	beq.n	8003672 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003666:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <HAL_Delay+0x44>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4413      	add	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003672:	bf00      	nop
 8003674:	f7ff ffe0 	bl	8003638 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	429a      	cmp	r2, r3
 8003682:	d8f7      	bhi.n	8003674 <HAL_Delay+0x28>
  {
  }
}
 8003684:	bf00      	nop
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000254 	.word	0x20000254

08003694 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e0ce      	b.n	8003854 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d109      	bne.n	80036d8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7fd fd90 	bl	80011f8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f9bd 	bl	8003a58 <ADC_ConversionStop_Disable>
 80036de:	4603      	mov	r3, r0
 80036e0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	f003 0310 	and.w	r3, r3, #16
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f040 80a9 	bne.w	8003842 <HAL_ADC_Init+0x1ae>
 80036f0:	7dfb      	ldrb	r3, [r7, #23]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f040 80a5 	bne.w	8003842 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003700:	f023 0302 	bic.w	r3, r3, #2
 8003704:	f043 0202 	orr.w	r2, r3, #2
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4951      	ldr	r1, [pc, #324]	; (800385c <HAL_ADC_Init+0x1c8>)
 8003716:	428b      	cmp	r3, r1
 8003718:	d10a      	bne.n	8003730 <HAL_ADC_Init+0x9c>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003722:	d002      	beq.n	800372a <HAL_ADC_Init+0x96>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	e004      	b.n	8003734 <HAL_ADC_Init+0xa0>
 800372a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800372e:	e001      	b.n	8003734 <HAL_ADC_Init+0xa0>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003734:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	7b1b      	ldrb	r3, [r3, #12]
 800373a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800373c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	4313      	orrs	r3, r2
 8003742:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800374c:	d003      	beq.n	8003756 <HAL_ADC_Init+0xc2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d102      	bne.n	800375c <HAL_ADC_Init+0xc8>
 8003756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800375a:	e000      	b.n	800375e <HAL_ADC_Init+0xca>
 800375c:	2300      	movs	r3, #0
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	7d1b      	ldrb	r3, [r3, #20]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d119      	bne.n	80037a0 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	7b1b      	ldrb	r3, [r3, #12]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d109      	bne.n	8003788 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	3b01      	subs	r3, #1
 800377a:	035a      	lsls	r2, r3, #13
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003784:	613b      	str	r3, [r7, #16]
 8003786:	e00b      	b.n	80037a0 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	f043 0220 	orr.w	r2, r3, #32
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	f043 0201 	orr.w	r2, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	4b29      	ldr	r3, [pc, #164]	; (8003860 <HAL_ADC_Init+0x1cc>)
 80037bc:	4013      	ands	r3, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6812      	ldr	r2, [r2, #0]
 80037c2:	68b9      	ldr	r1, [r7, #8]
 80037c4:	430b      	orrs	r3, r1
 80037c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037d0:	d003      	beq.n	80037da <HAL_ADC_Init+0x146>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d104      	bne.n	80037e4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	3b01      	subs	r3, #1
 80037e0:	051b      	lsls	r3, r3, #20
 80037e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	4b19      	ldr	r3, [pc, #100]	; (8003864 <HAL_ADC_Init+0x1d0>)
 8003800:	4013      	ands	r3, r2
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	429a      	cmp	r2, r3
 8003806:	d10b      	bne.n	8003820 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003812:	f023 0303 	bic.w	r3, r3, #3
 8003816:	f043 0201 	orr.w	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800381e:	e018      	b.n	8003852 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	f023 0312 	bic.w	r3, r3, #18
 8003828:	f043 0210 	orr.w	r2, r3, #16
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	f043 0201 	orr.w	r2, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003840:	e007      	b.n	8003852 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	f043 0210 	orr.w	r2, r3, #16
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003852:	7dfb      	ldrb	r3, [r7, #23]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40013c00 	.word	0x40013c00
 8003860:	ffe1f7fd 	.word	0xffe1f7fd
 8003864:	ff1f0efe 	.word	0xff1f0efe

08003868 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x20>
 8003884:	2302      	movs	r3, #2
 8003886:	e0dc      	b.n	8003a42 <HAL_ADC_ConfigChannel+0x1da>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b06      	cmp	r3, #6
 8003896:	d81c      	bhi.n	80038d2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	3b05      	subs	r3, #5
 80038aa:	221f      	movs	r2, #31
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	4019      	ands	r1, r3
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	6818      	ldr	r0, [r3, #0]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	3b05      	subs	r3, #5
 80038c4:	fa00 f203 	lsl.w	r2, r0, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	635a      	str	r2, [r3, #52]	; 0x34
 80038d0:	e03c      	b.n	800394c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b0c      	cmp	r3, #12
 80038d8:	d81c      	bhi.n	8003914 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	3b23      	subs	r3, #35	; 0x23
 80038ec:	221f      	movs	r2, #31
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43db      	mvns	r3, r3
 80038f4:	4019      	ands	r1, r3
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	4613      	mov	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	3b23      	subs	r3, #35	; 0x23
 8003906:	fa00 f203 	lsl.w	r2, r0, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	631a      	str	r2, [r3, #48]	; 0x30
 8003912:	e01b      	b.n	800394c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	3b41      	subs	r3, #65	; 0x41
 8003926:	221f      	movs	r2, #31
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	4019      	ands	r1, r3
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	6818      	ldr	r0, [r3, #0]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	3b41      	subs	r3, #65	; 0x41
 8003940:	fa00 f203 	lsl.w	r2, r0, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b09      	cmp	r3, #9
 8003952:	d91c      	bls.n	800398e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68d9      	ldr	r1, [r3, #12]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	4613      	mov	r3, r2
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	4413      	add	r3, r2
 8003964:	3b1e      	subs	r3, #30
 8003966:	2207      	movs	r2, #7
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	43db      	mvns	r3, r3
 800396e:	4019      	ands	r1, r3
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	6898      	ldr	r0, [r3, #8]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	4613      	mov	r3, r2
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	4413      	add	r3, r2
 800397e:	3b1e      	subs	r3, #30
 8003980:	fa00 f203 	lsl.w	r2, r0, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	60da      	str	r2, [r3, #12]
 800398c:	e019      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6919      	ldr	r1, [r3, #16]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	4613      	mov	r3, r2
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	4413      	add	r3, r2
 800399e:	2207      	movs	r2, #7
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	4019      	ands	r1, r3
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	6898      	ldr	r0, [r3, #8]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4613      	mov	r3, r2
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	4413      	add	r3, r2
 80039b6:	fa00 f203 	lsl.w	r2, r0, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b10      	cmp	r3, #16
 80039c8:	d003      	beq.n	80039d2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80039ce:	2b11      	cmp	r3, #17
 80039d0:	d132      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a1d      	ldr	r2, [pc, #116]	; (8003a4c <HAL_ADC_ConfigChannel+0x1e4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d125      	bne.n	8003a28 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d126      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80039f8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b10      	cmp	r3, #16
 8003a00:	d11a      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a02:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <HAL_ADC_ConfigChannel+0x1e8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a13      	ldr	r2, [pc, #76]	; (8003a54 <HAL_ADC_ConfigChannel+0x1ec>)
 8003a08:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0c:	0c9a      	lsrs	r2, r3, #18
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a18:	e002      	b.n	8003a20 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f9      	bne.n	8003a1a <HAL_ADC_ConfigChannel+0x1b2>
 8003a26:	e007      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2c:	f043 0220 	orr.w	r2, r3, #32
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	40012400 	.word	0x40012400
 8003a50:	2000024c 	.word	0x2000024c
 8003a54:	431bde83 	.word	0x431bde83

08003a58 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d12e      	bne.n	8003ad0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0201 	bic.w	r2, r2, #1
 8003a80:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a82:	f7ff fdd9 	bl	8003638 <HAL_GetTick>
 8003a86:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003a88:	e01b      	b.n	8003ac2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a8a:	f7ff fdd5 	bl	8003638 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d914      	bls.n	8003ac2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d10d      	bne.n	8003ac2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	f043 0210 	orr.w	r2, r3, #16
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	f043 0201 	orr.w	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e007      	b.n	8003ad2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d0dc      	beq.n	8003a8a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aec:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <__NVIC_SetPriorityGrouping+0x44>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003af8:	4013      	ands	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b0e:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <__NVIC_SetPriorityGrouping+0x44>)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	60d3      	str	r3, [r2, #12]
}
 8003b14:	bf00      	nop
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	e000ed00 	.word	0xe000ed00

08003b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b28:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <__NVIC_GetPriorityGrouping+0x18>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	0a1b      	lsrs	r3, r3, #8
 8003b2e:	f003 0307 	and.w	r3, r3, #7
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	e000ed00 	.word	0xe000ed00

08003b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	db0b      	blt.n	8003b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	f003 021f 	and.w	r2, r3, #31
 8003b58:	4906      	ldr	r1, [pc, #24]	; (8003b74 <__NVIC_EnableIRQ+0x34>)
 8003b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	2001      	movs	r0, #1
 8003b62:	fa00 f202 	lsl.w	r2, r0, r2
 8003b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr
 8003b74:	e000e100 	.word	0xe000e100

08003b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	6039      	str	r1, [r7, #0]
 8003b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	db0a      	blt.n	8003ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	490c      	ldr	r1, [pc, #48]	; (8003bc4 <__NVIC_SetPriority+0x4c>)
 8003b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b96:	0112      	lsls	r2, r2, #4
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ba0:	e00a      	b.n	8003bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	4908      	ldr	r1, [pc, #32]	; (8003bc8 <__NVIC_SetPriority+0x50>)
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	3b04      	subs	r3, #4
 8003bb0:	0112      	lsls	r2, r2, #4
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	761a      	strb	r2, [r3, #24]
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	e000e100 	.word	0xe000e100
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b089      	sub	sp, #36	; 0x24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f1c3 0307 	rsb	r3, r3, #7
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	bf28      	it	cs
 8003bea:	2304      	movcs	r3, #4
 8003bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	2b06      	cmp	r3, #6
 8003bf4:	d902      	bls.n	8003bfc <NVIC_EncodePriority+0x30>
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3b03      	subs	r3, #3
 8003bfa:	e000      	b.n	8003bfe <NVIC_EncodePriority+0x32>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c00:	f04f 32ff 	mov.w	r2, #4294967295
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	401a      	ands	r2, r3
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c14:	f04f 31ff 	mov.w	r1, #4294967295
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1e:	43d9      	mvns	r1, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c24:	4313      	orrs	r3, r2
         );
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3724      	adds	r7, #36	; 0x24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr

08003c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c40:	d301      	bcc.n	8003c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c42:	2301      	movs	r3, #1
 8003c44:	e00f      	b.n	8003c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c46:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <SysTick_Config+0x40>)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c4e:	210f      	movs	r1, #15
 8003c50:	f04f 30ff 	mov.w	r0, #4294967295
 8003c54:	f7ff ff90 	bl	8003b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c58:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <SysTick_Config+0x40>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c5e:	4b04      	ldr	r3, [pc, #16]	; (8003c70 <SysTick_Config+0x40>)
 8003c60:	2207      	movs	r2, #7
 8003c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	e000e010 	.word	0xe000e010

08003c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff ff2d 	bl	8003adc <__NVIC_SetPriorityGrouping>
}
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b086      	sub	sp, #24
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	4603      	mov	r3, r0
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c9c:	f7ff ff42 	bl	8003b24 <__NVIC_GetPriorityGrouping>
 8003ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	6978      	ldr	r0, [r7, #20]
 8003ca8:	f7ff ff90 	bl	8003bcc <NVIC_EncodePriority>
 8003cac:	4602      	mov	r2, r0
 8003cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ff5f 	bl	8003b78 <__NVIC_SetPriority>
}
 8003cba:	bf00      	nop
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	4603      	mov	r3, r0
 8003cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff ff35 	bl	8003b40 <__NVIC_EnableIRQ>
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff ffa2 	bl	8003c30 <SysTick_Config>
 8003cec:	4603      	mov	r3, r0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e059      	b.n	8003dc2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	461a      	mov	r2, r3
 8003d14:	4b2d      	ldr	r3, [pc, #180]	; (8003dcc <HAL_DMA_Init+0xd4>)
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d80f      	bhi.n	8003d3a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	4b2b      	ldr	r3, [pc, #172]	; (8003dd0 <HAL_DMA_Init+0xd8>)
 8003d22:	4413      	add	r3, r2
 8003d24:	4a2b      	ldr	r2, [pc, #172]	; (8003dd4 <HAL_DMA_Init+0xdc>)
 8003d26:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2a:	091b      	lsrs	r3, r3, #4
 8003d2c:	009a      	lsls	r2, r3, #2
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a28      	ldr	r2, [pc, #160]	; (8003dd8 <HAL_DMA_Init+0xe0>)
 8003d36:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d38:	e00e      	b.n	8003d58 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	4b26      	ldr	r3, [pc, #152]	; (8003ddc <HAL_DMA_Init+0xe4>)
 8003d42:	4413      	add	r3, r2
 8003d44:	4a23      	ldr	r2, [pc, #140]	; (8003dd4 <HAL_DMA_Init+0xdc>)
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	009a      	lsls	r2, r3, #2
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a22      	ldr	r2, [pc, #136]	; (8003de0 <HAL_DMA_Init+0xe8>)
 8003d56:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003d72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr
 8003dcc:	40020407 	.word	0x40020407
 8003dd0:	bffdfff8 	.word	0xbffdfff8
 8003dd4:	cccccccd 	.word	0xcccccccd
 8003dd8:	40020000 	.word	0x40020000
 8003ddc:	bffdfbf8 	.word	0xbffdfbf8
 8003de0:	40020400 	.word	0x40020400

08003de4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
 8003df0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_DMA_Start_IT+0x20>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e04b      	b.n	8003e9c <HAL_DMA_Start_IT+0xb8>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d13a      	bne.n	8003e8e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0201 	bic.w	r2, r2, #1
 8003e34:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 fb82 	bl	8004546 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d008      	beq.n	8003e5c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 020e 	orr.w	r2, r2, #14
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e00f      	b.n	8003e7c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0204 	bic.w	r2, r2, #4
 8003e6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 020a 	orr.w	r2, r2, #10
 8003e7a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	e005      	b.n	8003e9a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e96:	2302      	movs	r3, #2
 8003e98:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d005      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2204      	movs	r2, #4
 8003ec0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	73fb      	strb	r3, [r7, #15]
 8003ec6:	e0d6      	b.n	8004076 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 020e 	bic.w	r2, r2, #14
 8003ed6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0201 	bic.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	461a      	mov	r2, r3
 8003eee:	4b64      	ldr	r3, [pc, #400]	; (8004080 <HAL_DMA_Abort_IT+0x1dc>)
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d958      	bls.n	8003fa6 <HAL_DMA_Abort_IT+0x102>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a62      	ldr	r2, [pc, #392]	; (8004084 <HAL_DMA_Abort_IT+0x1e0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d04f      	beq.n	8003f9e <HAL_DMA_Abort_IT+0xfa>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a61      	ldr	r2, [pc, #388]	; (8004088 <HAL_DMA_Abort_IT+0x1e4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d048      	beq.n	8003f9a <HAL_DMA_Abort_IT+0xf6>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a5f      	ldr	r2, [pc, #380]	; (800408c <HAL_DMA_Abort_IT+0x1e8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d040      	beq.n	8003f94 <HAL_DMA_Abort_IT+0xf0>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a5e      	ldr	r2, [pc, #376]	; (8004090 <HAL_DMA_Abort_IT+0x1ec>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d038      	beq.n	8003f8e <HAL_DMA_Abort_IT+0xea>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a5c      	ldr	r2, [pc, #368]	; (8004094 <HAL_DMA_Abort_IT+0x1f0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d030      	beq.n	8003f88 <HAL_DMA_Abort_IT+0xe4>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a5b      	ldr	r2, [pc, #364]	; (8004098 <HAL_DMA_Abort_IT+0x1f4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d028      	beq.n	8003f82 <HAL_DMA_Abort_IT+0xde>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a52      	ldr	r2, [pc, #328]	; (8004080 <HAL_DMA_Abort_IT+0x1dc>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d020      	beq.n	8003f7c <HAL_DMA_Abort_IT+0xd8>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a57      	ldr	r2, [pc, #348]	; (800409c <HAL_DMA_Abort_IT+0x1f8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d019      	beq.n	8003f78 <HAL_DMA_Abort_IT+0xd4>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a55      	ldr	r2, [pc, #340]	; (80040a0 <HAL_DMA_Abort_IT+0x1fc>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d012      	beq.n	8003f74 <HAL_DMA_Abort_IT+0xd0>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a54      	ldr	r2, [pc, #336]	; (80040a4 <HAL_DMA_Abort_IT+0x200>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00a      	beq.n	8003f6e <HAL_DMA_Abort_IT+0xca>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a52      	ldr	r2, [pc, #328]	; (80040a8 <HAL_DMA_Abort_IT+0x204>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d102      	bne.n	8003f68 <HAL_DMA_Abort_IT+0xc4>
 8003f62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f66:	e01b      	b.n	8003fa0 <HAL_DMA_Abort_IT+0xfc>
 8003f68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f6c:	e018      	b.n	8003fa0 <HAL_DMA_Abort_IT+0xfc>
 8003f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f72:	e015      	b.n	8003fa0 <HAL_DMA_Abort_IT+0xfc>
 8003f74:	2310      	movs	r3, #16
 8003f76:	e013      	b.n	8003fa0 <HAL_DMA_Abort_IT+0xfc>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e011      	b.n	8003fa0 <HAL_DMA_Abort_IT+0xfc>
 8003f7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f80:	e00e      	b.n	8003fa0 <HAL_DMA_Abort_IT+0xfc>
 8003f82:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003f86:	e00b      	b.n	8003fa0 <HAL_DMA_Abort_IT+0xfc>
 8003f88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f8c:	e008      	b.n	8003fa0 <HAL_DMA_Abort_IT+0xfc>
 8003f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f92:	e005      	b.n	8003fa0 <HAL_DMA_Abort_IT+0xfc>
 8003f94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f98:	e002      	b.n	8003fa0 <HAL_DMA_Abort_IT+0xfc>
 8003f9a:	2310      	movs	r3, #16
 8003f9c:	e000      	b.n	8003fa0 <HAL_DMA_Abort_IT+0xfc>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	4a42      	ldr	r2, [pc, #264]	; (80040ac <HAL_DMA_Abort_IT+0x208>)
 8003fa2:	6053      	str	r3, [r2, #4]
 8003fa4:	e057      	b.n	8004056 <HAL_DMA_Abort_IT+0x1b2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a36      	ldr	r2, [pc, #216]	; (8004084 <HAL_DMA_Abort_IT+0x1e0>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d04f      	beq.n	8004050 <HAL_DMA_Abort_IT+0x1ac>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a34      	ldr	r2, [pc, #208]	; (8004088 <HAL_DMA_Abort_IT+0x1e4>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d048      	beq.n	800404c <HAL_DMA_Abort_IT+0x1a8>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a33      	ldr	r2, [pc, #204]	; (800408c <HAL_DMA_Abort_IT+0x1e8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d040      	beq.n	8004046 <HAL_DMA_Abort_IT+0x1a2>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a31      	ldr	r2, [pc, #196]	; (8004090 <HAL_DMA_Abort_IT+0x1ec>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d038      	beq.n	8004040 <HAL_DMA_Abort_IT+0x19c>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a30      	ldr	r2, [pc, #192]	; (8004094 <HAL_DMA_Abort_IT+0x1f0>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d030      	beq.n	800403a <HAL_DMA_Abort_IT+0x196>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a2e      	ldr	r2, [pc, #184]	; (8004098 <HAL_DMA_Abort_IT+0x1f4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d028      	beq.n	8004034 <HAL_DMA_Abort_IT+0x190>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a26      	ldr	r2, [pc, #152]	; (8004080 <HAL_DMA_Abort_IT+0x1dc>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d020      	beq.n	800402e <HAL_DMA_Abort_IT+0x18a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a2a      	ldr	r2, [pc, #168]	; (800409c <HAL_DMA_Abort_IT+0x1f8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d019      	beq.n	800402a <HAL_DMA_Abort_IT+0x186>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a29      	ldr	r2, [pc, #164]	; (80040a0 <HAL_DMA_Abort_IT+0x1fc>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d012      	beq.n	8004026 <HAL_DMA_Abort_IT+0x182>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a27      	ldr	r2, [pc, #156]	; (80040a4 <HAL_DMA_Abort_IT+0x200>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00a      	beq.n	8004020 <HAL_DMA_Abort_IT+0x17c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a26      	ldr	r2, [pc, #152]	; (80040a8 <HAL_DMA_Abort_IT+0x204>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d102      	bne.n	800401a <HAL_DMA_Abort_IT+0x176>
 8004014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004018:	e01b      	b.n	8004052 <HAL_DMA_Abort_IT+0x1ae>
 800401a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800401e:	e018      	b.n	8004052 <HAL_DMA_Abort_IT+0x1ae>
 8004020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004024:	e015      	b.n	8004052 <HAL_DMA_Abort_IT+0x1ae>
 8004026:	2310      	movs	r3, #16
 8004028:	e013      	b.n	8004052 <HAL_DMA_Abort_IT+0x1ae>
 800402a:	2301      	movs	r3, #1
 800402c:	e011      	b.n	8004052 <HAL_DMA_Abort_IT+0x1ae>
 800402e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004032:	e00e      	b.n	8004052 <HAL_DMA_Abort_IT+0x1ae>
 8004034:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004038:	e00b      	b.n	8004052 <HAL_DMA_Abort_IT+0x1ae>
 800403a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800403e:	e008      	b.n	8004052 <HAL_DMA_Abort_IT+0x1ae>
 8004040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004044:	e005      	b.n	8004052 <HAL_DMA_Abort_IT+0x1ae>
 8004046:	f44f 7380 	mov.w	r3, #256	; 0x100
 800404a:	e002      	b.n	8004052 <HAL_DMA_Abort_IT+0x1ae>
 800404c:	2310      	movs	r3, #16
 800404e:	e000      	b.n	8004052 <HAL_DMA_Abort_IT+0x1ae>
 8004050:	2301      	movs	r3, #1
 8004052:	4a17      	ldr	r2, [pc, #92]	; (80040b0 <HAL_DMA_Abort_IT+0x20c>)
 8004054:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	4798      	blx	r3
    } 
  }
  return status;
 8004076:	7bfb      	ldrb	r3, [r7, #15]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40020080 	.word	0x40020080
 8004084:	40020008 	.word	0x40020008
 8004088:	4002001c 	.word	0x4002001c
 800408c:	40020030 	.word	0x40020030
 8004090:	40020044 	.word	0x40020044
 8004094:	40020058 	.word	0x40020058
 8004098:	4002006c 	.word	0x4002006c
 800409c:	40020408 	.word	0x40020408
 80040a0:	4002041c 	.word	0x4002041c
 80040a4:	40020430 	.word	0x40020430
 80040a8:	40020444 	.word	0x40020444
 80040ac:	40020400 	.word	0x40020400
 80040b0:	40020000 	.word	0x40020000

080040b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d0:	2204      	movs	r2, #4
 80040d2:	409a      	lsls	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4013      	ands	r3, r2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 80f1 	beq.w	80042c0 <HAL_DMA_IRQHandler+0x20c>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 80eb 	beq.w	80042c0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d107      	bne.n	8004108 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0204 	bic.w	r2, r2, #4
 8004106:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	461a      	mov	r2, r3
 800410e:	4b5f      	ldr	r3, [pc, #380]	; (800428c <HAL_DMA_IRQHandler+0x1d8>)
 8004110:	429a      	cmp	r2, r3
 8004112:	d958      	bls.n	80041c6 <HAL_DMA_IRQHandler+0x112>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a5d      	ldr	r2, [pc, #372]	; (8004290 <HAL_DMA_IRQHandler+0x1dc>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d04f      	beq.n	80041be <HAL_DMA_IRQHandler+0x10a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a5c      	ldr	r2, [pc, #368]	; (8004294 <HAL_DMA_IRQHandler+0x1e0>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d048      	beq.n	80041ba <HAL_DMA_IRQHandler+0x106>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a5a      	ldr	r2, [pc, #360]	; (8004298 <HAL_DMA_IRQHandler+0x1e4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d040      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x100>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a59      	ldr	r2, [pc, #356]	; (800429c <HAL_DMA_IRQHandler+0x1e8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d038      	beq.n	80041ae <HAL_DMA_IRQHandler+0xfa>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a57      	ldr	r2, [pc, #348]	; (80042a0 <HAL_DMA_IRQHandler+0x1ec>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d030      	beq.n	80041a8 <HAL_DMA_IRQHandler+0xf4>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a56      	ldr	r2, [pc, #344]	; (80042a4 <HAL_DMA_IRQHandler+0x1f0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d028      	beq.n	80041a2 <HAL_DMA_IRQHandler+0xee>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a4d      	ldr	r2, [pc, #308]	; (800428c <HAL_DMA_IRQHandler+0x1d8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d020      	beq.n	800419c <HAL_DMA_IRQHandler+0xe8>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a52      	ldr	r2, [pc, #328]	; (80042a8 <HAL_DMA_IRQHandler+0x1f4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d019      	beq.n	8004198 <HAL_DMA_IRQHandler+0xe4>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a50      	ldr	r2, [pc, #320]	; (80042ac <HAL_DMA_IRQHandler+0x1f8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d012      	beq.n	8004194 <HAL_DMA_IRQHandler+0xe0>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a4f      	ldr	r2, [pc, #316]	; (80042b0 <HAL_DMA_IRQHandler+0x1fc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d00a      	beq.n	800418e <HAL_DMA_IRQHandler+0xda>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a4d      	ldr	r2, [pc, #308]	; (80042b4 <HAL_DMA_IRQHandler+0x200>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d102      	bne.n	8004188 <HAL_DMA_IRQHandler+0xd4>
 8004182:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004186:	e01b      	b.n	80041c0 <HAL_DMA_IRQHandler+0x10c>
 8004188:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800418c:	e018      	b.n	80041c0 <HAL_DMA_IRQHandler+0x10c>
 800418e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004192:	e015      	b.n	80041c0 <HAL_DMA_IRQHandler+0x10c>
 8004194:	2340      	movs	r3, #64	; 0x40
 8004196:	e013      	b.n	80041c0 <HAL_DMA_IRQHandler+0x10c>
 8004198:	2304      	movs	r3, #4
 800419a:	e011      	b.n	80041c0 <HAL_DMA_IRQHandler+0x10c>
 800419c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80041a0:	e00e      	b.n	80041c0 <HAL_DMA_IRQHandler+0x10c>
 80041a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041a6:	e00b      	b.n	80041c0 <HAL_DMA_IRQHandler+0x10c>
 80041a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80041ac:	e008      	b.n	80041c0 <HAL_DMA_IRQHandler+0x10c>
 80041ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041b2:	e005      	b.n	80041c0 <HAL_DMA_IRQHandler+0x10c>
 80041b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041b8:	e002      	b.n	80041c0 <HAL_DMA_IRQHandler+0x10c>
 80041ba:	2340      	movs	r3, #64	; 0x40
 80041bc:	e000      	b.n	80041c0 <HAL_DMA_IRQHandler+0x10c>
 80041be:	2304      	movs	r3, #4
 80041c0:	4a3d      	ldr	r2, [pc, #244]	; (80042b8 <HAL_DMA_IRQHandler+0x204>)
 80041c2:	6053      	str	r3, [r2, #4]
 80041c4:	e057      	b.n	8004276 <HAL_DMA_IRQHandler+0x1c2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a31      	ldr	r2, [pc, #196]	; (8004290 <HAL_DMA_IRQHandler+0x1dc>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d04f      	beq.n	8004270 <HAL_DMA_IRQHandler+0x1bc>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a2f      	ldr	r2, [pc, #188]	; (8004294 <HAL_DMA_IRQHandler+0x1e0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d048      	beq.n	800426c <HAL_DMA_IRQHandler+0x1b8>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a2e      	ldr	r2, [pc, #184]	; (8004298 <HAL_DMA_IRQHandler+0x1e4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d040      	beq.n	8004266 <HAL_DMA_IRQHandler+0x1b2>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a2c      	ldr	r2, [pc, #176]	; (800429c <HAL_DMA_IRQHandler+0x1e8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d038      	beq.n	8004260 <HAL_DMA_IRQHandler+0x1ac>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a2b      	ldr	r2, [pc, #172]	; (80042a0 <HAL_DMA_IRQHandler+0x1ec>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d030      	beq.n	800425a <HAL_DMA_IRQHandler+0x1a6>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a29      	ldr	r2, [pc, #164]	; (80042a4 <HAL_DMA_IRQHandler+0x1f0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d028      	beq.n	8004254 <HAL_DMA_IRQHandler+0x1a0>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a21      	ldr	r2, [pc, #132]	; (800428c <HAL_DMA_IRQHandler+0x1d8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d020      	beq.n	800424e <HAL_DMA_IRQHandler+0x19a>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a25      	ldr	r2, [pc, #148]	; (80042a8 <HAL_DMA_IRQHandler+0x1f4>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d019      	beq.n	800424a <HAL_DMA_IRQHandler+0x196>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a24      	ldr	r2, [pc, #144]	; (80042ac <HAL_DMA_IRQHandler+0x1f8>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d012      	beq.n	8004246 <HAL_DMA_IRQHandler+0x192>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a22      	ldr	r2, [pc, #136]	; (80042b0 <HAL_DMA_IRQHandler+0x1fc>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d00a      	beq.n	8004240 <HAL_DMA_IRQHandler+0x18c>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a21      	ldr	r2, [pc, #132]	; (80042b4 <HAL_DMA_IRQHandler+0x200>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d102      	bne.n	800423a <HAL_DMA_IRQHandler+0x186>
 8004234:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004238:	e01b      	b.n	8004272 <HAL_DMA_IRQHandler+0x1be>
 800423a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800423e:	e018      	b.n	8004272 <HAL_DMA_IRQHandler+0x1be>
 8004240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004244:	e015      	b.n	8004272 <HAL_DMA_IRQHandler+0x1be>
 8004246:	2340      	movs	r3, #64	; 0x40
 8004248:	e013      	b.n	8004272 <HAL_DMA_IRQHandler+0x1be>
 800424a:	2304      	movs	r3, #4
 800424c:	e011      	b.n	8004272 <HAL_DMA_IRQHandler+0x1be>
 800424e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004252:	e00e      	b.n	8004272 <HAL_DMA_IRQHandler+0x1be>
 8004254:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004258:	e00b      	b.n	8004272 <HAL_DMA_IRQHandler+0x1be>
 800425a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800425e:	e008      	b.n	8004272 <HAL_DMA_IRQHandler+0x1be>
 8004260:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004264:	e005      	b.n	8004272 <HAL_DMA_IRQHandler+0x1be>
 8004266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800426a:	e002      	b.n	8004272 <HAL_DMA_IRQHandler+0x1be>
 800426c:	2340      	movs	r3, #64	; 0x40
 800426e:	e000      	b.n	8004272 <HAL_DMA_IRQHandler+0x1be>
 8004270:	2304      	movs	r3, #4
 8004272:	4a12      	ldr	r2, [pc, #72]	; (80042bc <HAL_DMA_IRQHandler+0x208>)
 8004274:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 8136 	beq.w	80044ec <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004288:	e130      	b.n	80044ec <HAL_DMA_IRQHandler+0x438>
 800428a:	bf00      	nop
 800428c:	40020080 	.word	0x40020080
 8004290:	40020008 	.word	0x40020008
 8004294:	4002001c 	.word	0x4002001c
 8004298:	40020030 	.word	0x40020030
 800429c:	40020044 	.word	0x40020044
 80042a0:	40020058 	.word	0x40020058
 80042a4:	4002006c 	.word	0x4002006c
 80042a8:	40020408 	.word	0x40020408
 80042ac:	4002041c 	.word	0x4002041c
 80042b0:	40020430 	.word	0x40020430
 80042b4:	40020444 	.word	0x40020444
 80042b8:	40020400 	.word	0x40020400
 80042bc:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	2202      	movs	r2, #2
 80042c6:	409a      	lsls	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80dd 	beq.w	800448c <HAL_DMA_IRQHandler+0x3d8>
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80d7 	beq.w	800448c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10b      	bne.n	8004304 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 020a 	bic.w	r2, r2, #10
 80042fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	4b7b      	ldr	r3, [pc, #492]	; (80044f8 <HAL_DMA_IRQHandler+0x444>)
 800430c:	429a      	cmp	r2, r3
 800430e:	d958      	bls.n	80043c2 <HAL_DMA_IRQHandler+0x30e>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a79      	ldr	r2, [pc, #484]	; (80044fc <HAL_DMA_IRQHandler+0x448>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d04f      	beq.n	80043ba <HAL_DMA_IRQHandler+0x306>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a78      	ldr	r2, [pc, #480]	; (8004500 <HAL_DMA_IRQHandler+0x44c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d048      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x302>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a76      	ldr	r2, [pc, #472]	; (8004504 <HAL_DMA_IRQHandler+0x450>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d040      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x2fc>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a75      	ldr	r2, [pc, #468]	; (8004508 <HAL_DMA_IRQHandler+0x454>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d038      	beq.n	80043aa <HAL_DMA_IRQHandler+0x2f6>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a73      	ldr	r2, [pc, #460]	; (800450c <HAL_DMA_IRQHandler+0x458>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d030      	beq.n	80043a4 <HAL_DMA_IRQHandler+0x2f0>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a72      	ldr	r2, [pc, #456]	; (8004510 <HAL_DMA_IRQHandler+0x45c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d028      	beq.n	800439e <HAL_DMA_IRQHandler+0x2ea>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a69      	ldr	r2, [pc, #420]	; (80044f8 <HAL_DMA_IRQHandler+0x444>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d020      	beq.n	8004398 <HAL_DMA_IRQHandler+0x2e4>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a6e      	ldr	r2, [pc, #440]	; (8004514 <HAL_DMA_IRQHandler+0x460>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d019      	beq.n	8004394 <HAL_DMA_IRQHandler+0x2e0>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a6c      	ldr	r2, [pc, #432]	; (8004518 <HAL_DMA_IRQHandler+0x464>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d012      	beq.n	8004390 <HAL_DMA_IRQHandler+0x2dc>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a6b      	ldr	r2, [pc, #428]	; (800451c <HAL_DMA_IRQHandler+0x468>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00a      	beq.n	800438a <HAL_DMA_IRQHandler+0x2d6>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a69      	ldr	r2, [pc, #420]	; (8004520 <HAL_DMA_IRQHandler+0x46c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d102      	bne.n	8004384 <HAL_DMA_IRQHandler+0x2d0>
 800437e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004382:	e01b      	b.n	80043bc <HAL_DMA_IRQHandler+0x308>
 8004384:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004388:	e018      	b.n	80043bc <HAL_DMA_IRQHandler+0x308>
 800438a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800438e:	e015      	b.n	80043bc <HAL_DMA_IRQHandler+0x308>
 8004390:	2320      	movs	r3, #32
 8004392:	e013      	b.n	80043bc <HAL_DMA_IRQHandler+0x308>
 8004394:	2302      	movs	r3, #2
 8004396:	e011      	b.n	80043bc <HAL_DMA_IRQHandler+0x308>
 8004398:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800439c:	e00e      	b.n	80043bc <HAL_DMA_IRQHandler+0x308>
 800439e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80043a2:	e00b      	b.n	80043bc <HAL_DMA_IRQHandler+0x308>
 80043a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043a8:	e008      	b.n	80043bc <HAL_DMA_IRQHandler+0x308>
 80043aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043ae:	e005      	b.n	80043bc <HAL_DMA_IRQHandler+0x308>
 80043b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043b4:	e002      	b.n	80043bc <HAL_DMA_IRQHandler+0x308>
 80043b6:	2320      	movs	r3, #32
 80043b8:	e000      	b.n	80043bc <HAL_DMA_IRQHandler+0x308>
 80043ba:	2302      	movs	r3, #2
 80043bc:	4a59      	ldr	r2, [pc, #356]	; (8004524 <HAL_DMA_IRQHandler+0x470>)
 80043be:	6053      	str	r3, [r2, #4]
 80043c0:	e057      	b.n	8004472 <HAL_DMA_IRQHandler+0x3be>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a4d      	ldr	r2, [pc, #308]	; (80044fc <HAL_DMA_IRQHandler+0x448>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d04f      	beq.n	800446c <HAL_DMA_IRQHandler+0x3b8>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a4b      	ldr	r2, [pc, #300]	; (8004500 <HAL_DMA_IRQHandler+0x44c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d048      	beq.n	8004468 <HAL_DMA_IRQHandler+0x3b4>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a4a      	ldr	r2, [pc, #296]	; (8004504 <HAL_DMA_IRQHandler+0x450>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d040      	beq.n	8004462 <HAL_DMA_IRQHandler+0x3ae>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a48      	ldr	r2, [pc, #288]	; (8004508 <HAL_DMA_IRQHandler+0x454>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d038      	beq.n	800445c <HAL_DMA_IRQHandler+0x3a8>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a47      	ldr	r2, [pc, #284]	; (800450c <HAL_DMA_IRQHandler+0x458>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d030      	beq.n	8004456 <HAL_DMA_IRQHandler+0x3a2>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a45      	ldr	r2, [pc, #276]	; (8004510 <HAL_DMA_IRQHandler+0x45c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d028      	beq.n	8004450 <HAL_DMA_IRQHandler+0x39c>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a3d      	ldr	r2, [pc, #244]	; (80044f8 <HAL_DMA_IRQHandler+0x444>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d020      	beq.n	800444a <HAL_DMA_IRQHandler+0x396>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a41      	ldr	r2, [pc, #260]	; (8004514 <HAL_DMA_IRQHandler+0x460>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d019      	beq.n	8004446 <HAL_DMA_IRQHandler+0x392>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a40      	ldr	r2, [pc, #256]	; (8004518 <HAL_DMA_IRQHandler+0x464>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d012      	beq.n	8004442 <HAL_DMA_IRQHandler+0x38e>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a3e      	ldr	r2, [pc, #248]	; (800451c <HAL_DMA_IRQHandler+0x468>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00a      	beq.n	800443c <HAL_DMA_IRQHandler+0x388>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a3d      	ldr	r2, [pc, #244]	; (8004520 <HAL_DMA_IRQHandler+0x46c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d102      	bne.n	8004436 <HAL_DMA_IRQHandler+0x382>
 8004430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004434:	e01b      	b.n	800446e <HAL_DMA_IRQHandler+0x3ba>
 8004436:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800443a:	e018      	b.n	800446e <HAL_DMA_IRQHandler+0x3ba>
 800443c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004440:	e015      	b.n	800446e <HAL_DMA_IRQHandler+0x3ba>
 8004442:	2320      	movs	r3, #32
 8004444:	e013      	b.n	800446e <HAL_DMA_IRQHandler+0x3ba>
 8004446:	2302      	movs	r3, #2
 8004448:	e011      	b.n	800446e <HAL_DMA_IRQHandler+0x3ba>
 800444a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800444e:	e00e      	b.n	800446e <HAL_DMA_IRQHandler+0x3ba>
 8004450:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004454:	e00b      	b.n	800446e <HAL_DMA_IRQHandler+0x3ba>
 8004456:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800445a:	e008      	b.n	800446e <HAL_DMA_IRQHandler+0x3ba>
 800445c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004460:	e005      	b.n	800446e <HAL_DMA_IRQHandler+0x3ba>
 8004462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004466:	e002      	b.n	800446e <HAL_DMA_IRQHandler+0x3ba>
 8004468:	2320      	movs	r3, #32
 800446a:	e000      	b.n	800446e <HAL_DMA_IRQHandler+0x3ba>
 800446c:	2302      	movs	r3, #2
 800446e:	4a2e      	ldr	r2, [pc, #184]	; (8004528 <HAL_DMA_IRQHandler+0x474>)
 8004470:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447e:	2b00      	cmp	r3, #0
 8004480:	d034      	beq.n	80044ec <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800448a:	e02f      	b.n	80044ec <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	2208      	movs	r2, #8
 8004492:	409a      	lsls	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4013      	ands	r3, r2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d028      	beq.n	80044ee <HAL_DMA_IRQHandler+0x43a>
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d023      	beq.n	80044ee <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 020e 	bic.w	r2, r2, #14
 80044b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	2101      	movs	r1, #1
 80044c0:	fa01 f202 	lsl.w	r2, r1, r2
 80044c4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d004      	beq.n	80044ee <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	4798      	blx	r3
    }
  }
  return;
 80044ec:	bf00      	nop
 80044ee:	bf00      	nop
}
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40020080 	.word	0x40020080
 80044fc:	40020008 	.word	0x40020008
 8004500:	4002001c 	.word	0x4002001c
 8004504:	40020030 	.word	0x40020030
 8004508:	40020044 	.word	0x40020044
 800450c:	40020058 	.word	0x40020058
 8004510:	4002006c 	.word	0x4002006c
 8004514:	40020408 	.word	0x40020408
 8004518:	4002041c 	.word	0x4002041c
 800451c:	40020430 	.word	0x40020430
 8004520:	40020444 	.word	0x40020444
 8004524:	40020400 	.word	0x40020400
 8004528:	40020000 	.word	0x40020000

0800452c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800453a:	b2db      	uxtb	r3, r3
}
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr

08004546 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004546:	b480      	push	{r7}
 8004548:	b085      	sub	sp, #20
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
 8004552:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455c:	2101      	movs	r1, #1
 800455e:	fa01 f202 	lsl.w	r2, r1, r2
 8004562:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b10      	cmp	r3, #16
 8004572:	d108      	bne.n	8004586 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004584:	e007      	b.n	8004596 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	60da      	str	r2, [r3, #12]
}
 8004596:	bf00      	nop
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	bc80      	pop	{r7}
 800459e:	4770      	bx	lr

080045a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b08b      	sub	sp, #44	; 0x2c
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045aa:	2300      	movs	r3, #0
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80045ae:	2300      	movs	r3, #0
 80045b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045b2:	e179      	b.n	80048a8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80045b4:	2201      	movs	r2, #1
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	4013      	ands	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	f040 8168 	bne.w	80048a2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	4a96      	ldr	r2, [pc, #600]	; (8004830 <HAL_GPIO_Init+0x290>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d05e      	beq.n	800469a <HAL_GPIO_Init+0xfa>
 80045dc:	4a94      	ldr	r2, [pc, #592]	; (8004830 <HAL_GPIO_Init+0x290>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d875      	bhi.n	80046ce <HAL_GPIO_Init+0x12e>
 80045e2:	4a94      	ldr	r2, [pc, #592]	; (8004834 <HAL_GPIO_Init+0x294>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d058      	beq.n	800469a <HAL_GPIO_Init+0xfa>
 80045e8:	4a92      	ldr	r2, [pc, #584]	; (8004834 <HAL_GPIO_Init+0x294>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d86f      	bhi.n	80046ce <HAL_GPIO_Init+0x12e>
 80045ee:	4a92      	ldr	r2, [pc, #584]	; (8004838 <HAL_GPIO_Init+0x298>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d052      	beq.n	800469a <HAL_GPIO_Init+0xfa>
 80045f4:	4a90      	ldr	r2, [pc, #576]	; (8004838 <HAL_GPIO_Init+0x298>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d869      	bhi.n	80046ce <HAL_GPIO_Init+0x12e>
 80045fa:	4a90      	ldr	r2, [pc, #576]	; (800483c <HAL_GPIO_Init+0x29c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d04c      	beq.n	800469a <HAL_GPIO_Init+0xfa>
 8004600:	4a8e      	ldr	r2, [pc, #568]	; (800483c <HAL_GPIO_Init+0x29c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d863      	bhi.n	80046ce <HAL_GPIO_Init+0x12e>
 8004606:	4a8e      	ldr	r2, [pc, #568]	; (8004840 <HAL_GPIO_Init+0x2a0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d046      	beq.n	800469a <HAL_GPIO_Init+0xfa>
 800460c:	4a8c      	ldr	r2, [pc, #560]	; (8004840 <HAL_GPIO_Init+0x2a0>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d85d      	bhi.n	80046ce <HAL_GPIO_Init+0x12e>
 8004612:	2b12      	cmp	r3, #18
 8004614:	d82a      	bhi.n	800466c <HAL_GPIO_Init+0xcc>
 8004616:	2b12      	cmp	r3, #18
 8004618:	d859      	bhi.n	80046ce <HAL_GPIO_Init+0x12e>
 800461a:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <HAL_GPIO_Init+0x80>)
 800461c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004620:	0800469b 	.word	0x0800469b
 8004624:	08004675 	.word	0x08004675
 8004628:	08004687 	.word	0x08004687
 800462c:	080046c9 	.word	0x080046c9
 8004630:	080046cf 	.word	0x080046cf
 8004634:	080046cf 	.word	0x080046cf
 8004638:	080046cf 	.word	0x080046cf
 800463c:	080046cf 	.word	0x080046cf
 8004640:	080046cf 	.word	0x080046cf
 8004644:	080046cf 	.word	0x080046cf
 8004648:	080046cf 	.word	0x080046cf
 800464c:	080046cf 	.word	0x080046cf
 8004650:	080046cf 	.word	0x080046cf
 8004654:	080046cf 	.word	0x080046cf
 8004658:	080046cf 	.word	0x080046cf
 800465c:	080046cf 	.word	0x080046cf
 8004660:	080046cf 	.word	0x080046cf
 8004664:	0800467d 	.word	0x0800467d
 8004668:	08004691 	.word	0x08004691
 800466c:	4a75      	ldr	r2, [pc, #468]	; (8004844 <HAL_GPIO_Init+0x2a4>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d013      	beq.n	800469a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004672:	e02c      	b.n	80046ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	623b      	str	r3, [r7, #32]
          break;
 800467a:	e029      	b.n	80046d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	3304      	adds	r3, #4
 8004682:	623b      	str	r3, [r7, #32]
          break;
 8004684:	e024      	b.n	80046d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	3308      	adds	r3, #8
 800468c:	623b      	str	r3, [r7, #32]
          break;
 800468e:	e01f      	b.n	80046d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	330c      	adds	r3, #12
 8004696:	623b      	str	r3, [r7, #32]
          break;
 8004698:	e01a      	b.n	80046d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d102      	bne.n	80046a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80046a2:	2304      	movs	r3, #4
 80046a4:	623b      	str	r3, [r7, #32]
          break;
 80046a6:	e013      	b.n	80046d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d105      	bne.n	80046bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046b0:	2308      	movs	r3, #8
 80046b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69fa      	ldr	r2, [r7, #28]
 80046b8:	611a      	str	r2, [r3, #16]
          break;
 80046ba:	e009      	b.n	80046d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80046bc:	2308      	movs	r3, #8
 80046be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69fa      	ldr	r2, [r7, #28]
 80046c4:	615a      	str	r2, [r3, #20]
          break;
 80046c6:	e003      	b.n	80046d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80046c8:	2300      	movs	r3, #0
 80046ca:	623b      	str	r3, [r7, #32]
          break;
 80046cc:	e000      	b.n	80046d0 <HAL_GPIO_Init+0x130>
          break;
 80046ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	2bff      	cmp	r3, #255	; 0xff
 80046d4:	d801      	bhi.n	80046da <HAL_GPIO_Init+0x13a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	e001      	b.n	80046de <HAL_GPIO_Init+0x13e>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	3304      	adds	r3, #4
 80046de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	2bff      	cmp	r3, #255	; 0xff
 80046e4:	d802      	bhi.n	80046ec <HAL_GPIO_Init+0x14c>
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	e002      	b.n	80046f2 <HAL_GPIO_Init+0x152>
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	3b08      	subs	r3, #8
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	210f      	movs	r1, #15
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004700:	43db      	mvns	r3, r3
 8004702:	401a      	ands	r2, r3
 8004704:	6a39      	ldr	r1, [r7, #32]
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	fa01 f303 	lsl.w	r3, r1, r3
 800470c:	431a      	orrs	r2, r3
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 80c1 	beq.w	80048a2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004720:	4b49      	ldr	r3, [pc, #292]	; (8004848 <HAL_GPIO_Init+0x2a8>)
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	4a48      	ldr	r2, [pc, #288]	; (8004848 <HAL_GPIO_Init+0x2a8>)
 8004726:	f043 0301 	orr.w	r3, r3, #1
 800472a:	6193      	str	r3, [r2, #24]
 800472c:	4b46      	ldr	r3, [pc, #280]	; (8004848 <HAL_GPIO_Init+0x2a8>)
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004738:	4a44      	ldr	r2, [pc, #272]	; (800484c <HAL_GPIO_Init+0x2ac>)
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	089b      	lsrs	r3, r3, #2
 800473e:	3302      	adds	r3, #2
 8004740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004744:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	220f      	movs	r2, #15
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4013      	ands	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a3c      	ldr	r2, [pc, #240]	; (8004850 <HAL_GPIO_Init+0x2b0>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d01f      	beq.n	80047a4 <HAL_GPIO_Init+0x204>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a3b      	ldr	r2, [pc, #236]	; (8004854 <HAL_GPIO_Init+0x2b4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d019      	beq.n	80047a0 <HAL_GPIO_Init+0x200>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a3a      	ldr	r2, [pc, #232]	; (8004858 <HAL_GPIO_Init+0x2b8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d013      	beq.n	800479c <HAL_GPIO_Init+0x1fc>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a39      	ldr	r2, [pc, #228]	; (800485c <HAL_GPIO_Init+0x2bc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00d      	beq.n	8004798 <HAL_GPIO_Init+0x1f8>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a38      	ldr	r2, [pc, #224]	; (8004860 <HAL_GPIO_Init+0x2c0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d007      	beq.n	8004794 <HAL_GPIO_Init+0x1f4>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a37      	ldr	r2, [pc, #220]	; (8004864 <HAL_GPIO_Init+0x2c4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d101      	bne.n	8004790 <HAL_GPIO_Init+0x1f0>
 800478c:	2305      	movs	r3, #5
 800478e:	e00a      	b.n	80047a6 <HAL_GPIO_Init+0x206>
 8004790:	2306      	movs	r3, #6
 8004792:	e008      	b.n	80047a6 <HAL_GPIO_Init+0x206>
 8004794:	2304      	movs	r3, #4
 8004796:	e006      	b.n	80047a6 <HAL_GPIO_Init+0x206>
 8004798:	2303      	movs	r3, #3
 800479a:	e004      	b.n	80047a6 <HAL_GPIO_Init+0x206>
 800479c:	2302      	movs	r3, #2
 800479e:	e002      	b.n	80047a6 <HAL_GPIO_Init+0x206>
 80047a0:	2301      	movs	r3, #1
 80047a2:	e000      	b.n	80047a6 <HAL_GPIO_Init+0x206>
 80047a4:	2300      	movs	r3, #0
 80047a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a8:	f002 0203 	and.w	r2, r2, #3
 80047ac:	0092      	lsls	r2, r2, #2
 80047ae:	4093      	lsls	r3, r2
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80047b6:	4925      	ldr	r1, [pc, #148]	; (800484c <HAL_GPIO_Init+0x2ac>)
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	089b      	lsrs	r3, r3, #2
 80047bc:	3302      	adds	r3, #2
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d006      	beq.n	80047de <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80047d0:	4b25      	ldr	r3, [pc, #148]	; (8004868 <HAL_GPIO_Init+0x2c8>)
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	4924      	ldr	r1, [pc, #144]	; (8004868 <HAL_GPIO_Init+0x2c8>)
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	4313      	orrs	r3, r2
 80047da:	608b      	str	r3, [r1, #8]
 80047dc:	e006      	b.n	80047ec <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80047de:	4b22      	ldr	r3, [pc, #136]	; (8004868 <HAL_GPIO_Init+0x2c8>)
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	43db      	mvns	r3, r3
 80047e6:	4920      	ldr	r1, [pc, #128]	; (8004868 <HAL_GPIO_Init+0x2c8>)
 80047e8:	4013      	ands	r3, r2
 80047ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d006      	beq.n	8004806 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80047f8:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <HAL_GPIO_Init+0x2c8>)
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	491a      	ldr	r1, [pc, #104]	; (8004868 <HAL_GPIO_Init+0x2c8>)
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	4313      	orrs	r3, r2
 8004802:	60cb      	str	r3, [r1, #12]
 8004804:	e006      	b.n	8004814 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004806:	4b18      	ldr	r3, [pc, #96]	; (8004868 <HAL_GPIO_Init+0x2c8>)
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	43db      	mvns	r3, r3
 800480e:	4916      	ldr	r1, [pc, #88]	; (8004868 <HAL_GPIO_Init+0x2c8>)
 8004810:	4013      	ands	r3, r2
 8004812:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d025      	beq.n	800486c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004820:	4b11      	ldr	r3, [pc, #68]	; (8004868 <HAL_GPIO_Init+0x2c8>)
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	4910      	ldr	r1, [pc, #64]	; (8004868 <HAL_GPIO_Init+0x2c8>)
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	4313      	orrs	r3, r2
 800482a:	604b      	str	r3, [r1, #4]
 800482c:	e025      	b.n	800487a <HAL_GPIO_Init+0x2da>
 800482e:	bf00      	nop
 8004830:	10320000 	.word	0x10320000
 8004834:	10310000 	.word	0x10310000
 8004838:	10220000 	.word	0x10220000
 800483c:	10210000 	.word	0x10210000
 8004840:	10120000 	.word	0x10120000
 8004844:	10110000 	.word	0x10110000
 8004848:	40021000 	.word	0x40021000
 800484c:	40010000 	.word	0x40010000
 8004850:	40010800 	.word	0x40010800
 8004854:	40010c00 	.word	0x40010c00
 8004858:	40011000 	.word	0x40011000
 800485c:	40011400 	.word	0x40011400
 8004860:	40011800 	.word	0x40011800
 8004864:	40011c00 	.word	0x40011c00
 8004868:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800486c:	4b15      	ldr	r3, [pc, #84]	; (80048c4 <HAL_GPIO_Init+0x324>)
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	43db      	mvns	r3, r3
 8004874:	4913      	ldr	r1, [pc, #76]	; (80048c4 <HAL_GPIO_Init+0x324>)
 8004876:	4013      	ands	r3, r2
 8004878:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d006      	beq.n	8004894 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004886:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <HAL_GPIO_Init+0x324>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	490e      	ldr	r1, [pc, #56]	; (80048c4 <HAL_GPIO_Init+0x324>)
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	4313      	orrs	r3, r2
 8004890:	600b      	str	r3, [r1, #0]
 8004892:	e006      	b.n	80048a2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004894:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <HAL_GPIO_Init+0x324>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	43db      	mvns	r3, r3
 800489c:	4909      	ldr	r1, [pc, #36]	; (80048c4 <HAL_GPIO_Init+0x324>)
 800489e:	4013      	ands	r3, r2
 80048a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	3301      	adds	r3, #1
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	fa22 f303 	lsr.w	r3, r2, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f47f ae7e 	bne.w	80045b4 <HAL_GPIO_Init+0x14>
  }
}
 80048b8:	bf00      	nop
 80048ba:	bf00      	nop
 80048bc:	372c      	adds	r7, #44	; 0x2c
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr
 80048c4:	40010400 	.word	0x40010400

080048c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	460b      	mov	r3, r1
 80048d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	887b      	ldrh	r3, [r7, #2]
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048e0:	2301      	movs	r3, #1
 80048e2:	73fb      	strb	r3, [r7, #15]
 80048e4:	e001      	b.n	80048ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048e6:	2300      	movs	r3, #0
 80048e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	4770      	bx	lr

080048f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	460b      	mov	r3, r1
 8004900:	807b      	strh	r3, [r7, #2]
 8004902:	4613      	mov	r3, r2
 8004904:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004906:	787b      	ldrb	r3, [r7, #1]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800490c:	887a      	ldrh	r2, [r7, #2]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004912:	e003      	b.n	800491c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004914:	887b      	ldrh	r3, [r7, #2]
 8004916:	041a      	lsls	r2, r3, #16
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	611a      	str	r2, [r3, #16]
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	bc80      	pop	{r7}
 8004924:	4770      	bx	lr

08004926 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004926:	b480      	push	{r7}
 8004928:	b085      	sub	sp, #20
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	460b      	mov	r3, r1
 8004930:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004938:	887a      	ldrh	r2, [r7, #2]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4013      	ands	r3, r2
 800493e:	041a      	lsls	r2, r3, #16
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	43d9      	mvns	r1, r3
 8004944:	887b      	ldrh	r3, [r7, #2]
 8004946:	400b      	ands	r3, r1
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	611a      	str	r2, [r3, #16]
}
 800494e:	bf00      	nop
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr

08004958 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e12b      	b.n	8004bc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d106      	bne.n	8004984 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7fc ffac 	bl	80018dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2224      	movs	r2, #36	; 0x24
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0201 	bic.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049bc:	f004 fe50 	bl	8009660 <HAL_RCC_GetPCLK1Freq>
 80049c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	4a81      	ldr	r2, [pc, #516]	; (8004bcc <HAL_I2C_Init+0x274>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d807      	bhi.n	80049dc <HAL_I2C_Init+0x84>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4a80      	ldr	r2, [pc, #512]	; (8004bd0 <HAL_I2C_Init+0x278>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	bf94      	ite	ls
 80049d4:	2301      	movls	r3, #1
 80049d6:	2300      	movhi	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	e006      	b.n	80049ea <HAL_I2C_Init+0x92>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4a7d      	ldr	r2, [pc, #500]	; (8004bd4 <HAL_I2C_Init+0x27c>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	bf94      	ite	ls
 80049e4:	2301      	movls	r3, #1
 80049e6:	2300      	movhi	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e0e7      	b.n	8004bc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4a78      	ldr	r2, [pc, #480]	; (8004bd8 <HAL_I2C_Init+0x280>)
 80049f6:	fba2 2303 	umull	r2, r3, r2, r3
 80049fa:	0c9b      	lsrs	r3, r3, #18
 80049fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	4a6a      	ldr	r2, [pc, #424]	; (8004bcc <HAL_I2C_Init+0x274>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d802      	bhi.n	8004a2c <HAL_I2C_Init+0xd4>
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	e009      	b.n	8004a40 <HAL_I2C_Init+0xe8>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a32:	fb02 f303 	mul.w	r3, r2, r3
 8004a36:	4a69      	ldr	r2, [pc, #420]	; (8004bdc <HAL_I2C_Init+0x284>)
 8004a38:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3c:	099b      	lsrs	r3, r3, #6
 8004a3e:	3301      	adds	r3, #1
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6812      	ldr	r2, [r2, #0]
 8004a44:	430b      	orrs	r3, r1
 8004a46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	495c      	ldr	r1, [pc, #368]	; (8004bcc <HAL_I2C_Init+0x274>)
 8004a5c:	428b      	cmp	r3, r1
 8004a5e:	d819      	bhi.n	8004a94 <HAL_I2C_Init+0x13c>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	1e59      	subs	r1, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a6e:	1c59      	adds	r1, r3, #1
 8004a70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a74:	400b      	ands	r3, r1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00a      	beq.n	8004a90 <HAL_I2C_Init+0x138>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1e59      	subs	r1, r3, #1
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a88:	3301      	adds	r3, #1
 8004a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a8e:	e051      	b.n	8004b34 <HAL_I2C_Init+0x1dc>
 8004a90:	2304      	movs	r3, #4
 8004a92:	e04f      	b.n	8004b34 <HAL_I2C_Init+0x1dc>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d111      	bne.n	8004ac0 <HAL_I2C_Init+0x168>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	1e58      	subs	r0, r3, #1
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6859      	ldr	r1, [r3, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	440b      	add	r3, r1
 8004aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aae:	3301      	adds	r3, #1
 8004ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	bf0c      	ite	eq
 8004ab8:	2301      	moveq	r3, #1
 8004aba:	2300      	movne	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	e012      	b.n	8004ae6 <HAL_I2C_Init+0x18e>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	1e58      	subs	r0, r3, #1
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6859      	ldr	r1, [r3, #4]
 8004ac8:	460b      	mov	r3, r1
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	440b      	add	r3, r1
 8004ace:	0099      	lsls	r1, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	bf0c      	ite	eq
 8004ae0:	2301      	moveq	r3, #1
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <HAL_I2C_Init+0x196>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e022      	b.n	8004b34 <HAL_I2C_Init+0x1dc>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10e      	bne.n	8004b14 <HAL_I2C_Init+0x1bc>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	1e58      	subs	r0, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6859      	ldr	r1, [r3, #4]
 8004afe:	460b      	mov	r3, r1
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	440b      	add	r3, r1
 8004b04:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b08:	3301      	adds	r3, #1
 8004b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b12:	e00f      	b.n	8004b34 <HAL_I2C_Init+0x1dc>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	1e58      	subs	r0, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6859      	ldr	r1, [r3, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	0099      	lsls	r1, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	6809      	ldr	r1, [r1, #0]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	69da      	ldr	r2, [r3, #28]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6911      	ldr	r1, [r2, #16]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	68d2      	ldr	r2, [r2, #12]
 8004b6e:	4311      	orrs	r1, r2
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6812      	ldr	r2, [r2, #0]
 8004b74:	430b      	orrs	r3, r1
 8004b76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695a      	ldr	r2, [r3, #20]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	000186a0 	.word	0x000186a0
 8004bd0:	001e847f 	.word	0x001e847f
 8004bd4:	003d08ff 	.word	0x003d08ff
 8004bd8:	431bde83 	.word	0x431bde83
 8004bdc:	10624dd3 	.word	0x10624dd3

08004be0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf2:	2b80      	cmp	r3, #128	; 0x80
 8004bf4:	d103      	bne.n	8004bfe <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	611a      	str	r2, [r3, #16]
  }
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bc80      	pop	{r7}
 8004c06:	4770      	bx	lr

08004c08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	4608      	mov	r0, r1
 8004c12:	4611      	mov	r1, r2
 8004c14:	461a      	mov	r2, r3
 8004c16:	4603      	mov	r3, r0
 8004c18:	817b      	strh	r3, [r7, #10]
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	813b      	strh	r3, [r7, #8]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c22:	f7fe fd09 	bl	8003638 <HAL_GetTick>
 8004c26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b20      	cmp	r3, #32
 8004c32:	f040 80d9 	bne.w	8004de8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	2319      	movs	r3, #25
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	496d      	ldr	r1, [pc, #436]	; (8004df4 <HAL_I2C_Mem_Write+0x1ec>)
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f002 f9af 	bl	8006fa4 <I2C_WaitOnFlagUntilTimeout>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e0cc      	b.n	8004dea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d101      	bne.n	8004c5e <HAL_I2C_Mem_Write+0x56>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	e0c5      	b.n	8004dea <HAL_I2C_Mem_Write+0x1e2>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d007      	beq.n	8004c84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2221      	movs	r2, #33	; 0x21
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2240      	movs	r2, #64	; 0x40
 8004ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a3a      	ldr	r2, [r7, #32]
 8004cae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4a4d      	ldr	r2, [pc, #308]	; (8004df8 <HAL_I2C_Mem_Write+0x1f0>)
 8004cc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cc6:	88f8      	ldrh	r0, [r7, #6]
 8004cc8:	893a      	ldrh	r2, [r7, #8]
 8004cca:	8979      	ldrh	r1, [r7, #10]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	9301      	str	r3, [sp, #4]
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f001 fe32 	bl	8006940 <I2C_RequestMemoryWrite>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d052      	beq.n	8004d88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e081      	b.n	8004dea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f002 fa74 	bl	80071d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00d      	beq.n	8004d12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d107      	bne.n	8004d0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e06b      	b.n	8004dea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	781a      	ldrb	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b04      	cmp	r3, #4
 8004d4e:	d11b      	bne.n	8004d88 <HAL_I2C_Mem_Write+0x180>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d017      	beq.n	8004d88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	781a      	ldrb	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1aa      	bne.n	8004ce6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f002 fa67 	bl	8007268 <I2C_WaitOnBTFFlagUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00d      	beq.n	8004dbc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	d107      	bne.n	8004db8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e016      	b.n	8004dea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	e000      	b.n	8004dea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004de8:	2302      	movs	r3, #2
  }
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	00100002 	.word	0x00100002
 8004df8:	ffff0000 	.word	0xffff0000

08004dfc <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08a      	sub	sp, #40	; 0x28
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	4608      	mov	r0, r1
 8004e06:	4611      	mov	r1, r2
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	817b      	strh	r3, [r7, #10]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	813b      	strh	r3, [r7, #8]
 8004e12:	4613      	mov	r3, r2
 8004e14:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e1a:	f7fe fc0d 	bl	8003638 <HAL_GetTick>
 8004e1e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	f040 812e 	bne.w	800508a <HAL_I2C_Mem_Write_DMA+0x28e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e2e:	4b99      	ldr	r3, [pc, #612]	; (8005094 <HAL_I2C_Mem_Write_DMA+0x298>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	08db      	lsrs	r3, r3, #3
 8004e34:	4a98      	ldr	r2, [pc, #608]	; (8005098 <HAL_I2C_Mem_Write_DMA+0x29c>)
 8004e36:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3a:	0a1a      	lsrs	r2, r3, #8
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	009a      	lsls	r2, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d112      	bne.n	8004e7a <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	f043 0220 	orr.w	r2, r3, #32
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8004e76:	2302      	movs	r3, #2
 8004e78:	e108      	b.n	800508c <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d0df      	beq.n	8004e48 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d101      	bne.n	8004e96 <HAL_I2C_Mem_Write_DMA+0x9a>
 8004e92:	2302      	movs	r3, #2
 8004e94:	e0fa      	b.n	800508c <HAL_I2C_Mem_Write_DMA+0x290>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d007      	beq.n	8004ebc <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2221      	movs	r2, #33	; 0x21
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2240      	movs	r2, #64	; 0x40
 8004ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ee6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004eec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4a68      	ldr	r2, [pc, #416]	; (800509c <HAL_I2C_Mem_Write_DMA+0x2a0>)
 8004efc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004efe:	897a      	ldrh	r2, [r7, #10]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004f04:	893a      	ldrh	r2, [r7, #8]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004f0a:	88fa      	ldrh	r2, [r7, #6]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 80a1 	beq.w	8005062 <HAL_I2C_Mem_Write_DMA+0x266>
    {
      if (hi2c->hdmatx != NULL)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d022      	beq.n	8004f6e <HAL_I2C_Mem_Write_DMA+0x172>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2c:	4a5c      	ldr	r2, [pc, #368]	; (80050a0 <HAL_I2C_Mem_Write_DMA+0x2a4>)
 8004f2e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f34:	4a5b      	ldr	r2, [pc, #364]	; (80050a4 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8004f36:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f44:	2200      	movs	r2, #0
 8004f46:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	4619      	mov	r1, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3310      	adds	r3, #16
 8004f58:	461a      	mov	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5e:	f7fe ff41 	bl	8003de4 <HAL_DMA_Start_IT>
 8004f62:	4603      	mov	r3, r0
 8004f64:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004f66:	7efb      	ldrb	r3, [r7, #27]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d166      	bne.n	800503a <HAL_I2C_Mem_Write_DMA+0x23e>
 8004f6c:	e013      	b.n	8004f96 <HAL_I2C_Mem_Write_DMA+0x19a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e07a      	b.n	800508c <HAL_I2C_Mem_Write_DMA+0x290>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004f96:	88f8      	ldrh	r0, [r7, #6]
 8004f98:	893a      	ldrh	r2, [r7, #8]
 8004f9a:	8979      	ldrh	r1, [r7, #10]
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	9301      	str	r3, [sp, #4]
 8004fa0:	2323      	movs	r3, #35	; 0x23
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f001 fcca 	bl	8006940 <I2C_RequestMemoryWrite>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d022      	beq.n	8004ff8 <HAL_I2C_Mem_Write_DMA+0x1fc>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fe ff74 	bl	8003ea4 <HAL_DMA_Abort_IT>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fd6:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0201 	bic.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e049      	b.n	800508c <HAL_I2C_Mem_Write_DMA+0x290>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	613b      	str	r3, [r7, #16]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	613b      	str	r3, [r7, #16]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005024:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005034:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	e028      	b.n	800508c <HAL_I2C_Mem_Write_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2220      	movs	r2, #32
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	f043 0210 	orr.w	r2, r3, #16
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e014      	b.n	800508c <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2220      	movs	r2, #32
 8005066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e000      	b.n	800508c <HAL_I2C_Mem_Write_DMA+0x290>
    }
  }
  else
  {
    return HAL_BUSY;
 800508a:	2302      	movs	r3, #2
  }
}
 800508c:	4618      	mov	r0, r3
 800508e:	3720      	adds	r7, #32
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	2000024c 	.word	0x2000024c
 8005098:	14f8b589 	.word	0x14f8b589
 800509c:	ffff0000 	.word	0xffff0000
 80050a0:	08006c3d 	.word	0x08006c3d
 80050a4:	08006de7 	.word	0x08006de7

080050a8 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08c      	sub	sp, #48	; 0x30
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	4608      	mov	r0, r1
 80050b2:	4611      	mov	r1, r2
 80050b4:	461a      	mov	r2, r3
 80050b6:	4603      	mov	r3, r0
 80050b8:	817b      	strh	r3, [r7, #10]
 80050ba:	460b      	mov	r3, r1
 80050bc:	813b      	strh	r3, [r7, #8]
 80050be:	4613      	mov	r3, r2
 80050c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050c2:	f7fe fab9 	bl	8003638 <HAL_GetTick>
 80050c6:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b20      	cmp	r3, #32
 80050d6:	f040 8168 	bne.w	80053aa <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80050da:	4b98      	ldr	r3, [pc, #608]	; (800533c <HAL_I2C_Mem_Read_DMA+0x294>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	08db      	lsrs	r3, r3, #3
 80050e0:	4a97      	ldr	r2, [pc, #604]	; (8005340 <HAL_I2C_Mem_Read_DMA+0x298>)
 80050e2:	fba2 2303 	umull	r2, r3, r2, r3
 80050e6:	0a1a      	lsrs	r2, r3, #8
 80050e8:	4613      	mov	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	009a      	lsls	r2, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d112      	bne.n	8005126 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f043 0220 	orr.w	r2, r3, #32
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 8005122:	2302      	movs	r3, #2
 8005124:	e142      	b.n	80053ac <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b02      	cmp	r3, #2
 8005132:	d0df      	beq.n	80050f4 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513a:	2b01      	cmp	r3, #1
 800513c:	d101      	bne.n	8005142 <HAL_I2C_Mem_Read_DMA+0x9a>
 800513e:	2302      	movs	r3, #2
 8005140:	e134      	b.n	80053ac <HAL_I2C_Mem_Read_DMA+0x304>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b01      	cmp	r3, #1
 8005156:	d007      	beq.n	8005168 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005176:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2222      	movs	r2, #34	; 0x22
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2240      	movs	r2, #64	; 0x40
 8005184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005192:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005198:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519e:	b29a      	uxth	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4a67      	ldr	r2, [pc, #412]	; (8005344 <HAL_I2C_Mem_Read_DMA+0x29c>)
 80051a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80051aa:	897a      	ldrh	r2, [r7, #10]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80051b0:	893a      	ldrh	r2, [r7, #8]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80051b6:	88fa      	ldrh	r2, [r7, #6]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 80c2 	beq.w	8005350 <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d024      	beq.n	800521e <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d8:	4a5b      	ldr	r2, [pc, #364]	; (8005348 <HAL_I2C_Mem_Read_DMA+0x2a0>)
 80051da:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	4a5a      	ldr	r2, [pc, #360]	; (800534c <HAL_I2C_Mem_Read_DMA+0x2a4>)
 80051e2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	2200      	movs	r2, #0
 80051ea:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f0:	2200      	movs	r2, #0
 80051f2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3310      	adds	r3, #16
 80051fe:	4619      	mov	r1, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	461a      	mov	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520a:	f7fe fdeb 	bl	8003de4 <HAL_DMA_Start_IT>
 800520e:	4603      	mov	r3, r0
 8005210:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005214:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005218:	2b00      	cmp	r3, #0
 800521a:	d17b      	bne.n	8005314 <HAL_I2C_Mem_Read_DMA+0x26c>
 800521c:	e013      	b.n	8005246 <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2220      	movs	r2, #32
 8005222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e0b2      	b.n	80053ac <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005246:	88f8      	ldrh	r0, [r7, #6]
 8005248:	893a      	ldrh	r2, [r7, #8]
 800524a:	8979      	ldrh	r1, [r7, #10]
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	2323      	movs	r3, #35	; 0x23
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	4603      	mov	r3, r0
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f001 fc08 	bl	8006a6c <I2C_RequestMemoryRead>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d023      	beq.n	80052aa <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	4618      	mov	r0, r3
 8005268:	f7fe fe1c 	bl	8003ea4 <HAL_DMA_Abort_IT>
 800526c:	4603      	mov	r3, r0
 800526e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005276:	2200      	movs	r2, #0
 8005278:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005288:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0201 	bic.w	r2, r2, #1
 80052a4:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e080      	b.n	80053ac <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d108      	bne.n	80052c4 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	e007      	b.n	80052d4 <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052d2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d4:	2300      	movs	r3, #0
 80052d6:	61bb      	str	r3, [r7, #24]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	61bb      	str	r3, [r7, #24]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	61bb      	str	r3, [r7, #24]
 80052e8:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005300:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005310:	605a      	str	r2, [r3, #4]
 8005312:	e048      	b.n	80053a6 <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	f043 0210 	orr.w	r2, r3, #16
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e037      	b.n	80053ac <HAL_I2C_Mem_Read_DMA+0x304>
 800533c:	2000024c 	.word	0x2000024c
 8005340:	14f8b589 	.word	0x14f8b589
 8005344:	ffff0000 	.word	0xffff0000
 8005348:	08006c3d 	.word	0x08006c3d
 800534c:	08006de7 	.word	0x08006de7
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005350:	88f8      	ldrh	r0, [r7, #6]
 8005352:	893a      	ldrh	r2, [r7, #8]
 8005354:	8979      	ldrh	r1, [r7, #10]
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	2323      	movs	r3, #35	; 0x23
 800535c:	9300      	str	r3, [sp, #0]
 800535e:	4603      	mov	r3, r0
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f001 fb83 	bl	8006a6c <I2C_RequestMemoryRead>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e01d      	b.n	80053ac <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005370:	2300      	movs	r3, #0
 8005372:	617b      	str	r3, [r7, #20]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005394:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2220      	movs	r2, #32
 800539a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	e000      	b.n	80053ac <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 80053aa:	2302      	movs	r3, #2
  }
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3728      	adds	r7, #40	; 0x28
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80053bc:	2300      	movs	r3, #0
 80053be:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053dc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80053de:	7bfb      	ldrb	r3, [r7, #15]
 80053e0:	2b10      	cmp	r3, #16
 80053e2:	d003      	beq.n	80053ec <HAL_I2C_EV_IRQHandler+0x38>
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
 80053e6:	2b40      	cmp	r3, #64	; 0x40
 80053e8:	f040 80c1 	bne.w	800556e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10d      	bne.n	8005422 <HAL_I2C_EV_IRQHandler+0x6e>
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800540c:	d003      	beq.n	8005416 <HAL_I2C_EV_IRQHandler+0x62>
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005414:	d101      	bne.n	800541a <HAL_I2C_EV_IRQHandler+0x66>
 8005416:	2301      	movs	r3, #1
 8005418:	e000      	b.n	800541c <HAL_I2C_EV_IRQHandler+0x68>
 800541a:	2300      	movs	r3, #0
 800541c:	2b01      	cmp	r3, #1
 800541e:	f000 8132 	beq.w	8005686 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00c      	beq.n	8005446 <HAL_I2C_EV_IRQHandler+0x92>
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	0a5b      	lsrs	r3, r3, #9
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b00      	cmp	r3, #0
 8005436:	d006      	beq.n	8005446 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f001 ffbd 	bl	80073b8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fccd 	bl	8005dde <I2C_Master_SB>
 8005444:	e092      	b.n	800556c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	08db      	lsrs	r3, r3, #3
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d009      	beq.n	8005466 <HAL_I2C_EV_IRQHandler+0xb2>
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	0a5b      	lsrs	r3, r3, #9
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fd42 	bl	8005ee8 <I2C_Master_ADD10>
 8005464:	e082      	b.n	800556c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	085b      	lsrs	r3, r3, #1
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d009      	beq.n	8005486 <HAL_I2C_EV_IRQHandler+0xd2>
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	0a5b      	lsrs	r3, r3, #9
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fd5b 	bl	8005f3a <I2C_Master_ADDR>
 8005484:	e072      	b.n	800556c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	089b      	lsrs	r3, r3, #2
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d03b      	beq.n	800550a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800549c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054a0:	f000 80f3 	beq.w	800568a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	09db      	lsrs	r3, r3, #7
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00f      	beq.n	80054d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	0a9b      	lsrs	r3, r3, #10
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d009      	beq.n	80054d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	089b      	lsrs	r3, r3, #2
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d103      	bne.n	80054d0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f939 	bl	8005740 <I2C_MasterTransmit_TXE>
 80054ce:	e04d      	b.n	800556c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	089b      	lsrs	r3, r3, #2
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 80d6 	beq.w	800568a <HAL_I2C_EV_IRQHandler+0x2d6>
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	0a5b      	lsrs	r3, r3, #9
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 80cf 	beq.w	800568a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80054ec:	7bbb      	ldrb	r3, [r7, #14]
 80054ee:	2b21      	cmp	r3, #33	; 0x21
 80054f0:	d103      	bne.n	80054fa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f9c0 	bl	8005878 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054f8:	e0c7      	b.n	800568a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
 80054fc:	2b40      	cmp	r3, #64	; 0x40
 80054fe:	f040 80c4 	bne.w	800568a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fa2e 	bl	8005964 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005508:	e0bf      	b.n	800568a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005518:	f000 80b7 	beq.w	800568a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	099b      	lsrs	r3, r3, #6
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00f      	beq.n	8005548 <HAL_I2C_EV_IRQHandler+0x194>
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	0a9b      	lsrs	r3, r3, #10
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d009      	beq.n	8005548 <HAL_I2C_EV_IRQHandler+0x194>
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	089b      	lsrs	r3, r3, #2
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d103      	bne.n	8005548 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 faa7 	bl	8005a94 <I2C_MasterReceive_RXNE>
 8005546:	e011      	b.n	800556c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	089b      	lsrs	r3, r3, #2
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	f000 809a 	beq.w	800568a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	0a5b      	lsrs	r3, r3, #9
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 8093 	beq.w	800568a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fb50 	bl	8005c0a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800556a:	e08e      	b.n	800568a <HAL_I2C_EV_IRQHandler+0x2d6>
 800556c:	e08d      	b.n	800568a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	2b00      	cmp	r3, #0
 8005574:	d004      	beq.n	8005580 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	61fb      	str	r3, [r7, #28]
 800557e:	e007      	b.n	8005590 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	085b      	lsrs	r3, r3, #1
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	d012      	beq.n	80055c2 <HAL_I2C_EV_IRQHandler+0x20e>
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	0a5b      	lsrs	r3, r3, #9
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00c      	beq.n	80055c2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80055b8:	69b9      	ldr	r1, [r7, #24]
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 ff14 	bl	80063e8 <I2C_Slave_ADDR>
 80055c0:	e066      	b.n	8005690 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	091b      	lsrs	r3, r3, #4
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d009      	beq.n	80055e2 <HAL_I2C_EV_IRQHandler+0x22e>
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	0a5b      	lsrs	r3, r3, #9
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 ff4e 	bl	800647c <I2C_Slave_STOPF>
 80055e0:	e056      	b.n	8005690 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80055e2:	7bbb      	ldrb	r3, [r7, #14]
 80055e4:	2b21      	cmp	r3, #33	; 0x21
 80055e6:	d002      	beq.n	80055ee <HAL_I2C_EV_IRQHandler+0x23a>
 80055e8:	7bbb      	ldrb	r3, [r7, #14]
 80055ea:	2b29      	cmp	r3, #41	; 0x29
 80055ec:	d125      	bne.n	800563a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	09db      	lsrs	r3, r3, #7
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00f      	beq.n	800561a <HAL_I2C_EV_IRQHandler+0x266>
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	0a9b      	lsrs	r3, r3, #10
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d009      	beq.n	800561a <HAL_I2C_EV_IRQHandler+0x266>
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	089b      	lsrs	r3, r3, #2
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d103      	bne.n	800561a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 fe2c 	bl	8006270 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005618:	e039      	b.n	800568e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	089b      	lsrs	r3, r3, #2
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d033      	beq.n	800568e <HAL_I2C_EV_IRQHandler+0x2da>
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	0a5b      	lsrs	r3, r3, #9
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d02d      	beq.n	800568e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fe59 	bl	80062ea <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005638:	e029      	b.n	800568e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	099b      	lsrs	r3, r3, #6
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00f      	beq.n	8005666 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	0a9b      	lsrs	r3, r3, #10
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d009      	beq.n	8005666 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	089b      	lsrs	r3, r3, #2
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d103      	bne.n	8005666 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fe63 	bl	800632a <I2C_SlaveReceive_RXNE>
 8005664:	e014      	b.n	8005690 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	089b      	lsrs	r3, r3, #2
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00e      	beq.n	8005690 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	0a5b      	lsrs	r3, r3, #9
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d008      	beq.n	8005690 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fe91 	bl	80063a6 <I2C_SlaveReceive_BTF>
 8005684:	e004      	b.n	8005690 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005686:	bf00      	nop
 8005688:	e002      	b.n	8005690 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800568a:	bf00      	nop
 800568c:	e000      	b.n	8005690 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800568e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005690:	3720      	adds	r7, #32
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bc80      	pop	{r7}
 80056a6:	4770      	bx	lr

080056a8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bc80      	pop	{r7}
 80056b8:	4770      	bx	lr

080056ba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80056c2:	bf00      	nop
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bc80      	pop	{r7}
 80056ca:	4770      	bx	lr

080056cc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	bc80      	pop	{r7}
 80056dc:	4770      	bx	lr

080056de <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	460b      	mov	r3, r1
 80056e8:	70fb      	strb	r3, [r7, #3]
 80056ea:	4613      	mov	r3, r2
 80056ec:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bc80      	pop	{r7}
 80056f6:	4770      	bx	lr

080056f8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	bc80      	pop	{r7}
 8005708:	4770      	bx	lr

0800570a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	bc80      	pop	{r7}
 800571a:	4770      	bx	lr

0800571c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	bc80      	pop	{r7}
 800572c:	4770      	bx	lr

0800572e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	bc80      	pop	{r7}
 800573e:	4770      	bx	lr

08005740 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800574e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005756:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005762:	2b00      	cmp	r3, #0
 8005764:	d150      	bne.n	8005808 <I2C_MasterTransmit_TXE+0xc8>
 8005766:	7bfb      	ldrb	r3, [r7, #15]
 8005768:	2b21      	cmp	r3, #33	; 0x21
 800576a:	d14d      	bne.n	8005808 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2b08      	cmp	r3, #8
 8005770:	d01d      	beq.n	80057ae <I2C_MasterTransmit_TXE+0x6e>
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b20      	cmp	r3, #32
 8005776:	d01a      	beq.n	80057ae <I2C_MasterTransmit_TXE+0x6e>
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800577e:	d016      	beq.n	80057ae <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800578e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2211      	movs	r2, #17
 8005794:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7ff ff75 	bl	8005696 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057ac:	e060      	b.n	8005870 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057bc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057cc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b40      	cmp	r3, #64	; 0x40
 80057e6:	d107      	bne.n	80057f8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7fc fb2b 	bl	8001e4c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057f6:	e03b      	b.n	8005870 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff ff48 	bl	8005696 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005806:	e033      	b.n	8005870 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005808:	7bfb      	ldrb	r3, [r7, #15]
 800580a:	2b21      	cmp	r3, #33	; 0x21
 800580c:	d005      	beq.n	800581a <I2C_MasterTransmit_TXE+0xda>
 800580e:	7bbb      	ldrb	r3, [r7, #14]
 8005810:	2b40      	cmp	r3, #64	; 0x40
 8005812:	d12d      	bne.n	8005870 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005814:	7bfb      	ldrb	r3, [r7, #15]
 8005816:	2b22      	cmp	r3, #34	; 0x22
 8005818:	d12a      	bne.n	8005870 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581e:	b29b      	uxth	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	d108      	bne.n	8005836 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005832:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005834:	e01c      	b.n	8005870 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b40      	cmp	r3, #64	; 0x40
 8005840:	d103      	bne.n	800584a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f88e 	bl	8005964 <I2C_MemoryTransmit_TXE_BTF>
}
 8005848:	e012      	b.n	8005870 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	781a      	ldrb	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005864:	b29b      	uxth	r3, r3
 8005866:	3b01      	subs	r3, #1
 8005868:	b29a      	uxth	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800586e:	e7ff      	b.n	8005870 <I2C_MasterTransmit_TXE+0x130>
 8005870:	bf00      	nop
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005884:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b21      	cmp	r3, #33	; 0x21
 8005890:	d164      	bne.n	800595c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d012      	beq.n	80058c2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	781a      	ldrb	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	1c5a      	adds	r2, r3, #1
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80058c0:	e04c      	b.n	800595c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d01d      	beq.n	8005904 <I2C_MasterTransmit_BTF+0x8c>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b20      	cmp	r3, #32
 80058cc:	d01a      	beq.n	8005904 <I2C_MasterTransmit_BTF+0x8c>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058d4:	d016      	beq.n	8005904 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058e4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2211      	movs	r2, #17
 80058ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff feca 	bl	8005696 <HAL_I2C_MasterTxCpltCallback>
}
 8005902:	e02b      	b.n	800595c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005912:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005922:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2220      	movs	r2, #32
 800592e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b40      	cmp	r3, #64	; 0x40
 800593c:	d107      	bne.n	800594e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7fc fa80 	bl	8001e4c <HAL_I2C_MemTxCpltCallback>
}
 800594c:	e006      	b.n	800595c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7ff fe9d 	bl	8005696 <HAL_I2C_MasterTxCpltCallback>
}
 800595c:	bf00      	nop
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005972:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005978:	2b00      	cmp	r3, #0
 800597a:	d11d      	bne.n	80059b8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005980:	2b01      	cmp	r3, #1
 8005982:	d10b      	bne.n	800599c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005988:	b2da      	uxtb	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005994:	1c9a      	adds	r2, r3, #2
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800599a:	e077      	b.n	8005a8c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	121b      	asrs	r3, r3, #8
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80059b6:	e069      	b.n	8005a8c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d10b      	bne.n	80059d8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80059d6:	e059      	b.n	8005a8c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d152      	bne.n	8005a86 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	2b22      	cmp	r3, #34	; 0x22
 80059e4:	d10d      	bne.n	8005a02 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059f4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005a00:	e044      	b.n	8005a8c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d015      	beq.n	8005a38 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
 8005a0e:	2b21      	cmp	r3, #33	; 0x21
 8005a10:	d112      	bne.n	8005a38 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	781a      	ldrb	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005a36:	e029      	b.n	8005a8c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d124      	bne.n	8005a8c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	2b21      	cmp	r3, #33	; 0x21
 8005a46:	d121      	bne.n	8005a8c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a56:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a66:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7fc f9e4 	bl	8001e4c <HAL_I2C_MemTxCpltCallback>
}
 8005a84:	e002      	b.n	8005a8c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7ff f8aa 	bl	8004be0 <I2C_Flush_DR>
}
 8005a8c:	bf00      	nop
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b22      	cmp	r3, #34	; 0x22
 8005aa6:	f040 80ac 	bne.w	8005c02 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2b03      	cmp	r3, #3
 8005ab6:	d921      	bls.n	8005afc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691a      	ldr	r2, [r3, #16]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	f040 808c 	bne.w	8005c02 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005afa:	e082      	b.n	8005c02 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d075      	beq.n	8005bf0 <I2C_MasterReceive_RXNE+0x15c>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d002      	beq.n	8005b10 <I2C_MasterReceive_RXNE+0x7c>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d16f      	bne.n	8005bf0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f001 fbf1 	bl	80072f8 <I2C_WaitOnSTOPRequestThroughIT>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d142      	bne.n	8005ba2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b2a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b3a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	691a      	ldr	r2, [r3, #16]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b40      	cmp	r3, #64	; 0x40
 8005b74:	d10a      	bne.n	8005b8c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f7ff fdc0 	bl	800570a <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005b8a:	e03a      	b.n	8005c02 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2212      	movs	r2, #18
 8005b98:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7ff fd84 	bl	80056a8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005ba0:	e02f      	b.n	8005c02 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bb0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	691a      	ldr	r2, [r3, #16]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7ff fd97 	bl	800571c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005bee:	e008      	b.n	8005c02 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bfe:	605a      	str	r2, [r3, #4]
}
 8005c00:	e7ff      	b.n	8005c02 <I2C_MasterReceive_RXNE+0x16e>
 8005c02:	bf00      	nop
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	d11b      	bne.n	8005c5a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c30:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	691a      	ldr	r2, [r3, #16]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	b2d2      	uxtb	r2, r2
 8005c3e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	3b01      	subs	r3, #1
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005c58:	e0bd      	b.n	8005dd6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d129      	bne.n	8005cb8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685a      	ldr	r2, [r3, #4]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c72:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d00a      	beq.n	8005c90 <I2C_MasterReceive_BTF+0x86>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d007      	beq.n	8005c90 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c8e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	691a      	ldr	r2, [r3, #16]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005cb6:	e08e      	b.n	8005dd6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d176      	bne.n	8005db0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d002      	beq.n	8005cce <I2C_MasterReceive_BTF+0xc4>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b10      	cmp	r3, #16
 8005ccc:	d108      	bne.n	8005ce0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	e019      	b.n	8005d14 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	d002      	beq.n	8005cec <I2C_MasterReceive_BTF+0xe2>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d108      	bne.n	8005cfe <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	e00a      	b.n	8005d14 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2b10      	cmp	r3, #16
 8005d02:	d007      	beq.n	8005d14 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d12:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	3b01      	subs	r3, #1
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	691a      	ldr	r2, [r3, #16]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	b2d2      	uxtb	r2, r2
 8005d46:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005d6e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2220      	movs	r2, #32
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b40      	cmp	r3, #64	; 0x40
 8005d82:	d10a      	bne.n	8005d9a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7ff fcb9 	bl	800570a <HAL_I2C_MemRxCpltCallback>
}
 8005d98:	e01d      	b.n	8005dd6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2212      	movs	r2, #18
 8005da6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f7ff fc7d 	bl	80056a8 <HAL_I2C_MasterRxCpltCallback>
}
 8005dae:	e012      	b.n	8005dd6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	691a      	ldr	r2, [r3, #16]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005dd6:	bf00      	nop
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b40      	cmp	r3, #64	; 0x40
 8005df0:	d117      	bne.n	8005e22 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d109      	bne.n	8005e0e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	461a      	mov	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e0a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005e0c:	e067      	b.n	8005ede <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	f043 0301 	orr.w	r3, r3, #1
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	611a      	str	r2, [r3, #16]
}
 8005e20:	e05d      	b.n	8005ede <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e2a:	d133      	bne.n	8005e94 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b21      	cmp	r3, #33	; 0x21
 8005e36:	d109      	bne.n	8005e4c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	461a      	mov	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e48:	611a      	str	r2, [r3, #16]
 8005e4a:	e008      	b.n	8005e5e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	f043 0301 	orr.w	r3, r3, #1
 8005e56:	b2da      	uxtb	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d004      	beq.n	8005e70 <I2C_Master_SB+0x92>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d108      	bne.n	8005e82 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d032      	beq.n	8005ede <I2C_Master_SB+0x100>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d02d      	beq.n	8005ede <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e90:	605a      	str	r2, [r3, #4]
}
 8005e92:	e024      	b.n	8005ede <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10e      	bne.n	8005eba <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	11db      	asrs	r3, r3, #7
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	f003 0306 	and.w	r3, r3, #6
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	f063 030f 	orn	r3, r3, #15
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	611a      	str	r2, [r3, #16]
}
 8005eb8:	e011      	b.n	8005ede <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d10d      	bne.n	8005ede <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	11db      	asrs	r3, r3, #7
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	f003 0306 	and.w	r3, r3, #6
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	f063 030e 	orn	r3, r3, #14
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	611a      	str	r2, [r3, #16]
}
 8005ede:	bf00      	nop
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bc80      	pop	{r7}
 8005ee6:	4770      	bx	lr

08005ee8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d004      	beq.n	8005f0e <I2C_Master_ADD10+0x26>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d108      	bne.n	8005f20 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00c      	beq.n	8005f30 <I2C_Master_ADD10+0x48>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d007      	beq.n	8005f30 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f2e:	605a      	str	r2, [r3, #4]
  }
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bc80      	pop	{r7}
 8005f38:	4770      	bx	lr

08005f3a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b091      	sub	sp, #68	; 0x44
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f56:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b22      	cmp	r3, #34	; 0x22
 8005f62:	f040 8174 	bne.w	800624e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10f      	bne.n	8005f8e <I2C_Master_ADDR+0x54>
 8005f6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f72:	2b40      	cmp	r3, #64	; 0x40
 8005f74:	d10b      	bne.n	8005f8e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f76:	2300      	movs	r3, #0
 8005f78:	633b      	str	r3, [r7, #48]	; 0x30
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	633b      	str	r3, [r7, #48]	; 0x30
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	633b      	str	r3, [r7, #48]	; 0x30
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8c:	e16b      	b.n	8006266 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d11d      	bne.n	8005fd2 <I2C_Master_ADDR+0x98>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005f9e:	d118      	bne.n	8005fd2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fc4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	651a      	str	r2, [r3, #80]	; 0x50
 8005fd0:	e149      	b.n	8006266 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d113      	bne.n	8006004 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fdc:	2300      	movs	r3, #0
 8005fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	e120      	b.n	8006246 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006008:	b29b      	uxth	r3, r3
 800600a:	2b01      	cmp	r3, #1
 800600c:	f040 808a 	bne.w	8006124 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006012:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006016:	d137      	bne.n	8006088 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006026:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006036:	d113      	bne.n	8006060 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006046:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006048:	2300      	movs	r3, #0
 800604a:	627b      	str	r3, [r7, #36]	; 0x24
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	627b      	str	r3, [r7, #36]	; 0x24
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	627b      	str	r3, [r7, #36]	; 0x24
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	e0f2      	b.n	8006246 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006060:	2300      	movs	r3, #0
 8006062:	623b      	str	r3, [r7, #32]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	623b      	str	r3, [r7, #32]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	623b      	str	r3, [r7, #32]
 8006074:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	e0de      	b.n	8006246 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608a:	2b08      	cmp	r3, #8
 800608c:	d02e      	beq.n	80060ec <I2C_Master_ADDR+0x1b2>
 800608e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006090:	2b20      	cmp	r3, #32
 8006092:	d02b      	beq.n	80060ec <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006096:	2b12      	cmp	r3, #18
 8006098:	d102      	bne.n	80060a0 <I2C_Master_ADDR+0x166>
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	2b01      	cmp	r3, #1
 800609e:	d125      	bne.n	80060ec <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80060a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a2:	2b04      	cmp	r3, #4
 80060a4:	d00e      	beq.n	80060c4 <I2C_Master_ADDR+0x18a>
 80060a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d00b      	beq.n	80060c4 <I2C_Master_ADDR+0x18a>
 80060ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ae:	2b10      	cmp	r3, #16
 80060b0:	d008      	beq.n	80060c4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060c0:	601a      	str	r2, [r3, #0]
 80060c2:	e007      	b.n	80060d4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060d2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060d4:	2300      	movs	r3, #0
 80060d6:	61fb      	str	r3, [r7, #28]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	61fb      	str	r3, [r7, #28]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	61fb      	str	r3, [r7, #28]
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	e0ac      	b.n	8006246 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060fa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060fc:	2300      	movs	r3, #0
 80060fe:	61bb      	str	r3, [r7, #24]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	61bb      	str	r3, [r7, #24]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	61bb      	str	r3, [r7, #24]
 8006110:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	e090      	b.n	8006246 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d158      	bne.n	80061e0 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800612e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006130:	2b04      	cmp	r3, #4
 8006132:	d021      	beq.n	8006178 <I2C_Master_ADDR+0x23e>
 8006134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006136:	2b02      	cmp	r3, #2
 8006138:	d01e      	beq.n	8006178 <I2C_Master_ADDR+0x23e>
 800613a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613c:	2b10      	cmp	r3, #16
 800613e:	d01b      	beq.n	8006178 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800614e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006150:	2300      	movs	r3, #0
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	e012      	b.n	800619e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006186:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006188:	2300      	movs	r3, #0
 800618a:	613b      	str	r3, [r7, #16]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	613b      	str	r3, [r7, #16]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	613b      	str	r3, [r7, #16]
 800619c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ac:	d14b      	bne.n	8006246 <I2C_Master_ADDR+0x30c>
 80061ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061b4:	d00b      	beq.n	80061ce <I2C_Master_ADDR+0x294>
 80061b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d008      	beq.n	80061ce <I2C_Master_ADDR+0x294>
 80061bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061be:	2b08      	cmp	r3, #8
 80061c0:	d005      	beq.n	80061ce <I2C_Master_ADDR+0x294>
 80061c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c4:	2b10      	cmp	r3, #16
 80061c6:	d002      	beq.n	80061ce <I2C_Master_ADDR+0x294>
 80061c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ca:	2b20      	cmp	r3, #32
 80061cc:	d13b      	bne.n	8006246 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061dc:	605a      	str	r2, [r3, #4]
 80061de:	e032      	b.n	8006246 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061ee:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061fe:	d117      	bne.n	8006230 <I2C_Master_ADDR+0x2f6>
 8006200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006202:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006206:	d00b      	beq.n	8006220 <I2C_Master_ADDR+0x2e6>
 8006208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620a:	2b01      	cmp	r3, #1
 800620c:	d008      	beq.n	8006220 <I2C_Master_ADDR+0x2e6>
 800620e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006210:	2b08      	cmp	r3, #8
 8006212:	d005      	beq.n	8006220 <I2C_Master_ADDR+0x2e6>
 8006214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006216:	2b10      	cmp	r3, #16
 8006218:	d002      	beq.n	8006220 <I2C_Master_ADDR+0x2e6>
 800621a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621c:	2b20      	cmp	r3, #32
 800621e:	d107      	bne.n	8006230 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800622e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800624c:	e00b      	b.n	8006266 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800624e:	2300      	movs	r3, #0
 8006250:	60bb      	str	r3, [r7, #8]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	60bb      	str	r3, [r7, #8]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	60bb      	str	r3, [r7, #8]
 8006262:	68bb      	ldr	r3, [r7, #8]
}
 8006264:	e7ff      	b.n	8006266 <I2C_Master_ADDR+0x32c>
 8006266:	bf00      	nop
 8006268:	3744      	adds	r7, #68	; 0x44
 800626a:	46bd      	mov	sp, r7
 800626c:	bc80      	pop	{r7}
 800626e:	4770      	bx	lr

08006270 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006284:	b29b      	uxth	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d02b      	beq.n	80062e2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	781a      	ldrb	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	3b01      	subs	r3, #1
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d114      	bne.n	80062e2 <I2C_SlaveTransmit_TXE+0x72>
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	2b29      	cmp	r3, #41	; 0x29
 80062bc:	d111      	bne.n	80062e2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062cc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2221      	movs	r2, #33	; 0x21
 80062d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2228      	movs	r2, #40	; 0x28
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f7ff f9ec 	bl	80056ba <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80062e2:	bf00      	nop
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d011      	beq.n	8006320 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	781a      	ldrb	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006316:	b29b      	uxth	r3, r3
 8006318:	3b01      	subs	r3, #1
 800631a:	b29a      	uxth	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	bc80      	pop	{r7}
 8006328:	4770      	bx	lr

0800632a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006338:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800633e:	b29b      	uxth	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d02c      	beq.n	800639e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691a      	ldr	r2, [r3, #16]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	b2d2      	uxtb	r2, r2
 8006350:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006360:	b29b      	uxth	r3, r3
 8006362:	3b01      	subs	r3, #1
 8006364:	b29a      	uxth	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800636e:	b29b      	uxth	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	d114      	bne.n	800639e <I2C_SlaveReceive_RXNE+0x74>
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	2b2a      	cmp	r3, #42	; 0x2a
 8006378:	d111      	bne.n	800639e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006388:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2222      	movs	r2, #34	; 0x22
 800638e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2228      	movs	r2, #40	; 0x28
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f7ff f997 	bl	80056cc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800639e:	bf00      	nop
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d012      	beq.n	80063de <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691a      	ldr	r2, [r3, #16]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	3b01      	subs	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80063de:	bf00      	nop
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bc80      	pop	{r7}
 80063e6:	4770      	bx	lr

080063e8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80063f2:	2300      	movs	r3, #0
 80063f4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006402:	2b28      	cmp	r3, #40	; 0x28
 8006404:	d127      	bne.n	8006456 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006414:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	089b      	lsrs	r3, r3, #2
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006422:	2301      	movs	r3, #1
 8006424:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	09db      	lsrs	r3, r3, #7
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	d103      	bne.n	800643a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	81bb      	strh	r3, [r7, #12]
 8006438:	e002      	b.n	8006440 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006448:	89ba      	ldrh	r2, [r7, #12]
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	4619      	mov	r1, r3
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff f945 	bl	80056de <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006454:	e00e      	b.n	8006474 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006456:	2300      	movs	r3, #0
 8006458:	60bb      	str	r3, [r7, #8]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	60bb      	str	r3, [r7, #8]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	60bb      	str	r3, [r7, #8]
 800646a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006474:	bf00      	nop
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800648a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800649a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800649c:	2300      	movs	r3, #0
 800649e:	60bb      	str	r3, [r7, #8]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	60bb      	str	r3, [r7, #8]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0201 	orr.w	r2, r2, #1
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064c8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064d8:	d172      	bne.n	80065c0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80064da:	7bfb      	ldrb	r3, [r7, #15]
 80064dc:	2b22      	cmp	r3, #34	; 0x22
 80064de:	d002      	beq.n	80064e6 <I2C_Slave_STOPF+0x6a>
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
 80064e2:	2b2a      	cmp	r3, #42	; 0x2a
 80064e4:	d135      	bne.n	8006552 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d005      	beq.n	800650a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	f043 0204 	orr.w	r2, r3, #4
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006518:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651e:	4618      	mov	r0, r3
 8006520:	f7fe f804 	bl	800452c <HAL_DMA_GetState>
 8006524:	4603      	mov	r3, r0
 8006526:	2b01      	cmp	r3, #1
 8006528:	d049      	beq.n	80065be <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652e:	4a69      	ldr	r2, [pc, #420]	; (80066d4 <I2C_Slave_STOPF+0x258>)
 8006530:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006536:	4618      	mov	r0, r3
 8006538:	f7fd fcb4 	bl	8003ea4 <HAL_DMA_Abort_IT>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d03d      	beq.n	80065be <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800654c:	4610      	mov	r0, r2
 800654e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006550:	e035      	b.n	80065be <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	b29a      	uxth	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006564:	b29b      	uxth	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d005      	beq.n	8006576 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656e:	f043 0204 	orr.w	r2, r3, #4
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006584:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658a:	4618      	mov	r0, r3
 800658c:	f7fd ffce 	bl	800452c <HAL_DMA_GetState>
 8006590:	4603      	mov	r3, r0
 8006592:	2b01      	cmp	r3, #1
 8006594:	d014      	beq.n	80065c0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659a:	4a4e      	ldr	r2, [pc, #312]	; (80066d4 <I2C_Slave_STOPF+0x258>)
 800659c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fd fc7e 	bl	8003ea4 <HAL_DMA_Abort_IT>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d008      	beq.n	80065c0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80065b8:	4610      	mov	r0, r2
 80065ba:	4798      	blx	r3
 80065bc:	e000      	b.n	80065c0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80065be:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d03e      	beq.n	8006648 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b04      	cmp	r3, #4
 80065d6:	d112      	bne.n	80065fe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	691a      	ldr	r2, [r3, #16]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e2:	b2d2      	uxtb	r2, r2
 80065e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006608:	2b40      	cmp	r3, #64	; 0x40
 800660a:	d112      	bne.n	8006632 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691a      	ldr	r2, [r3, #16]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006628:	b29b      	uxth	r3, r3
 800662a:	3b01      	subs	r3, #1
 800662c:	b29a      	uxth	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006636:	b29b      	uxth	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d005      	beq.n	8006648 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006640:	f043 0204 	orr.w	r2, r3, #4
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	d003      	beq.n	8006658 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f843 	bl	80066dc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006656:	e039      	b.n	80066cc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	2b2a      	cmp	r3, #42	; 0x2a
 800665c:	d109      	bne.n	8006672 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2228      	movs	r2, #40	; 0x28
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7ff f82d 	bl	80056cc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b28      	cmp	r3, #40	; 0x28
 800667c:	d111      	bne.n	80066a2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a15      	ldr	r2, [pc, #84]	; (80066d8 <I2C_Slave_STOPF+0x25c>)
 8006682:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2220      	movs	r2, #32
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7ff f82c 	bl	80056f8 <HAL_I2C_ListenCpltCallback>
}
 80066a0:	e014      	b.n	80066cc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a6:	2b22      	cmp	r3, #34	; 0x22
 80066a8:	d002      	beq.n	80066b0 <I2C_Slave_STOPF+0x234>
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
 80066ac:	2b22      	cmp	r3, #34	; 0x22
 80066ae:	d10d      	bne.n	80066cc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2220      	movs	r2, #32
 80066ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7ff f800 	bl	80056cc <HAL_I2C_SlaveRxCpltCallback>
}
 80066cc:	bf00      	nop
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	08006e55 	.word	0x08006e55
 80066d8:	ffff0000 	.word	0xffff0000

080066dc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80066f4:	7bbb      	ldrb	r3, [r7, #14]
 80066f6:	2b10      	cmp	r3, #16
 80066f8:	d002      	beq.n	8006700 <I2C_ITError+0x24>
 80066fa:	7bbb      	ldrb	r3, [r7, #14]
 80066fc:	2b40      	cmp	r3, #64	; 0x40
 80066fe:	d10a      	bne.n	8006716 <I2C_ITError+0x3a>
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	2b22      	cmp	r3, #34	; 0x22
 8006704:	d107      	bne.n	8006716 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006714:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006716:	7bfb      	ldrb	r3, [r7, #15]
 8006718:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800671c:	2b28      	cmp	r3, #40	; 0x28
 800671e:	d107      	bne.n	8006730 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2228      	movs	r2, #40	; 0x28
 800672a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800672e:	e015      	b.n	800675c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800673a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800673e:	d00a      	beq.n	8006756 <I2C_ITError+0x7a>
 8006740:	7bfb      	ldrb	r3, [r7, #15]
 8006742:	2b60      	cmp	r3, #96	; 0x60
 8006744:	d007      	beq.n	8006756 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800676a:	d162      	bne.n	8006832 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800677a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006780:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b01      	cmp	r3, #1
 8006788:	d020      	beq.n	80067cc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800678e:	4a6a      	ldr	r2, [pc, #424]	; (8006938 <I2C_ITError+0x25c>)
 8006790:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006796:	4618      	mov	r0, r3
 8006798:	f7fd fb84 	bl	8003ea4 <HAL_DMA_Abort_IT>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 8089 	beq.w	80068b6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0201 	bic.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2220      	movs	r2, #32
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80067c6:	4610      	mov	r0, r2
 80067c8:	4798      	blx	r3
 80067ca:	e074      	b.n	80068b6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d0:	4a59      	ldr	r2, [pc, #356]	; (8006938 <I2C_ITError+0x25c>)
 80067d2:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fd fb63 	bl	8003ea4 <HAL_DMA_Abort_IT>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d068      	beq.n	80068b6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ee:	2b40      	cmp	r3, #64	; 0x40
 80067f0:	d10b      	bne.n	800680a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	691a      	ldr	r2, [r3, #16]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	b2d2      	uxtb	r2, r2
 80067fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 0201 	bic.w	r2, r2, #1
 8006818:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2220      	movs	r2, #32
 800681e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800682c:	4610      	mov	r0, r2
 800682e:	4798      	blx	r3
 8006830:	e041      	b.n	80068b6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b60      	cmp	r3, #96	; 0x60
 800683c:	d125      	bne.n	800688a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2220      	movs	r2, #32
 8006842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006856:	2b40      	cmp	r3, #64	; 0x40
 8006858:	d10b      	bne.n	8006872 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	691a      	ldr	r2, [r3, #16]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	b2d2      	uxtb	r2, r2
 8006866:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 0201 	bic.w	r2, r2, #1
 8006880:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fe ff53 	bl	800572e <HAL_I2C_AbortCpltCallback>
 8006888:	e015      	b.n	80068b6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006894:	2b40      	cmp	r3, #64	; 0x40
 8006896:	d10b      	bne.n	80068b0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	691a      	ldr	r2, [r3, #16]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	1c5a      	adds	r2, r3, #1
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7fe ff33 	bl	800571c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10e      	bne.n	80068e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d109      	bne.n	80068e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d104      	bne.n	80068e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d007      	beq.n	80068f4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068f2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068fa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b04      	cmp	r3, #4
 8006906:	d113      	bne.n	8006930 <I2C_ITError+0x254>
 8006908:	7bfb      	ldrb	r3, [r7, #15]
 800690a:	2b28      	cmp	r3, #40	; 0x28
 800690c:	d110      	bne.n	8006930 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a0a      	ldr	r2, [pc, #40]	; (800693c <I2C_ITError+0x260>)
 8006912:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2220      	movs	r2, #32
 800691e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7fe fee4 	bl	80056f8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006930:	bf00      	nop
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	08006e55 	.word	0x08006e55
 800693c:	ffff0000 	.word	0xffff0000

08006940 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b088      	sub	sp, #32
 8006944:	af02      	add	r7, sp, #8
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	4608      	mov	r0, r1
 800694a:	4611      	mov	r1, r2
 800694c:	461a      	mov	r2, r3
 800694e:	4603      	mov	r3, r0
 8006950:	817b      	strh	r3, [r7, #10]
 8006952:	460b      	mov	r3, r1
 8006954:	813b      	strh	r3, [r7, #8]
 8006956:	4613      	mov	r3, r2
 8006958:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006968:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	2200      	movs	r2, #0
 8006972:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 fb14 	bl	8006fa4 <I2C_WaitOnFlagUntilTimeout>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00d      	beq.n	800699e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800698c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006990:	d103      	bne.n	800699a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006998:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e05f      	b.n	8006a5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800699e:	897b      	ldrh	r3, [r7, #10]
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	461a      	mov	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80069ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	6a3a      	ldr	r2, [r7, #32]
 80069b2:	492d      	ldr	r1, [pc, #180]	; (8006a68 <I2C_RequestMemoryWrite+0x128>)
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 fb6f 	bl	8007098 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e04c      	b.n	8006a5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069c4:	2300      	movs	r3, #0
 80069c6:	617b      	str	r3, [r7, #20]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069dc:	6a39      	ldr	r1, [r7, #32]
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 fbfa 	bl	80071d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00d      	beq.n	8006a06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	d107      	bne.n	8006a02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e02b      	b.n	8006a5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a06:	88fb      	ldrh	r3, [r7, #6]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d105      	bne.n	8006a18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a0c:	893b      	ldrh	r3, [r7, #8]
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	611a      	str	r2, [r3, #16]
 8006a16:	e021      	b.n	8006a5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a18:	893b      	ldrh	r3, [r7, #8]
 8006a1a:	0a1b      	lsrs	r3, r3, #8
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a28:	6a39      	ldr	r1, [r7, #32]
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 fbd4 	bl	80071d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00d      	beq.n	8006a52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3a:	2b04      	cmp	r3, #4
 8006a3c:	d107      	bne.n	8006a4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e005      	b.n	8006a5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a52:	893b      	ldrh	r3, [r7, #8]
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	00010002 	.word	0x00010002

08006a6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b088      	sub	sp, #32
 8006a70:	af02      	add	r7, sp, #8
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	4608      	mov	r0, r1
 8006a76:	4611      	mov	r1, r2
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	817b      	strh	r3, [r7, #10]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	813b      	strh	r3, [r7, #8]
 8006a82:	4613      	mov	r3, r2
 8006a84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aa4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 fa76 	bl	8006fa4 <I2C_WaitOnFlagUntilTimeout>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00d      	beq.n	8006ada <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006acc:	d103      	bne.n	8006ad6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ad4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e0aa      	b.n	8006c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ada:	897b      	ldrh	r3, [r7, #10]
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	461a      	mov	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ae8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	6a3a      	ldr	r2, [r7, #32]
 8006aee:	4952      	ldr	r1, [pc, #328]	; (8006c38 <I2C_RequestMemoryRead+0x1cc>)
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f000 fad1 	bl	8007098 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e097      	b.n	8006c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b00:	2300      	movs	r3, #0
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	617b      	str	r3, [r7, #20]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	617b      	str	r3, [r7, #20]
 8006b14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b18:	6a39      	ldr	r1, [r7, #32]
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f000 fb5c 	bl	80071d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00d      	beq.n	8006b42 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	d107      	bne.n	8006b3e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e076      	b.n	8006c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b42:	88fb      	ldrh	r3, [r7, #6]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d105      	bne.n	8006b54 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b48:	893b      	ldrh	r3, [r7, #8]
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	611a      	str	r2, [r3, #16]
 8006b52:	e021      	b.n	8006b98 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b54:	893b      	ldrh	r3, [r7, #8]
 8006b56:	0a1b      	lsrs	r3, r3, #8
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b64:	6a39      	ldr	r1, [r7, #32]
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f000 fb36 	bl	80071d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00d      	beq.n	8006b8e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	2b04      	cmp	r3, #4
 8006b78:	d107      	bne.n	8006b8a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e050      	b.n	8006c30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b8e:	893b      	ldrh	r3, [r7, #8]
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b9a:	6a39      	ldr	r1, [r7, #32]
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f000 fb1b 	bl	80071d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00d      	beq.n	8006bc4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	d107      	bne.n	8006bc0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bbe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e035      	b.n	8006c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bd2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 f9df 	bl	8006fa4 <I2C_WaitOnFlagUntilTimeout>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00d      	beq.n	8006c08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bfa:	d103      	bne.n	8006c04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e013      	b.n	8006c30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c08:	897b      	ldrh	r3, [r7, #10]
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	f043 0301 	orr.w	r3, r3, #1
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	6a3a      	ldr	r2, [r7, #32]
 8006c1c:	4906      	ldr	r1, [pc, #24]	; (8006c38 <I2C_RequestMemoryRead+0x1cc>)
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 fa3a 	bl	8007098 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e000      	b.n	8006c30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	00010002 	.word	0x00010002

08006c3c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c48:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c50:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c58:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006c6e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006c90:	7cfb      	ldrb	r3, [r7, #19]
 8006c92:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006c96:	2b21      	cmp	r3, #33	; 0x21
 8006c98:	d007      	beq.n	8006caa <I2C_DMAXferCplt+0x6e>
 8006c9a:	7cfb      	ldrb	r3, [r7, #19]
 8006c9c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8006ca0:	2b22      	cmp	r3, #34	; 0x22
 8006ca2:	d131      	bne.n	8006d08 <I2C_DMAXferCplt+0xcc>
 8006ca4:	7cbb      	ldrb	r3, [r7, #18]
 8006ca6:	2b20      	cmp	r3, #32
 8006ca8:	d12e      	bne.n	8006d08 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cb8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006cc0:	7cfb      	ldrb	r3, [r7, #19]
 8006cc2:	2b29      	cmp	r3, #41	; 0x29
 8006cc4:	d10a      	bne.n	8006cdc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2221      	movs	r2, #33	; 0x21
 8006cca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	2228      	movs	r2, #40	; 0x28
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006cd4:	6978      	ldr	r0, [r7, #20]
 8006cd6:	f7fe fcf0 	bl	80056ba <HAL_I2C_SlaveTxCpltCallback>
 8006cda:	e00c      	b.n	8006cf6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006cdc:	7cfb      	ldrb	r3, [r7, #19]
 8006cde:	2b2a      	cmp	r3, #42	; 0x2a
 8006ce0:	d109      	bne.n	8006cf6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2222      	movs	r2, #34	; 0x22
 8006ce6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2228      	movs	r2, #40	; 0x28
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006cf0:	6978      	ldr	r0, [r7, #20]
 8006cf2:	f7fe fceb 	bl	80056cc <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006d04:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006d06:	e06a      	b.n	8006dde <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d064      	beq.n	8006dde <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d107      	bne.n	8006d2e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d2c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006d3c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d44:	d009      	beq.n	8006d5a <I2C_DMAXferCplt+0x11e>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	d006      	beq.n	8006d5a <I2C_DMAXferCplt+0x11e>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006d52:	d002      	beq.n	8006d5a <I2C_DMAXferCplt+0x11e>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b20      	cmp	r3, #32
 8006d58:	d107      	bne.n	8006d6a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d68:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d78:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d88:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d003      	beq.n	8006da0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006d98:	6978      	ldr	r0, [r7, #20]
 8006d9a:	f7fe fcbf 	bl	800571c <HAL_I2C_ErrorCallback>
}
 8006d9e:	e01e      	b.n	8006dde <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2220      	movs	r2, #32
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b40      	cmp	r3, #64	; 0x40
 8006db2:	d10a      	bne.n	8006dca <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006dc2:	6978      	ldr	r0, [r7, #20]
 8006dc4:	f7fe fca1 	bl	800570a <HAL_I2C_MemRxCpltCallback>
}
 8006dc8:	e009      	b.n	8006dde <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2212      	movs	r2, #18
 8006dd6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006dd8:	6978      	ldr	r0, [r7, #20]
 8006dda:	f7fe fc65 	bl	80056a8 <HAL_I2C_MasterRxCpltCallback>
}
 8006dde:	bf00      	nop
 8006de0:	3718      	adds	r7, #24
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b084      	sub	sp, #16
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d003      	beq.n	8006e04 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e00:	2200      	movs	r2, #0
 8006e02:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e10:	2200      	movs	r2, #0
 8006e12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e22:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	f043 0210 	orr.w	r2, r3, #16
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f7fe fc68 	bl	800571c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006e4c:	bf00      	nop
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e64:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e6c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006e6e:	4b4b      	ldr	r3, [pc, #300]	; (8006f9c <I2C_DMAAbort+0x148>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	08db      	lsrs	r3, r3, #3
 8006e74:	4a4a      	ldr	r2, [pc, #296]	; (8006fa0 <I2C_DMAAbort+0x14c>)
 8006e76:	fba2 2303 	umull	r2, r3, r2, r3
 8006e7a:	0a1a      	lsrs	r2, r3, #8
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	00da      	lsls	r2, r3, #3
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d106      	bne.n	8006e9c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	f043 0220 	orr.w	r2, r3, #32
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006e9a:	e00a      	b.n	8006eb2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eb0:	d0ea      	beq.n	8006e88 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ece:	2200      	movs	r2, #0
 8006ed0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ee0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d003      	beq.n	8006f08 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f04:	2200      	movs	r2, #0
 8006f06:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f022 0201 	bic.w	r2, r2, #1
 8006f16:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b60      	cmp	r3, #96	; 0x60
 8006f22:	d10e      	bne.n	8006f42 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	2220      	movs	r2, #32
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2200      	movs	r2, #0
 8006f38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006f3a:	6978      	ldr	r0, [r7, #20]
 8006f3c:	f7fe fbf7 	bl	800572e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f40:	e027      	b.n	8006f92 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f42:	7cfb      	ldrb	r3, [r7, #19]
 8006f44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f48:	2b28      	cmp	r3, #40	; 0x28
 8006f4a:	d117      	bne.n	8006f7c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 0201 	orr.w	r2, r2, #1
 8006f5a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f6a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2228      	movs	r2, #40	; 0x28
 8006f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f7a:	e007      	b.n	8006f8c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006f8c:	6978      	ldr	r0, [r7, #20]
 8006f8e:	f7fe fbc5 	bl	800571c <HAL_I2C_ErrorCallback>
}
 8006f92:	bf00      	nop
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	2000024c 	.word	0x2000024c
 8006fa0:	14f8b589 	.word	0x14f8b589

08006fa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fb4:	e048      	b.n	8007048 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fbc:	d044      	beq.n	8007048 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fbe:	f7fc fb3b 	bl	8003638 <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d302      	bcc.n	8006fd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d139      	bne.n	8007048 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	0c1b      	lsrs	r3, r3, #16
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d10d      	bne.n	8006ffa <I2C_WaitOnFlagUntilTimeout+0x56>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	43da      	mvns	r2, r3
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	4013      	ands	r3, r2
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	bf0c      	ite	eq
 8006ff0:	2301      	moveq	r3, #1
 8006ff2:	2300      	movne	r3, #0
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	e00c      	b.n	8007014 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	43da      	mvns	r2, r3
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	4013      	ands	r3, r2
 8007006:	b29b      	uxth	r3, r3
 8007008:	2b00      	cmp	r3, #0
 800700a:	bf0c      	ite	eq
 800700c:	2301      	moveq	r3, #1
 800700e:	2300      	movne	r3, #0
 8007010:	b2db      	uxtb	r3, r3
 8007012:	461a      	mov	r2, r3
 8007014:	79fb      	ldrb	r3, [r7, #7]
 8007016:	429a      	cmp	r2, r3
 8007018:	d116      	bne.n	8007048 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2220      	movs	r2, #32
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007034:	f043 0220 	orr.w	r2, r3, #32
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e023      	b.n	8007090 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	0c1b      	lsrs	r3, r3, #16
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b01      	cmp	r3, #1
 8007050:	d10d      	bne.n	800706e <I2C_WaitOnFlagUntilTimeout+0xca>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	695b      	ldr	r3, [r3, #20]
 8007058:	43da      	mvns	r2, r3
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	4013      	ands	r3, r2
 800705e:	b29b      	uxth	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	bf0c      	ite	eq
 8007064:	2301      	moveq	r3, #1
 8007066:	2300      	movne	r3, #0
 8007068:	b2db      	uxtb	r3, r3
 800706a:	461a      	mov	r2, r3
 800706c:	e00c      	b.n	8007088 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	43da      	mvns	r2, r3
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	4013      	ands	r3, r2
 800707a:	b29b      	uxth	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	bf0c      	ite	eq
 8007080:	2301      	moveq	r3, #1
 8007082:	2300      	movne	r3, #0
 8007084:	b2db      	uxtb	r3, r3
 8007086:	461a      	mov	r2, r3
 8007088:	79fb      	ldrb	r3, [r7, #7]
 800708a:	429a      	cmp	r2, r3
 800708c:	d093      	beq.n	8006fb6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
 80070a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80070a6:	e071      	b.n	800718c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070b6:	d123      	bne.n	8007100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2220      	movs	r2, #32
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ec:	f043 0204 	orr.w	r2, r3, #4
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e067      	b.n	80071d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007106:	d041      	beq.n	800718c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007108:	f7fc fa96 	bl	8003638 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	429a      	cmp	r2, r3
 8007116:	d302      	bcc.n	800711e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d136      	bne.n	800718c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	0c1b      	lsrs	r3, r3, #16
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b01      	cmp	r3, #1
 8007126:	d10c      	bne.n	8007142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	43da      	mvns	r2, r3
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	4013      	ands	r3, r2
 8007134:	b29b      	uxth	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	bf14      	ite	ne
 800713a:	2301      	movne	r3, #1
 800713c:	2300      	moveq	r3, #0
 800713e:	b2db      	uxtb	r3, r3
 8007140:	e00b      	b.n	800715a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	43da      	mvns	r2, r3
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	4013      	ands	r3, r2
 800714e:	b29b      	uxth	r3, r3
 8007150:	2b00      	cmp	r3, #0
 8007152:	bf14      	ite	ne
 8007154:	2301      	movne	r3, #1
 8007156:	2300      	moveq	r3, #0
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d016      	beq.n	800718c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2220      	movs	r2, #32
 8007168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007178:	f043 0220 	orr.w	r2, r3, #32
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e021      	b.n	80071d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	0c1b      	lsrs	r3, r3, #16
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b01      	cmp	r3, #1
 8007194:	d10c      	bne.n	80071b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	43da      	mvns	r2, r3
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	4013      	ands	r3, r2
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	bf14      	ite	ne
 80071a8:	2301      	movne	r3, #1
 80071aa:	2300      	moveq	r3, #0
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	e00b      	b.n	80071c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	43da      	mvns	r2, r3
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	4013      	ands	r3, r2
 80071bc:	b29b      	uxth	r3, r3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	bf14      	ite	ne
 80071c2:	2301      	movne	r3, #1
 80071c4:	2300      	moveq	r3, #0
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f47f af6d 	bne.w	80070a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071e4:	e034      	b.n	8007250 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 f8b8 	bl	800735c <I2C_IsAcknowledgeFailed>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e034      	b.n	8007260 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fc:	d028      	beq.n	8007250 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071fe:	f7fc fa1b 	bl	8003638 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	429a      	cmp	r2, r3
 800720c:	d302      	bcc.n	8007214 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d11d      	bne.n	8007250 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800721e:	2b80      	cmp	r3, #128	; 0x80
 8007220:	d016      	beq.n	8007250 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2220      	movs	r2, #32
 800722c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723c:	f043 0220 	orr.w	r2, r3, #32
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e007      	b.n	8007260 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800725a:	2b80      	cmp	r3, #128	; 0x80
 800725c:	d1c3      	bne.n	80071e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007274:	e034      	b.n	80072e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 f870 	bl	800735c <I2C_IsAcknowledgeFailed>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e034      	b.n	80072f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728c:	d028      	beq.n	80072e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800728e:	f7fc f9d3 	bl	8003638 <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	429a      	cmp	r2, r3
 800729c:	d302      	bcc.n	80072a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d11d      	bne.n	80072e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	f003 0304 	and.w	r3, r3, #4
 80072ae:	2b04      	cmp	r3, #4
 80072b0:	d016      	beq.n	80072e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072cc:	f043 0220 	orr.w	r2, r3, #32
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e007      	b.n	80072f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	f003 0304 	and.w	r3, r3, #4
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d1c3      	bne.n	8007276 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007300:	2300      	movs	r3, #0
 8007302:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007304:	4b13      	ldr	r3, [pc, #76]	; (8007354 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	08db      	lsrs	r3, r3, #3
 800730a:	4a13      	ldr	r2, [pc, #76]	; (8007358 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800730c:	fba2 2303 	umull	r2, r3, r2, r3
 8007310:	0a1a      	lsrs	r2, r3, #8
 8007312:	4613      	mov	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	3b01      	subs	r3, #1
 800731e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d107      	bne.n	8007336 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	f043 0220 	orr.w	r2, r3, #32
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e008      	b.n	8007348 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007344:	d0e9      	beq.n	800731a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	bc80      	pop	{r7}
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	2000024c 	.word	0x2000024c
 8007358:	14f8b589 	.word	0x14f8b589

0800735c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800736e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007372:	d11b      	bne.n	80073ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800737c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2220      	movs	r2, #32
 8007388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007398:	f043 0204 	orr.w	r2, r3, #4
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e000      	b.n	80073ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bc80      	pop	{r7}
 80073b6:	4770      	bx	lr

080073b8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80073c8:	d103      	bne.n	80073d2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80073d0:	e007      	b.n	80073e2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80073da:	d102      	bne.n	80073e2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2208      	movs	r2, #8
 80073e0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80073e2:	bf00      	nop
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bc80      	pop	{r7}
 80073ea:	4770      	bx	lr

080073ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80073ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ee:	b08b      	sub	sp, #44	; 0x2c
 80073f0:	af06      	add	r7, sp, #24
 80073f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e0f1      	b.n	80075e2 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d106      	bne.n	8007418 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f007 fc2a 	bl	800ec6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2203      	movs	r2, #3
 800741c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4618      	mov	r0, r3
 8007426:	f003 fb2f 	bl	800aa88 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	603b      	str	r3, [r7, #0]
 8007430:	687e      	ldr	r6, [r7, #4]
 8007432:	466d      	mov	r5, sp
 8007434:	f106 0410 	add.w	r4, r6, #16
 8007438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800743a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	602b      	str	r3, [r5, #0]
 8007440:	1d33      	adds	r3, r6, #4
 8007442:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007444:	6838      	ldr	r0, [r7, #0]
 8007446:	f003 faf9 	bl	800aa3c <USB_CoreInit>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d005      	beq.n	800745c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e0c2      	b.n	80075e2 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2100      	movs	r1, #0
 8007462:	4618      	mov	r0, r3
 8007464:	f003 fb2a 	bl	800aabc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007468:	2300      	movs	r3, #0
 800746a:	73fb      	strb	r3, [r7, #15]
 800746c:	e040      	b.n	80074f0 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800746e:	7bfb      	ldrb	r3, [r7, #15]
 8007470:	6879      	ldr	r1, [r7, #4]
 8007472:	1c5a      	adds	r2, r3, #1
 8007474:	4613      	mov	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	00db      	lsls	r3, r3, #3
 800747c:	440b      	add	r3, r1
 800747e:	3301      	adds	r3, #1
 8007480:	2201      	movs	r2, #1
 8007482:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007484:	7bfb      	ldrb	r3, [r7, #15]
 8007486:	6879      	ldr	r1, [r7, #4]
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	4613      	mov	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	00db      	lsls	r3, r3, #3
 8007492:	440b      	add	r3, r1
 8007494:	7bfa      	ldrb	r2, [r7, #15]
 8007496:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007498:	7bfb      	ldrb	r3, [r7, #15]
 800749a:	6879      	ldr	r1, [r7, #4]
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	4613      	mov	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4413      	add	r3, r2
 80074a4:	00db      	lsls	r3, r3, #3
 80074a6:	440b      	add	r3, r1
 80074a8:	3303      	adds	r3, #3
 80074aa:	2200      	movs	r2, #0
 80074ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80074ae:	7bfa      	ldrb	r2, [r7, #15]
 80074b0:	6879      	ldr	r1, [r7, #4]
 80074b2:	4613      	mov	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4413      	add	r3, r2
 80074b8:	00db      	lsls	r3, r3, #3
 80074ba:	440b      	add	r3, r1
 80074bc:	3338      	adds	r3, #56	; 0x38
 80074be:	2200      	movs	r2, #0
 80074c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80074c2:	7bfa      	ldrb	r2, [r7, #15]
 80074c4:	6879      	ldr	r1, [r7, #4]
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	00db      	lsls	r3, r3, #3
 80074ce:	440b      	add	r3, r1
 80074d0:	333c      	adds	r3, #60	; 0x3c
 80074d2:	2200      	movs	r2, #0
 80074d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80074d6:	7bfa      	ldrb	r2, [r7, #15]
 80074d8:	6879      	ldr	r1, [r7, #4]
 80074da:	4613      	mov	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	00db      	lsls	r3, r3, #3
 80074e2:	440b      	add	r3, r1
 80074e4:	3340      	adds	r3, #64	; 0x40
 80074e6:	2200      	movs	r2, #0
 80074e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
 80074ec:	3301      	adds	r3, #1
 80074ee:	73fb      	strb	r3, [r7, #15]
 80074f0:	7bfa      	ldrb	r2, [r7, #15]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d3b9      	bcc.n	800746e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074fa:	2300      	movs	r3, #0
 80074fc:	73fb      	strb	r3, [r7, #15]
 80074fe:	e044      	b.n	800758a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007500:	7bfa      	ldrb	r2, [r7, #15]
 8007502:	6879      	ldr	r1, [r7, #4]
 8007504:	4613      	mov	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	00db      	lsls	r3, r3, #3
 800750c:	440b      	add	r3, r1
 800750e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8007512:	2200      	movs	r2, #0
 8007514:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007516:	7bfa      	ldrb	r2, [r7, #15]
 8007518:	6879      	ldr	r1, [r7, #4]
 800751a:	4613      	mov	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	00db      	lsls	r3, r3, #3
 8007522:	440b      	add	r3, r1
 8007524:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007528:	7bfa      	ldrb	r2, [r7, #15]
 800752a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800752c:	7bfa      	ldrb	r2, [r7, #15]
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	4613      	mov	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4413      	add	r3, r2
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	440b      	add	r3, r1
 800753a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800753e:	2200      	movs	r2, #0
 8007540:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007542:	7bfa      	ldrb	r2, [r7, #15]
 8007544:	6879      	ldr	r1, [r7, #4]
 8007546:	4613      	mov	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4413      	add	r3, r2
 800754c:	00db      	lsls	r3, r3, #3
 800754e:	440b      	add	r3, r1
 8007550:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8007554:	2200      	movs	r2, #0
 8007556:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007558:	7bfa      	ldrb	r2, [r7, #15]
 800755a:	6879      	ldr	r1, [r7, #4]
 800755c:	4613      	mov	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	00db      	lsls	r3, r3, #3
 8007564:	440b      	add	r3, r1
 8007566:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800756a:	2200      	movs	r2, #0
 800756c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800756e:	7bfa      	ldrb	r2, [r7, #15]
 8007570:	6879      	ldr	r1, [r7, #4]
 8007572:	4613      	mov	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	00db      	lsls	r3, r3, #3
 800757a:	440b      	add	r3, r1
 800757c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007580:	2200      	movs	r2, #0
 8007582:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007584:	7bfb      	ldrb	r3, [r7, #15]
 8007586:	3301      	adds	r3, #1
 8007588:	73fb      	strb	r3, [r7, #15]
 800758a:	7bfa      	ldrb	r2, [r7, #15]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	429a      	cmp	r2, r3
 8007592:	d3b5      	bcc.n	8007500 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	603b      	str	r3, [r7, #0]
 800759a:	687e      	ldr	r6, [r7, #4]
 800759c:	466d      	mov	r5, sp
 800759e:	f106 0410 	add.w	r4, r6, #16
 80075a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80075a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80075a6:	6823      	ldr	r3, [r4, #0]
 80075a8:	602b      	str	r3, [r5, #0]
 80075aa:	1d33      	adds	r3, r6, #4
 80075ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80075ae:	6838      	ldr	r0, [r7, #0]
 80075b0:	f003 fa90 	bl	800aad4 <USB_DevInit>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d005      	beq.n	80075c6 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2202      	movs	r2, #2
 80075be:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e00d      	b.n	80075e2 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4618      	mov	r0, r3
 80075dc:	f005 fd11 	bl	800d002 <USB_DevDisconnect>

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b082      	sub	sp, #8
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d101      	bne.n	8007600 <HAL_PCD_Start+0x16>
 80075fc:	2302      	movs	r3, #2
 80075fe:	e016      	b.n	800762e <HAL_PCD_Start+0x44>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4618      	mov	r0, r3
 800760e:	f003 fa25 	bl	800aa5c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8007612:	2101      	movs	r1, #1
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f007 fd94 	bl	800f142 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4618      	mov	r0, r3
 8007620:	f005 fce5 	bl	800cfee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b088      	sub	sp, #32
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4618      	mov	r0, r3
 8007644:	f005 fce7 	bl	800d016 <USB_ReadInterrupts>
 8007648:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d003      	beq.n	800765c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fb1b 	bl	8007c90 <PCD_EP_ISR_Handler>

    return;
 800765a:	e119      	b.n	8007890 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007662:	2b00      	cmp	r3, #0
 8007664:	d013      	beq.n	800768e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800766e:	b29a      	uxth	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007678:	b292      	uxth	r2, r2
 800767a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f007 fb67 	bl	800ed52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007684:	2100      	movs	r1, #0
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f905 	bl	8007896 <HAL_PCD_SetAddress>

    return;
 800768c:	e100      	b.n	8007890 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00c      	beq.n	80076b2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80076aa:	b292      	uxth	r2, r2
 80076ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80076b0:	e0ee      	b.n	8007890 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00c      	beq.n	80076d6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076ce:	b292      	uxth	r2, r2
 80076d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80076d4:	e0dc      	b.n	8007890 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d027      	beq.n	8007730 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f022 0204 	bic.w	r2, r2, #4
 80076f2:	b292      	uxth	r2, r2
 80076f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007700:	b29a      	uxth	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f022 0208 	bic.w	r2, r2, #8
 800770a:	b292      	uxth	r2, r2
 800770c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f007 fb57 	bl	800edc4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800771e:	b29a      	uxth	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007728:	b292      	uxth	r2, r2
 800772a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800772e:	e0af      	b.n	8007890 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007736:	2b00      	cmp	r3, #0
 8007738:	f000 8083 	beq.w	8007842 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800773c:	2300      	movs	r3, #0
 800773e:	77fb      	strb	r3, [r7, #31]
 8007740:	e010      	b.n	8007764 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	7ffb      	ldrb	r3, [r7, #31]
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	441a      	add	r2, r3
 800774e:	7ffb      	ldrb	r3, [r7, #31]
 8007750:	8812      	ldrh	r2, [r2, #0]
 8007752:	b292      	uxth	r2, r2
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	3320      	adds	r3, #32
 8007758:	443b      	add	r3, r7
 800775a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800775e:	7ffb      	ldrb	r3, [r7, #31]
 8007760:	3301      	adds	r3, #1
 8007762:	77fb      	strb	r3, [r7, #31]
 8007764:	7ffb      	ldrb	r3, [r7, #31]
 8007766:	2b07      	cmp	r3, #7
 8007768:	d9eb      	bls.n	8007742 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007772:	b29a      	uxth	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f042 0201 	orr.w	r2, r2, #1
 800777c:	b292      	uxth	r2, r2
 800777e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800778a:	b29a      	uxth	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 0201 	bic.w	r2, r2, #1
 8007794:	b292      	uxth	r2, r2
 8007796:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800779a:	bf00      	nop
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d0f6      	beq.n	800779c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077c0:	b292      	uxth	r2, r2
 80077c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80077c6:	2300      	movs	r3, #0
 80077c8:	77fb      	strb	r3, [r7, #31]
 80077ca:	e00f      	b.n	80077ec <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80077cc:	7ffb      	ldrb	r3, [r7, #31]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	6812      	ldr	r2, [r2, #0]
 80077d2:	4611      	mov	r1, r2
 80077d4:	7ffa      	ldrb	r2, [r7, #31]
 80077d6:	0092      	lsls	r2, r2, #2
 80077d8:	440a      	add	r2, r1
 80077da:	005b      	lsls	r3, r3, #1
 80077dc:	3320      	adds	r3, #32
 80077de:	443b      	add	r3, r7
 80077e0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80077e4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80077e6:	7ffb      	ldrb	r3, [r7, #31]
 80077e8:	3301      	adds	r3, #1
 80077ea:	77fb      	strb	r3, [r7, #31]
 80077ec:	7ffb      	ldrb	r3, [r7, #31]
 80077ee:	2b07      	cmp	r3, #7
 80077f0:	d9ec      	bls.n	80077cc <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f042 0208 	orr.w	r2, r2, #8
 8007804:	b292      	uxth	r2, r2
 8007806:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007812:	b29a      	uxth	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800781c:	b292      	uxth	r2, r2
 800781e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800782a:	b29a      	uxth	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f042 0204 	orr.w	r2, r2, #4
 8007834:	b292      	uxth	r2, r2
 8007836:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f007 faa8 	bl	800ed90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007840:	e026      	b.n	8007890 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00f      	beq.n	800786c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007854:	b29a      	uxth	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800785e:	b292      	uxth	r2, r2
 8007860:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f007 fa66 	bl	800ed36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800786a:	e011      	b.n	8007890 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00c      	beq.n	8007890 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800787e:	b29a      	uxth	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007888:	b292      	uxth	r2, r2
 800788a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800788e:	bf00      	nop
  }
}
 8007890:	3720      	adds	r7, #32
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b082      	sub	sp, #8
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
 800789e:	460b      	mov	r3, r1
 80078a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d101      	bne.n	80078b0 <HAL_PCD_SetAddress+0x1a>
 80078ac:	2302      	movs	r3, #2
 80078ae:	e013      	b.n	80078d8 <HAL_PCD_SetAddress+0x42>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	78fa      	ldrb	r2, [r7, #3]
 80078bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	78fa      	ldrb	r2, [r7, #3]
 80078c6:	4611      	mov	r1, r2
 80078c8:	4618      	mov	r0, r3
 80078ca:	f005 fb7d 	bl	800cfc8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	4608      	mov	r0, r1
 80078ea:	4611      	mov	r1, r2
 80078ec:	461a      	mov	r2, r3
 80078ee:	4603      	mov	r3, r0
 80078f0:	70fb      	strb	r3, [r7, #3]
 80078f2:	460b      	mov	r3, r1
 80078f4:	803b      	strh	r3, [r7, #0]
 80078f6:	4613      	mov	r3, r2
 80078f8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80078fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007902:	2b00      	cmp	r3, #0
 8007904:	da0e      	bge.n	8007924 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007906:	78fb      	ldrb	r3, [r7, #3]
 8007908:	f003 0307 	and.w	r3, r3, #7
 800790c:	1c5a      	adds	r2, r3, #1
 800790e:	4613      	mov	r3, r2
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4413      	add	r3, r2
 8007914:	00db      	lsls	r3, r3, #3
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	4413      	add	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2201      	movs	r2, #1
 8007920:	705a      	strb	r2, [r3, #1]
 8007922:	e00e      	b.n	8007942 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007924:	78fb      	ldrb	r3, [r7, #3]
 8007926:	f003 0207 	and.w	r2, r3, #7
 800792a:	4613      	mov	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	00db      	lsls	r3, r3, #3
 8007932:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	4413      	add	r3, r2
 800793a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007942:	78fb      	ldrb	r3, [r7, #3]
 8007944:	f003 0307 	and.w	r3, r3, #7
 8007948:	b2da      	uxtb	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800794e:	883a      	ldrh	r2, [r7, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	78ba      	ldrb	r2, [r7, #2]
 8007958:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800795a:	78bb      	ldrb	r3, [r7, #2]
 800795c:	2b02      	cmp	r3, #2
 800795e:	d102      	bne.n	8007966 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800796c:	2b01      	cmp	r3, #1
 800796e:	d101      	bne.n	8007974 <HAL_PCD_EP_Open+0x94>
 8007970:	2302      	movs	r3, #2
 8007972:	e00e      	b.n	8007992 <HAL_PCD_EP_Open+0xb2>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68f9      	ldr	r1, [r7, #12]
 8007982:	4618      	mov	r0, r3
 8007984:	f003 f8c6 	bl	800ab14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8007990:	7afb      	ldrb	r3, [r7, #11]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b084      	sub	sp, #16
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	460b      	mov	r3, r1
 80079a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80079a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	da0e      	bge.n	80079cc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079ae:	78fb      	ldrb	r3, [r7, #3]
 80079b0:	f003 0307 	and.w	r3, r3, #7
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	4613      	mov	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4413      	add	r3, r2
 80079bc:	00db      	lsls	r3, r3, #3
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	4413      	add	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2201      	movs	r2, #1
 80079c8:	705a      	strb	r2, [r3, #1]
 80079ca:	e00e      	b.n	80079ea <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80079cc:	78fb      	ldrb	r3, [r7, #3]
 80079ce:	f003 0207 	and.w	r2, r3, #7
 80079d2:	4613      	mov	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	00db      	lsls	r3, r3, #3
 80079da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	4413      	add	r3, r2
 80079e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80079ea:	78fb      	ldrb	r3, [r7, #3]
 80079ec:	f003 0307 	and.w	r3, r3, #7
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d101      	bne.n	8007a04 <HAL_PCD_EP_Close+0x6a>
 8007a00:	2302      	movs	r3, #2
 8007a02:	e00e      	b.n	8007a22 <HAL_PCD_EP_Close+0x88>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68f9      	ldr	r1, [r7, #12]
 8007a12:	4618      	mov	r0, r3
 8007a14:	f003 fc3e 	bl	800b294 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b086      	sub	sp, #24
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	60f8      	str	r0, [r7, #12]
 8007a32:	607a      	str	r2, [r7, #4]
 8007a34:	603b      	str	r3, [r7, #0]
 8007a36:	460b      	mov	r3, r1
 8007a38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a3a:	7afb      	ldrb	r3, [r7, #11]
 8007a3c:	f003 0207 	and.w	r2, r3, #7
 8007a40:	4613      	mov	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4413      	add	r3, r2
 8007a46:	00db      	lsls	r3, r3, #3
 8007a48:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	4413      	add	r3, r2
 8007a50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	2200      	movs	r2, #0
 8007a62:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	2200      	movs	r2, #0
 8007a68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a6a:	7afb      	ldrb	r3, [r7, #11]
 8007a6c:	f003 0307 	and.w	r3, r3, #7
 8007a70:	b2da      	uxtb	r2, r3
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6979      	ldr	r1, [r7, #20]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f003 fdf5 	bl	800b66c <USB_EPStartXfer>

  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007a98:	78fb      	ldrb	r3, [r7, #3]
 8007a9a:	f003 0207 	and.w	r2, r3, #7
 8007a9e:	6879      	ldr	r1, [r7, #4]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	00db      	lsls	r3, r3, #3
 8007aa8:	440b      	add	r3, r1
 8007aaa:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8007aae:	681b      	ldr	r3, [r3, #0]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bc80      	pop	{r7}
 8007ab8:	4770      	bx	lr

08007aba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b086      	sub	sp, #24
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	60f8      	str	r0, [r7, #12]
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	603b      	str	r3, [r7, #0]
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007aca:	7afb      	ldrb	r3, [r7, #11]
 8007acc:	f003 0307 	and.w	r3, r3, #7
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	00db      	lsls	r3, r3, #3
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	4413      	add	r3, r2
 8007ade:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2200      	movs	r2, #0
 8007afe:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2201      	movs	r2, #1
 8007b04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b06:	7afb      	ldrb	r3, [r7, #11]
 8007b08:	f003 0307 	and.w	r3, r3, #7
 8007b0c:	b2da      	uxtb	r2, r3
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	6979      	ldr	r1, [r7, #20]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f003 fda7 	bl	800b66c <USB_EPStartXfer>

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3718      	adds	r7, #24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007b34:	78fb      	ldrb	r3, [r7, #3]
 8007b36:	f003 0207 	and.w	r2, r3, #7
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d901      	bls.n	8007b46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e04c      	b.n	8007be0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007b46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	da0e      	bge.n	8007b6c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b4e:	78fb      	ldrb	r3, [r7, #3]
 8007b50:	f003 0307 	and.w	r3, r3, #7
 8007b54:	1c5a      	adds	r2, r3, #1
 8007b56:	4613      	mov	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	4413      	add	r3, r2
 8007b5c:	00db      	lsls	r3, r3, #3
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	4413      	add	r3, r2
 8007b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2201      	movs	r2, #1
 8007b68:	705a      	strb	r2, [r3, #1]
 8007b6a:	e00c      	b.n	8007b86 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007b6c:	78fa      	ldrb	r2, [r7, #3]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	4413      	add	r3, r2
 8007b74:	00db      	lsls	r3, r3, #3
 8007b76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b8c:	78fb      	ldrb	r3, [r7, #3]
 8007b8e:	f003 0307 	and.w	r3, r3, #7
 8007b92:	b2da      	uxtb	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d101      	bne.n	8007ba6 <HAL_PCD_EP_SetStall+0x7e>
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	e01c      	b.n	8007be0 <HAL_PCD_EP_SetStall+0xb8>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68f9      	ldr	r1, [r7, #12]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f005 f90a 	bl	800cdce <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007bba:	78fb      	ldrb	r3, [r7, #3]
 8007bbc:	f003 0307 	and.w	r3, r3, #7
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d108      	bne.n	8007bd6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007bce:	4619      	mov	r1, r3
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	f005 fa2f 	bl	800d034 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007bf4:	78fb      	ldrb	r3, [r7, #3]
 8007bf6:	f003 020f 	and.w	r2, r3, #15
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d901      	bls.n	8007c06 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e040      	b.n	8007c88 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007c06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	da0e      	bge.n	8007c2c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c0e:	78fb      	ldrb	r3, [r7, #3]
 8007c10:	f003 0307 	and.w	r3, r3, #7
 8007c14:	1c5a      	adds	r2, r3, #1
 8007c16:	4613      	mov	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4413      	add	r3, r2
 8007c1c:	00db      	lsls	r3, r3, #3
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	4413      	add	r3, r2
 8007c22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2201      	movs	r2, #1
 8007c28:	705a      	strb	r2, [r3, #1]
 8007c2a:	e00e      	b.n	8007c4a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c2c:	78fb      	ldrb	r3, [r7, #3]
 8007c2e:	f003 0207 	and.w	r2, r3, #7
 8007c32:	4613      	mov	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	00db      	lsls	r3, r3, #3
 8007c3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	4413      	add	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c50:	78fb      	ldrb	r3, [r7, #3]
 8007c52:	f003 0307 	and.w	r3, r3, #7
 8007c56:	b2da      	uxtb	r2, r3
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d101      	bne.n	8007c6a <HAL_PCD_EP_ClrStall+0x82>
 8007c66:	2302      	movs	r3, #2
 8007c68:	e00e      	b.n	8007c88 <HAL_PCD_EP_ClrStall+0xa0>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68f9      	ldr	r1, [r7, #12]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f005 f8f8 	bl	800ce6e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b096      	sub	sp, #88	; 0x58
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007c98:	e3bf      	b.n	800841a <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007ca2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007ca6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	f003 030f 	and.w	r3, r3, #15
 8007cb0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8007cb4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f040 8179 	bne.w	8007fb0 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007cbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007cc2:	f003 0310 	and.w	r3, r3, #16
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d152      	bne.n	8007d70 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	881b      	ldrh	r3, [r3, #0]
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cda:	81fb      	strh	r3, [r7, #14]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	89fb      	ldrh	r3, [r7, #14]
 8007ce2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ce6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	3328      	adds	r3, #40	; 0x28
 8007cf2:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	461a      	mov	r2, r3
 8007d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	00db      	lsls	r3, r3, #3
 8007d06:	4413      	add	r3, r2
 8007d08:	3302      	adds	r3, #2
 8007d0a:	005b      	lsls	r3, r3, #1
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	6812      	ldr	r2, [r2, #0]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d1e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d22:	695a      	ldr	r2, [r3, #20]
 8007d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d26:	69db      	ldr	r3, [r3, #28]
 8007d28:	441a      	add	r2, r3
 8007d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d2c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007d2e:	2100      	movs	r1, #0
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f006 ffe6 	bl	800ed02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f000 836b 	beq.w	800841a <PCD_EP_ISR_Handler+0x78a>
 8007d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f040 8366 	bne.w	800841a <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	b292      	uxth	r2, r2
 8007d62:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007d6e:	e354      	b.n	800841a <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007d76:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	881b      	ldrh	r3, [r3, #0]
 8007d7e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007d82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d034      	beq.n	8007df8 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	461a      	mov	r2, r3
 8007d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	00db      	lsls	r3, r3, #3
 8007da0:	4413      	add	r3, r2
 8007da2:	3306      	adds	r3, #6
 8007da4:	005b      	lsls	r3, r3, #1
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	6812      	ldr	r2, [r2, #0]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007db8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6818      	ldr	r0, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8007dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dc6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dca:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	f005 f981 	bl	800d0d4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	881b      	ldrh	r3, [r3, #0]
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007dde:	4013      	ands	r3, r2
 8007de0:	823b      	strh	r3, [r7, #16]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	8a3a      	ldrh	r2, [r7, #16]
 8007de8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007dec:	b292      	uxth	r2, r2
 8007dee:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f006 ff59 	bl	800eca8 <HAL_PCD_SetupStageCallback>
 8007df6:	e310      	b.n	800841a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007df8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f280 830c 	bge.w	800841a <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007e0e:	4013      	ands	r3, r2
 8007e10:	83fb      	strh	r3, [r7, #30]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	8bfa      	ldrh	r2, [r7, #30]
 8007e18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e1c:	b292      	uxth	r2, r2
 8007e1e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	00db      	lsls	r3, r3, #3
 8007e32:	4413      	add	r3, r2
 8007e34:	3306      	adds	r3, #6
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	6812      	ldr	r2, [r2, #0]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e4a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e4e:	69db      	ldr	r3, [r3, #28]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d019      	beq.n	8007e88 <PCD_EP_ISR_Handler+0x1f8>
 8007e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d015      	beq.n	8007e88 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6818      	ldr	r0, [r3, #0]
 8007e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e62:	6959      	ldr	r1, [r3, #20]
 8007e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e66:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e6a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	f005 f931 	bl	800d0d4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e74:	695a      	ldr	r2, [r3, #20]
 8007e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e78:	69db      	ldr	r3, [r3, #28]
 8007e7a:	441a      	add	r2, r3
 8007e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e7e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007e80:	2100      	movs	r1, #0
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f006 ff22 	bl	800eccc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007e92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f040 82bd 	bne.w	800841a <PCD_EP_ISR_Handler+0x78a>
 8007ea0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007ea4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007ea8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007eac:	f000 82b5 	beq.w	800841a <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	61bb      	str	r3, [r7, #24]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	61bb      	str	r3, [r7, #24]
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ece:	617b      	str	r3, [r7, #20]
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	801a      	strh	r2, [r3, #0]
 8007ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	2b3e      	cmp	r3, #62	; 0x3e
 8007ee6:	d91d      	bls.n	8007f24 <PCD_EP_ISR_Handler+0x294>
 8007ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	095b      	lsrs	r3, r3, #5
 8007eee:	647b      	str	r3, [r7, #68]	; 0x44
 8007ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	f003 031f 	and.w	r3, r3, #31
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d102      	bne.n	8007f02 <PCD_EP_ISR_Handler+0x272>
 8007efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007efe:	3b01      	subs	r3, #1
 8007f00:	647b      	str	r3, [r7, #68]	; 0x44
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	881b      	ldrh	r3, [r3, #0]
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	029b      	lsls	r3, r3, #10
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	4313      	orrs	r3, r2
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	801a      	strh	r2, [r3, #0]
 8007f22:	e026      	b.n	8007f72 <PCD_EP_ISR_Handler+0x2e2>
 8007f24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10a      	bne.n	8007f42 <PCD_EP_ISR_Handler+0x2b2>
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	881b      	ldrh	r3, [r3, #0]
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	801a      	strh	r2, [r3, #0]
 8007f40:	e017      	b.n	8007f72 <PCD_EP_ISR_Handler+0x2e2>
 8007f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	085b      	lsrs	r3, r3, #1
 8007f48:	647b      	str	r3, [r7, #68]	; 0x44
 8007f4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d002      	beq.n	8007f5c <PCD_EP_ISR_Handler+0x2cc>
 8007f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f58:	3301      	adds	r3, #1
 8007f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	881b      	ldrh	r3, [r3, #0]
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	029b      	lsls	r3, r3, #10
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	881b      	ldrh	r3, [r3, #0]
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f82:	827b      	strh	r3, [r7, #18]
 8007f84:	8a7b      	ldrh	r3, [r7, #18]
 8007f86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007f8a:	827b      	strh	r3, [r7, #18]
 8007f8c:	8a7b      	ldrh	r3, [r7, #18]
 8007f8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007f92:	827b      	strh	r3, [r7, #18]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	8a7b      	ldrh	r3, [r7, #18]
 8007f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	8013      	strh	r3, [r2, #0]
 8007fae:	e234      	b.n	800841a <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	4413      	add	r3, r2
 8007fbe:	881b      	ldrh	r3, [r3, #0]
 8007fc0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007fc4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f280 80fc 	bge.w	80081c6 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	881b      	ldrh	r3, [r3, #0]
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	461a      	mov	r2, r3
 8007ff0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4413      	add	r3, r2
 8007ff8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007ffc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008000:	b292      	uxth	r2, r2
 8008002:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8008004:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8008008:	4613      	mov	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4413      	add	r3, r2
 800800e:	00db      	lsls	r3, r3, #3
 8008010:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	4413      	add	r3, r2
 8008018:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800801a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800801c:	7b1b      	ldrb	r3, [r3, #12]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d125      	bne.n	800806e <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800802a:	b29b      	uxth	r3, r3
 800802c:	461a      	mov	r2, r3
 800802e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	00db      	lsls	r3, r3, #3
 8008034:	4413      	add	r3, r2
 8008036:	3306      	adds	r3, #6
 8008038:	005b      	lsls	r3, r3, #1
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	6812      	ldr	r2, [r2, #0]
 800803e:	4413      	add	r3, r2
 8008040:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800804a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800804e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 8092 	beq.w	800817c <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6818      	ldr	r0, [r3, #0]
 800805c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800805e:	6959      	ldr	r1, [r3, #20]
 8008060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008062:	88da      	ldrh	r2, [r3, #6]
 8008064:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008068:	f005 f834 	bl	800d0d4 <USB_ReadPMA>
 800806c:	e086      	b.n	800817c <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800806e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008070:	78db      	ldrb	r3, [r3, #3]
 8008072:	2b02      	cmp	r3, #2
 8008074:	d10a      	bne.n	800808c <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8008076:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800807a:	461a      	mov	r2, r3
 800807c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f9d9 	bl	8008436 <HAL_PCD_EP_DB_Receive>
 8008084:	4603      	mov	r3, r0
 8008086:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800808a:	e077      	b.n	800817c <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	461a      	mov	r2, r3
 8008092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	b29b      	uxth	r3, r3
 800809e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	461a      	mov	r2, r3
 80080b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	441a      	add	r2, r3
 80080b8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80080bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	461a      	mov	r2, r3
 80080d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d024      	beq.n	8008134 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	461a      	mov	r2, r3
 80080f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	00db      	lsls	r3, r3, #3
 80080fc:	4413      	add	r3, r2
 80080fe:	3302      	adds	r3, #2
 8008100:	005b      	lsls	r3, r3, #1
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	6812      	ldr	r2, [r2, #0]
 8008106:	4413      	add	r3, r2
 8008108:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008112:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8008116:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800811a:	2b00      	cmp	r3, #0
 800811c:	d02e      	beq.n	800817c <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6818      	ldr	r0, [r3, #0]
 8008122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008124:	6959      	ldr	r1, [r3, #20]
 8008126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008128:	891a      	ldrh	r2, [r3, #8]
 800812a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800812e:	f004 ffd1 	bl	800d0d4 <USB_ReadPMA>
 8008132:	e023      	b.n	800817c <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800813c:	b29b      	uxth	r3, r3
 800813e:	461a      	mov	r2, r3
 8008140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	00db      	lsls	r3, r3, #3
 8008146:	4413      	add	r3, r2
 8008148:	3306      	adds	r3, #6
 800814a:	005b      	lsls	r3, r3, #1
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	6812      	ldr	r2, [r2, #0]
 8008150:	4413      	add	r3, r2
 8008152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008156:	881b      	ldrh	r3, [r3, #0]
 8008158:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800815c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8008160:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008164:	2b00      	cmp	r3, #0
 8008166:	d009      	beq.n	800817c <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6818      	ldr	r0, [r3, #0]
 800816c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800816e:	6959      	ldr	r1, [r3, #20]
 8008170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008172:	895a      	ldrh	r2, [r3, #10]
 8008174:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008178:	f004 ffac 	bl	800d0d4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800817c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800817e:	69da      	ldr	r2, [r3, #28]
 8008180:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008184:	441a      	add	r2, r3
 8008186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008188:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800818a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800818c:	695a      	ldr	r2, [r3, #20]
 800818e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8008192:	441a      	add	r2, r3
 8008194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008196:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8008198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d005      	beq.n	80081ac <PCD_EP_ISR_Handler+0x51c>
 80081a0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80081a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d206      	bcs.n	80081ba <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80081ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	4619      	mov	r1, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f006 fd8a 	bl	800eccc <HAL_PCD_DataOutStageCallback>
 80081b8:	e005      	b.n	80081c6 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081c0:	4618      	mov	r0, r3
 80081c2:	f003 fa53 	bl	800b66c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80081c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80081ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f000 8123 	beq.w	800841a <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 80081d4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80081d8:	1c5a      	adds	r2, r3, #1
 80081da:	4613      	mov	r3, r2
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	4413      	add	r3, r2
 80081e0:	00db      	lsls	r3, r3, #3
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	4413      	add	r3, r2
 80081e6:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	461a      	mov	r2, r3
 80081ee:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80081fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008202:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	461a      	mov	r2, r3
 800820c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	441a      	add	r2, r3
 8008214:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800821c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008220:	b29b      	uxth	r3, r3
 8008222:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8008224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008226:	78db      	ldrb	r3, [r3, #3]
 8008228:	2b01      	cmp	r3, #1
 800822a:	f040 80a2 	bne.w	8008372 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 800822e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008230:	2200      	movs	r2, #0
 8008232:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8008234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008236:	7b1b      	ldrb	r3, [r3, #12]
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 8093 	beq.w	8008364 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800823e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008246:	2b00      	cmp	r3, #0
 8008248:	d046      	beq.n	80082d8 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800824a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800824c:	785b      	ldrb	r3, [r3, #1]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d126      	bne.n	80082a0 <PCD_EP_ISR_Handler+0x610>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	627b      	str	r3, [r7, #36]	; 0x24
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008260:	b29b      	uxth	r3, r3
 8008262:	461a      	mov	r2, r3
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	4413      	add	r3, r2
 8008268:	627b      	str	r3, [r7, #36]	; 0x24
 800826a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	011a      	lsls	r2, r3, #4
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	4413      	add	r3, r2
 8008274:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008278:	623b      	str	r3, [r7, #32]
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	881b      	ldrh	r3, [r3, #0]
 800827e:	b29b      	uxth	r3, r3
 8008280:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008284:	b29a      	uxth	r2, r3
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	801a      	strh	r2, [r3, #0]
 800828a:	6a3b      	ldr	r3, [r7, #32]
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	b29b      	uxth	r3, r3
 8008290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008298:	b29a      	uxth	r2, r3
 800829a:	6a3b      	ldr	r3, [r7, #32]
 800829c:	801a      	strh	r2, [r3, #0]
 800829e:	e061      	b.n	8008364 <PCD_EP_ISR_Handler+0x6d4>
 80082a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082a2:	785b      	ldrb	r3, [r3, #1]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d15d      	bne.n	8008364 <PCD_EP_ISR_Handler+0x6d4>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	461a      	mov	r2, r3
 80082ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082bc:	4413      	add	r3, r2
 80082be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	011a      	lsls	r2, r3, #4
 80082c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c8:	4413      	add	r3, r2
 80082ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80082d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d2:	2200      	movs	r2, #0
 80082d4:	801a      	strh	r2, [r3, #0]
 80082d6:	e045      	b.n	8008364 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082e0:	785b      	ldrb	r3, [r3, #1]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d126      	bne.n	8008334 <PCD_EP_ISR_Handler+0x6a4>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	637b      	str	r3, [r7, #52]	; 0x34
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	461a      	mov	r2, r3
 80082f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fa:	4413      	add	r3, r2
 80082fc:	637b      	str	r3, [r7, #52]	; 0x34
 80082fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	011a      	lsls	r2, r3, #4
 8008304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008306:	4413      	add	r3, r2
 8008308:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800830c:	633b      	str	r3, [r7, #48]	; 0x30
 800830e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008310:	881b      	ldrh	r3, [r3, #0]
 8008312:	b29b      	uxth	r3, r3
 8008314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008318:	b29a      	uxth	r2, r3
 800831a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831c:	801a      	strh	r2, [r3, #0]
 800831e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008320:	881b      	ldrh	r3, [r3, #0]
 8008322:	b29b      	uxth	r3, r3
 8008324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800832c:	b29a      	uxth	r2, r3
 800832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008330:	801a      	strh	r2, [r3, #0]
 8008332:	e017      	b.n	8008364 <PCD_EP_ISR_Handler+0x6d4>
 8008334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008336:	785b      	ldrb	r3, [r3, #1]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d113      	bne.n	8008364 <PCD_EP_ISR_Handler+0x6d4>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008344:	b29b      	uxth	r3, r3
 8008346:	461a      	mov	r2, r3
 8008348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800834a:	4413      	add	r3, r2
 800834c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800834e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	011a      	lsls	r2, r3, #4
 8008354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008356:	4413      	add	r3, r2
 8008358:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800835c:	63bb      	str	r3, [r7, #56]	; 0x38
 800835e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008360:	2200      	movs	r2, #0
 8008362:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	4619      	mov	r1, r3
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f006 fcc9 	bl	800ed02 <HAL_PCD_DataInStageCallback>
 8008370:	e053      	b.n	800841a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8008372:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800837a:	2b00      	cmp	r3, #0
 800837c:	d146      	bne.n	800840c <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008386:	b29b      	uxth	r3, r3
 8008388:	461a      	mov	r2, r3
 800838a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	00db      	lsls	r3, r3, #3
 8008390:	4413      	add	r3, r2
 8008392:	3302      	adds	r3, #2
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	6812      	ldr	r2, [r2, #0]
 800839a:	4413      	add	r3, r2
 800839c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80083aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083ac:	699a      	ldr	r2, [r3, #24]
 80083ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d907      	bls.n	80083c6 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 80083b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083b8:	699a      	ldr	r2, [r3, #24]
 80083ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80083be:	1ad2      	subs	r2, r2, r3
 80083c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083c2:	619a      	str	r2, [r3, #24]
 80083c4:	e002      	b.n	80083cc <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 80083c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083c8:	2200      	movs	r2, #0
 80083ca:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80083cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d106      	bne.n	80083e2 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80083d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	4619      	mov	r1, r3
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f006 fc91 	bl	800ed02 <HAL_PCD_DataInStageCallback>
 80083e0:	e01b      	b.n	800841a <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80083e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083e4:	695a      	ldr	r2, [r3, #20]
 80083e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80083ea:	441a      	add	r2, r3
 80083ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083ee:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80083f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083f2:	69da      	ldr	r2, [r3, #28]
 80083f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80083f8:	441a      	add	r2, r3
 80083fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083fc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008404:	4618      	mov	r0, r3
 8008406:	f003 f931 	bl	800b66c <USB_EPStartXfer>
 800840a:	e006      	b.n	800841a <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800840c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008410:	461a      	mov	r2, r3
 8008412:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f91b 	bl	8008650 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008422:	b29b      	uxth	r3, r3
 8008424:	b21b      	sxth	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	f6ff ac37 	blt.w	8007c9a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3758      	adds	r7, #88	; 0x58
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b088      	sub	sp, #32
 800843a:	af00      	add	r7, sp, #0
 800843c:	60f8      	str	r0, [r7, #12]
 800843e:	60b9      	str	r1, [r7, #8]
 8008440:	4613      	mov	r3, r2
 8008442:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008444:	88fb      	ldrh	r3, [r7, #6]
 8008446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800844a:	2b00      	cmp	r3, #0
 800844c:	d07e      	beq.n	800854c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008456:	b29b      	uxth	r3, r3
 8008458:	461a      	mov	r2, r3
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	00db      	lsls	r3, r3, #3
 8008460:	4413      	add	r3, r2
 8008462:	3302      	adds	r3, #2
 8008464:	005b      	lsls	r3, r3, #1
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	6812      	ldr	r2, [r2, #0]
 800846a:	4413      	add	r3, r2
 800846c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008470:	881b      	ldrh	r3, [r3, #0]
 8008472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008476:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	699a      	ldr	r2, [r3, #24]
 800847c:	8b7b      	ldrh	r3, [r7, #26]
 800847e:	429a      	cmp	r2, r3
 8008480:	d306      	bcc.n	8008490 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	699a      	ldr	r2, [r3, #24]
 8008486:	8b7b      	ldrh	r3, [r7, #26]
 8008488:	1ad2      	subs	r2, r2, r3
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	619a      	str	r2, [r3, #24]
 800848e:	e002      	b.n	8008496 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2200      	movs	r2, #0
 8008494:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d123      	bne.n	80084e6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	461a      	mov	r2, r3
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	4413      	add	r3, r2
 80084ac:	881b      	ldrh	r3, [r3, #0]
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084b8:	833b      	strh	r3, [r7, #24]
 80084ba:	8b3b      	ldrh	r3, [r7, #24]
 80084bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80084c0:	833b      	strh	r3, [r7, #24]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	461a      	mov	r2, r3
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	441a      	add	r2, r3
 80084d0:	8b3b      	ldrh	r3, [r7, #24]
 80084d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80084e6:	88fb      	ldrh	r3, [r7, #6]
 80084e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d01f      	beq.n	8008530 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	461a      	mov	r2, r3
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	b29b      	uxth	r3, r3
 8008502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800850a:	82fb      	strh	r3, [r7, #22]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	461a      	mov	r2, r3
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	441a      	add	r2, r3
 800851a:	8afb      	ldrh	r3, [r7, #22]
 800851c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008528:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800852c:	b29b      	uxth	r3, r3
 800852e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008530:	8b7b      	ldrh	r3, [r7, #26]
 8008532:	2b00      	cmp	r3, #0
 8008534:	f000 8087 	beq.w	8008646 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6818      	ldr	r0, [r3, #0]
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	6959      	ldr	r1, [r3, #20]
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	891a      	ldrh	r2, [r3, #8]
 8008544:	8b7b      	ldrh	r3, [r7, #26]
 8008546:	f004 fdc5 	bl	800d0d4 <USB_ReadPMA>
 800854a:	e07c      	b.n	8008646 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008554:	b29b      	uxth	r3, r3
 8008556:	461a      	mov	r2, r3
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	00db      	lsls	r3, r3, #3
 800855e:	4413      	add	r3, r2
 8008560:	3306      	adds	r3, #6
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	6812      	ldr	r2, [r2, #0]
 8008568:	4413      	add	r3, r2
 800856a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800856e:	881b      	ldrh	r3, [r3, #0]
 8008570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008574:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	699a      	ldr	r2, [r3, #24]
 800857a:	8b7b      	ldrh	r3, [r7, #26]
 800857c:	429a      	cmp	r2, r3
 800857e:	d306      	bcc.n	800858e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	699a      	ldr	r2, [r3, #24]
 8008584:	8b7b      	ldrh	r3, [r7, #26]
 8008586:	1ad2      	subs	r2, r2, r3
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	619a      	str	r2, [r3, #24]
 800858c:	e002      	b.n	8008594 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	2200      	movs	r2, #0
 8008592:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d123      	bne.n	80085e4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	461a      	mov	r2, r3
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4413      	add	r3, r2
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b6:	83fb      	strh	r3, [r7, #30]
 80085b8:	8bfb      	ldrh	r3, [r7, #30]
 80085ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80085be:	83fb      	strh	r3, [r7, #30]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	461a      	mov	r2, r3
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	441a      	add	r2, r3
 80085ce:	8bfb      	ldrh	r3, [r7, #30]
 80085d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80085e4:	88fb      	ldrh	r3, [r7, #6]
 80085e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d11f      	bne.n	800862e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	461a      	mov	r2, r3
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	b29b      	uxth	r3, r3
 8008600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008608:	83bb      	strh	r3, [r7, #28]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	461a      	mov	r2, r3
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	441a      	add	r2, r3
 8008618:	8bbb      	ldrh	r3, [r7, #28]
 800861a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800861e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008626:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800862a:	b29b      	uxth	r3, r3
 800862c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800862e:	8b7b      	ldrh	r3, [r7, #26]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d008      	beq.n	8008646 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6818      	ldr	r0, [r3, #0]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	6959      	ldr	r1, [r3, #20]
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	895a      	ldrh	r2, [r3, #10]
 8008640:	8b7b      	ldrh	r3, [r7, #26]
 8008642:	f004 fd47 	bl	800d0d4 <USB_ReadPMA>
    }
  }

  return count;
 8008646:	8b7b      	ldrh	r3, [r7, #26]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3720      	adds	r7, #32
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b0a4      	sub	sp, #144	; 0x90
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	4613      	mov	r3, r2
 800865c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800865e:	88fb      	ldrh	r3, [r7, #6]
 8008660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 81dd 	beq.w	8008a24 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008672:	b29b      	uxth	r3, r3
 8008674:	461a      	mov	r2, r3
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	00db      	lsls	r3, r3, #3
 800867c:	4413      	add	r3, r2
 800867e:	3302      	adds	r3, #2
 8008680:	005b      	lsls	r3, r3, #1
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	6812      	ldr	r2, [r2, #0]
 8008686:	4413      	add	r3, r2
 8008688:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008692:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	699a      	ldr	r2, [r3, #24]
 800869a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800869e:	429a      	cmp	r2, r3
 80086a0:	d907      	bls.n	80086b2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	699a      	ldr	r2, [r3, #24]
 80086a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80086aa:	1ad2      	subs	r2, r2, r3
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	619a      	str	r2, [r3, #24]
 80086b0:	e002      	b.n	80086b8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2200      	movs	r2, #0
 80086b6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f040 80b9 	bne.w	8008834 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	785b      	ldrb	r3, [r3, #1]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d126      	bne.n	8008718 <HAL_PCD_EP_DB_Transmit+0xc8>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086d8:	b29b      	uxth	r3, r3
 80086da:	461a      	mov	r2, r3
 80086dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086de:	4413      	add	r3, r2
 80086e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	011a      	lsls	r2, r3, #4
 80086e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ea:	4413      	add	r3, r2
 80086ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80086f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80086f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f4:	881b      	ldrh	r3, [r3, #0]
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008700:	801a      	strh	r2, [r3, #0]
 8008702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008704:	881b      	ldrh	r3, [r3, #0]
 8008706:	b29b      	uxth	r3, r3
 8008708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800870c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008710:	b29a      	uxth	r2, r3
 8008712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008714:	801a      	strh	r2, [r3, #0]
 8008716:	e01a      	b.n	800874e <HAL_PCD_EP_DB_Transmit+0xfe>
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	785b      	ldrb	r3, [r3, #1]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d116      	bne.n	800874e <HAL_PCD_EP_DB_Transmit+0xfe>
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	637b      	str	r3, [r7, #52]	; 0x34
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800872e:	b29b      	uxth	r3, r3
 8008730:	461a      	mov	r2, r3
 8008732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008734:	4413      	add	r3, r2
 8008736:	637b      	str	r3, [r7, #52]	; 0x34
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	011a      	lsls	r2, r3, #4
 800873e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008740:	4413      	add	r3, r2
 8008742:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008746:	633b      	str	r3, [r7, #48]	; 0x30
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	2200      	movs	r2, #0
 800874c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	627b      	str	r3, [r7, #36]	; 0x24
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	785b      	ldrb	r3, [r3, #1]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d126      	bne.n	80087aa <HAL_PCD_EP_DB_Transmit+0x15a>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	61fb      	str	r3, [r7, #28]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800876a:	b29b      	uxth	r3, r3
 800876c:	461a      	mov	r2, r3
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	4413      	add	r3, r2
 8008772:	61fb      	str	r3, [r7, #28]
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	011a      	lsls	r2, r3, #4
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	4413      	add	r3, r2
 800877e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008782:	61bb      	str	r3, [r7, #24]
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	b29b      	uxth	r3, r3
 800878a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800878e:	b29a      	uxth	r2, r3
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	801a      	strh	r2, [r3, #0]
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	b29b      	uxth	r3, r3
 800879a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800879e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	801a      	strh	r2, [r3, #0]
 80087a8:	e017      	b.n	80087da <HAL_PCD_EP_DB_Transmit+0x18a>
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	785b      	ldrb	r3, [r3, #1]
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d113      	bne.n	80087da <HAL_PCD_EP_DB_Transmit+0x18a>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	461a      	mov	r2, r3
 80087be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c0:	4413      	add	r3, r2
 80087c2:	627b      	str	r3, [r7, #36]	; 0x24
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	011a      	lsls	r2, r3, #4
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	4413      	add	r3, r2
 80087ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80087d2:	623b      	str	r3, [r7, #32]
 80087d4:	6a3b      	ldr	r3, [r7, #32]
 80087d6:	2200      	movs	r2, #0
 80087d8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	4619      	mov	r1, r3
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f006 fa8e 	bl	800ed02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80087e6:	88fb      	ldrh	r3, [r7, #6]
 80087e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f000 82fc 	beq.w	8008dea <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	b29b      	uxth	r3, r3
 8008804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800880c:	82fb      	strh	r3, [r7, #22]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	441a      	add	r2, r3
 800881c:	8afb      	ldrh	r3, [r7, #22]
 800881e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008826:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800882a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800882e:	b29b      	uxth	r3, r3
 8008830:	8013      	strh	r3, [r2, #0]
 8008832:	e2da      	b.n	8008dea <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008834:	88fb      	ldrh	r3, [r7, #6]
 8008836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800883a:	2b00      	cmp	r3, #0
 800883c:	d021      	beq.n	8008882 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	461a      	mov	r2, r3
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	881b      	ldrh	r3, [r3, #0]
 800884e:	b29b      	uxth	r3, r3
 8008850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008858:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	461a      	mov	r2, r3
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	441a      	add	r2, r3
 800886a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800886e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008876:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800887a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800887e:	b29b      	uxth	r3, r3
 8008880:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008888:	2b01      	cmp	r3, #1
 800888a:	f040 82ae 	bne.w	8008dea <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	695a      	ldr	r2, [r3, #20]
 8008892:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008896:	441a      	add	r2, r3
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	69da      	ldr	r2, [r3, #28]
 80088a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80088a4:	441a      	add	r2, r3
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	6a1a      	ldr	r2, [r3, #32]
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d30b      	bcc.n	80088ce <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	6a1a      	ldr	r2, [r3, #32]
 80088c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088c6:	1ad2      	subs	r2, r2, r3
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	621a      	str	r2, [r3, #32]
 80088cc:	e017      	b.n	80088fe <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d108      	bne.n	80088e8 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80088d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80088da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80088e6:	e00a      	b.n	80088fe <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	6a1b      	ldr	r3, [r3, #32]
 80088f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	2200      	movs	r2, #0
 80088fc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	785b      	ldrb	r3, [r3, #1]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d165      	bne.n	80089d2 <HAL_PCD_EP_DB_Transmit+0x382>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008914:	b29b      	uxth	r3, r3
 8008916:	461a      	mov	r2, r3
 8008918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800891a:	4413      	add	r3, r2
 800891c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	011a      	lsls	r2, r3, #4
 8008924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008926:	4413      	add	r3, r2
 8008928:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800892c:	63bb      	str	r3, [r7, #56]	; 0x38
 800892e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008930:	881b      	ldrh	r3, [r3, #0]
 8008932:	b29b      	uxth	r3, r3
 8008934:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008938:	b29a      	uxth	r2, r3
 800893a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893c:	801a      	strh	r2, [r3, #0]
 800893e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008942:	2b3e      	cmp	r3, #62	; 0x3e
 8008944:	d91d      	bls.n	8008982 <HAL_PCD_EP_DB_Transmit+0x332>
 8008946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800894a:	095b      	lsrs	r3, r3, #5
 800894c:	64bb      	str	r3, [r7, #72]	; 0x48
 800894e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008952:	f003 031f 	and.w	r3, r3, #31
 8008956:	2b00      	cmp	r3, #0
 8008958:	d102      	bne.n	8008960 <HAL_PCD_EP_DB_Transmit+0x310>
 800895a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800895c:	3b01      	subs	r3, #1
 800895e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008962:	881b      	ldrh	r3, [r3, #0]
 8008964:	b29a      	uxth	r2, r3
 8008966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008968:	b29b      	uxth	r3, r3
 800896a:	029b      	lsls	r3, r3, #10
 800896c:	b29b      	uxth	r3, r3
 800896e:	4313      	orrs	r3, r2
 8008970:	b29b      	uxth	r3, r3
 8008972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800897a:	b29a      	uxth	r2, r3
 800897c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897e:	801a      	strh	r2, [r3, #0]
 8008980:	e044      	b.n	8008a0c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8008982:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10a      	bne.n	80089a0 <HAL_PCD_EP_DB_Transmit+0x350>
 800898a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	b29b      	uxth	r3, r3
 8008990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008998:	b29a      	uxth	r2, r3
 800899a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899c:	801a      	strh	r2, [r3, #0]
 800899e:	e035      	b.n	8008a0c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80089a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089a4:	085b      	lsrs	r3, r3, #1
 80089a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80089a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089ac:	f003 0301 	and.w	r3, r3, #1
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <HAL_PCD_EP_DB_Transmit+0x36a>
 80089b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089b6:	3301      	adds	r3, #1
 80089b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80089ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089bc:	881b      	ldrh	r3, [r3, #0]
 80089be:	b29a      	uxth	r2, r3
 80089c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	029b      	lsls	r3, r3, #10
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	4313      	orrs	r3, r2
 80089ca:	b29a      	uxth	r2, r3
 80089cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ce:	801a      	strh	r2, [r3, #0]
 80089d0:	e01c      	b.n	8008a0c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	785b      	ldrb	r3, [r3, #1]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d118      	bne.n	8008a0c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	647b      	str	r3, [r7, #68]	; 0x44
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	461a      	mov	r2, r3
 80089ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ee:	4413      	add	r3, r2
 80089f0:	647b      	str	r3, [r7, #68]	; 0x44
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	011a      	lsls	r2, r3, #4
 80089f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089fa:	4413      	add	r3, r2
 80089fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a00:	643b      	str	r3, [r7, #64]	; 0x40
 8008a02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a0a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6818      	ldr	r0, [r3, #0]
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	6959      	ldr	r1, [r3, #20]
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	891a      	ldrh	r2, [r3, #8]
 8008a18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	f004 fb14 	bl	800d04a <USB_WritePMA>
 8008a22:	e1e2      	b.n	8008dea <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	461a      	mov	r2, r3
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	00db      	lsls	r3, r3, #3
 8008a36:	4413      	add	r3, r2
 8008a38:	3306      	adds	r3, #6
 8008a3a:	005b      	lsls	r3, r3, #1
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	6812      	ldr	r2, [r2, #0]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a46:	881b      	ldrh	r3, [r3, #0]
 8008a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a4c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	699a      	ldr	r2, [r3, #24]
 8008a54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d307      	bcc.n	8008a6c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	699a      	ldr	r2, [r3, #24]
 8008a60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008a64:	1ad2      	subs	r2, r2, r3
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	619a      	str	r2, [r3, #24]
 8008a6a:	e002      	b.n	8008a72 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f040 80c0 	bne.w	8008bfc <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	785b      	ldrb	r3, [r3, #1]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d126      	bne.n	8008ad2 <HAL_PCD_EP_DB_Transmit+0x482>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	461a      	mov	r2, r3
 8008a96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a98:	4413      	add	r3, r2
 8008a9a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	011a      	lsls	r2, r3, #4
 8008aa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008aaa:	67bb      	str	r3, [r7, #120]	; 0x78
 8008aac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008aae:	881b      	ldrh	r3, [r3, #0]
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008aba:	801a      	strh	r2, [r3, #0]
 8008abc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008abe:	881b      	ldrh	r3, [r3, #0]
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ac6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ace:	801a      	strh	r2, [r3, #0]
 8008ad0:	e01a      	b.n	8008b08 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	785b      	ldrb	r3, [r3, #1]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d116      	bne.n	8008b08 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	667b      	str	r3, [r7, #100]	; 0x64
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	461a      	mov	r2, r3
 8008aec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008aee:	4413      	add	r3, r2
 8008af0:	667b      	str	r3, [r7, #100]	; 0x64
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	011a      	lsls	r2, r3, #4
 8008af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008afa:	4413      	add	r3, r2
 8008afc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b00:	663b      	str	r3, [r7, #96]	; 0x60
 8008b02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b04:	2200      	movs	r2, #0
 8008b06:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	677b      	str	r3, [r7, #116]	; 0x74
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	785b      	ldrb	r3, [r3, #1]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d12b      	bne.n	8008b6e <HAL_PCD_EP_DB_Transmit+0x51e>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	461a      	mov	r2, r3
 8008b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b2a:	4413      	add	r3, r2
 8008b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	011a      	lsls	r2, r3, #4
 8008b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b36:	4413      	add	r3, r2
 8008b38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b44:	881b      	ldrh	r3, [r3, #0]
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b52:	801a      	strh	r2, [r3, #0]
 8008b54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b58:	881b      	ldrh	r3, [r3, #0]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b6a:	801a      	strh	r2, [r3, #0]
 8008b6c:	e017      	b.n	8008b9e <HAL_PCD_EP_DB_Transmit+0x54e>
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	785b      	ldrb	r3, [r3, #1]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d113      	bne.n	8008b9e <HAL_PCD_EP_DB_Transmit+0x54e>
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	461a      	mov	r2, r3
 8008b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b84:	4413      	add	r3, r2
 8008b86:	677b      	str	r3, [r7, #116]	; 0x74
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	011a      	lsls	r2, r3, #4
 8008b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b90:	4413      	add	r3, r2
 8008b92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b96:	673b      	str	r3, [r7, #112]	; 0x70
 8008b98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f006 f8ac 	bl	800ed02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008baa:	88fb      	ldrh	r3, [r7, #6]
 8008bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f040 811a 	bne.w	8008dea <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	461a      	mov	r2, r3
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	881b      	ldrh	r3, [r3, #0]
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bd0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	461a      	mov	r2, r3
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	441a      	add	r2, r3
 8008be2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8008be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	8013      	strh	r3, [r2, #0]
 8008bfa:	e0f6      	b.n	8008dea <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008bfc:	88fb      	ldrh	r3, [r7, #6]
 8008bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d121      	bne.n	8008c4a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	881b      	ldrh	r3, [r3, #0]
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c20:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	461a      	mov	r2, r3
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	441a      	add	r2, r3
 8008c32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	f040 80ca 	bne.w	8008dea <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	695a      	ldr	r2, [r3, #20]
 8008c5a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008c5e:	441a      	add	r2, r3
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	69da      	ldr	r2, [r3, #28]
 8008c68:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008c6c:	441a      	add	r2, r3
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	6a1a      	ldr	r2, [r3, #32]
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d30b      	bcc.n	8008c96 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	6a1a      	ldr	r2, [r3, #32]
 8008c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c8e:	1ad2      	subs	r2, r2, r3
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	621a      	str	r2, [r3, #32]
 8008c94:	e017      	b.n	8008cc6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	6a1b      	ldr	r3, [r3, #32]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d108      	bne.n	8008cb0 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8008c9e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008ca2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008cae:	e00a      	b.n	8008cc6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	6a1b      	ldr	r3, [r3, #32]
 8008cb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	657b      	str	r3, [r7, #84]	; 0x54
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	785b      	ldrb	r3, [r3, #1]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d165      	bne.n	8008da0 <HAL_PCD_EP_DB_Transmit+0x750>
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ce8:	4413      	add	r3, r2
 8008cea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	011a      	lsls	r2, r3, #4
 8008cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008cfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8008cfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cfe:	881b      	ldrh	r3, [r3, #0]
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d0a:	801a      	strh	r2, [r3, #0]
 8008d0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d10:	2b3e      	cmp	r3, #62	; 0x3e
 8008d12:	d91d      	bls.n	8008d50 <HAL_PCD_EP_DB_Transmit+0x700>
 8008d14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d18:	095b      	lsrs	r3, r3, #5
 8008d1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d20:	f003 031f 	and.w	r3, r3, #31
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d102      	bne.n	8008d2e <HAL_PCD_EP_DB_Transmit+0x6de>
 8008d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d30:	881b      	ldrh	r3, [r3, #0]
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	029b      	lsls	r3, r3, #10
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d4c:	801a      	strh	r2, [r3, #0]
 8008d4e:	e041      	b.n	8008dd4 <HAL_PCD_EP_DB_Transmit+0x784>
 8008d50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10a      	bne.n	8008d6e <HAL_PCD_EP_DB_Transmit+0x71e>
 8008d58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d5a:	881b      	ldrh	r3, [r3, #0]
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d6a:	801a      	strh	r2, [r3, #0]
 8008d6c:	e032      	b.n	8008dd4 <HAL_PCD_EP_DB_Transmit+0x784>
 8008d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d72:	085b      	lsrs	r3, r3, #1
 8008d74:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <HAL_PCD_EP_DB_Transmit+0x738>
 8008d82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d84:	3301      	adds	r3, #1
 8008d86:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d8a:	881b      	ldrh	r3, [r3, #0]
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	029b      	lsls	r3, r3, #10
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	4313      	orrs	r3, r2
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d9c:	801a      	strh	r2, [r3, #0]
 8008d9e:	e019      	b.n	8008dd4 <HAL_PCD_EP_DB_Transmit+0x784>
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	785b      	ldrb	r3, [r3, #1]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d115      	bne.n	8008dd4 <HAL_PCD_EP_DB_Transmit+0x784>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	461a      	mov	r2, r3
 8008db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008db6:	4413      	add	r3, r2
 8008db8:	657b      	str	r3, [r7, #84]	; 0x54
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	011a      	lsls	r2, r3, #4
 8008dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008dc8:	653b      	str	r3, [r7, #80]	; 0x50
 8008dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dd2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6818      	ldr	r0, [r3, #0]
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	6959      	ldr	r1, [r3, #20]
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	895a      	ldrh	r2, [r3, #10]
 8008de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	f004 f930 	bl	800d04a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	461a      	mov	r2, r3
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4413      	add	r3, r2
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e04:	82bb      	strh	r3, [r7, #20]
 8008e06:	8abb      	ldrh	r3, [r7, #20]
 8008e08:	f083 0310 	eor.w	r3, r3, #16
 8008e0c:	82bb      	strh	r3, [r7, #20]
 8008e0e:	8abb      	ldrh	r3, [r7, #20]
 8008e10:	f083 0320 	eor.w	r3, r3, #32
 8008e14:	82bb      	strh	r3, [r7, #20]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	441a      	add	r2, r3
 8008e24:	8abb      	ldrh	r3, [r7, #20]
 8008e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3790      	adds	r7, #144	; 0x90
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b087      	sub	sp, #28
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	607b      	str	r3, [r7, #4]
 8008e4e:	460b      	mov	r3, r1
 8008e50:	817b      	strh	r3, [r7, #10]
 8008e52:	4613      	mov	r3, r2
 8008e54:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008e56:	897b      	ldrh	r3, [r7, #10]
 8008e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00b      	beq.n	8008e7a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e62:	897b      	ldrh	r3, [r7, #10]
 8008e64:	f003 0307 	and.w	r3, r3, #7
 8008e68:	1c5a      	adds	r2, r3, #1
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	00db      	lsls	r3, r3, #3
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	4413      	add	r3, r2
 8008e76:	617b      	str	r3, [r7, #20]
 8008e78:	e009      	b.n	8008e8e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008e7a:	897a      	ldrh	r2, [r7, #10]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	00db      	lsls	r3, r3, #3
 8008e84:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008e8e:	893b      	ldrh	r3, [r7, #8]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d107      	bne.n	8008ea4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	2200      	movs	r2, #0
 8008e98:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	80da      	strh	r2, [r3, #6]
 8008ea2:	e00b      	b.n	8008ebc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	0c1b      	lsrs	r3, r3, #16
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	371c      	adds	r7, #28
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bc80      	pop	{r7}
 8008ec6:	4770      	bx	lr

08008ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e272      	b.n	80093c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f000 8087 	beq.w	8008ff6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008ee8:	4b92      	ldr	r3, [pc, #584]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	f003 030c 	and.w	r3, r3, #12
 8008ef0:	2b04      	cmp	r3, #4
 8008ef2:	d00c      	beq.n	8008f0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008ef4:	4b8f      	ldr	r3, [pc, #572]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	f003 030c 	and.w	r3, r3, #12
 8008efc:	2b08      	cmp	r3, #8
 8008efe:	d112      	bne.n	8008f26 <HAL_RCC_OscConfig+0x5e>
 8008f00:	4b8c      	ldr	r3, [pc, #560]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f0c:	d10b      	bne.n	8008f26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f0e:	4b89      	ldr	r3, [pc, #548]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d06c      	beq.n	8008ff4 <HAL_RCC_OscConfig+0x12c>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d168      	bne.n	8008ff4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e24c      	b.n	80093c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f2e:	d106      	bne.n	8008f3e <HAL_RCC_OscConfig+0x76>
 8008f30:	4b80      	ldr	r3, [pc, #512]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a7f      	ldr	r2, [pc, #508]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8008f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f3a:	6013      	str	r3, [r2, #0]
 8008f3c:	e02e      	b.n	8008f9c <HAL_RCC_OscConfig+0xd4>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10c      	bne.n	8008f60 <HAL_RCC_OscConfig+0x98>
 8008f46:	4b7b      	ldr	r3, [pc, #492]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a7a      	ldr	r2, [pc, #488]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8008f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f50:	6013      	str	r3, [r2, #0]
 8008f52:	4b78      	ldr	r3, [pc, #480]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a77      	ldr	r2, [pc, #476]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8008f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f5c:	6013      	str	r3, [r2, #0]
 8008f5e:	e01d      	b.n	8008f9c <HAL_RCC_OscConfig+0xd4>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f68:	d10c      	bne.n	8008f84 <HAL_RCC_OscConfig+0xbc>
 8008f6a:	4b72      	ldr	r3, [pc, #456]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a71      	ldr	r2, [pc, #452]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8008f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f74:	6013      	str	r3, [r2, #0]
 8008f76:	4b6f      	ldr	r3, [pc, #444]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a6e      	ldr	r2, [pc, #440]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8008f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f80:	6013      	str	r3, [r2, #0]
 8008f82:	e00b      	b.n	8008f9c <HAL_RCC_OscConfig+0xd4>
 8008f84:	4b6b      	ldr	r3, [pc, #428]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a6a      	ldr	r2, [pc, #424]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8008f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f8e:	6013      	str	r3, [r2, #0]
 8008f90:	4b68      	ldr	r3, [pc, #416]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a67      	ldr	r2, [pc, #412]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8008f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d013      	beq.n	8008fcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fa4:	f7fa fb48 	bl	8003638 <HAL_GetTick>
 8008fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008faa:	e008      	b.n	8008fbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008fac:	f7fa fb44 	bl	8003638 <HAL_GetTick>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	2b64      	cmp	r3, #100	; 0x64
 8008fb8:	d901      	bls.n	8008fbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	e200      	b.n	80093c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fbe:	4b5d      	ldr	r3, [pc, #372]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d0f0      	beq.n	8008fac <HAL_RCC_OscConfig+0xe4>
 8008fca:	e014      	b.n	8008ff6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fcc:	f7fa fb34 	bl	8003638 <HAL_GetTick>
 8008fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008fd2:	e008      	b.n	8008fe6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008fd4:	f7fa fb30 	bl	8003638 <HAL_GetTick>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	2b64      	cmp	r3, #100	; 0x64
 8008fe0:	d901      	bls.n	8008fe6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	e1ec      	b.n	80093c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008fe6:	4b53      	ldr	r3, [pc, #332]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1f0      	bne.n	8008fd4 <HAL_RCC_OscConfig+0x10c>
 8008ff2:	e000      	b.n	8008ff6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 0302 	and.w	r3, r3, #2
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d063      	beq.n	80090ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009002:	4b4c      	ldr	r3, [pc, #304]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	f003 030c 	and.w	r3, r3, #12
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00b      	beq.n	8009026 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800900e:	4b49      	ldr	r3, [pc, #292]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	f003 030c 	and.w	r3, r3, #12
 8009016:	2b08      	cmp	r3, #8
 8009018:	d11c      	bne.n	8009054 <HAL_RCC_OscConfig+0x18c>
 800901a:	4b46      	ldr	r3, [pc, #280]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009022:	2b00      	cmp	r3, #0
 8009024:	d116      	bne.n	8009054 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009026:	4b43      	ldr	r3, [pc, #268]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	2b00      	cmp	r3, #0
 8009030:	d005      	beq.n	800903e <HAL_RCC_OscConfig+0x176>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d001      	beq.n	800903e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	e1c0      	b.n	80093c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800903e:	4b3d      	ldr	r3, [pc, #244]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	695b      	ldr	r3, [r3, #20]
 800904a:	00db      	lsls	r3, r3, #3
 800904c:	4939      	ldr	r1, [pc, #228]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 800904e:	4313      	orrs	r3, r2
 8009050:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009052:	e03a      	b.n	80090ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d020      	beq.n	800909e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800905c:	4b36      	ldr	r3, [pc, #216]	; (8009138 <HAL_RCC_OscConfig+0x270>)
 800905e:	2201      	movs	r2, #1
 8009060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009062:	f7fa fae9 	bl	8003638 <HAL_GetTick>
 8009066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009068:	e008      	b.n	800907c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800906a:	f7fa fae5 	bl	8003638 <HAL_GetTick>
 800906e:	4602      	mov	r2, r0
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	1ad3      	subs	r3, r2, r3
 8009074:	2b02      	cmp	r3, #2
 8009076:	d901      	bls.n	800907c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009078:	2303      	movs	r3, #3
 800907a:	e1a1      	b.n	80093c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800907c:	4b2d      	ldr	r3, [pc, #180]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0302 	and.w	r3, r3, #2
 8009084:	2b00      	cmp	r3, #0
 8009086:	d0f0      	beq.n	800906a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009088:	4b2a      	ldr	r3, [pc, #168]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	695b      	ldr	r3, [r3, #20]
 8009094:	00db      	lsls	r3, r3, #3
 8009096:	4927      	ldr	r1, [pc, #156]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8009098:	4313      	orrs	r3, r2
 800909a:	600b      	str	r3, [r1, #0]
 800909c:	e015      	b.n	80090ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800909e:	4b26      	ldr	r3, [pc, #152]	; (8009138 <HAL_RCC_OscConfig+0x270>)
 80090a0:	2200      	movs	r2, #0
 80090a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090a4:	f7fa fac8 	bl	8003638 <HAL_GetTick>
 80090a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80090aa:	e008      	b.n	80090be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090ac:	f7fa fac4 	bl	8003638 <HAL_GetTick>
 80090b0:	4602      	mov	r2, r0
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	1ad3      	subs	r3, r2, r3
 80090b6:	2b02      	cmp	r3, #2
 80090b8:	d901      	bls.n	80090be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80090ba:	2303      	movs	r3, #3
 80090bc:	e180      	b.n	80093c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80090be:	4b1d      	ldr	r3, [pc, #116]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 0302 	and.w	r3, r3, #2
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1f0      	bne.n	80090ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 0308 	and.w	r3, r3, #8
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d03a      	beq.n	800914c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d019      	beq.n	8009112 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80090de:	4b17      	ldr	r3, [pc, #92]	; (800913c <HAL_RCC_OscConfig+0x274>)
 80090e0:	2201      	movs	r2, #1
 80090e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80090e4:	f7fa faa8 	bl	8003638 <HAL_GetTick>
 80090e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80090ea:	e008      	b.n	80090fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090ec:	f7fa faa4 	bl	8003638 <HAL_GetTick>
 80090f0:	4602      	mov	r2, r0
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	1ad3      	subs	r3, r2, r3
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d901      	bls.n	80090fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80090fa:	2303      	movs	r3, #3
 80090fc:	e160      	b.n	80093c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80090fe:	4b0d      	ldr	r3, [pc, #52]	; (8009134 <HAL_RCC_OscConfig+0x26c>)
 8009100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009102:	f003 0302 	and.w	r3, r3, #2
 8009106:	2b00      	cmp	r3, #0
 8009108:	d0f0      	beq.n	80090ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800910a:	2001      	movs	r0, #1
 800910c:	f000 fad0 	bl	80096b0 <RCC_Delay>
 8009110:	e01c      	b.n	800914c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009112:	4b0a      	ldr	r3, [pc, #40]	; (800913c <HAL_RCC_OscConfig+0x274>)
 8009114:	2200      	movs	r2, #0
 8009116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009118:	f7fa fa8e 	bl	8003638 <HAL_GetTick>
 800911c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800911e:	e00f      	b.n	8009140 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009120:	f7fa fa8a 	bl	8003638 <HAL_GetTick>
 8009124:	4602      	mov	r2, r0
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	1ad3      	subs	r3, r2, r3
 800912a:	2b02      	cmp	r3, #2
 800912c:	d908      	bls.n	8009140 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800912e:	2303      	movs	r3, #3
 8009130:	e146      	b.n	80093c0 <HAL_RCC_OscConfig+0x4f8>
 8009132:	bf00      	nop
 8009134:	40021000 	.word	0x40021000
 8009138:	42420000 	.word	0x42420000
 800913c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009140:	4b92      	ldr	r3, [pc, #584]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 8009142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009144:	f003 0302 	and.w	r3, r3, #2
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1e9      	bne.n	8009120 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0304 	and.w	r3, r3, #4
 8009154:	2b00      	cmp	r3, #0
 8009156:	f000 80a6 	beq.w	80092a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800915a:	2300      	movs	r3, #0
 800915c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800915e:	4b8b      	ldr	r3, [pc, #556]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 8009160:	69db      	ldr	r3, [r3, #28]
 8009162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d10d      	bne.n	8009186 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800916a:	4b88      	ldr	r3, [pc, #544]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 800916c:	69db      	ldr	r3, [r3, #28]
 800916e:	4a87      	ldr	r2, [pc, #540]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 8009170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009174:	61d3      	str	r3, [r2, #28]
 8009176:	4b85      	ldr	r3, [pc, #532]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 8009178:	69db      	ldr	r3, [r3, #28]
 800917a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800917e:	60bb      	str	r3, [r7, #8]
 8009180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009182:	2301      	movs	r3, #1
 8009184:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009186:	4b82      	ldr	r3, [pc, #520]	; (8009390 <HAL_RCC_OscConfig+0x4c8>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800918e:	2b00      	cmp	r3, #0
 8009190:	d118      	bne.n	80091c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009192:	4b7f      	ldr	r3, [pc, #508]	; (8009390 <HAL_RCC_OscConfig+0x4c8>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a7e      	ldr	r2, [pc, #504]	; (8009390 <HAL_RCC_OscConfig+0x4c8>)
 8009198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800919c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800919e:	f7fa fa4b 	bl	8003638 <HAL_GetTick>
 80091a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091a4:	e008      	b.n	80091b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091a6:	f7fa fa47 	bl	8003638 <HAL_GetTick>
 80091aa:	4602      	mov	r2, r0
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	1ad3      	subs	r3, r2, r3
 80091b0:	2b64      	cmp	r3, #100	; 0x64
 80091b2:	d901      	bls.n	80091b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80091b4:	2303      	movs	r3, #3
 80091b6:	e103      	b.n	80093c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091b8:	4b75      	ldr	r3, [pc, #468]	; (8009390 <HAL_RCC_OscConfig+0x4c8>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d0f0      	beq.n	80091a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d106      	bne.n	80091da <HAL_RCC_OscConfig+0x312>
 80091cc:	4b6f      	ldr	r3, [pc, #444]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 80091ce:	6a1b      	ldr	r3, [r3, #32]
 80091d0:	4a6e      	ldr	r2, [pc, #440]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 80091d2:	f043 0301 	orr.w	r3, r3, #1
 80091d6:	6213      	str	r3, [r2, #32]
 80091d8:	e02d      	b.n	8009236 <HAL_RCC_OscConfig+0x36e>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d10c      	bne.n	80091fc <HAL_RCC_OscConfig+0x334>
 80091e2:	4b6a      	ldr	r3, [pc, #424]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	4a69      	ldr	r2, [pc, #420]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 80091e8:	f023 0301 	bic.w	r3, r3, #1
 80091ec:	6213      	str	r3, [r2, #32]
 80091ee:	4b67      	ldr	r3, [pc, #412]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 80091f0:	6a1b      	ldr	r3, [r3, #32]
 80091f2:	4a66      	ldr	r2, [pc, #408]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 80091f4:	f023 0304 	bic.w	r3, r3, #4
 80091f8:	6213      	str	r3, [r2, #32]
 80091fa:	e01c      	b.n	8009236 <HAL_RCC_OscConfig+0x36e>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	2b05      	cmp	r3, #5
 8009202:	d10c      	bne.n	800921e <HAL_RCC_OscConfig+0x356>
 8009204:	4b61      	ldr	r3, [pc, #388]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 8009206:	6a1b      	ldr	r3, [r3, #32]
 8009208:	4a60      	ldr	r2, [pc, #384]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 800920a:	f043 0304 	orr.w	r3, r3, #4
 800920e:	6213      	str	r3, [r2, #32]
 8009210:	4b5e      	ldr	r3, [pc, #376]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 8009212:	6a1b      	ldr	r3, [r3, #32]
 8009214:	4a5d      	ldr	r2, [pc, #372]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 8009216:	f043 0301 	orr.w	r3, r3, #1
 800921a:	6213      	str	r3, [r2, #32]
 800921c:	e00b      	b.n	8009236 <HAL_RCC_OscConfig+0x36e>
 800921e:	4b5b      	ldr	r3, [pc, #364]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 8009220:	6a1b      	ldr	r3, [r3, #32]
 8009222:	4a5a      	ldr	r2, [pc, #360]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 8009224:	f023 0301 	bic.w	r3, r3, #1
 8009228:	6213      	str	r3, [r2, #32]
 800922a:	4b58      	ldr	r3, [pc, #352]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 800922c:	6a1b      	ldr	r3, [r3, #32]
 800922e:	4a57      	ldr	r2, [pc, #348]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 8009230:	f023 0304 	bic.w	r3, r3, #4
 8009234:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d015      	beq.n	800926a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800923e:	f7fa f9fb 	bl	8003638 <HAL_GetTick>
 8009242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009244:	e00a      	b.n	800925c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009246:	f7fa f9f7 	bl	8003638 <HAL_GetTick>
 800924a:	4602      	mov	r2, r0
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	f241 3288 	movw	r2, #5000	; 0x1388
 8009254:	4293      	cmp	r3, r2
 8009256:	d901      	bls.n	800925c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8009258:	2303      	movs	r3, #3
 800925a:	e0b1      	b.n	80093c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800925c:	4b4b      	ldr	r3, [pc, #300]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 800925e:	6a1b      	ldr	r3, [r3, #32]
 8009260:	f003 0302 	and.w	r3, r3, #2
 8009264:	2b00      	cmp	r3, #0
 8009266:	d0ee      	beq.n	8009246 <HAL_RCC_OscConfig+0x37e>
 8009268:	e014      	b.n	8009294 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800926a:	f7fa f9e5 	bl	8003638 <HAL_GetTick>
 800926e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009270:	e00a      	b.n	8009288 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009272:	f7fa f9e1 	bl	8003638 <HAL_GetTick>
 8009276:	4602      	mov	r2, r0
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	1ad3      	subs	r3, r2, r3
 800927c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009280:	4293      	cmp	r3, r2
 8009282:	d901      	bls.n	8009288 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	e09b      	b.n	80093c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009288:	4b40      	ldr	r3, [pc, #256]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 800928a:	6a1b      	ldr	r3, [r3, #32]
 800928c:	f003 0302 	and.w	r3, r3, #2
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1ee      	bne.n	8009272 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009294:	7dfb      	ldrb	r3, [r7, #23]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d105      	bne.n	80092a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800929a:	4b3c      	ldr	r3, [pc, #240]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 800929c:	69db      	ldr	r3, [r3, #28]
 800929e:	4a3b      	ldr	r2, [pc, #236]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 80092a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	69db      	ldr	r3, [r3, #28]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f000 8087 	beq.w	80093be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80092b0:	4b36      	ldr	r3, [pc, #216]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	f003 030c 	and.w	r3, r3, #12
 80092b8:	2b08      	cmp	r3, #8
 80092ba:	d061      	beq.n	8009380 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	69db      	ldr	r3, [r3, #28]
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	d146      	bne.n	8009352 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092c4:	4b33      	ldr	r3, [pc, #204]	; (8009394 <HAL_RCC_OscConfig+0x4cc>)
 80092c6:	2200      	movs	r2, #0
 80092c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092ca:	f7fa f9b5 	bl	8003638 <HAL_GetTick>
 80092ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80092d0:	e008      	b.n	80092e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092d2:	f7fa f9b1 	bl	8003638 <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d901      	bls.n	80092e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80092e0:	2303      	movs	r3, #3
 80092e2:	e06d      	b.n	80093c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80092e4:	4b29      	ldr	r3, [pc, #164]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1f0      	bne.n	80092d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a1b      	ldr	r3, [r3, #32]
 80092f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092f8:	d108      	bne.n	800930c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80092fa:	4b24      	ldr	r3, [pc, #144]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	4921      	ldr	r1, [pc, #132]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 8009308:	4313      	orrs	r3, r2
 800930a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800930c:	4b1f      	ldr	r3, [pc, #124]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a19      	ldr	r1, [r3, #32]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931c:	430b      	orrs	r3, r1
 800931e:	491b      	ldr	r1, [pc, #108]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 8009320:	4313      	orrs	r3, r2
 8009322:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009324:	4b1b      	ldr	r3, [pc, #108]	; (8009394 <HAL_RCC_OscConfig+0x4cc>)
 8009326:	2201      	movs	r2, #1
 8009328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800932a:	f7fa f985 	bl	8003638 <HAL_GetTick>
 800932e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009330:	e008      	b.n	8009344 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009332:	f7fa f981 	bl	8003638 <HAL_GetTick>
 8009336:	4602      	mov	r2, r0
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	1ad3      	subs	r3, r2, r3
 800933c:	2b02      	cmp	r3, #2
 800933e:	d901      	bls.n	8009344 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009340:	2303      	movs	r3, #3
 8009342:	e03d      	b.n	80093c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009344:	4b11      	ldr	r3, [pc, #68]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d0f0      	beq.n	8009332 <HAL_RCC_OscConfig+0x46a>
 8009350:	e035      	b.n	80093be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009352:	4b10      	ldr	r3, [pc, #64]	; (8009394 <HAL_RCC_OscConfig+0x4cc>)
 8009354:	2200      	movs	r2, #0
 8009356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009358:	f7fa f96e 	bl	8003638 <HAL_GetTick>
 800935c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800935e:	e008      	b.n	8009372 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009360:	f7fa f96a 	bl	8003638 <HAL_GetTick>
 8009364:	4602      	mov	r2, r0
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	2b02      	cmp	r3, #2
 800936c:	d901      	bls.n	8009372 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800936e:	2303      	movs	r3, #3
 8009370:	e026      	b.n	80093c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009372:	4b06      	ldr	r3, [pc, #24]	; (800938c <HAL_RCC_OscConfig+0x4c4>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1f0      	bne.n	8009360 <HAL_RCC_OscConfig+0x498>
 800937e:	e01e      	b.n	80093be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	69db      	ldr	r3, [r3, #28]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d107      	bne.n	8009398 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	e019      	b.n	80093c0 <HAL_RCC_OscConfig+0x4f8>
 800938c:	40021000 	.word	0x40021000
 8009390:	40007000 	.word	0x40007000
 8009394:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009398:	4b0b      	ldr	r3, [pc, #44]	; (80093c8 <HAL_RCC_OscConfig+0x500>)
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6a1b      	ldr	r3, [r3, #32]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d106      	bne.n	80093ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d001      	beq.n	80093be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e000      	b.n	80093c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3718      	adds	r7, #24
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	40021000 	.word	0x40021000

080093cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d101      	bne.n	80093e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	e0d0      	b.n	8009582 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80093e0:	4b6a      	ldr	r3, [pc, #424]	; (800958c <HAL_RCC_ClockConfig+0x1c0>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 0307 	and.w	r3, r3, #7
 80093e8:	683a      	ldr	r2, [r7, #0]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d910      	bls.n	8009410 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093ee:	4b67      	ldr	r3, [pc, #412]	; (800958c <HAL_RCC_ClockConfig+0x1c0>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f023 0207 	bic.w	r2, r3, #7
 80093f6:	4965      	ldr	r1, [pc, #404]	; (800958c <HAL_RCC_ClockConfig+0x1c0>)
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80093fe:	4b63      	ldr	r3, [pc, #396]	; (800958c <HAL_RCC_ClockConfig+0x1c0>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f003 0307 	and.w	r3, r3, #7
 8009406:	683a      	ldr	r2, [r7, #0]
 8009408:	429a      	cmp	r2, r3
 800940a:	d001      	beq.n	8009410 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	e0b8      	b.n	8009582 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 0302 	and.w	r3, r3, #2
 8009418:	2b00      	cmp	r3, #0
 800941a:	d020      	beq.n	800945e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f003 0304 	and.w	r3, r3, #4
 8009424:	2b00      	cmp	r3, #0
 8009426:	d005      	beq.n	8009434 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009428:	4b59      	ldr	r3, [pc, #356]	; (8009590 <HAL_RCC_ClockConfig+0x1c4>)
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	4a58      	ldr	r2, [pc, #352]	; (8009590 <HAL_RCC_ClockConfig+0x1c4>)
 800942e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009432:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 0308 	and.w	r3, r3, #8
 800943c:	2b00      	cmp	r3, #0
 800943e:	d005      	beq.n	800944c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009440:	4b53      	ldr	r3, [pc, #332]	; (8009590 <HAL_RCC_ClockConfig+0x1c4>)
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	4a52      	ldr	r2, [pc, #328]	; (8009590 <HAL_RCC_ClockConfig+0x1c4>)
 8009446:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800944a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800944c:	4b50      	ldr	r3, [pc, #320]	; (8009590 <HAL_RCC_ClockConfig+0x1c4>)
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	494d      	ldr	r1, [pc, #308]	; (8009590 <HAL_RCC_ClockConfig+0x1c4>)
 800945a:	4313      	orrs	r3, r2
 800945c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 0301 	and.w	r3, r3, #1
 8009466:	2b00      	cmp	r3, #0
 8009468:	d040      	beq.n	80094ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	2b01      	cmp	r3, #1
 8009470:	d107      	bne.n	8009482 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009472:	4b47      	ldr	r3, [pc, #284]	; (8009590 <HAL_RCC_ClockConfig+0x1c4>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800947a:	2b00      	cmp	r3, #0
 800947c:	d115      	bne.n	80094aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	e07f      	b.n	8009582 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	2b02      	cmp	r3, #2
 8009488:	d107      	bne.n	800949a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800948a:	4b41      	ldr	r3, [pc, #260]	; (8009590 <HAL_RCC_ClockConfig+0x1c4>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009492:	2b00      	cmp	r3, #0
 8009494:	d109      	bne.n	80094aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	e073      	b.n	8009582 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800949a:	4b3d      	ldr	r3, [pc, #244]	; (8009590 <HAL_RCC_ClockConfig+0x1c4>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 0302 	and.w	r3, r3, #2
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d101      	bne.n	80094aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e06b      	b.n	8009582 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80094aa:	4b39      	ldr	r3, [pc, #228]	; (8009590 <HAL_RCC_ClockConfig+0x1c4>)
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	f023 0203 	bic.w	r2, r3, #3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	4936      	ldr	r1, [pc, #216]	; (8009590 <HAL_RCC_ClockConfig+0x1c4>)
 80094b8:	4313      	orrs	r3, r2
 80094ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80094bc:	f7fa f8bc 	bl	8003638 <HAL_GetTick>
 80094c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094c2:	e00a      	b.n	80094da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094c4:	f7fa f8b8 	bl	8003638 <HAL_GetTick>
 80094c8:	4602      	mov	r2, r0
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	1ad3      	subs	r3, r2, r3
 80094ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d901      	bls.n	80094da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80094d6:	2303      	movs	r3, #3
 80094d8:	e053      	b.n	8009582 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094da:	4b2d      	ldr	r3, [pc, #180]	; (8009590 <HAL_RCC_ClockConfig+0x1c4>)
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	f003 020c 	and.w	r2, r3, #12
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d1eb      	bne.n	80094c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80094ec:	4b27      	ldr	r3, [pc, #156]	; (800958c <HAL_RCC_ClockConfig+0x1c0>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 0307 	and.w	r3, r3, #7
 80094f4:	683a      	ldr	r2, [r7, #0]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d210      	bcs.n	800951c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094fa:	4b24      	ldr	r3, [pc, #144]	; (800958c <HAL_RCC_ClockConfig+0x1c0>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f023 0207 	bic.w	r2, r3, #7
 8009502:	4922      	ldr	r1, [pc, #136]	; (800958c <HAL_RCC_ClockConfig+0x1c0>)
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	4313      	orrs	r3, r2
 8009508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800950a:	4b20      	ldr	r3, [pc, #128]	; (800958c <HAL_RCC_ClockConfig+0x1c0>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f003 0307 	and.w	r3, r3, #7
 8009512:	683a      	ldr	r2, [r7, #0]
 8009514:	429a      	cmp	r2, r3
 8009516:	d001      	beq.n	800951c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	e032      	b.n	8009582 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 0304 	and.w	r3, r3, #4
 8009524:	2b00      	cmp	r3, #0
 8009526:	d008      	beq.n	800953a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009528:	4b19      	ldr	r3, [pc, #100]	; (8009590 <HAL_RCC_ClockConfig+0x1c4>)
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	4916      	ldr	r1, [pc, #88]	; (8009590 <HAL_RCC_ClockConfig+0x1c4>)
 8009536:	4313      	orrs	r3, r2
 8009538:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f003 0308 	and.w	r3, r3, #8
 8009542:	2b00      	cmp	r3, #0
 8009544:	d009      	beq.n	800955a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009546:	4b12      	ldr	r3, [pc, #72]	; (8009590 <HAL_RCC_ClockConfig+0x1c4>)
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	00db      	lsls	r3, r3, #3
 8009554:	490e      	ldr	r1, [pc, #56]	; (8009590 <HAL_RCC_ClockConfig+0x1c4>)
 8009556:	4313      	orrs	r3, r2
 8009558:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800955a:	f000 f821 	bl	80095a0 <HAL_RCC_GetSysClockFreq>
 800955e:	4602      	mov	r2, r0
 8009560:	4b0b      	ldr	r3, [pc, #44]	; (8009590 <HAL_RCC_ClockConfig+0x1c4>)
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	091b      	lsrs	r3, r3, #4
 8009566:	f003 030f 	and.w	r3, r3, #15
 800956a:	490a      	ldr	r1, [pc, #40]	; (8009594 <HAL_RCC_ClockConfig+0x1c8>)
 800956c:	5ccb      	ldrb	r3, [r1, r3]
 800956e:	fa22 f303 	lsr.w	r3, r2, r3
 8009572:	4a09      	ldr	r2, [pc, #36]	; (8009598 <HAL_RCC_ClockConfig+0x1cc>)
 8009574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009576:	4b09      	ldr	r3, [pc, #36]	; (800959c <HAL_RCC_ClockConfig+0x1d0>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4618      	mov	r0, r3
 800957c:	f7fa f81a 	bl	80035b4 <HAL_InitTick>

  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	40022000 	.word	0x40022000
 8009590:	40021000 	.word	0x40021000
 8009594:	080106e4 	.word	0x080106e4
 8009598:	2000024c 	.word	0x2000024c
 800959c:	20000250 	.word	0x20000250

080095a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b087      	sub	sp, #28
 80095a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80095a6:	2300      	movs	r3, #0
 80095a8:	60fb      	str	r3, [r7, #12]
 80095aa:	2300      	movs	r3, #0
 80095ac:	60bb      	str	r3, [r7, #8]
 80095ae:	2300      	movs	r3, #0
 80095b0:	617b      	str	r3, [r7, #20]
 80095b2:	2300      	movs	r3, #0
 80095b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80095b6:	2300      	movs	r3, #0
 80095b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80095ba:	4b1e      	ldr	r3, [pc, #120]	; (8009634 <HAL_RCC_GetSysClockFreq+0x94>)
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f003 030c 	and.w	r3, r3, #12
 80095c6:	2b04      	cmp	r3, #4
 80095c8:	d002      	beq.n	80095d0 <HAL_RCC_GetSysClockFreq+0x30>
 80095ca:	2b08      	cmp	r3, #8
 80095cc:	d003      	beq.n	80095d6 <HAL_RCC_GetSysClockFreq+0x36>
 80095ce:	e027      	b.n	8009620 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80095d0:	4b19      	ldr	r3, [pc, #100]	; (8009638 <HAL_RCC_GetSysClockFreq+0x98>)
 80095d2:	613b      	str	r3, [r7, #16]
      break;
 80095d4:	e027      	b.n	8009626 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	0c9b      	lsrs	r3, r3, #18
 80095da:	f003 030f 	and.w	r3, r3, #15
 80095de:	4a17      	ldr	r2, [pc, #92]	; (800963c <HAL_RCC_GetSysClockFreq+0x9c>)
 80095e0:	5cd3      	ldrb	r3, [r2, r3]
 80095e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d010      	beq.n	8009610 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80095ee:	4b11      	ldr	r3, [pc, #68]	; (8009634 <HAL_RCC_GetSysClockFreq+0x94>)
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	0c5b      	lsrs	r3, r3, #17
 80095f4:	f003 0301 	and.w	r3, r3, #1
 80095f8:	4a11      	ldr	r2, [pc, #68]	; (8009640 <HAL_RCC_GetSysClockFreq+0xa0>)
 80095fa:	5cd3      	ldrb	r3, [r2, r3]
 80095fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a0d      	ldr	r2, [pc, #52]	; (8009638 <HAL_RCC_GetSysClockFreq+0x98>)
 8009602:	fb03 f202 	mul.w	r2, r3, r2
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	fbb2 f3f3 	udiv	r3, r2, r3
 800960c:	617b      	str	r3, [r7, #20]
 800960e:	e004      	b.n	800961a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a0c      	ldr	r2, [pc, #48]	; (8009644 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009614:	fb02 f303 	mul.w	r3, r2, r3
 8009618:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	613b      	str	r3, [r7, #16]
      break;
 800961e:	e002      	b.n	8009626 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009620:	4b09      	ldr	r3, [pc, #36]	; (8009648 <HAL_RCC_GetSysClockFreq+0xa8>)
 8009622:	613b      	str	r3, [r7, #16]
      break;
 8009624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009626:	693b      	ldr	r3, [r7, #16]
}
 8009628:	4618      	mov	r0, r3
 800962a:	371c      	adds	r7, #28
 800962c:	46bd      	mov	sp, r7
 800962e:	bc80      	pop	{r7}
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	40021000 	.word	0x40021000
 8009638:	00b71b00 	.word	0x00b71b00
 800963c:	080106fc 	.word	0x080106fc
 8009640:	0801070c 	.word	0x0801070c
 8009644:	003d0900 	.word	0x003d0900
 8009648:	007a1200 	.word	0x007a1200

0800964c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800964c:	b480      	push	{r7}
 800964e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009650:	4b02      	ldr	r3, [pc, #8]	; (800965c <HAL_RCC_GetHCLKFreq+0x10>)
 8009652:	681b      	ldr	r3, [r3, #0]
}
 8009654:	4618      	mov	r0, r3
 8009656:	46bd      	mov	sp, r7
 8009658:	bc80      	pop	{r7}
 800965a:	4770      	bx	lr
 800965c:	2000024c 	.word	0x2000024c

08009660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009664:	f7ff fff2 	bl	800964c <HAL_RCC_GetHCLKFreq>
 8009668:	4602      	mov	r2, r0
 800966a:	4b05      	ldr	r3, [pc, #20]	; (8009680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	0a1b      	lsrs	r3, r3, #8
 8009670:	f003 0307 	and.w	r3, r3, #7
 8009674:	4903      	ldr	r1, [pc, #12]	; (8009684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009676:	5ccb      	ldrb	r3, [r1, r3]
 8009678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800967c:	4618      	mov	r0, r3
 800967e:	bd80      	pop	{r7, pc}
 8009680:	40021000 	.word	0x40021000
 8009684:	080106f4 	.word	0x080106f4

08009688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800968c:	f7ff ffde 	bl	800964c <HAL_RCC_GetHCLKFreq>
 8009690:	4602      	mov	r2, r0
 8009692:	4b05      	ldr	r3, [pc, #20]	; (80096a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	0adb      	lsrs	r3, r3, #11
 8009698:	f003 0307 	and.w	r3, r3, #7
 800969c:	4903      	ldr	r1, [pc, #12]	; (80096ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800969e:	5ccb      	ldrb	r3, [r1, r3]
 80096a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	40021000 	.word	0x40021000
 80096ac:	080106f4 	.word	0x080106f4

080096b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80096b8:	4b0a      	ldr	r3, [pc, #40]	; (80096e4 <RCC_Delay+0x34>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a0a      	ldr	r2, [pc, #40]	; (80096e8 <RCC_Delay+0x38>)
 80096be:	fba2 2303 	umull	r2, r3, r2, r3
 80096c2:	0a5b      	lsrs	r3, r3, #9
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	fb02 f303 	mul.w	r3, r2, r3
 80096ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80096cc:	bf00      	nop
  }
  while (Delay --);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	1e5a      	subs	r2, r3, #1
 80096d2:	60fa      	str	r2, [r7, #12]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1f9      	bne.n	80096cc <RCC_Delay+0x1c>
}
 80096d8:	bf00      	nop
 80096da:	bf00      	nop
 80096dc:	3714      	adds	r7, #20
 80096de:	46bd      	mov	sp, r7
 80096e0:	bc80      	pop	{r7}
 80096e2:	4770      	bx	lr
 80096e4:	2000024c 	.word	0x2000024c
 80096e8:	10624dd3 	.word	0x10624dd3

080096ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b086      	sub	sp, #24
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80096f4:	2300      	movs	r3, #0
 80096f6:	613b      	str	r3, [r7, #16]
 80096f8:	2300      	movs	r3, #0
 80096fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f003 0301 	and.w	r3, r3, #1
 8009704:	2b00      	cmp	r3, #0
 8009706:	d07d      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8009708:	2300      	movs	r3, #0
 800970a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800970c:	4b4f      	ldr	r3, [pc, #316]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800970e:	69db      	ldr	r3, [r3, #28]
 8009710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009714:	2b00      	cmp	r3, #0
 8009716:	d10d      	bne.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009718:	4b4c      	ldr	r3, [pc, #304]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800971a:	69db      	ldr	r3, [r3, #28]
 800971c:	4a4b      	ldr	r2, [pc, #300]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800971e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009722:	61d3      	str	r3, [r2, #28]
 8009724:	4b49      	ldr	r3, [pc, #292]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009726:	69db      	ldr	r3, [r3, #28]
 8009728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800972c:	60bb      	str	r3, [r7, #8]
 800972e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009730:	2301      	movs	r3, #1
 8009732:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009734:	4b46      	ldr	r3, [pc, #280]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800973c:	2b00      	cmp	r3, #0
 800973e:	d118      	bne.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009740:	4b43      	ldr	r3, [pc, #268]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a42      	ldr	r2, [pc, #264]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800974a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800974c:	f7f9 ff74 	bl	8003638 <HAL_GetTick>
 8009750:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009752:	e008      	b.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009754:	f7f9 ff70 	bl	8003638 <HAL_GetTick>
 8009758:	4602      	mov	r2, r0
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	1ad3      	subs	r3, r2, r3
 800975e:	2b64      	cmp	r3, #100	; 0x64
 8009760:	d901      	bls.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8009762:	2303      	movs	r3, #3
 8009764:	e06d      	b.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009766:	4b3a      	ldr	r3, [pc, #232]	; (8009850 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800976e:	2b00      	cmp	r3, #0
 8009770:	d0f0      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009772:	4b36      	ldr	r3, [pc, #216]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009774:	6a1b      	ldr	r3, [r3, #32]
 8009776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800977a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d02e      	beq.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	429a      	cmp	r2, r3
 800978e:	d027      	beq.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009790:	4b2e      	ldr	r3, [pc, #184]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009792:	6a1b      	ldr	r3, [r3, #32]
 8009794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009798:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800979a:	4b2e      	ldr	r3, [pc, #184]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800979c:	2201      	movs	r2, #1
 800979e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80097a0:	4b2c      	ldr	r3, [pc, #176]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80097a2:	2200      	movs	r2, #0
 80097a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80097a6:	4a29      	ldr	r2, [pc, #164]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f003 0301 	and.w	r3, r3, #1
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d014      	beq.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097b6:	f7f9 ff3f 	bl	8003638 <HAL_GetTick>
 80097ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097bc:	e00a      	b.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097be:	f7f9 ff3b 	bl	8003638 <HAL_GetTick>
 80097c2:	4602      	mov	r2, r0
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	1ad3      	subs	r3, r2, r3
 80097c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d901      	bls.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80097d0:	2303      	movs	r3, #3
 80097d2:	e036      	b.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097d4:	4b1d      	ldr	r3, [pc, #116]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80097d6:	6a1b      	ldr	r3, [r3, #32]
 80097d8:	f003 0302 	and.w	r3, r3, #2
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d0ee      	beq.n	80097be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80097e0:	4b1a      	ldr	r3, [pc, #104]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80097e2:	6a1b      	ldr	r3, [r3, #32]
 80097e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	4917      	ldr	r1, [pc, #92]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80097ee:	4313      	orrs	r3, r2
 80097f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80097f2:	7dfb      	ldrb	r3, [r7, #23]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d105      	bne.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097f8:	4b14      	ldr	r3, [pc, #80]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80097fa:	69db      	ldr	r3, [r3, #28]
 80097fc:	4a13      	ldr	r2, [pc, #76]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80097fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009802:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 0302 	and.w	r3, r3, #2
 800980c:	2b00      	cmp	r3, #0
 800980e:	d008      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009810:	4b0e      	ldr	r3, [pc, #56]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	490b      	ldr	r1, [pc, #44]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800981e:	4313      	orrs	r3, r2
 8009820:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f003 0310 	and.w	r3, r3, #16
 800982a:	2b00      	cmp	r3, #0
 800982c:	d008      	beq.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800982e:	4b07      	ldr	r3, [pc, #28]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	695b      	ldr	r3, [r3, #20]
 800983a:	4904      	ldr	r1, [pc, #16]	; (800984c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800983c:	4313      	orrs	r3, r2
 800983e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	3718      	adds	r7, #24
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	40021000 	.word	0x40021000
 8009850:	40007000 	.word	0x40007000
 8009854:	42420440 	.word	0x42420440

08009858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d101      	bne.n	800986a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009866:	2301      	movs	r3, #1
 8009868:	e041      	b.n	80098ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2b00      	cmp	r3, #0
 8009874:	d106      	bne.n	8009884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f7f9 fc80 	bl	8003184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2202      	movs	r2, #2
 8009888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	3304      	adds	r3, #4
 8009894:	4619      	mov	r1, r3
 8009896:	4610      	mov	r0, r2
 8009898:	f000 faca 	bl	8009e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b082      	sub	sp, #8
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d101      	bne.n	8009908 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	e041      	b.n	800998c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800990e:	b2db      	uxtb	r3, r3
 8009910:	2b00      	cmp	r3, #0
 8009912:	d106      	bne.n	8009922 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 f839 	bl	8009994 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2202      	movs	r2, #2
 8009926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	3304      	adds	r3, #4
 8009932:	4619      	mov	r1, r3
 8009934:	4610      	mov	r0, r2
 8009936:	f000 fa7b 	bl	8009e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2201      	movs	r2, #1
 800993e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2201      	movs	r2, #1
 800994e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2201      	movs	r2, #1
 8009956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2201      	movs	r2, #1
 800995e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2201      	movs	r2, #1
 8009966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2201      	movs	r2, #1
 800996e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2201      	movs	r2, #1
 8009976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2201      	movs	r2, #1
 800997e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2201      	movs	r2, #1
 8009986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3708      	adds	r7, #8
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800999c:	bf00      	nop
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bc80      	pop	{r7}
 80099a4:	4770      	bx	lr
	...

080099a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d109      	bne.n	80099cc <HAL_TIM_PWM_Start+0x24>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	bf14      	ite	ne
 80099c4:	2301      	movne	r3, #1
 80099c6:	2300      	moveq	r3, #0
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	e022      	b.n	8009a12 <HAL_TIM_PWM_Start+0x6a>
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	2b04      	cmp	r3, #4
 80099d0:	d109      	bne.n	80099e6 <HAL_TIM_PWM_Start+0x3e>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b01      	cmp	r3, #1
 80099dc:	bf14      	ite	ne
 80099de:	2301      	movne	r3, #1
 80099e0:	2300      	moveq	r3, #0
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	e015      	b.n	8009a12 <HAL_TIM_PWM_Start+0x6a>
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	2b08      	cmp	r3, #8
 80099ea:	d109      	bne.n	8009a00 <HAL_TIM_PWM_Start+0x58>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	bf14      	ite	ne
 80099f8:	2301      	movne	r3, #1
 80099fa:	2300      	moveq	r3, #0
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	e008      	b.n	8009a12 <HAL_TIM_PWM_Start+0x6a>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	bf14      	ite	ne
 8009a0c:	2301      	movne	r3, #1
 8009a0e:	2300      	moveq	r3, #0
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e072      	b.n	8009b00 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d104      	bne.n	8009a2a <HAL_TIM_PWM_Start+0x82>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2202      	movs	r2, #2
 8009a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a28:	e013      	b.n	8009a52 <HAL_TIM_PWM_Start+0xaa>
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	2b04      	cmp	r3, #4
 8009a2e:	d104      	bne.n	8009a3a <HAL_TIM_PWM_Start+0x92>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2202      	movs	r2, #2
 8009a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a38:	e00b      	b.n	8009a52 <HAL_TIM_PWM_Start+0xaa>
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	2b08      	cmp	r3, #8
 8009a3e:	d104      	bne.n	8009a4a <HAL_TIM_PWM_Start+0xa2>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2202      	movs	r2, #2
 8009a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a48:	e003      	b.n	8009a52 <HAL_TIM_PWM_Start+0xaa>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2202      	movs	r2, #2
 8009a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2201      	movs	r2, #1
 8009a58:	6839      	ldr	r1, [r7, #0]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 fca4 	bl	800a3a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a28      	ldr	r2, [pc, #160]	; (8009b08 <HAL_TIM_PWM_Start+0x160>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d004      	beq.n	8009a74 <HAL_TIM_PWM_Start+0xcc>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a27      	ldr	r2, [pc, #156]	; (8009b0c <HAL_TIM_PWM_Start+0x164>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d101      	bne.n	8009a78 <HAL_TIM_PWM_Start+0xd0>
 8009a74:	2301      	movs	r3, #1
 8009a76:	e000      	b.n	8009a7a <HAL_TIM_PWM_Start+0xd2>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d007      	beq.n	8009a8e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a1d      	ldr	r2, [pc, #116]	; (8009b08 <HAL_TIM_PWM_Start+0x160>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d018      	beq.n	8009aca <HAL_TIM_PWM_Start+0x122>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a1b      	ldr	r2, [pc, #108]	; (8009b0c <HAL_TIM_PWM_Start+0x164>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d013      	beq.n	8009aca <HAL_TIM_PWM_Start+0x122>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aaa:	d00e      	beq.n	8009aca <HAL_TIM_PWM_Start+0x122>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a17      	ldr	r2, [pc, #92]	; (8009b10 <HAL_TIM_PWM_Start+0x168>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d009      	beq.n	8009aca <HAL_TIM_PWM_Start+0x122>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a16      	ldr	r2, [pc, #88]	; (8009b14 <HAL_TIM_PWM_Start+0x16c>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d004      	beq.n	8009aca <HAL_TIM_PWM_Start+0x122>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a14      	ldr	r2, [pc, #80]	; (8009b18 <HAL_TIM_PWM_Start+0x170>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d111      	bne.n	8009aee <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	f003 0307 	and.w	r3, r3, #7
 8009ad4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2b06      	cmp	r3, #6
 8009ada:	d010      	beq.n	8009afe <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f042 0201 	orr.w	r2, r2, #1
 8009aea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aec:	e007      	b.n	8009afe <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f042 0201 	orr.w	r2, r2, #1
 8009afc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	40012c00 	.word	0x40012c00
 8009b0c:	40013400 	.word	0x40013400
 8009b10:	40000400 	.word	0x40000400
 8009b14:	40000800 	.word	0x40000800
 8009b18:	40000c00 	.word	0x40000c00

08009b1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b086      	sub	sp, #24
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d101      	bne.n	8009b3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009b36:	2302      	movs	r3, #2
 8009b38:	e0ae      	b.n	8009c98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2b0c      	cmp	r3, #12
 8009b46:	f200 809f 	bhi.w	8009c88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009b4a:	a201      	add	r2, pc, #4	; (adr r2, 8009b50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b50:	08009b85 	.word	0x08009b85
 8009b54:	08009c89 	.word	0x08009c89
 8009b58:	08009c89 	.word	0x08009c89
 8009b5c:	08009c89 	.word	0x08009c89
 8009b60:	08009bc5 	.word	0x08009bc5
 8009b64:	08009c89 	.word	0x08009c89
 8009b68:	08009c89 	.word	0x08009c89
 8009b6c:	08009c89 	.word	0x08009c89
 8009b70:	08009c07 	.word	0x08009c07
 8009b74:	08009c89 	.word	0x08009c89
 8009b78:	08009c89 	.word	0x08009c89
 8009b7c:	08009c89 	.word	0x08009c89
 8009b80:	08009c47 	.word	0x08009c47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	68b9      	ldr	r1, [r7, #8]
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f000 f9ca 	bl	8009f24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	699a      	ldr	r2, [r3, #24]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f042 0208 	orr.w	r2, r2, #8
 8009b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	699a      	ldr	r2, [r3, #24]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f022 0204 	bic.w	r2, r2, #4
 8009bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	6999      	ldr	r1, [r3, #24]
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	691a      	ldr	r2, [r3, #16]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	430a      	orrs	r2, r1
 8009bc0:	619a      	str	r2, [r3, #24]
      break;
 8009bc2:	e064      	b.n	8009c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68b9      	ldr	r1, [r7, #8]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 fa1a 	bl	800a004 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	699a      	ldr	r2, [r3, #24]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	699a      	ldr	r2, [r3, #24]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	6999      	ldr	r1, [r3, #24]
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	021a      	lsls	r2, r3, #8
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	430a      	orrs	r2, r1
 8009c02:	619a      	str	r2, [r3, #24]
      break;
 8009c04:	e043      	b.n	8009c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68b9      	ldr	r1, [r7, #8]
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f000 fa6d 	bl	800a0ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	69da      	ldr	r2, [r3, #28]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f042 0208 	orr.w	r2, r2, #8
 8009c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	69da      	ldr	r2, [r3, #28]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f022 0204 	bic.w	r2, r2, #4
 8009c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	69d9      	ldr	r1, [r3, #28]
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	691a      	ldr	r2, [r3, #16]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	430a      	orrs	r2, r1
 8009c42:	61da      	str	r2, [r3, #28]
      break;
 8009c44:	e023      	b.n	8009c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	68b9      	ldr	r1, [r7, #8]
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f000 fac1 	bl	800a1d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	69da      	ldr	r2, [r3, #28]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	69da      	ldr	r2, [r3, #28]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	69d9      	ldr	r1, [r3, #28]
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	021a      	lsls	r2, r3, #8
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	430a      	orrs	r2, r1
 8009c84:	61da      	str	r2, [r3, #28]
      break;
 8009c86:	e002      	b.n	8009c8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8009c8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3718      	adds	r7, #24
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009caa:	2300      	movs	r3, #0
 8009cac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d101      	bne.n	8009cbc <HAL_TIM_ConfigClockSource+0x1c>
 8009cb8:	2302      	movs	r3, #2
 8009cba:	e0b4      	b.n	8009e26 <HAL_TIM_ConfigClockSource+0x186>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2202      	movs	r2, #2
 8009cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ce2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	68ba      	ldr	r2, [r7, #8]
 8009cea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cf4:	d03e      	beq.n	8009d74 <HAL_TIM_ConfigClockSource+0xd4>
 8009cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cfa:	f200 8087 	bhi.w	8009e0c <HAL_TIM_ConfigClockSource+0x16c>
 8009cfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d02:	f000 8086 	beq.w	8009e12 <HAL_TIM_ConfigClockSource+0x172>
 8009d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d0a:	d87f      	bhi.n	8009e0c <HAL_TIM_ConfigClockSource+0x16c>
 8009d0c:	2b70      	cmp	r3, #112	; 0x70
 8009d0e:	d01a      	beq.n	8009d46 <HAL_TIM_ConfigClockSource+0xa6>
 8009d10:	2b70      	cmp	r3, #112	; 0x70
 8009d12:	d87b      	bhi.n	8009e0c <HAL_TIM_ConfigClockSource+0x16c>
 8009d14:	2b60      	cmp	r3, #96	; 0x60
 8009d16:	d050      	beq.n	8009dba <HAL_TIM_ConfigClockSource+0x11a>
 8009d18:	2b60      	cmp	r3, #96	; 0x60
 8009d1a:	d877      	bhi.n	8009e0c <HAL_TIM_ConfigClockSource+0x16c>
 8009d1c:	2b50      	cmp	r3, #80	; 0x50
 8009d1e:	d03c      	beq.n	8009d9a <HAL_TIM_ConfigClockSource+0xfa>
 8009d20:	2b50      	cmp	r3, #80	; 0x50
 8009d22:	d873      	bhi.n	8009e0c <HAL_TIM_ConfigClockSource+0x16c>
 8009d24:	2b40      	cmp	r3, #64	; 0x40
 8009d26:	d058      	beq.n	8009dda <HAL_TIM_ConfigClockSource+0x13a>
 8009d28:	2b40      	cmp	r3, #64	; 0x40
 8009d2a:	d86f      	bhi.n	8009e0c <HAL_TIM_ConfigClockSource+0x16c>
 8009d2c:	2b30      	cmp	r3, #48	; 0x30
 8009d2e:	d064      	beq.n	8009dfa <HAL_TIM_ConfigClockSource+0x15a>
 8009d30:	2b30      	cmp	r3, #48	; 0x30
 8009d32:	d86b      	bhi.n	8009e0c <HAL_TIM_ConfigClockSource+0x16c>
 8009d34:	2b20      	cmp	r3, #32
 8009d36:	d060      	beq.n	8009dfa <HAL_TIM_ConfigClockSource+0x15a>
 8009d38:	2b20      	cmp	r3, #32
 8009d3a:	d867      	bhi.n	8009e0c <HAL_TIM_ConfigClockSource+0x16c>
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d05c      	beq.n	8009dfa <HAL_TIM_ConfigClockSource+0x15a>
 8009d40:	2b10      	cmp	r3, #16
 8009d42:	d05a      	beq.n	8009dfa <HAL_TIM_ConfigClockSource+0x15a>
 8009d44:	e062      	b.n	8009e0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6818      	ldr	r0, [r3, #0]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	6899      	ldr	r1, [r3, #8]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	685a      	ldr	r2, [r3, #4]
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	f000 fb08 	bl	800a36a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009d68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	609a      	str	r2, [r3, #8]
      break;
 8009d72:	e04f      	b.n	8009e14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6818      	ldr	r0, [r3, #0]
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	6899      	ldr	r1, [r3, #8]
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	685a      	ldr	r2, [r3, #4]
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	f000 faf1 	bl	800a36a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	689a      	ldr	r2, [r3, #8]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d96:	609a      	str	r2, [r3, #8]
      break;
 8009d98:	e03c      	b.n	8009e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6818      	ldr	r0, [r3, #0]
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	6859      	ldr	r1, [r3, #4]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	461a      	mov	r2, r3
 8009da8:	f000 fa68 	bl	800a27c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2150      	movs	r1, #80	; 0x50
 8009db2:	4618      	mov	r0, r3
 8009db4:	f000 fabf 	bl	800a336 <TIM_ITRx_SetConfig>
      break;
 8009db8:	e02c      	b.n	8009e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6818      	ldr	r0, [r3, #0]
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	6859      	ldr	r1, [r3, #4]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	f000 fa86 	bl	800a2d8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2160      	movs	r1, #96	; 0x60
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f000 faaf 	bl	800a336 <TIM_ITRx_SetConfig>
      break;
 8009dd8:	e01c      	b.n	8009e14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6818      	ldr	r0, [r3, #0]
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	6859      	ldr	r1, [r3, #4]
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	461a      	mov	r2, r3
 8009de8:	f000 fa48 	bl	800a27c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2140      	movs	r1, #64	; 0x40
 8009df2:	4618      	mov	r0, r3
 8009df4:	f000 fa9f 	bl	800a336 <TIM_ITRx_SetConfig>
      break;
 8009df8:	e00c      	b.n	8009e14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4619      	mov	r1, r3
 8009e04:	4610      	mov	r0, r2
 8009e06:	f000 fa96 	bl	800a336 <TIM_ITRx_SetConfig>
      break;
 8009e0a:	e003      	b.n	8009e14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8009e10:	e000      	b.n	8009e14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009e12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3710      	adds	r7, #16
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
	...

08009e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b085      	sub	sp, #20
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a33      	ldr	r2, [pc, #204]	; (8009f10 <TIM_Base_SetConfig+0xe0>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d013      	beq.n	8009e70 <TIM_Base_SetConfig+0x40>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a32      	ldr	r2, [pc, #200]	; (8009f14 <TIM_Base_SetConfig+0xe4>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d00f      	beq.n	8009e70 <TIM_Base_SetConfig+0x40>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e56:	d00b      	beq.n	8009e70 <TIM_Base_SetConfig+0x40>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	4a2f      	ldr	r2, [pc, #188]	; (8009f18 <TIM_Base_SetConfig+0xe8>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d007      	beq.n	8009e70 <TIM_Base_SetConfig+0x40>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4a2e      	ldr	r2, [pc, #184]	; (8009f1c <TIM_Base_SetConfig+0xec>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d003      	beq.n	8009e70 <TIM_Base_SetConfig+0x40>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4a2d      	ldr	r2, [pc, #180]	; (8009f20 <TIM_Base_SetConfig+0xf0>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d108      	bne.n	8009e82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4a22      	ldr	r2, [pc, #136]	; (8009f10 <TIM_Base_SetConfig+0xe0>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d013      	beq.n	8009eb2 <TIM_Base_SetConfig+0x82>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4a21      	ldr	r2, [pc, #132]	; (8009f14 <TIM_Base_SetConfig+0xe4>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d00f      	beq.n	8009eb2 <TIM_Base_SetConfig+0x82>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e98:	d00b      	beq.n	8009eb2 <TIM_Base_SetConfig+0x82>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4a1e      	ldr	r2, [pc, #120]	; (8009f18 <TIM_Base_SetConfig+0xe8>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d007      	beq.n	8009eb2 <TIM_Base_SetConfig+0x82>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4a1d      	ldr	r2, [pc, #116]	; (8009f1c <TIM_Base_SetConfig+0xec>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d003      	beq.n	8009eb2 <TIM_Base_SetConfig+0x82>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4a1c      	ldr	r2, [pc, #112]	; (8009f20 <TIM_Base_SetConfig+0xf0>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d108      	bne.n	8009ec4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	695b      	ldr	r3, [r3, #20]
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	68fa      	ldr	r2, [r7, #12]
 8009ed6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	689a      	ldr	r2, [r3, #8]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a09      	ldr	r2, [pc, #36]	; (8009f10 <TIM_Base_SetConfig+0xe0>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d003      	beq.n	8009ef8 <TIM_Base_SetConfig+0xc8>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	4a08      	ldr	r2, [pc, #32]	; (8009f14 <TIM_Base_SetConfig+0xe4>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d103      	bne.n	8009f00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	691a      	ldr	r2, [r3, #16]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	615a      	str	r2, [r3, #20]
}
 8009f06:	bf00      	nop
 8009f08:	3714      	adds	r7, #20
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bc80      	pop	{r7}
 8009f0e:	4770      	bx	lr
 8009f10:	40012c00 	.word	0x40012c00
 8009f14:	40013400 	.word	0x40013400
 8009f18:	40000400 	.word	0x40000400
 8009f1c:	40000800 	.word	0x40000800
 8009f20:	40000c00 	.word	0x40000c00

08009f24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b087      	sub	sp, #28
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a1b      	ldr	r3, [r3, #32]
 8009f32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a1b      	ldr	r3, [r3, #32]
 8009f38:	f023 0201 	bic.w	r2, r3, #1
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	699b      	ldr	r3, [r3, #24]
 8009f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f023 0303 	bic.w	r3, r3, #3
 8009f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f023 0302 	bic.w	r3, r3, #2
 8009f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	697a      	ldr	r2, [r7, #20]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a20      	ldr	r2, [pc, #128]	; (8009ffc <TIM_OC1_SetConfig+0xd8>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d003      	beq.n	8009f88 <TIM_OC1_SetConfig+0x64>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	4a1f      	ldr	r2, [pc, #124]	; (800a000 <TIM_OC1_SetConfig+0xdc>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d10c      	bne.n	8009fa2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	f023 0308 	bic.w	r3, r3, #8
 8009f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	f023 0304 	bic.w	r3, r3, #4
 8009fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a15      	ldr	r2, [pc, #84]	; (8009ffc <TIM_OC1_SetConfig+0xd8>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d003      	beq.n	8009fb2 <TIM_OC1_SetConfig+0x8e>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4a14      	ldr	r2, [pc, #80]	; (800a000 <TIM_OC1_SetConfig+0xdc>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d111      	bne.n	8009fd6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	695b      	ldr	r3, [r3, #20]
 8009fc6:	693a      	ldr	r2, [r7, #16]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	699b      	ldr	r3, [r3, #24]
 8009fd0:	693a      	ldr	r2, [r7, #16]
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	693a      	ldr	r2, [r7, #16]
 8009fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	685a      	ldr	r2, [r3, #4]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	697a      	ldr	r2, [r7, #20]
 8009fee:	621a      	str	r2, [r3, #32]
}
 8009ff0:	bf00      	nop
 8009ff2:	371c      	adds	r7, #28
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bc80      	pop	{r7}
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	40012c00 	.word	0x40012c00
 800a000:	40013400 	.word	0x40013400

0800a004 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a004:	b480      	push	{r7}
 800a006:	b087      	sub	sp, #28
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a1b      	ldr	r3, [r3, #32]
 800a012:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a1b      	ldr	r3, [r3, #32]
 800a018:	f023 0210 	bic.w	r2, r3, #16
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	699b      	ldr	r3, [r3, #24]
 800a02a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a03a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	021b      	lsls	r3, r3, #8
 800a042:	68fa      	ldr	r2, [r7, #12]
 800a044:	4313      	orrs	r3, r2
 800a046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	f023 0320 	bic.w	r3, r3, #32
 800a04e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	011b      	lsls	r3, r3, #4
 800a056:	697a      	ldr	r2, [r7, #20]
 800a058:	4313      	orrs	r3, r2
 800a05a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	4a21      	ldr	r2, [pc, #132]	; (800a0e4 <TIM_OC2_SetConfig+0xe0>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d003      	beq.n	800a06c <TIM_OC2_SetConfig+0x68>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a20      	ldr	r2, [pc, #128]	; (800a0e8 <TIM_OC2_SetConfig+0xe4>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d10d      	bne.n	800a088 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	011b      	lsls	r3, r3, #4
 800a07a:	697a      	ldr	r2, [r7, #20]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a086:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a16      	ldr	r2, [pc, #88]	; (800a0e4 <TIM_OC2_SetConfig+0xe0>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d003      	beq.n	800a098 <TIM_OC2_SetConfig+0x94>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a15      	ldr	r2, [pc, #84]	; (800a0e8 <TIM_OC2_SetConfig+0xe4>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d113      	bne.n	800a0c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a09e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	695b      	ldr	r3, [r3, #20]
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	693a      	ldr	r2, [r7, #16]
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	699b      	ldr	r3, [r3, #24]
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	693a      	ldr	r2, [r7, #16]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	693a      	ldr	r2, [r7, #16]
 800a0c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	685a      	ldr	r2, [r3, #4]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	621a      	str	r2, [r3, #32]
}
 800a0da:	bf00      	nop
 800a0dc:	371c      	adds	r7, #28
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bc80      	pop	{r7}
 800a0e2:	4770      	bx	lr
 800a0e4:	40012c00 	.word	0x40012c00
 800a0e8:	40013400 	.word	0x40013400

0800a0ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b087      	sub	sp, #28
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6a1b      	ldr	r3, [r3, #32]
 800a100:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	69db      	ldr	r3, [r3, #28]
 800a112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a11a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f023 0303 	bic.w	r3, r3, #3
 800a122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	021b      	lsls	r3, r3, #8
 800a13c:	697a      	ldr	r2, [r7, #20]
 800a13e:	4313      	orrs	r3, r2
 800a140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a21      	ldr	r2, [pc, #132]	; (800a1cc <TIM_OC3_SetConfig+0xe0>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d003      	beq.n	800a152 <TIM_OC3_SetConfig+0x66>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4a20      	ldr	r2, [pc, #128]	; (800a1d0 <TIM_OC3_SetConfig+0xe4>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d10d      	bne.n	800a16e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a158:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	021b      	lsls	r3, r3, #8
 800a160:	697a      	ldr	r2, [r7, #20]
 800a162:	4313      	orrs	r3, r2
 800a164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a16c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4a16      	ldr	r2, [pc, #88]	; (800a1cc <TIM_OC3_SetConfig+0xe0>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d003      	beq.n	800a17e <TIM_OC3_SetConfig+0x92>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4a15      	ldr	r2, [pc, #84]	; (800a1d0 <TIM_OC3_SetConfig+0xe4>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d113      	bne.n	800a1a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a18c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	695b      	ldr	r3, [r3, #20]
 800a192:	011b      	lsls	r3, r3, #4
 800a194:	693a      	ldr	r2, [r7, #16]
 800a196:	4313      	orrs	r3, r2
 800a198:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	699b      	ldr	r3, [r3, #24]
 800a19e:	011b      	lsls	r3, r3, #4
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	693a      	ldr	r2, [r7, #16]
 800a1aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	685a      	ldr	r2, [r3, #4]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	697a      	ldr	r2, [r7, #20]
 800a1be:	621a      	str	r2, [r3, #32]
}
 800a1c0:	bf00      	nop
 800a1c2:	371c      	adds	r7, #28
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bc80      	pop	{r7}
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	40012c00 	.word	0x40012c00
 800a1d0:	40013400 	.word	0x40013400

0800a1d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b087      	sub	sp, #28
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a1b      	ldr	r3, [r3, #32]
 800a1e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a1b      	ldr	r3, [r3, #32]
 800a1e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	69db      	ldr	r3, [r3, #28]
 800a1fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a20a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	021b      	lsls	r3, r3, #8
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	4313      	orrs	r3, r2
 800a216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a21e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	031b      	lsls	r3, r3, #12
 800a226:	693a      	ldr	r2, [r7, #16]
 800a228:	4313      	orrs	r3, r2
 800a22a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a11      	ldr	r2, [pc, #68]	; (800a274 <TIM_OC4_SetConfig+0xa0>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d003      	beq.n	800a23c <TIM_OC4_SetConfig+0x68>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a10      	ldr	r2, [pc, #64]	; (800a278 <TIM_OC4_SetConfig+0xa4>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d109      	bne.n	800a250 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a242:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	695b      	ldr	r3, [r3, #20]
 800a248:	019b      	lsls	r3, r3, #6
 800a24a:	697a      	ldr	r2, [r7, #20]
 800a24c:	4313      	orrs	r3, r2
 800a24e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	685a      	ldr	r2, [r3, #4]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	693a      	ldr	r2, [r7, #16]
 800a268:	621a      	str	r2, [r3, #32]
}
 800a26a:	bf00      	nop
 800a26c:	371c      	adds	r7, #28
 800a26e:	46bd      	mov	sp, r7
 800a270:	bc80      	pop	{r7}
 800a272:	4770      	bx	lr
 800a274:	40012c00 	.word	0x40012c00
 800a278:	40013400 	.word	0x40013400

0800a27c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b087      	sub	sp, #28
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6a1b      	ldr	r3, [r3, #32]
 800a28c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	6a1b      	ldr	r3, [r3, #32]
 800a292:	f023 0201 	bic.w	r2, r3, #1
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	699b      	ldr	r3, [r3, #24]
 800a29e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	011b      	lsls	r3, r3, #4
 800a2ac:	693a      	ldr	r2, [r7, #16]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	f023 030a 	bic.w	r3, r3, #10
 800a2b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a2ba:	697a      	ldr	r2, [r7, #20]
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	693a      	ldr	r2, [r7, #16]
 800a2c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	621a      	str	r2, [r3, #32]
}
 800a2ce:	bf00      	nop
 800a2d0:	371c      	adds	r7, #28
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bc80      	pop	{r7}
 800a2d6:	4770      	bx	lr

0800a2d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b087      	sub	sp, #28
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6a1b      	ldr	r3, [r3, #32]
 800a2e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6a1b      	ldr	r3, [r3, #32]
 800a2ee:	f023 0210 	bic.w	r2, r3, #16
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	699b      	ldr	r3, [r3, #24]
 800a2fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	031b      	lsls	r3, r3, #12
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	4313      	orrs	r3, r2
 800a30c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a314:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	011b      	lsls	r3, r3, #4
 800a31a:	697a      	ldr	r2, [r7, #20]
 800a31c:	4313      	orrs	r3, r2
 800a31e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	693a      	ldr	r2, [r7, #16]
 800a324:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	697a      	ldr	r2, [r7, #20]
 800a32a:	621a      	str	r2, [r3, #32]
}
 800a32c:	bf00      	nop
 800a32e:	371c      	adds	r7, #28
 800a330:	46bd      	mov	sp, r7
 800a332:	bc80      	pop	{r7}
 800a334:	4770      	bx	lr

0800a336 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a336:	b480      	push	{r7}
 800a338:	b085      	sub	sp, #20
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
 800a33e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a34c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a34e:	683a      	ldr	r2, [r7, #0]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	4313      	orrs	r3, r2
 800a354:	f043 0307 	orr.w	r3, r3, #7
 800a358:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	609a      	str	r2, [r3, #8]
}
 800a360:	bf00      	nop
 800a362:	3714      	adds	r7, #20
 800a364:	46bd      	mov	sp, r7
 800a366:	bc80      	pop	{r7}
 800a368:	4770      	bx	lr

0800a36a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b087      	sub	sp, #28
 800a36e:	af00      	add	r7, sp, #0
 800a370:	60f8      	str	r0, [r7, #12]
 800a372:	60b9      	str	r1, [r7, #8]
 800a374:	607a      	str	r2, [r7, #4]
 800a376:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a384:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	021a      	lsls	r2, r3, #8
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	431a      	orrs	r2, r3
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	4313      	orrs	r3, r2
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	4313      	orrs	r3, r2
 800a396:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	697a      	ldr	r2, [r7, #20]
 800a39c:	609a      	str	r2, [r3, #8]
}
 800a39e:	bf00      	nop
 800a3a0:	371c      	adds	r7, #28
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bc80      	pop	{r7}
 800a3a6:	4770      	bx	lr

0800a3a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b087      	sub	sp, #28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	f003 031f 	and.w	r3, r3, #31
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a3c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6a1a      	ldr	r2, [r3, #32]
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	43db      	mvns	r3, r3
 800a3ca:	401a      	ands	r2, r3
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6a1a      	ldr	r2, [r3, #32]
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	f003 031f 	and.w	r3, r3, #31
 800a3da:	6879      	ldr	r1, [r7, #4]
 800a3dc:	fa01 f303 	lsl.w	r3, r1, r3
 800a3e0:	431a      	orrs	r2, r3
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	621a      	str	r2, [r3, #32]
}
 800a3e6:	bf00      	nop
 800a3e8:	371c      	adds	r7, #28
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bc80      	pop	{r7}
 800a3ee:	4770      	bx	lr

0800a3f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a400:	2b01      	cmp	r3, #1
 800a402:	d101      	bne.n	800a408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a404:	2302      	movs	r3, #2
 800a406:	e050      	b.n	800a4aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2202      	movs	r2, #2
 800a414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a42e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	4313      	orrs	r3, r2
 800a438:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a1b      	ldr	r2, [pc, #108]	; (800a4b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d018      	beq.n	800a47e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a19      	ldr	r2, [pc, #100]	; (800a4b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d013      	beq.n	800a47e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a45e:	d00e      	beq.n	800a47e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a15      	ldr	r2, [pc, #84]	; (800a4bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d009      	beq.n	800a47e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a14      	ldr	r2, [pc, #80]	; (800a4c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d004      	beq.n	800a47e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a12      	ldr	r2, [pc, #72]	; (800a4c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d10c      	bne.n	800a498 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	4313      	orrs	r3, r2
 800a48e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68ba      	ldr	r2, [r7, #8]
 800a496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3714      	adds	r7, #20
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bc80      	pop	{r7}
 800a4b2:	4770      	bx	lr
 800a4b4:	40012c00 	.word	0x40012c00
 800a4b8:	40013400 	.word	0x40013400
 800a4bc:	40000400 	.word	0x40000400
 800a4c0:	40000800 	.word	0x40000800
 800a4c4:	40000c00 	.word	0x40000c00

0800a4c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d101      	bne.n	800a4da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e042      	b.n	800a560 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d106      	bne.n	800a4f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f7f8 ff70 	bl	80033d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2224      	movs	r2, #36	; 0x24
 800a4f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68da      	ldr	r2, [r3, #12]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a50a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 fa07 	bl	800a920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	691a      	ldr	r2, [r3, #16]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a520:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	695a      	ldr	r2, [r3, #20]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a530:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	68da      	ldr	r2, [r3, #12]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a540:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2220      	movs	r2, #32
 800a54c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2220      	movs	r2, #32
 800a554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2200      	movs	r2, #0
 800a55c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	3708      	adds	r7, #8
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d101      	bne.n	800a57a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	e04a      	b.n	800a610 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a580:	b2db      	uxtb	r3, r3
 800a582:	2b00      	cmp	r3, #0
 800a584:	d106      	bne.n	800a594 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f7f8 ff20 	bl	80033d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2224      	movs	r2, #36	; 0x24
 800a598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68da      	ldr	r2, [r3, #12]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a5aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 f9b7 	bl	800a920 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	691a      	ldr	r2, [r3, #16]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a5c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	695a      	ldr	r2, [r3, #20]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800a5d0:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	695a      	ldr	r2, [r3, #20]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f042 0208 	orr.w	r2, r2, #8
 800a5e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	68da      	ldr	r2, [r3, #12]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a5f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2220      	movs	r2, #32
 800a5fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2220      	movs	r2, #32
 800a604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3708      	adds	r7, #8
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b08a      	sub	sp, #40	; 0x28
 800a61c:	af02      	add	r7, sp, #8
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	603b      	str	r3, [r7, #0]
 800a624:	4613      	mov	r3, r2
 800a626:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a628:	2300      	movs	r3, #0
 800a62a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a632:	b2db      	uxtb	r3, r3
 800a634:	2b20      	cmp	r3, #32
 800a636:	d16d      	bne.n	800a714 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d002      	beq.n	800a644 <HAL_UART_Transmit+0x2c>
 800a63e:	88fb      	ldrh	r3, [r7, #6]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d101      	bne.n	800a648 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	e066      	b.n	800a716 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2200      	movs	r2, #0
 800a64c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2221      	movs	r2, #33	; 0x21
 800a652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a656:	f7f8 ffef 	bl	8003638 <HAL_GetTick>
 800a65a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	88fa      	ldrh	r2, [r7, #6]
 800a660:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	88fa      	ldrh	r2, [r7, #6]
 800a666:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a670:	d108      	bne.n	800a684 <HAL_UART_Transmit+0x6c>
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d104      	bne.n	800a684 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a67a:	2300      	movs	r3, #0
 800a67c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	61bb      	str	r3, [r7, #24]
 800a682:	e003      	b.n	800a68c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a688:	2300      	movs	r3, #0
 800a68a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a68c:	e02a      	b.n	800a6e4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	9300      	str	r3, [sp, #0]
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	2200      	movs	r2, #0
 800a696:	2180      	movs	r1, #128	; 0x80
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f000 f8d2 	bl	800a842 <UART_WaitOnFlagUntilTimeout>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d001      	beq.n	800a6a8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	e036      	b.n	800a716 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800a6a8:	69fb      	ldr	r3, [r7, #28]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d10b      	bne.n	800a6c6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	881b      	ldrh	r3, [r3, #0]
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a6bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	3302      	adds	r3, #2
 800a6c2:	61bb      	str	r3, [r7, #24]
 800a6c4:	e007      	b.n	800a6d6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	781a      	ldrb	r2, [r3, #0]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1cf      	bne.n	800a68e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	9300      	str	r3, [sp, #0]
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	2140      	movs	r1, #64	; 0x40
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f000 f8a2 	bl	800a842 <UART_WaitOnFlagUntilTimeout>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d001      	beq.n	800a708 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800a704:	2303      	movs	r3, #3
 800a706:	e006      	b.n	800a716 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2220      	movs	r2, #32
 800a70c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800a710:	2300      	movs	r3, #0
 800a712:	e000      	b.n	800a716 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800a714:	2302      	movs	r3, #2
  }
}
 800a716:	4618      	mov	r0, r3
 800a718:	3720      	adds	r7, #32
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b08a      	sub	sp, #40	; 0x28
 800a722:	af02      	add	r7, sp, #8
 800a724:	60f8      	str	r0, [r7, #12]
 800a726:	60b9      	str	r1, [r7, #8]
 800a728:	603b      	str	r3, [r7, #0]
 800a72a:	4613      	mov	r3, r2
 800a72c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a72e:	2300      	movs	r3, #0
 800a730:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	2b20      	cmp	r3, #32
 800a73c:	d17c      	bne.n	800a838 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d002      	beq.n	800a74a <HAL_UART_Receive+0x2c>
 800a744:	88fb      	ldrh	r3, [r7, #6]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d101      	bne.n	800a74e <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	e075      	b.n	800a83a <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2222      	movs	r2, #34	; 0x22
 800a758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2200      	movs	r2, #0
 800a760:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a762:	f7f8 ff69 	bl	8003638 <HAL_GetTick>
 800a766:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	88fa      	ldrh	r2, [r7, #6]
 800a76c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	88fa      	ldrh	r2, [r7, #6]
 800a772:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a77c:	d108      	bne.n	800a790 <HAL_UART_Receive+0x72>
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d104      	bne.n	800a790 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800a786:	2300      	movs	r3, #0
 800a788:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	61bb      	str	r3, [r7, #24]
 800a78e:	e003      	b.n	800a798 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a794:	2300      	movs	r3, #0
 800a796:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a798:	e043      	b.n	800a822 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	9300      	str	r3, [sp, #0]
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	2120      	movs	r1, #32
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f000 f84c 	bl	800a842 <UART_WaitOnFlagUntilTimeout>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d001      	beq.n	800a7b4 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800a7b0:	2303      	movs	r3, #3
 800a7b2:	e042      	b.n	800a83a <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10c      	bne.n	800a7d4 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7c6:	b29a      	uxth	r2, r3
 800a7c8:	69bb      	ldr	r3, [r7, #24]
 800a7ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	3302      	adds	r3, #2
 800a7d0:	61bb      	str	r3, [r7, #24]
 800a7d2:	e01f      	b.n	800a814 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7dc:	d007      	beq.n	800a7ee <HAL_UART_Receive+0xd0>
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d10a      	bne.n	800a7fc <HAL_UART_Receive+0xde>
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d106      	bne.n	800a7fc <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	b2da      	uxtb	r2, r3
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	701a      	strb	r2, [r3, #0]
 800a7fa:	e008      	b.n	800a80e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	b2db      	uxtb	r3, r3
 800a804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a808:	b2da      	uxtb	r2, r3
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	3301      	adds	r3, #1
 800a812:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a818:	b29b      	uxth	r3, r3
 800a81a:	3b01      	subs	r3, #1
 800a81c:	b29a      	uxth	r2, r3
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a826:	b29b      	uxth	r3, r3
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d1b6      	bne.n	800a79a <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2220      	movs	r2, #32
 800a830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800a834:	2300      	movs	r3, #0
 800a836:	e000      	b.n	800a83a <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a838:	2302      	movs	r3, #2
  }
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3720      	adds	r7, #32
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b090      	sub	sp, #64	; 0x40
 800a846:	af00      	add	r7, sp, #0
 800a848:	60f8      	str	r0, [r7, #12]
 800a84a:	60b9      	str	r1, [r7, #8]
 800a84c:	603b      	str	r3, [r7, #0]
 800a84e:	4613      	mov	r3, r2
 800a850:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a852:	e050      	b.n	800a8f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a85a:	d04c      	beq.n	800a8f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a85c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d007      	beq.n	800a872 <UART_WaitOnFlagUntilTimeout+0x30>
 800a862:	f7f8 fee9 	bl	8003638 <HAL_GetTick>
 800a866:	4602      	mov	r2, r0
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	1ad3      	subs	r3, r2, r3
 800a86c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a86e:	429a      	cmp	r2, r3
 800a870:	d241      	bcs.n	800a8f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	330c      	adds	r3, #12
 800a878:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87c:	e853 3f00 	ldrex	r3, [r3]
 800a880:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a884:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	330c      	adds	r3, #12
 800a890:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a892:	637a      	str	r2, [r7, #52]	; 0x34
 800a894:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a896:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a898:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a89a:	e841 2300 	strex	r3, r2, [r1]
 800a89e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d1e5      	bne.n	800a872 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	3314      	adds	r3, #20
 800a8ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	e853 3f00 	ldrex	r3, [r3]
 800a8b4:	613b      	str	r3, [r7, #16]
   return(result);
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	f023 0301 	bic.w	r3, r3, #1
 800a8bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	3314      	adds	r3, #20
 800a8c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8c6:	623a      	str	r2, [r7, #32]
 800a8c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ca:	69f9      	ldr	r1, [r7, #28]
 800a8cc:	6a3a      	ldr	r2, [r7, #32]
 800a8ce:	e841 2300 	strex	r3, r2, [r1]
 800a8d2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8d4:	69bb      	ldr	r3, [r7, #24]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d1e5      	bne.n	800a8a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2220      	movs	r2, #32
 800a8de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2220      	movs	r2, #32
 800a8e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	e00f      	b.n	800a916 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	4013      	ands	r3, r2
 800a900:	68ba      	ldr	r2, [r7, #8]
 800a902:	429a      	cmp	r2, r3
 800a904:	bf0c      	ite	eq
 800a906:	2301      	moveq	r3, #1
 800a908:	2300      	movne	r3, #0
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	461a      	mov	r2, r3
 800a90e:	79fb      	ldrb	r3, [r7, #7]
 800a910:	429a      	cmp	r2, r3
 800a912:	d09f      	beq.n	800a854 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a914:	2300      	movs	r3, #0
}
 800a916:	4618      	mov	r0, r3
 800a918:	3740      	adds	r7, #64	; 0x40
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
	...

0800a920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	691b      	ldr	r3, [r3, #16]
 800a92e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	68da      	ldr	r2, [r3, #12]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	430a      	orrs	r2, r1
 800a93c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	689a      	ldr	r2, [r3, #8]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	691b      	ldr	r3, [r3, #16]
 800a946:	431a      	orrs	r2, r3
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	695b      	ldr	r3, [r3, #20]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a95a:	f023 030c 	bic.w	r3, r3, #12
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	6812      	ldr	r2, [r2, #0]
 800a962:	68b9      	ldr	r1, [r7, #8]
 800a964:	430b      	orrs	r3, r1
 800a966:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	695b      	ldr	r3, [r3, #20]
 800a96e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	699a      	ldr	r2, [r3, #24]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	430a      	orrs	r2, r1
 800a97c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a2c      	ldr	r2, [pc, #176]	; (800aa34 <UART_SetConfig+0x114>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d103      	bne.n	800a990 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a988:	f7fe fe7e 	bl	8009688 <HAL_RCC_GetPCLK2Freq>
 800a98c:	60f8      	str	r0, [r7, #12]
 800a98e:	e002      	b.n	800a996 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a990:	f7fe fe66 	bl	8009660 <HAL_RCC_GetPCLK1Freq>
 800a994:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	4613      	mov	r3, r2
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	4413      	add	r3, r2
 800a99e:	009a      	lsls	r2, r3, #2
 800a9a0:	441a      	add	r2, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ac:	4a22      	ldr	r2, [pc, #136]	; (800aa38 <UART_SetConfig+0x118>)
 800a9ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a9b2:	095b      	lsrs	r3, r3, #5
 800a9b4:	0119      	lsls	r1, r3, #4
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	4413      	add	r3, r2
 800a9be:	009a      	lsls	r2, r3, #2
 800a9c0:	441a      	add	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	fbb2 f2f3 	udiv	r2, r2, r3
 800a9cc:	4b1a      	ldr	r3, [pc, #104]	; (800aa38 <UART_SetConfig+0x118>)
 800a9ce:	fba3 0302 	umull	r0, r3, r3, r2
 800a9d2:	095b      	lsrs	r3, r3, #5
 800a9d4:	2064      	movs	r0, #100	; 0x64
 800a9d6:	fb00 f303 	mul.w	r3, r0, r3
 800a9da:	1ad3      	subs	r3, r2, r3
 800a9dc:	011b      	lsls	r3, r3, #4
 800a9de:	3332      	adds	r3, #50	; 0x32
 800a9e0:	4a15      	ldr	r2, [pc, #84]	; (800aa38 <UART_SetConfig+0x118>)
 800a9e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9e6:	095b      	lsrs	r3, r3, #5
 800a9e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9ec:	4419      	add	r1, r3
 800a9ee:	68fa      	ldr	r2, [r7, #12]
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	4413      	add	r3, r2
 800a9f6:	009a      	lsls	r2, r3, #2
 800a9f8:	441a      	add	r2, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	fbb2 f2f3 	udiv	r2, r2, r3
 800aa04:	4b0c      	ldr	r3, [pc, #48]	; (800aa38 <UART_SetConfig+0x118>)
 800aa06:	fba3 0302 	umull	r0, r3, r3, r2
 800aa0a:	095b      	lsrs	r3, r3, #5
 800aa0c:	2064      	movs	r0, #100	; 0x64
 800aa0e:	fb00 f303 	mul.w	r3, r0, r3
 800aa12:	1ad3      	subs	r3, r2, r3
 800aa14:	011b      	lsls	r3, r3, #4
 800aa16:	3332      	adds	r3, #50	; 0x32
 800aa18:	4a07      	ldr	r2, [pc, #28]	; (800aa38 <UART_SetConfig+0x118>)
 800aa1a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa1e:	095b      	lsrs	r3, r3, #5
 800aa20:	f003 020f 	and.w	r2, r3, #15
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	440a      	add	r2, r1
 800aa2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800aa2c:	bf00      	nop
 800aa2e:	3710      	adds	r7, #16
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	40013800 	.word	0x40013800
 800aa38:	51eb851f 	.word	0x51eb851f

0800aa3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	b480      	push	{r7}
 800aa40:	b083      	sub	sp, #12
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
 800aa46:	f107 0014 	add.w	r0, r7, #20
 800aa4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	370c      	adds	r7, #12
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bc80      	pop	{r7}
 800aa58:	b004      	add	sp, #16
 800aa5a:	4770      	bx	lr

0800aa5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800aa6c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800aa70:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800aa7c:	2300      	movs	r3, #0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3714      	adds	r7, #20
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bc80      	pop	{r7}
 800aa86:	4770      	bx	lr

0800aa88 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b085      	sub	sp, #20
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800aa90:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800aa94:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800aa9c:	b29a      	uxth	r2, r3
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	43db      	mvns	r3, r3
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800aab0:	2300      	movs	r3, #0
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3714      	adds	r7, #20
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bc80      	pop	{r7}
 800aaba:	4770      	bx	lr

0800aabc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	460b      	mov	r3, r1
 800aac6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	370c      	adds	r7, #12
 800aace:	46bd      	mov	sp, r7
 800aad0:	bc80      	pop	{r7}
 800aad2:	4770      	bx	lr

0800aad4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800aad4:	b084      	sub	sp, #16
 800aad6:	b480      	push	{r7}
 800aad8:	b083      	sub	sp, #12
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
 800aade:	f107 0014 	add.w	r0, r7, #20
 800aae2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2201      	movs	r2, #1
 800aaea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bc80      	pop	{r7}
 800ab10:	b004      	add	sp, #16
 800ab12:	4770      	bx	lr

0800ab14 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b09d      	sub	sp, #116	; 0x74
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	4413      	add	r3, r2
 800ab2e:	881b      	ldrh	r3, [r3, #0]
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800ab36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab3a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	78db      	ldrb	r3, [r3, #3]
 800ab42:	2b03      	cmp	r3, #3
 800ab44:	d81f      	bhi.n	800ab86 <USB_ActivateEndpoint+0x72>
 800ab46:	a201      	add	r2, pc, #4	; (adr r2, 800ab4c <USB_ActivateEndpoint+0x38>)
 800ab48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab4c:	0800ab5d 	.word	0x0800ab5d
 800ab50:	0800ab79 	.word	0x0800ab79
 800ab54:	0800ab8f 	.word	0x0800ab8f
 800ab58:	0800ab6b 	.word	0x0800ab6b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800ab5c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ab60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab64:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ab68:	e012      	b.n	800ab90 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800ab6a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ab6e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800ab72:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ab76:	e00b      	b.n	800ab90 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800ab78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ab7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ab80:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ab84:	e004      	b.n	800ab90 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800ab86:	2301      	movs	r3, #1
 800ab88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800ab8c:	e000      	b.n	800ab90 <USB_ActivateEndpoint+0x7c>
      break;
 800ab8e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	441a      	add	r2, r3
 800ab9a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ab9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abae:	b29b      	uxth	r3, r3
 800abb0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4413      	add	r3, r2
 800abbc:	881b      	ldrh	r3, [r3, #0]
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abc8:	b29a      	uxth	r2, r3
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	b29b      	uxth	r3, r3
 800abd0:	4313      	orrs	r3, r2
 800abd2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	441a      	add	r2, r3
 800abe0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800abe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	7b1b      	ldrb	r3, [r3, #12]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f040 8178 	bne.w	800aef2 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	785b      	ldrb	r3, [r3, #1]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	f000 8084 	beq.w	800ad14 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	61bb      	str	r3, [r7, #24]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	461a      	mov	r2, r3
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	61bb      	str	r3, [r7, #24]
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	011a      	lsls	r2, r3, #4
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	4413      	add	r3, r2
 800ac2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac2e:	617b      	str	r3, [r7, #20]
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	88db      	ldrh	r3, [r3, #6]
 800ac34:	085b      	lsrs	r3, r3, #1
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	005b      	lsls	r3, r3, #1
 800ac3a:	b29a      	uxth	r2, r3
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	4413      	add	r3, r2
 800ac4a:	881b      	ldrh	r3, [r3, #0]
 800ac4c:	827b      	strh	r3, [r7, #18]
 800ac4e:	8a7b      	ldrh	r3, [r7, #18]
 800ac50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d01b      	beq.n	800ac90 <USB_ActivateEndpoint+0x17c>
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	881b      	ldrh	r3, [r3, #0]
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac6e:	823b      	strh	r3, [r7, #16]
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	441a      	add	r2, r3
 800ac7a:	8a3b      	ldrh	r3, [r7, #16]
 800ac7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	78db      	ldrb	r3, [r3, #3]
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d020      	beq.n	800acda <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	4413      	add	r3, r2
 800aca2:	881b      	ldrh	r3, [r3, #0]
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acae:	81bb      	strh	r3, [r7, #12]
 800acb0:	89bb      	ldrh	r3, [r7, #12]
 800acb2:	f083 0320 	eor.w	r3, r3, #32
 800acb6:	81bb      	strh	r3, [r7, #12]
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	441a      	add	r2, r3
 800acc2:	89bb      	ldrh	r3, [r7, #12]
 800acc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800accc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	8013      	strh	r3, [r2, #0]
 800acd8:	e2d5      	b.n	800b286 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	4413      	add	r3, r2
 800ace4:	881b      	ldrh	r3, [r3, #0]
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acf0:	81fb      	strh	r3, [r7, #14]
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	441a      	add	r2, r3
 800acfc:	89fb      	ldrh	r3, [r7, #14]
 800acfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	8013      	strh	r3, [r2, #0]
 800ad12:	e2b8      	b.n	800b286 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	633b      	str	r3, [r7, #48]	; 0x30
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	461a      	mov	r2, r3
 800ad22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad24:	4413      	add	r3, r2
 800ad26:	633b      	str	r3, [r7, #48]	; 0x30
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	011a      	lsls	r2, r3, #4
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad30:	4413      	add	r3, r2
 800ad32:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800ad36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	88db      	ldrh	r3, [r3, #6]
 800ad3c:	085b      	lsrs	r3, r3, #1
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	005b      	lsls	r3, r3, #1
 800ad42:	b29a      	uxth	r2, r3
 800ad44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad46:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	461a      	mov	r2, r3
 800ad56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad58:	4413      	add	r3, r2
 800ad5a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	011a      	lsls	r2, r3, #4
 800ad62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad64:	4413      	add	r3, r2
 800ad66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ad6a:	627b      	str	r3, [r7, #36]	; 0x24
 800ad6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6e:	881b      	ldrh	r3, [r3, #0]
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad76:	b29a      	uxth	r2, r3
 800ad78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7a:	801a      	strh	r2, [r3, #0]
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	691b      	ldr	r3, [r3, #16]
 800ad80:	2b3e      	cmp	r3, #62	; 0x3e
 800ad82:	d91d      	bls.n	800adc0 <USB_ActivateEndpoint+0x2ac>
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	691b      	ldr	r3, [r3, #16]
 800ad88:	095b      	lsrs	r3, r3, #5
 800ad8a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	691b      	ldr	r3, [r3, #16]
 800ad90:	f003 031f 	and.w	r3, r3, #31
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d102      	bne.n	800ad9e <USB_ActivateEndpoint+0x28a>
 800ad98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad9a:	3b01      	subs	r3, #1
 800ad9c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada0:	881b      	ldrh	r3, [r3, #0]
 800ada2:	b29a      	uxth	r2, r3
 800ada4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	029b      	lsls	r3, r3, #10
 800adaa:	b29b      	uxth	r3, r3
 800adac:	4313      	orrs	r3, r2
 800adae:	b29b      	uxth	r3, r3
 800adb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adb8:	b29a      	uxth	r2, r3
 800adba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbc:	801a      	strh	r2, [r3, #0]
 800adbe:	e026      	b.n	800ae0e <USB_ActivateEndpoint+0x2fa>
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	691b      	ldr	r3, [r3, #16]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d10a      	bne.n	800adde <USB_ActivateEndpoint+0x2ca>
 800adc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adca:	881b      	ldrh	r3, [r3, #0]
 800adcc:	b29b      	uxth	r3, r3
 800adce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800add2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800add6:	b29a      	uxth	r2, r3
 800add8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adda:	801a      	strh	r2, [r3, #0]
 800addc:	e017      	b.n	800ae0e <USB_ActivateEndpoint+0x2fa>
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	691b      	ldr	r3, [r3, #16]
 800ade2:	085b      	lsrs	r3, r3, #1
 800ade4:	66bb      	str	r3, [r7, #104]	; 0x68
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	691b      	ldr	r3, [r3, #16]
 800adea:	f003 0301 	and.w	r3, r3, #1
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d002      	beq.n	800adf8 <USB_ActivateEndpoint+0x2e4>
 800adf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800adf4:	3301      	adds	r3, #1
 800adf6:	66bb      	str	r3, [r7, #104]	; 0x68
 800adf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfa:	881b      	ldrh	r3, [r3, #0]
 800adfc:	b29a      	uxth	r2, r3
 800adfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	029b      	lsls	r3, r3, #10
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	4313      	orrs	r3, r2
 800ae08:	b29a      	uxth	r2, r3
 800ae0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	4413      	add	r3, r2
 800ae18:	881b      	ldrh	r3, [r3, #0]
 800ae1a:	847b      	strh	r3, [r7, #34]	; 0x22
 800ae1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d01b      	beq.n	800ae5e <USB_ActivateEndpoint+0x34a>
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	881b      	ldrh	r3, [r3, #0]
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae3c:	843b      	strh	r3, [r7, #32]
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	441a      	add	r2, r3
 800ae48:	8c3b      	ldrh	r3, [r7, #32]
 800ae4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ae56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d124      	bne.n	800aeb0 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	4413      	add	r3, r2
 800ae70:	881b      	ldrh	r3, [r3, #0]
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae7c:	83bb      	strh	r3, [r7, #28]
 800ae7e:	8bbb      	ldrh	r3, [r7, #28]
 800ae80:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ae84:	83bb      	strh	r3, [r7, #28]
 800ae86:	8bbb      	ldrh	r3, [r7, #28]
 800ae88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ae8c:	83bb      	strh	r3, [r7, #28]
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	441a      	add	r2, r3
 800ae98:	8bbb      	ldrh	r3, [r7, #28]
 800ae9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	8013      	strh	r3, [r2, #0]
 800aeae:	e1ea      	b.n	800b286 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	4413      	add	r3, r2
 800aeba:	881b      	ldrh	r3, [r3, #0]
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aec6:	83fb      	strh	r3, [r7, #30]
 800aec8:	8bfb      	ldrh	r3, [r7, #30]
 800aeca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aece:	83fb      	strh	r3, [r7, #30]
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	441a      	add	r2, r3
 800aeda:	8bfb      	ldrh	r3, [r7, #30]
 800aedc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aee0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	8013      	strh	r3, [r2, #0]
 800aef0:	e1c9      	b.n	800b286 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	78db      	ldrb	r3, [r3, #3]
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	d11e      	bne.n	800af38 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	4413      	add	r3, r2
 800af04:	881b      	ldrh	r3, [r3, #0]
 800af06:	b29b      	uxth	r3, r3
 800af08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af10:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	441a      	add	r2, r3
 800af1e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800af22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af2a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800af2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af32:	b29b      	uxth	r3, r3
 800af34:	8013      	strh	r3, [r2, #0]
 800af36:	e01d      	b.n	800af74 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	4413      	add	r3, r2
 800af42:	881b      	ldrh	r3, [r3, #0]
 800af44:	b29b      	uxth	r3, r3
 800af46:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800af4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af4e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	441a      	add	r2, r3
 800af5c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800af60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af70:	b29b      	uxth	r3, r3
 800af72:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af7e:	b29b      	uxth	r3, r3
 800af80:	461a      	mov	r2, r3
 800af82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af84:	4413      	add	r3, r2
 800af86:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	011a      	lsls	r2, r3, #4
 800af8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af90:	4413      	add	r3, r2
 800af92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af96:	65bb      	str	r3, [r7, #88]	; 0x58
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	891b      	ldrh	r3, [r3, #8]
 800af9c:	085b      	lsrs	r3, r3, #1
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	005b      	lsls	r3, r3, #1
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800afa6:	801a      	strh	r2, [r3, #0]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	657b      	str	r3, [r7, #84]	; 0x54
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	461a      	mov	r2, r3
 800afb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afb8:	4413      	add	r3, r2
 800afba:	657b      	str	r3, [r7, #84]	; 0x54
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	011a      	lsls	r2, r3, #4
 800afc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afc4:	4413      	add	r3, r2
 800afc6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800afca:	653b      	str	r3, [r7, #80]	; 0x50
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	895b      	ldrh	r3, [r3, #10]
 800afd0:	085b      	lsrs	r3, r3, #1
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	005b      	lsls	r3, r3, #1
 800afd6:	b29a      	uxth	r2, r3
 800afd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afda:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	785b      	ldrb	r3, [r3, #1]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f040 8093 	bne.w	800b10c <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	4413      	add	r3, r2
 800aff0:	881b      	ldrh	r3, [r3, #0]
 800aff2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800aff6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800affa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800affe:	2b00      	cmp	r3, #0
 800b000:	d01b      	beq.n	800b03a <USB_ActivateEndpoint+0x526>
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	4413      	add	r3, r2
 800b00c:	881b      	ldrh	r3, [r3, #0]
 800b00e:	b29b      	uxth	r3, r3
 800b010:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b018:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	441a      	add	r2, r3
 800b024:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b02a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b02e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b036:	b29b      	uxth	r3, r3
 800b038:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	4413      	add	r3, r2
 800b044:	881b      	ldrh	r3, [r3, #0]
 800b046:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b048:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b04a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d01b      	beq.n	800b08a <USB_ActivateEndpoint+0x576>
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	4413      	add	r3, r2
 800b05c:	881b      	ldrh	r3, [r3, #0]
 800b05e:	b29b      	uxth	r3, r3
 800b060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b068:	877b      	strh	r3, [r7, #58]	; 0x3a
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	441a      	add	r2, r3
 800b074:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b07a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b07e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b082:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b086:	b29b      	uxth	r3, r3
 800b088:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	4413      	add	r3, r2
 800b094:	881b      	ldrh	r3, [r3, #0]
 800b096:	b29b      	uxth	r3, r3
 800b098:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b09c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0a0:	873b      	strh	r3, [r7, #56]	; 0x38
 800b0a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b0a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b0a8:	873b      	strh	r3, [r7, #56]	; 0x38
 800b0aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b0ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b0b0:	873b      	strh	r3, [r7, #56]	; 0x38
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	441a      	add	r2, r3
 800b0bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b0be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	4413      	add	r3, r2
 800b0dc:	881b      	ldrh	r3, [r3, #0]
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0e8:	86fb      	strh	r3, [r7, #54]	; 0x36
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	441a      	add	r2, r3
 800b0f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b0f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b106:	b29b      	uxth	r3, r3
 800b108:	8013      	strh	r3, [r2, #0]
 800b10a:	e0bc      	b.n	800b286 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	4413      	add	r3, r2
 800b116:	881b      	ldrh	r3, [r3, #0]
 800b118:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b11c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b120:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b124:	2b00      	cmp	r3, #0
 800b126:	d01d      	beq.n	800b164 <USB_ActivateEndpoint+0x650>
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	4413      	add	r3, r2
 800b132:	881b      	ldrh	r3, [r3, #0]
 800b134:	b29b      	uxth	r3, r3
 800b136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b13a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b13e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	441a      	add	r2, r3
 800b14c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b158:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b15c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b160:	b29b      	uxth	r3, r3
 800b162:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	4413      	add	r3, r2
 800b16e:	881b      	ldrh	r3, [r3, #0]
 800b170:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b174:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d01d      	beq.n	800b1bc <USB_ActivateEndpoint+0x6a8>
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	4413      	add	r3, r2
 800b18a:	881b      	ldrh	r3, [r3, #0]
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b196:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	441a      	add	r2, r3
 800b1a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b1a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	78db      	ldrb	r3, [r3, #3]
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d024      	beq.n	800b20e <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	4413      	add	r3, r2
 800b1ce:	881b      	ldrh	r3, [r3, #0]
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1da:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800b1de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b1e2:	f083 0320 	eor.w	r3, r3, #32
 800b1e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	441a      	add	r2, r3
 800b1f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b1f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b208:	b29b      	uxth	r3, r3
 800b20a:	8013      	strh	r3, [r2, #0]
 800b20c:	e01d      	b.n	800b24a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	4413      	add	r3, r2
 800b218:	881b      	ldrh	r3, [r3, #0]
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b220:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b224:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	441a      	add	r2, r3
 800b232:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b23a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b23e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b246:	b29b      	uxth	r3, r3
 800b248:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	009b      	lsls	r3, r3, #2
 800b252:	4413      	add	r3, r2
 800b254:	881b      	ldrh	r3, [r3, #0]
 800b256:	b29b      	uxth	r3, r3
 800b258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b25c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b260:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	441a      	add	r2, r3
 800b26e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b27a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b27e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b282:	b29b      	uxth	r3, r3
 800b284:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b286:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3774      	adds	r7, #116	; 0x74
 800b28e:	46bd      	mov	sp, r7
 800b290:	bc80      	pop	{r7}
 800b292:	4770      	bx	lr

0800b294 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b294:	b480      	push	{r7}
 800b296:	b08d      	sub	sp, #52	; 0x34
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	7b1b      	ldrb	r3, [r3, #12]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	f040 808e 	bne.w	800b3c4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	785b      	ldrb	r3, [r3, #1]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d044      	beq.n	800b33a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	4413      	add	r3, r2
 800b2ba:	881b      	ldrh	r3, [r3, #0]
 800b2bc:	81bb      	strh	r3, [r7, #12]
 800b2be:	89bb      	ldrh	r3, [r7, #12]
 800b2c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d01b      	beq.n	800b300 <USB_DeactivateEndpoint+0x6c>
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	4413      	add	r3, r2
 800b2d2:	881b      	ldrh	r3, [r3, #0]
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2de:	817b      	strh	r3, [r7, #10]
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	441a      	add	r2, r3
 800b2ea:	897b      	ldrh	r3, [r7, #10]
 800b2ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	4413      	add	r3, r2
 800b30a:	881b      	ldrh	r3, [r3, #0]
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b316:	813b      	strh	r3, [r7, #8]
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	441a      	add	r2, r3
 800b322:	893b      	ldrh	r3, [r7, #8]
 800b324:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b328:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b32c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b334:	b29b      	uxth	r3, r3
 800b336:	8013      	strh	r3, [r2, #0]
 800b338:	e192      	b.n	800b660 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	4413      	add	r3, r2
 800b344:	881b      	ldrh	r3, [r3, #0]
 800b346:	827b      	strh	r3, [r7, #18]
 800b348:	8a7b      	ldrh	r3, [r7, #18]
 800b34a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d01b      	beq.n	800b38a <USB_DeactivateEndpoint+0xf6>
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	781b      	ldrb	r3, [r3, #0]
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	4413      	add	r3, r2
 800b35c:	881b      	ldrh	r3, [r3, #0]
 800b35e:	b29b      	uxth	r3, r3
 800b360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b368:	823b      	strh	r3, [r7, #16]
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	441a      	add	r2, r3
 800b374:	8a3b      	ldrh	r3, [r7, #16]
 800b376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b37a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b37e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b386:	b29b      	uxth	r3, r3
 800b388:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	4413      	add	r3, r2
 800b394:	881b      	ldrh	r3, [r3, #0]
 800b396:	b29b      	uxth	r3, r3
 800b398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b39c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3a0:	81fb      	strh	r3, [r7, #14]
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	441a      	add	r2, r3
 800b3ac:	89fb      	ldrh	r3, [r7, #14]
 800b3ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	8013      	strh	r3, [r2, #0]
 800b3c2:	e14d      	b.n	800b660 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	785b      	ldrb	r3, [r3, #1]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	f040 80a5 	bne.w	800b518 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	4413      	add	r3, r2
 800b3d8:	881b      	ldrh	r3, [r3, #0]
 800b3da:	843b      	strh	r3, [r7, #32]
 800b3dc:	8c3b      	ldrh	r3, [r7, #32]
 800b3de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d01b      	beq.n	800b41e <USB_DeactivateEndpoint+0x18a>
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	009b      	lsls	r3, r3, #2
 800b3ee:	4413      	add	r3, r2
 800b3f0:	881b      	ldrh	r3, [r3, #0]
 800b3f2:	b29b      	uxth	r3, r3
 800b3f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3fc:	83fb      	strh	r3, [r7, #30]
 800b3fe:	687a      	ldr	r2, [r7, #4]
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	009b      	lsls	r3, r3, #2
 800b406:	441a      	add	r2, r3
 800b408:	8bfb      	ldrh	r3, [r7, #30]
 800b40a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b40e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b412:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	4413      	add	r3, r2
 800b428:	881b      	ldrh	r3, [r3, #0]
 800b42a:	83bb      	strh	r3, [r7, #28]
 800b42c:	8bbb      	ldrh	r3, [r7, #28]
 800b42e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b432:	2b00      	cmp	r3, #0
 800b434:	d01b      	beq.n	800b46e <USB_DeactivateEndpoint+0x1da>
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	4413      	add	r3, r2
 800b440:	881b      	ldrh	r3, [r3, #0]
 800b442:	b29b      	uxth	r3, r3
 800b444:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b44c:	837b      	strh	r3, [r7, #26]
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	441a      	add	r2, r3
 800b458:	8b7b      	ldrh	r3, [r7, #26]
 800b45a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b45e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b466:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	4413      	add	r3, r2
 800b478:	881b      	ldrh	r3, [r3, #0]
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b484:	833b      	strh	r3, [r7, #24]
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	441a      	add	r2, r3
 800b490:	8b3b      	ldrh	r3, [r7, #24]
 800b492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b49a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b49e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	4413      	add	r3, r2
 800b4b0:	881b      	ldrh	r3, [r3, #0]
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b4b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4bc:	82fb      	strh	r3, [r7, #22]
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	441a      	add	r2, r3
 800b4c8:	8afb      	ldrh	r3, [r7, #22]
 800b4ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	4413      	add	r3, r2
 800b4e8:	881b      	ldrh	r3, [r3, #0]
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4f4:	82bb      	strh	r3, [r7, #20]
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	441a      	add	r2, r3
 800b500:	8abb      	ldrh	r3, [r7, #20]
 800b502:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b506:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b50a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b50e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b512:	b29b      	uxth	r3, r3
 800b514:	8013      	strh	r3, [r2, #0]
 800b516:	e0a3      	b.n	800b660 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	4413      	add	r3, r2
 800b522:	881b      	ldrh	r3, [r3, #0]
 800b524:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b526:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d01b      	beq.n	800b568 <USB_DeactivateEndpoint+0x2d4>
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	009b      	lsls	r3, r3, #2
 800b538:	4413      	add	r3, r2
 800b53a:	881b      	ldrh	r3, [r3, #0]
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b546:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	441a      	add	r2, r3
 800b552:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b55c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b564:	b29b      	uxth	r3, r3
 800b566:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	4413      	add	r3, r2
 800b572:	881b      	ldrh	r3, [r3, #0]
 800b574:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b576:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d01b      	beq.n	800b5b8 <USB_DeactivateEndpoint+0x324>
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	4413      	add	r3, r2
 800b58a:	881b      	ldrh	r3, [r3, #0]
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b596:	853b      	strh	r3, [r7, #40]	; 0x28
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	441a      	add	r2, r3
 800b5a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b5a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	4413      	add	r3, r2
 800b5c2:	881b      	ldrh	r3, [r3, #0]
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	441a      	add	r2, r3
 800b5da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b5dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b5e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	4413      	add	r3, r2
 800b5fa:	881b      	ldrh	r3, [r3, #0]
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b602:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b606:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	009b      	lsls	r3, r3, #2
 800b610:	441a      	add	r2, r3
 800b612:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b61c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b624:	b29b      	uxth	r3, r3
 800b626:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	4413      	add	r3, r2
 800b632:	881b      	ldrh	r3, [r3, #0]
 800b634:	b29b      	uxth	r3, r3
 800b636:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b63a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b63e:	847b      	strh	r3, [r7, #34]	; 0x22
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	009b      	lsls	r3, r3, #2
 800b648:	441a      	add	r2, r3
 800b64a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b64c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b650:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b660:	2300      	movs	r3, #0
}
 800b662:	4618      	mov	r0, r3
 800b664:	3734      	adds	r7, #52	; 0x34
 800b666:	46bd      	mov	sp, r7
 800b668:	bc80      	pop	{r7}
 800b66a:	4770      	bx	lr

0800b66c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b0c2      	sub	sp, #264	; 0x108
 800b670:	af00      	add	r7, sp, #0
 800b672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b676:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b67a:	6018      	str	r0, [r3, #0]
 800b67c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b684:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b68a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	785b      	ldrb	r3, [r3, #1]
 800b692:	2b01      	cmp	r3, #1
 800b694:	f040 86b7 	bne.w	800c406 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b69c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	699a      	ldr	r2, [r3, #24]
 800b6a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	691b      	ldr	r3, [r3, #16]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d908      	bls.n	800b6c6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b6b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	691b      	ldr	r3, [r3, #16]
 800b6c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b6c4:	e007      	b.n	800b6d6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b6c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	699b      	ldr	r3, [r3, #24]
 800b6d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b6d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	7b1b      	ldrb	r3, [r3, #12]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d13a      	bne.n	800b75c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b6e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	6959      	ldr	r1, [r3, #20]
 800b6f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	88da      	ldrh	r2, [r3, #6]
 800b6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b702:	b29b      	uxth	r3, r3
 800b704:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b708:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b70c:	6800      	ldr	r0, [r0, #0]
 800b70e:	f001 fc9c 	bl	800d04a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b716:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	613b      	str	r3, [r7, #16]
 800b71e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b722:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	461a      	mov	r2, r3
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	4413      	add	r3, r2
 800b734:	613b      	str	r3, [r7, #16]
 800b736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b73a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	011a      	lsls	r2, r3, #4
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	4413      	add	r3, r2
 800b748:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b74c:	60fb      	str	r3, [r7, #12]
 800b74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b752:	b29a      	uxth	r2, r3
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	801a      	strh	r2, [r3, #0]
 800b758:	f000 be1f 	b.w	800c39a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b75c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	78db      	ldrb	r3, [r3, #3]
 800b768:	2b02      	cmp	r3, #2
 800b76a:	f040 8462 	bne.w	800c032 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b76e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	6a1a      	ldr	r2, [r3, #32]
 800b77a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b77e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	429a      	cmp	r2, r3
 800b788:	f240 83df 	bls.w	800bf4a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b78c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b790:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b79a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	4413      	add	r3, r2
 800b7a6:	881b      	ldrh	r3, [r3, #0]
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7b2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b7b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	441a      	add	r2, r3
 800b7d0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b7d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7dc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b7e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b7e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	6a1a      	ldr	r2, [r3, #32]
 800b7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f8:	1ad2      	subs	r2, r2, r3
 800b7fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b80a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	4413      	add	r3, r2
 800b820:	881b      	ldrh	r3, [r3, #0]
 800b822:	b29b      	uxth	r3, r3
 800b824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b828:	2b00      	cmp	r3, #0
 800b82a:	f000 81c7 	beq.w	800bbbc <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b82e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b832:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	633b      	str	r3, [r7, #48]	; 0x30
 800b83a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b83e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	785b      	ldrb	r3, [r3, #1]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d177      	bne.n	800b93a <USB_EPStartXfer+0x2ce>
 800b84a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b84e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	62bb      	str	r3, [r7, #40]	; 0x28
 800b856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b85a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b864:	b29b      	uxth	r3, r3
 800b866:	461a      	mov	r2, r3
 800b868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86a:	4413      	add	r3, r2
 800b86c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b86e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	011a      	lsls	r2, r3, #4
 800b87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87e:	4413      	add	r3, r2
 800b880:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b884:	627b      	str	r3, [r7, #36]	; 0x24
 800b886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b888:	881b      	ldrh	r3, [r3, #0]
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b890:	b29a      	uxth	r2, r3
 800b892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b894:	801a      	strh	r2, [r3, #0]
 800b896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b89a:	2b3e      	cmp	r3, #62	; 0x3e
 800b89c:	d921      	bls.n	800b8e2 <USB_EPStartXfer+0x276>
 800b89e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a2:	095b      	lsrs	r3, r3, #5
 800b8a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b8a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ac:	f003 031f 	and.w	r3, r3, #31
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d104      	bne.n	800b8be <USB_EPStartXfer+0x252>
 800b8b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c0:	881b      	ldrh	r3, [r3, #0]
 800b8c2:	b29a      	uxth	r2, r3
 800b8c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	029b      	lsls	r3, r3, #10
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8da:	b29a      	uxth	r2, r3
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8de:	801a      	strh	r2, [r3, #0]
 800b8e0:	e050      	b.n	800b984 <USB_EPStartXfer+0x318>
 800b8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d10a      	bne.n	800b900 <USB_EPStartXfer+0x294>
 800b8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ec:	881b      	ldrh	r3, [r3, #0]
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fc:	801a      	strh	r2, [r3, #0]
 800b8fe:	e041      	b.n	800b984 <USB_EPStartXfer+0x318>
 800b900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b904:	085b      	lsrs	r3, r3, #1
 800b906:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b90a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b90e:	f003 0301 	and.w	r3, r3, #1
 800b912:	2b00      	cmp	r3, #0
 800b914:	d004      	beq.n	800b920 <USB_EPStartXfer+0x2b4>
 800b916:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b91a:	3301      	adds	r3, #1
 800b91c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b922:	881b      	ldrh	r3, [r3, #0]
 800b924:	b29a      	uxth	r2, r3
 800b926:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	029b      	lsls	r3, r3, #10
 800b92e:	b29b      	uxth	r3, r3
 800b930:	4313      	orrs	r3, r2
 800b932:	b29a      	uxth	r2, r3
 800b934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b936:	801a      	strh	r2, [r3, #0]
 800b938:	e024      	b.n	800b984 <USB_EPStartXfer+0x318>
 800b93a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b93e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	785b      	ldrb	r3, [r3, #1]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d11c      	bne.n	800b984 <USB_EPStartXfer+0x318>
 800b94a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b94e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b958:	b29b      	uxth	r3, r3
 800b95a:	461a      	mov	r2, r3
 800b95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95e:	4413      	add	r3, r2
 800b960:	633b      	str	r3, [r7, #48]	; 0x30
 800b962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	011a      	lsls	r2, r3, #4
 800b970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b972:	4413      	add	r3, r2
 800b974:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b97a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b97e:	b29a      	uxth	r2, r3
 800b980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b982:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	895b      	ldrh	r3, [r3, #10]
 800b990:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	6959      	ldr	r1, [r3, #20]
 800b9a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b9aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b9ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b9b2:	6800      	ldr	r0, [r0, #0]
 800b9b4:	f001 fb49 	bl	800d04a <USB_WritePMA>
            ep->xfer_buff += len;
 800b9b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	695a      	ldr	r2, [r3, #20]
 800b9c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c8:	441a      	add	r2, r3
 800b9ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b9d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	6a1a      	ldr	r2, [r3, #32]
 800b9e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d90f      	bls.n	800ba12 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b9f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	6a1a      	ldr	r2, [r3, #32]
 800b9fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba02:	1ad2      	subs	r2, r2, r3
 800ba04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	621a      	str	r2, [r3, #32]
 800ba10:	e00e      	b.n	800ba30 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800ba12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	6a1b      	ldr	r3, [r3, #32]
 800ba1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800ba22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ba30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	785b      	ldrb	r3, [r3, #1]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d177      	bne.n	800bb30 <USB_EPStartXfer+0x4c4>
 800ba40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	61bb      	str	r3, [r7, #24]
 800ba4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	69bb      	ldr	r3, [r7, #24]
 800ba60:	4413      	add	r3, r2
 800ba62:	61bb      	str	r3, [r7, #24]
 800ba64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	011a      	lsls	r2, r3, #4
 800ba72:	69bb      	ldr	r3, [r7, #24]
 800ba74:	4413      	add	r3, r2
 800ba76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ba7a:	617b      	str	r3, [r7, #20]
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	881b      	ldrh	r3, [r3, #0]
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba86:	b29a      	uxth	r2, r3
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	801a      	strh	r2, [r3, #0]
 800ba8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba90:	2b3e      	cmp	r3, #62	; 0x3e
 800ba92:	d921      	bls.n	800bad8 <USB_EPStartXfer+0x46c>
 800ba94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba98:	095b      	lsrs	r3, r3, #5
 800ba9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ba9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baa2:	f003 031f 	and.w	r3, r3, #31
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d104      	bne.n	800bab4 <USB_EPStartXfer+0x448>
 800baaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800baae:	3b01      	subs	r3, #1
 800bab0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	881b      	ldrh	r3, [r3, #0]
 800bab8:	b29a      	uxth	r2, r3
 800baba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800babe:	b29b      	uxth	r3, r3
 800bac0:	029b      	lsls	r3, r3, #10
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	4313      	orrs	r3, r2
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bacc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	801a      	strh	r2, [r3, #0]
 800bad6:	e056      	b.n	800bb86 <USB_EPStartXfer+0x51a>
 800bad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800badc:	2b00      	cmp	r3, #0
 800bade:	d10a      	bne.n	800baf6 <USB_EPStartXfer+0x48a>
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	881b      	ldrh	r3, [r3, #0]
 800bae4:	b29b      	uxth	r3, r3
 800bae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800baea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800baee:	b29a      	uxth	r2, r3
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	801a      	strh	r2, [r3, #0]
 800baf4:	e047      	b.n	800bb86 <USB_EPStartXfer+0x51a>
 800baf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bafa:	085b      	lsrs	r3, r3, #1
 800bafc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bb00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb04:	f003 0301 	and.w	r3, r3, #1
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d004      	beq.n	800bb16 <USB_EPStartXfer+0x4aa>
 800bb0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb10:	3301      	adds	r3, #1
 800bb12:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	881b      	ldrh	r3, [r3, #0]
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	029b      	lsls	r3, r3, #10
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	4313      	orrs	r3, r2
 800bb28:	b29a      	uxth	r2, r3
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	801a      	strh	r2, [r3, #0]
 800bb2e:	e02a      	b.n	800bb86 <USB_EPStartXfer+0x51a>
 800bb30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	785b      	ldrb	r3, [r3, #1]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d122      	bne.n	800bb86 <USB_EPStartXfer+0x51a>
 800bb40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	623b      	str	r3, [r7, #32]
 800bb4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	6a3b      	ldr	r3, [r7, #32]
 800bb60:	4413      	add	r3, r2
 800bb62:	623b      	str	r3, [r7, #32]
 800bb64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	011a      	lsls	r2, r3, #4
 800bb72:	6a3b      	ldr	r3, [r7, #32]
 800bb74:	4413      	add	r3, r2
 800bb76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bb7a:	61fb      	str	r3, [r7, #28]
 800bb7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb80:	b29a      	uxth	r2, r3
 800bb82:	69fb      	ldr	r3, [r7, #28]
 800bb84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bb86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	891b      	ldrh	r3, [r3, #8]
 800bb92:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	6959      	ldr	r1, [r3, #20]
 800bba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bbac:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bbb0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bbb4:	6800      	ldr	r0, [r0, #0]
 800bbb6:	f001 fa48 	bl	800d04a <USB_WritePMA>
 800bbba:	e3ee      	b.n	800c39a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bbbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	785b      	ldrb	r3, [r3, #1]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d177      	bne.n	800bcbc <USB_EPStartXfer+0x650>
 800bbcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	461a      	mov	r2, r3
 800bbea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbec:	4413      	add	r3, r2
 800bbee:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	011a      	lsls	r2, r3, #4
 800bbfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc00:	4413      	add	r3, r2
 800bc02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bc06:	647b      	str	r3, [r7, #68]	; 0x44
 800bc08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc0a:	881b      	ldrh	r3, [r3, #0]
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc12:	b29a      	uxth	r2, r3
 800bc14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc16:	801a      	strh	r2, [r3, #0]
 800bc18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc1c:	2b3e      	cmp	r3, #62	; 0x3e
 800bc1e:	d921      	bls.n	800bc64 <USB_EPStartXfer+0x5f8>
 800bc20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc24:	095b      	lsrs	r3, r3, #5
 800bc26:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bc2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc2e:	f003 031f 	and.w	r3, r3, #31
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d104      	bne.n	800bc40 <USB_EPStartXfer+0x5d4>
 800bc36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bc40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc42:	881b      	ldrh	r3, [r3, #0]
 800bc44:	b29a      	uxth	r2, r3
 800bc46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	029b      	lsls	r3, r3, #10
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	4313      	orrs	r3, r2
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc5c:	b29a      	uxth	r2, r3
 800bc5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc60:	801a      	strh	r2, [r3, #0]
 800bc62:	e056      	b.n	800bd12 <USB_EPStartXfer+0x6a6>
 800bc64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d10a      	bne.n	800bc82 <USB_EPStartXfer+0x616>
 800bc6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc6e:	881b      	ldrh	r3, [r3, #0]
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc7a:	b29a      	uxth	r2, r3
 800bc7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc7e:	801a      	strh	r2, [r3, #0]
 800bc80:	e047      	b.n	800bd12 <USB_EPStartXfer+0x6a6>
 800bc82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc86:	085b      	lsrs	r3, r3, #1
 800bc88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bc8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc90:	f003 0301 	and.w	r3, r3, #1
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d004      	beq.n	800bca2 <USB_EPStartXfer+0x636>
 800bc98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bca4:	881b      	ldrh	r3, [r3, #0]
 800bca6:	b29a      	uxth	r2, r3
 800bca8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bcac:	b29b      	uxth	r3, r3
 800bcae:	029b      	lsls	r3, r3, #10
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	b29a      	uxth	r2, r3
 800bcb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcb8:	801a      	strh	r2, [r3, #0]
 800bcba:	e02a      	b.n	800bd12 <USB_EPStartXfer+0x6a6>
 800bcbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	785b      	ldrb	r3, [r3, #1]
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d122      	bne.n	800bd12 <USB_EPStartXfer+0x6a6>
 800bccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	653b      	str	r3, [r7, #80]	; 0x50
 800bcd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	461a      	mov	r2, r3
 800bcea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcec:	4413      	add	r3, r2
 800bcee:	653b      	str	r3, [r7, #80]	; 0x50
 800bcf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	011a      	lsls	r2, r3, #4
 800bcfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd00:	4413      	add	r3, r2
 800bd02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bd06:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd0c:	b29a      	uxth	r2, r3
 800bd0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bd12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	891b      	ldrh	r3, [r3, #8]
 800bd1e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bd22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	6959      	ldr	r1, [r3, #20]
 800bd2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bd38:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bd3c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bd40:	6800      	ldr	r0, [r0, #0]
 800bd42:	f001 f982 	bl	800d04a <USB_WritePMA>
            ep->xfer_buff += len;
 800bd46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	695a      	ldr	r2, [r3, #20]
 800bd52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd56:	441a      	add	r2, r3
 800bd58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bd64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	6a1a      	ldr	r2, [r3, #32]
 800bd70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	691b      	ldr	r3, [r3, #16]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d90f      	bls.n	800bda0 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800bd80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	6a1a      	ldr	r2, [r3, #32]
 800bd8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd90:	1ad2      	subs	r2, r2, r3
 800bd92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	621a      	str	r2, [r3, #32]
 800bd9e:	e00e      	b.n	800bdbe <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800bda0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bda4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	6a1b      	ldr	r3, [r3, #32]
 800bdac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800bdb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bdbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	643b      	str	r3, [r7, #64]	; 0x40
 800bdca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	785b      	ldrb	r3, [r3, #1]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d177      	bne.n	800beca <USB_EPStartXfer+0x85e>
 800bdda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	63bb      	str	r3, [r7, #56]	; 0x38
 800bde6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfa:	4413      	add	r3, r2
 800bdfc:	63bb      	str	r3, [r7, #56]	; 0x38
 800bdfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	011a      	lsls	r2, r3, #4
 800be0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0e:	4413      	add	r3, r2
 800be10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800be14:	637b      	str	r3, [r7, #52]	; 0x34
 800be16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be18:	881b      	ldrh	r3, [r3, #0]
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be20:	b29a      	uxth	r2, r3
 800be22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be24:	801a      	strh	r2, [r3, #0]
 800be26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be2a:	2b3e      	cmp	r3, #62	; 0x3e
 800be2c:	d921      	bls.n	800be72 <USB_EPStartXfer+0x806>
 800be2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be32:	095b      	lsrs	r3, r3, #5
 800be34:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800be38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be3c:	f003 031f 	and.w	r3, r3, #31
 800be40:	2b00      	cmp	r3, #0
 800be42:	d104      	bne.n	800be4e <USB_EPStartXfer+0x7e2>
 800be44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be48:	3b01      	subs	r3, #1
 800be4a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800be4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be50:	881b      	ldrh	r3, [r3, #0]
 800be52:	b29a      	uxth	r2, r3
 800be54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be58:	b29b      	uxth	r3, r3
 800be5a:	029b      	lsls	r3, r3, #10
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	4313      	orrs	r3, r2
 800be60:	b29b      	uxth	r3, r3
 800be62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be6a:	b29a      	uxth	r2, r3
 800be6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be6e:	801a      	strh	r2, [r3, #0]
 800be70:	e050      	b.n	800bf14 <USB_EPStartXfer+0x8a8>
 800be72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be76:	2b00      	cmp	r3, #0
 800be78:	d10a      	bne.n	800be90 <USB_EPStartXfer+0x824>
 800be7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be7c:	881b      	ldrh	r3, [r3, #0]
 800be7e:	b29b      	uxth	r3, r3
 800be80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be88:	b29a      	uxth	r2, r3
 800be8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be8c:	801a      	strh	r2, [r3, #0]
 800be8e:	e041      	b.n	800bf14 <USB_EPStartXfer+0x8a8>
 800be90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be94:	085b      	lsrs	r3, r3, #1
 800be96:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800be9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be9e:	f003 0301 	and.w	r3, r3, #1
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d004      	beq.n	800beb0 <USB_EPStartXfer+0x844>
 800bea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800beaa:	3301      	adds	r3, #1
 800beac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800beb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beb2:	881b      	ldrh	r3, [r3, #0]
 800beb4:	b29a      	uxth	r2, r3
 800beb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800beba:	b29b      	uxth	r3, r3
 800bebc:	029b      	lsls	r3, r3, #10
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	4313      	orrs	r3, r2
 800bec2:	b29a      	uxth	r2, r3
 800bec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bec6:	801a      	strh	r2, [r3, #0]
 800bec8:	e024      	b.n	800bf14 <USB_EPStartXfer+0x8a8>
 800beca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	785b      	ldrb	r3, [r3, #1]
 800bed6:	2b01      	cmp	r3, #1
 800bed8:	d11c      	bne.n	800bf14 <USB_EPStartXfer+0x8a8>
 800beda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bede:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bee8:	b29b      	uxth	r3, r3
 800beea:	461a      	mov	r2, r3
 800beec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beee:	4413      	add	r3, r2
 800bef0:	643b      	str	r3, [r7, #64]	; 0x40
 800bef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	011a      	lsls	r2, r3, #4
 800bf00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf02:	4413      	add	r3, r2
 800bf04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bf08:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf0e:	b29a      	uxth	r2, r3
 800bf10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf12:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bf14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	895b      	ldrh	r3, [r3, #10]
 800bf20:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bf24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	6959      	ldr	r1, [r3, #20]
 800bf30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bf3a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bf3e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bf42:	6800      	ldr	r0, [r0, #0]
 800bf44:	f001 f881 	bl	800d04a <USB_WritePMA>
 800bf48:	e227      	b.n	800c39a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800bf4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	6a1b      	ldr	r3, [r3, #32]
 800bf56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800bf5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	4413      	add	r3, r2
 800bf74:	881b      	ldrh	r3, [r3, #0]
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bf7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf80:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800bf84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	441a      	add	r2, r3
 800bf9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800bfa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bfa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bfaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bfae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bfb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bfc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfd6:	4413      	add	r3, r2
 800bfd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bfda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	011a      	lsls	r2, r3, #4
 800bfe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfea:	4413      	add	r3, r2
 800bfec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bff0:	65bb      	str	r3, [r7, #88]	; 0x58
 800bff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bff6:	b29a      	uxth	r2, r3
 800bff8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bffa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	891b      	ldrh	r3, [r3, #8]
 800c008:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c00c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	6959      	ldr	r1, [r3, #20]
 800c018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c022:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c026:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c02a:	6800      	ldr	r0, [r0, #0]
 800c02c:	f001 f80d 	bl	800d04a <USB_WritePMA>
 800c030:	e1b3      	b.n	800c39a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	6a1a      	ldr	r2, [r3, #32]
 800c03e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c042:	1ad2      	subs	r2, r2, r3
 800c044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c054:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c05e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	4413      	add	r3, r2
 800c06a:	881b      	ldrh	r3, [r3, #0]
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c072:	2b00      	cmp	r3, #0
 800c074:	f000 80c6 	beq.w	800c204 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c07c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	673b      	str	r3, [r7, #112]	; 0x70
 800c084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	785b      	ldrb	r3, [r3, #1]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d177      	bne.n	800c184 <USB_EPStartXfer+0xb18>
 800c094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c098:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c0a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c0b4:	4413      	add	r3, r2
 800c0b6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c0b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	011a      	lsls	r2, r3, #4
 800c0c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c0c8:	4413      	add	r3, r2
 800c0ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c0ce:	667b      	str	r3, [r7, #100]	; 0x64
 800c0d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0d2:	881b      	ldrh	r3, [r3, #0]
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c0da:	b29a      	uxth	r2, r3
 800c0dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0de:	801a      	strh	r2, [r3, #0]
 800c0e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0e4:	2b3e      	cmp	r3, #62	; 0x3e
 800c0e6:	d921      	bls.n	800c12c <USB_EPStartXfer+0xac0>
 800c0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0ec:	095b      	lsrs	r3, r3, #5
 800c0ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c0f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0f6:	f003 031f 	and.w	r3, r3, #31
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d104      	bne.n	800c108 <USB_EPStartXfer+0xa9c>
 800c0fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c102:	3b01      	subs	r3, #1
 800c104:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c10a:	881b      	ldrh	r3, [r3, #0]
 800c10c:	b29a      	uxth	r2, r3
 800c10e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c112:	b29b      	uxth	r3, r3
 800c114:	029b      	lsls	r3, r3, #10
 800c116:	b29b      	uxth	r3, r3
 800c118:	4313      	orrs	r3, r2
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c124:	b29a      	uxth	r2, r3
 800c126:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c128:	801a      	strh	r2, [r3, #0]
 800c12a:	e050      	b.n	800c1ce <USB_EPStartXfer+0xb62>
 800c12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c130:	2b00      	cmp	r3, #0
 800c132:	d10a      	bne.n	800c14a <USB_EPStartXfer+0xade>
 800c134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c136:	881b      	ldrh	r3, [r3, #0]
 800c138:	b29b      	uxth	r3, r3
 800c13a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c13e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c142:	b29a      	uxth	r2, r3
 800c144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c146:	801a      	strh	r2, [r3, #0]
 800c148:	e041      	b.n	800c1ce <USB_EPStartXfer+0xb62>
 800c14a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c14e:	085b      	lsrs	r3, r3, #1
 800c150:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c158:	f003 0301 	and.w	r3, r3, #1
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d004      	beq.n	800c16a <USB_EPStartXfer+0xafe>
 800c160:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c164:	3301      	adds	r3, #1
 800c166:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c16a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c16c:	881b      	ldrh	r3, [r3, #0]
 800c16e:	b29a      	uxth	r2, r3
 800c170:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c174:	b29b      	uxth	r3, r3
 800c176:	029b      	lsls	r3, r3, #10
 800c178:	b29b      	uxth	r3, r3
 800c17a:	4313      	orrs	r3, r2
 800c17c:	b29a      	uxth	r2, r3
 800c17e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c180:	801a      	strh	r2, [r3, #0]
 800c182:	e024      	b.n	800c1ce <USB_EPStartXfer+0xb62>
 800c184:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c188:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	785b      	ldrb	r3, [r3, #1]
 800c190:	2b01      	cmp	r3, #1
 800c192:	d11c      	bne.n	800c1ce <USB_EPStartXfer+0xb62>
 800c194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c198:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c1a8:	4413      	add	r3, r2
 800c1aa:	673b      	str	r3, [r7, #112]	; 0x70
 800c1ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	011a      	lsls	r2, r3, #4
 800c1ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c1bc:	4413      	add	r3, r2
 800c1be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c1c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c1ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	895b      	ldrh	r3, [r3, #10]
 800c1da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c1de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6959      	ldr	r1, [r3, #20]
 800c1ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c1f4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c1f8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c1fc:	6800      	ldr	r0, [r0, #0]
 800c1fe:	f000 ff24 	bl	800d04a <USB_WritePMA>
 800c202:	e0ca      	b.n	800c39a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	785b      	ldrb	r3, [r3, #1]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d177      	bne.n	800c304 <USB_EPStartXfer+0xc98>
 800c214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c218:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c224:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c22e:	b29b      	uxth	r3, r3
 800c230:	461a      	mov	r2, r3
 800c232:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c234:	4413      	add	r3, r2
 800c236:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c23c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	011a      	lsls	r2, r3, #4
 800c246:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c248:	4413      	add	r3, r2
 800c24a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c24e:	67bb      	str	r3, [r7, #120]	; 0x78
 800c250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c252:	881b      	ldrh	r3, [r3, #0]
 800c254:	b29b      	uxth	r3, r3
 800c256:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c25a:	b29a      	uxth	r2, r3
 800c25c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c25e:	801a      	strh	r2, [r3, #0]
 800c260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c264:	2b3e      	cmp	r3, #62	; 0x3e
 800c266:	d921      	bls.n	800c2ac <USB_EPStartXfer+0xc40>
 800c268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c26c:	095b      	lsrs	r3, r3, #5
 800c26e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c276:	f003 031f 	and.w	r3, r3, #31
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d104      	bne.n	800c288 <USB_EPStartXfer+0xc1c>
 800c27e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c282:	3b01      	subs	r3, #1
 800c284:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c28a:	881b      	ldrh	r3, [r3, #0]
 800c28c:	b29a      	uxth	r2, r3
 800c28e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c292:	b29b      	uxth	r3, r3
 800c294:	029b      	lsls	r3, r3, #10
 800c296:	b29b      	uxth	r3, r3
 800c298:	4313      	orrs	r3, r2
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2a4:	b29a      	uxth	r2, r3
 800c2a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2a8:	801a      	strh	r2, [r3, #0]
 800c2aa:	e05c      	b.n	800c366 <USB_EPStartXfer+0xcfa>
 800c2ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d10a      	bne.n	800c2ca <USB_EPStartXfer+0xc5e>
 800c2b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2b6:	881b      	ldrh	r3, [r3, #0]
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2c2:	b29a      	uxth	r2, r3
 800c2c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2c6:	801a      	strh	r2, [r3, #0]
 800c2c8:	e04d      	b.n	800c366 <USB_EPStartXfer+0xcfa>
 800c2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2ce:	085b      	lsrs	r3, r3, #1
 800c2d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2d8:	f003 0301 	and.w	r3, r3, #1
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d004      	beq.n	800c2ea <USB_EPStartXfer+0xc7e>
 800c2e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c2ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2ec:	881b      	ldrh	r3, [r3, #0]
 800c2ee:	b29a      	uxth	r2, r3
 800c2f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	029b      	lsls	r3, r3, #10
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	b29a      	uxth	r2, r3
 800c2fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c300:	801a      	strh	r2, [r3, #0]
 800c302:	e030      	b.n	800c366 <USB_EPStartXfer+0xcfa>
 800c304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	785b      	ldrb	r3, [r3, #1]
 800c310:	2b01      	cmp	r3, #1
 800c312:	d128      	bne.n	800c366 <USB_EPStartXfer+0xcfa>
 800c314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c318:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c326:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c330:	b29b      	uxth	r3, r3
 800c332:	461a      	mov	r2, r3
 800c334:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c338:	4413      	add	r3, r2
 800c33a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c33e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	011a      	lsls	r2, r3, #4
 800c34c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c350:	4413      	add	r3, r2
 800c352:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c356:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c35e:	b29a      	uxth	r2, r3
 800c360:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c364:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c36a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	891b      	ldrh	r3, [r3, #8]
 800c372:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c37a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	6959      	ldr	r1, [r3, #20]
 800c382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c386:	b29b      	uxth	r3, r3
 800c388:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c38c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c390:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c394:	6800      	ldr	r0, [r0, #0]
 800c396:	f000 fe58 	bl	800d04a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c39a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c39e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	009b      	lsls	r3, r3, #2
 800c3b2:	4413      	add	r3, r2
 800c3b4:	881b      	ldrh	r3, [r3, #0]
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3c0:	817b      	strh	r3, [r7, #10]
 800c3c2:	897b      	ldrh	r3, [r7, #10]
 800c3c4:	f083 0310 	eor.w	r3, r3, #16
 800c3c8:	817b      	strh	r3, [r7, #10]
 800c3ca:	897b      	ldrh	r3, [r7, #10]
 800c3cc:	f083 0320 	eor.w	r3, r3, #32
 800c3d0:	817b      	strh	r3, [r7, #10]
 800c3d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	009b      	lsls	r3, r3, #2
 800c3ea:	441a      	add	r2, r3
 800c3ec:	897b      	ldrh	r3, [r7, #10]
 800c3ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	8013      	strh	r3, [r2, #0]
 800c402:	f000 bcde 	b.w	800cdc2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c40a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	7b1b      	ldrb	r3, [r3, #12]
 800c412:	2b00      	cmp	r3, #0
 800c414:	f040 80bb 	bne.w	800c58e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c41c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	699a      	ldr	r2, [r3, #24]
 800c424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	691b      	ldr	r3, [r3, #16]
 800c430:	429a      	cmp	r2, r3
 800c432:	d917      	bls.n	800c464 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800c434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	691b      	ldr	r3, [r3, #16]
 800c440:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800c444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	699a      	ldr	r2, [r3, #24]
 800c450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c454:	1ad2      	subs	r2, r2, r3
 800c456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c45a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	619a      	str	r2, [r3, #24]
 800c462:	e00e      	b.n	800c482 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800c464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	699b      	ldr	r3, [r3, #24]
 800c470:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800c474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	2200      	movs	r2, #0
 800c480:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c486:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c494:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c4a6:	4413      	add	r3, r2
 800c4a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c4ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	011a      	lsls	r2, r3, #4
 800c4ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c4be:	4413      	add	r3, r2
 800c4c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c4c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c4c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c4cc:	881b      	ldrh	r3, [r3, #0]
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4d4:	b29a      	uxth	r2, r3
 800c4d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c4da:	801a      	strh	r2, [r3, #0]
 800c4dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4e0:	2b3e      	cmp	r3, #62	; 0x3e
 800c4e2:	d924      	bls.n	800c52e <USB_EPStartXfer+0xec2>
 800c4e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4e8:	095b      	lsrs	r3, r3, #5
 800c4ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c4ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4f2:	f003 031f 	and.w	r3, r3, #31
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d104      	bne.n	800c504 <USB_EPStartXfer+0xe98>
 800c4fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c4fe:	3b01      	subs	r3, #1
 800c500:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c508:	881b      	ldrh	r3, [r3, #0]
 800c50a:	b29a      	uxth	r2, r3
 800c50c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c510:	b29b      	uxth	r3, r3
 800c512:	029b      	lsls	r3, r3, #10
 800c514:	b29b      	uxth	r3, r3
 800c516:	4313      	orrs	r3, r2
 800c518:	b29b      	uxth	r3, r3
 800c51a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c51e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c522:	b29a      	uxth	r2, r3
 800c524:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c528:	801a      	strh	r2, [r3, #0]
 800c52a:	f000 bc10 	b.w	800cd4e <USB_EPStartXfer+0x16e2>
 800c52e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c532:	2b00      	cmp	r3, #0
 800c534:	d10c      	bne.n	800c550 <USB_EPStartXfer+0xee4>
 800c536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c53a:	881b      	ldrh	r3, [r3, #0]
 800c53c:	b29b      	uxth	r3, r3
 800c53e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c546:	b29a      	uxth	r2, r3
 800c548:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c54c:	801a      	strh	r2, [r3, #0]
 800c54e:	e3fe      	b.n	800cd4e <USB_EPStartXfer+0x16e2>
 800c550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c554:	085b      	lsrs	r3, r3, #1
 800c556:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c55e:	f003 0301 	and.w	r3, r3, #1
 800c562:	2b00      	cmp	r3, #0
 800c564:	d004      	beq.n	800c570 <USB_EPStartXfer+0xf04>
 800c566:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c56a:	3301      	adds	r3, #1
 800c56c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c570:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c574:	881b      	ldrh	r3, [r3, #0]
 800c576:	b29a      	uxth	r2, r3
 800c578:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	029b      	lsls	r3, r3, #10
 800c580:	b29b      	uxth	r3, r3
 800c582:	4313      	orrs	r3, r2
 800c584:	b29a      	uxth	r2, r3
 800c586:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c58a:	801a      	strh	r2, [r3, #0]
 800c58c:	e3df      	b.n	800cd4e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c58e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	78db      	ldrb	r3, [r3, #3]
 800c59a:	2b02      	cmp	r3, #2
 800c59c:	f040 8218 	bne.w	800c9d0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c5a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	785b      	ldrb	r3, [r3, #1]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	f040 809d 	bne.w	800c6ec <USB_EPStartXfer+0x1080>
 800c5b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c5c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5d6:	4413      	add	r3, r2
 800c5d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c5dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	011a      	lsls	r2, r3, #4
 800c5ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5ee:	4413      	add	r3, r2
 800c5f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c5f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c5f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c5fc:	881b      	ldrh	r3, [r3, #0]
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c604:	b29a      	uxth	r2, r3
 800c606:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c60a:	801a      	strh	r2, [r3, #0]
 800c60c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	691b      	ldr	r3, [r3, #16]
 800c618:	2b3e      	cmp	r3, #62	; 0x3e
 800c61a:	d92b      	bls.n	800c674 <USB_EPStartXfer+0x1008>
 800c61c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	691b      	ldr	r3, [r3, #16]
 800c628:	095b      	lsrs	r3, r3, #5
 800c62a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c62e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	691b      	ldr	r3, [r3, #16]
 800c63a:	f003 031f 	and.w	r3, r3, #31
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d104      	bne.n	800c64c <USB_EPStartXfer+0xfe0>
 800c642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c646:	3b01      	subs	r3, #1
 800c648:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c64c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c650:	881b      	ldrh	r3, [r3, #0]
 800c652:	b29a      	uxth	r2, r3
 800c654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c658:	b29b      	uxth	r3, r3
 800c65a:	029b      	lsls	r3, r3, #10
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	4313      	orrs	r3, r2
 800c660:	b29b      	uxth	r3, r3
 800c662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c66a:	b29a      	uxth	r2, r3
 800c66c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c670:	801a      	strh	r2, [r3, #0]
 800c672:	e070      	b.n	800c756 <USB_EPStartXfer+0x10ea>
 800c674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	691b      	ldr	r3, [r3, #16]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10c      	bne.n	800c69e <USB_EPStartXfer+0x1032>
 800c684:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c688:	881b      	ldrh	r3, [r3, #0]
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c694:	b29a      	uxth	r2, r3
 800c696:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c69a:	801a      	strh	r2, [r3, #0]
 800c69c:	e05b      	b.n	800c756 <USB_EPStartXfer+0x10ea>
 800c69e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	691b      	ldr	r3, [r3, #16]
 800c6aa:	085b      	lsrs	r3, r3, #1
 800c6ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c6b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	f003 0301 	and.w	r3, r3, #1
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d004      	beq.n	800c6ce <USB_EPStartXfer+0x1062>
 800c6c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c6ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c6d2:	881b      	ldrh	r3, [r3, #0]
 800c6d4:	b29a      	uxth	r2, r3
 800c6d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	029b      	lsls	r3, r3, #10
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	b29a      	uxth	r2, r3
 800c6e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c6e8:	801a      	strh	r2, [r3, #0]
 800c6ea:	e034      	b.n	800c756 <USB_EPStartXfer+0x10ea>
 800c6ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	785b      	ldrb	r3, [r3, #1]
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	d12c      	bne.n	800c756 <USB_EPStartXfer+0x10ea>
 800c6fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c700:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c70a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c70e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c718:	b29b      	uxth	r3, r3
 800c71a:	461a      	mov	r2, r3
 800c71c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c720:	4413      	add	r3, r2
 800c722:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c72a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	011a      	lsls	r2, r3, #4
 800c734:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c738:	4413      	add	r3, r2
 800c73a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c73e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	691b      	ldr	r3, [r3, #16]
 800c74e:	b29a      	uxth	r2, r3
 800c750:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c754:	801a      	strh	r2, [r3, #0]
 800c756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c75a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	785b      	ldrb	r3, [r3, #1]
 800c770:	2b00      	cmp	r3, #0
 800c772:	f040 809d 	bne.w	800c8b0 <USB_EPStartXfer+0x1244>
 800c776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c77a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c788:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c792:	b29b      	uxth	r3, r3
 800c794:	461a      	mov	r2, r3
 800c796:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c79a:	4413      	add	r3, r2
 800c79c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c7a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	011a      	lsls	r2, r3, #4
 800c7ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c7b2:	4413      	add	r3, r2
 800c7b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c7b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c7bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c7c0:	881b      	ldrh	r3, [r3, #0]
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c7c8:	b29a      	uxth	r2, r3
 800c7ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c7ce:	801a      	strh	r2, [r3, #0]
 800c7d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	691b      	ldr	r3, [r3, #16]
 800c7dc:	2b3e      	cmp	r3, #62	; 0x3e
 800c7de:	d92b      	bls.n	800c838 <USB_EPStartXfer+0x11cc>
 800c7e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	691b      	ldr	r3, [r3, #16]
 800c7ec:	095b      	lsrs	r3, r3, #5
 800c7ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c7f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	691b      	ldr	r3, [r3, #16]
 800c7fe:	f003 031f 	and.w	r3, r3, #31
 800c802:	2b00      	cmp	r3, #0
 800c804:	d104      	bne.n	800c810 <USB_EPStartXfer+0x11a4>
 800c806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c80a:	3b01      	subs	r3, #1
 800c80c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c810:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c814:	881b      	ldrh	r3, [r3, #0]
 800c816:	b29a      	uxth	r2, r3
 800c818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	029b      	lsls	r3, r3, #10
 800c820:	b29b      	uxth	r3, r3
 800c822:	4313      	orrs	r3, r2
 800c824:	b29b      	uxth	r3, r3
 800c826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c82a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c82e:	b29a      	uxth	r2, r3
 800c830:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c834:	801a      	strh	r2, [r3, #0]
 800c836:	e069      	b.n	800c90c <USB_EPStartXfer+0x12a0>
 800c838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c83c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	691b      	ldr	r3, [r3, #16]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d10c      	bne.n	800c862 <USB_EPStartXfer+0x11f6>
 800c848:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c84c:	881b      	ldrh	r3, [r3, #0]
 800c84e:	b29b      	uxth	r3, r3
 800c850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c858:	b29a      	uxth	r2, r3
 800c85a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c85e:	801a      	strh	r2, [r3, #0]
 800c860:	e054      	b.n	800c90c <USB_EPStartXfer+0x12a0>
 800c862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	691b      	ldr	r3, [r3, #16]
 800c86e:	085b      	lsrs	r3, r3, #1
 800c870:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	691b      	ldr	r3, [r3, #16]
 800c880:	f003 0301 	and.w	r3, r3, #1
 800c884:	2b00      	cmp	r3, #0
 800c886:	d004      	beq.n	800c892 <USB_EPStartXfer+0x1226>
 800c888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c88c:	3301      	adds	r3, #1
 800c88e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c892:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c896:	881b      	ldrh	r3, [r3, #0]
 800c898:	b29a      	uxth	r2, r3
 800c89a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	029b      	lsls	r3, r3, #10
 800c8a2:	b29b      	uxth	r3, r3
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	b29a      	uxth	r2, r3
 800c8a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c8ac:	801a      	strh	r2, [r3, #0]
 800c8ae:	e02d      	b.n	800c90c <USB_EPStartXfer+0x12a0>
 800c8b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	785b      	ldrb	r3, [r3, #1]
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d125      	bne.n	800c90c <USB_EPStartXfer+0x12a0>
 800c8c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c8d6:	4413      	add	r3, r2
 800c8d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c8dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	011a      	lsls	r2, r3, #4
 800c8ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c8ee:	4413      	add	r3, r2
 800c8f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c8f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c8f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	691b      	ldr	r3, [r3, #16]
 800c904:	b29a      	uxth	r2, r3
 800c906:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c90a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c90c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	69db      	ldr	r3, [r3, #28]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	f000 8218 	beq.w	800cd4e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c91e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c922:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c92c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	4413      	add	r3, r2
 800c938:	881b      	ldrh	r3, [r3, #0]
 800c93a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c93e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c946:	2b00      	cmp	r3, #0
 800c948:	d005      	beq.n	800c956 <USB_EPStartXfer+0x12ea>
 800c94a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c94e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c952:	2b00      	cmp	r3, #0
 800c954:	d10d      	bne.n	800c972 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c956:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c95a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c95e:	2b00      	cmp	r3, #0
 800c960:	f040 81f5 	bne.w	800cd4e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c964:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	f040 81ee 	bne.w	800cd4e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c97a:	681a      	ldr	r2, [r3, #0]
 800c97c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	4413      	add	r3, r2
 800c98c:	881b      	ldrh	r3, [r3, #0]
 800c98e:	b29b      	uxth	r3, r3
 800c990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c998:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c99c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9a4:	681a      	ldr	r2, [r3, #0]
 800c9a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	781b      	ldrb	r3, [r3, #0]
 800c9b2:	009b      	lsls	r3, r3, #2
 800c9b4:	441a      	add	r2, r3
 800c9b6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c9ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c9be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c9c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	8013      	strh	r3, [r2, #0]
 800c9ce:	e1be      	b.n	800cd4e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c9d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	78db      	ldrb	r3, [r3, #3]
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	f040 81b4 	bne.w	800cd4a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c9e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	699a      	ldr	r2, [r3, #24]
 800c9ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	691b      	ldr	r3, [r3, #16]
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d917      	bls.n	800ca2e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c9fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	691b      	ldr	r3, [r3, #16]
 800ca0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800ca0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	699a      	ldr	r2, [r3, #24]
 800ca1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca1e:	1ad2      	subs	r2, r2, r3
 800ca20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	619a      	str	r2, [r3, #24]
 800ca2c:	e00e      	b.n	800ca4c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800ca2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	699b      	ldr	r3, [r3, #24]
 800ca3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800ca3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ca4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	785b      	ldrb	r3, [r3, #1]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f040 8085 	bne.w	800cb68 <USB_EPStartXfer+0x14fc>
 800ca5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ca6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ca82:	4413      	add	r3, r2
 800ca84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ca88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	011a      	lsls	r2, r3, #4
 800ca96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ca9a:	4413      	add	r3, r2
 800ca9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800caa0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800caa4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800caa8:	881b      	ldrh	r3, [r3, #0]
 800caaa:	b29b      	uxth	r3, r3
 800caac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cab0:	b29a      	uxth	r2, r3
 800cab2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cab6:	801a      	strh	r2, [r3, #0]
 800cab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cabc:	2b3e      	cmp	r3, #62	; 0x3e
 800cabe:	d923      	bls.n	800cb08 <USB_EPStartXfer+0x149c>
 800cac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cac4:	095b      	lsrs	r3, r3, #5
 800cac6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800caca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cace:	f003 031f 	and.w	r3, r3, #31
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d104      	bne.n	800cae0 <USB_EPStartXfer+0x1474>
 800cad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cada:	3b01      	subs	r3, #1
 800cadc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800cae0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cae4:	881b      	ldrh	r3, [r3, #0]
 800cae6:	b29a      	uxth	r2, r3
 800cae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800caec:	b29b      	uxth	r3, r3
 800caee:	029b      	lsls	r3, r3, #10
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	4313      	orrs	r3, r2
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cafa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cafe:	b29a      	uxth	r2, r3
 800cb00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cb04:	801a      	strh	r2, [r3, #0]
 800cb06:	e060      	b.n	800cbca <USB_EPStartXfer+0x155e>
 800cb08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d10c      	bne.n	800cb2a <USB_EPStartXfer+0x14be>
 800cb10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cb14:	881b      	ldrh	r3, [r3, #0]
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb20:	b29a      	uxth	r2, r3
 800cb22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cb26:	801a      	strh	r2, [r3, #0]
 800cb28:	e04f      	b.n	800cbca <USB_EPStartXfer+0x155e>
 800cb2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb2e:	085b      	lsrs	r3, r3, #1
 800cb30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800cb34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb38:	f003 0301 	and.w	r3, r3, #1
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d004      	beq.n	800cb4a <USB_EPStartXfer+0x14de>
 800cb40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb44:	3301      	adds	r3, #1
 800cb46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800cb4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cb4e:	881b      	ldrh	r3, [r3, #0]
 800cb50:	b29a      	uxth	r2, r3
 800cb52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb56:	b29b      	uxth	r3, r3
 800cb58:	029b      	lsls	r3, r3, #10
 800cb5a:	b29b      	uxth	r3, r3
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	b29a      	uxth	r2, r3
 800cb60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cb64:	801a      	strh	r2, [r3, #0]
 800cb66:	e030      	b.n	800cbca <USB_EPStartXfer+0x155e>
 800cb68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	785b      	ldrb	r3, [r3, #1]
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	d128      	bne.n	800cbca <USB_EPStartXfer+0x155e>
 800cb78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800cb86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb94:	b29b      	uxth	r3, r3
 800cb96:	461a      	mov	r2, r3
 800cb98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cb9c:	4413      	add	r3, r2
 800cb9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800cba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	011a      	lsls	r2, r3, #4
 800cbb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cbb4:	4413      	add	r3, r2
 800cbb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cbba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cbbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbc2:	b29a      	uxth	r2, r3
 800cbc4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800cbc8:	801a      	strh	r2, [r3, #0]
 800cbca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cbd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	785b      	ldrb	r3, [r3, #1]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	f040 8085 	bne.w	800ccf4 <USB_EPStartXfer+0x1688>
 800cbea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800cbf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	461a      	mov	r2, r3
 800cc0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cc0e:	4413      	add	r3, r2
 800cc10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800cc14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	011a      	lsls	r2, r3, #4
 800cc22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cc26:	4413      	add	r3, r2
 800cc28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cc2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cc30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cc34:	881b      	ldrh	r3, [r3, #0]
 800cc36:	b29b      	uxth	r3, r3
 800cc38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cc3c:	b29a      	uxth	r2, r3
 800cc3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cc42:	801a      	strh	r2, [r3, #0]
 800cc44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc48:	2b3e      	cmp	r3, #62	; 0x3e
 800cc4a:	d923      	bls.n	800cc94 <USB_EPStartXfer+0x1628>
 800cc4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc50:	095b      	lsrs	r3, r3, #5
 800cc52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cc56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc5a:	f003 031f 	and.w	r3, r3, #31
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d104      	bne.n	800cc6c <USB_EPStartXfer+0x1600>
 800cc62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cc66:	3b01      	subs	r3, #1
 800cc68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cc6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cc70:	881b      	ldrh	r3, [r3, #0]
 800cc72:	b29a      	uxth	r2, r3
 800cc74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	029b      	lsls	r3, r3, #10
 800cc7c:	b29b      	uxth	r3, r3
 800cc7e:	4313      	orrs	r3, r2
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc8a:	b29a      	uxth	r2, r3
 800cc8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cc90:	801a      	strh	r2, [r3, #0]
 800cc92:	e05c      	b.n	800cd4e <USB_EPStartXfer+0x16e2>
 800cc94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d10c      	bne.n	800ccb6 <USB_EPStartXfer+0x164a>
 800cc9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cca0:	881b      	ldrh	r3, [r3, #0]
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccac:	b29a      	uxth	r2, r3
 800ccae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ccb2:	801a      	strh	r2, [r3, #0]
 800ccb4:	e04b      	b.n	800cd4e <USB_EPStartXfer+0x16e2>
 800ccb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccba:	085b      	lsrs	r3, r3, #1
 800ccbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ccc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccc4:	f003 0301 	and.w	r3, r3, #1
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d004      	beq.n	800ccd6 <USB_EPStartXfer+0x166a>
 800cccc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ccd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ccda:	881b      	ldrh	r3, [r3, #0]
 800ccdc:	b29a      	uxth	r2, r3
 800ccde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cce2:	b29b      	uxth	r3, r3
 800cce4:	029b      	lsls	r3, r3, #10
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	4313      	orrs	r3, r2
 800ccea:	b29a      	uxth	r2, r3
 800ccec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ccf0:	801a      	strh	r2, [r3, #0]
 800ccf2:	e02c      	b.n	800cd4e <USB_EPStartXfer+0x16e2>
 800ccf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	785b      	ldrb	r3, [r3, #1]
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	d124      	bne.n	800cd4e <USB_EPStartXfer+0x16e2>
 800cd04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	461a      	mov	r2, r3
 800cd16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cd1a:	4413      	add	r3, r2
 800cd1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cd20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	011a      	lsls	r2, r3, #4
 800cd2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cd32:	4413      	add	r3, r2
 800cd34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cd38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cd3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd40:	b29a      	uxth	r2, r3
 800cd42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cd46:	801a      	strh	r2, [r3, #0]
 800cd48:	e001      	b.n	800cd4e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	e03a      	b.n	800cdc4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cd4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd56:	681a      	ldr	r2, [r3, #0]
 800cd58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	009b      	lsls	r3, r3, #2
 800cd66:	4413      	add	r3, r2
 800cd68:	881b      	ldrh	r3, [r3, #0]
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cd70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd74:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cd78:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cd7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cd80:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cd84:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cd88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cd8c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800cd90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd98:	681a      	ldr	r2, [r3, #0]
 800cd9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	441a      	add	r2, r3
 800cdaa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cdae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cdb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cdb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdbe:	b29b      	uxth	r3, r3
 800cdc0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cdc2:	2300      	movs	r3, #0
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cdce:	b480      	push	{r7}
 800cdd0:	b085      	sub	sp, #20
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
 800cdd6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	785b      	ldrb	r3, [r3, #1]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d020      	beq.n	800ce22 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800cde0:	687a      	ldr	r2, [r7, #4]
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	4413      	add	r3, r2
 800cdea:	881b      	ldrh	r3, [r3, #0]
 800cdec:	b29b      	uxth	r3, r3
 800cdee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cdf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdf6:	81bb      	strh	r3, [r7, #12]
 800cdf8:	89bb      	ldrh	r3, [r7, #12]
 800cdfa:	f083 0310 	eor.w	r3, r3, #16
 800cdfe:	81bb      	strh	r3, [r7, #12]
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	441a      	add	r2, r3
 800ce0a:	89bb      	ldrh	r3, [r7, #12]
 800ce0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce1c:	b29b      	uxth	r3, r3
 800ce1e:	8013      	strh	r3, [r2, #0]
 800ce20:	e01f      	b.n	800ce62 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	781b      	ldrb	r3, [r3, #0]
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	4413      	add	r3, r2
 800ce2c:	881b      	ldrh	r3, [r3, #0]
 800ce2e:	b29b      	uxth	r3, r3
 800ce30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce38:	81fb      	strh	r3, [r7, #14]
 800ce3a:	89fb      	ldrh	r3, [r7, #14]
 800ce3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ce40:	81fb      	strh	r3, [r7, #14]
 800ce42:	687a      	ldr	r2, [r7, #4]
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	009b      	lsls	r3, r3, #2
 800ce4a:	441a      	add	r2, r3
 800ce4c:	89fb      	ldrh	r3, [r7, #14]
 800ce4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ce5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ce62:	2300      	movs	r3, #0
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3714      	adds	r7, #20
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bc80      	pop	{r7}
 800ce6c:	4770      	bx	lr

0800ce6e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ce6e:	b480      	push	{r7}
 800ce70:	b087      	sub	sp, #28
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
 800ce76:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	7b1b      	ldrb	r3, [r3, #12]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	f040 809d 	bne.w	800cfbc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	785b      	ldrb	r3, [r3, #1]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d04c      	beq.n	800cf24 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ce8a:	687a      	ldr	r2, [r7, #4]
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	4413      	add	r3, r2
 800ce94:	881b      	ldrh	r3, [r3, #0]
 800ce96:	823b      	strh	r3, [r7, #16]
 800ce98:	8a3b      	ldrh	r3, [r7, #16]
 800ce9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d01b      	beq.n	800ceda <USB_EPClearStall+0x6c>
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	4413      	add	r3, r2
 800ceac:	881b      	ldrh	r3, [r3, #0]
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ceb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ceb8:	81fb      	strh	r3, [r7, #14]
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	781b      	ldrb	r3, [r3, #0]
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	441a      	add	r2, r3
 800cec4:	89fb      	ldrh	r3, [r7, #14]
 800cec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ceca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ced2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	78db      	ldrb	r3, [r3, #3]
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d06c      	beq.n	800cfbc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cee2:	687a      	ldr	r2, [r7, #4]
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	4413      	add	r3, r2
 800ceec:	881b      	ldrh	r3, [r3, #0]
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cef8:	81bb      	strh	r3, [r7, #12]
 800cefa:	89bb      	ldrh	r3, [r7, #12]
 800cefc:	f083 0320 	eor.w	r3, r3, #32
 800cf00:	81bb      	strh	r3, [r7, #12]
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	441a      	add	r2, r3
 800cf0c:	89bb      	ldrh	r3, [r7, #12]
 800cf0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf1e:	b29b      	uxth	r3, r3
 800cf20:	8013      	strh	r3, [r2, #0]
 800cf22:	e04b      	b.n	800cfbc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cf24:	687a      	ldr	r2, [r7, #4]
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	009b      	lsls	r3, r3, #2
 800cf2c:	4413      	add	r3, r2
 800cf2e:	881b      	ldrh	r3, [r3, #0]
 800cf30:	82fb      	strh	r3, [r7, #22]
 800cf32:	8afb      	ldrh	r3, [r7, #22]
 800cf34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d01b      	beq.n	800cf74 <USB_EPClearStall+0x106>
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	4413      	add	r3, r2
 800cf46:	881b      	ldrh	r3, [r3, #0]
 800cf48:	b29b      	uxth	r3, r3
 800cf4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf52:	82bb      	strh	r3, [r7, #20]
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	441a      	add	r2, r3
 800cf5e:	8abb      	ldrh	r3, [r7, #20]
 800cf60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cf6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	781b      	ldrb	r3, [r3, #0]
 800cf7a:	009b      	lsls	r3, r3, #2
 800cf7c:	4413      	add	r3, r2
 800cf7e:	881b      	ldrh	r3, [r3, #0]
 800cf80:	b29b      	uxth	r3, r3
 800cf82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cf86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf8a:	827b      	strh	r3, [r7, #18]
 800cf8c:	8a7b      	ldrh	r3, [r7, #18]
 800cf8e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cf92:	827b      	strh	r3, [r7, #18]
 800cf94:	8a7b      	ldrh	r3, [r7, #18]
 800cf96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cf9a:	827b      	strh	r3, [r7, #18]
 800cf9c:	687a      	ldr	r2, [r7, #4]
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	009b      	lsls	r3, r3, #2
 800cfa4:	441a      	add	r2, r3
 800cfa6:	8a7b      	ldrh	r3, [r7, #18]
 800cfa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cfac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cfb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfb8:	b29b      	uxth	r3, r3
 800cfba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	371c      	adds	r7, #28
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bc80      	pop	{r7}
 800cfc6:	4770      	bx	lr

0800cfc8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b083      	sub	sp, #12
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	460b      	mov	r3, r1
 800cfd2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800cfd4:	78fb      	ldrb	r3, [r7, #3]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d103      	bne.n	800cfe2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2280      	movs	r2, #128	; 0x80
 800cfde:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800cfe2:	2300      	movs	r3, #0
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	370c      	adds	r7, #12
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bc80      	pop	{r7}
 800cfec:	4770      	bx	lr

0800cfee <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800cfee:	b480      	push	{r7}
 800cff0:	b083      	sub	sp, #12
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800cff6:	2300      	movs	r3, #0
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bc80      	pop	{r7}
 800d000:	4770      	bx	lr

0800d002 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800d002:	b480      	push	{r7}
 800d004:	b083      	sub	sp, #12
 800d006:	af00      	add	r7, sp, #0
 800d008:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800d00a:	2300      	movs	r3, #0
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	370c      	adds	r7, #12
 800d010:	46bd      	mov	sp, r7
 800d012:	bc80      	pop	{r7}
 800d014:	4770      	bx	lr

0800d016 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800d016:	b480      	push	{r7}
 800d018:	b085      	sub	sp, #20
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d024:	b29b      	uxth	r3, r3
 800d026:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d028:	68fb      	ldr	r3, [r7, #12]
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3714      	adds	r7, #20
 800d02e:	46bd      	mov	sp, r7
 800d030:	bc80      	pop	{r7}
 800d032:	4770      	bx	lr

0800d034 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800d034:	b480      	push	{r7}
 800d036:	b083      	sub	sp, #12
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800d03e:	2300      	movs	r3, #0
}
 800d040:	4618      	mov	r0, r3
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	bc80      	pop	{r7}
 800d048:	4770      	bx	lr

0800d04a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d04a:	b480      	push	{r7}
 800d04c:	b08b      	sub	sp, #44	; 0x2c
 800d04e:	af00      	add	r7, sp, #0
 800d050:	60f8      	str	r0, [r7, #12]
 800d052:	60b9      	str	r1, [r7, #8]
 800d054:	4611      	mov	r1, r2
 800d056:	461a      	mov	r2, r3
 800d058:	460b      	mov	r3, r1
 800d05a:	80fb      	strh	r3, [r7, #6]
 800d05c:	4613      	mov	r3, r2
 800d05e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d060:	88bb      	ldrh	r3, [r7, #4]
 800d062:	3301      	adds	r3, #1
 800d064:	085b      	lsrs	r3, r3, #1
 800d066:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d070:	88fb      	ldrh	r3, [r7, #6]
 800d072:	005a      	lsls	r2, r3, #1
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	4413      	add	r3, r2
 800d078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d07c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d07e:	69bb      	ldr	r3, [r7, #24]
 800d080:	627b      	str	r3, [r7, #36]	; 0x24
 800d082:	e01e      	b.n	800d0c2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800d08a:	69fb      	ldr	r3, [r7, #28]
 800d08c:	3301      	adds	r3, #1
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	021b      	lsls	r3, r3, #8
 800d092:	b21a      	sxth	r2, r3
 800d094:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d098:	4313      	orrs	r3, r2
 800d09a:	b21b      	sxth	r3, r3
 800d09c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800d09e:	6a3b      	ldr	r3, [r7, #32]
 800d0a0:	8a7a      	ldrh	r2, [r7, #18]
 800d0a2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d0a4:	6a3b      	ldr	r3, [r7, #32]
 800d0a6:	3302      	adds	r3, #2
 800d0a8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800d0aa:	6a3b      	ldr	r3, [r7, #32]
 800d0ac:	3302      	adds	r3, #2
 800d0ae:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800d0b0:	69fb      	ldr	r3, [r7, #28]
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800d0b6:	69fb      	ldr	r3, [r7, #28]
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0be:	3b01      	subs	r3, #1
 800d0c0:	627b      	str	r3, [r7, #36]	; 0x24
 800d0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d1dd      	bne.n	800d084 <USB_WritePMA+0x3a>
  }
}
 800d0c8:	bf00      	nop
 800d0ca:	bf00      	nop
 800d0cc:	372c      	adds	r7, #44	; 0x2c
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bc80      	pop	{r7}
 800d0d2:	4770      	bx	lr

0800d0d4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b08b      	sub	sp, #44	; 0x2c
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	60f8      	str	r0, [r7, #12]
 800d0dc:	60b9      	str	r1, [r7, #8]
 800d0de:	4611      	mov	r1, r2
 800d0e0:	461a      	mov	r2, r3
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	80fb      	strh	r3, [r7, #6]
 800d0e6:	4613      	mov	r3, r2
 800d0e8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d0ea:	88bb      	ldrh	r3, [r7, #4]
 800d0ec:	085b      	lsrs	r3, r3, #1
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d0fa:	88fb      	ldrh	r3, [r7, #6]
 800d0fc:	005a      	lsls	r2, r3, #1
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	4413      	add	r3, r2
 800d102:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d106:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d108:	69bb      	ldr	r3, [r7, #24]
 800d10a:	627b      	str	r3, [r7, #36]	; 0x24
 800d10c:	e01b      	b.n	800d146 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800d10e:	6a3b      	ldr	r3, [r7, #32]
 800d110:	881b      	ldrh	r3, [r3, #0]
 800d112:	b29b      	uxth	r3, r3
 800d114:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d116:	6a3b      	ldr	r3, [r7, #32]
 800d118:	3302      	adds	r3, #2
 800d11a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	b2da      	uxtb	r2, r3
 800d120:	69fb      	ldr	r3, [r7, #28]
 800d122:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d124:	69fb      	ldr	r3, [r7, #28]
 800d126:	3301      	adds	r3, #1
 800d128:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	0a1b      	lsrs	r3, r3, #8
 800d12e:	b2da      	uxtb	r2, r3
 800d130:	69fb      	ldr	r3, [r7, #28]
 800d132:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d134:	69fb      	ldr	r3, [r7, #28]
 800d136:	3301      	adds	r3, #1
 800d138:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800d13a:	6a3b      	ldr	r3, [r7, #32]
 800d13c:	3302      	adds	r3, #2
 800d13e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800d140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d142:	3b01      	subs	r3, #1
 800d144:	627b      	str	r3, [r7, #36]	; 0x24
 800d146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d1e0      	bne.n	800d10e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d14c:	88bb      	ldrh	r3, [r7, #4]
 800d14e:	f003 0301 	and.w	r3, r3, #1
 800d152:	b29b      	uxth	r3, r3
 800d154:	2b00      	cmp	r3, #0
 800d156:	d007      	beq.n	800d168 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800d158:	6a3b      	ldr	r3, [r7, #32]
 800d15a:	881b      	ldrh	r3, [r3, #0]
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	b2da      	uxtb	r2, r3
 800d164:	69fb      	ldr	r3, [r7, #28]
 800d166:	701a      	strb	r2, [r3, #0]
  }
}
 800d168:	bf00      	nop
 800d16a:	372c      	adds	r7, #44	; 0x2c
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bc80      	pop	{r7}
 800d170:	4770      	bx	lr

0800d172 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d172:	b580      	push	{r7, lr}
 800d174:	b084      	sub	sp, #16
 800d176:	af00      	add	r7, sp, #0
 800d178:	6078      	str	r0, [r7, #4]
 800d17a:	460b      	mov	r3, r1
 800d17c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800d17e:	2300      	movs	r3, #0
 800d180:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	7c1b      	ldrb	r3, [r3, #16]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d115      	bne.n	800d1b6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d18a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d18e:	2202      	movs	r2, #2
 800d190:	2181      	movs	r1, #129	; 0x81
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f001 fe99 	bl	800eeca <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d19e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1a2:	2202      	movs	r2, #2
 800d1a4:	2101      	movs	r1, #1
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f001 fe8f 	bl	800eeca <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800d1b4:	e012      	b.n	800d1dc <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d1b6:	2340      	movs	r3, #64	; 0x40
 800d1b8:	2202      	movs	r2, #2
 800d1ba:	2181      	movs	r1, #129	; 0x81
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f001 fe84 	bl	800eeca <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d1c8:	2340      	movs	r3, #64	; 0x40
 800d1ca:	2202      	movs	r2, #2
 800d1cc:	2101      	movs	r1, #1
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f001 fe7b 	bl	800eeca <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d1dc:	2308      	movs	r3, #8
 800d1de:	2203      	movs	r2, #3
 800d1e0:	2182      	movs	r1, #130	; 0x82
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f001 fe71 	bl	800eeca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d1ee:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d1f2:	f001 ff91 	bl	800f118 <USBD_static_malloc>
 800d1f6:	4602      	mov	r2, r0
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d204:	2b00      	cmp	r3, #0
 800d206:	d102      	bne.n	800d20e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800d208:	2301      	movs	r3, #1
 800d20a:	73fb      	strb	r3, [r7, #15]
 800d20c:	e026      	b.n	800d25c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d214:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	2200      	movs	r2, #0
 800d224:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	2200      	movs	r2, #0
 800d22c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	7c1b      	ldrb	r3, [r3, #16]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d109      	bne.n	800d24c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d23e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d242:	2101      	movs	r1, #1
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f001 ff31 	bl	800f0ac <USBD_LL_PrepareReceive>
 800d24a:	e007      	b.n	800d25c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d252:	2340      	movs	r3, #64	; 0x40
 800d254:	2101      	movs	r1, #1
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f001 ff28 	bl	800f0ac <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800d25c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3710      	adds	r7, #16
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}

0800d266 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d266:	b580      	push	{r7, lr}
 800d268:	b084      	sub	sp, #16
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
 800d26e:	460b      	mov	r3, r1
 800d270:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800d272:	2300      	movs	r3, #0
 800d274:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d276:	2181      	movs	r1, #129	; 0x81
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f001 fe4c 	bl	800ef16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2200      	movs	r2, #0
 800d282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d284:	2101      	movs	r1, #1
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f001 fe45 	bl	800ef16 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2200      	movs	r2, #0
 800d290:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d294:	2182      	movs	r1, #130	; 0x82
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f001 fe3d 	bl	800ef16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d00e      	beq.n	800d2ca <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f001 ff37 	bl	800f130 <USBD_static_free>
    pdev->pClassData = NULL;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800d2ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3710      	adds	r7, #16
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b086      	sub	sp, #24
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2e4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	781b      	ldrb	r3, [r3, #0]
 800d2f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d039      	beq.n	800d372 <USBD_CDC_Setup+0x9e>
 800d2fe:	2b20      	cmp	r3, #32
 800d300:	d17f      	bne.n	800d402 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	88db      	ldrh	r3, [r3, #6]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d029      	beq.n	800d35e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	b25b      	sxtb	r3, r3
 800d310:	2b00      	cmp	r3, #0
 800d312:	da11      	bge.n	800d338 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d31a:	689b      	ldr	r3, [r3, #8]
 800d31c:	683a      	ldr	r2, [r7, #0]
 800d31e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800d320:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d322:	683a      	ldr	r2, [r7, #0]
 800d324:	88d2      	ldrh	r2, [r2, #6]
 800d326:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d328:	6939      	ldr	r1, [r7, #16]
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	88db      	ldrh	r3, [r3, #6]
 800d32e:	461a      	mov	r2, r3
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f001 fa0a 	bl	800e74a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800d336:	e06b      	b.n	800d410 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	785a      	ldrb	r2, [r3, #1]
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	88db      	ldrh	r3, [r3, #6]
 800d346:	b2da      	uxtb	r2, r3
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800d34e:	6939      	ldr	r1, [r7, #16]
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	88db      	ldrh	r3, [r3, #6]
 800d354:	461a      	mov	r2, r3
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f001 fa25 	bl	800e7a6 <USBD_CtlPrepareRx>
      break;
 800d35c:	e058      	b.n	800d410 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d364:	689b      	ldr	r3, [r3, #8]
 800d366:	683a      	ldr	r2, [r7, #0]
 800d368:	7850      	ldrb	r0, [r2, #1]
 800d36a:	2200      	movs	r2, #0
 800d36c:	6839      	ldr	r1, [r7, #0]
 800d36e:	4798      	blx	r3
      break;
 800d370:	e04e      	b.n	800d410 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	785b      	ldrb	r3, [r3, #1]
 800d376:	2b0b      	cmp	r3, #11
 800d378:	d02e      	beq.n	800d3d8 <USBD_CDC_Setup+0x104>
 800d37a:	2b0b      	cmp	r3, #11
 800d37c:	dc38      	bgt.n	800d3f0 <USBD_CDC_Setup+0x11c>
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d002      	beq.n	800d388 <USBD_CDC_Setup+0xb4>
 800d382:	2b0a      	cmp	r3, #10
 800d384:	d014      	beq.n	800d3b0 <USBD_CDC_Setup+0xdc>
 800d386:	e033      	b.n	800d3f0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d38e:	2b03      	cmp	r3, #3
 800d390:	d107      	bne.n	800d3a2 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800d392:	f107 030c 	add.w	r3, r7, #12
 800d396:	2202      	movs	r2, #2
 800d398:	4619      	mov	r1, r3
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f001 f9d5 	bl	800e74a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d3a0:	e02e      	b.n	800d400 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800d3a2:	6839      	ldr	r1, [r7, #0]
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f001 f966 	bl	800e676 <USBD_CtlError>
            ret = USBD_FAIL;
 800d3aa:	2302      	movs	r3, #2
 800d3ac:	75fb      	strb	r3, [r7, #23]
          break;
 800d3ae:	e027      	b.n	800d400 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3b6:	2b03      	cmp	r3, #3
 800d3b8:	d107      	bne.n	800d3ca <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800d3ba:	f107 030f 	add.w	r3, r7, #15
 800d3be:	2201      	movs	r2, #1
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f001 f9c1 	bl	800e74a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d3c8:	e01a      	b.n	800d400 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800d3ca:	6839      	ldr	r1, [r7, #0]
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f001 f952 	bl	800e676 <USBD_CtlError>
            ret = USBD_FAIL;
 800d3d2:	2302      	movs	r3, #2
 800d3d4:	75fb      	strb	r3, [r7, #23]
          break;
 800d3d6:	e013      	b.n	800d400 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3de:	2b03      	cmp	r3, #3
 800d3e0:	d00d      	beq.n	800d3fe <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800d3e2:	6839      	ldr	r1, [r7, #0]
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f001 f946 	bl	800e676 <USBD_CtlError>
            ret = USBD_FAIL;
 800d3ea:	2302      	movs	r3, #2
 800d3ec:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d3ee:	e006      	b.n	800d3fe <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800d3f0:	6839      	ldr	r1, [r7, #0]
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f001 f93f 	bl	800e676 <USBD_CtlError>
          ret = USBD_FAIL;
 800d3f8:	2302      	movs	r3, #2
 800d3fa:	75fb      	strb	r3, [r7, #23]
          break;
 800d3fc:	e000      	b.n	800d400 <USBD_CDC_Setup+0x12c>
          break;
 800d3fe:	bf00      	nop
      }
      break;
 800d400:	e006      	b.n	800d410 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d402:	6839      	ldr	r1, [r7, #0]
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f001 f936 	bl	800e676 <USBD_CtlError>
      ret = USBD_FAIL;
 800d40a:	2302      	movs	r3, #2
 800d40c:	75fb      	strb	r3, [r7, #23]
      break;
 800d40e:	bf00      	nop
  }

  return ret;
 800d410:	7dfb      	ldrb	r3, [r7, #23]
}
 800d412:	4618      	mov	r0, r3
 800d414:	3718      	adds	r7, #24
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}

0800d41a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d41a:	b580      	push	{r7, lr}
 800d41c:	b084      	sub	sp, #16
 800d41e:	af00      	add	r7, sp, #0
 800d420:	6078      	str	r0, [r7, #4]
 800d422:	460b      	mov	r3, r1
 800d424:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d42c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d434:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d03a      	beq.n	800d4b6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d440:	78fa      	ldrb	r2, [r7, #3]
 800d442:	6879      	ldr	r1, [r7, #4]
 800d444:	4613      	mov	r3, r2
 800d446:	009b      	lsls	r3, r3, #2
 800d448:	4413      	add	r3, r2
 800d44a:	009b      	lsls	r3, r3, #2
 800d44c:	440b      	add	r3, r1
 800d44e:	331c      	adds	r3, #28
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d029      	beq.n	800d4aa <USBD_CDC_DataIn+0x90>
 800d456:	78fa      	ldrb	r2, [r7, #3]
 800d458:	6879      	ldr	r1, [r7, #4]
 800d45a:	4613      	mov	r3, r2
 800d45c:	009b      	lsls	r3, r3, #2
 800d45e:	4413      	add	r3, r2
 800d460:	009b      	lsls	r3, r3, #2
 800d462:	440b      	add	r3, r1
 800d464:	331c      	adds	r3, #28
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	78f9      	ldrb	r1, [r7, #3]
 800d46a:	68b8      	ldr	r0, [r7, #8]
 800d46c:	460b      	mov	r3, r1
 800d46e:	009b      	lsls	r3, r3, #2
 800d470:	440b      	add	r3, r1
 800d472:	00db      	lsls	r3, r3, #3
 800d474:	4403      	add	r3, r0
 800d476:	3338      	adds	r3, #56	; 0x38
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	fbb2 f1f3 	udiv	r1, r2, r3
 800d47e:	fb01 f303 	mul.w	r3, r1, r3
 800d482:	1ad3      	subs	r3, r2, r3
 800d484:	2b00      	cmp	r3, #0
 800d486:	d110      	bne.n	800d4aa <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800d488:	78fa      	ldrb	r2, [r7, #3]
 800d48a:	6879      	ldr	r1, [r7, #4]
 800d48c:	4613      	mov	r3, r2
 800d48e:	009b      	lsls	r3, r3, #2
 800d490:	4413      	add	r3, r2
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	440b      	add	r3, r1
 800d496:	331c      	adds	r3, #28
 800d498:	2200      	movs	r2, #0
 800d49a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d49c:	78f9      	ldrb	r1, [r7, #3]
 800d49e:	2300      	movs	r3, #0
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f001 fddf 	bl	800f066 <USBD_LL_Transmit>
 800d4a8:	e003      	b.n	800d4b2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	e000      	b.n	800d4b8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800d4b6:	2302      	movs	r3, #2
  }
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3710      	adds	r7, #16
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b084      	sub	sp, #16
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4d2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d4d4:	78fb      	ldrb	r3, [r7, #3]
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f001 fe0a 	bl	800f0f2 <USBD_LL_GetRxDataSize>
 800d4de:	4602      	mov	r2, r0
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d00d      	beq.n	800d50c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4f6:	68db      	ldr	r3, [r3, #12]
 800d4f8:	68fa      	ldr	r2, [r7, #12]
 800d4fa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d4fe:	68fa      	ldr	r2, [r7, #12]
 800d500:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d504:	4611      	mov	r1, r2
 800d506:	4798      	blx	r3

    return USBD_OK;
 800d508:	2300      	movs	r3, #0
 800d50a:	e000      	b.n	800d50e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800d50c:	2302      	movs	r3, #2
  }
}
 800d50e:	4618      	mov	r0, r3
 800d510:	3710      	adds	r7, #16
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}

0800d516 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d516:	b580      	push	{r7, lr}
 800d518:	b084      	sub	sp, #16
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d524:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d015      	beq.n	800d55c <USBD_CDC_EP0_RxReady+0x46>
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d536:	2bff      	cmp	r3, #255	; 0xff
 800d538:	d010      	beq.n	800d55c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d540:	689b      	ldr	r3, [r3, #8]
 800d542:	68fa      	ldr	r2, [r7, #12]
 800d544:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800d548:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d54a:	68fa      	ldr	r2, [r7, #12]
 800d54c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d550:	b292      	uxth	r2, r2
 800d552:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	22ff      	movs	r2, #255	; 0xff
 800d558:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800d55c:	2300      	movs	r3, #0
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3710      	adds	r7, #16
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
	...

0800d568 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d568:	b480      	push	{r7}
 800d56a:	b083      	sub	sp, #12
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2243      	movs	r2, #67	; 0x43
 800d574:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800d576:	4b03      	ldr	r3, [pc, #12]	; (800d584 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d578:	4618      	mov	r0, r3
 800d57a:	370c      	adds	r7, #12
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bc80      	pop	{r7}
 800d580:	4770      	bx	lr
 800d582:	bf00      	nop
 800d584:	200002e0 	.word	0x200002e0

0800d588 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d588:	b480      	push	{r7}
 800d58a:	b083      	sub	sp, #12
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2243      	movs	r2, #67	; 0x43
 800d594:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800d596:	4b03      	ldr	r3, [pc, #12]	; (800d5a4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d598:	4618      	mov	r0, r3
 800d59a:	370c      	adds	r7, #12
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bc80      	pop	{r7}
 800d5a0:	4770      	bx	lr
 800d5a2:	bf00      	nop
 800d5a4:	2000029c 	.word	0x2000029c

0800d5a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b083      	sub	sp, #12
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2243      	movs	r2, #67	; 0x43
 800d5b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800d5b6:	4b03      	ldr	r3, [pc, #12]	; (800d5c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	370c      	adds	r7, #12
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bc80      	pop	{r7}
 800d5c0:	4770      	bx	lr
 800d5c2:	bf00      	nop
 800d5c4:	20000324 	.word	0x20000324

0800d5c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b083      	sub	sp, #12
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	220a      	movs	r2, #10
 800d5d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800d5d6:	4b03      	ldr	r3, [pc, #12]	; (800d5e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	370c      	adds	r7, #12
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bc80      	pop	{r7}
 800d5e0:	4770      	bx	lr
 800d5e2:	bf00      	nop
 800d5e4:	20000258 	.word	0x20000258

0800d5e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b085      	sub	sp, #20
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800d5f2:	2302      	movs	r3, #2
 800d5f4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d005      	beq.n	800d608 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	683a      	ldr	r2, [r7, #0]
 800d600:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800d604:	2300      	movs	r3, #0
 800d606:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d608:	7bfb      	ldrb	r3, [r7, #15]
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3714      	adds	r7, #20
 800d60e:	46bd      	mov	sp, r7
 800d610:	bc80      	pop	{r7}
 800d612:	4770      	bx	lr

0800d614 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800d614:	b480      	push	{r7}
 800d616:	b087      	sub	sp, #28
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	4613      	mov	r3, r2
 800d620:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d628:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	68ba      	ldr	r2, [r7, #8]
 800d62e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d632:	88fa      	ldrh	r2, [r7, #6]
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800d63a:	2300      	movs	r3, #0
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	371c      	adds	r7, #28
 800d640:	46bd      	mov	sp, r7
 800d642:	bc80      	pop	{r7}
 800d644:	4770      	bx	lr

0800d646 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800d646:	b480      	push	{r7}
 800d648:	b085      	sub	sp, #20
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	6078      	str	r0, [r7, #4]
 800d64e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d656:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	683a      	ldr	r2, [r7, #0]
 800d65c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800d660:	2300      	movs	r3, #0
}
 800d662:	4618      	mov	r0, r3
 800d664:	3714      	adds	r7, #20
 800d666:	46bd      	mov	sp, r7
 800d668:	bc80      	pop	{r7}
 800d66a:	4770      	bx	lr

0800d66c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d67a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d682:	2b00      	cmp	r3, #0
 800d684:	d01c      	beq.n	800d6c0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d115      	bne.n	800d6bc <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	2201      	movs	r2, #1
 800d694:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	2181      	movs	r1, #129	; 0x81
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f001 fcd7 	bl	800f066 <USBD_LL_Transmit>

      return USBD_OK;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	e002      	b.n	800d6c2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e000      	b.n	800d6c2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800d6c0:	2302      	movs	r3, #2
  }
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3710      	adds	r7, #16
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}

0800d6ca <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d6ca:	b580      	push	{r7, lr}
 800d6cc:	b084      	sub	sp, #16
 800d6ce:	af00      	add	r7, sp, #0
 800d6d0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6d8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d017      	beq.n	800d714 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	7c1b      	ldrb	r3, [r3, #16]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d109      	bne.n	800d700 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d6f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d6f6:	2101      	movs	r1, #1
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f001 fcd7 	bl	800f0ac <USBD_LL_PrepareReceive>
 800d6fe:	e007      	b.n	800d710 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d706:	2340      	movs	r3, #64	; 0x40
 800d708:	2101      	movs	r1, #1
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f001 fcce 	bl	800f0ac <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800d710:	2300      	movs	r3, #0
 800d712:	e000      	b.n	800d716 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800d714:	2302      	movs	r3, #2
  }
}
 800d716:	4618      	mov	r0, r3
 800d718:	3710      	adds	r7, #16
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}

0800d71e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d71e:	b580      	push	{r7, lr}
 800d720:	b084      	sub	sp, #16
 800d722:	af00      	add	r7, sp, #0
 800d724:	60f8      	str	r0, [r7, #12]
 800d726:	60b9      	str	r1, [r7, #8]
 800d728:	4613      	mov	r3, r2
 800d72a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d101      	bne.n	800d736 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d732:	2302      	movs	r3, #2
 800d734:	e01a      	b.n	800d76c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d003      	beq.n	800d748 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2200      	movs	r2, #0
 800d744:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d003      	beq.n	800d756 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	68ba      	ldr	r2, [r7, #8]
 800d752:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2201      	movs	r2, #1
 800d75a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	79fa      	ldrb	r2, [r7, #7]
 800d762:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d764:	68f8      	ldr	r0, [r7, #12]
 800d766:	f001 fb3b 	bl	800ede0 <USBD_LL_Init>

  return USBD_OK;
 800d76a:	2300      	movs	r3, #0
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3710      	adds	r7, #16
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}

0800d774 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d774:	b480      	push	{r7}
 800d776:	b085      	sub	sp, #20
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800d77e:	2300      	movs	r3, #0
 800d780:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d006      	beq.n	800d796 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	683a      	ldr	r2, [r7, #0]
 800d78c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800d790:	2300      	movs	r3, #0
 800d792:	73fb      	strb	r3, [r7, #15]
 800d794:	e001      	b.n	800d79a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d796:	2302      	movs	r3, #2
 800d798:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d79a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3714      	adds	r7, #20
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bc80      	pop	{r7}
 800d7a4:	4770      	bx	lr

0800d7a6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d7a6:	b580      	push	{r7, lr}
 800d7a8:	b082      	sub	sp, #8
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f001 fb70 	bl	800ee94 <USBD_LL_Start>

  return USBD_OK;
 800d7b4:	2300      	movs	r3, #0
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3708      	adds	r7, #8
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}

0800d7be <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d7be:	b480      	push	{r7}
 800d7c0:	b083      	sub	sp, #12
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d7c6:	2300      	movs	r3, #0
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	370c      	adds	r7, #12
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bc80      	pop	{r7}
 800d7d0:	4770      	bx	lr

0800d7d2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d7d2:	b580      	push	{r7, lr}
 800d7d4:	b084      	sub	sp, #16
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
 800d7da:	460b      	mov	r3, r1
 800d7dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d7de:	2302      	movs	r3, #2
 800d7e0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d00c      	beq.n	800d806 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	78fa      	ldrb	r2, [r7, #3]
 800d7f6:	4611      	mov	r1, r2
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	4798      	blx	r3
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d101      	bne.n	800d806 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800d802:	2300      	movs	r3, #0
 800d804:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800d806:	7bfb      	ldrb	r3, [r7, #15]
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3710      	adds	r7, #16
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}

0800d810 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	460b      	mov	r3, r1
 800d81a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	78fa      	ldrb	r2, [r7, #3]
 800d826:	4611      	mov	r1, r2
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	4798      	blx	r3

  return USBD_OK;
 800d82c:	2300      	movs	r3, #0
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3708      	adds	r7, #8
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}

0800d836 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d836:	b580      	push	{r7, lr}
 800d838:	b082      	sub	sp, #8
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
 800d83e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d846:	6839      	ldr	r1, [r7, #0]
 800d848:	4618      	mov	r0, r3
 800d84a:	f000 fed8 	bl	800e5fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2201      	movs	r2, #1
 800d852:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d85c:	461a      	mov	r2, r3
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d86a:	f003 031f 	and.w	r3, r3, #31
 800d86e:	2b02      	cmp	r3, #2
 800d870:	d016      	beq.n	800d8a0 <USBD_LL_SetupStage+0x6a>
 800d872:	2b02      	cmp	r3, #2
 800d874:	d81c      	bhi.n	800d8b0 <USBD_LL_SetupStage+0x7a>
 800d876:	2b00      	cmp	r3, #0
 800d878:	d002      	beq.n	800d880 <USBD_LL_SetupStage+0x4a>
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d008      	beq.n	800d890 <USBD_LL_SetupStage+0x5a>
 800d87e:	e017      	b.n	800d8b0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d886:	4619      	mov	r1, r3
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 f9cb 	bl	800dc24 <USBD_StdDevReq>
      break;
 800d88e:	e01a      	b.n	800d8c6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d896:	4619      	mov	r1, r3
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f000 fa2d 	bl	800dcf8 <USBD_StdItfReq>
      break;
 800d89e:	e012      	b.n	800d8c6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 fa6d 	bl	800dd88 <USBD_StdEPReq>
      break;
 800d8ae:	e00a      	b.n	800d8c6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d8b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	4619      	mov	r1, r3
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f001 fb48 	bl	800ef54 <USBD_LL_StallEP>
      break;
 800d8c4:	bf00      	nop
  }

  return USBD_OK;
 800d8c6:	2300      	movs	r3, #0
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3708      	adds	r7, #8
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b086      	sub	sp, #24
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	60f8      	str	r0, [r7, #12]
 800d8d8:	460b      	mov	r3, r1
 800d8da:	607a      	str	r2, [r7, #4]
 800d8dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d8de:	7afb      	ldrb	r3, [r7, #11]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d14b      	bne.n	800d97c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d8ea:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d8f2:	2b03      	cmp	r3, #3
 800d8f4:	d134      	bne.n	800d960 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	68da      	ldr	r2, [r3, #12]
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	691b      	ldr	r3, [r3, #16]
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d919      	bls.n	800d936 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	68da      	ldr	r2, [r3, #12]
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	691b      	ldr	r3, [r3, #16]
 800d90a:	1ad2      	subs	r2, r2, r3
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	68da      	ldr	r2, [r3, #12]
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d918:	429a      	cmp	r2, r3
 800d91a:	d203      	bcs.n	800d924 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800d920:	b29b      	uxth	r3, r3
 800d922:	e002      	b.n	800d92a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800d928:	b29b      	uxth	r3, r3
 800d92a:	461a      	mov	r2, r3
 800d92c:	6879      	ldr	r1, [r7, #4]
 800d92e:	68f8      	ldr	r0, [r7, #12]
 800d930:	f000 ff57 	bl	800e7e2 <USBD_CtlContinueRx>
 800d934:	e038      	b.n	800d9a8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d93c:	691b      	ldr	r3, [r3, #16]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d00a      	beq.n	800d958 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d948:	2b03      	cmp	r3, #3
 800d94a:	d105      	bne.n	800d958 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d952:	691b      	ldr	r3, [r3, #16]
 800d954:	68f8      	ldr	r0, [r7, #12]
 800d956:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d958:	68f8      	ldr	r0, [r7, #12]
 800d95a:	f000 ff54 	bl	800e806 <USBD_CtlSendStatus>
 800d95e:	e023      	b.n	800d9a8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d966:	2b05      	cmp	r3, #5
 800d968:	d11e      	bne.n	800d9a8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	2200      	movs	r2, #0
 800d96e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800d972:	2100      	movs	r1, #0
 800d974:	68f8      	ldr	r0, [r7, #12]
 800d976:	f001 faed 	bl	800ef54 <USBD_LL_StallEP>
 800d97a:	e015      	b.n	800d9a8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d982:	699b      	ldr	r3, [r3, #24]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d00d      	beq.n	800d9a4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800d98e:	2b03      	cmp	r3, #3
 800d990:	d108      	bne.n	800d9a4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d998:	699b      	ldr	r3, [r3, #24]
 800d99a:	7afa      	ldrb	r2, [r7, #11]
 800d99c:	4611      	mov	r1, r2
 800d99e:	68f8      	ldr	r0, [r7, #12]
 800d9a0:	4798      	blx	r3
 800d9a2:	e001      	b.n	800d9a8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d9a4:	2302      	movs	r3, #2
 800d9a6:	e000      	b.n	800d9aa <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800d9a8:	2300      	movs	r3, #0
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3718      	adds	r7, #24
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}

0800d9b2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d9b2:	b580      	push	{r7, lr}
 800d9b4:	b086      	sub	sp, #24
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	60f8      	str	r0, [r7, #12]
 800d9ba:	460b      	mov	r3, r1
 800d9bc:	607a      	str	r2, [r7, #4]
 800d9be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800d9c0:	7afb      	ldrb	r3, [r7, #11]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d17f      	bne.n	800dac6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	3314      	adds	r3, #20
 800d9ca:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d9d2:	2b02      	cmp	r3, #2
 800d9d4:	d15c      	bne.n	800da90 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	68da      	ldr	r2, [r3, #12]
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	691b      	ldr	r3, [r3, #16]
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	d915      	bls.n	800da0e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	68da      	ldr	r2, [r3, #12]
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	691b      	ldr	r3, [r3, #16]
 800d9ea:	1ad2      	subs	r2, r2, r3
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	b29b      	uxth	r3, r3
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	6879      	ldr	r1, [r7, #4]
 800d9fa:	68f8      	ldr	r0, [r7, #12]
 800d9fc:	f000 fec1 	bl	800e782 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da00:	2300      	movs	r3, #0
 800da02:	2200      	movs	r2, #0
 800da04:	2100      	movs	r1, #0
 800da06:	68f8      	ldr	r0, [r7, #12]
 800da08:	f001 fb50 	bl	800f0ac <USBD_LL_PrepareReceive>
 800da0c:	e04e      	b.n	800daac <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	689b      	ldr	r3, [r3, #8]
 800da12:	697a      	ldr	r2, [r7, #20]
 800da14:	6912      	ldr	r2, [r2, #16]
 800da16:	fbb3 f1f2 	udiv	r1, r3, r2
 800da1a:	fb01 f202 	mul.w	r2, r1, r2
 800da1e:	1a9b      	subs	r3, r3, r2
 800da20:	2b00      	cmp	r3, #0
 800da22:	d11c      	bne.n	800da5e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	689a      	ldr	r2, [r3, #8]
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d316      	bcc.n	800da5e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	689a      	ldr	r2, [r3, #8]
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d20f      	bcs.n	800da5e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800da3e:	2200      	movs	r2, #0
 800da40:	2100      	movs	r1, #0
 800da42:	68f8      	ldr	r0, [r7, #12]
 800da44:	f000 fe9d 	bl	800e782 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2200      	movs	r2, #0
 800da4c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da50:	2300      	movs	r3, #0
 800da52:	2200      	movs	r2, #0
 800da54:	2100      	movs	r1, #0
 800da56:	68f8      	ldr	r0, [r7, #12]
 800da58:	f001 fb28 	bl	800f0ac <USBD_LL_PrepareReceive>
 800da5c:	e026      	b.n	800daac <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da64:	68db      	ldr	r3, [r3, #12]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d00a      	beq.n	800da80 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800da70:	2b03      	cmp	r3, #3
 800da72:	d105      	bne.n	800da80 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da7a:	68db      	ldr	r3, [r3, #12]
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800da80:	2180      	movs	r1, #128	; 0x80
 800da82:	68f8      	ldr	r0, [r7, #12]
 800da84:	f001 fa66 	bl	800ef54 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800da88:	68f8      	ldr	r0, [r7, #12]
 800da8a:	f000 fecf 	bl	800e82c <USBD_CtlReceiveStatus>
 800da8e:	e00d      	b.n	800daac <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800da96:	2b04      	cmp	r3, #4
 800da98:	d004      	beq.n	800daa4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d103      	bne.n	800daac <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800daa4:	2180      	movs	r1, #128	; 0x80
 800daa6:	68f8      	ldr	r0, [r7, #12]
 800daa8:	f001 fa54 	bl	800ef54 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d11d      	bne.n	800daf2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800dab6:	68f8      	ldr	r0, [r7, #12]
 800dab8:	f7ff fe81 	bl	800d7be <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2200      	movs	r2, #0
 800dac0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800dac4:	e015      	b.n	800daf2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dacc:	695b      	ldr	r3, [r3, #20]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d00d      	beq.n	800daee <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800dad8:	2b03      	cmp	r3, #3
 800dada:	d108      	bne.n	800daee <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dae2:	695b      	ldr	r3, [r3, #20]
 800dae4:	7afa      	ldrb	r2, [r7, #11]
 800dae6:	4611      	mov	r1, r2
 800dae8:	68f8      	ldr	r0, [r7, #12]
 800daea:	4798      	blx	r3
 800daec:	e001      	b.n	800daf2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800daee:	2302      	movs	r3, #2
 800daf0:	e000      	b.n	800daf4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800daf2:	2300      	movs	r3, #0
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3718      	adds	r7, #24
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800db04:	2340      	movs	r3, #64	; 0x40
 800db06:	2200      	movs	r2, #0
 800db08:	2100      	movs	r1, #0
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f001 f9dd 	bl	800eeca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2201      	movs	r2, #1
 800db14:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2240      	movs	r2, #64	; 0x40
 800db1c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800db20:	2340      	movs	r3, #64	; 0x40
 800db22:	2200      	movs	r2, #0
 800db24:	2180      	movs	r1, #128	; 0x80
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f001 f9cf 	bl	800eeca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2201      	movs	r2, #1
 800db30:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2240      	movs	r2, #64	; 0x40
 800db36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2201      	movs	r2, #1
 800db3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2200      	movs	r2, #0
 800db44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2200      	movs	r2, #0
 800db52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d009      	beq.n	800db74 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	687a      	ldr	r2, [r7, #4]
 800db6a:	6852      	ldr	r2, [r2, #4]
 800db6c:	b2d2      	uxtb	r2, r2
 800db6e:	4611      	mov	r1, r2
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	4798      	blx	r3
  }

  return USBD_OK;
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3708      	adds	r7, #8
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}

0800db7e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800db7e:	b480      	push	{r7}
 800db80:	b083      	sub	sp, #12
 800db82:	af00      	add	r7, sp, #0
 800db84:	6078      	str	r0, [r7, #4]
 800db86:	460b      	mov	r3, r1
 800db88:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	78fa      	ldrb	r2, [r7, #3]
 800db8e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800db90:	2300      	movs	r3, #0
}
 800db92:	4618      	mov	r0, r3
 800db94:	370c      	adds	r7, #12
 800db96:	46bd      	mov	sp, r7
 800db98:	bc80      	pop	{r7}
 800db9a:	4770      	bx	lr

0800db9c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2204      	movs	r2, #4
 800dbb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800dbb8:	2300      	movs	r3, #0
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	370c      	adds	r7, #12
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bc80      	pop	{r7}
 800dbc2:	4770      	bx	lr

0800dbc4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbd2:	2b04      	cmp	r3, #4
 800dbd4:	d105      	bne.n	800dbe2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800dbe2:	2300      	movs	r3, #0
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	370c      	adds	r7, #12
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bc80      	pop	{r7}
 800dbec:	4770      	bx	lr

0800dbee <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b082      	sub	sp, #8
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbfc:	2b03      	cmp	r3, #3
 800dbfe:	d10b      	bne.n	800dc18 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc06:	69db      	ldr	r3, [r3, #28]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d005      	beq.n	800dc18 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc12:	69db      	ldr	r3, [r3, #28]
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dc18:	2300      	movs	r3, #0
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3708      	adds	r7, #8
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}
	...

0800dc24 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc3a:	2b40      	cmp	r3, #64	; 0x40
 800dc3c:	d005      	beq.n	800dc4a <USBD_StdDevReq+0x26>
 800dc3e:	2b40      	cmp	r3, #64	; 0x40
 800dc40:	d84f      	bhi.n	800dce2 <USBD_StdDevReq+0xbe>
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d009      	beq.n	800dc5a <USBD_StdDevReq+0x36>
 800dc46:	2b20      	cmp	r3, #32
 800dc48:	d14b      	bne.n	800dce2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc50:	689b      	ldr	r3, [r3, #8]
 800dc52:	6839      	ldr	r1, [r7, #0]
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	4798      	blx	r3
      break;
 800dc58:	e048      	b.n	800dcec <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	785b      	ldrb	r3, [r3, #1]
 800dc5e:	2b09      	cmp	r3, #9
 800dc60:	d839      	bhi.n	800dcd6 <USBD_StdDevReq+0xb2>
 800dc62:	a201      	add	r2, pc, #4	; (adr r2, 800dc68 <USBD_StdDevReq+0x44>)
 800dc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc68:	0800dcb9 	.word	0x0800dcb9
 800dc6c:	0800dccd 	.word	0x0800dccd
 800dc70:	0800dcd7 	.word	0x0800dcd7
 800dc74:	0800dcc3 	.word	0x0800dcc3
 800dc78:	0800dcd7 	.word	0x0800dcd7
 800dc7c:	0800dc9b 	.word	0x0800dc9b
 800dc80:	0800dc91 	.word	0x0800dc91
 800dc84:	0800dcd7 	.word	0x0800dcd7
 800dc88:	0800dcaf 	.word	0x0800dcaf
 800dc8c:	0800dca5 	.word	0x0800dca5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dc90:	6839      	ldr	r1, [r7, #0]
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f000 f9dc 	bl	800e050 <USBD_GetDescriptor>
          break;
 800dc98:	e022      	b.n	800dce0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dc9a:	6839      	ldr	r1, [r7, #0]
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f000 fb3f 	bl	800e320 <USBD_SetAddress>
          break;
 800dca2:	e01d      	b.n	800dce0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800dca4:	6839      	ldr	r1, [r7, #0]
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 fb7e 	bl	800e3a8 <USBD_SetConfig>
          break;
 800dcac:	e018      	b.n	800dce0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dcae:	6839      	ldr	r1, [r7, #0]
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f000 fc07 	bl	800e4c4 <USBD_GetConfig>
          break;
 800dcb6:	e013      	b.n	800dce0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dcb8:	6839      	ldr	r1, [r7, #0]
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f000 fc37 	bl	800e52e <USBD_GetStatus>
          break;
 800dcc0:	e00e      	b.n	800dce0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dcc2:	6839      	ldr	r1, [r7, #0]
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f000 fc65 	bl	800e594 <USBD_SetFeature>
          break;
 800dcca:	e009      	b.n	800dce0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dccc:	6839      	ldr	r1, [r7, #0]
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f000 fc74 	bl	800e5bc <USBD_ClrFeature>
          break;
 800dcd4:	e004      	b.n	800dce0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800dcd6:	6839      	ldr	r1, [r7, #0]
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f000 fccc 	bl	800e676 <USBD_CtlError>
          break;
 800dcde:	bf00      	nop
      }
      break;
 800dce0:	e004      	b.n	800dcec <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800dce2:	6839      	ldr	r1, [r7, #0]
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f000 fcc6 	bl	800e676 <USBD_CtlError>
      break;
 800dcea:	bf00      	nop
  }

  return ret;
 800dcec:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3710      	adds	r7, #16
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
 800dcf6:	bf00      	nop

0800dcf8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd02:	2300      	movs	r3, #0
 800dd04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd0e:	2b40      	cmp	r3, #64	; 0x40
 800dd10:	d005      	beq.n	800dd1e <USBD_StdItfReq+0x26>
 800dd12:	2b40      	cmp	r3, #64	; 0x40
 800dd14:	d82e      	bhi.n	800dd74 <USBD_StdItfReq+0x7c>
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d001      	beq.n	800dd1e <USBD_StdItfReq+0x26>
 800dd1a:	2b20      	cmp	r3, #32
 800dd1c:	d12a      	bne.n	800dd74 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd24:	3b01      	subs	r3, #1
 800dd26:	2b02      	cmp	r3, #2
 800dd28:	d81d      	bhi.n	800dd66 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	889b      	ldrh	r3, [r3, #4]
 800dd2e:	b2db      	uxtb	r3, r3
 800dd30:	2b01      	cmp	r3, #1
 800dd32:	d813      	bhi.n	800dd5c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd3a:	689b      	ldr	r3, [r3, #8]
 800dd3c:	6839      	ldr	r1, [r7, #0]
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	4798      	blx	r3
 800dd42:	4603      	mov	r3, r0
 800dd44:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	88db      	ldrh	r3, [r3, #6]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d110      	bne.n	800dd70 <USBD_StdItfReq+0x78>
 800dd4e:	7bfb      	ldrb	r3, [r7, #15]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d10d      	bne.n	800dd70 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 fd56 	bl	800e806 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dd5a:	e009      	b.n	800dd70 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800dd5c:	6839      	ldr	r1, [r7, #0]
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 fc89 	bl	800e676 <USBD_CtlError>
          break;
 800dd64:	e004      	b.n	800dd70 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800dd66:	6839      	ldr	r1, [r7, #0]
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f000 fc84 	bl	800e676 <USBD_CtlError>
          break;
 800dd6e:	e000      	b.n	800dd72 <USBD_StdItfReq+0x7a>
          break;
 800dd70:	bf00      	nop
      }
      break;
 800dd72:	e004      	b.n	800dd7e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800dd74:	6839      	ldr	r1, [r7, #0]
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f000 fc7d 	bl	800e676 <USBD_CtlError>
      break;
 800dd7c:	bf00      	nop
  }

  return USBD_OK;
 800dd7e:	2300      	movs	r3, #0
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3710      	adds	r7, #16
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dd92:	2300      	movs	r3, #0
 800dd94:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	889b      	ldrh	r3, [r3, #4]
 800dd9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dda4:	2b40      	cmp	r3, #64	; 0x40
 800dda6:	d007      	beq.n	800ddb8 <USBD_StdEPReq+0x30>
 800dda8:	2b40      	cmp	r3, #64	; 0x40
 800ddaa:	f200 8146 	bhi.w	800e03a <USBD_StdEPReq+0x2b2>
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d00a      	beq.n	800ddc8 <USBD_StdEPReq+0x40>
 800ddb2:	2b20      	cmp	r3, #32
 800ddb4:	f040 8141 	bne.w	800e03a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	6839      	ldr	r1, [r7, #0]
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	4798      	blx	r3
      break;
 800ddc6:	e13d      	b.n	800e044 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ddd0:	2b20      	cmp	r3, #32
 800ddd2:	d10a      	bne.n	800ddea <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddda:	689b      	ldr	r3, [r3, #8]
 800dddc:	6839      	ldr	r1, [r7, #0]
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	4798      	blx	r3
 800dde2:	4603      	mov	r3, r0
 800dde4:	73fb      	strb	r3, [r7, #15]

        return ret;
 800dde6:	7bfb      	ldrb	r3, [r7, #15]
 800dde8:	e12d      	b.n	800e046 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	785b      	ldrb	r3, [r3, #1]
 800ddee:	2b03      	cmp	r3, #3
 800ddf0:	d007      	beq.n	800de02 <USBD_StdEPReq+0x7a>
 800ddf2:	2b03      	cmp	r3, #3
 800ddf4:	f300 811b 	bgt.w	800e02e <USBD_StdEPReq+0x2a6>
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d072      	beq.n	800dee2 <USBD_StdEPReq+0x15a>
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d03a      	beq.n	800de76 <USBD_StdEPReq+0xee>
 800de00:	e115      	b.n	800e02e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de08:	2b02      	cmp	r3, #2
 800de0a:	d002      	beq.n	800de12 <USBD_StdEPReq+0x8a>
 800de0c:	2b03      	cmp	r3, #3
 800de0e:	d015      	beq.n	800de3c <USBD_StdEPReq+0xb4>
 800de10:	e02b      	b.n	800de6a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de12:	7bbb      	ldrb	r3, [r7, #14]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d00c      	beq.n	800de32 <USBD_StdEPReq+0xaa>
 800de18:	7bbb      	ldrb	r3, [r7, #14]
 800de1a:	2b80      	cmp	r3, #128	; 0x80
 800de1c:	d009      	beq.n	800de32 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800de1e:	7bbb      	ldrb	r3, [r7, #14]
 800de20:	4619      	mov	r1, r3
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f001 f896 	bl	800ef54 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800de28:	2180      	movs	r1, #128	; 0x80
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f001 f892 	bl	800ef54 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800de30:	e020      	b.n	800de74 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800de32:	6839      	ldr	r1, [r7, #0]
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f000 fc1e 	bl	800e676 <USBD_CtlError>
              break;
 800de3a:	e01b      	b.n	800de74 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	885b      	ldrh	r3, [r3, #2]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d10e      	bne.n	800de62 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800de44:	7bbb      	ldrb	r3, [r7, #14]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d00b      	beq.n	800de62 <USBD_StdEPReq+0xda>
 800de4a:	7bbb      	ldrb	r3, [r7, #14]
 800de4c:	2b80      	cmp	r3, #128	; 0x80
 800de4e:	d008      	beq.n	800de62 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	88db      	ldrh	r3, [r3, #6]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d104      	bne.n	800de62 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800de58:	7bbb      	ldrb	r3, [r7, #14]
 800de5a:	4619      	mov	r1, r3
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f001 f879 	bl	800ef54 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f000 fccf 	bl	800e806 <USBD_CtlSendStatus>

              break;
 800de68:	e004      	b.n	800de74 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800de6a:	6839      	ldr	r1, [r7, #0]
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f000 fc02 	bl	800e676 <USBD_CtlError>
              break;
 800de72:	bf00      	nop
          }
          break;
 800de74:	e0e0      	b.n	800e038 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de7c:	2b02      	cmp	r3, #2
 800de7e:	d002      	beq.n	800de86 <USBD_StdEPReq+0xfe>
 800de80:	2b03      	cmp	r3, #3
 800de82:	d015      	beq.n	800deb0 <USBD_StdEPReq+0x128>
 800de84:	e026      	b.n	800ded4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de86:	7bbb      	ldrb	r3, [r7, #14]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d00c      	beq.n	800dea6 <USBD_StdEPReq+0x11e>
 800de8c:	7bbb      	ldrb	r3, [r7, #14]
 800de8e:	2b80      	cmp	r3, #128	; 0x80
 800de90:	d009      	beq.n	800dea6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800de92:	7bbb      	ldrb	r3, [r7, #14]
 800de94:	4619      	mov	r1, r3
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f001 f85c 	bl	800ef54 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800de9c:	2180      	movs	r1, #128	; 0x80
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f001 f858 	bl	800ef54 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dea4:	e01c      	b.n	800dee0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800dea6:	6839      	ldr	r1, [r7, #0]
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f000 fbe4 	bl	800e676 <USBD_CtlError>
              break;
 800deae:	e017      	b.n	800dee0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	885b      	ldrh	r3, [r3, #2]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d112      	bne.n	800dede <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800deb8:	7bbb      	ldrb	r3, [r7, #14]
 800deba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d004      	beq.n	800decc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800dec2:	7bbb      	ldrb	r3, [r7, #14]
 800dec4:	4619      	mov	r1, r3
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f001 f863 	bl	800ef92 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f000 fc9a 	bl	800e806 <USBD_CtlSendStatus>
              }
              break;
 800ded2:	e004      	b.n	800dede <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800ded4:	6839      	ldr	r1, [r7, #0]
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f000 fbcd 	bl	800e676 <USBD_CtlError>
              break;
 800dedc:	e000      	b.n	800dee0 <USBD_StdEPReq+0x158>
              break;
 800dede:	bf00      	nop
          }
          break;
 800dee0:	e0aa      	b.n	800e038 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dee8:	2b02      	cmp	r3, #2
 800deea:	d002      	beq.n	800def2 <USBD_StdEPReq+0x16a>
 800deec:	2b03      	cmp	r3, #3
 800deee:	d032      	beq.n	800df56 <USBD_StdEPReq+0x1ce>
 800def0:	e097      	b.n	800e022 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800def2:	7bbb      	ldrb	r3, [r7, #14]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d007      	beq.n	800df08 <USBD_StdEPReq+0x180>
 800def8:	7bbb      	ldrb	r3, [r7, #14]
 800defa:	2b80      	cmp	r3, #128	; 0x80
 800defc:	d004      	beq.n	800df08 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800defe:	6839      	ldr	r1, [r7, #0]
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f000 fbb8 	bl	800e676 <USBD_CtlError>
                break;
 800df06:	e091      	b.n	800e02c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	da0b      	bge.n	800df28 <USBD_StdEPReq+0x1a0>
 800df10:	7bbb      	ldrb	r3, [r7, #14]
 800df12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df16:	4613      	mov	r3, r2
 800df18:	009b      	lsls	r3, r3, #2
 800df1a:	4413      	add	r3, r2
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	3310      	adds	r3, #16
 800df20:	687a      	ldr	r2, [r7, #4]
 800df22:	4413      	add	r3, r2
 800df24:	3304      	adds	r3, #4
 800df26:	e00b      	b.n	800df40 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800df28:	7bbb      	ldrb	r3, [r7, #14]
 800df2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df2e:	4613      	mov	r3, r2
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	4413      	add	r3, r2
 800df34:	009b      	lsls	r3, r3, #2
 800df36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	4413      	add	r3, r2
 800df3e:	3304      	adds	r3, #4
 800df40:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	2200      	movs	r2, #0
 800df46:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	2202      	movs	r2, #2
 800df4c:	4619      	mov	r1, r3
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f000 fbfb 	bl	800e74a <USBD_CtlSendData>
              break;
 800df54:	e06a      	b.n	800e02c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800df56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	da11      	bge.n	800df82 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800df5e:	7bbb      	ldrb	r3, [r7, #14]
 800df60:	f003 020f 	and.w	r2, r3, #15
 800df64:	6879      	ldr	r1, [r7, #4]
 800df66:	4613      	mov	r3, r2
 800df68:	009b      	lsls	r3, r3, #2
 800df6a:	4413      	add	r3, r2
 800df6c:	009b      	lsls	r3, r3, #2
 800df6e:	440b      	add	r3, r1
 800df70:	3318      	adds	r3, #24
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d117      	bne.n	800dfa8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800df78:	6839      	ldr	r1, [r7, #0]
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f000 fb7b 	bl	800e676 <USBD_CtlError>
                  break;
 800df80:	e054      	b.n	800e02c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800df82:	7bbb      	ldrb	r3, [r7, #14]
 800df84:	f003 020f 	and.w	r2, r3, #15
 800df88:	6879      	ldr	r1, [r7, #4]
 800df8a:	4613      	mov	r3, r2
 800df8c:	009b      	lsls	r3, r3, #2
 800df8e:	4413      	add	r3, r2
 800df90:	009b      	lsls	r3, r3, #2
 800df92:	440b      	add	r3, r1
 800df94:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d104      	bne.n	800dfa8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800df9e:	6839      	ldr	r1, [r7, #0]
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f000 fb68 	bl	800e676 <USBD_CtlError>
                  break;
 800dfa6:	e041      	b.n	800e02c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dfa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	da0b      	bge.n	800dfc8 <USBD_StdEPReq+0x240>
 800dfb0:	7bbb      	ldrb	r3, [r7, #14]
 800dfb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	4413      	add	r3, r2
 800dfbc:	009b      	lsls	r3, r3, #2
 800dfbe:	3310      	adds	r3, #16
 800dfc0:	687a      	ldr	r2, [r7, #4]
 800dfc2:	4413      	add	r3, r2
 800dfc4:	3304      	adds	r3, #4
 800dfc6:	e00b      	b.n	800dfe0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dfc8:	7bbb      	ldrb	r3, [r7, #14]
 800dfca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dfce:	4613      	mov	r3, r2
 800dfd0:	009b      	lsls	r3, r3, #2
 800dfd2:	4413      	add	r3, r2
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dfda:	687a      	ldr	r2, [r7, #4]
 800dfdc:	4413      	add	r3, r2
 800dfde:	3304      	adds	r3, #4
 800dfe0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dfe2:	7bbb      	ldrb	r3, [r7, #14]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d002      	beq.n	800dfee <USBD_StdEPReq+0x266>
 800dfe8:	7bbb      	ldrb	r3, [r7, #14]
 800dfea:	2b80      	cmp	r3, #128	; 0x80
 800dfec:	d103      	bne.n	800dff6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	2200      	movs	r2, #0
 800dff2:	601a      	str	r2, [r3, #0]
 800dff4:	e00e      	b.n	800e014 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800dff6:	7bbb      	ldrb	r3, [r7, #14]
 800dff8:	4619      	mov	r1, r3
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f000 ffe8 	bl	800efd0 <USBD_LL_IsStallEP>
 800e000:	4603      	mov	r3, r0
 800e002:	2b00      	cmp	r3, #0
 800e004:	d003      	beq.n	800e00e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	2201      	movs	r2, #1
 800e00a:	601a      	str	r2, [r3, #0]
 800e00c:	e002      	b.n	800e014 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	2200      	movs	r2, #0
 800e012:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	2202      	movs	r2, #2
 800e018:	4619      	mov	r1, r3
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f000 fb95 	bl	800e74a <USBD_CtlSendData>
              break;
 800e020:	e004      	b.n	800e02c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800e022:	6839      	ldr	r1, [r7, #0]
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 fb26 	bl	800e676 <USBD_CtlError>
              break;
 800e02a:	bf00      	nop
          }
          break;
 800e02c:	e004      	b.n	800e038 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800e02e:	6839      	ldr	r1, [r7, #0]
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f000 fb20 	bl	800e676 <USBD_CtlError>
          break;
 800e036:	bf00      	nop
      }
      break;
 800e038:	e004      	b.n	800e044 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800e03a:	6839      	ldr	r1, [r7, #0]
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f000 fb1a 	bl	800e676 <USBD_CtlError>
      break;
 800e042:	bf00      	nop
  }

  return ret;
 800e044:	7bfb      	ldrb	r3, [r7, #15]
}
 800e046:	4618      	mov	r0, r3
 800e048:	3710      	adds	r7, #16
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
	...

0800e050 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b084      	sub	sp, #16
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e05a:	2300      	movs	r3, #0
 800e05c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e05e:	2300      	movs	r3, #0
 800e060:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e062:	2300      	movs	r3, #0
 800e064:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	885b      	ldrh	r3, [r3, #2]
 800e06a:	0a1b      	lsrs	r3, r3, #8
 800e06c:	b29b      	uxth	r3, r3
 800e06e:	3b01      	subs	r3, #1
 800e070:	2b06      	cmp	r3, #6
 800e072:	f200 8128 	bhi.w	800e2c6 <USBD_GetDescriptor+0x276>
 800e076:	a201      	add	r2, pc, #4	; (adr r2, 800e07c <USBD_GetDescriptor+0x2c>)
 800e078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e07c:	0800e099 	.word	0x0800e099
 800e080:	0800e0b1 	.word	0x0800e0b1
 800e084:	0800e0f1 	.word	0x0800e0f1
 800e088:	0800e2c7 	.word	0x0800e2c7
 800e08c:	0800e2c7 	.word	0x0800e2c7
 800e090:	0800e267 	.word	0x0800e267
 800e094:	0800e293 	.word	0x0800e293
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	687a      	ldr	r2, [r7, #4]
 800e0a2:	7c12      	ldrb	r2, [r2, #16]
 800e0a4:	f107 0108 	add.w	r1, r7, #8
 800e0a8:	4610      	mov	r0, r2
 800e0aa:	4798      	blx	r3
 800e0ac:	60f8      	str	r0, [r7, #12]
      break;
 800e0ae:	e112      	b.n	800e2d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	7c1b      	ldrb	r3, [r3, #16]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d10d      	bne.n	800e0d4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0c0:	f107 0208 	add.w	r2, r7, #8
 800e0c4:	4610      	mov	r0, r2
 800e0c6:	4798      	blx	r3
 800e0c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	3301      	adds	r3, #1
 800e0ce:	2202      	movs	r2, #2
 800e0d0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e0d2:	e100      	b.n	800e2d6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0dc:	f107 0208 	add.w	r2, r7, #8
 800e0e0:	4610      	mov	r0, r2
 800e0e2:	4798      	blx	r3
 800e0e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	2202      	movs	r2, #2
 800e0ec:	701a      	strb	r2, [r3, #0]
      break;
 800e0ee:	e0f2      	b.n	800e2d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	885b      	ldrh	r3, [r3, #2]
 800e0f4:	b2db      	uxtb	r3, r3
 800e0f6:	2b05      	cmp	r3, #5
 800e0f8:	f200 80ac 	bhi.w	800e254 <USBD_GetDescriptor+0x204>
 800e0fc:	a201      	add	r2, pc, #4	; (adr r2, 800e104 <USBD_GetDescriptor+0xb4>)
 800e0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e102:	bf00      	nop
 800e104:	0800e11d 	.word	0x0800e11d
 800e108:	0800e151 	.word	0x0800e151
 800e10c:	0800e185 	.word	0x0800e185
 800e110:	0800e1b9 	.word	0x0800e1b9
 800e114:	0800e1ed 	.word	0x0800e1ed
 800e118:	0800e221 	.word	0x0800e221
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d00b      	beq.n	800e140 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	687a      	ldr	r2, [r7, #4]
 800e132:	7c12      	ldrb	r2, [r2, #16]
 800e134:	f107 0108 	add.w	r1, r7, #8
 800e138:	4610      	mov	r0, r2
 800e13a:	4798      	blx	r3
 800e13c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e13e:	e091      	b.n	800e264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e140:	6839      	ldr	r1, [r7, #0]
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f000 fa97 	bl	800e676 <USBD_CtlError>
            err++;
 800e148:	7afb      	ldrb	r3, [r7, #11]
 800e14a:	3301      	adds	r3, #1
 800e14c:	72fb      	strb	r3, [r7, #11]
          break;
 800e14e:	e089      	b.n	800e264 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e156:	689b      	ldr	r3, [r3, #8]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d00b      	beq.n	800e174 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e162:	689b      	ldr	r3, [r3, #8]
 800e164:	687a      	ldr	r2, [r7, #4]
 800e166:	7c12      	ldrb	r2, [r2, #16]
 800e168:	f107 0108 	add.w	r1, r7, #8
 800e16c:	4610      	mov	r0, r2
 800e16e:	4798      	blx	r3
 800e170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e172:	e077      	b.n	800e264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e174:	6839      	ldr	r1, [r7, #0]
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f000 fa7d 	bl	800e676 <USBD_CtlError>
            err++;
 800e17c:	7afb      	ldrb	r3, [r7, #11]
 800e17e:	3301      	adds	r3, #1
 800e180:	72fb      	strb	r3, [r7, #11]
          break;
 800e182:	e06f      	b.n	800e264 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e18a:	68db      	ldr	r3, [r3, #12]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d00b      	beq.n	800e1a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e196:	68db      	ldr	r3, [r3, #12]
 800e198:	687a      	ldr	r2, [r7, #4]
 800e19a:	7c12      	ldrb	r2, [r2, #16]
 800e19c:	f107 0108 	add.w	r1, r7, #8
 800e1a0:	4610      	mov	r0, r2
 800e1a2:	4798      	blx	r3
 800e1a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1a6:	e05d      	b.n	800e264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e1a8:	6839      	ldr	r1, [r7, #0]
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f000 fa63 	bl	800e676 <USBD_CtlError>
            err++;
 800e1b0:	7afb      	ldrb	r3, [r7, #11]
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	72fb      	strb	r3, [r7, #11]
          break;
 800e1b6:	e055      	b.n	800e264 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e1be:	691b      	ldr	r3, [r3, #16]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d00b      	beq.n	800e1dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e1ca:	691b      	ldr	r3, [r3, #16]
 800e1cc:	687a      	ldr	r2, [r7, #4]
 800e1ce:	7c12      	ldrb	r2, [r2, #16]
 800e1d0:	f107 0108 	add.w	r1, r7, #8
 800e1d4:	4610      	mov	r0, r2
 800e1d6:	4798      	blx	r3
 800e1d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1da:	e043      	b.n	800e264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e1dc:	6839      	ldr	r1, [r7, #0]
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f000 fa49 	bl	800e676 <USBD_CtlError>
            err++;
 800e1e4:	7afb      	ldrb	r3, [r7, #11]
 800e1e6:	3301      	adds	r3, #1
 800e1e8:	72fb      	strb	r3, [r7, #11]
          break;
 800e1ea:	e03b      	b.n	800e264 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e1f2:	695b      	ldr	r3, [r3, #20]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d00b      	beq.n	800e210 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e1fe:	695b      	ldr	r3, [r3, #20]
 800e200:	687a      	ldr	r2, [r7, #4]
 800e202:	7c12      	ldrb	r2, [r2, #16]
 800e204:	f107 0108 	add.w	r1, r7, #8
 800e208:	4610      	mov	r0, r2
 800e20a:	4798      	blx	r3
 800e20c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e20e:	e029      	b.n	800e264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e210:	6839      	ldr	r1, [r7, #0]
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f000 fa2f 	bl	800e676 <USBD_CtlError>
            err++;
 800e218:	7afb      	ldrb	r3, [r7, #11]
 800e21a:	3301      	adds	r3, #1
 800e21c:	72fb      	strb	r3, [r7, #11]
          break;
 800e21e:	e021      	b.n	800e264 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e226:	699b      	ldr	r3, [r3, #24]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d00b      	beq.n	800e244 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800e232:	699b      	ldr	r3, [r3, #24]
 800e234:	687a      	ldr	r2, [r7, #4]
 800e236:	7c12      	ldrb	r2, [r2, #16]
 800e238:	f107 0108 	add.w	r1, r7, #8
 800e23c:	4610      	mov	r0, r2
 800e23e:	4798      	blx	r3
 800e240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e242:	e00f      	b.n	800e264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e244:	6839      	ldr	r1, [r7, #0]
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f000 fa15 	bl	800e676 <USBD_CtlError>
            err++;
 800e24c:	7afb      	ldrb	r3, [r7, #11]
 800e24e:	3301      	adds	r3, #1
 800e250:	72fb      	strb	r3, [r7, #11]
          break;
 800e252:	e007      	b.n	800e264 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800e254:	6839      	ldr	r1, [r7, #0]
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f000 fa0d 	bl	800e676 <USBD_CtlError>
          err++;
 800e25c:	7afb      	ldrb	r3, [r7, #11]
 800e25e:	3301      	adds	r3, #1
 800e260:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800e262:	e038      	b.n	800e2d6 <USBD_GetDescriptor+0x286>
 800e264:	e037      	b.n	800e2d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	7c1b      	ldrb	r3, [r3, #16]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d109      	bne.n	800e282 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e276:	f107 0208 	add.w	r2, r7, #8
 800e27a:	4610      	mov	r0, r2
 800e27c:	4798      	blx	r3
 800e27e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e280:	e029      	b.n	800e2d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e282:	6839      	ldr	r1, [r7, #0]
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f000 f9f6 	bl	800e676 <USBD_CtlError>
        err++;
 800e28a:	7afb      	ldrb	r3, [r7, #11]
 800e28c:	3301      	adds	r3, #1
 800e28e:	72fb      	strb	r3, [r7, #11]
      break;
 800e290:	e021      	b.n	800e2d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	7c1b      	ldrb	r3, [r3, #16]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d10d      	bne.n	800e2b6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2a2:	f107 0208 	add.w	r2, r7, #8
 800e2a6:	4610      	mov	r0, r2
 800e2a8:	4798      	blx	r3
 800e2aa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	2207      	movs	r2, #7
 800e2b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e2b4:	e00f      	b.n	800e2d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e2b6:	6839      	ldr	r1, [r7, #0]
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f000 f9dc 	bl	800e676 <USBD_CtlError>
        err++;
 800e2be:	7afb      	ldrb	r3, [r7, #11]
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	72fb      	strb	r3, [r7, #11]
      break;
 800e2c4:	e007      	b.n	800e2d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e2c6:	6839      	ldr	r1, [r7, #0]
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f000 f9d4 	bl	800e676 <USBD_CtlError>
      err++;
 800e2ce:	7afb      	ldrb	r3, [r7, #11]
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	72fb      	strb	r3, [r7, #11]
      break;
 800e2d4:	bf00      	nop
  }

  if (err != 0U)
 800e2d6:	7afb      	ldrb	r3, [r7, #11]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d11c      	bne.n	800e316 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800e2dc:	893b      	ldrh	r3, [r7, #8]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d011      	beq.n	800e306 <USBD_GetDescriptor+0x2b6>
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	88db      	ldrh	r3, [r3, #6]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d00d      	beq.n	800e306 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	88da      	ldrh	r2, [r3, #6]
 800e2ee:	893b      	ldrh	r3, [r7, #8]
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	bf28      	it	cs
 800e2f4:	4613      	movcs	r3, r2
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e2fa:	893b      	ldrh	r3, [r7, #8]
 800e2fc:	461a      	mov	r2, r3
 800e2fe:	68f9      	ldr	r1, [r7, #12]
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f000 fa22 	bl	800e74a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	88db      	ldrh	r3, [r3, #6]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d104      	bne.n	800e318 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f000 fa79 	bl	800e806 <USBD_CtlSendStatus>
 800e314:	e000      	b.n	800e318 <USBD_GetDescriptor+0x2c8>
    return;
 800e316:	bf00      	nop
    }
  }
}
 800e318:	3710      	adds	r7, #16
 800e31a:	46bd      	mov	sp, r7
 800e31c:	bd80      	pop	{r7, pc}
 800e31e:	bf00      	nop

0800e320 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
 800e328:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	889b      	ldrh	r3, [r3, #4]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d130      	bne.n	800e394 <USBD_SetAddress+0x74>
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	88db      	ldrh	r3, [r3, #6]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d12c      	bne.n	800e394 <USBD_SetAddress+0x74>
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	885b      	ldrh	r3, [r3, #2]
 800e33e:	2b7f      	cmp	r3, #127	; 0x7f
 800e340:	d828      	bhi.n	800e394 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	885b      	ldrh	r3, [r3, #2]
 800e346:	b2db      	uxtb	r3, r3
 800e348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e34c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e354:	2b03      	cmp	r3, #3
 800e356:	d104      	bne.n	800e362 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800e358:	6839      	ldr	r1, [r7, #0]
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f000 f98b 	bl	800e676 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e360:	e01d      	b.n	800e39e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	7bfa      	ldrb	r2, [r7, #15]
 800e366:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e36a:	7bfb      	ldrb	r3, [r7, #15]
 800e36c:	4619      	mov	r1, r3
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 fe5a 	bl	800f028 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f000 fa46 	bl	800e806 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e37a:	7bfb      	ldrb	r3, [r7, #15]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d004      	beq.n	800e38a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2202      	movs	r2, #2
 800e384:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e388:	e009      	b.n	800e39e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2201      	movs	r2, #1
 800e38e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e392:	e004      	b.n	800e39e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e394:	6839      	ldr	r1, [r7, #0]
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f000 f96d 	bl	800e676 <USBD_CtlError>
  }
}
 800e39c:	bf00      	nop
 800e39e:	bf00      	nop
 800e3a0:	3710      	adds	r7, #16
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}
	...

0800e3a8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b082      	sub	sp, #8
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	885b      	ldrh	r3, [r3, #2]
 800e3b6:	b2da      	uxtb	r2, r3
 800e3b8:	4b41      	ldr	r3, [pc, #260]	; (800e4c0 <USBD_SetConfig+0x118>)
 800e3ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e3bc:	4b40      	ldr	r3, [pc, #256]	; (800e4c0 <USBD_SetConfig+0x118>)
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	2b01      	cmp	r3, #1
 800e3c2:	d904      	bls.n	800e3ce <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800e3c4:	6839      	ldr	r1, [r7, #0]
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f000 f955 	bl	800e676 <USBD_CtlError>
 800e3cc:	e075      	b.n	800e4ba <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3d4:	2b02      	cmp	r3, #2
 800e3d6:	d002      	beq.n	800e3de <USBD_SetConfig+0x36>
 800e3d8:	2b03      	cmp	r3, #3
 800e3da:	d023      	beq.n	800e424 <USBD_SetConfig+0x7c>
 800e3dc:	e062      	b.n	800e4a4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800e3de:	4b38      	ldr	r3, [pc, #224]	; (800e4c0 <USBD_SetConfig+0x118>)
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d01a      	beq.n	800e41c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800e3e6:	4b36      	ldr	r3, [pc, #216]	; (800e4c0 <USBD_SetConfig+0x118>)
 800e3e8:	781b      	ldrb	r3, [r3, #0]
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2203      	movs	r2, #3
 800e3f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e3f8:	4b31      	ldr	r3, [pc, #196]	; (800e4c0 <USBD_SetConfig+0x118>)
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	4619      	mov	r1, r3
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f7ff f9e7 	bl	800d7d2 <USBD_SetClassConfig>
 800e404:	4603      	mov	r3, r0
 800e406:	2b02      	cmp	r3, #2
 800e408:	d104      	bne.n	800e414 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800e40a:	6839      	ldr	r1, [r7, #0]
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f000 f932 	bl	800e676 <USBD_CtlError>
            return;
 800e412:	e052      	b.n	800e4ba <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f000 f9f6 	bl	800e806 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800e41a:	e04e      	b.n	800e4ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f000 f9f2 	bl	800e806 <USBD_CtlSendStatus>
        break;
 800e422:	e04a      	b.n	800e4ba <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800e424:	4b26      	ldr	r3, [pc, #152]	; (800e4c0 <USBD_SetConfig+0x118>)
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d112      	bne.n	800e452 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2202      	movs	r2, #2
 800e430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800e434:	4b22      	ldr	r3, [pc, #136]	; (800e4c0 <USBD_SetConfig+0x118>)
 800e436:	781b      	ldrb	r3, [r3, #0]
 800e438:	461a      	mov	r2, r3
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800e43e:	4b20      	ldr	r3, [pc, #128]	; (800e4c0 <USBD_SetConfig+0x118>)
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	4619      	mov	r1, r3
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f7ff f9e3 	bl	800d810 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f000 f9db 	bl	800e806 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800e450:	e033      	b.n	800e4ba <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800e452:	4b1b      	ldr	r3, [pc, #108]	; (800e4c0 <USBD_SetConfig+0x118>)
 800e454:	781b      	ldrb	r3, [r3, #0]
 800e456:	461a      	mov	r2, r3
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d01d      	beq.n	800e49c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	685b      	ldr	r3, [r3, #4]
 800e464:	b2db      	uxtb	r3, r3
 800e466:	4619      	mov	r1, r3
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f7ff f9d1 	bl	800d810 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800e46e:	4b14      	ldr	r3, [pc, #80]	; (800e4c0 <USBD_SetConfig+0x118>)
 800e470:	781b      	ldrb	r3, [r3, #0]
 800e472:	461a      	mov	r2, r3
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800e478:	4b11      	ldr	r3, [pc, #68]	; (800e4c0 <USBD_SetConfig+0x118>)
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	4619      	mov	r1, r3
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f7ff f9a7 	bl	800d7d2 <USBD_SetClassConfig>
 800e484:	4603      	mov	r3, r0
 800e486:	2b02      	cmp	r3, #2
 800e488:	d104      	bne.n	800e494 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800e48a:	6839      	ldr	r1, [r7, #0]
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 f8f2 	bl	800e676 <USBD_CtlError>
            return;
 800e492:	e012      	b.n	800e4ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f000 f9b6 	bl	800e806 <USBD_CtlSendStatus>
        break;
 800e49a:	e00e      	b.n	800e4ba <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f000 f9b2 	bl	800e806 <USBD_CtlSendStatus>
        break;
 800e4a2:	e00a      	b.n	800e4ba <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800e4a4:	6839      	ldr	r1, [r7, #0]
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f000 f8e5 	bl	800e676 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800e4ac:	4b04      	ldr	r3, [pc, #16]	; (800e4c0 <USBD_SetConfig+0x118>)
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	4619      	mov	r1, r3
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f7ff f9ac 	bl	800d810 <USBD_ClrClassConfig>
        break;
 800e4b8:	bf00      	nop
    }
  }
}
 800e4ba:	3708      	adds	r7, #8
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}
 800e4c0:	200019c4 	.word	0x200019c4

0800e4c4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	88db      	ldrh	r3, [r3, #6]
 800e4d2:	2b01      	cmp	r3, #1
 800e4d4:	d004      	beq.n	800e4e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e4d6:	6839      	ldr	r1, [r7, #0]
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f000 f8cc 	bl	800e676 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e4de:	e022      	b.n	800e526 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4e6:	2b02      	cmp	r3, #2
 800e4e8:	dc02      	bgt.n	800e4f0 <USBD_GetConfig+0x2c>
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	dc03      	bgt.n	800e4f6 <USBD_GetConfig+0x32>
 800e4ee:	e015      	b.n	800e51c <USBD_GetConfig+0x58>
 800e4f0:	2b03      	cmp	r3, #3
 800e4f2:	d00b      	beq.n	800e50c <USBD_GetConfig+0x48>
 800e4f4:	e012      	b.n	800e51c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	3308      	adds	r3, #8
 800e500:	2201      	movs	r2, #1
 800e502:	4619      	mov	r1, r3
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f000 f920 	bl	800e74a <USBD_CtlSendData>
        break;
 800e50a:	e00c      	b.n	800e526 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	3304      	adds	r3, #4
 800e510:	2201      	movs	r2, #1
 800e512:	4619      	mov	r1, r3
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f000 f918 	bl	800e74a <USBD_CtlSendData>
        break;
 800e51a:	e004      	b.n	800e526 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800e51c:	6839      	ldr	r1, [r7, #0]
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f000 f8a9 	bl	800e676 <USBD_CtlError>
        break;
 800e524:	bf00      	nop
}
 800e526:	bf00      	nop
 800e528:	3708      	adds	r7, #8
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}

0800e52e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e52e:	b580      	push	{r7, lr}
 800e530:	b082      	sub	sp, #8
 800e532:	af00      	add	r7, sp, #0
 800e534:	6078      	str	r0, [r7, #4]
 800e536:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e53e:	3b01      	subs	r3, #1
 800e540:	2b02      	cmp	r3, #2
 800e542:	d81e      	bhi.n	800e582 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	88db      	ldrh	r3, [r3, #6]
 800e548:	2b02      	cmp	r3, #2
 800e54a:	d004      	beq.n	800e556 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800e54c:	6839      	ldr	r1, [r7, #0]
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f000 f891 	bl	800e676 <USBD_CtlError>
        break;
 800e554:	e01a      	b.n	800e58c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2201      	movs	r2, #1
 800e55a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e562:	2b00      	cmp	r3, #0
 800e564:	d005      	beq.n	800e572 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	68db      	ldr	r3, [r3, #12]
 800e56a:	f043 0202 	orr.w	r2, r3, #2
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	330c      	adds	r3, #12
 800e576:	2202      	movs	r2, #2
 800e578:	4619      	mov	r1, r3
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f000 f8e5 	bl	800e74a <USBD_CtlSendData>
      break;
 800e580:	e004      	b.n	800e58c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800e582:	6839      	ldr	r1, [r7, #0]
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f000 f876 	bl	800e676 <USBD_CtlError>
      break;
 800e58a:	bf00      	nop
  }
}
 800e58c:	bf00      	nop
 800e58e:	3708      	adds	r7, #8
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}

0800e594 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b082      	sub	sp, #8
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	885b      	ldrh	r3, [r3, #2]
 800e5a2:	2b01      	cmp	r3, #1
 800e5a4:	d106      	bne.n	800e5b4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2201      	movs	r2, #1
 800e5aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f000 f929 	bl	800e806 <USBD_CtlSendStatus>
  }
}
 800e5b4:	bf00      	nop
 800e5b6:	3708      	adds	r7, #8
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5cc:	3b01      	subs	r3, #1
 800e5ce:	2b02      	cmp	r3, #2
 800e5d0:	d80b      	bhi.n	800e5ea <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	885b      	ldrh	r3, [r3, #2]
 800e5d6:	2b01      	cmp	r3, #1
 800e5d8:	d10c      	bne.n	800e5f4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f000 f90f 	bl	800e806 <USBD_CtlSendStatus>
      }
      break;
 800e5e8:	e004      	b.n	800e5f4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800e5ea:	6839      	ldr	r1, [r7, #0]
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f000 f842 	bl	800e676 <USBD_CtlError>
      break;
 800e5f2:	e000      	b.n	800e5f6 <USBD_ClrFeature+0x3a>
      break;
 800e5f4:	bf00      	nop
  }
}
 800e5f6:	bf00      	nop
 800e5f8:	3708      	adds	r7, #8
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}

0800e5fe <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e5fe:	b480      	push	{r7}
 800e600:	b083      	sub	sp, #12
 800e602:	af00      	add	r7, sp, #0
 800e604:	6078      	str	r0, [r7, #4]
 800e606:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	781a      	ldrb	r2, [r3, #0]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	785a      	ldrb	r2, [r3, #1]
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	3302      	adds	r3, #2
 800e61c:	781b      	ldrb	r3, [r3, #0]
 800e61e:	b29a      	uxth	r2, r3
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	3303      	adds	r3, #3
 800e624:	781b      	ldrb	r3, [r3, #0]
 800e626:	b29b      	uxth	r3, r3
 800e628:	021b      	lsls	r3, r3, #8
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	4413      	add	r3, r2
 800e62e:	b29a      	uxth	r2, r3
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	3304      	adds	r3, #4
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	b29a      	uxth	r2, r3
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	3305      	adds	r3, #5
 800e640:	781b      	ldrb	r3, [r3, #0]
 800e642:	b29b      	uxth	r3, r3
 800e644:	021b      	lsls	r3, r3, #8
 800e646:	b29b      	uxth	r3, r3
 800e648:	4413      	add	r3, r2
 800e64a:	b29a      	uxth	r2, r3
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	3306      	adds	r3, #6
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	b29a      	uxth	r2, r3
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	3307      	adds	r3, #7
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	b29b      	uxth	r3, r3
 800e660:	021b      	lsls	r3, r3, #8
 800e662:	b29b      	uxth	r3, r3
 800e664:	4413      	add	r3, r2
 800e666:	b29a      	uxth	r2, r3
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	80da      	strh	r2, [r3, #6]

}
 800e66c:	bf00      	nop
 800e66e:	370c      	adds	r7, #12
 800e670:	46bd      	mov	sp, r7
 800e672:	bc80      	pop	{r7}
 800e674:	4770      	bx	lr

0800e676 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800e676:	b580      	push	{r7, lr}
 800e678:	b082      	sub	sp, #8
 800e67a:	af00      	add	r7, sp, #0
 800e67c:	6078      	str	r0, [r7, #4]
 800e67e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800e680:	2180      	movs	r1, #128	; 0x80
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f000 fc66 	bl	800ef54 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800e688:	2100      	movs	r1, #0
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f000 fc62 	bl	800ef54 <USBD_LL_StallEP>
}
 800e690:	bf00      	nop
 800e692:	3708      	adds	r7, #8
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b086      	sub	sp, #24
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d032      	beq.n	800e714 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800e6ae:	68f8      	ldr	r0, [r7, #12]
 800e6b0:	f000 f834 	bl	800e71c <USBD_GetLen>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	b29b      	uxth	r3, r3
 800e6ba:	005b      	lsls	r3, r3, #1
 800e6bc:	b29a      	uxth	r2, r3
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e6c2:	7dfb      	ldrb	r3, [r7, #23]
 800e6c4:	1c5a      	adds	r2, r3, #1
 800e6c6:	75fa      	strb	r2, [r7, #23]
 800e6c8:	461a      	mov	r2, r3
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	4413      	add	r3, r2
 800e6ce:	687a      	ldr	r2, [r7, #4]
 800e6d0:	7812      	ldrb	r2, [r2, #0]
 800e6d2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e6d4:	7dfb      	ldrb	r3, [r7, #23]
 800e6d6:	1c5a      	adds	r2, r3, #1
 800e6d8:	75fa      	strb	r2, [r7, #23]
 800e6da:	461a      	mov	r2, r3
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	4413      	add	r3, r2
 800e6e0:	2203      	movs	r2, #3
 800e6e2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e6e4:	e012      	b.n	800e70c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	1c5a      	adds	r2, r3, #1
 800e6ea:	60fa      	str	r2, [r7, #12]
 800e6ec:	7dfa      	ldrb	r2, [r7, #23]
 800e6ee:	1c51      	adds	r1, r2, #1
 800e6f0:	75f9      	strb	r1, [r7, #23]
 800e6f2:	4611      	mov	r1, r2
 800e6f4:	68ba      	ldr	r2, [r7, #8]
 800e6f6:	440a      	add	r2, r1
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e6fc:	7dfb      	ldrb	r3, [r7, #23]
 800e6fe:	1c5a      	adds	r2, r3, #1
 800e700:	75fa      	strb	r2, [r7, #23]
 800e702:	461a      	mov	r2, r3
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	4413      	add	r3, r2
 800e708:	2200      	movs	r2, #0
 800e70a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d1e8      	bne.n	800e6e6 <USBD_GetString+0x4e>
    }
  }
}
 800e714:	bf00      	nop
 800e716:	3718      	adds	r7, #24
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}

0800e71c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e71c:	b480      	push	{r7}
 800e71e:	b085      	sub	sp, #20
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e724:	2300      	movs	r3, #0
 800e726:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800e728:	e005      	b.n	800e736 <USBD_GetLen+0x1a>
  {
    len++;
 800e72a:	7bfb      	ldrb	r3, [r7, #15]
 800e72c:	3301      	adds	r3, #1
 800e72e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	3301      	adds	r3, #1
 800e734:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	781b      	ldrb	r3, [r3, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d1f5      	bne.n	800e72a <USBD_GetLen+0xe>
  }

  return len;
 800e73e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e740:	4618      	mov	r0, r3
 800e742:	3714      	adds	r7, #20
 800e744:	46bd      	mov	sp, r7
 800e746:	bc80      	pop	{r7}
 800e748:	4770      	bx	lr

0800e74a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800e74a:	b580      	push	{r7, lr}
 800e74c:	b084      	sub	sp, #16
 800e74e:	af00      	add	r7, sp, #0
 800e750:	60f8      	str	r0, [r7, #12]
 800e752:	60b9      	str	r1, [r7, #8]
 800e754:	4613      	mov	r3, r2
 800e756:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2202      	movs	r2, #2
 800e75c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e760:	88fa      	ldrh	r2, [r7, #6]
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e766:	88fa      	ldrh	r2, [r7, #6]
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e76c:	88fb      	ldrh	r3, [r7, #6]
 800e76e:	68ba      	ldr	r2, [r7, #8]
 800e770:	2100      	movs	r1, #0
 800e772:	68f8      	ldr	r0, [r7, #12]
 800e774:	f000 fc77 	bl	800f066 <USBD_LL_Transmit>

  return USBD_OK;
 800e778:	2300      	movs	r3, #0
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	3710      	adds	r7, #16
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}

0800e782 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800e782:	b580      	push	{r7, lr}
 800e784:	b084      	sub	sp, #16
 800e786:	af00      	add	r7, sp, #0
 800e788:	60f8      	str	r0, [r7, #12]
 800e78a:	60b9      	str	r1, [r7, #8]
 800e78c:	4613      	mov	r3, r2
 800e78e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e790:	88fb      	ldrh	r3, [r7, #6]
 800e792:	68ba      	ldr	r2, [r7, #8]
 800e794:	2100      	movs	r1, #0
 800e796:	68f8      	ldr	r0, [r7, #12]
 800e798:	f000 fc65 	bl	800f066 <USBD_LL_Transmit>

  return USBD_OK;
 800e79c:	2300      	movs	r3, #0
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3710      	adds	r7, #16
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}

0800e7a6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800e7a6:	b580      	push	{r7, lr}
 800e7a8:	b084      	sub	sp, #16
 800e7aa:	af00      	add	r7, sp, #0
 800e7ac:	60f8      	str	r0, [r7, #12]
 800e7ae:	60b9      	str	r1, [r7, #8]
 800e7b0:	4613      	mov	r3, r2
 800e7b2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	2203      	movs	r2, #3
 800e7b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e7bc:	88fa      	ldrh	r2, [r7, #6]
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800e7c4:	88fa      	ldrh	r2, [r7, #6]
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e7cc:	88fb      	ldrh	r3, [r7, #6]
 800e7ce:	68ba      	ldr	r2, [r7, #8]
 800e7d0:	2100      	movs	r1, #0
 800e7d2:	68f8      	ldr	r0, [r7, #12]
 800e7d4:	f000 fc6a 	bl	800f0ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e7d8:	2300      	movs	r3, #0
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3710      	adds	r7, #16
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}

0800e7e2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800e7e2:	b580      	push	{r7, lr}
 800e7e4:	b084      	sub	sp, #16
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	60f8      	str	r0, [r7, #12]
 800e7ea:	60b9      	str	r1, [r7, #8]
 800e7ec:	4613      	mov	r3, r2
 800e7ee:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e7f0:	88fb      	ldrh	r3, [r7, #6]
 800e7f2:	68ba      	ldr	r2, [r7, #8]
 800e7f4:	2100      	movs	r1, #0
 800e7f6:	68f8      	ldr	r0, [r7, #12]
 800e7f8:	f000 fc58 	bl	800f0ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e7fc:	2300      	movs	r3, #0
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3710      	adds	r7, #16
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}

0800e806 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e806:	b580      	push	{r7, lr}
 800e808:	b082      	sub	sp, #8
 800e80a:	af00      	add	r7, sp, #0
 800e80c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2204      	movs	r2, #4
 800e812:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e816:	2300      	movs	r3, #0
 800e818:	2200      	movs	r2, #0
 800e81a:	2100      	movs	r1, #0
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f000 fc22 	bl	800f066 <USBD_LL_Transmit>

  return USBD_OK;
 800e822:	2300      	movs	r3, #0
}
 800e824:	4618      	mov	r0, r3
 800e826:	3708      	adds	r7, #8
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}

0800e82c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b082      	sub	sp, #8
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2205      	movs	r2, #5
 800e838:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e83c:	2300      	movs	r3, #0
 800e83e:	2200      	movs	r2, #0
 800e840:	2100      	movs	r1, #0
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f000 fc32 	bl	800f0ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e848:	2300      	movs	r3, #0
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3708      	adds	r7, #8
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}
	...

0800e854 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e858:	2200      	movs	r2, #0
 800e85a:	4912      	ldr	r1, [pc, #72]	; (800e8a4 <MX_USB_DEVICE_Init+0x50>)
 800e85c:	4812      	ldr	r0, [pc, #72]	; (800e8a8 <MX_USB_DEVICE_Init+0x54>)
 800e85e:	f7fe ff5e 	bl	800d71e <USBD_Init>
 800e862:	4603      	mov	r3, r0
 800e864:	2b00      	cmp	r3, #0
 800e866:	d001      	beq.n	800e86c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e868:	f7f3 fba8 	bl	8001fbc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e86c:	490f      	ldr	r1, [pc, #60]	; (800e8ac <MX_USB_DEVICE_Init+0x58>)
 800e86e:	480e      	ldr	r0, [pc, #56]	; (800e8a8 <MX_USB_DEVICE_Init+0x54>)
 800e870:	f7fe ff80 	bl	800d774 <USBD_RegisterClass>
 800e874:	4603      	mov	r3, r0
 800e876:	2b00      	cmp	r3, #0
 800e878:	d001      	beq.n	800e87e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e87a:	f7f3 fb9f 	bl	8001fbc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e87e:	490c      	ldr	r1, [pc, #48]	; (800e8b0 <MX_USB_DEVICE_Init+0x5c>)
 800e880:	4809      	ldr	r0, [pc, #36]	; (800e8a8 <MX_USB_DEVICE_Init+0x54>)
 800e882:	f7fe feb1 	bl	800d5e8 <USBD_CDC_RegisterInterface>
 800e886:	4603      	mov	r3, r0
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d001      	beq.n	800e890 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e88c:	f7f3 fb96 	bl	8001fbc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e890:	4805      	ldr	r0, [pc, #20]	; (800e8a8 <MX_USB_DEVICE_Init+0x54>)
 800e892:	f7fe ff88 	bl	800d7a6 <USBD_Start>
 800e896:	4603      	mov	r3, r0
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d001      	beq.n	800e8a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e89c:	f7f3 fb8e 	bl	8001fbc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e8a0:	bf00      	nop
 800e8a2:	bd80      	pop	{r7, pc}
 800e8a4:	20000380 	.word	0x20000380
 800e8a8:	200019c8 	.word	0x200019c8
 800e8ac:	20000264 	.word	0x20000264
 800e8b0:	20000368 	.word	0x20000368

0800e8b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	4905      	ldr	r1, [pc, #20]	; (800e8d0 <CDC_Init_FS+0x1c>)
 800e8bc:	4805      	ldr	r0, [pc, #20]	; (800e8d4 <CDC_Init_FS+0x20>)
 800e8be:	f7fe fea9 	bl	800d614 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e8c2:	4905      	ldr	r1, [pc, #20]	; (800e8d8 <CDC_Init_FS+0x24>)
 800e8c4:	4803      	ldr	r0, [pc, #12]	; (800e8d4 <CDC_Init_FS+0x20>)
 800e8c6:	f7fe febe 	bl	800d646 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e8ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	bd80      	pop	{r7, pc}
 800e8d0:	2000208c 	.word	0x2000208c
 800e8d4:	200019c8 	.word	0x200019c8
 800e8d8:	20001c8c 	.word	0x20001c8c

0800e8dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e8dc:	b480      	push	{r7}
 800e8de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e8e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bc80      	pop	{r7}
 800e8e8:	4770      	bx	lr
	...

0800e8ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b083      	sub	sp, #12
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	6039      	str	r1, [r7, #0]
 800e8f6:	71fb      	strb	r3, [r7, #7]
 800e8f8:	4613      	mov	r3, r2
 800e8fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e8fc:	79fb      	ldrb	r3, [r7, #7]
 800e8fe:	2b23      	cmp	r3, #35	; 0x23
 800e900:	d85c      	bhi.n	800e9bc <CDC_Control_FS+0xd0>
 800e902:	a201      	add	r2, pc, #4	; (adr r2, 800e908 <CDC_Control_FS+0x1c>)
 800e904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e908:	0800e9bd 	.word	0x0800e9bd
 800e90c:	0800e9bd 	.word	0x0800e9bd
 800e910:	0800e9bd 	.word	0x0800e9bd
 800e914:	0800e9bd 	.word	0x0800e9bd
 800e918:	0800e9bd 	.word	0x0800e9bd
 800e91c:	0800e9bd 	.word	0x0800e9bd
 800e920:	0800e9bd 	.word	0x0800e9bd
 800e924:	0800e9bd 	.word	0x0800e9bd
 800e928:	0800e9bd 	.word	0x0800e9bd
 800e92c:	0800e9bd 	.word	0x0800e9bd
 800e930:	0800e9bd 	.word	0x0800e9bd
 800e934:	0800e9bd 	.word	0x0800e9bd
 800e938:	0800e9bd 	.word	0x0800e9bd
 800e93c:	0800e9bd 	.word	0x0800e9bd
 800e940:	0800e9bd 	.word	0x0800e9bd
 800e944:	0800e9bd 	.word	0x0800e9bd
 800e948:	0800e9bd 	.word	0x0800e9bd
 800e94c:	0800e9bd 	.word	0x0800e9bd
 800e950:	0800e9bd 	.word	0x0800e9bd
 800e954:	0800e9bd 	.word	0x0800e9bd
 800e958:	0800e9bd 	.word	0x0800e9bd
 800e95c:	0800e9bd 	.word	0x0800e9bd
 800e960:	0800e9bd 	.word	0x0800e9bd
 800e964:	0800e9bd 	.word	0x0800e9bd
 800e968:	0800e9bd 	.word	0x0800e9bd
 800e96c:	0800e9bd 	.word	0x0800e9bd
 800e970:	0800e9bd 	.word	0x0800e9bd
 800e974:	0800e9bd 	.word	0x0800e9bd
 800e978:	0800e9bd 	.word	0x0800e9bd
 800e97c:	0800e9bd 	.word	0x0800e9bd
 800e980:	0800e9bd 	.word	0x0800e9bd
 800e984:	0800e9bd 	.word	0x0800e9bd
 800e988:	0800e999 	.word	0x0800e999
 800e98c:	0800e9ab 	.word	0x0800e9ab
 800e990:	0800e9bd 	.word	0x0800e9bd
 800e994:	0800e9bd 	.word	0x0800e9bd
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit
                    = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };
    case CDC_SET_LINE_CODING:
        	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800e998:	4b0c      	ldr	r3, [pc, #48]	; (800e9cc <CDC_Control_FS+0xe0>)
 800e99a:	683a      	ldr	r2, [r7, #0]
 800e99c:	6810      	ldr	r0, [r2, #0]
 800e99e:	6018      	str	r0, [r3, #0]
 800e9a0:	8891      	ldrh	r1, [r2, #4]
 800e9a2:	7992      	ldrb	r2, [r2, #6]
 800e9a4:	8099      	strh	r1, [r3, #4]
 800e9a6:	719a      	strb	r2, [r3, #6]
    break;
 800e9a8:	e009      	b.n	800e9be <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
        	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800e9aa:	683b      	ldr	r3, [r7, #0]
 800e9ac:	4a07      	ldr	r2, [pc, #28]	; (800e9cc <CDC_Control_FS+0xe0>)
 800e9ae:	6810      	ldr	r0, [r2, #0]
 800e9b0:	6018      	str	r0, [r3, #0]
 800e9b2:	8891      	ldrh	r1, [r2, #4]
 800e9b4:	7992      	ldrb	r2, [r2, #6]
 800e9b6:	8099      	strh	r1, [r3, #4]
 800e9b8:	719a      	strb	r2, [r3, #6]
    break;
 800e9ba:	e000      	b.n	800e9be <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e9bc:	bf00      	nop
  }

  return (USBD_OK);
 800e9be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	370c      	adds	r7, #12
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bc80      	pop	{r7}
 800e9c8:	4770      	bx	lr
 800e9ca:	bf00      	nop
 800e9cc:	20000378 	.word	0x20000378

0800e9d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b082      	sub	sp, #8
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
 800e9d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e9da:	6879      	ldr	r1, [r7, #4]
 800e9dc:	4808      	ldr	r0, [pc, #32]	; (800ea00 <CDC_Receive_FS+0x30>)
 800e9de:	f7fe fe32 	bl	800d646 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e9e2:	4807      	ldr	r0, [pc, #28]	; (800ea00 <CDC_Receive_FS+0x30>)
 800e9e4:	f7fe fe71 	bl	800d6ca <USBD_CDC_ReceivePacket>
  CDC_ReveiveCallback(Buf, Len[0]); // My callback function
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	b2db      	uxtb	r3, r3
 800e9ee:	4619      	mov	r1, r3
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f7f3 fa39 	bl	8001e68 <CDC_ReveiveCallback>

  return (USBD_OK);
 800e9f6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3708      	adds	r7, #8
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}
 800ea00:	200019c8 	.word	0x200019c8

0800ea04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b084      	sub	sp, #16
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
 800ea0c:	460b      	mov	r3, r1
 800ea0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ea10:	2300      	movs	r3, #0
 800ea12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ea14:	4b0d      	ldr	r3, [pc, #52]	; (800ea4c <CDC_Transmit_FS+0x48>)
 800ea16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d001      	beq.n	800ea2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ea26:	2301      	movs	r3, #1
 800ea28:	e00b      	b.n	800ea42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ea2a:	887b      	ldrh	r3, [r7, #2]
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	6879      	ldr	r1, [r7, #4]
 800ea30:	4806      	ldr	r0, [pc, #24]	; (800ea4c <CDC_Transmit_FS+0x48>)
 800ea32:	f7fe fdef 	bl	800d614 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ea36:	4805      	ldr	r0, [pc, #20]	; (800ea4c <CDC_Transmit_FS+0x48>)
 800ea38:	f7fe fe18 	bl	800d66c <USBD_CDC_TransmitPacket>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ea40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3710      	adds	r7, #16
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}
 800ea4a:	bf00      	nop
 800ea4c:	200019c8 	.word	0x200019c8

0800ea50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea50:	b480      	push	{r7}
 800ea52:	b083      	sub	sp, #12
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	4603      	mov	r3, r0
 800ea58:	6039      	str	r1, [r7, #0]
 800ea5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	2212      	movs	r2, #18
 800ea60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ea62:	4b03      	ldr	r3, [pc, #12]	; (800ea70 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	370c      	adds	r7, #12
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bc80      	pop	{r7}
 800ea6c:	4770      	bx	lr
 800ea6e:	bf00      	nop
 800ea70:	2000039c 	.word	0x2000039c

0800ea74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea74:	b480      	push	{r7}
 800ea76:	b083      	sub	sp, #12
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	6039      	str	r1, [r7, #0]
 800ea7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	2204      	movs	r2, #4
 800ea84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ea86:	4b03      	ldr	r3, [pc, #12]	; (800ea94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	370c      	adds	r7, #12
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bc80      	pop	{r7}
 800ea90:	4770      	bx	lr
 800ea92:	bf00      	nop
 800ea94:	200003b0 	.word	0x200003b0

0800ea98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	6039      	str	r1, [r7, #0]
 800eaa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eaa4:	79fb      	ldrb	r3, [r7, #7]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d105      	bne.n	800eab6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eaaa:	683a      	ldr	r2, [r7, #0]
 800eaac:	4907      	ldr	r1, [pc, #28]	; (800eacc <USBD_FS_ProductStrDescriptor+0x34>)
 800eaae:	4808      	ldr	r0, [pc, #32]	; (800ead0 <USBD_FS_ProductStrDescriptor+0x38>)
 800eab0:	f7ff fdf2 	bl	800e698 <USBD_GetString>
 800eab4:	e004      	b.n	800eac0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eab6:	683a      	ldr	r2, [r7, #0]
 800eab8:	4904      	ldr	r1, [pc, #16]	; (800eacc <USBD_FS_ProductStrDescriptor+0x34>)
 800eaba:	4805      	ldr	r0, [pc, #20]	; (800ead0 <USBD_FS_ProductStrDescriptor+0x38>)
 800eabc:	f7ff fdec 	bl	800e698 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eac0:	4b02      	ldr	r3, [pc, #8]	; (800eacc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3708      	adds	r7, #8
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	2000248c 	.word	0x2000248c
 800ead0:	080104bc 	.word	0x080104bc

0800ead4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b082      	sub	sp, #8
 800ead8:	af00      	add	r7, sp, #0
 800eada:	4603      	mov	r3, r0
 800eadc:	6039      	str	r1, [r7, #0]
 800eade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eae0:	683a      	ldr	r2, [r7, #0]
 800eae2:	4904      	ldr	r1, [pc, #16]	; (800eaf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eae4:	4804      	ldr	r0, [pc, #16]	; (800eaf8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eae6:	f7ff fdd7 	bl	800e698 <USBD_GetString>
  return USBD_StrDesc;
 800eaea:	4b02      	ldr	r3, [pc, #8]	; (800eaf4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	3708      	adds	r7, #8
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}
 800eaf4:	2000248c 	.word	0x2000248c
 800eaf8:	080104d4 	.word	0x080104d4

0800eafc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b082      	sub	sp, #8
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	4603      	mov	r3, r0
 800eb04:	6039      	str	r1, [r7, #0]
 800eb06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	221a      	movs	r2, #26
 800eb0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800eb0e:	f000 f843 	bl	800eb98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800eb12:	4b02      	ldr	r3, [pc, #8]	; (800eb1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3708      	adds	r7, #8
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	200003b4 	.word	0x200003b4

0800eb20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b082      	sub	sp, #8
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	4603      	mov	r3, r0
 800eb28:	6039      	str	r1, [r7, #0]
 800eb2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800eb2c:	79fb      	ldrb	r3, [r7, #7]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d105      	bne.n	800eb3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eb32:	683a      	ldr	r2, [r7, #0]
 800eb34:	4907      	ldr	r1, [pc, #28]	; (800eb54 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eb36:	4808      	ldr	r0, [pc, #32]	; (800eb58 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eb38:	f7ff fdae 	bl	800e698 <USBD_GetString>
 800eb3c:	e004      	b.n	800eb48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eb3e:	683a      	ldr	r2, [r7, #0]
 800eb40:	4904      	ldr	r1, [pc, #16]	; (800eb54 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eb42:	4805      	ldr	r0, [pc, #20]	; (800eb58 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eb44:	f7ff fda8 	bl	800e698 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb48:	4b02      	ldr	r3, [pc, #8]	; (800eb54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3708      	adds	r7, #8
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop
 800eb54:	2000248c 	.word	0x2000248c
 800eb58:	080104e0 	.word	0x080104e0

0800eb5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b082      	sub	sp, #8
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	4603      	mov	r3, r0
 800eb64:	6039      	str	r1, [r7, #0]
 800eb66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eb68:	79fb      	ldrb	r3, [r7, #7]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d105      	bne.n	800eb7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eb6e:	683a      	ldr	r2, [r7, #0]
 800eb70:	4907      	ldr	r1, [pc, #28]	; (800eb90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eb72:	4808      	ldr	r0, [pc, #32]	; (800eb94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eb74:	f7ff fd90 	bl	800e698 <USBD_GetString>
 800eb78:	e004      	b.n	800eb84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eb7a:	683a      	ldr	r2, [r7, #0]
 800eb7c:	4904      	ldr	r1, [pc, #16]	; (800eb90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eb7e:	4805      	ldr	r0, [pc, #20]	; (800eb94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eb80:	f7ff fd8a 	bl	800e698 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb84:	4b02      	ldr	r3, [pc, #8]	; (800eb90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3708      	adds	r7, #8
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	bf00      	nop
 800eb90:	2000248c 	.word	0x2000248c
 800eb94:	080104ec 	.word	0x080104ec

0800eb98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b084      	sub	sp, #16
 800eb9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800eb9e:	4b0f      	ldr	r3, [pc, #60]	; (800ebdc <Get_SerialNum+0x44>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800eba4:	4b0e      	ldr	r3, [pc, #56]	; (800ebe0 <Get_SerialNum+0x48>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ebaa:	4b0e      	ldr	r3, [pc, #56]	; (800ebe4 <Get_SerialNum+0x4c>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ebb0:	68fa      	ldr	r2, [r7, #12]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	4413      	add	r3, r2
 800ebb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d009      	beq.n	800ebd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ebbe:	2208      	movs	r2, #8
 800ebc0:	4909      	ldr	r1, [pc, #36]	; (800ebe8 <Get_SerialNum+0x50>)
 800ebc2:	68f8      	ldr	r0, [r7, #12]
 800ebc4:	f000 f814 	bl	800ebf0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ebc8:	2204      	movs	r2, #4
 800ebca:	4908      	ldr	r1, [pc, #32]	; (800ebec <Get_SerialNum+0x54>)
 800ebcc:	68b8      	ldr	r0, [r7, #8]
 800ebce:	f000 f80f 	bl	800ebf0 <IntToUnicode>
  }
}
 800ebd2:	bf00      	nop
 800ebd4:	3710      	adds	r7, #16
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	1ffff7e8 	.word	0x1ffff7e8
 800ebe0:	1ffff7ec 	.word	0x1ffff7ec
 800ebe4:	1ffff7f0 	.word	0x1ffff7f0
 800ebe8:	200003b6 	.word	0x200003b6
 800ebec:	200003c6 	.word	0x200003c6

0800ebf0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b087      	sub	sp, #28
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	60f8      	str	r0, [r7, #12]
 800ebf8:	60b9      	str	r1, [r7, #8]
 800ebfa:	4613      	mov	r3, r2
 800ebfc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ec02:	2300      	movs	r3, #0
 800ec04:	75fb      	strb	r3, [r7, #23]
 800ec06:	e027      	b.n	800ec58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	0f1b      	lsrs	r3, r3, #28
 800ec0c:	2b09      	cmp	r3, #9
 800ec0e:	d80b      	bhi.n	800ec28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	0f1b      	lsrs	r3, r3, #28
 800ec14:	b2da      	uxtb	r2, r3
 800ec16:	7dfb      	ldrb	r3, [r7, #23]
 800ec18:	005b      	lsls	r3, r3, #1
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	440b      	add	r3, r1
 800ec20:	3230      	adds	r2, #48	; 0x30
 800ec22:	b2d2      	uxtb	r2, r2
 800ec24:	701a      	strb	r2, [r3, #0]
 800ec26:	e00a      	b.n	800ec3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	0f1b      	lsrs	r3, r3, #28
 800ec2c:	b2da      	uxtb	r2, r3
 800ec2e:	7dfb      	ldrb	r3, [r7, #23]
 800ec30:	005b      	lsls	r3, r3, #1
 800ec32:	4619      	mov	r1, r3
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	440b      	add	r3, r1
 800ec38:	3237      	adds	r2, #55	; 0x37
 800ec3a:	b2d2      	uxtb	r2, r2
 800ec3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	011b      	lsls	r3, r3, #4
 800ec42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ec44:	7dfb      	ldrb	r3, [r7, #23]
 800ec46:	005b      	lsls	r3, r3, #1
 800ec48:	3301      	adds	r3, #1
 800ec4a:	68ba      	ldr	r2, [r7, #8]
 800ec4c:	4413      	add	r3, r2
 800ec4e:	2200      	movs	r2, #0
 800ec50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ec52:	7dfb      	ldrb	r3, [r7, #23]
 800ec54:	3301      	adds	r3, #1
 800ec56:	75fb      	strb	r3, [r7, #23]
 800ec58:	7dfa      	ldrb	r2, [r7, #23]
 800ec5a:	79fb      	ldrb	r3, [r7, #7]
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d3d3      	bcc.n	800ec08 <IntToUnicode+0x18>
  }
}
 800ec60:	bf00      	nop
 800ec62:	bf00      	nop
 800ec64:	371c      	adds	r7, #28
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bc80      	pop	{r7}
 800ec6a:	4770      	bx	lr

0800ec6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b085      	sub	sp, #20
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	4a09      	ldr	r2, [pc, #36]	; (800eca0 <HAL_PCD_MspInit+0x34>)
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	d10b      	bne.n	800ec96 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ec7e:	4b09      	ldr	r3, [pc, #36]	; (800eca4 <HAL_PCD_MspInit+0x38>)
 800ec80:	69db      	ldr	r3, [r3, #28]
 800ec82:	4a08      	ldr	r2, [pc, #32]	; (800eca4 <HAL_PCD_MspInit+0x38>)
 800ec84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ec88:	61d3      	str	r3, [r2, #28]
 800ec8a:	4b06      	ldr	r3, [pc, #24]	; (800eca4 <HAL_PCD_MspInit+0x38>)
 800ec8c:	69db      	ldr	r3, [r3, #28]
 800ec8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec92:	60fb      	str	r3, [r7, #12]
 800ec94:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ec96:	bf00      	nop
 800ec98:	3714      	adds	r7, #20
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bc80      	pop	{r7}
 800ec9e:	4770      	bx	lr
 800eca0:	40005c00 	.word	0x40005c00
 800eca4:	40021000 	.word	0x40021000

0800eca8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	4610      	mov	r0, r2
 800ecc0:	f7fe fdb9 	bl	800d836 <USBD_LL_SetupStage>
}
 800ecc4:	bf00      	nop
 800ecc6:	3708      	adds	r7, #8
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}

0800eccc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b082      	sub	sp, #8
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	460b      	mov	r3, r1
 800ecd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800ecde:	78fa      	ldrb	r2, [r7, #3]
 800ece0:	6879      	ldr	r1, [r7, #4]
 800ece2:	4613      	mov	r3, r2
 800ece4:	009b      	lsls	r3, r3, #2
 800ece6:	4413      	add	r3, r2
 800ece8:	00db      	lsls	r3, r3, #3
 800ecea:	440b      	add	r3, r1
 800ecec:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ecf0:	681a      	ldr	r2, [r3, #0]
 800ecf2:	78fb      	ldrb	r3, [r7, #3]
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	f7fe fdeb 	bl	800d8d0 <USBD_LL_DataOutStage>
}
 800ecfa:	bf00      	nop
 800ecfc:	3708      	adds	r7, #8
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}

0800ed02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed02:	b580      	push	{r7, lr}
 800ed04:	b082      	sub	sp, #8
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	6078      	str	r0, [r7, #4]
 800ed0a:	460b      	mov	r3, r1
 800ed0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800ed14:	78fa      	ldrb	r2, [r7, #3]
 800ed16:	6879      	ldr	r1, [r7, #4]
 800ed18:	4613      	mov	r3, r2
 800ed1a:	009b      	lsls	r3, r3, #2
 800ed1c:	4413      	add	r3, r2
 800ed1e:	00db      	lsls	r3, r3, #3
 800ed20:	440b      	add	r3, r1
 800ed22:	333c      	adds	r3, #60	; 0x3c
 800ed24:	681a      	ldr	r2, [r3, #0]
 800ed26:	78fb      	ldrb	r3, [r7, #3]
 800ed28:	4619      	mov	r1, r3
 800ed2a:	f7fe fe42 	bl	800d9b2 <USBD_LL_DataInStage>
}
 800ed2e:	bf00      	nop
 800ed30:	3708      	adds	r7, #8
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}

0800ed36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed36:	b580      	push	{r7, lr}
 800ed38:	b082      	sub	sp, #8
 800ed3a:	af00      	add	r7, sp, #0
 800ed3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ed44:	4618      	mov	r0, r3
 800ed46:	f7fe ff52 	bl	800dbee <USBD_LL_SOF>
}
 800ed4a:	bf00      	nop
 800ed4c:	3708      	adds	r7, #8
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}

0800ed52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed52:	b580      	push	{r7, lr}
 800ed54:	b084      	sub	sp, #16
 800ed56:	af00      	add	r7, sp, #0
 800ed58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	689b      	ldr	r3, [r3, #8]
 800ed62:	2b02      	cmp	r3, #2
 800ed64:	d001      	beq.n	800ed6a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ed66:	f7f3 f929 	bl	8001fbc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ed70:	7bfa      	ldrb	r2, [r7, #15]
 800ed72:	4611      	mov	r1, r2
 800ed74:	4618      	mov	r0, r3
 800ed76:	f7fe ff02 	bl	800db7e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ed80:	4618      	mov	r0, r3
 800ed82:	f7fe febb 	bl	800dafc <USBD_LL_Reset>
}
 800ed86:	bf00      	nop
 800ed88:	3710      	adds	r7, #16
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}
	...

0800ed90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b082      	sub	sp, #8
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7fe fefc 	bl	800db9c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	699b      	ldr	r3, [r3, #24]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d005      	beq.n	800edb8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800edac:	4b04      	ldr	r3, [pc, #16]	; (800edc0 <HAL_PCD_SuspendCallback+0x30>)
 800edae:	691b      	ldr	r3, [r3, #16]
 800edb0:	4a03      	ldr	r2, [pc, #12]	; (800edc0 <HAL_PCD_SuspendCallback+0x30>)
 800edb2:	f043 0306 	orr.w	r3, r3, #6
 800edb6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800edb8:	bf00      	nop
 800edba:	3708      	adds	r7, #8
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}
 800edc0:	e000ed00 	.word	0xe000ed00

0800edc4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b082      	sub	sp, #8
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7fe fef6 	bl	800dbc4 <USBD_LL_Resume>
}
 800edd8:	bf00      	nop
 800edda:	3708      	adds	r7, #8
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}

0800ede0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b082      	sub	sp, #8
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ede8:	4a28      	ldr	r2, [pc, #160]	; (800ee8c <USBD_LL_Init+0xac>)
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	4a26      	ldr	r2, [pc, #152]	; (800ee8c <USBD_LL_Init+0xac>)
 800edf4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800edf8:	4b24      	ldr	r3, [pc, #144]	; (800ee8c <USBD_LL_Init+0xac>)
 800edfa:	4a25      	ldr	r2, [pc, #148]	; (800ee90 <USBD_LL_Init+0xb0>)
 800edfc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800edfe:	4b23      	ldr	r3, [pc, #140]	; (800ee8c <USBD_LL_Init+0xac>)
 800ee00:	2208      	movs	r2, #8
 800ee02:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ee04:	4b21      	ldr	r3, [pc, #132]	; (800ee8c <USBD_LL_Init+0xac>)
 800ee06:	2202      	movs	r2, #2
 800ee08:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ee0a:	4b20      	ldr	r3, [pc, #128]	; (800ee8c <USBD_LL_Init+0xac>)
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ee10:	4b1e      	ldr	r3, [pc, #120]	; (800ee8c <USBD_LL_Init+0xac>)
 800ee12:	2200      	movs	r2, #0
 800ee14:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ee16:	4b1d      	ldr	r3, [pc, #116]	; (800ee8c <USBD_LL_Init+0xac>)
 800ee18:	2200      	movs	r2, #0
 800ee1a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ee1c:	481b      	ldr	r0, [pc, #108]	; (800ee8c <USBD_LL_Init+0xac>)
 800ee1e:	f7f8 fae5 	bl	80073ec <HAL_PCD_Init>
 800ee22:	4603      	mov	r3, r0
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d001      	beq.n	800ee2c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ee28:	f7f3 f8c8 	bl	8001fbc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ee32:	2318      	movs	r3, #24
 800ee34:	2200      	movs	r2, #0
 800ee36:	2100      	movs	r1, #0
 800ee38:	f7fa f804 	bl	8008e44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ee42:	2358      	movs	r3, #88	; 0x58
 800ee44:	2200      	movs	r2, #0
 800ee46:	2180      	movs	r1, #128	; 0x80
 800ee48:	f7f9 fffc 	bl	8008e44 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ee52:	23c0      	movs	r3, #192	; 0xc0
 800ee54:	2200      	movs	r2, #0
 800ee56:	2181      	movs	r1, #129	; 0x81
 800ee58:	f7f9 fff4 	bl	8008e44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ee62:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ee66:	2200      	movs	r2, #0
 800ee68:	2101      	movs	r1, #1
 800ee6a:	f7f9 ffeb 	bl	8008e44 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ee74:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ee78:	2200      	movs	r2, #0
 800ee7a:	2182      	movs	r1, #130	; 0x82
 800ee7c:	f7f9 ffe2 	bl	8008e44 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ee80:	2300      	movs	r3, #0
}
 800ee82:	4618      	mov	r0, r3
 800ee84:	3708      	adds	r7, #8
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}
 800ee8a:	bf00      	nop
 800ee8c:	2000268c 	.word	0x2000268c
 800ee90:	40005c00 	.word	0x40005c00

0800ee94 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b084      	sub	sp, #16
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eea0:	2300      	movs	r3, #0
 800eea2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7f8 fb9d 	bl	80075ea <HAL_PCD_Start>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eeb4:	7bfb      	ldrb	r3, [r7, #15]
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f000 f94e 	bl	800f158 <USBD_Get_USB_Status>
 800eebc:	4603      	mov	r3, r0
 800eebe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eec0:	7bbb      	ldrb	r3, [r7, #14]
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3710      	adds	r7, #16
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}

0800eeca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800eeca:	b580      	push	{r7, lr}
 800eecc:	b084      	sub	sp, #16
 800eece:	af00      	add	r7, sp, #0
 800eed0:	6078      	str	r0, [r7, #4]
 800eed2:	4608      	mov	r0, r1
 800eed4:	4611      	mov	r1, r2
 800eed6:	461a      	mov	r2, r3
 800eed8:	4603      	mov	r3, r0
 800eeda:	70fb      	strb	r3, [r7, #3]
 800eedc:	460b      	mov	r3, r1
 800eede:	70bb      	strb	r3, [r7, #2]
 800eee0:	4613      	mov	r3, r2
 800eee2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eee4:	2300      	movs	r3, #0
 800eee6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eee8:	2300      	movs	r3, #0
 800eeea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800eef2:	78bb      	ldrb	r3, [r7, #2]
 800eef4:	883a      	ldrh	r2, [r7, #0]
 800eef6:	78f9      	ldrb	r1, [r7, #3]
 800eef8:	f7f8 fcf2 	bl	80078e0 <HAL_PCD_EP_Open>
 800eefc:	4603      	mov	r3, r0
 800eefe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef00:	7bfb      	ldrb	r3, [r7, #15]
 800ef02:	4618      	mov	r0, r3
 800ef04:	f000 f928 	bl	800f158 <USBD_Get_USB_Status>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3710      	adds	r7, #16
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}

0800ef16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef16:	b580      	push	{r7, lr}
 800ef18:	b084      	sub	sp, #16
 800ef1a:	af00      	add	r7, sp, #0
 800ef1c:	6078      	str	r0, [r7, #4]
 800ef1e:	460b      	mov	r3, r1
 800ef20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef22:	2300      	movs	r3, #0
 800ef24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef26:	2300      	movs	r3, #0
 800ef28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef30:	78fa      	ldrb	r2, [r7, #3]
 800ef32:	4611      	mov	r1, r2
 800ef34:	4618      	mov	r0, r3
 800ef36:	f7f8 fd30 	bl	800799a <HAL_PCD_EP_Close>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef3e:	7bfb      	ldrb	r3, [r7, #15]
 800ef40:	4618      	mov	r0, r3
 800ef42:	f000 f909 	bl	800f158 <USBD_Get_USB_Status>
 800ef46:	4603      	mov	r3, r0
 800ef48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3710      	adds	r7, #16
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	460b      	mov	r3, r1
 800ef5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef60:	2300      	movs	r3, #0
 800ef62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef64:	2300      	movs	r3, #0
 800ef66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef6e:	78fa      	ldrb	r2, [r7, #3]
 800ef70:	4611      	mov	r1, r2
 800ef72:	4618      	mov	r0, r3
 800ef74:	f7f8 fdd8 	bl	8007b28 <HAL_PCD_EP_SetStall>
 800ef78:	4603      	mov	r3, r0
 800ef7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef7c:	7bfb      	ldrb	r3, [r7, #15]
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f000 f8ea 	bl	800f158 <USBD_Get_USB_Status>
 800ef84:	4603      	mov	r3, r0
 800ef86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef88:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3710      	adds	r7, #16
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}

0800ef92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef92:	b580      	push	{r7, lr}
 800ef94:	b084      	sub	sp, #16
 800ef96:	af00      	add	r7, sp, #0
 800ef98:	6078      	str	r0, [r7, #4]
 800ef9a:	460b      	mov	r3, r1
 800ef9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efa2:	2300      	movs	r3, #0
 800efa4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800efac:	78fa      	ldrb	r2, [r7, #3]
 800efae:	4611      	mov	r1, r2
 800efb0:	4618      	mov	r0, r3
 800efb2:	f7f8 fe19 	bl	8007be8 <HAL_PCD_EP_ClrStall>
 800efb6:	4603      	mov	r3, r0
 800efb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efba:	7bfb      	ldrb	r3, [r7, #15]
 800efbc:	4618      	mov	r0, r3
 800efbe:	f000 f8cb 	bl	800f158 <USBD_Get_USB_Status>
 800efc2:	4603      	mov	r3, r0
 800efc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efc6:	7bbb      	ldrb	r3, [r7, #14]
}
 800efc8:	4618      	mov	r0, r3
 800efca:	3710      	adds	r7, #16
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b085      	sub	sp, #20
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	460b      	mov	r3, r1
 800efda:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800efe2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800efe4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	da0c      	bge.n	800f006 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800efec:	78fb      	ldrb	r3, [r7, #3]
 800efee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eff2:	68f9      	ldr	r1, [r7, #12]
 800eff4:	1c5a      	adds	r2, r3, #1
 800eff6:	4613      	mov	r3, r2
 800eff8:	009b      	lsls	r3, r3, #2
 800effa:	4413      	add	r3, r2
 800effc:	00db      	lsls	r3, r3, #3
 800effe:	440b      	add	r3, r1
 800f000:	3302      	adds	r3, #2
 800f002:	781b      	ldrb	r3, [r3, #0]
 800f004:	e00b      	b.n	800f01e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f006:	78fb      	ldrb	r3, [r7, #3]
 800f008:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f00c:	68f9      	ldr	r1, [r7, #12]
 800f00e:	4613      	mov	r3, r2
 800f010:	009b      	lsls	r3, r3, #2
 800f012:	4413      	add	r3, r2
 800f014:	00db      	lsls	r3, r3, #3
 800f016:	440b      	add	r3, r1
 800f018:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800f01c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f01e:	4618      	mov	r0, r3
 800f020:	3714      	adds	r7, #20
 800f022:	46bd      	mov	sp, r7
 800f024:	bc80      	pop	{r7}
 800f026:	4770      	bx	lr

0800f028 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b084      	sub	sp, #16
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	460b      	mov	r3, r1
 800f032:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f034:	2300      	movs	r3, #0
 800f036:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f038:	2300      	movs	r3, #0
 800f03a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f042:	78fa      	ldrb	r2, [r7, #3]
 800f044:	4611      	mov	r1, r2
 800f046:	4618      	mov	r0, r3
 800f048:	f7f8 fc25 	bl	8007896 <HAL_PCD_SetAddress>
 800f04c:	4603      	mov	r3, r0
 800f04e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f050:	7bfb      	ldrb	r3, [r7, #15]
 800f052:	4618      	mov	r0, r3
 800f054:	f000 f880 	bl	800f158 <USBD_Get_USB_Status>
 800f058:	4603      	mov	r3, r0
 800f05a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f05c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3710      	adds	r7, #16
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}

0800f066 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f066:	b580      	push	{r7, lr}
 800f068:	b086      	sub	sp, #24
 800f06a:	af00      	add	r7, sp, #0
 800f06c:	60f8      	str	r0, [r7, #12]
 800f06e:	607a      	str	r2, [r7, #4]
 800f070:	461a      	mov	r2, r3
 800f072:	460b      	mov	r3, r1
 800f074:	72fb      	strb	r3, [r7, #11]
 800f076:	4613      	mov	r3, r2
 800f078:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f07a:	2300      	movs	r3, #0
 800f07c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f07e:	2300      	movs	r3, #0
 800f080:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f088:	893b      	ldrh	r3, [r7, #8]
 800f08a:	7af9      	ldrb	r1, [r7, #11]
 800f08c:	687a      	ldr	r2, [r7, #4]
 800f08e:	f7f8 fd14 	bl	8007aba <HAL_PCD_EP_Transmit>
 800f092:	4603      	mov	r3, r0
 800f094:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f096:	7dfb      	ldrb	r3, [r7, #23]
 800f098:	4618      	mov	r0, r3
 800f09a:	f000 f85d 	bl	800f158 <USBD_Get_USB_Status>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f0a2:	7dbb      	ldrb	r3, [r7, #22]
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3718      	adds	r7, #24
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b086      	sub	sp, #24
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	60f8      	str	r0, [r7, #12]
 800f0b4:	607a      	str	r2, [r7, #4]
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	460b      	mov	r3, r1
 800f0ba:	72fb      	strb	r3, [r7, #11]
 800f0bc:	4613      	mov	r3, r2
 800f0be:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800f0ce:	893b      	ldrh	r3, [r7, #8]
 800f0d0:	7af9      	ldrb	r1, [r7, #11]
 800f0d2:	687a      	ldr	r2, [r7, #4]
 800f0d4:	f7f8 fca9 	bl	8007a2a <HAL_PCD_EP_Receive>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0dc:	7dfb      	ldrb	r3, [r7, #23]
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f000 f83a 	bl	800f158 <USBD_Get_USB_Status>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f0e8:	7dbb      	ldrb	r3, [r7, #22]
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3718      	adds	r7, #24
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}

0800f0f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0f2:	b580      	push	{r7, lr}
 800f0f4:	b082      	sub	sp, #8
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	6078      	str	r0, [r7, #4]
 800f0fa:	460b      	mov	r3, r1
 800f0fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f104:	78fa      	ldrb	r2, [r7, #3]
 800f106:	4611      	mov	r1, r2
 800f108:	4618      	mov	r0, r3
 800f10a:	f7f8 fcbf 	bl	8007a8c <HAL_PCD_EP_GetRxCount>
 800f10e:	4603      	mov	r3, r0
}
 800f110:	4618      	mov	r0, r3
 800f112:	3708      	adds	r7, #8
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}

0800f118 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f118:	b480      	push	{r7}
 800f11a:	b083      	sub	sp, #12
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f120:	4b02      	ldr	r3, [pc, #8]	; (800f12c <USBD_static_malloc+0x14>)
}
 800f122:	4618      	mov	r0, r3
 800f124:	370c      	adds	r7, #12
 800f126:	46bd      	mov	sp, r7
 800f128:	bc80      	pop	{r7}
 800f12a:	4770      	bx	lr
 800f12c:	2000297c 	.word	0x2000297c

0800f130 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f130:	b480      	push	{r7}
 800f132:	b083      	sub	sp, #12
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]

}
 800f138:	bf00      	nop
 800f13a:	370c      	adds	r7, #12
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bc80      	pop	{r7}
 800f140:	4770      	bx	lr

0800f142 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f142:	b480      	push	{r7}
 800f144:	b083      	sub	sp, #12
 800f146:	af00      	add	r7, sp, #0
 800f148:	6078      	str	r0, [r7, #4]
 800f14a:	460b      	mov	r3, r1
 800f14c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800f14e:	bf00      	nop
 800f150:	370c      	adds	r7, #12
 800f152:	46bd      	mov	sp, r7
 800f154:	bc80      	pop	{r7}
 800f156:	4770      	bx	lr

0800f158 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f158:	b480      	push	{r7}
 800f15a:	b085      	sub	sp, #20
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	4603      	mov	r3, r0
 800f160:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f162:	2300      	movs	r3, #0
 800f164:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f166:	79fb      	ldrb	r3, [r7, #7]
 800f168:	2b03      	cmp	r3, #3
 800f16a:	d817      	bhi.n	800f19c <USBD_Get_USB_Status+0x44>
 800f16c:	a201      	add	r2, pc, #4	; (adr r2, 800f174 <USBD_Get_USB_Status+0x1c>)
 800f16e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f172:	bf00      	nop
 800f174:	0800f185 	.word	0x0800f185
 800f178:	0800f18b 	.word	0x0800f18b
 800f17c:	0800f191 	.word	0x0800f191
 800f180:	0800f197 	.word	0x0800f197
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f184:	2300      	movs	r3, #0
 800f186:	73fb      	strb	r3, [r7, #15]
    break;
 800f188:	e00b      	b.n	800f1a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f18a:	2302      	movs	r3, #2
 800f18c:	73fb      	strb	r3, [r7, #15]
    break;
 800f18e:	e008      	b.n	800f1a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f190:	2301      	movs	r3, #1
 800f192:	73fb      	strb	r3, [r7, #15]
    break;
 800f194:	e005      	b.n	800f1a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f196:	2302      	movs	r3, #2
 800f198:	73fb      	strb	r3, [r7, #15]
    break;
 800f19a:	e002      	b.n	800f1a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f19c:	2302      	movs	r3, #2
 800f19e:	73fb      	strb	r3, [r7, #15]
    break;
 800f1a0:	bf00      	nop
  }
  return usb_status;
 800f1a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3714      	adds	r7, #20
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bc80      	pop	{r7}
 800f1ac:	4770      	bx	lr
 800f1ae:	bf00      	nop

0800f1b0 <atoi>:
 800f1b0:	220a      	movs	r2, #10
 800f1b2:	2100      	movs	r1, #0
 800f1b4:	f000 b90a 	b.w	800f3cc <strtol>

0800f1b8 <__errno>:
 800f1b8:	4b01      	ldr	r3, [pc, #4]	; (800f1c0 <__errno+0x8>)
 800f1ba:	6818      	ldr	r0, [r3, #0]
 800f1bc:	4770      	bx	lr
 800f1be:	bf00      	nop
 800f1c0:	200003d0 	.word	0x200003d0

0800f1c4 <__libc_init_array>:
 800f1c4:	b570      	push	{r4, r5, r6, lr}
 800f1c6:	2600      	movs	r6, #0
 800f1c8:	4d0c      	ldr	r5, [pc, #48]	; (800f1fc <__libc_init_array+0x38>)
 800f1ca:	4c0d      	ldr	r4, [pc, #52]	; (800f200 <__libc_init_array+0x3c>)
 800f1cc:	1b64      	subs	r4, r4, r5
 800f1ce:	10a4      	asrs	r4, r4, #2
 800f1d0:	42a6      	cmp	r6, r4
 800f1d2:	d109      	bne.n	800f1e8 <__libc_init_array+0x24>
 800f1d4:	f001 f904 	bl	80103e0 <_init>
 800f1d8:	2600      	movs	r6, #0
 800f1da:	4d0a      	ldr	r5, [pc, #40]	; (800f204 <__libc_init_array+0x40>)
 800f1dc:	4c0a      	ldr	r4, [pc, #40]	; (800f208 <__libc_init_array+0x44>)
 800f1de:	1b64      	subs	r4, r4, r5
 800f1e0:	10a4      	asrs	r4, r4, #2
 800f1e2:	42a6      	cmp	r6, r4
 800f1e4:	d105      	bne.n	800f1f2 <__libc_init_array+0x2e>
 800f1e6:	bd70      	pop	{r4, r5, r6, pc}
 800f1e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1ec:	4798      	blx	r3
 800f1ee:	3601      	adds	r6, #1
 800f1f0:	e7ee      	b.n	800f1d0 <__libc_init_array+0xc>
 800f1f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1f6:	4798      	blx	r3
 800f1f8:	3601      	adds	r6, #1
 800f1fa:	e7f2      	b.n	800f1e2 <__libc_init_array+0x1e>
 800f1fc:	08010958 	.word	0x08010958
 800f200:	08010958 	.word	0x08010958
 800f204:	08010958 	.word	0x08010958
 800f208:	0801095c 	.word	0x0801095c

0800f20c <memset>:
 800f20c:	4603      	mov	r3, r0
 800f20e:	4402      	add	r2, r0
 800f210:	4293      	cmp	r3, r2
 800f212:	d100      	bne.n	800f216 <memset+0xa>
 800f214:	4770      	bx	lr
 800f216:	f803 1b01 	strb.w	r1, [r3], #1
 800f21a:	e7f9      	b.n	800f210 <memset+0x4>

0800f21c <strtok>:
 800f21c:	4b16      	ldr	r3, [pc, #88]	; (800f278 <strtok+0x5c>)
 800f21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f222:	681f      	ldr	r7, [r3, #0]
 800f224:	4605      	mov	r5, r0
 800f226:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800f228:	460e      	mov	r6, r1
 800f22a:	b9ec      	cbnz	r4, 800f268 <strtok+0x4c>
 800f22c:	2050      	movs	r0, #80	; 0x50
 800f22e:	f000 f907 	bl	800f440 <malloc>
 800f232:	4602      	mov	r2, r0
 800f234:	65b8      	str	r0, [r7, #88]	; 0x58
 800f236:	b920      	cbnz	r0, 800f242 <strtok+0x26>
 800f238:	2157      	movs	r1, #87	; 0x57
 800f23a:	4b10      	ldr	r3, [pc, #64]	; (800f27c <strtok+0x60>)
 800f23c:	4810      	ldr	r0, [pc, #64]	; (800f280 <strtok+0x64>)
 800f23e:	f000 f8cf 	bl	800f3e0 <__assert_func>
 800f242:	e9c0 4400 	strd	r4, r4, [r0]
 800f246:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f24a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f24e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f252:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f256:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f25a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f25e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f262:	6184      	str	r4, [r0, #24]
 800f264:	7704      	strb	r4, [r0, #28]
 800f266:	6244      	str	r4, [r0, #36]	; 0x24
 800f268:	4631      	mov	r1, r6
 800f26a:	4628      	mov	r0, r5
 800f26c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f26e:	2301      	movs	r3, #1
 800f270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f274:	f000 b806 	b.w	800f284 <__strtok_r>
 800f278:	200003d0 	.word	0x200003d0
 800f27c:	08010714 	.word	0x08010714
 800f280:	0801072b 	.word	0x0801072b

0800f284 <__strtok_r>:
 800f284:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f286:	b908      	cbnz	r0, 800f28c <__strtok_r+0x8>
 800f288:	6810      	ldr	r0, [r2, #0]
 800f28a:	b188      	cbz	r0, 800f2b0 <__strtok_r+0x2c>
 800f28c:	4604      	mov	r4, r0
 800f28e:	460f      	mov	r7, r1
 800f290:	4620      	mov	r0, r4
 800f292:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f296:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f29a:	b91e      	cbnz	r6, 800f2a4 <__strtok_r+0x20>
 800f29c:	b965      	cbnz	r5, 800f2b8 <__strtok_r+0x34>
 800f29e:	4628      	mov	r0, r5
 800f2a0:	6015      	str	r5, [r2, #0]
 800f2a2:	e005      	b.n	800f2b0 <__strtok_r+0x2c>
 800f2a4:	42b5      	cmp	r5, r6
 800f2a6:	d1f6      	bne.n	800f296 <__strtok_r+0x12>
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d1f0      	bne.n	800f28e <__strtok_r+0xa>
 800f2ac:	6014      	str	r4, [r2, #0]
 800f2ae:	7003      	strb	r3, [r0, #0]
 800f2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2b2:	461c      	mov	r4, r3
 800f2b4:	e00c      	b.n	800f2d0 <__strtok_r+0x4c>
 800f2b6:	b915      	cbnz	r5, 800f2be <__strtok_r+0x3a>
 800f2b8:	460e      	mov	r6, r1
 800f2ba:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f2be:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f2c2:	42ab      	cmp	r3, r5
 800f2c4:	d1f7      	bne.n	800f2b6 <__strtok_r+0x32>
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d0f3      	beq.n	800f2b2 <__strtok_r+0x2e>
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f2d0:	6014      	str	r4, [r2, #0]
 800f2d2:	e7ed      	b.n	800f2b0 <__strtok_r+0x2c>

0800f2d4 <_strtol_l.constprop.0>:
 800f2d4:	2b01      	cmp	r3, #1
 800f2d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2da:	4680      	mov	r8, r0
 800f2dc:	d001      	beq.n	800f2e2 <_strtol_l.constprop.0+0xe>
 800f2de:	2b24      	cmp	r3, #36	; 0x24
 800f2e0:	d906      	bls.n	800f2f0 <_strtol_l.constprop.0+0x1c>
 800f2e2:	f7ff ff69 	bl	800f1b8 <__errno>
 800f2e6:	2316      	movs	r3, #22
 800f2e8:	6003      	str	r3, [r0, #0]
 800f2ea:	2000      	movs	r0, #0
 800f2ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2f0:	460d      	mov	r5, r1
 800f2f2:	4f35      	ldr	r7, [pc, #212]	; (800f3c8 <_strtol_l.constprop.0+0xf4>)
 800f2f4:	4628      	mov	r0, r5
 800f2f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f2fa:	5de6      	ldrb	r6, [r4, r7]
 800f2fc:	f016 0608 	ands.w	r6, r6, #8
 800f300:	d1f8      	bne.n	800f2f4 <_strtol_l.constprop.0+0x20>
 800f302:	2c2d      	cmp	r4, #45	; 0x2d
 800f304:	d12f      	bne.n	800f366 <_strtol_l.constprop.0+0x92>
 800f306:	2601      	movs	r6, #1
 800f308:	782c      	ldrb	r4, [r5, #0]
 800f30a:	1c85      	adds	r5, r0, #2
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d057      	beq.n	800f3c0 <_strtol_l.constprop.0+0xec>
 800f310:	2b10      	cmp	r3, #16
 800f312:	d109      	bne.n	800f328 <_strtol_l.constprop.0+0x54>
 800f314:	2c30      	cmp	r4, #48	; 0x30
 800f316:	d107      	bne.n	800f328 <_strtol_l.constprop.0+0x54>
 800f318:	7828      	ldrb	r0, [r5, #0]
 800f31a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800f31e:	2858      	cmp	r0, #88	; 0x58
 800f320:	d149      	bne.n	800f3b6 <_strtol_l.constprop.0+0xe2>
 800f322:	2310      	movs	r3, #16
 800f324:	786c      	ldrb	r4, [r5, #1]
 800f326:	3502      	adds	r5, #2
 800f328:	2700      	movs	r7, #0
 800f32a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800f32e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800f332:	fbbe f9f3 	udiv	r9, lr, r3
 800f336:	4638      	mov	r0, r7
 800f338:	fb03 ea19 	mls	sl, r3, r9, lr
 800f33c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f340:	f1bc 0f09 	cmp.w	ip, #9
 800f344:	d814      	bhi.n	800f370 <_strtol_l.constprop.0+0x9c>
 800f346:	4664      	mov	r4, ip
 800f348:	42a3      	cmp	r3, r4
 800f34a:	dd22      	ble.n	800f392 <_strtol_l.constprop.0+0xbe>
 800f34c:	2f00      	cmp	r7, #0
 800f34e:	db1d      	blt.n	800f38c <_strtol_l.constprop.0+0xb8>
 800f350:	4581      	cmp	r9, r0
 800f352:	d31b      	bcc.n	800f38c <_strtol_l.constprop.0+0xb8>
 800f354:	d101      	bne.n	800f35a <_strtol_l.constprop.0+0x86>
 800f356:	45a2      	cmp	sl, r4
 800f358:	db18      	blt.n	800f38c <_strtol_l.constprop.0+0xb8>
 800f35a:	2701      	movs	r7, #1
 800f35c:	fb00 4003 	mla	r0, r0, r3, r4
 800f360:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f364:	e7ea      	b.n	800f33c <_strtol_l.constprop.0+0x68>
 800f366:	2c2b      	cmp	r4, #43	; 0x2b
 800f368:	bf04      	itt	eq
 800f36a:	782c      	ldrbeq	r4, [r5, #0]
 800f36c:	1c85      	addeq	r5, r0, #2
 800f36e:	e7cd      	b.n	800f30c <_strtol_l.constprop.0+0x38>
 800f370:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f374:	f1bc 0f19 	cmp.w	ip, #25
 800f378:	d801      	bhi.n	800f37e <_strtol_l.constprop.0+0xaa>
 800f37a:	3c37      	subs	r4, #55	; 0x37
 800f37c:	e7e4      	b.n	800f348 <_strtol_l.constprop.0+0x74>
 800f37e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f382:	f1bc 0f19 	cmp.w	ip, #25
 800f386:	d804      	bhi.n	800f392 <_strtol_l.constprop.0+0xbe>
 800f388:	3c57      	subs	r4, #87	; 0x57
 800f38a:	e7dd      	b.n	800f348 <_strtol_l.constprop.0+0x74>
 800f38c:	f04f 37ff 	mov.w	r7, #4294967295
 800f390:	e7e6      	b.n	800f360 <_strtol_l.constprop.0+0x8c>
 800f392:	2f00      	cmp	r7, #0
 800f394:	da07      	bge.n	800f3a6 <_strtol_l.constprop.0+0xd2>
 800f396:	2322      	movs	r3, #34	; 0x22
 800f398:	4670      	mov	r0, lr
 800f39a:	f8c8 3000 	str.w	r3, [r8]
 800f39e:	2a00      	cmp	r2, #0
 800f3a0:	d0a4      	beq.n	800f2ec <_strtol_l.constprop.0+0x18>
 800f3a2:	1e69      	subs	r1, r5, #1
 800f3a4:	e005      	b.n	800f3b2 <_strtol_l.constprop.0+0xde>
 800f3a6:	b106      	cbz	r6, 800f3aa <_strtol_l.constprop.0+0xd6>
 800f3a8:	4240      	negs	r0, r0
 800f3aa:	2a00      	cmp	r2, #0
 800f3ac:	d09e      	beq.n	800f2ec <_strtol_l.constprop.0+0x18>
 800f3ae:	2f00      	cmp	r7, #0
 800f3b0:	d1f7      	bne.n	800f3a2 <_strtol_l.constprop.0+0xce>
 800f3b2:	6011      	str	r1, [r2, #0]
 800f3b4:	e79a      	b.n	800f2ec <_strtol_l.constprop.0+0x18>
 800f3b6:	2430      	movs	r4, #48	; 0x30
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d1b5      	bne.n	800f328 <_strtol_l.constprop.0+0x54>
 800f3bc:	2308      	movs	r3, #8
 800f3be:	e7b3      	b.n	800f328 <_strtol_l.constprop.0+0x54>
 800f3c0:	2c30      	cmp	r4, #48	; 0x30
 800f3c2:	d0a9      	beq.n	800f318 <_strtol_l.constprop.0+0x44>
 800f3c4:	230a      	movs	r3, #10
 800f3c6:	e7af      	b.n	800f328 <_strtol_l.constprop.0+0x54>
 800f3c8:	080107c5 	.word	0x080107c5

0800f3cc <strtol>:
 800f3cc:	4613      	mov	r3, r2
 800f3ce:	460a      	mov	r2, r1
 800f3d0:	4601      	mov	r1, r0
 800f3d2:	4802      	ldr	r0, [pc, #8]	; (800f3dc <strtol+0x10>)
 800f3d4:	6800      	ldr	r0, [r0, #0]
 800f3d6:	f7ff bf7d 	b.w	800f2d4 <_strtol_l.constprop.0>
 800f3da:	bf00      	nop
 800f3dc:	200003d0 	.word	0x200003d0

0800f3e0 <__assert_func>:
 800f3e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f3e2:	4614      	mov	r4, r2
 800f3e4:	461a      	mov	r2, r3
 800f3e6:	4b09      	ldr	r3, [pc, #36]	; (800f40c <__assert_func+0x2c>)
 800f3e8:	4605      	mov	r5, r0
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	68d8      	ldr	r0, [r3, #12]
 800f3ee:	b14c      	cbz	r4, 800f404 <__assert_func+0x24>
 800f3f0:	4b07      	ldr	r3, [pc, #28]	; (800f410 <__assert_func+0x30>)
 800f3f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f3f6:	9100      	str	r1, [sp, #0]
 800f3f8:	462b      	mov	r3, r5
 800f3fa:	4906      	ldr	r1, [pc, #24]	; (800f414 <__assert_func+0x34>)
 800f3fc:	f000 f80e 	bl	800f41c <fiprintf>
 800f400:	f000 fcc0 	bl	800fd84 <abort>
 800f404:	4b04      	ldr	r3, [pc, #16]	; (800f418 <__assert_func+0x38>)
 800f406:	461c      	mov	r4, r3
 800f408:	e7f3      	b.n	800f3f2 <__assert_func+0x12>
 800f40a:	bf00      	nop
 800f40c:	200003d0 	.word	0x200003d0
 800f410:	08010788 	.word	0x08010788
 800f414:	08010795 	.word	0x08010795
 800f418:	080107c3 	.word	0x080107c3

0800f41c <fiprintf>:
 800f41c:	b40e      	push	{r1, r2, r3}
 800f41e:	b503      	push	{r0, r1, lr}
 800f420:	4601      	mov	r1, r0
 800f422:	ab03      	add	r3, sp, #12
 800f424:	4805      	ldr	r0, [pc, #20]	; (800f43c <fiprintf+0x20>)
 800f426:	f853 2b04 	ldr.w	r2, [r3], #4
 800f42a:	6800      	ldr	r0, [r0, #0]
 800f42c:	9301      	str	r3, [sp, #4]
 800f42e:	f000 f913 	bl	800f658 <_vfiprintf_r>
 800f432:	b002      	add	sp, #8
 800f434:	f85d eb04 	ldr.w	lr, [sp], #4
 800f438:	b003      	add	sp, #12
 800f43a:	4770      	bx	lr
 800f43c:	200003d0 	.word	0x200003d0

0800f440 <malloc>:
 800f440:	4b02      	ldr	r3, [pc, #8]	; (800f44c <malloc+0xc>)
 800f442:	4601      	mov	r1, r0
 800f444:	6818      	ldr	r0, [r3, #0]
 800f446:	f000 b86b 	b.w	800f520 <_malloc_r>
 800f44a:	bf00      	nop
 800f44c:	200003d0 	.word	0x200003d0

0800f450 <_free_r>:
 800f450:	b538      	push	{r3, r4, r5, lr}
 800f452:	4605      	mov	r5, r0
 800f454:	2900      	cmp	r1, #0
 800f456:	d040      	beq.n	800f4da <_free_r+0x8a>
 800f458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f45c:	1f0c      	subs	r4, r1, #4
 800f45e:	2b00      	cmp	r3, #0
 800f460:	bfb8      	it	lt
 800f462:	18e4      	addlt	r4, r4, r3
 800f464:	f000 fec0 	bl	80101e8 <__malloc_lock>
 800f468:	4a1c      	ldr	r2, [pc, #112]	; (800f4dc <_free_r+0x8c>)
 800f46a:	6813      	ldr	r3, [r2, #0]
 800f46c:	b933      	cbnz	r3, 800f47c <_free_r+0x2c>
 800f46e:	6063      	str	r3, [r4, #4]
 800f470:	6014      	str	r4, [r2, #0]
 800f472:	4628      	mov	r0, r5
 800f474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f478:	f000 bebc 	b.w	80101f4 <__malloc_unlock>
 800f47c:	42a3      	cmp	r3, r4
 800f47e:	d908      	bls.n	800f492 <_free_r+0x42>
 800f480:	6820      	ldr	r0, [r4, #0]
 800f482:	1821      	adds	r1, r4, r0
 800f484:	428b      	cmp	r3, r1
 800f486:	bf01      	itttt	eq
 800f488:	6819      	ldreq	r1, [r3, #0]
 800f48a:	685b      	ldreq	r3, [r3, #4]
 800f48c:	1809      	addeq	r1, r1, r0
 800f48e:	6021      	streq	r1, [r4, #0]
 800f490:	e7ed      	b.n	800f46e <_free_r+0x1e>
 800f492:	461a      	mov	r2, r3
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	b10b      	cbz	r3, 800f49c <_free_r+0x4c>
 800f498:	42a3      	cmp	r3, r4
 800f49a:	d9fa      	bls.n	800f492 <_free_r+0x42>
 800f49c:	6811      	ldr	r1, [r2, #0]
 800f49e:	1850      	adds	r0, r2, r1
 800f4a0:	42a0      	cmp	r0, r4
 800f4a2:	d10b      	bne.n	800f4bc <_free_r+0x6c>
 800f4a4:	6820      	ldr	r0, [r4, #0]
 800f4a6:	4401      	add	r1, r0
 800f4a8:	1850      	adds	r0, r2, r1
 800f4aa:	4283      	cmp	r3, r0
 800f4ac:	6011      	str	r1, [r2, #0]
 800f4ae:	d1e0      	bne.n	800f472 <_free_r+0x22>
 800f4b0:	6818      	ldr	r0, [r3, #0]
 800f4b2:	685b      	ldr	r3, [r3, #4]
 800f4b4:	4401      	add	r1, r0
 800f4b6:	6011      	str	r1, [r2, #0]
 800f4b8:	6053      	str	r3, [r2, #4]
 800f4ba:	e7da      	b.n	800f472 <_free_r+0x22>
 800f4bc:	d902      	bls.n	800f4c4 <_free_r+0x74>
 800f4be:	230c      	movs	r3, #12
 800f4c0:	602b      	str	r3, [r5, #0]
 800f4c2:	e7d6      	b.n	800f472 <_free_r+0x22>
 800f4c4:	6820      	ldr	r0, [r4, #0]
 800f4c6:	1821      	adds	r1, r4, r0
 800f4c8:	428b      	cmp	r3, r1
 800f4ca:	bf01      	itttt	eq
 800f4cc:	6819      	ldreq	r1, [r3, #0]
 800f4ce:	685b      	ldreq	r3, [r3, #4]
 800f4d0:	1809      	addeq	r1, r1, r0
 800f4d2:	6021      	streq	r1, [r4, #0]
 800f4d4:	6063      	str	r3, [r4, #4]
 800f4d6:	6054      	str	r4, [r2, #4]
 800f4d8:	e7cb      	b.n	800f472 <_free_r+0x22>
 800f4da:	bd38      	pop	{r3, r4, r5, pc}
 800f4dc:	20002b9c 	.word	0x20002b9c

0800f4e0 <sbrk_aligned>:
 800f4e0:	b570      	push	{r4, r5, r6, lr}
 800f4e2:	4e0e      	ldr	r6, [pc, #56]	; (800f51c <sbrk_aligned+0x3c>)
 800f4e4:	460c      	mov	r4, r1
 800f4e6:	6831      	ldr	r1, [r6, #0]
 800f4e8:	4605      	mov	r5, r0
 800f4ea:	b911      	cbnz	r1, 800f4f2 <sbrk_aligned+0x12>
 800f4ec:	f000 fb7a 	bl	800fbe4 <_sbrk_r>
 800f4f0:	6030      	str	r0, [r6, #0]
 800f4f2:	4621      	mov	r1, r4
 800f4f4:	4628      	mov	r0, r5
 800f4f6:	f000 fb75 	bl	800fbe4 <_sbrk_r>
 800f4fa:	1c43      	adds	r3, r0, #1
 800f4fc:	d00a      	beq.n	800f514 <sbrk_aligned+0x34>
 800f4fe:	1cc4      	adds	r4, r0, #3
 800f500:	f024 0403 	bic.w	r4, r4, #3
 800f504:	42a0      	cmp	r0, r4
 800f506:	d007      	beq.n	800f518 <sbrk_aligned+0x38>
 800f508:	1a21      	subs	r1, r4, r0
 800f50a:	4628      	mov	r0, r5
 800f50c:	f000 fb6a 	bl	800fbe4 <_sbrk_r>
 800f510:	3001      	adds	r0, #1
 800f512:	d101      	bne.n	800f518 <sbrk_aligned+0x38>
 800f514:	f04f 34ff 	mov.w	r4, #4294967295
 800f518:	4620      	mov	r0, r4
 800f51a:	bd70      	pop	{r4, r5, r6, pc}
 800f51c:	20002ba0 	.word	0x20002ba0

0800f520 <_malloc_r>:
 800f520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f524:	1ccd      	adds	r5, r1, #3
 800f526:	f025 0503 	bic.w	r5, r5, #3
 800f52a:	3508      	adds	r5, #8
 800f52c:	2d0c      	cmp	r5, #12
 800f52e:	bf38      	it	cc
 800f530:	250c      	movcc	r5, #12
 800f532:	2d00      	cmp	r5, #0
 800f534:	4607      	mov	r7, r0
 800f536:	db01      	blt.n	800f53c <_malloc_r+0x1c>
 800f538:	42a9      	cmp	r1, r5
 800f53a:	d905      	bls.n	800f548 <_malloc_r+0x28>
 800f53c:	230c      	movs	r3, #12
 800f53e:	2600      	movs	r6, #0
 800f540:	603b      	str	r3, [r7, #0]
 800f542:	4630      	mov	r0, r6
 800f544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f548:	4e2e      	ldr	r6, [pc, #184]	; (800f604 <_malloc_r+0xe4>)
 800f54a:	f000 fe4d 	bl	80101e8 <__malloc_lock>
 800f54e:	6833      	ldr	r3, [r6, #0]
 800f550:	461c      	mov	r4, r3
 800f552:	bb34      	cbnz	r4, 800f5a2 <_malloc_r+0x82>
 800f554:	4629      	mov	r1, r5
 800f556:	4638      	mov	r0, r7
 800f558:	f7ff ffc2 	bl	800f4e0 <sbrk_aligned>
 800f55c:	1c43      	adds	r3, r0, #1
 800f55e:	4604      	mov	r4, r0
 800f560:	d14d      	bne.n	800f5fe <_malloc_r+0xde>
 800f562:	6834      	ldr	r4, [r6, #0]
 800f564:	4626      	mov	r6, r4
 800f566:	2e00      	cmp	r6, #0
 800f568:	d140      	bne.n	800f5ec <_malloc_r+0xcc>
 800f56a:	6823      	ldr	r3, [r4, #0]
 800f56c:	4631      	mov	r1, r6
 800f56e:	4638      	mov	r0, r7
 800f570:	eb04 0803 	add.w	r8, r4, r3
 800f574:	f000 fb36 	bl	800fbe4 <_sbrk_r>
 800f578:	4580      	cmp	r8, r0
 800f57a:	d13a      	bne.n	800f5f2 <_malloc_r+0xd2>
 800f57c:	6821      	ldr	r1, [r4, #0]
 800f57e:	3503      	adds	r5, #3
 800f580:	1a6d      	subs	r5, r5, r1
 800f582:	f025 0503 	bic.w	r5, r5, #3
 800f586:	3508      	adds	r5, #8
 800f588:	2d0c      	cmp	r5, #12
 800f58a:	bf38      	it	cc
 800f58c:	250c      	movcc	r5, #12
 800f58e:	4638      	mov	r0, r7
 800f590:	4629      	mov	r1, r5
 800f592:	f7ff ffa5 	bl	800f4e0 <sbrk_aligned>
 800f596:	3001      	adds	r0, #1
 800f598:	d02b      	beq.n	800f5f2 <_malloc_r+0xd2>
 800f59a:	6823      	ldr	r3, [r4, #0]
 800f59c:	442b      	add	r3, r5
 800f59e:	6023      	str	r3, [r4, #0]
 800f5a0:	e00e      	b.n	800f5c0 <_malloc_r+0xa0>
 800f5a2:	6822      	ldr	r2, [r4, #0]
 800f5a4:	1b52      	subs	r2, r2, r5
 800f5a6:	d41e      	bmi.n	800f5e6 <_malloc_r+0xc6>
 800f5a8:	2a0b      	cmp	r2, #11
 800f5aa:	d916      	bls.n	800f5da <_malloc_r+0xba>
 800f5ac:	1961      	adds	r1, r4, r5
 800f5ae:	42a3      	cmp	r3, r4
 800f5b0:	6025      	str	r5, [r4, #0]
 800f5b2:	bf18      	it	ne
 800f5b4:	6059      	strne	r1, [r3, #4]
 800f5b6:	6863      	ldr	r3, [r4, #4]
 800f5b8:	bf08      	it	eq
 800f5ba:	6031      	streq	r1, [r6, #0]
 800f5bc:	5162      	str	r2, [r4, r5]
 800f5be:	604b      	str	r3, [r1, #4]
 800f5c0:	4638      	mov	r0, r7
 800f5c2:	f104 060b 	add.w	r6, r4, #11
 800f5c6:	f000 fe15 	bl	80101f4 <__malloc_unlock>
 800f5ca:	f026 0607 	bic.w	r6, r6, #7
 800f5ce:	1d23      	adds	r3, r4, #4
 800f5d0:	1af2      	subs	r2, r6, r3
 800f5d2:	d0b6      	beq.n	800f542 <_malloc_r+0x22>
 800f5d4:	1b9b      	subs	r3, r3, r6
 800f5d6:	50a3      	str	r3, [r4, r2]
 800f5d8:	e7b3      	b.n	800f542 <_malloc_r+0x22>
 800f5da:	6862      	ldr	r2, [r4, #4]
 800f5dc:	42a3      	cmp	r3, r4
 800f5de:	bf0c      	ite	eq
 800f5e0:	6032      	streq	r2, [r6, #0]
 800f5e2:	605a      	strne	r2, [r3, #4]
 800f5e4:	e7ec      	b.n	800f5c0 <_malloc_r+0xa0>
 800f5e6:	4623      	mov	r3, r4
 800f5e8:	6864      	ldr	r4, [r4, #4]
 800f5ea:	e7b2      	b.n	800f552 <_malloc_r+0x32>
 800f5ec:	4634      	mov	r4, r6
 800f5ee:	6876      	ldr	r6, [r6, #4]
 800f5f0:	e7b9      	b.n	800f566 <_malloc_r+0x46>
 800f5f2:	230c      	movs	r3, #12
 800f5f4:	4638      	mov	r0, r7
 800f5f6:	603b      	str	r3, [r7, #0]
 800f5f8:	f000 fdfc 	bl	80101f4 <__malloc_unlock>
 800f5fc:	e7a1      	b.n	800f542 <_malloc_r+0x22>
 800f5fe:	6025      	str	r5, [r4, #0]
 800f600:	e7de      	b.n	800f5c0 <_malloc_r+0xa0>
 800f602:	bf00      	nop
 800f604:	20002b9c 	.word	0x20002b9c

0800f608 <__sfputc_r>:
 800f608:	6893      	ldr	r3, [r2, #8]
 800f60a:	b410      	push	{r4}
 800f60c:	3b01      	subs	r3, #1
 800f60e:	2b00      	cmp	r3, #0
 800f610:	6093      	str	r3, [r2, #8]
 800f612:	da07      	bge.n	800f624 <__sfputc_r+0x1c>
 800f614:	6994      	ldr	r4, [r2, #24]
 800f616:	42a3      	cmp	r3, r4
 800f618:	db01      	blt.n	800f61e <__sfputc_r+0x16>
 800f61a:	290a      	cmp	r1, #10
 800f61c:	d102      	bne.n	800f624 <__sfputc_r+0x1c>
 800f61e:	bc10      	pop	{r4}
 800f620:	f000 baf0 	b.w	800fc04 <__swbuf_r>
 800f624:	6813      	ldr	r3, [r2, #0]
 800f626:	1c58      	adds	r0, r3, #1
 800f628:	6010      	str	r0, [r2, #0]
 800f62a:	7019      	strb	r1, [r3, #0]
 800f62c:	4608      	mov	r0, r1
 800f62e:	bc10      	pop	{r4}
 800f630:	4770      	bx	lr

0800f632 <__sfputs_r>:
 800f632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f634:	4606      	mov	r6, r0
 800f636:	460f      	mov	r7, r1
 800f638:	4614      	mov	r4, r2
 800f63a:	18d5      	adds	r5, r2, r3
 800f63c:	42ac      	cmp	r4, r5
 800f63e:	d101      	bne.n	800f644 <__sfputs_r+0x12>
 800f640:	2000      	movs	r0, #0
 800f642:	e007      	b.n	800f654 <__sfputs_r+0x22>
 800f644:	463a      	mov	r2, r7
 800f646:	4630      	mov	r0, r6
 800f648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f64c:	f7ff ffdc 	bl	800f608 <__sfputc_r>
 800f650:	1c43      	adds	r3, r0, #1
 800f652:	d1f3      	bne.n	800f63c <__sfputs_r+0xa>
 800f654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f658 <_vfiprintf_r>:
 800f658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f65c:	460d      	mov	r5, r1
 800f65e:	4614      	mov	r4, r2
 800f660:	4698      	mov	r8, r3
 800f662:	4606      	mov	r6, r0
 800f664:	b09d      	sub	sp, #116	; 0x74
 800f666:	b118      	cbz	r0, 800f670 <_vfiprintf_r+0x18>
 800f668:	6983      	ldr	r3, [r0, #24]
 800f66a:	b90b      	cbnz	r3, 800f670 <_vfiprintf_r+0x18>
 800f66c:	f000 fca8 	bl	800ffc0 <__sinit>
 800f670:	4b89      	ldr	r3, [pc, #548]	; (800f898 <_vfiprintf_r+0x240>)
 800f672:	429d      	cmp	r5, r3
 800f674:	d11b      	bne.n	800f6ae <_vfiprintf_r+0x56>
 800f676:	6875      	ldr	r5, [r6, #4]
 800f678:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f67a:	07d9      	lsls	r1, r3, #31
 800f67c:	d405      	bmi.n	800f68a <_vfiprintf_r+0x32>
 800f67e:	89ab      	ldrh	r3, [r5, #12]
 800f680:	059a      	lsls	r2, r3, #22
 800f682:	d402      	bmi.n	800f68a <_vfiprintf_r+0x32>
 800f684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f686:	f000 fd39 	bl	80100fc <__retarget_lock_acquire_recursive>
 800f68a:	89ab      	ldrh	r3, [r5, #12]
 800f68c:	071b      	lsls	r3, r3, #28
 800f68e:	d501      	bpl.n	800f694 <_vfiprintf_r+0x3c>
 800f690:	692b      	ldr	r3, [r5, #16]
 800f692:	b9eb      	cbnz	r3, 800f6d0 <_vfiprintf_r+0x78>
 800f694:	4629      	mov	r1, r5
 800f696:	4630      	mov	r0, r6
 800f698:	f000 fb06 	bl	800fca8 <__swsetup_r>
 800f69c:	b1c0      	cbz	r0, 800f6d0 <_vfiprintf_r+0x78>
 800f69e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6a0:	07dc      	lsls	r4, r3, #31
 800f6a2:	d50e      	bpl.n	800f6c2 <_vfiprintf_r+0x6a>
 800f6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f6a8:	b01d      	add	sp, #116	; 0x74
 800f6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ae:	4b7b      	ldr	r3, [pc, #492]	; (800f89c <_vfiprintf_r+0x244>)
 800f6b0:	429d      	cmp	r5, r3
 800f6b2:	d101      	bne.n	800f6b8 <_vfiprintf_r+0x60>
 800f6b4:	68b5      	ldr	r5, [r6, #8]
 800f6b6:	e7df      	b.n	800f678 <_vfiprintf_r+0x20>
 800f6b8:	4b79      	ldr	r3, [pc, #484]	; (800f8a0 <_vfiprintf_r+0x248>)
 800f6ba:	429d      	cmp	r5, r3
 800f6bc:	bf08      	it	eq
 800f6be:	68f5      	ldreq	r5, [r6, #12]
 800f6c0:	e7da      	b.n	800f678 <_vfiprintf_r+0x20>
 800f6c2:	89ab      	ldrh	r3, [r5, #12]
 800f6c4:	0598      	lsls	r0, r3, #22
 800f6c6:	d4ed      	bmi.n	800f6a4 <_vfiprintf_r+0x4c>
 800f6c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f6ca:	f000 fd18 	bl	80100fe <__retarget_lock_release_recursive>
 800f6ce:	e7e9      	b.n	800f6a4 <_vfiprintf_r+0x4c>
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	9309      	str	r3, [sp, #36]	; 0x24
 800f6d4:	2320      	movs	r3, #32
 800f6d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f6da:	2330      	movs	r3, #48	; 0x30
 800f6dc:	f04f 0901 	mov.w	r9, #1
 800f6e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f6e4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800f8a4 <_vfiprintf_r+0x24c>
 800f6e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6ec:	4623      	mov	r3, r4
 800f6ee:	469a      	mov	sl, r3
 800f6f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6f4:	b10a      	cbz	r2, 800f6fa <_vfiprintf_r+0xa2>
 800f6f6:	2a25      	cmp	r2, #37	; 0x25
 800f6f8:	d1f9      	bne.n	800f6ee <_vfiprintf_r+0x96>
 800f6fa:	ebba 0b04 	subs.w	fp, sl, r4
 800f6fe:	d00b      	beq.n	800f718 <_vfiprintf_r+0xc0>
 800f700:	465b      	mov	r3, fp
 800f702:	4622      	mov	r2, r4
 800f704:	4629      	mov	r1, r5
 800f706:	4630      	mov	r0, r6
 800f708:	f7ff ff93 	bl	800f632 <__sfputs_r>
 800f70c:	3001      	adds	r0, #1
 800f70e:	f000 80aa 	beq.w	800f866 <_vfiprintf_r+0x20e>
 800f712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f714:	445a      	add	r2, fp
 800f716:	9209      	str	r2, [sp, #36]	; 0x24
 800f718:	f89a 3000 	ldrb.w	r3, [sl]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	f000 80a2 	beq.w	800f866 <_vfiprintf_r+0x20e>
 800f722:	2300      	movs	r3, #0
 800f724:	f04f 32ff 	mov.w	r2, #4294967295
 800f728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f72c:	f10a 0a01 	add.w	sl, sl, #1
 800f730:	9304      	str	r3, [sp, #16]
 800f732:	9307      	str	r3, [sp, #28]
 800f734:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f738:	931a      	str	r3, [sp, #104]	; 0x68
 800f73a:	4654      	mov	r4, sl
 800f73c:	2205      	movs	r2, #5
 800f73e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f742:	4858      	ldr	r0, [pc, #352]	; (800f8a4 <_vfiprintf_r+0x24c>)
 800f744:	f000 fd42 	bl	80101cc <memchr>
 800f748:	9a04      	ldr	r2, [sp, #16]
 800f74a:	b9d8      	cbnz	r0, 800f784 <_vfiprintf_r+0x12c>
 800f74c:	06d1      	lsls	r1, r2, #27
 800f74e:	bf44      	itt	mi
 800f750:	2320      	movmi	r3, #32
 800f752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f756:	0713      	lsls	r3, r2, #28
 800f758:	bf44      	itt	mi
 800f75a:	232b      	movmi	r3, #43	; 0x2b
 800f75c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f760:	f89a 3000 	ldrb.w	r3, [sl]
 800f764:	2b2a      	cmp	r3, #42	; 0x2a
 800f766:	d015      	beq.n	800f794 <_vfiprintf_r+0x13c>
 800f768:	4654      	mov	r4, sl
 800f76a:	2000      	movs	r0, #0
 800f76c:	f04f 0c0a 	mov.w	ip, #10
 800f770:	9a07      	ldr	r2, [sp, #28]
 800f772:	4621      	mov	r1, r4
 800f774:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f778:	3b30      	subs	r3, #48	; 0x30
 800f77a:	2b09      	cmp	r3, #9
 800f77c:	d94e      	bls.n	800f81c <_vfiprintf_r+0x1c4>
 800f77e:	b1b0      	cbz	r0, 800f7ae <_vfiprintf_r+0x156>
 800f780:	9207      	str	r2, [sp, #28]
 800f782:	e014      	b.n	800f7ae <_vfiprintf_r+0x156>
 800f784:	eba0 0308 	sub.w	r3, r0, r8
 800f788:	fa09 f303 	lsl.w	r3, r9, r3
 800f78c:	4313      	orrs	r3, r2
 800f78e:	46a2      	mov	sl, r4
 800f790:	9304      	str	r3, [sp, #16]
 800f792:	e7d2      	b.n	800f73a <_vfiprintf_r+0xe2>
 800f794:	9b03      	ldr	r3, [sp, #12]
 800f796:	1d19      	adds	r1, r3, #4
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	9103      	str	r1, [sp, #12]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	bfbb      	ittet	lt
 800f7a0:	425b      	neglt	r3, r3
 800f7a2:	f042 0202 	orrlt.w	r2, r2, #2
 800f7a6:	9307      	strge	r3, [sp, #28]
 800f7a8:	9307      	strlt	r3, [sp, #28]
 800f7aa:	bfb8      	it	lt
 800f7ac:	9204      	strlt	r2, [sp, #16]
 800f7ae:	7823      	ldrb	r3, [r4, #0]
 800f7b0:	2b2e      	cmp	r3, #46	; 0x2e
 800f7b2:	d10c      	bne.n	800f7ce <_vfiprintf_r+0x176>
 800f7b4:	7863      	ldrb	r3, [r4, #1]
 800f7b6:	2b2a      	cmp	r3, #42	; 0x2a
 800f7b8:	d135      	bne.n	800f826 <_vfiprintf_r+0x1ce>
 800f7ba:	9b03      	ldr	r3, [sp, #12]
 800f7bc:	3402      	adds	r4, #2
 800f7be:	1d1a      	adds	r2, r3, #4
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	9203      	str	r2, [sp, #12]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	bfb8      	it	lt
 800f7c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800f7cc:	9305      	str	r3, [sp, #20]
 800f7ce:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800f8a8 <_vfiprintf_r+0x250>
 800f7d2:	2203      	movs	r2, #3
 800f7d4:	4650      	mov	r0, sl
 800f7d6:	7821      	ldrb	r1, [r4, #0]
 800f7d8:	f000 fcf8 	bl	80101cc <memchr>
 800f7dc:	b140      	cbz	r0, 800f7f0 <_vfiprintf_r+0x198>
 800f7de:	2340      	movs	r3, #64	; 0x40
 800f7e0:	eba0 000a 	sub.w	r0, r0, sl
 800f7e4:	fa03 f000 	lsl.w	r0, r3, r0
 800f7e8:	9b04      	ldr	r3, [sp, #16]
 800f7ea:	3401      	adds	r4, #1
 800f7ec:	4303      	orrs	r3, r0
 800f7ee:	9304      	str	r3, [sp, #16]
 800f7f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7f4:	2206      	movs	r2, #6
 800f7f6:	482d      	ldr	r0, [pc, #180]	; (800f8ac <_vfiprintf_r+0x254>)
 800f7f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7fc:	f000 fce6 	bl	80101cc <memchr>
 800f800:	2800      	cmp	r0, #0
 800f802:	d03f      	beq.n	800f884 <_vfiprintf_r+0x22c>
 800f804:	4b2a      	ldr	r3, [pc, #168]	; (800f8b0 <_vfiprintf_r+0x258>)
 800f806:	bb1b      	cbnz	r3, 800f850 <_vfiprintf_r+0x1f8>
 800f808:	9b03      	ldr	r3, [sp, #12]
 800f80a:	3307      	adds	r3, #7
 800f80c:	f023 0307 	bic.w	r3, r3, #7
 800f810:	3308      	adds	r3, #8
 800f812:	9303      	str	r3, [sp, #12]
 800f814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f816:	443b      	add	r3, r7
 800f818:	9309      	str	r3, [sp, #36]	; 0x24
 800f81a:	e767      	b.n	800f6ec <_vfiprintf_r+0x94>
 800f81c:	460c      	mov	r4, r1
 800f81e:	2001      	movs	r0, #1
 800f820:	fb0c 3202 	mla	r2, ip, r2, r3
 800f824:	e7a5      	b.n	800f772 <_vfiprintf_r+0x11a>
 800f826:	2300      	movs	r3, #0
 800f828:	f04f 0c0a 	mov.w	ip, #10
 800f82c:	4619      	mov	r1, r3
 800f82e:	3401      	adds	r4, #1
 800f830:	9305      	str	r3, [sp, #20]
 800f832:	4620      	mov	r0, r4
 800f834:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f838:	3a30      	subs	r2, #48	; 0x30
 800f83a:	2a09      	cmp	r2, #9
 800f83c:	d903      	bls.n	800f846 <_vfiprintf_r+0x1ee>
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d0c5      	beq.n	800f7ce <_vfiprintf_r+0x176>
 800f842:	9105      	str	r1, [sp, #20]
 800f844:	e7c3      	b.n	800f7ce <_vfiprintf_r+0x176>
 800f846:	4604      	mov	r4, r0
 800f848:	2301      	movs	r3, #1
 800f84a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f84e:	e7f0      	b.n	800f832 <_vfiprintf_r+0x1da>
 800f850:	ab03      	add	r3, sp, #12
 800f852:	9300      	str	r3, [sp, #0]
 800f854:	462a      	mov	r2, r5
 800f856:	4630      	mov	r0, r6
 800f858:	4b16      	ldr	r3, [pc, #88]	; (800f8b4 <_vfiprintf_r+0x25c>)
 800f85a:	a904      	add	r1, sp, #16
 800f85c:	f3af 8000 	nop.w
 800f860:	4607      	mov	r7, r0
 800f862:	1c78      	adds	r0, r7, #1
 800f864:	d1d6      	bne.n	800f814 <_vfiprintf_r+0x1bc>
 800f866:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f868:	07d9      	lsls	r1, r3, #31
 800f86a:	d405      	bmi.n	800f878 <_vfiprintf_r+0x220>
 800f86c:	89ab      	ldrh	r3, [r5, #12]
 800f86e:	059a      	lsls	r2, r3, #22
 800f870:	d402      	bmi.n	800f878 <_vfiprintf_r+0x220>
 800f872:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f874:	f000 fc43 	bl	80100fe <__retarget_lock_release_recursive>
 800f878:	89ab      	ldrh	r3, [r5, #12]
 800f87a:	065b      	lsls	r3, r3, #25
 800f87c:	f53f af12 	bmi.w	800f6a4 <_vfiprintf_r+0x4c>
 800f880:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f882:	e711      	b.n	800f6a8 <_vfiprintf_r+0x50>
 800f884:	ab03      	add	r3, sp, #12
 800f886:	9300      	str	r3, [sp, #0]
 800f888:	462a      	mov	r2, r5
 800f88a:	4630      	mov	r0, r6
 800f88c:	4b09      	ldr	r3, [pc, #36]	; (800f8b4 <_vfiprintf_r+0x25c>)
 800f88e:	a904      	add	r1, sp, #16
 800f890:	f000 f882 	bl	800f998 <_printf_i>
 800f894:	e7e4      	b.n	800f860 <_vfiprintf_r+0x208>
 800f896:	bf00      	nop
 800f898:	08010918 	.word	0x08010918
 800f89c:	08010938 	.word	0x08010938
 800f8a0:	080108f8 	.word	0x080108f8
 800f8a4:	080108c5 	.word	0x080108c5
 800f8a8:	080108cb 	.word	0x080108cb
 800f8ac:	080108cf 	.word	0x080108cf
 800f8b0:	00000000 	.word	0x00000000
 800f8b4:	0800f633 	.word	0x0800f633

0800f8b8 <_printf_common>:
 800f8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8bc:	4616      	mov	r6, r2
 800f8be:	4699      	mov	r9, r3
 800f8c0:	688a      	ldr	r2, [r1, #8]
 800f8c2:	690b      	ldr	r3, [r1, #16]
 800f8c4:	4607      	mov	r7, r0
 800f8c6:	4293      	cmp	r3, r2
 800f8c8:	bfb8      	it	lt
 800f8ca:	4613      	movlt	r3, r2
 800f8cc:	6033      	str	r3, [r6, #0]
 800f8ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f8d2:	460c      	mov	r4, r1
 800f8d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f8d8:	b10a      	cbz	r2, 800f8de <_printf_common+0x26>
 800f8da:	3301      	adds	r3, #1
 800f8dc:	6033      	str	r3, [r6, #0]
 800f8de:	6823      	ldr	r3, [r4, #0]
 800f8e0:	0699      	lsls	r1, r3, #26
 800f8e2:	bf42      	ittt	mi
 800f8e4:	6833      	ldrmi	r3, [r6, #0]
 800f8e6:	3302      	addmi	r3, #2
 800f8e8:	6033      	strmi	r3, [r6, #0]
 800f8ea:	6825      	ldr	r5, [r4, #0]
 800f8ec:	f015 0506 	ands.w	r5, r5, #6
 800f8f0:	d106      	bne.n	800f900 <_printf_common+0x48>
 800f8f2:	f104 0a19 	add.w	sl, r4, #25
 800f8f6:	68e3      	ldr	r3, [r4, #12]
 800f8f8:	6832      	ldr	r2, [r6, #0]
 800f8fa:	1a9b      	subs	r3, r3, r2
 800f8fc:	42ab      	cmp	r3, r5
 800f8fe:	dc28      	bgt.n	800f952 <_printf_common+0x9a>
 800f900:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f904:	1e13      	subs	r3, r2, #0
 800f906:	6822      	ldr	r2, [r4, #0]
 800f908:	bf18      	it	ne
 800f90a:	2301      	movne	r3, #1
 800f90c:	0692      	lsls	r2, r2, #26
 800f90e:	d42d      	bmi.n	800f96c <_printf_common+0xb4>
 800f910:	4649      	mov	r1, r9
 800f912:	4638      	mov	r0, r7
 800f914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f918:	47c0      	blx	r8
 800f91a:	3001      	adds	r0, #1
 800f91c:	d020      	beq.n	800f960 <_printf_common+0xa8>
 800f91e:	6823      	ldr	r3, [r4, #0]
 800f920:	68e5      	ldr	r5, [r4, #12]
 800f922:	f003 0306 	and.w	r3, r3, #6
 800f926:	2b04      	cmp	r3, #4
 800f928:	bf18      	it	ne
 800f92a:	2500      	movne	r5, #0
 800f92c:	6832      	ldr	r2, [r6, #0]
 800f92e:	f04f 0600 	mov.w	r6, #0
 800f932:	68a3      	ldr	r3, [r4, #8]
 800f934:	bf08      	it	eq
 800f936:	1aad      	subeq	r5, r5, r2
 800f938:	6922      	ldr	r2, [r4, #16]
 800f93a:	bf08      	it	eq
 800f93c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f940:	4293      	cmp	r3, r2
 800f942:	bfc4      	itt	gt
 800f944:	1a9b      	subgt	r3, r3, r2
 800f946:	18ed      	addgt	r5, r5, r3
 800f948:	341a      	adds	r4, #26
 800f94a:	42b5      	cmp	r5, r6
 800f94c:	d11a      	bne.n	800f984 <_printf_common+0xcc>
 800f94e:	2000      	movs	r0, #0
 800f950:	e008      	b.n	800f964 <_printf_common+0xac>
 800f952:	2301      	movs	r3, #1
 800f954:	4652      	mov	r2, sl
 800f956:	4649      	mov	r1, r9
 800f958:	4638      	mov	r0, r7
 800f95a:	47c0      	blx	r8
 800f95c:	3001      	adds	r0, #1
 800f95e:	d103      	bne.n	800f968 <_printf_common+0xb0>
 800f960:	f04f 30ff 	mov.w	r0, #4294967295
 800f964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f968:	3501      	adds	r5, #1
 800f96a:	e7c4      	b.n	800f8f6 <_printf_common+0x3e>
 800f96c:	2030      	movs	r0, #48	; 0x30
 800f96e:	18e1      	adds	r1, r4, r3
 800f970:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f974:	1c5a      	adds	r2, r3, #1
 800f976:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f97a:	4422      	add	r2, r4
 800f97c:	3302      	adds	r3, #2
 800f97e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f982:	e7c5      	b.n	800f910 <_printf_common+0x58>
 800f984:	2301      	movs	r3, #1
 800f986:	4622      	mov	r2, r4
 800f988:	4649      	mov	r1, r9
 800f98a:	4638      	mov	r0, r7
 800f98c:	47c0      	blx	r8
 800f98e:	3001      	adds	r0, #1
 800f990:	d0e6      	beq.n	800f960 <_printf_common+0xa8>
 800f992:	3601      	adds	r6, #1
 800f994:	e7d9      	b.n	800f94a <_printf_common+0x92>
	...

0800f998 <_printf_i>:
 800f998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f99c:	7e0f      	ldrb	r7, [r1, #24]
 800f99e:	4691      	mov	r9, r2
 800f9a0:	2f78      	cmp	r7, #120	; 0x78
 800f9a2:	4680      	mov	r8, r0
 800f9a4:	460c      	mov	r4, r1
 800f9a6:	469a      	mov	sl, r3
 800f9a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f9aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f9ae:	d807      	bhi.n	800f9c0 <_printf_i+0x28>
 800f9b0:	2f62      	cmp	r7, #98	; 0x62
 800f9b2:	d80a      	bhi.n	800f9ca <_printf_i+0x32>
 800f9b4:	2f00      	cmp	r7, #0
 800f9b6:	f000 80d9 	beq.w	800fb6c <_printf_i+0x1d4>
 800f9ba:	2f58      	cmp	r7, #88	; 0x58
 800f9bc:	f000 80a4 	beq.w	800fb08 <_printf_i+0x170>
 800f9c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f9c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f9c8:	e03a      	b.n	800fa40 <_printf_i+0xa8>
 800f9ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f9ce:	2b15      	cmp	r3, #21
 800f9d0:	d8f6      	bhi.n	800f9c0 <_printf_i+0x28>
 800f9d2:	a101      	add	r1, pc, #4	; (adr r1, 800f9d8 <_printf_i+0x40>)
 800f9d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f9d8:	0800fa31 	.word	0x0800fa31
 800f9dc:	0800fa45 	.word	0x0800fa45
 800f9e0:	0800f9c1 	.word	0x0800f9c1
 800f9e4:	0800f9c1 	.word	0x0800f9c1
 800f9e8:	0800f9c1 	.word	0x0800f9c1
 800f9ec:	0800f9c1 	.word	0x0800f9c1
 800f9f0:	0800fa45 	.word	0x0800fa45
 800f9f4:	0800f9c1 	.word	0x0800f9c1
 800f9f8:	0800f9c1 	.word	0x0800f9c1
 800f9fc:	0800f9c1 	.word	0x0800f9c1
 800fa00:	0800f9c1 	.word	0x0800f9c1
 800fa04:	0800fb53 	.word	0x0800fb53
 800fa08:	0800fa75 	.word	0x0800fa75
 800fa0c:	0800fb35 	.word	0x0800fb35
 800fa10:	0800f9c1 	.word	0x0800f9c1
 800fa14:	0800f9c1 	.word	0x0800f9c1
 800fa18:	0800fb75 	.word	0x0800fb75
 800fa1c:	0800f9c1 	.word	0x0800f9c1
 800fa20:	0800fa75 	.word	0x0800fa75
 800fa24:	0800f9c1 	.word	0x0800f9c1
 800fa28:	0800f9c1 	.word	0x0800f9c1
 800fa2c:	0800fb3d 	.word	0x0800fb3d
 800fa30:	682b      	ldr	r3, [r5, #0]
 800fa32:	1d1a      	adds	r2, r3, #4
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	602a      	str	r2, [r5, #0]
 800fa38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fa40:	2301      	movs	r3, #1
 800fa42:	e0a4      	b.n	800fb8e <_printf_i+0x1f6>
 800fa44:	6820      	ldr	r0, [r4, #0]
 800fa46:	6829      	ldr	r1, [r5, #0]
 800fa48:	0606      	lsls	r6, r0, #24
 800fa4a:	f101 0304 	add.w	r3, r1, #4
 800fa4e:	d50a      	bpl.n	800fa66 <_printf_i+0xce>
 800fa50:	680e      	ldr	r6, [r1, #0]
 800fa52:	602b      	str	r3, [r5, #0]
 800fa54:	2e00      	cmp	r6, #0
 800fa56:	da03      	bge.n	800fa60 <_printf_i+0xc8>
 800fa58:	232d      	movs	r3, #45	; 0x2d
 800fa5a:	4276      	negs	r6, r6
 800fa5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa60:	230a      	movs	r3, #10
 800fa62:	485e      	ldr	r0, [pc, #376]	; (800fbdc <_printf_i+0x244>)
 800fa64:	e019      	b.n	800fa9a <_printf_i+0x102>
 800fa66:	680e      	ldr	r6, [r1, #0]
 800fa68:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fa6c:	602b      	str	r3, [r5, #0]
 800fa6e:	bf18      	it	ne
 800fa70:	b236      	sxthne	r6, r6
 800fa72:	e7ef      	b.n	800fa54 <_printf_i+0xbc>
 800fa74:	682b      	ldr	r3, [r5, #0]
 800fa76:	6820      	ldr	r0, [r4, #0]
 800fa78:	1d19      	adds	r1, r3, #4
 800fa7a:	6029      	str	r1, [r5, #0]
 800fa7c:	0601      	lsls	r1, r0, #24
 800fa7e:	d501      	bpl.n	800fa84 <_printf_i+0xec>
 800fa80:	681e      	ldr	r6, [r3, #0]
 800fa82:	e002      	b.n	800fa8a <_printf_i+0xf2>
 800fa84:	0646      	lsls	r6, r0, #25
 800fa86:	d5fb      	bpl.n	800fa80 <_printf_i+0xe8>
 800fa88:	881e      	ldrh	r6, [r3, #0]
 800fa8a:	2f6f      	cmp	r7, #111	; 0x6f
 800fa8c:	bf0c      	ite	eq
 800fa8e:	2308      	moveq	r3, #8
 800fa90:	230a      	movne	r3, #10
 800fa92:	4852      	ldr	r0, [pc, #328]	; (800fbdc <_printf_i+0x244>)
 800fa94:	2100      	movs	r1, #0
 800fa96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fa9a:	6865      	ldr	r5, [r4, #4]
 800fa9c:	2d00      	cmp	r5, #0
 800fa9e:	bfa8      	it	ge
 800faa0:	6821      	ldrge	r1, [r4, #0]
 800faa2:	60a5      	str	r5, [r4, #8]
 800faa4:	bfa4      	itt	ge
 800faa6:	f021 0104 	bicge.w	r1, r1, #4
 800faaa:	6021      	strge	r1, [r4, #0]
 800faac:	b90e      	cbnz	r6, 800fab2 <_printf_i+0x11a>
 800faae:	2d00      	cmp	r5, #0
 800fab0:	d04d      	beq.n	800fb4e <_printf_i+0x1b6>
 800fab2:	4615      	mov	r5, r2
 800fab4:	fbb6 f1f3 	udiv	r1, r6, r3
 800fab8:	fb03 6711 	mls	r7, r3, r1, r6
 800fabc:	5dc7      	ldrb	r7, [r0, r7]
 800fabe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fac2:	4637      	mov	r7, r6
 800fac4:	42bb      	cmp	r3, r7
 800fac6:	460e      	mov	r6, r1
 800fac8:	d9f4      	bls.n	800fab4 <_printf_i+0x11c>
 800faca:	2b08      	cmp	r3, #8
 800facc:	d10b      	bne.n	800fae6 <_printf_i+0x14e>
 800face:	6823      	ldr	r3, [r4, #0]
 800fad0:	07de      	lsls	r6, r3, #31
 800fad2:	d508      	bpl.n	800fae6 <_printf_i+0x14e>
 800fad4:	6923      	ldr	r3, [r4, #16]
 800fad6:	6861      	ldr	r1, [r4, #4]
 800fad8:	4299      	cmp	r1, r3
 800fada:	bfde      	ittt	le
 800fadc:	2330      	movle	r3, #48	; 0x30
 800fade:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fae2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fae6:	1b52      	subs	r2, r2, r5
 800fae8:	6122      	str	r2, [r4, #16]
 800faea:	464b      	mov	r3, r9
 800faec:	4621      	mov	r1, r4
 800faee:	4640      	mov	r0, r8
 800faf0:	f8cd a000 	str.w	sl, [sp]
 800faf4:	aa03      	add	r2, sp, #12
 800faf6:	f7ff fedf 	bl	800f8b8 <_printf_common>
 800fafa:	3001      	adds	r0, #1
 800fafc:	d14c      	bne.n	800fb98 <_printf_i+0x200>
 800fafe:	f04f 30ff 	mov.w	r0, #4294967295
 800fb02:	b004      	add	sp, #16
 800fb04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb08:	4834      	ldr	r0, [pc, #208]	; (800fbdc <_printf_i+0x244>)
 800fb0a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fb0e:	6829      	ldr	r1, [r5, #0]
 800fb10:	6823      	ldr	r3, [r4, #0]
 800fb12:	f851 6b04 	ldr.w	r6, [r1], #4
 800fb16:	6029      	str	r1, [r5, #0]
 800fb18:	061d      	lsls	r5, r3, #24
 800fb1a:	d514      	bpl.n	800fb46 <_printf_i+0x1ae>
 800fb1c:	07df      	lsls	r7, r3, #31
 800fb1e:	bf44      	itt	mi
 800fb20:	f043 0320 	orrmi.w	r3, r3, #32
 800fb24:	6023      	strmi	r3, [r4, #0]
 800fb26:	b91e      	cbnz	r6, 800fb30 <_printf_i+0x198>
 800fb28:	6823      	ldr	r3, [r4, #0]
 800fb2a:	f023 0320 	bic.w	r3, r3, #32
 800fb2e:	6023      	str	r3, [r4, #0]
 800fb30:	2310      	movs	r3, #16
 800fb32:	e7af      	b.n	800fa94 <_printf_i+0xfc>
 800fb34:	6823      	ldr	r3, [r4, #0]
 800fb36:	f043 0320 	orr.w	r3, r3, #32
 800fb3a:	6023      	str	r3, [r4, #0]
 800fb3c:	2378      	movs	r3, #120	; 0x78
 800fb3e:	4828      	ldr	r0, [pc, #160]	; (800fbe0 <_printf_i+0x248>)
 800fb40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fb44:	e7e3      	b.n	800fb0e <_printf_i+0x176>
 800fb46:	0659      	lsls	r1, r3, #25
 800fb48:	bf48      	it	mi
 800fb4a:	b2b6      	uxthmi	r6, r6
 800fb4c:	e7e6      	b.n	800fb1c <_printf_i+0x184>
 800fb4e:	4615      	mov	r5, r2
 800fb50:	e7bb      	b.n	800faca <_printf_i+0x132>
 800fb52:	682b      	ldr	r3, [r5, #0]
 800fb54:	6826      	ldr	r6, [r4, #0]
 800fb56:	1d18      	adds	r0, r3, #4
 800fb58:	6961      	ldr	r1, [r4, #20]
 800fb5a:	6028      	str	r0, [r5, #0]
 800fb5c:	0635      	lsls	r5, r6, #24
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	d501      	bpl.n	800fb66 <_printf_i+0x1ce>
 800fb62:	6019      	str	r1, [r3, #0]
 800fb64:	e002      	b.n	800fb6c <_printf_i+0x1d4>
 800fb66:	0670      	lsls	r0, r6, #25
 800fb68:	d5fb      	bpl.n	800fb62 <_printf_i+0x1ca>
 800fb6a:	8019      	strh	r1, [r3, #0]
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	4615      	mov	r5, r2
 800fb70:	6123      	str	r3, [r4, #16]
 800fb72:	e7ba      	b.n	800faea <_printf_i+0x152>
 800fb74:	682b      	ldr	r3, [r5, #0]
 800fb76:	2100      	movs	r1, #0
 800fb78:	1d1a      	adds	r2, r3, #4
 800fb7a:	602a      	str	r2, [r5, #0]
 800fb7c:	681d      	ldr	r5, [r3, #0]
 800fb7e:	6862      	ldr	r2, [r4, #4]
 800fb80:	4628      	mov	r0, r5
 800fb82:	f000 fb23 	bl	80101cc <memchr>
 800fb86:	b108      	cbz	r0, 800fb8c <_printf_i+0x1f4>
 800fb88:	1b40      	subs	r0, r0, r5
 800fb8a:	6060      	str	r0, [r4, #4]
 800fb8c:	6863      	ldr	r3, [r4, #4]
 800fb8e:	6123      	str	r3, [r4, #16]
 800fb90:	2300      	movs	r3, #0
 800fb92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb96:	e7a8      	b.n	800faea <_printf_i+0x152>
 800fb98:	462a      	mov	r2, r5
 800fb9a:	4649      	mov	r1, r9
 800fb9c:	4640      	mov	r0, r8
 800fb9e:	6923      	ldr	r3, [r4, #16]
 800fba0:	47d0      	blx	sl
 800fba2:	3001      	adds	r0, #1
 800fba4:	d0ab      	beq.n	800fafe <_printf_i+0x166>
 800fba6:	6823      	ldr	r3, [r4, #0]
 800fba8:	079b      	lsls	r3, r3, #30
 800fbaa:	d413      	bmi.n	800fbd4 <_printf_i+0x23c>
 800fbac:	68e0      	ldr	r0, [r4, #12]
 800fbae:	9b03      	ldr	r3, [sp, #12]
 800fbb0:	4298      	cmp	r0, r3
 800fbb2:	bfb8      	it	lt
 800fbb4:	4618      	movlt	r0, r3
 800fbb6:	e7a4      	b.n	800fb02 <_printf_i+0x16a>
 800fbb8:	2301      	movs	r3, #1
 800fbba:	4632      	mov	r2, r6
 800fbbc:	4649      	mov	r1, r9
 800fbbe:	4640      	mov	r0, r8
 800fbc0:	47d0      	blx	sl
 800fbc2:	3001      	adds	r0, #1
 800fbc4:	d09b      	beq.n	800fafe <_printf_i+0x166>
 800fbc6:	3501      	adds	r5, #1
 800fbc8:	68e3      	ldr	r3, [r4, #12]
 800fbca:	9903      	ldr	r1, [sp, #12]
 800fbcc:	1a5b      	subs	r3, r3, r1
 800fbce:	42ab      	cmp	r3, r5
 800fbd0:	dcf2      	bgt.n	800fbb8 <_printf_i+0x220>
 800fbd2:	e7eb      	b.n	800fbac <_printf_i+0x214>
 800fbd4:	2500      	movs	r5, #0
 800fbd6:	f104 0619 	add.w	r6, r4, #25
 800fbda:	e7f5      	b.n	800fbc8 <_printf_i+0x230>
 800fbdc:	080108d6 	.word	0x080108d6
 800fbe0:	080108e7 	.word	0x080108e7

0800fbe4 <_sbrk_r>:
 800fbe4:	b538      	push	{r3, r4, r5, lr}
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	4d05      	ldr	r5, [pc, #20]	; (800fc00 <_sbrk_r+0x1c>)
 800fbea:	4604      	mov	r4, r0
 800fbec:	4608      	mov	r0, r1
 800fbee:	602b      	str	r3, [r5, #0]
 800fbf0:	f7f3 f97c 	bl	8002eec <_sbrk>
 800fbf4:	1c43      	adds	r3, r0, #1
 800fbf6:	d102      	bne.n	800fbfe <_sbrk_r+0x1a>
 800fbf8:	682b      	ldr	r3, [r5, #0]
 800fbfa:	b103      	cbz	r3, 800fbfe <_sbrk_r+0x1a>
 800fbfc:	6023      	str	r3, [r4, #0]
 800fbfe:	bd38      	pop	{r3, r4, r5, pc}
 800fc00:	20002ba8 	.word	0x20002ba8

0800fc04 <__swbuf_r>:
 800fc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc06:	460e      	mov	r6, r1
 800fc08:	4614      	mov	r4, r2
 800fc0a:	4605      	mov	r5, r0
 800fc0c:	b118      	cbz	r0, 800fc16 <__swbuf_r+0x12>
 800fc0e:	6983      	ldr	r3, [r0, #24]
 800fc10:	b90b      	cbnz	r3, 800fc16 <__swbuf_r+0x12>
 800fc12:	f000 f9d5 	bl	800ffc0 <__sinit>
 800fc16:	4b21      	ldr	r3, [pc, #132]	; (800fc9c <__swbuf_r+0x98>)
 800fc18:	429c      	cmp	r4, r3
 800fc1a:	d12b      	bne.n	800fc74 <__swbuf_r+0x70>
 800fc1c:	686c      	ldr	r4, [r5, #4]
 800fc1e:	69a3      	ldr	r3, [r4, #24]
 800fc20:	60a3      	str	r3, [r4, #8]
 800fc22:	89a3      	ldrh	r3, [r4, #12]
 800fc24:	071a      	lsls	r2, r3, #28
 800fc26:	d52f      	bpl.n	800fc88 <__swbuf_r+0x84>
 800fc28:	6923      	ldr	r3, [r4, #16]
 800fc2a:	b36b      	cbz	r3, 800fc88 <__swbuf_r+0x84>
 800fc2c:	6923      	ldr	r3, [r4, #16]
 800fc2e:	6820      	ldr	r0, [r4, #0]
 800fc30:	b2f6      	uxtb	r6, r6
 800fc32:	1ac0      	subs	r0, r0, r3
 800fc34:	6963      	ldr	r3, [r4, #20]
 800fc36:	4637      	mov	r7, r6
 800fc38:	4283      	cmp	r3, r0
 800fc3a:	dc04      	bgt.n	800fc46 <__swbuf_r+0x42>
 800fc3c:	4621      	mov	r1, r4
 800fc3e:	4628      	mov	r0, r5
 800fc40:	f000 f92a 	bl	800fe98 <_fflush_r>
 800fc44:	bb30      	cbnz	r0, 800fc94 <__swbuf_r+0x90>
 800fc46:	68a3      	ldr	r3, [r4, #8]
 800fc48:	3001      	adds	r0, #1
 800fc4a:	3b01      	subs	r3, #1
 800fc4c:	60a3      	str	r3, [r4, #8]
 800fc4e:	6823      	ldr	r3, [r4, #0]
 800fc50:	1c5a      	adds	r2, r3, #1
 800fc52:	6022      	str	r2, [r4, #0]
 800fc54:	701e      	strb	r6, [r3, #0]
 800fc56:	6963      	ldr	r3, [r4, #20]
 800fc58:	4283      	cmp	r3, r0
 800fc5a:	d004      	beq.n	800fc66 <__swbuf_r+0x62>
 800fc5c:	89a3      	ldrh	r3, [r4, #12]
 800fc5e:	07db      	lsls	r3, r3, #31
 800fc60:	d506      	bpl.n	800fc70 <__swbuf_r+0x6c>
 800fc62:	2e0a      	cmp	r6, #10
 800fc64:	d104      	bne.n	800fc70 <__swbuf_r+0x6c>
 800fc66:	4621      	mov	r1, r4
 800fc68:	4628      	mov	r0, r5
 800fc6a:	f000 f915 	bl	800fe98 <_fflush_r>
 800fc6e:	b988      	cbnz	r0, 800fc94 <__swbuf_r+0x90>
 800fc70:	4638      	mov	r0, r7
 800fc72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc74:	4b0a      	ldr	r3, [pc, #40]	; (800fca0 <__swbuf_r+0x9c>)
 800fc76:	429c      	cmp	r4, r3
 800fc78:	d101      	bne.n	800fc7e <__swbuf_r+0x7a>
 800fc7a:	68ac      	ldr	r4, [r5, #8]
 800fc7c:	e7cf      	b.n	800fc1e <__swbuf_r+0x1a>
 800fc7e:	4b09      	ldr	r3, [pc, #36]	; (800fca4 <__swbuf_r+0xa0>)
 800fc80:	429c      	cmp	r4, r3
 800fc82:	bf08      	it	eq
 800fc84:	68ec      	ldreq	r4, [r5, #12]
 800fc86:	e7ca      	b.n	800fc1e <__swbuf_r+0x1a>
 800fc88:	4621      	mov	r1, r4
 800fc8a:	4628      	mov	r0, r5
 800fc8c:	f000 f80c 	bl	800fca8 <__swsetup_r>
 800fc90:	2800      	cmp	r0, #0
 800fc92:	d0cb      	beq.n	800fc2c <__swbuf_r+0x28>
 800fc94:	f04f 37ff 	mov.w	r7, #4294967295
 800fc98:	e7ea      	b.n	800fc70 <__swbuf_r+0x6c>
 800fc9a:	bf00      	nop
 800fc9c:	08010918 	.word	0x08010918
 800fca0:	08010938 	.word	0x08010938
 800fca4:	080108f8 	.word	0x080108f8

0800fca8 <__swsetup_r>:
 800fca8:	4b32      	ldr	r3, [pc, #200]	; (800fd74 <__swsetup_r+0xcc>)
 800fcaa:	b570      	push	{r4, r5, r6, lr}
 800fcac:	681d      	ldr	r5, [r3, #0]
 800fcae:	4606      	mov	r6, r0
 800fcb0:	460c      	mov	r4, r1
 800fcb2:	b125      	cbz	r5, 800fcbe <__swsetup_r+0x16>
 800fcb4:	69ab      	ldr	r3, [r5, #24]
 800fcb6:	b913      	cbnz	r3, 800fcbe <__swsetup_r+0x16>
 800fcb8:	4628      	mov	r0, r5
 800fcba:	f000 f981 	bl	800ffc0 <__sinit>
 800fcbe:	4b2e      	ldr	r3, [pc, #184]	; (800fd78 <__swsetup_r+0xd0>)
 800fcc0:	429c      	cmp	r4, r3
 800fcc2:	d10f      	bne.n	800fce4 <__swsetup_r+0x3c>
 800fcc4:	686c      	ldr	r4, [r5, #4]
 800fcc6:	89a3      	ldrh	r3, [r4, #12]
 800fcc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fccc:	0719      	lsls	r1, r3, #28
 800fcce:	d42c      	bmi.n	800fd2a <__swsetup_r+0x82>
 800fcd0:	06dd      	lsls	r5, r3, #27
 800fcd2:	d411      	bmi.n	800fcf8 <__swsetup_r+0x50>
 800fcd4:	2309      	movs	r3, #9
 800fcd6:	6033      	str	r3, [r6, #0]
 800fcd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fcdc:	f04f 30ff 	mov.w	r0, #4294967295
 800fce0:	81a3      	strh	r3, [r4, #12]
 800fce2:	e03e      	b.n	800fd62 <__swsetup_r+0xba>
 800fce4:	4b25      	ldr	r3, [pc, #148]	; (800fd7c <__swsetup_r+0xd4>)
 800fce6:	429c      	cmp	r4, r3
 800fce8:	d101      	bne.n	800fcee <__swsetup_r+0x46>
 800fcea:	68ac      	ldr	r4, [r5, #8]
 800fcec:	e7eb      	b.n	800fcc6 <__swsetup_r+0x1e>
 800fcee:	4b24      	ldr	r3, [pc, #144]	; (800fd80 <__swsetup_r+0xd8>)
 800fcf0:	429c      	cmp	r4, r3
 800fcf2:	bf08      	it	eq
 800fcf4:	68ec      	ldreq	r4, [r5, #12]
 800fcf6:	e7e6      	b.n	800fcc6 <__swsetup_r+0x1e>
 800fcf8:	0758      	lsls	r0, r3, #29
 800fcfa:	d512      	bpl.n	800fd22 <__swsetup_r+0x7a>
 800fcfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fcfe:	b141      	cbz	r1, 800fd12 <__swsetup_r+0x6a>
 800fd00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd04:	4299      	cmp	r1, r3
 800fd06:	d002      	beq.n	800fd0e <__swsetup_r+0x66>
 800fd08:	4630      	mov	r0, r6
 800fd0a:	f7ff fba1 	bl	800f450 <_free_r>
 800fd0e:	2300      	movs	r3, #0
 800fd10:	6363      	str	r3, [r4, #52]	; 0x34
 800fd12:	89a3      	ldrh	r3, [r4, #12]
 800fd14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fd18:	81a3      	strh	r3, [r4, #12]
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	6063      	str	r3, [r4, #4]
 800fd1e:	6923      	ldr	r3, [r4, #16]
 800fd20:	6023      	str	r3, [r4, #0]
 800fd22:	89a3      	ldrh	r3, [r4, #12]
 800fd24:	f043 0308 	orr.w	r3, r3, #8
 800fd28:	81a3      	strh	r3, [r4, #12]
 800fd2a:	6923      	ldr	r3, [r4, #16]
 800fd2c:	b94b      	cbnz	r3, 800fd42 <__swsetup_r+0x9a>
 800fd2e:	89a3      	ldrh	r3, [r4, #12]
 800fd30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fd34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd38:	d003      	beq.n	800fd42 <__swsetup_r+0x9a>
 800fd3a:	4621      	mov	r1, r4
 800fd3c:	4630      	mov	r0, r6
 800fd3e:	f000 fa05 	bl	801014c <__smakebuf_r>
 800fd42:	89a0      	ldrh	r0, [r4, #12]
 800fd44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd48:	f010 0301 	ands.w	r3, r0, #1
 800fd4c:	d00a      	beq.n	800fd64 <__swsetup_r+0xbc>
 800fd4e:	2300      	movs	r3, #0
 800fd50:	60a3      	str	r3, [r4, #8]
 800fd52:	6963      	ldr	r3, [r4, #20]
 800fd54:	425b      	negs	r3, r3
 800fd56:	61a3      	str	r3, [r4, #24]
 800fd58:	6923      	ldr	r3, [r4, #16]
 800fd5a:	b943      	cbnz	r3, 800fd6e <__swsetup_r+0xc6>
 800fd5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fd60:	d1ba      	bne.n	800fcd8 <__swsetup_r+0x30>
 800fd62:	bd70      	pop	{r4, r5, r6, pc}
 800fd64:	0781      	lsls	r1, r0, #30
 800fd66:	bf58      	it	pl
 800fd68:	6963      	ldrpl	r3, [r4, #20]
 800fd6a:	60a3      	str	r3, [r4, #8]
 800fd6c:	e7f4      	b.n	800fd58 <__swsetup_r+0xb0>
 800fd6e:	2000      	movs	r0, #0
 800fd70:	e7f7      	b.n	800fd62 <__swsetup_r+0xba>
 800fd72:	bf00      	nop
 800fd74:	200003d0 	.word	0x200003d0
 800fd78:	08010918 	.word	0x08010918
 800fd7c:	08010938 	.word	0x08010938
 800fd80:	080108f8 	.word	0x080108f8

0800fd84 <abort>:
 800fd84:	2006      	movs	r0, #6
 800fd86:	b508      	push	{r3, lr}
 800fd88:	f000 fa62 	bl	8010250 <raise>
 800fd8c:	2001      	movs	r0, #1
 800fd8e:	f7f3 f83a 	bl	8002e06 <_exit>
	...

0800fd94 <__sflush_r>:
 800fd94:	898a      	ldrh	r2, [r1, #12]
 800fd96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd98:	4605      	mov	r5, r0
 800fd9a:	0710      	lsls	r0, r2, #28
 800fd9c:	460c      	mov	r4, r1
 800fd9e:	d457      	bmi.n	800fe50 <__sflush_r+0xbc>
 800fda0:	684b      	ldr	r3, [r1, #4]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	dc04      	bgt.n	800fdb0 <__sflush_r+0x1c>
 800fda6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	dc01      	bgt.n	800fdb0 <__sflush_r+0x1c>
 800fdac:	2000      	movs	r0, #0
 800fdae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fdb2:	2e00      	cmp	r6, #0
 800fdb4:	d0fa      	beq.n	800fdac <__sflush_r+0x18>
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fdbc:	682f      	ldr	r7, [r5, #0]
 800fdbe:	602b      	str	r3, [r5, #0]
 800fdc0:	d032      	beq.n	800fe28 <__sflush_r+0x94>
 800fdc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fdc4:	89a3      	ldrh	r3, [r4, #12]
 800fdc6:	075a      	lsls	r2, r3, #29
 800fdc8:	d505      	bpl.n	800fdd6 <__sflush_r+0x42>
 800fdca:	6863      	ldr	r3, [r4, #4]
 800fdcc:	1ac0      	subs	r0, r0, r3
 800fdce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fdd0:	b10b      	cbz	r3, 800fdd6 <__sflush_r+0x42>
 800fdd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fdd4:	1ac0      	subs	r0, r0, r3
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	4602      	mov	r2, r0
 800fdda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fddc:	4628      	mov	r0, r5
 800fdde:	6a21      	ldr	r1, [r4, #32]
 800fde0:	47b0      	blx	r6
 800fde2:	1c43      	adds	r3, r0, #1
 800fde4:	89a3      	ldrh	r3, [r4, #12]
 800fde6:	d106      	bne.n	800fdf6 <__sflush_r+0x62>
 800fde8:	6829      	ldr	r1, [r5, #0]
 800fdea:	291d      	cmp	r1, #29
 800fdec:	d82c      	bhi.n	800fe48 <__sflush_r+0xb4>
 800fdee:	4a29      	ldr	r2, [pc, #164]	; (800fe94 <__sflush_r+0x100>)
 800fdf0:	40ca      	lsrs	r2, r1
 800fdf2:	07d6      	lsls	r6, r2, #31
 800fdf4:	d528      	bpl.n	800fe48 <__sflush_r+0xb4>
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	6062      	str	r2, [r4, #4]
 800fdfa:	6922      	ldr	r2, [r4, #16]
 800fdfc:	04d9      	lsls	r1, r3, #19
 800fdfe:	6022      	str	r2, [r4, #0]
 800fe00:	d504      	bpl.n	800fe0c <__sflush_r+0x78>
 800fe02:	1c42      	adds	r2, r0, #1
 800fe04:	d101      	bne.n	800fe0a <__sflush_r+0x76>
 800fe06:	682b      	ldr	r3, [r5, #0]
 800fe08:	b903      	cbnz	r3, 800fe0c <__sflush_r+0x78>
 800fe0a:	6560      	str	r0, [r4, #84]	; 0x54
 800fe0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe0e:	602f      	str	r7, [r5, #0]
 800fe10:	2900      	cmp	r1, #0
 800fe12:	d0cb      	beq.n	800fdac <__sflush_r+0x18>
 800fe14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe18:	4299      	cmp	r1, r3
 800fe1a:	d002      	beq.n	800fe22 <__sflush_r+0x8e>
 800fe1c:	4628      	mov	r0, r5
 800fe1e:	f7ff fb17 	bl	800f450 <_free_r>
 800fe22:	2000      	movs	r0, #0
 800fe24:	6360      	str	r0, [r4, #52]	; 0x34
 800fe26:	e7c2      	b.n	800fdae <__sflush_r+0x1a>
 800fe28:	6a21      	ldr	r1, [r4, #32]
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	4628      	mov	r0, r5
 800fe2e:	47b0      	blx	r6
 800fe30:	1c41      	adds	r1, r0, #1
 800fe32:	d1c7      	bne.n	800fdc4 <__sflush_r+0x30>
 800fe34:	682b      	ldr	r3, [r5, #0]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d0c4      	beq.n	800fdc4 <__sflush_r+0x30>
 800fe3a:	2b1d      	cmp	r3, #29
 800fe3c:	d001      	beq.n	800fe42 <__sflush_r+0xae>
 800fe3e:	2b16      	cmp	r3, #22
 800fe40:	d101      	bne.n	800fe46 <__sflush_r+0xb2>
 800fe42:	602f      	str	r7, [r5, #0]
 800fe44:	e7b2      	b.n	800fdac <__sflush_r+0x18>
 800fe46:	89a3      	ldrh	r3, [r4, #12]
 800fe48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe4c:	81a3      	strh	r3, [r4, #12]
 800fe4e:	e7ae      	b.n	800fdae <__sflush_r+0x1a>
 800fe50:	690f      	ldr	r7, [r1, #16]
 800fe52:	2f00      	cmp	r7, #0
 800fe54:	d0aa      	beq.n	800fdac <__sflush_r+0x18>
 800fe56:	0793      	lsls	r3, r2, #30
 800fe58:	bf18      	it	ne
 800fe5a:	2300      	movne	r3, #0
 800fe5c:	680e      	ldr	r6, [r1, #0]
 800fe5e:	bf08      	it	eq
 800fe60:	694b      	ldreq	r3, [r1, #20]
 800fe62:	1bf6      	subs	r6, r6, r7
 800fe64:	600f      	str	r7, [r1, #0]
 800fe66:	608b      	str	r3, [r1, #8]
 800fe68:	2e00      	cmp	r6, #0
 800fe6a:	dd9f      	ble.n	800fdac <__sflush_r+0x18>
 800fe6c:	4633      	mov	r3, r6
 800fe6e:	463a      	mov	r2, r7
 800fe70:	4628      	mov	r0, r5
 800fe72:	6a21      	ldr	r1, [r4, #32]
 800fe74:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800fe78:	47e0      	blx	ip
 800fe7a:	2800      	cmp	r0, #0
 800fe7c:	dc06      	bgt.n	800fe8c <__sflush_r+0xf8>
 800fe7e:	89a3      	ldrh	r3, [r4, #12]
 800fe80:	f04f 30ff 	mov.w	r0, #4294967295
 800fe84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe88:	81a3      	strh	r3, [r4, #12]
 800fe8a:	e790      	b.n	800fdae <__sflush_r+0x1a>
 800fe8c:	4407      	add	r7, r0
 800fe8e:	1a36      	subs	r6, r6, r0
 800fe90:	e7ea      	b.n	800fe68 <__sflush_r+0xd4>
 800fe92:	bf00      	nop
 800fe94:	20400001 	.word	0x20400001

0800fe98 <_fflush_r>:
 800fe98:	b538      	push	{r3, r4, r5, lr}
 800fe9a:	690b      	ldr	r3, [r1, #16]
 800fe9c:	4605      	mov	r5, r0
 800fe9e:	460c      	mov	r4, r1
 800fea0:	b913      	cbnz	r3, 800fea8 <_fflush_r+0x10>
 800fea2:	2500      	movs	r5, #0
 800fea4:	4628      	mov	r0, r5
 800fea6:	bd38      	pop	{r3, r4, r5, pc}
 800fea8:	b118      	cbz	r0, 800feb2 <_fflush_r+0x1a>
 800feaa:	6983      	ldr	r3, [r0, #24]
 800feac:	b90b      	cbnz	r3, 800feb2 <_fflush_r+0x1a>
 800feae:	f000 f887 	bl	800ffc0 <__sinit>
 800feb2:	4b14      	ldr	r3, [pc, #80]	; (800ff04 <_fflush_r+0x6c>)
 800feb4:	429c      	cmp	r4, r3
 800feb6:	d11b      	bne.n	800fef0 <_fflush_r+0x58>
 800feb8:	686c      	ldr	r4, [r5, #4]
 800feba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d0ef      	beq.n	800fea2 <_fflush_r+0xa>
 800fec2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fec4:	07d0      	lsls	r0, r2, #31
 800fec6:	d404      	bmi.n	800fed2 <_fflush_r+0x3a>
 800fec8:	0599      	lsls	r1, r3, #22
 800feca:	d402      	bmi.n	800fed2 <_fflush_r+0x3a>
 800fecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fece:	f000 f915 	bl	80100fc <__retarget_lock_acquire_recursive>
 800fed2:	4628      	mov	r0, r5
 800fed4:	4621      	mov	r1, r4
 800fed6:	f7ff ff5d 	bl	800fd94 <__sflush_r>
 800feda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fedc:	4605      	mov	r5, r0
 800fede:	07da      	lsls	r2, r3, #31
 800fee0:	d4e0      	bmi.n	800fea4 <_fflush_r+0xc>
 800fee2:	89a3      	ldrh	r3, [r4, #12]
 800fee4:	059b      	lsls	r3, r3, #22
 800fee6:	d4dd      	bmi.n	800fea4 <_fflush_r+0xc>
 800fee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800feea:	f000 f908 	bl	80100fe <__retarget_lock_release_recursive>
 800feee:	e7d9      	b.n	800fea4 <_fflush_r+0xc>
 800fef0:	4b05      	ldr	r3, [pc, #20]	; (800ff08 <_fflush_r+0x70>)
 800fef2:	429c      	cmp	r4, r3
 800fef4:	d101      	bne.n	800fefa <_fflush_r+0x62>
 800fef6:	68ac      	ldr	r4, [r5, #8]
 800fef8:	e7df      	b.n	800feba <_fflush_r+0x22>
 800fefa:	4b04      	ldr	r3, [pc, #16]	; (800ff0c <_fflush_r+0x74>)
 800fefc:	429c      	cmp	r4, r3
 800fefe:	bf08      	it	eq
 800ff00:	68ec      	ldreq	r4, [r5, #12]
 800ff02:	e7da      	b.n	800feba <_fflush_r+0x22>
 800ff04:	08010918 	.word	0x08010918
 800ff08:	08010938 	.word	0x08010938
 800ff0c:	080108f8 	.word	0x080108f8

0800ff10 <std>:
 800ff10:	2300      	movs	r3, #0
 800ff12:	b510      	push	{r4, lr}
 800ff14:	4604      	mov	r4, r0
 800ff16:	e9c0 3300 	strd	r3, r3, [r0]
 800ff1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff1e:	6083      	str	r3, [r0, #8]
 800ff20:	8181      	strh	r1, [r0, #12]
 800ff22:	6643      	str	r3, [r0, #100]	; 0x64
 800ff24:	81c2      	strh	r2, [r0, #14]
 800ff26:	6183      	str	r3, [r0, #24]
 800ff28:	4619      	mov	r1, r3
 800ff2a:	2208      	movs	r2, #8
 800ff2c:	305c      	adds	r0, #92	; 0x5c
 800ff2e:	f7ff f96d 	bl	800f20c <memset>
 800ff32:	4b05      	ldr	r3, [pc, #20]	; (800ff48 <std+0x38>)
 800ff34:	6224      	str	r4, [r4, #32]
 800ff36:	6263      	str	r3, [r4, #36]	; 0x24
 800ff38:	4b04      	ldr	r3, [pc, #16]	; (800ff4c <std+0x3c>)
 800ff3a:	62a3      	str	r3, [r4, #40]	; 0x28
 800ff3c:	4b04      	ldr	r3, [pc, #16]	; (800ff50 <std+0x40>)
 800ff3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ff40:	4b04      	ldr	r3, [pc, #16]	; (800ff54 <std+0x44>)
 800ff42:	6323      	str	r3, [r4, #48]	; 0x30
 800ff44:	bd10      	pop	{r4, pc}
 800ff46:	bf00      	nop
 800ff48:	08010289 	.word	0x08010289
 800ff4c:	080102ab 	.word	0x080102ab
 800ff50:	080102e3 	.word	0x080102e3
 800ff54:	08010307 	.word	0x08010307

0800ff58 <_cleanup_r>:
 800ff58:	4901      	ldr	r1, [pc, #4]	; (800ff60 <_cleanup_r+0x8>)
 800ff5a:	f000 b8af 	b.w	80100bc <_fwalk_reent>
 800ff5e:	bf00      	nop
 800ff60:	0800fe99 	.word	0x0800fe99

0800ff64 <__sfmoreglue>:
 800ff64:	2268      	movs	r2, #104	; 0x68
 800ff66:	b570      	push	{r4, r5, r6, lr}
 800ff68:	1e4d      	subs	r5, r1, #1
 800ff6a:	4355      	muls	r5, r2
 800ff6c:	460e      	mov	r6, r1
 800ff6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ff72:	f7ff fad5 	bl	800f520 <_malloc_r>
 800ff76:	4604      	mov	r4, r0
 800ff78:	b140      	cbz	r0, 800ff8c <__sfmoreglue+0x28>
 800ff7a:	2100      	movs	r1, #0
 800ff7c:	e9c0 1600 	strd	r1, r6, [r0]
 800ff80:	300c      	adds	r0, #12
 800ff82:	60a0      	str	r0, [r4, #8]
 800ff84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ff88:	f7ff f940 	bl	800f20c <memset>
 800ff8c:	4620      	mov	r0, r4
 800ff8e:	bd70      	pop	{r4, r5, r6, pc}

0800ff90 <__sfp_lock_acquire>:
 800ff90:	4801      	ldr	r0, [pc, #4]	; (800ff98 <__sfp_lock_acquire+0x8>)
 800ff92:	f000 b8b3 	b.w	80100fc <__retarget_lock_acquire_recursive>
 800ff96:	bf00      	nop
 800ff98:	20002ba5 	.word	0x20002ba5

0800ff9c <__sfp_lock_release>:
 800ff9c:	4801      	ldr	r0, [pc, #4]	; (800ffa4 <__sfp_lock_release+0x8>)
 800ff9e:	f000 b8ae 	b.w	80100fe <__retarget_lock_release_recursive>
 800ffa2:	bf00      	nop
 800ffa4:	20002ba5 	.word	0x20002ba5

0800ffa8 <__sinit_lock_acquire>:
 800ffa8:	4801      	ldr	r0, [pc, #4]	; (800ffb0 <__sinit_lock_acquire+0x8>)
 800ffaa:	f000 b8a7 	b.w	80100fc <__retarget_lock_acquire_recursive>
 800ffae:	bf00      	nop
 800ffb0:	20002ba6 	.word	0x20002ba6

0800ffb4 <__sinit_lock_release>:
 800ffb4:	4801      	ldr	r0, [pc, #4]	; (800ffbc <__sinit_lock_release+0x8>)
 800ffb6:	f000 b8a2 	b.w	80100fe <__retarget_lock_release_recursive>
 800ffba:	bf00      	nop
 800ffbc:	20002ba6 	.word	0x20002ba6

0800ffc0 <__sinit>:
 800ffc0:	b510      	push	{r4, lr}
 800ffc2:	4604      	mov	r4, r0
 800ffc4:	f7ff fff0 	bl	800ffa8 <__sinit_lock_acquire>
 800ffc8:	69a3      	ldr	r3, [r4, #24]
 800ffca:	b11b      	cbz	r3, 800ffd4 <__sinit+0x14>
 800ffcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffd0:	f7ff bff0 	b.w	800ffb4 <__sinit_lock_release>
 800ffd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ffd8:	6523      	str	r3, [r4, #80]	; 0x50
 800ffda:	4b13      	ldr	r3, [pc, #76]	; (8010028 <__sinit+0x68>)
 800ffdc:	4a13      	ldr	r2, [pc, #76]	; (801002c <__sinit+0x6c>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	62a2      	str	r2, [r4, #40]	; 0x28
 800ffe2:	42a3      	cmp	r3, r4
 800ffe4:	bf08      	it	eq
 800ffe6:	2301      	moveq	r3, #1
 800ffe8:	4620      	mov	r0, r4
 800ffea:	bf08      	it	eq
 800ffec:	61a3      	streq	r3, [r4, #24]
 800ffee:	f000 f81f 	bl	8010030 <__sfp>
 800fff2:	6060      	str	r0, [r4, #4]
 800fff4:	4620      	mov	r0, r4
 800fff6:	f000 f81b 	bl	8010030 <__sfp>
 800fffa:	60a0      	str	r0, [r4, #8]
 800fffc:	4620      	mov	r0, r4
 800fffe:	f000 f817 	bl	8010030 <__sfp>
 8010002:	2200      	movs	r2, #0
 8010004:	2104      	movs	r1, #4
 8010006:	60e0      	str	r0, [r4, #12]
 8010008:	6860      	ldr	r0, [r4, #4]
 801000a:	f7ff ff81 	bl	800ff10 <std>
 801000e:	2201      	movs	r2, #1
 8010010:	2109      	movs	r1, #9
 8010012:	68a0      	ldr	r0, [r4, #8]
 8010014:	f7ff ff7c 	bl	800ff10 <std>
 8010018:	2202      	movs	r2, #2
 801001a:	2112      	movs	r1, #18
 801001c:	68e0      	ldr	r0, [r4, #12]
 801001e:	f7ff ff77 	bl	800ff10 <std>
 8010022:	2301      	movs	r3, #1
 8010024:	61a3      	str	r3, [r4, #24]
 8010026:	e7d1      	b.n	800ffcc <__sinit+0xc>
 8010028:	08010710 	.word	0x08010710
 801002c:	0800ff59 	.word	0x0800ff59

08010030 <__sfp>:
 8010030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010032:	4607      	mov	r7, r0
 8010034:	f7ff ffac 	bl	800ff90 <__sfp_lock_acquire>
 8010038:	4b1e      	ldr	r3, [pc, #120]	; (80100b4 <__sfp+0x84>)
 801003a:	681e      	ldr	r6, [r3, #0]
 801003c:	69b3      	ldr	r3, [r6, #24]
 801003e:	b913      	cbnz	r3, 8010046 <__sfp+0x16>
 8010040:	4630      	mov	r0, r6
 8010042:	f7ff ffbd 	bl	800ffc0 <__sinit>
 8010046:	3648      	adds	r6, #72	; 0x48
 8010048:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801004c:	3b01      	subs	r3, #1
 801004e:	d503      	bpl.n	8010058 <__sfp+0x28>
 8010050:	6833      	ldr	r3, [r6, #0]
 8010052:	b30b      	cbz	r3, 8010098 <__sfp+0x68>
 8010054:	6836      	ldr	r6, [r6, #0]
 8010056:	e7f7      	b.n	8010048 <__sfp+0x18>
 8010058:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801005c:	b9d5      	cbnz	r5, 8010094 <__sfp+0x64>
 801005e:	4b16      	ldr	r3, [pc, #88]	; (80100b8 <__sfp+0x88>)
 8010060:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010064:	60e3      	str	r3, [r4, #12]
 8010066:	6665      	str	r5, [r4, #100]	; 0x64
 8010068:	f000 f847 	bl	80100fa <__retarget_lock_init_recursive>
 801006c:	f7ff ff96 	bl	800ff9c <__sfp_lock_release>
 8010070:	2208      	movs	r2, #8
 8010072:	4629      	mov	r1, r5
 8010074:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010078:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801007c:	6025      	str	r5, [r4, #0]
 801007e:	61a5      	str	r5, [r4, #24]
 8010080:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010084:	f7ff f8c2 	bl	800f20c <memset>
 8010088:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801008c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010090:	4620      	mov	r0, r4
 8010092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010094:	3468      	adds	r4, #104	; 0x68
 8010096:	e7d9      	b.n	801004c <__sfp+0x1c>
 8010098:	2104      	movs	r1, #4
 801009a:	4638      	mov	r0, r7
 801009c:	f7ff ff62 	bl	800ff64 <__sfmoreglue>
 80100a0:	4604      	mov	r4, r0
 80100a2:	6030      	str	r0, [r6, #0]
 80100a4:	2800      	cmp	r0, #0
 80100a6:	d1d5      	bne.n	8010054 <__sfp+0x24>
 80100a8:	f7ff ff78 	bl	800ff9c <__sfp_lock_release>
 80100ac:	230c      	movs	r3, #12
 80100ae:	603b      	str	r3, [r7, #0]
 80100b0:	e7ee      	b.n	8010090 <__sfp+0x60>
 80100b2:	bf00      	nop
 80100b4:	08010710 	.word	0x08010710
 80100b8:	ffff0001 	.word	0xffff0001

080100bc <_fwalk_reent>:
 80100bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100c0:	4606      	mov	r6, r0
 80100c2:	4688      	mov	r8, r1
 80100c4:	2700      	movs	r7, #0
 80100c6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80100ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80100ce:	f1b9 0901 	subs.w	r9, r9, #1
 80100d2:	d505      	bpl.n	80100e0 <_fwalk_reent+0x24>
 80100d4:	6824      	ldr	r4, [r4, #0]
 80100d6:	2c00      	cmp	r4, #0
 80100d8:	d1f7      	bne.n	80100ca <_fwalk_reent+0xe>
 80100da:	4638      	mov	r0, r7
 80100dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100e0:	89ab      	ldrh	r3, [r5, #12]
 80100e2:	2b01      	cmp	r3, #1
 80100e4:	d907      	bls.n	80100f6 <_fwalk_reent+0x3a>
 80100e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80100ea:	3301      	adds	r3, #1
 80100ec:	d003      	beq.n	80100f6 <_fwalk_reent+0x3a>
 80100ee:	4629      	mov	r1, r5
 80100f0:	4630      	mov	r0, r6
 80100f2:	47c0      	blx	r8
 80100f4:	4307      	orrs	r7, r0
 80100f6:	3568      	adds	r5, #104	; 0x68
 80100f8:	e7e9      	b.n	80100ce <_fwalk_reent+0x12>

080100fa <__retarget_lock_init_recursive>:
 80100fa:	4770      	bx	lr

080100fc <__retarget_lock_acquire_recursive>:
 80100fc:	4770      	bx	lr

080100fe <__retarget_lock_release_recursive>:
 80100fe:	4770      	bx	lr

08010100 <__swhatbuf_r>:
 8010100:	b570      	push	{r4, r5, r6, lr}
 8010102:	460e      	mov	r6, r1
 8010104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010108:	4614      	mov	r4, r2
 801010a:	2900      	cmp	r1, #0
 801010c:	461d      	mov	r5, r3
 801010e:	b096      	sub	sp, #88	; 0x58
 8010110:	da08      	bge.n	8010124 <__swhatbuf_r+0x24>
 8010112:	2200      	movs	r2, #0
 8010114:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010118:	602a      	str	r2, [r5, #0]
 801011a:	061a      	lsls	r2, r3, #24
 801011c:	d410      	bmi.n	8010140 <__swhatbuf_r+0x40>
 801011e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010122:	e00e      	b.n	8010142 <__swhatbuf_r+0x42>
 8010124:	466a      	mov	r2, sp
 8010126:	f000 f915 	bl	8010354 <_fstat_r>
 801012a:	2800      	cmp	r0, #0
 801012c:	dbf1      	blt.n	8010112 <__swhatbuf_r+0x12>
 801012e:	9a01      	ldr	r2, [sp, #4]
 8010130:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010134:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010138:	425a      	negs	r2, r3
 801013a:	415a      	adcs	r2, r3
 801013c:	602a      	str	r2, [r5, #0]
 801013e:	e7ee      	b.n	801011e <__swhatbuf_r+0x1e>
 8010140:	2340      	movs	r3, #64	; 0x40
 8010142:	2000      	movs	r0, #0
 8010144:	6023      	str	r3, [r4, #0]
 8010146:	b016      	add	sp, #88	; 0x58
 8010148:	bd70      	pop	{r4, r5, r6, pc}
	...

0801014c <__smakebuf_r>:
 801014c:	898b      	ldrh	r3, [r1, #12]
 801014e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010150:	079d      	lsls	r5, r3, #30
 8010152:	4606      	mov	r6, r0
 8010154:	460c      	mov	r4, r1
 8010156:	d507      	bpl.n	8010168 <__smakebuf_r+0x1c>
 8010158:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801015c:	6023      	str	r3, [r4, #0]
 801015e:	6123      	str	r3, [r4, #16]
 8010160:	2301      	movs	r3, #1
 8010162:	6163      	str	r3, [r4, #20]
 8010164:	b002      	add	sp, #8
 8010166:	bd70      	pop	{r4, r5, r6, pc}
 8010168:	466a      	mov	r2, sp
 801016a:	ab01      	add	r3, sp, #4
 801016c:	f7ff ffc8 	bl	8010100 <__swhatbuf_r>
 8010170:	9900      	ldr	r1, [sp, #0]
 8010172:	4605      	mov	r5, r0
 8010174:	4630      	mov	r0, r6
 8010176:	f7ff f9d3 	bl	800f520 <_malloc_r>
 801017a:	b948      	cbnz	r0, 8010190 <__smakebuf_r+0x44>
 801017c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010180:	059a      	lsls	r2, r3, #22
 8010182:	d4ef      	bmi.n	8010164 <__smakebuf_r+0x18>
 8010184:	f023 0303 	bic.w	r3, r3, #3
 8010188:	f043 0302 	orr.w	r3, r3, #2
 801018c:	81a3      	strh	r3, [r4, #12]
 801018e:	e7e3      	b.n	8010158 <__smakebuf_r+0xc>
 8010190:	4b0d      	ldr	r3, [pc, #52]	; (80101c8 <__smakebuf_r+0x7c>)
 8010192:	62b3      	str	r3, [r6, #40]	; 0x28
 8010194:	89a3      	ldrh	r3, [r4, #12]
 8010196:	6020      	str	r0, [r4, #0]
 8010198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801019c:	81a3      	strh	r3, [r4, #12]
 801019e:	9b00      	ldr	r3, [sp, #0]
 80101a0:	6120      	str	r0, [r4, #16]
 80101a2:	6163      	str	r3, [r4, #20]
 80101a4:	9b01      	ldr	r3, [sp, #4]
 80101a6:	b15b      	cbz	r3, 80101c0 <__smakebuf_r+0x74>
 80101a8:	4630      	mov	r0, r6
 80101aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80101ae:	f000 f8e3 	bl	8010378 <_isatty_r>
 80101b2:	b128      	cbz	r0, 80101c0 <__smakebuf_r+0x74>
 80101b4:	89a3      	ldrh	r3, [r4, #12]
 80101b6:	f023 0303 	bic.w	r3, r3, #3
 80101ba:	f043 0301 	orr.w	r3, r3, #1
 80101be:	81a3      	strh	r3, [r4, #12]
 80101c0:	89a0      	ldrh	r0, [r4, #12]
 80101c2:	4305      	orrs	r5, r0
 80101c4:	81a5      	strh	r5, [r4, #12]
 80101c6:	e7cd      	b.n	8010164 <__smakebuf_r+0x18>
 80101c8:	0800ff59 	.word	0x0800ff59

080101cc <memchr>:
 80101cc:	4603      	mov	r3, r0
 80101ce:	b510      	push	{r4, lr}
 80101d0:	b2c9      	uxtb	r1, r1
 80101d2:	4402      	add	r2, r0
 80101d4:	4293      	cmp	r3, r2
 80101d6:	4618      	mov	r0, r3
 80101d8:	d101      	bne.n	80101de <memchr+0x12>
 80101da:	2000      	movs	r0, #0
 80101dc:	e003      	b.n	80101e6 <memchr+0x1a>
 80101de:	7804      	ldrb	r4, [r0, #0]
 80101e0:	3301      	adds	r3, #1
 80101e2:	428c      	cmp	r4, r1
 80101e4:	d1f6      	bne.n	80101d4 <memchr+0x8>
 80101e6:	bd10      	pop	{r4, pc}

080101e8 <__malloc_lock>:
 80101e8:	4801      	ldr	r0, [pc, #4]	; (80101f0 <__malloc_lock+0x8>)
 80101ea:	f7ff bf87 	b.w	80100fc <__retarget_lock_acquire_recursive>
 80101ee:	bf00      	nop
 80101f0:	20002ba4 	.word	0x20002ba4

080101f4 <__malloc_unlock>:
 80101f4:	4801      	ldr	r0, [pc, #4]	; (80101fc <__malloc_unlock+0x8>)
 80101f6:	f7ff bf82 	b.w	80100fe <__retarget_lock_release_recursive>
 80101fa:	bf00      	nop
 80101fc:	20002ba4 	.word	0x20002ba4

08010200 <_raise_r>:
 8010200:	291f      	cmp	r1, #31
 8010202:	b538      	push	{r3, r4, r5, lr}
 8010204:	4604      	mov	r4, r0
 8010206:	460d      	mov	r5, r1
 8010208:	d904      	bls.n	8010214 <_raise_r+0x14>
 801020a:	2316      	movs	r3, #22
 801020c:	6003      	str	r3, [r0, #0]
 801020e:	f04f 30ff 	mov.w	r0, #4294967295
 8010212:	bd38      	pop	{r3, r4, r5, pc}
 8010214:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010216:	b112      	cbz	r2, 801021e <_raise_r+0x1e>
 8010218:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801021c:	b94b      	cbnz	r3, 8010232 <_raise_r+0x32>
 801021e:	4620      	mov	r0, r4
 8010220:	f000 f830 	bl	8010284 <_getpid_r>
 8010224:	462a      	mov	r2, r5
 8010226:	4601      	mov	r1, r0
 8010228:	4620      	mov	r0, r4
 801022a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801022e:	f000 b817 	b.w	8010260 <_kill_r>
 8010232:	2b01      	cmp	r3, #1
 8010234:	d00a      	beq.n	801024c <_raise_r+0x4c>
 8010236:	1c59      	adds	r1, r3, #1
 8010238:	d103      	bne.n	8010242 <_raise_r+0x42>
 801023a:	2316      	movs	r3, #22
 801023c:	6003      	str	r3, [r0, #0]
 801023e:	2001      	movs	r0, #1
 8010240:	e7e7      	b.n	8010212 <_raise_r+0x12>
 8010242:	2400      	movs	r4, #0
 8010244:	4628      	mov	r0, r5
 8010246:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801024a:	4798      	blx	r3
 801024c:	2000      	movs	r0, #0
 801024e:	e7e0      	b.n	8010212 <_raise_r+0x12>

08010250 <raise>:
 8010250:	4b02      	ldr	r3, [pc, #8]	; (801025c <raise+0xc>)
 8010252:	4601      	mov	r1, r0
 8010254:	6818      	ldr	r0, [r3, #0]
 8010256:	f7ff bfd3 	b.w	8010200 <_raise_r>
 801025a:	bf00      	nop
 801025c:	200003d0 	.word	0x200003d0

08010260 <_kill_r>:
 8010260:	b538      	push	{r3, r4, r5, lr}
 8010262:	2300      	movs	r3, #0
 8010264:	4d06      	ldr	r5, [pc, #24]	; (8010280 <_kill_r+0x20>)
 8010266:	4604      	mov	r4, r0
 8010268:	4608      	mov	r0, r1
 801026a:	4611      	mov	r1, r2
 801026c:	602b      	str	r3, [r5, #0]
 801026e:	f7f2 fdba 	bl	8002de6 <_kill>
 8010272:	1c43      	adds	r3, r0, #1
 8010274:	d102      	bne.n	801027c <_kill_r+0x1c>
 8010276:	682b      	ldr	r3, [r5, #0]
 8010278:	b103      	cbz	r3, 801027c <_kill_r+0x1c>
 801027a:	6023      	str	r3, [r4, #0]
 801027c:	bd38      	pop	{r3, r4, r5, pc}
 801027e:	bf00      	nop
 8010280:	20002ba8 	.word	0x20002ba8

08010284 <_getpid_r>:
 8010284:	f7f2 bda8 	b.w	8002dd8 <_getpid>

08010288 <__sread>:
 8010288:	b510      	push	{r4, lr}
 801028a:	460c      	mov	r4, r1
 801028c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010290:	f000 f894 	bl	80103bc <_read_r>
 8010294:	2800      	cmp	r0, #0
 8010296:	bfab      	itete	ge
 8010298:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801029a:	89a3      	ldrhlt	r3, [r4, #12]
 801029c:	181b      	addge	r3, r3, r0
 801029e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80102a2:	bfac      	ite	ge
 80102a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80102a6:	81a3      	strhlt	r3, [r4, #12]
 80102a8:	bd10      	pop	{r4, pc}

080102aa <__swrite>:
 80102aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102ae:	461f      	mov	r7, r3
 80102b0:	898b      	ldrh	r3, [r1, #12]
 80102b2:	4605      	mov	r5, r0
 80102b4:	05db      	lsls	r3, r3, #23
 80102b6:	460c      	mov	r4, r1
 80102b8:	4616      	mov	r6, r2
 80102ba:	d505      	bpl.n	80102c8 <__swrite+0x1e>
 80102bc:	2302      	movs	r3, #2
 80102be:	2200      	movs	r2, #0
 80102c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102c4:	f000 f868 	bl	8010398 <_lseek_r>
 80102c8:	89a3      	ldrh	r3, [r4, #12]
 80102ca:	4632      	mov	r2, r6
 80102cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80102d0:	81a3      	strh	r3, [r4, #12]
 80102d2:	4628      	mov	r0, r5
 80102d4:	463b      	mov	r3, r7
 80102d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102de:	f000 b817 	b.w	8010310 <_write_r>

080102e2 <__sseek>:
 80102e2:	b510      	push	{r4, lr}
 80102e4:	460c      	mov	r4, r1
 80102e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102ea:	f000 f855 	bl	8010398 <_lseek_r>
 80102ee:	1c43      	adds	r3, r0, #1
 80102f0:	89a3      	ldrh	r3, [r4, #12]
 80102f2:	bf15      	itete	ne
 80102f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80102f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80102fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80102fe:	81a3      	strheq	r3, [r4, #12]
 8010300:	bf18      	it	ne
 8010302:	81a3      	strhne	r3, [r4, #12]
 8010304:	bd10      	pop	{r4, pc}

08010306 <__sclose>:
 8010306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801030a:	f000 b813 	b.w	8010334 <_close_r>
	...

08010310 <_write_r>:
 8010310:	b538      	push	{r3, r4, r5, lr}
 8010312:	4604      	mov	r4, r0
 8010314:	4608      	mov	r0, r1
 8010316:	4611      	mov	r1, r2
 8010318:	2200      	movs	r2, #0
 801031a:	4d05      	ldr	r5, [pc, #20]	; (8010330 <_write_r+0x20>)
 801031c:	602a      	str	r2, [r5, #0]
 801031e:	461a      	mov	r2, r3
 8010320:	f7f2 fd98 	bl	8002e54 <_write>
 8010324:	1c43      	adds	r3, r0, #1
 8010326:	d102      	bne.n	801032e <_write_r+0x1e>
 8010328:	682b      	ldr	r3, [r5, #0]
 801032a:	b103      	cbz	r3, 801032e <_write_r+0x1e>
 801032c:	6023      	str	r3, [r4, #0]
 801032e:	bd38      	pop	{r3, r4, r5, pc}
 8010330:	20002ba8 	.word	0x20002ba8

08010334 <_close_r>:
 8010334:	b538      	push	{r3, r4, r5, lr}
 8010336:	2300      	movs	r3, #0
 8010338:	4d05      	ldr	r5, [pc, #20]	; (8010350 <_close_r+0x1c>)
 801033a:	4604      	mov	r4, r0
 801033c:	4608      	mov	r0, r1
 801033e:	602b      	str	r3, [r5, #0]
 8010340:	f7f2 fda4 	bl	8002e8c <_close>
 8010344:	1c43      	adds	r3, r0, #1
 8010346:	d102      	bne.n	801034e <_close_r+0x1a>
 8010348:	682b      	ldr	r3, [r5, #0]
 801034a:	b103      	cbz	r3, 801034e <_close_r+0x1a>
 801034c:	6023      	str	r3, [r4, #0]
 801034e:	bd38      	pop	{r3, r4, r5, pc}
 8010350:	20002ba8 	.word	0x20002ba8

08010354 <_fstat_r>:
 8010354:	b538      	push	{r3, r4, r5, lr}
 8010356:	2300      	movs	r3, #0
 8010358:	4d06      	ldr	r5, [pc, #24]	; (8010374 <_fstat_r+0x20>)
 801035a:	4604      	mov	r4, r0
 801035c:	4608      	mov	r0, r1
 801035e:	4611      	mov	r1, r2
 8010360:	602b      	str	r3, [r5, #0]
 8010362:	f7f2 fd9e 	bl	8002ea2 <_fstat>
 8010366:	1c43      	adds	r3, r0, #1
 8010368:	d102      	bne.n	8010370 <_fstat_r+0x1c>
 801036a:	682b      	ldr	r3, [r5, #0]
 801036c:	b103      	cbz	r3, 8010370 <_fstat_r+0x1c>
 801036e:	6023      	str	r3, [r4, #0]
 8010370:	bd38      	pop	{r3, r4, r5, pc}
 8010372:	bf00      	nop
 8010374:	20002ba8 	.word	0x20002ba8

08010378 <_isatty_r>:
 8010378:	b538      	push	{r3, r4, r5, lr}
 801037a:	2300      	movs	r3, #0
 801037c:	4d05      	ldr	r5, [pc, #20]	; (8010394 <_isatty_r+0x1c>)
 801037e:	4604      	mov	r4, r0
 8010380:	4608      	mov	r0, r1
 8010382:	602b      	str	r3, [r5, #0]
 8010384:	f7f2 fd9c 	bl	8002ec0 <_isatty>
 8010388:	1c43      	adds	r3, r0, #1
 801038a:	d102      	bne.n	8010392 <_isatty_r+0x1a>
 801038c:	682b      	ldr	r3, [r5, #0]
 801038e:	b103      	cbz	r3, 8010392 <_isatty_r+0x1a>
 8010390:	6023      	str	r3, [r4, #0]
 8010392:	bd38      	pop	{r3, r4, r5, pc}
 8010394:	20002ba8 	.word	0x20002ba8

08010398 <_lseek_r>:
 8010398:	b538      	push	{r3, r4, r5, lr}
 801039a:	4604      	mov	r4, r0
 801039c:	4608      	mov	r0, r1
 801039e:	4611      	mov	r1, r2
 80103a0:	2200      	movs	r2, #0
 80103a2:	4d05      	ldr	r5, [pc, #20]	; (80103b8 <_lseek_r+0x20>)
 80103a4:	602a      	str	r2, [r5, #0]
 80103a6:	461a      	mov	r2, r3
 80103a8:	f7f2 fd94 	bl	8002ed4 <_lseek>
 80103ac:	1c43      	adds	r3, r0, #1
 80103ae:	d102      	bne.n	80103b6 <_lseek_r+0x1e>
 80103b0:	682b      	ldr	r3, [r5, #0]
 80103b2:	b103      	cbz	r3, 80103b6 <_lseek_r+0x1e>
 80103b4:	6023      	str	r3, [r4, #0]
 80103b6:	bd38      	pop	{r3, r4, r5, pc}
 80103b8:	20002ba8 	.word	0x20002ba8

080103bc <_read_r>:
 80103bc:	b538      	push	{r3, r4, r5, lr}
 80103be:	4604      	mov	r4, r0
 80103c0:	4608      	mov	r0, r1
 80103c2:	4611      	mov	r1, r2
 80103c4:	2200      	movs	r2, #0
 80103c6:	4d05      	ldr	r5, [pc, #20]	; (80103dc <_read_r+0x20>)
 80103c8:	602a      	str	r2, [r5, #0]
 80103ca:	461a      	mov	r2, r3
 80103cc:	f7f2 fd25 	bl	8002e1a <_read>
 80103d0:	1c43      	adds	r3, r0, #1
 80103d2:	d102      	bne.n	80103da <_read_r+0x1e>
 80103d4:	682b      	ldr	r3, [r5, #0]
 80103d6:	b103      	cbz	r3, 80103da <_read_r+0x1e>
 80103d8:	6023      	str	r3, [r4, #0]
 80103da:	bd38      	pop	{r3, r4, r5, pc}
 80103dc:	20002ba8 	.word	0x20002ba8

080103e0 <_init>:
 80103e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103e2:	bf00      	nop
 80103e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103e6:	bc08      	pop	{r3}
 80103e8:	469e      	mov	lr, r3
 80103ea:	4770      	bx	lr

080103ec <_fini>:
 80103ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ee:	bf00      	nop
 80103f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80103f2:	bc08      	pop	{r3}
 80103f4:	469e      	mov	lr, r3
 80103f6:	4770      	bx	lr
