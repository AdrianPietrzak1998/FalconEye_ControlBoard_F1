
FalconEye ControlBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013644  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000874  08013830  08013830  00023830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080140a4  080140a4  00030840  2**0
                  CONTENTS
  4 .ARM          00000000  080140a4  080140a4  00030840  2**0
                  CONTENTS
  5 .preinit_array 00000000  080140a4  080140a4  00030840  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080140a4  080140a4  000240a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080140a8  080140a8  000240a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000840  20000000  080140ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e24  20000840  080148ec  00030840  2**2
                  ALLOC
 10 ._user_heap_stack 00001804  20003664  080148ec  00033664  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030840  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002256a  00000000  00000000  00030869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058a8  00000000  00000000  00052dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d48  00000000  00000000  00058680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ad0  00000000  00000000  0005a3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214ec  00000000  00000000  0005be98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000277cf  00000000  00000000  0007d384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8f1c  00000000  00000000  000a4b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014da6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089a0  00000000  00000000  0014dac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000840 	.word	0x20000840
 8000204:	00000000 	.word	0x00000000
 8000208:	08013814 	.word	0x08013814

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000844 	.word	0x20000844
 8000224:	08013814 	.word	0x08013814

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <set_baudrate>:
#include "usart.h"



static void set_baudrate(uint32_t baudrate)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	  huart3.Instance = USART3;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <set_baudrate+0x50>)
 8001026:	4a12      	ldr	r2, [pc, #72]	; (8001070 <set_baudrate+0x54>)
 8001028:	601a      	str	r2, [r3, #0]
	  huart3.Init.BaudRate = baudrate;
 800102a:	4a10      	ldr	r2, [pc, #64]	; (800106c <set_baudrate+0x50>)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6053      	str	r3, [r2, #4]
	  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <set_baudrate+0x50>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
	  huart3.Init.StopBits = UART_STOPBITS_1;
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <set_baudrate+0x50>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
	  huart3.Init.Parity = UART_PARITY_NONE;
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <set_baudrate+0x50>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
	  huart3.Init.Mode = UART_MODE_TX_RX;
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <set_baudrate+0x50>)
 8001044:	220c      	movs	r2, #12
 8001046:	615a      	str	r2, [r3, #20]
	  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <set_baudrate+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
	  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <set_baudrate+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	61da      	str	r2, [r3, #28]
	  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <set_baudrate+0x50>)
 8001056:	f00a fdc9 	bl	800bbec <HAL_HalfDuplex_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <set_baudrate+0x48>
	  {
	    Error_Handler();
 8001060:	f002 f806 	bl	8003070 <Error_Handler>
	  }
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20002430 	.word	0x20002430
 8001070:	40004800 	.word	0x40004800

08001074 <wire_reset>:


HAL_StatusTypeDef wire_reset(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
	uint8_t data_out = 0xF0;
 800107a:	23f0      	movs	r3, #240	; 0xf0
 800107c:	71fb      	strb	r3, [r7, #7]
	uint8_t data_in = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	71bb      	strb	r3, [r7, #6]

	set_baudrate(9600);
 8001082:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001086:	f7ff ffc9 	bl	800101c <set_baudrate>
	HAL_UART_Transmit(&UART, &data_out, 1, 100);
 800108a:	1df9      	adds	r1, r7, #7
 800108c:	2364      	movs	r3, #100	; 0x64
 800108e:	2201      	movs	r2, #1
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <wire_reset+0x4c>)
 8001092:	f00a fe03 	bl	800bc9c <HAL_UART_Transmit>
	HAL_UART_Receive(&UART, &data_in, 1, 100);
 8001096:	1db9      	adds	r1, r7, #6
 8001098:	2364      	movs	r3, #100	; 0x64
 800109a:	2201      	movs	r2, #1
 800109c:	4808      	ldr	r0, [pc, #32]	; (80010c0 <wire_reset+0x4c>)
 800109e:	f00a fe80 	bl	800bda2 <HAL_UART_Receive>
	set_baudrate(115200);
 80010a2:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80010a6:	f7ff ffb9 	bl	800101c <set_baudrate>

	if (data_in != 0xF0)
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	2bf0      	cmp	r3, #240	; 0xf0
 80010ae:	d001      	beq.n	80010b4 <wire_reset+0x40>
		return HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	e000      	b.n	80010b6 <wire_reset+0x42>
	else
		return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20002430 	.word	0x20002430

080010c4 <read_bit>:

static int read_bit(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
	uint8_t data_out = 0xff;
 80010ca:	23ff      	movs	r3, #255	; 0xff
 80010cc:	71fb      	strb	r3, [r7, #7]
	uint8_t data_in = 0x0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	71bb      	strb	r3, [r7, #6]
	data_in = 0x0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	71bb      	strb	r3, [r7, #6]
	if(USARTn -> SR & (1<<5))
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <read_bit+0x4c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0320 	and.w	r3, r3, #32
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <read_bit+0x22>
	{
		USARTn -> DR;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <read_bit+0x4c>)
 80010e4:	685b      	ldr	r3, [r3, #4]
	}
	HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 80010e6:	1df9      	adds	r1, r7, #7
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	2201      	movs	r2, #1
 80010ee:	4809      	ldr	r0, [pc, #36]	; (8001114 <read_bit+0x50>)
 80010f0:	f00a fdd4 	bl	800bc9c <HAL_UART_Transmit>
	HAL_UART_Receive(&UART, &data_in, 1, HAL_MAX_DELAY);
 80010f4:	1db9      	adds	r1, r7, #6
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	2201      	movs	r2, #1
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <read_bit+0x50>)
 80010fe:	f00a fe50 	bl	800bda2 <HAL_UART_Receive>

	return data_in & 0x01;
 8001102:	79bb      	ldrb	r3, [r7, #6]
 8001104:	f003 0301 	and.w	r3, r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40004800 	.word	0x40004800
 8001114:	20002430 	.word	0x20002430

08001118 <wire_read>:

uint8_t wire_read(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++)
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	e00e      	b.n	8001146 <wire_read+0x2e>
  {
    value >>= 1;
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	085b      	lsrs	r3, r3, #1
 800112c:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 800112e:	f7ff ffc9 	bl	80010c4 <read_bit>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <wire_read+0x28>
      value |= 0x80;
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800113e:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	3301      	adds	r3, #1
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2b07      	cmp	r3, #7
 800114a:	dded      	ble.n	8001128 <wire_read+0x10>
  }
  return value;
 800114c:	79fb      	ldrb	r3, [r7, #7]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <write_bit>:

static void write_bit(int value)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if (value)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00a      	beq.n	800117c <write_bit+0x24>
  {
    uint8_t data_out = 0xff;
 8001166:	23ff      	movs	r3, #255	; 0xff
 8001168:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 800116a:	f107 010f 	add.w	r1, r7, #15
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	2201      	movs	r2, #1
 8001174:	4808      	ldr	r0, [pc, #32]	; (8001198 <write_bit+0x40>)
 8001176:	f00a fd91 	bl	800bc9c <HAL_UART_Transmit>
  else
  {
    uint8_t data_out = 0x0;
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
  }
}
 800117a:	e009      	b.n	8001190 <write_bit+0x38>
    uint8_t data_out = 0x0;
 800117c:	2300      	movs	r3, #0
 800117e:	73bb      	strb	r3, [r7, #14]
    HAL_UART_Transmit(&UART, &data_out, 1, HAL_MAX_DELAY);
 8001180:	f107 010e 	add.w	r1, r7, #14
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	2201      	movs	r2, #1
 800118a:	4803      	ldr	r0, [pc, #12]	; (8001198 <write_bit+0x40>)
 800118c:	f00a fd86 	bl	800bc9c <HAL_UART_Transmit>
}
 8001190:	bf00      	nop
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20002430 	.word	0x20002430

0800119c <wire_write>:

void wire_write(uint8_t byte)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	e00b      	b.n	80011c4 <wire_write+0x28>
    write_bit(byte & 0x01);
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ffd0 	bl	8001158 <write_bit>
    byte >>= 1;
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	085b      	lsrs	r3, r3, #1
 80011bc:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3301      	adds	r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2b07      	cmp	r3, #7
 80011c8:	ddf0      	ble.n	80011ac <wire_write+0x10>
  }
}
 80011ca:	bf00      	nop
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	460a      	mov	r2, r1
 80011de:	71fb      	strb	r3, [r7, #7]
 80011e0:	4613      	mov	r3, r2
 80011e2:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	e016      	b.n	8001218 <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 80011ea:	79fa      	ldrb	r2, [r7, #7]
 80011ec:	79bb      	ldrb	r3, [r7, #6]
 80011ee:	4053      	eors	r3, r2
 80011f0:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	085b      	lsrs	r3, r3, #1
 80011f6:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 80011f8:	7afb      	ldrb	r3, [r7, #11]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d004      	beq.n	800120c <byte_crc+0x38>
      crc ^= 0x8c;
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8001208:	43db      	mvns	r3, r3
 800120a:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	085b      	lsrs	r3, r3, #1
 8001210:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	3301      	adds	r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b07      	cmp	r3, #7
 800121c:	dde5      	ble.n	80011ea <byte_crc+0x16>
  }
  return crc;
 800121e:	79fb      	ldrb	r3, [r7, #7]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	e00d      	b.n	800125a <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	4413      	add	r3, r2
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	7afb      	ldrb	r3, [r7, #11]
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ffc2 	bl	80011d4 <byte_crc>
 8001250:	4603      	mov	r3, r0
 8001252:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3301      	adds	r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	dbed      	blt.n	800123e <wire_crc+0x14>

    return crc;
 8001262:	7afb      	ldrb	r3, [r7, #11]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	font = font_t;
 8001274:	4a03      	ldr	r2, [pc, #12]	; (8001284 <GFX_SetFont+0x18>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6013      	str	r3, [r2, #0]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	2000085c 	.word	0x2000085c

08001288 <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d002      	beq.n	800129e <GFX_SetFontSize+0x16>
		size = size_t;
 8001298:	4a03      	ldr	r2, [pc, #12]	; (80012a8 <GFX_SetFontSize+0x20>)
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	7013      	strb	r3, [r2, #0]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	20000000 	.word	0x20000000

080012ac <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b089      	sub	sp, #36	; 0x24
 80012b0:	af02      	add	r7, sp, #8
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	4611      	mov	r1, r2
 80012b8:	461a      	mov	r2, r3
 80012ba:	460b      	mov	r3, r1
 80012bc:	71fb      	strb	r3, [r7, #7]
 80012be:	4613      	mov	r3, r2
 80012c0:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2b7e      	cmp	r3, #126	; 0x7e
 80012c6:	f200 80a3 	bhi.w	8001410 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80012ca:	2300      	movs	r3, #0
 80012cc:	75fb      	strb	r3, [r7, #23]
 80012ce:	e096      	b.n	80013fe <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 80012d0:	4b51      	ldr	r3, [pc, #324]	; (8001418 <GFX_DrawChar+0x16c>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	3b20      	subs	r3, #32
 80012d8:	494f      	ldr	r1, [pc, #316]	; (8001418 <GFX_DrawChar+0x16c>)
 80012da:	6809      	ldr	r1, [r1, #0]
 80012dc:	3101      	adds	r1, #1
 80012de:	7809      	ldrb	r1, [r1, #0]
 80012e0:	fb03 f101 	mul.w	r1, r3, r1
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
 80012e6:	440b      	add	r3, r1
 80012e8:	3302      	adds	r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80012f0:	2300      	movs	r3, #0
 80012f2:	757b      	strb	r3, [r7, #21]
 80012f4:	e078      	b.n	80013e8 <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 80012f6:	7dbb      	ldrb	r3, [r7, #22]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d032      	beq.n	8001366 <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8001300:	4b46      	ldr	r3, [pc, #280]	; (800141c <GFX_DrawChar+0x170>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d113      	bne.n	8001330 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8001308:	7dfb      	ldrb	r3, [r7, #23]
 800130a:	b29a      	uxth	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	b29b      	uxth	r3, r3
 8001310:	4413      	add	r3, r2
 8001312:	b29b      	uxth	r3, r3
 8001314:	b218      	sxth	r0, r3
 8001316:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800131a:	b29a      	uxth	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	b29b      	uxth	r3, r3
 8001320:	4413      	add	r3, r2
 8001322:	b29b      	uxth	r3, r3
 8001324:	b21b      	sxth	r3, r3
 8001326:	79ba      	ldrb	r2, [r7, #6]
 8001328:	4619      	mov	r1, r3
 800132a:	f002 fd7d 	bl	8003e28 <SSD1306_DrawPixel>
 800132e:	e052      	b.n	80013d6 <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	4a3a      	ldr	r2, [pc, #232]	; (800141c <GFX_DrawChar+0x170>)
 8001334:	7812      	ldrb	r2, [r2, #0]
 8001336:	fb03 f202 	mul.w	r2, r3, r2
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	18d0      	adds	r0, r2, r3
 800133e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001342:	4a36      	ldr	r2, [pc, #216]	; (800141c <GFX_DrawChar+0x170>)
 8001344:	7812      	ldrb	r2, [r2, #0]
 8001346:	fb03 f202 	mul.w	r2, r3, r2
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	18d1      	adds	r1, r2, r3
 800134e:	4b33      	ldr	r3, [pc, #204]	; (800141c <GFX_DrawChar+0x170>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	b29a      	uxth	r2, r3
 8001354:	4b31      	ldr	r3, [pc, #196]	; (800141c <GFX_DrawChar+0x170>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	b29c      	uxth	r4, r3
 800135a:	79bb      	ldrb	r3, [r7, #6]
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	4623      	mov	r3, r4
 8001360:	f000 f9a3 	bl	80016aa <GFX_DrawFillRectangle>
 8001364:	e037      	b.n	80013d6 <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 8001366:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800136a:	2b00      	cmp	r3, #0
 800136c:	d133      	bne.n	80013d6 <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 800136e:	4b2b      	ldr	r3, [pc, #172]	; (800141c <GFX_DrawChar+0x170>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d114      	bne.n	80013a0 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 8001376:	7dfb      	ldrb	r3, [r7, #23]
 8001378:	b29a      	uxth	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	b29b      	uxth	r3, r3
 800137e:	4413      	add	r3, r2
 8001380:	b29b      	uxth	r3, r3
 8001382:	b218      	sxth	r0, r3
 8001384:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001388:	b29a      	uxth	r2, r3
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	b29b      	uxth	r3, r3
 800138e:	4413      	add	r3, r2
 8001390:	b29b      	uxth	r3, r3
 8001392:	b21b      	sxth	r3, r3
 8001394:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001398:	4619      	mov	r1, r3
 800139a:	f002 fd45 	bl	8003e28 <SSD1306_DrawPixel>
 800139e:	e01a      	b.n	80013d6 <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 80013a0:	7dfb      	ldrb	r3, [r7, #23]
 80013a2:	4a1e      	ldr	r2, [pc, #120]	; (800141c <GFX_DrawChar+0x170>)
 80013a4:	7812      	ldrb	r2, [r2, #0]
 80013a6:	fb03 f202 	mul.w	r2, r3, r2
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	18d0      	adds	r0, r2, r3
 80013ae:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80013b2:	4a1a      	ldr	r2, [pc, #104]	; (800141c <GFX_DrawChar+0x170>)
 80013b4:	7812      	ldrb	r2, [r2, #0]
 80013b6:	fb03 f202 	mul.w	r2, r3, r2
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	18d1      	adds	r1, r2, r3
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <GFX_DrawChar+0x170>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <GFX_DrawChar+0x170>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b29c      	uxth	r4, r3
 80013ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	4623      	mov	r3, r4
 80013d2:	f000 f96a 	bl	80016aa <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80013d6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	3301      	adds	r3, #1
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	757b      	strb	r3, [r7, #21]
 80013e2:	7dbb      	ldrb	r3, [r7, #22]
 80013e4:	085b      	lsrs	r3, r3, #1
 80013e6:	75bb      	strb	r3, [r7, #22]
 80013e8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80013ec:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <GFX_DrawChar+0x16c>)
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	7812      	ldrb	r2, [r2, #0]
 80013f2:	4293      	cmp	r3, r2
 80013f4:	f6ff af7f 	blt.w	80012f6 <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80013f8:	7dfb      	ldrb	r3, [r7, #23]
 80013fa:	3301      	adds	r3, #1
 80013fc:	75fb      	strb	r3, [r7, #23]
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <GFX_DrawChar+0x16c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	3301      	adds	r3, #1
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	7dfa      	ldrb	r2, [r7, #23]
 8001408:	429a      	cmp	r2, r3
 800140a:	f4ff af61 	bcc.w	80012d0 <GFX_DrawChar+0x24>
 800140e:	e000      	b.n	8001412 <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8001410:	bf00      	nop
            }
        }
    }
}
 8001412:	371c      	adds	r7, #28
 8001414:	46bd      	mov	sp, r7
 8001416:	bd90      	pop	{r4, r7, pc}
 8001418:	2000085c 	.word	0x2000085c
 800141c:	20000000 	.word	0x20000000

08001420 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af02      	add	r7, sp, #8
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8001438:	e03e      	b.n	80014b8 <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 800143a:	78f9      	ldrb	r1, [r7, #3]
 800143c:	7cfa      	ldrb	r2, [r7, #19]
 800143e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	460b      	mov	r3, r1
 8001446:	68b9      	ldr	r1, [r7, #8]
 8001448:	6978      	ldr	r0, [r7, #20]
 800144a:	f7ff ff2f 	bl	80012ac <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <GFX_DrawString+0xb0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	3301      	adds	r3, #1
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <GFX_DrawString+0xb4>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	fb02 f303 	mul.w	r3, r2, r3
 8001460:	3301      	adds	r3, #1
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	4413      	add	r3, r2
 8001466:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 8001468:	f897 3020 	ldrb.w	r3, [r7, #32]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d120      	bne.n	80014b2 <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001470:	2300      	movs	r3, #0
 8001472:	74bb      	strb	r3, [r7, #18]
 8001474:	e012      	b.n	800149c <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	b29b      	uxth	r3, r3
 800147a:	3b01      	subs	r3, #1
 800147c:	b29b      	uxth	r3, r3
 800147e:	b218      	sxth	r0, r3
 8001480:	7cbb      	ldrb	r3, [r7, #18]
 8001482:	b29a      	uxth	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	b29b      	uxth	r3, r3
 8001488:	4413      	add	r3, r2
 800148a:	b29b      	uxth	r3, r3
 800148c:	b21b      	sxth	r3, r3
 800148e:	2200      	movs	r2, #0
 8001490:	4619      	mov	r1, r3
 8001492:	f002 fcc9 	bl	8003e28 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001496:	7cbb      	ldrb	r3, [r7, #18]
 8001498:	3301      	adds	r3, #1
 800149a:	74bb      	strb	r3, [r7, #18]
 800149c:	7cba      	ldrb	r2, [r7, #18]
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <GFX_DrawString+0xb0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	4619      	mov	r1, r3
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <GFX_DrawString+0xb4>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	fb01 f303 	mul.w	r3, r1, r3
 80014ae:	429a      	cmp	r2, r3
 80014b0:	dbe1      	blt.n	8001476 <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1ba      	bne.n	800143a <GFX_DrawString+0x1a>
	}
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2000085c 	.word	0x2000085c
 80014d4:	20000000 	.word	0x20000000

080014d8 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08c      	sub	sp, #48	; 0x30
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80014f0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1acb      	subs	r3, r1, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	bfb8      	it	lt
 80014fe:	425b      	neglt	r3, r3
 8001500:	429a      	cmp	r2, r3
 8001502:	bfcc      	ite	gt
 8001504:	2301      	movgt	r3, #1
 8001506:	2300      	movle	r3, #0
 8001508:	b2db      	uxtb	r3, r3
 800150a:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 800150c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001510:	2b00      	cmp	r3, #0
 8001512:	d00b      	beq.n	800152c <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	623b      	str	r3, [r7, #32]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	6a3b      	ldr	r3, [r7, #32]
 800152a:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	429a      	cmp	r2, r3
 8001532:	dd0b      	ble.n	800154c <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	61fb      	str	r3, [r7, #28]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	61bb      	str	r3, [r7, #24]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	b29a      	uxth	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	b29b      	uxth	r3, r3
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	b29b      	uxth	r3, r3
 8001558:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	bfb8      	it	lt
 8001564:	425b      	neglt	r3, r3
 8001566:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001568:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800156c:	0fda      	lsrs	r2, r3, #31
 800156e:	4413      	add	r3, r2
 8001570:	105b      	asrs	r3, r3, #1
 8001572:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	da02      	bge.n	8001582 <GFX_WriteLine+0xaa>
	        ystep = 1;
 800157c:	2301      	movs	r3, #1
 800157e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001580:	e030      	b.n	80015e4 <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 8001582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001586:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8001588:	e02c      	b.n	80015e4 <GFX_WriteLine+0x10c>
	        if (steep) {
 800158a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800158e:	2b00      	cmp	r3, #0
 8001590:	d009      	beq.n	80015a6 <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	b21b      	sxth	r3, r3
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	b211      	sxth	r1, r2
 800159a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800159e:	4618      	mov	r0, r3
 80015a0:	f002 fc42 	bl	8003e28 <SSD1306_DrawPixel>
 80015a4:	e008      	b.n	80015b8 <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	b211      	sxth	r1, r2
 80015ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80015b2:	4618      	mov	r0, r3
 80015b4:	f002 fc38 	bl	8003e28 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 80015b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80015ba:	8abb      	ldrh	r3, [r7, #20]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	b29b      	uxth	r3, r3
 80015c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80015c2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	da09      	bge.n	80015de <GFX_WriteLine+0x106>
	            y_start += ystep;
 80015ca:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	4413      	add	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80015d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80015d6:	8afb      	ldrh	r3, [r7, #22]
 80015d8:	4413      	add	r3, r2
 80015da:	b29b      	uxth	r3, r3
 80015dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	3301      	adds	r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	ddce      	ble.n	800158a <GFX_WriteLine+0xb2>
	        }
	    }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3730      	adds	r7, #48	; 0x30
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af02      	add	r7, sp, #8
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	1e5a      	subs	r2, r3, #1
 800160c:	78fb      	ldrb	r3, [r7, #3]
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	4613      	mov	r3, r2
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	68b9      	ldr	r1, [r7, #8]
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f7ff ff5e 	bl	80014d8 <GFX_WriteLine>
}
 800161c:	bf00      	nop
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <GFX_DrawFastHLine>:

void GFX_DrawFastHLine(int x_start, int y_start, int w, uint8_t color)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af02      	add	r7, sp, #8
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start+w-1, y_start, color);
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4413      	add	r3, r2
 8001638:	1e5a      	subs	r2, r3, #1
 800163a:	78fb      	ldrb	r3, [r7, #3]
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f7ff ff48 	bl	80014d8 <GFX_WriteLine>
}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <GFX_DrawRectangle>:
	    }
}
#endif
#if USING_RECTANGLE == 1
void GFX_DrawRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	4611      	mov	r1, r2
 800165c:	461a      	mov	r2, r3
 800165e:	460b      	mov	r3, r1
 8001660:	80fb      	strh	r3, [r7, #6]
 8001662:	4613      	mov	r3, r2
 8001664:	80bb      	strh	r3, [r7, #4]

    GFX_DrawFastHLine(x, y, w, color);
 8001666:	88fa      	ldrh	r2, [r7, #6]
 8001668:	7e3b      	ldrb	r3, [r7, #24]
 800166a:	68b9      	ldr	r1, [r7, #8]
 800166c:	68f8      	ldr	r0, [r7, #12]
 800166e:	f7ff ffd9 	bl	8001624 <GFX_DrawFastHLine>
    GFX_DrawFastHLine(x, y+h-1, w, color);
 8001672:	88ba      	ldrh	r2, [r7, #4]
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	4413      	add	r3, r2
 8001678:	1e59      	subs	r1, r3, #1
 800167a:	88fa      	ldrh	r2, [r7, #6]
 800167c:	7e3b      	ldrb	r3, [r7, #24]
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f7ff ffd0 	bl	8001624 <GFX_DrawFastHLine>
    GFX_DrawFastVLine(x, y, h, color);
 8001684:	88ba      	ldrh	r2, [r7, #4]
 8001686:	7e3b      	ldrb	r3, [r7, #24]
 8001688:	68b9      	ldr	r1, [r7, #8]
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f7ff ffb3 	bl	80015f6 <GFX_DrawFastVLine>
    GFX_DrawFastVLine(x+w-1, y, h, color);
 8001690:	88fa      	ldrh	r2, [r7, #6]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4413      	add	r3, r2
 8001696:	1e58      	subs	r0, r3, #1
 8001698:	88ba      	ldrh	r2, [r7, #4]
 800169a:	7e3b      	ldrb	r3, [r7, #24]
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	f7ff ffaa 	bl	80015f6 <GFX_DrawFastVLine>

}
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <GFX_DrawFillRectangle>:
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	4611      	mov	r1, r2
 80016b6:	461a      	mov	r2, r3
 80016b8:	460b      	mov	r3, r1
 80016ba:	80fb      	strh	r3, [r7, #6]
 80016bc:	4613      	mov	r3, r2
 80016be:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	e009      	b.n	80016da <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 80016c6:	88ba      	ldrh	r2, [r7, #4]
 80016c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	6978      	ldr	r0, [r7, #20]
 80016d0:	f7ff ff91 	bl	80015f6 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3301      	adds	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	88fa      	ldrh	r2, [r7, #6]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4413      	add	r3, r2
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	dbef      	blt.n	80016c6 <GFX_DrawFillRectangle+0x1c>
    }

}
 80016e6:	bf00      	nop
 80016e8:	bf00      	nop
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <GFX_DrawCircle>:
#endif
#if USING_CIRCLE == 1
void GFX_DrawCircle(int x0, int y0, uint16_t r, uint8_t color)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	4611      	mov	r1, r2
 80016fc:	461a      	mov	r2, r3
 80016fe:	460b      	mov	r3, r1
 8001700:	80fb      	strh	r3, [r7, #6]
 8001702:	4613      	mov	r3, r2
 8001704:	717b      	strb	r3, [r7, #5]
    int16_t f = 1 - r;
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	f1c3 0301 	rsb	r3, r3, #1
 800170c:	b29b      	uxth	r3, r3
 800170e:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8001710:	2301      	movs	r3, #1
 8001712:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8001714:	88fb      	ldrh	r3, [r7, #6]
 8001716:	461a      	mov	r2, r3
 8001718:	03d2      	lsls	r2, r2, #15
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	b29b      	uxth	r3, r3
 8001720:	837b      	strh	r3, [r7, #26]
    int16_t x = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	833b      	strh	r3, [r7, #24]
    int16_t y = r;
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	82fb      	strh	r3, [r7, #22]

    GFX_DrawPixel(x0  , y0+r, color);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	b218      	sxth	r0, r3
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	b29a      	uxth	r2, r3
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	4413      	add	r3, r2
 8001736:	b29b      	uxth	r3, r3
 8001738:	b21b      	sxth	r3, r3
 800173a:	797a      	ldrb	r2, [r7, #5]
 800173c:	4619      	mov	r1, r3
 800173e:	f002 fb73 	bl	8003e28 <SSD1306_DrawPixel>
    GFX_DrawPixel(x0  , y0-r, color);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	b218      	sxth	r0, r3
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	b29a      	uxth	r2, r3
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	b29b      	uxth	r3, r3
 8001750:	b21b      	sxth	r3, r3
 8001752:	797a      	ldrb	r2, [r7, #5]
 8001754:	4619      	mov	r1, r3
 8001756:	f002 fb67 	bl	8003e28 <SSD1306_DrawPixel>
    GFX_DrawPixel(x0+r, y0  , color);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	b29a      	uxth	r2, r3
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	4413      	add	r3, r2
 8001762:	b29b      	uxth	r3, r3
 8001764:	b21b      	sxth	r3, r3
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	b211      	sxth	r1, r2
 800176a:	797a      	ldrb	r2, [r7, #5]
 800176c:	4618      	mov	r0, r3
 800176e:	f002 fb5b 	bl	8003e28 <SSD1306_DrawPixel>
    GFX_DrawPixel(x0-r, y0  , color);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	b29a      	uxth	r2, r3
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	b29b      	uxth	r3, r3
 800177c:	b21b      	sxth	r3, r3
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	b211      	sxth	r1, r2
 8001782:	797a      	ldrb	r2, [r7, #5]
 8001784:	4618      	mov	r0, r3
 8001786:	f002 fb4f 	bl	8003e28 <SSD1306_DrawPixel>

    while (x<y) {
 800178a:	e0a1      	b.n	80018d0 <GFX_DrawCircle+0x1e0>
        if (f >= 0) {
 800178c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001790:	2b00      	cmp	r3, #0
 8001792:	db0e      	blt.n	80017b2 <GFX_DrawCircle+0xc2>
            y--;
 8001794:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001798:	b29b      	uxth	r3, r3
 800179a:	3b01      	subs	r3, #1
 800179c:	b29b      	uxth	r3, r3
 800179e:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 80017a0:	8b7b      	ldrh	r3, [r7, #26]
 80017a2:	3302      	adds	r3, #2
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	837b      	strh	r3, [r7, #26]
            f += ddF_y;
 80017a8:	8bfa      	ldrh	r2, [r7, #30]
 80017aa:	8b7b      	ldrh	r3, [r7, #26]
 80017ac:	4413      	add	r3, r2
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 80017b2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	3301      	adds	r3, #1
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 80017be:	8bbb      	ldrh	r3, [r7, #28]
 80017c0:	3302      	adds	r3, #2
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	83bb      	strh	r3, [r7, #28]
        f += ddF_x;
 80017c6:	8bfa      	ldrh	r2, [r7, #30]
 80017c8:	8bbb      	ldrh	r3, [r7, #28]
 80017ca:	4413      	add	r3, r2
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	83fb      	strh	r3, [r7, #30]

        GFX_DrawPixel(x0 + x, y0 + y, color);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	8b3b      	ldrh	r3, [r7, #24]
 80017d6:	4413      	add	r3, r2
 80017d8:	b29b      	uxth	r3, r3
 80017da:	b218      	sxth	r0, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	b29a      	uxth	r2, r3
 80017e0:	8afb      	ldrh	r3, [r7, #22]
 80017e2:	4413      	add	r3, r2
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	797a      	ldrb	r2, [r7, #5]
 80017ea:	4619      	mov	r1, r3
 80017ec:	f002 fb1c 	bl	8003e28 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 - x, y0 + y, color);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	8b3b      	ldrh	r3, [r7, #24]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	b218      	sxth	r0, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	b29a      	uxth	r2, r3
 8001800:	8afb      	ldrh	r3, [r7, #22]
 8001802:	4413      	add	r3, r2
 8001804:	b29b      	uxth	r3, r3
 8001806:	b21b      	sxth	r3, r3
 8001808:	797a      	ldrb	r2, [r7, #5]
 800180a:	4619      	mov	r1, r3
 800180c:	f002 fb0c 	bl	8003e28 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 + x, y0 - y, color);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	b29a      	uxth	r2, r3
 8001814:	8b3b      	ldrh	r3, [r7, #24]
 8001816:	4413      	add	r3, r2
 8001818:	b29b      	uxth	r3, r3
 800181a:	b218      	sxth	r0, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	b29a      	uxth	r2, r3
 8001820:	8afb      	ldrh	r3, [r7, #22]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	b29b      	uxth	r3, r3
 8001826:	b21b      	sxth	r3, r3
 8001828:	797a      	ldrb	r2, [r7, #5]
 800182a:	4619      	mov	r1, r3
 800182c:	f002 fafc 	bl	8003e28 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 - x, y0 - y, color);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	b29a      	uxth	r2, r3
 8001834:	8b3b      	ldrh	r3, [r7, #24]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	b29b      	uxth	r3, r3
 800183a:	b218      	sxth	r0, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	b29a      	uxth	r2, r3
 8001840:	8afb      	ldrh	r3, [r7, #22]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	b29b      	uxth	r3, r3
 8001846:	b21b      	sxth	r3, r3
 8001848:	797a      	ldrb	r2, [r7, #5]
 800184a:	4619      	mov	r1, r3
 800184c:	f002 faec 	bl	8003e28 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 + y, y0 + x, color);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	b29a      	uxth	r2, r3
 8001854:	8afb      	ldrh	r3, [r7, #22]
 8001856:	4413      	add	r3, r2
 8001858:	b29b      	uxth	r3, r3
 800185a:	b218      	sxth	r0, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	b29a      	uxth	r2, r3
 8001860:	8b3b      	ldrh	r3, [r7, #24]
 8001862:	4413      	add	r3, r2
 8001864:	b29b      	uxth	r3, r3
 8001866:	b21b      	sxth	r3, r3
 8001868:	797a      	ldrb	r2, [r7, #5]
 800186a:	4619      	mov	r1, r3
 800186c:	f002 fadc 	bl	8003e28 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 - y, y0 + x, color);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	b29a      	uxth	r2, r3
 8001874:	8afb      	ldrh	r3, [r7, #22]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	b29b      	uxth	r3, r3
 800187a:	b218      	sxth	r0, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	b29a      	uxth	r2, r3
 8001880:	8b3b      	ldrh	r3, [r7, #24]
 8001882:	4413      	add	r3, r2
 8001884:	b29b      	uxth	r3, r3
 8001886:	b21b      	sxth	r3, r3
 8001888:	797a      	ldrb	r2, [r7, #5]
 800188a:	4619      	mov	r1, r3
 800188c:	f002 facc 	bl	8003e28 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 + y, y0 - x, color);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	b29a      	uxth	r2, r3
 8001894:	8afb      	ldrh	r3, [r7, #22]
 8001896:	4413      	add	r3, r2
 8001898:	b29b      	uxth	r3, r3
 800189a:	b218      	sxth	r0, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	b29a      	uxth	r2, r3
 80018a0:	8b3b      	ldrh	r3, [r7, #24]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	b21b      	sxth	r3, r3
 80018a8:	797a      	ldrb	r2, [r7, #5]
 80018aa:	4619      	mov	r1, r3
 80018ac:	f002 fabc 	bl	8003e28 <SSD1306_DrawPixel>
        GFX_DrawPixel(x0 - y, y0 - x, color);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	8afb      	ldrh	r3, [r7, #22]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	b218      	sxth	r0, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	b29a      	uxth	r2, r3
 80018c0:	8b3b      	ldrh	r3, [r7, #24]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	b21b      	sxth	r3, r3
 80018c8:	797a      	ldrb	r2, [r7, #5]
 80018ca:	4619      	mov	r1, r3
 80018cc:	f002 faac 	bl	8003e28 <SSD1306_DrawPixel>
    while (x<y) {
 80018d0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80018d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018d8:	429a      	cmp	r2, r3
 80018da:	f6ff af57 	blt.w	800178c <GFX_DrawCircle+0x9c>
    }

}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	3720      	adds	r7, #32
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <GFX_DrawFillCircleHelper>:
    }
}
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, uint8_t color)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b088      	sub	sp, #32
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	4611      	mov	r1, r2
 80018f4:	461a      	mov	r2, r3
 80018f6:	460b      	mov	r3, r1
 80018f8:	80fb      	strh	r3, [r7, #6]
 80018fa:	4613      	mov	r3, r2
 80018fc:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	f1c3 0301 	rsb	r3, r3, #1
 8001904:	b29b      	uxth	r3, r3
 8001906:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8001908:	2301      	movs	r3, #1
 800190a:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 800190c:	88fb      	ldrh	r3, [r7, #6]
 800190e:	461a      	mov	r2, r3
 8001910:	03d2      	lsls	r2, r2, #15
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	b29b      	uxth	r3, r3
 8001918:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8001922:	e077      	b.n	8001a14 <GFX_DrawFillCircleHelper+0x12c>
        if (f >= 0) {
 8001924:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001928:	2b00      	cmp	r3, #0
 800192a:	db0e      	blt.n	800194a <GFX_DrawFillCircleHelper+0x62>
            y--;
 800192c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001930:	b29b      	uxth	r3, r3
 8001932:	3b01      	subs	r3, #1
 8001934:	b29b      	uxth	r3, r3
 8001936:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8001938:	8b7b      	ldrh	r3, [r7, #26]
 800193a:	3302      	adds	r3, #2
 800193c:	b29b      	uxth	r3, r3
 800193e:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8001940:	8bfa      	ldrh	r2, [r7, #30]
 8001942:	8b7b      	ldrh	r3, [r7, #26]
 8001944:	4413      	add	r3, r2
 8001946:	b29b      	uxth	r3, r3
 8001948:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 800194a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800194e:	b29b      	uxth	r3, r3
 8001950:	3301      	adds	r3, #1
 8001952:	b29b      	uxth	r3, r3
 8001954:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8001956:	8bbb      	ldrh	r3, [r7, #28]
 8001958:	3302      	adds	r3, #2
 800195a:	b29b      	uxth	r3, r3
 800195c:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 800195e:	8bfa      	ldrh	r2, [r7, #30]
 8001960:	8bbb      	ldrh	r3, [r7, #28]
 8001962:	4413      	add	r3, r2
 8001964:	b29b      	uxth	r3, r3
 8001966:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8001968:	797b      	ldrb	r3, [r7, #5]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d025      	beq.n	80019be <GFX_DrawFillCircleHelper+0xd6>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 8001972:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	18d0      	adds	r0, r2, r3
 800197a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	1ad1      	subs	r1, r2, r3
 8001982:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800198e:	441a      	add	r2, r3
 8001990:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001994:	f7ff fe2f 	bl	80015f6 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8001998:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	18d0      	adds	r0, r2, r3
 80019a0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	1ad1      	subs	r1, r2, r3
 80019a8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	1c5a      	adds	r2, r3, #1
 80019b0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80019b4:	441a      	add	r2, r3
 80019b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019ba:	f7ff fe1c 	bl	80015f6 <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 80019be:	797b      	ldrb	r3, [r7, #5]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d025      	beq.n	8001a14 <GFX_DrawFillCircleHelper+0x12c>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 80019c8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	1ad0      	subs	r0, r2, r3
 80019d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	1ad1      	subs	r1, r2, r3
 80019d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80019e4:	441a      	add	r2, r3
 80019e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019ea:	f7ff fe04 	bl	80015f6 <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 80019ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	1ad0      	subs	r0, r2, r3
 80019f6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	1ad1      	subs	r1, r2, r3
 80019fe:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001a0a:	441a      	add	r2, r3
 8001a0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a10:	f7ff fdf1 	bl	80015f6 <GFX_DrawFastVLine>
    while (x<y) {
 8001a14:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001a18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	db81      	blt.n	8001924 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	3720      	adds	r7, #32
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <GFX_DrawFillCircle>:
#endif
#if USING_FILL_CIRCLE == 1
void GFX_DrawFillCircle(int x0, int y0, uint16_t r, uint8_t color)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af02      	add	r7, sp, #8
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	4611      	mov	r1, r2
 8001a36:	461a      	mov	r2, r3
 8001a38:	460b      	mov	r3, r1
 8001a3a:	80fb      	strh	r3, [r7, #6]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	717b      	strb	r3, [r7, #5]

	GFX_DrawFastVLine(x0, y0-r, 2*r+1, color);
 8001a40:	88fb      	ldrh	r3, [r7, #6]
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	1ad1      	subs	r1, r2, r3
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	797b      	ldrb	r3, [r7, #5]
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f7ff fdd1 	bl	80015f6 <GFX_DrawFastVLine>
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
 8001a54:	88fa      	ldrh	r2, [r7, #6]
 8001a56:	797b      	ldrb	r3, [r7, #5]
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2303      	movs	r3, #3
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f7ff ff40 	bl	80018e8 <GFX_DrawFillCircleHelper>
}
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <m24cxxInit>:
#include "M24Cxx.h"



void m24cxxInit(m24cxx_t *m24, I2C_HandleTypeDef *i2c, uint8_t addr, uint16_t memsize, GPIO_TypeDef *WcPort, uint16_t WcPin)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	460b      	mov	r3, r1
 8001a80:	71fb      	strb	r3, [r7, #7]
 8001a82:	4613      	mov	r3, r2
 8001a84:	80bb      	strh	r3, [r7, #4]
	m24 -> addr    = addr<<1;
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	701a      	strb	r2, [r3, #0]
	m24 -> i2c     = i2c;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	605a      	str	r2, [r3, #4]
	m24 -> memsize = memsize;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	88ba      	ldrh	r2, [r7, #4]
 8001a9a:	811a      	strh	r2, [r3, #8]
	m24 -> WcPort  = WcPort;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	60da      	str	r2, [r3, #12]
	m24 -> WcPin   = WcPin;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8bba      	ldrh	r2, [r7, #28]
 8001aa6:	821a      	strh	r2, [r3, #16]
	HAL_GPIO_WritePin(m24->WcPort, m24->WcPin, SET);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	68d8      	ldr	r0, [r3, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8a1b      	ldrh	r3, [r3, #16]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f004 fba1 	bl	80061fa <HAL_GPIO_WritePin>
}
 8001ab8:	bf00      	nop
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <m24cxxWcSetIt>:
		}
	HAL_GPIO_WritePin(m24->WcPort, m24->WcPin, SET);
}

void m24cxxWcSetIt(m24cxx_t *m24, I2C_HandleTypeDef *hi2c)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
	if(hi2c->Instance == m24->i2c->Instance && m24->WcIsZero == 1)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d10e      	bne.n	8001af6 <m24cxxWcSetIt+0x36>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7c9b      	ldrb	r3, [r3, #18]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d10a      	bne.n	8001af6 <m24cxxWcSetIt+0x36>
	{
		HAL_GPIO_WritePin(m24->WcPort, m24->WcPin, SET);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68d8      	ldr	r0, [r3, #12]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	8a1b      	ldrh	r3, [r3, #16]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4619      	mov	r1, r3
 8001aec:	f004 fb85 	bl	80061fa <HAL_GPIO_WritePin>
		m24->WcIsZero = 0;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	749a      	strb	r2, [r3, #18]
	}
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b10:	4b2e      	ldr	r3, [pc, #184]	; (8001bcc <MX_ADC1_Init+0xcc>)
 8001b12:	4a2f      	ldr	r2, [pc, #188]	; (8001bd0 <MX_ADC1_Init+0xd0>)
 8001b14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b16:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <MX_ADC1_Init+0xcc>)
 8001b18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b1e:	4b2b      	ldr	r3, [pc, #172]	; (8001bcc <MX_ADC1_Init+0xcc>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b24:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <MX_ADC1_Init+0xcc>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b2a:	4b28      	ldr	r3, [pc, #160]	; (8001bcc <MX_ADC1_Init+0xcc>)
 8001b2c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001b30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b32:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <MX_ADC1_Init+0xcc>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001b38:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <MX_ADC1_Init+0xcc>)
 8001b3a:	2204      	movs	r2, #4
 8001b3c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b3e:	4823      	ldr	r0, [pc, #140]	; (8001bcc <MX_ADC1_Init+0xcc>)
 8001b40:	f002 ffaa 	bl	8004a98 <HAL_ADC_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001b4a:	f001 fa91 	bl	8003070 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001b4e:	2306      	movs	r3, #6
 8001b50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b52:	2301      	movs	r3, #1
 8001b54:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001b56:	2307      	movs	r3, #7
 8001b58:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	481b      	ldr	r0, [pc, #108]	; (8001bcc <MX_ADC1_Init+0xcc>)
 8001b60:	f003 fa3c 	bl	8004fdc <HAL_ADC_ConfigChannel>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001b6a:	f001 fa81 	bl	8003070 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001b6e:	2307      	movs	r3, #7
 8001b70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b72:	2302      	movs	r3, #2
 8001b74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4814      	ldr	r0, [pc, #80]	; (8001bcc <MX_ADC1_Init+0xcc>)
 8001b7c:	f003 fa2e 	bl	8004fdc <HAL_ADC_ConfigChannel>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001b86:	f001 fa73 	bl	8003070 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	4619      	mov	r1, r3
 8001b96:	480d      	ldr	r0, [pc, #52]	; (8001bcc <MX_ADC1_Init+0xcc>)
 8001b98:	f003 fa20 	bl	8004fdc <HAL_ADC_ConfigChannel>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001ba2:	f001 fa65 	bl	8003070 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001ba6:	2310      	movs	r3, #16
 8001ba8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001baa:	2304      	movs	r3, #4
 8001bac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4806      	ldr	r0, [pc, #24]	; (8001bcc <MX_ADC1_Init+0xcc>)
 8001bb4:	f003 fa12 	bl	8004fdc <HAL_ADC_ConfigChannel>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001bbe:	f001 fa57 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000860 	.word	0x20000860
 8001bd0:	40012400 	.word	0x40012400

08001bd4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	; 0x28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bdc:	f107 0318 	add.w	r3, r7, #24
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a33      	ldr	r2, [pc, #204]	; (8001cbc <HAL_ADC_MspInit+0xe8>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d15f      	bne.n	8001cb4 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bf4:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <HAL_ADC_MspInit+0xec>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	4a31      	ldr	r2, [pc, #196]	; (8001cc0 <HAL_ADC_MspInit+0xec>)
 8001bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bfe:	6193      	str	r3, [r2, #24]
 8001c00:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <HAL_ADC_MspInit+0xec>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0c:	4b2c      	ldr	r3, [pc, #176]	; (8001cc0 <HAL_ADC_MspInit+0xec>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	4a2b      	ldr	r2, [pc, #172]	; (8001cc0 <HAL_ADC_MspInit+0xec>)
 8001c12:	f043 0304 	orr.w	r3, r3, #4
 8001c16:	6193      	str	r3, [r2, #24]
 8001c18:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <HAL_ADC_MspInit+0xec>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c24:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <HAL_ADC_MspInit+0xec>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4a25      	ldr	r2, [pc, #148]	; (8001cc0 <HAL_ADC_MspInit+0xec>)
 8001c2a:	f043 0308 	orr.w	r3, r3, #8
 8001c2e:	6193      	str	r3, [r2, #24]
 8001c30:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <HAL_ADC_MspInit+0xec>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c3c:	23c0      	movs	r3, #192	; 0xc0
 8001c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c40:	2303      	movs	r3, #3
 8001c42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	f107 0318 	add.w	r3, r7, #24
 8001c48:	4619      	mov	r1, r3
 8001c4a:	481e      	ldr	r0, [pc, #120]	; (8001cc4 <HAL_ADC_MspInit+0xf0>)
 8001c4c:	f004 f92a 	bl	8005ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c50:	2301      	movs	r3, #1
 8001c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c54:	2303      	movs	r3, #3
 8001c56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c58:	f107 0318 	add.w	r3, r7, #24
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	481a      	ldr	r0, [pc, #104]	; (8001cc8 <HAL_ADC_MspInit+0xf4>)
 8001c60:	f004 f920 	bl	8005ea4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001c64:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_ADC_MspInit+0xf8>)
 8001c66:	4a1a      	ldr	r2, [pc, #104]	; (8001cd0 <HAL_ADC_MspInit+0xfc>)
 8001c68:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c6a:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <HAL_ADC_MspInit+0xf8>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c70:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <HAL_ADC_MspInit+0xf8>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <HAL_ADC_MspInit+0xf8>)
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <HAL_ADC_MspInit+0xf8>)
 8001c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c82:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c84:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <HAL_ADC_MspInit+0xf8>)
 8001c86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c8a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <HAL_ADC_MspInit+0xf8>)
 8001c8e:	2220      	movs	r2, #32
 8001c90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c92:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <HAL_ADC_MspInit+0xf8>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c98:	480c      	ldr	r0, [pc, #48]	; (8001ccc <HAL_ADC_MspInit+0xf8>)
 8001c9a:	f003 fcaf 	bl	80055fc <HAL_DMA_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001ca4:	f001 f9e4 	bl	8003070 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a08      	ldr	r2, [pc, #32]	; (8001ccc <HAL_ADC_MspInit+0xf8>)
 8001cac:	621a      	str	r2, [r3, #32]
 8001cae:	4a07      	ldr	r2, [pc, #28]	; (8001ccc <HAL_ADC_MspInit+0xf8>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3728      	adds	r7, #40	; 0x28
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40012400 	.word	0x40012400
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40010800 	.word	0x40010800
 8001cc8:	40010c00 	.word	0x40010c00
 8001ccc:	20000890 	.word	0x20000890
 8001cd0:	40020008 	.word	0x40020008

08001cd4 <ButtonInitKey>:
#include "main.h"
#include "button.h"

//Button init
void ButtonInitKey(button_t * Key, GPIO_TypeDef *GpioPort, uint16_t GpioPin, uint32_t TimerDebounce, uint32_t TimerLongPressed, uint32_t TimerRepeat)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	80fb      	strh	r3, [r7, #6]
	Key->State = IDLE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
	Key->GpioPort = GpioPort;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	605a      	str	r2, [r3, #4]
	Key->GpioPin = GpioPin;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	88fa      	ldrh	r2, [r7, #6]
 8001cf4:	811a      	strh	r2, [r3, #8]
	Key->TimerDebounce = TimerDebounce;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	611a      	str	r2, [r3, #16]
	Key->TimerLongPressed = TimerLongPressed;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	615a      	str	r2, [r3, #20]
	Key->TimerRepeat = TimerRepeat;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	619a      	str	r2, [r3, #24]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr

08001d12 <ButtonRegisterPressCallback>:
	Key->TimerRepeat = Miliseconds;
}

//Callbacks
void ButtonRegisterPressCallback(button_t *Key, void *Callback)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
	Key->ButtonPressed = Callback;
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	61da      	str	r2, [r3, #28]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <ButtonRegisterRepeatCallback>:
{
	Key->ButtonLongPressed = Callback;
}

void ButtonRegisterRepeatCallback(button_t *Key, void *Callback)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
	Key->ButtonRepeat = Callback;
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <ButtonIdleRoutine>:
{
	Key->ButtonRelease = Callback;
}
//States routine
void ButtonIdleRoutine(button_t *Key)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	891b      	ldrh	r3, [r3, #8]
 8001d56:	4619      	mov	r1, r3
 8001d58:	4610      	mov	r0, r2
 8001d5a:	f004 fa37 	bl	80061cc <HAL_GPIO_ReadPin>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d107      	bne.n	8001d74 <ButtonIdleRoutine+0x2e>
	{
		Key->LastTick = HAL_GetTick();
 8001d64:	f002 fe8e 	bl	8004a84 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	60da      	str	r2, [r3, #12]
		Key->State = DEBOUNCE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	701a      	strb	r2, [r3, #0]
	}
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <ButtonDebounceRoutine>:

void ButtonDebounceRoutine(button_t *Key)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - Key->LastTick) >= Key->TimerDebounce)
 8001d84:	f002 fe7e 	bl	8004a84 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	1ad2      	subs	r2, r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d31d      	bcc.n	8001dd4 <ButtonDebounceRoutine+0x58>
	{
		if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	891b      	ldrh	r3, [r3, #8]
 8001da0:	4619      	mov	r1, r3
 8001da2:	4610      	mov	r0, r2
 8001da4:	f004 fa12 	bl	80061cc <HAL_GPIO_ReadPin>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10f      	bne.n	8001dce <ButtonDebounceRoutine+0x52>
		{
			Key->State = PRESSED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2202      	movs	r2, #2
 8001db2:	701a      	strb	r2, [r3, #0]
			Key->LastTick = HAL_GetTick();
 8001db4:	f002 fe66 	bl	8004a84 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	60da      	str	r2, [r3, #12]
			if(Key->ButtonPressed != NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d006      	beq.n	8001dd4 <ButtonDebounceRoutine+0x58>
			{
				Key->ButtonPressed();
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	4798      	blx	r3
		else
		{
			Key->State = IDLE;
		}
	}
}
 8001dcc:	e002      	b.n	8001dd4 <ButtonDebounceRoutine+0x58>
			Key->State = IDLE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <ButtonPressedRoutine>:

void ButtonPressedRoutine(button_t *Key)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_SET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	891b      	ldrh	r3, [r3, #8]
 8001dec:	4619      	mov	r1, r3
 8001dee:	4610      	mov	r0, r2
 8001df0:	f004 f9ec 	bl	80061cc <HAL_GPIO_ReadPin>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d103      	bne.n	8001e02 <ButtonPressedRoutine+0x26>
	{
		Key->State = RELEASE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	701a      	strb	r2, [r3, #0]
		if(Key->ButtonLongPressed != NULL)
		{
			Key->ButtonLongPressed();
		}
	}
}
 8001e00:	e018      	b.n	8001e34 <ButtonPressedRoutine+0x58>
	else if(HAL_GetTick() - Key->LastTick >= Key->TimerLongPressed)
 8001e02:	f002 fe3f 	bl	8004a84 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	1ad2      	subs	r2, r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d30e      	bcc.n	8001e34 <ButtonPressedRoutine+0x58>
		Key->State = REPEAT;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2203      	movs	r2, #3
 8001e1a:	701a      	strb	r2, [r3, #0]
		Key->LastTick = HAL_GetTick();
 8001e1c:	f002 fe32 	bl	8004a84 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	60da      	str	r2, [r3, #12]
		if(Key->ButtonLongPressed != NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d002      	beq.n	8001e34 <ButtonPressedRoutine+0x58>
			Key->ButtonLongPressed();
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	4798      	blx	r3
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <ButtonRepeatRoutine>:

void ButtonRepeatRoutine(button_t *Key)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(Key->GpioPort, Key->GpioPin) == GPIO_PIN_SET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	891b      	ldrh	r3, [r3, #8]
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4610      	mov	r0, r2
 8001e50:	f004 f9bc 	bl	80061cc <HAL_GPIO_ReadPin>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d103      	bne.n	8001e62 <ButtonRepeatRoutine+0x26>
	{
		Key->State = RELEASE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	701a      	strb	r2, [r3, #0]
		if(Key->ButtonRepeat != NULL)
		{
			Key->ButtonRepeat();
		}
	}
}
 8001e60:	e015      	b.n	8001e8e <ButtonRepeatRoutine+0x52>
	else if(HAL_GetTick() - Key->LastTick >= Key->TimerRepeat)
 8001e62:	f002 fe0f 	bl	8004a84 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	1ad2      	subs	r2, r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d30b      	bcc.n	8001e8e <ButtonRepeatRoutine+0x52>
		Key->LastTick = HAL_GetTick();
 8001e76:	f002 fe05 	bl	8004a84 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	60da      	str	r2, [r3, #12]
		if(Key->ButtonRepeat != NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <ButtonRepeatRoutine+0x52>
			Key->ButtonRepeat();
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	4798      	blx	r3
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <ButtonReleaseRoutine>:

void ButtonReleaseRoutine(button_t *Key)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
	if(Key->ButtonRelease != NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <ButtonReleaseRoutine+0x16>
	{
		Key->ButtonRelease();
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eaa:	4798      	blx	r3
	}
	Key->State = IDLE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <ButtonTask>:

//State machines
void ButtonTask(button_t *Key)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	switch(Key->State)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d821      	bhi.n	8001f10 <ButtonTask+0x54>
 8001ecc:	a201      	add	r2, pc, #4	; (adr r2, 8001ed4 <ButtonTask+0x18>)
 8001ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed2:	bf00      	nop
 8001ed4:	08001ee9 	.word	0x08001ee9
 8001ed8:	08001ef1 	.word	0x08001ef1
 8001edc:	08001ef9 	.word	0x08001ef9
 8001ee0:	08001f01 	.word	0x08001f01
 8001ee4:	08001f09 	.word	0x08001f09
	{
	case IDLE:
		ButtonIdleRoutine(Key);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ff2c 	bl	8001d46 <ButtonIdleRoutine>
		break;
 8001eee:	e00f      	b.n	8001f10 <ButtonTask+0x54>

	case DEBOUNCE:
		ButtonDebounceRoutine(Key);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff ff43 	bl	8001d7c <ButtonDebounceRoutine>
		break;
 8001ef6:	e00b      	b.n	8001f10 <ButtonTask+0x54>

	case PRESSED:
		ButtonPressedRoutine(Key);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff6f 	bl	8001ddc <ButtonPressedRoutine>
		break;
 8001efe:	e007      	b.n	8001f10 <ButtonTask+0x54>

	case REPEAT:
		ButtonRepeatRoutine(Key);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff ff9b 	bl	8001e3c <ButtonRepeatRoutine>
		break;
 8001f06:	e003      	b.n	8001f10 <ButtonTask+0x54>

	case RELEASE:
		ButtonReleaseRoutine(Key);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ffc4 	bl	8001e96 <ButtonReleaseRoutine>
		break;
 8001f0e:	bf00      	nop
	}
}
 8001f10:	bf00      	nop
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_channel1
  */
void MX_DMA_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f1e:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <MX_DMA_Init+0x90>)
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	4a21      	ldr	r2, [pc, #132]	; (8001fa8 <MX_DMA_Init+0x90>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6153      	str	r3, [r2, #20]
 8001f2a:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <MX_DMA_Init+0x90>)
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	607b      	str	r3, [r7, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f36:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <MX_DMA_Init+0x90>)
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	4a1b      	ldr	r2, [pc, #108]	; (8001fa8 <MX_DMA_Init+0x90>)
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	6153      	str	r3, [r2, #20]
 8001f42:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <MX_DMA_Init+0x90>)
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_channel1 on DMA2_Channel1 */
  hdma_memtomem_dma2_channel1.Instance = DMA2_Channel1;
 8001f4e:	4b17      	ldr	r3, [pc, #92]	; (8001fac <MX_DMA_Init+0x94>)
 8001f50:	4a17      	ldr	r2, [pc, #92]	; (8001fb0 <MX_DMA_Init+0x98>)
 8001f52:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001f54:	4b15      	ldr	r3, [pc, #84]	; (8001fac <MX_DMA_Init+0x94>)
 8001f56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f5a:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <MX_DMA_Init+0x94>)
 8001f5e:	2240      	movs	r2, #64	; 0x40
 8001f60:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8001f62:	4b12      	ldr	r3, [pc, #72]	; (8001fac <MX_DMA_Init+0x94>)
 8001f64:	2280      	movs	r2, #128	; 0x80
 8001f66:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f68:	4b10      	ldr	r3, [pc, #64]	; (8001fac <MX_DMA_Init+0x94>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f6e:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <MX_DMA_Init+0x94>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_channel1.Init.Mode = DMA_NORMAL;
 8001f74:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <MX_DMA_Init+0x94>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_channel1.Init.Priority = DMA_PRIORITY_LOW;
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <MX_DMA_Init+0x94>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	61da      	str	r2, [r3, #28]
  if (HAL_DMA_Init(&hdma_memtomem_dma2_channel1) != HAL_OK)
 8001f80:	480a      	ldr	r0, [pc, #40]	; (8001fac <MX_DMA_Init+0x94>)
 8001f82:	f003 fb3b 	bl	80055fc <HAL_DMA_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_DMA_Init+0x78>
  {
    Error_Handler();
 8001f8c:	f001 f870 	bl	8003070 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f90:	2200      	movs	r2, #0
 8001f92:	2100      	movs	r1, #0
 8001f94:	200b      	movs	r0, #11
 8001f96:	f003 fafa 	bl	800558e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f9a:	200b      	movs	r0, #11
 8001f9c:	f003 fb13 	bl	80055c6 <HAL_NVIC_EnableIRQ>

}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	200008d4 	.word	0x200008d4
 8001fb0:	40020408 	.word	0x40020408

08001fb4 <ds18b20_read_address>:
#define DS18B20_READ_SCRATCHPAD    0xBE



HAL_StatusTypeDef ds18b20_read_address(uint8_t* rom_code)
{
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t crc;

  if (wire_reset() != HAL_OK)
 8001fbc:	f7ff f85a 	bl	8001074 <wire_reset>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <ds18b20_read_address+0x16>
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e021      	b.n	800200e <ds18b20_read_address+0x5a>

  wire_write(DS18B20_READ_ROM);
 8001fca:	2033      	movs	r0, #51	; 0x33
 8001fcc:	f7ff f8e6 	bl	800119c <wire_write>

  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	e009      	b.n	8001fea <ds18b20_read_address+0x36>
    rom_code[i] = wire_read();
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	18d4      	adds	r4, r2, r3
 8001fdc:	f7ff f89c 	bl	8001118 <wire_read>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b07      	cmp	r3, #7
 8001fee:	ddf2      	ble.n	8001fd6 <ds18b20_read_address+0x22>

  crc = wire_crc(rom_code, DS18B20_ROM_CODE_SIZE - 1);
 8001ff0:	2107      	movs	r1, #7
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff f919 	bl	800122a <wire_crc>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	72fb      	strb	r3, [r7, #11]
  if (rom_code[DS18B20_ROM_CODE_SIZE - 1] == crc)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3307      	adds	r3, #7
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	7afa      	ldrb	r2, [r7, #11]
 8002004:	429a      	cmp	r2, r3
 8002006:	d101      	bne.n	800200c <ds18b20_read_address+0x58>
    return HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	e000      	b.n	800200e <ds18b20_read_address+0x5a>
  else
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	bd90      	pop	{r4, r7, pc}

08002016 <send_cmd>:

static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	460b      	mov	r3, r1
 8002020:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 8002022:	f7ff f827 	bl	8001074 <wire_reset>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <send_cmd+0x1a>
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e01e      	b.n	800206e <send_cmd+0x58>

  if (!rom_code) {
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d103      	bne.n	800203e <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 8002036:	20cc      	movs	r0, #204	; 0xcc
 8002038:	f7ff f8b0 	bl	800119c <wire_write>
 800203c:	e012      	b.n	8002064 <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 800203e:	2055      	movs	r0, #85	; 0x55
 8002040:	f7ff f8ac 	bl	800119c <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	e009      	b.n	800205e <send_cmd+0x48>
      wire_write(rom_code[i]);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4413      	add	r3, r2
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff f8a2 	bl	800119c <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	3301      	adds	r3, #1
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2b07      	cmp	r3, #7
 8002062:	ddf2      	ble.n	800204a <send_cmd+0x34>
  }
  wire_write(cmd);
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff f898 	bl	800119c <wire_write>
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <ds18b20_start_measure>:

HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 800207e:	2144      	movs	r1, #68	; 0x44
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff ffc8 	bl	8002016 <send_cmd>
 8002086:	4603      	mov	r3, r0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <ds18b20_read_scratchpad>:

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 8002090:	b590      	push	{r4, r7, lr}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 800209a:	21be      	movs	r1, #190	; 0xbe
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ffba 	bl	8002016 <send_cmd>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e01e      	b.n	80020ea <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	e009      	b.n	80020c6 <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	683a      	ldr	r2, [r7, #0]
 80020b6:	18d4      	adds	r4, r2, r3
 80020b8:	f7ff f82e 	bl	8001118 <wire_read>
 80020bc:	4603      	mov	r3, r0
 80020be:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	3301      	adds	r3, #1
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	ddf2      	ble.n	80020b2 <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 80020cc:	2108      	movs	r1, #8
 80020ce:	6838      	ldr	r0, [r7, #0]
 80020d0:	f7ff f8ab 	bl	800122a <wire_crc>
 80020d4:	4603      	mov	r3, r0
 80020d6:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	3308      	adds	r3, #8
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	7afa      	ldrb	r2, [r7, #11]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d101      	bne.n	80020e8 <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	e000      	b.n	80020ea <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd90      	pop	{r4, r7, pc}

080020f2 <ds18b20_get_temp_wo_fp>:

  return temp / 16.0f;
}

uint32_t ds18b20_get_temp_wo_fp(const uint8_t* rom_code)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 80020fa:	f107 030c 	add.w	r3, r7, #12
 80020fe:	4619      	mov	r1, r3
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ffc5 	bl	8002090 <ds18b20_read_scratchpad>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <ds18b20_get_temp_wo_fp+0x20>
    return 8500;
 800210c:	f242 1334 	movw	r3, #8500	; 0x2134
 8002110:	e00b      	b.n	800212a <ds18b20_get_temp_wo_fp+0x38>
 8002112:	89bb      	ldrh	r3, [r7, #12]

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 8002114:	817b      	strh	r3, [r7, #10]

  return (temp * 100) / 16;
 8002116:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800211a:	461a      	mov	r2, r3
 800211c:	2364      	movs	r3, #100	; 0x64
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	da00      	bge.n	8002128 <ds18b20_get_temp_wo_fp+0x36>
 8002126:	330f      	adds	r3, #15
 8002128:	111b      	asrs	r3, r3, #4
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08c      	sub	sp, #48	; 0x30
 8002138:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213a:	f107 0320 	add.w	r3, r7, #32
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]
 8002144:	609a      	str	r2, [r3, #8]
 8002146:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002148:	4b72      	ldr	r3, [pc, #456]	; (8002314 <MX_GPIO_Init+0x1e0>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	4a71      	ldr	r2, [pc, #452]	; (8002314 <MX_GPIO_Init+0x1e0>)
 800214e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002152:	6193      	str	r3, [r2, #24]
 8002154:	4b6f      	ldr	r3, [pc, #444]	; (8002314 <MX_GPIO_Init+0x1e0>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002160:	4b6c      	ldr	r3, [pc, #432]	; (8002314 <MX_GPIO_Init+0x1e0>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	4a6b      	ldr	r2, [pc, #428]	; (8002314 <MX_GPIO_Init+0x1e0>)
 8002166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800216a:	6193      	str	r3, [r2, #24]
 800216c:	4b69      	ldr	r3, [pc, #420]	; (8002314 <MX_GPIO_Init+0x1e0>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002178:	4b66      	ldr	r3, [pc, #408]	; (8002314 <MX_GPIO_Init+0x1e0>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	4a65      	ldr	r2, [pc, #404]	; (8002314 <MX_GPIO_Init+0x1e0>)
 800217e:	f043 0310 	orr.w	r3, r3, #16
 8002182:	6193      	str	r3, [r2, #24]
 8002184:	4b63      	ldr	r3, [pc, #396]	; (8002314 <MX_GPIO_Init+0x1e0>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002190:	4b60      	ldr	r3, [pc, #384]	; (8002314 <MX_GPIO_Init+0x1e0>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	4a5f      	ldr	r2, [pc, #380]	; (8002314 <MX_GPIO_Init+0x1e0>)
 8002196:	f043 0304 	orr.w	r3, r3, #4
 800219a:	6193      	str	r3, [r2, #24]
 800219c:	4b5d      	ldr	r3, [pc, #372]	; (8002314 <MX_GPIO_Init+0x1e0>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a8:	4b5a      	ldr	r3, [pc, #360]	; (8002314 <MX_GPIO_Init+0x1e0>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	4a59      	ldr	r2, [pc, #356]	; (8002314 <MX_GPIO_Init+0x1e0>)
 80021ae:	f043 0308 	orr.w	r3, r3, #8
 80021b2:	6193      	str	r3, [r2, #24]
 80021b4:	4b57      	ldr	r3, [pc, #348]	; (8002314 <MX_GPIO_Init+0x1e0>)
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021c0:	4b54      	ldr	r3, [pc, #336]	; (8002314 <MX_GPIO_Init+0x1e0>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	4a53      	ldr	r2, [pc, #332]	; (8002314 <MX_GPIO_Init+0x1e0>)
 80021c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ca:	6193      	str	r3, [r2, #24]
 80021cc:	4b51      	ldr	r3, [pc, #324]	; (8002314 <MX_GPIO_Init+0x1e0>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d8:	4b4e      	ldr	r3, [pc, #312]	; (8002314 <MX_GPIO_Init+0x1e0>)
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	4a4d      	ldr	r2, [pc, #308]	; (8002314 <MX_GPIO_Init+0x1e0>)
 80021de:	f043 0320 	orr.w	r3, r3, #32
 80021e2:	6193      	str	r3, [r2, #24]
 80021e4:	4b4b      	ldr	r3, [pc, #300]	; (8002314 <MX_GPIO_Init+0x1e0>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f003 0320 	and.w	r3, r3, #32
 80021ec:	607b      	str	r3, [r7, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80021f0:	2200      	movs	r2, #0
 80021f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80021f6:	4848      	ldr	r0, [pc, #288]	; (8002318 <MX_GPIO_Init+0x1e4>)
 80021f8:	f003 ffff 	bl	80061fa <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, COMM_PC_LED_Pin|COMM_CAN_LED_Pin|COMM_CAN_CHECK_LED_Pin|COMM_UART_LED_Pin
 80021fc:	2200      	movs	r2, #0
 80021fe:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8002202:	4846      	ldr	r0, [pc, #280]	; (800231c <MX_GPIO_Init+0x1e8>)
 8002204:	f003 fff9 	bl	80061fa <HAL_GPIO_WritePin>
                          |COMM_RS485_LED_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|RS485_TXE_Pin, GPIO_PIN_RESET);
 8002208:	2200      	movs	r2, #0
 800220a:	2112      	movs	r1, #18
 800220c:	4844      	ldr	r0, [pc, #272]	; (8002320 <MX_GPIO_Init+0x1ec>)
 800220e:	f003 fff4 	bl	80061fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WC_EEPROM_GPIO_Port, WC_EEPROM_Pin, GPIO_PIN_RESET);
 8002212:	2200      	movs	r2, #0
 8002214:	2120      	movs	r1, #32
 8002216:	4843      	ldr	r0, [pc, #268]	; (8002324 <MX_GPIO_Init+0x1f0>)
 8002218:	f003 ffef 	bl	80061fa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800221c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002220:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002222:	2301      	movs	r3, #1
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222a:	2302      	movs	r3, #2
 800222c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800222e:	f107 0320 	add.w	r3, r7, #32
 8002232:	4619      	mov	r1, r3
 8002234:	4838      	ldr	r0, [pc, #224]	; (8002318 <MX_GPIO_Init+0x1e4>)
 8002236:	f003 fe35 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800223a:	2304      	movs	r3, #4
 800223c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800223e:	2300      	movs	r3, #0
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002242:	2301      	movs	r3, #1
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002246:	f107 0320 	add.w	r3, r7, #32
 800224a:	4619      	mov	r1, r3
 800224c:	4833      	ldr	r0, [pc, #204]	; (800231c <MX_GPIO_Init+0x1e8>)
 800224e:	f003 fe29 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin */
  GPIO_InitStruct.Pin = COMM_PC_LED_Pin|COMM_CAN_LED_Pin|COMM_CAN_CHECK_LED_Pin|COMM_UART_LED_Pin
 8002252:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8002256:	623b      	str	r3, [r7, #32]
                          |COMM_RS485_LED_Pin|ERROR_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002258:	2301      	movs	r3, #1
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2302      	movs	r3, #2
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002264:	f107 0320 	add.w	r3, r7, #32
 8002268:	4619      	mov	r1, r3
 800226a:	482c      	ldr	r0, [pc, #176]	; (800231c <MX_GPIO_Init+0x1e8>)
 800226c:	f003 fe1a 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = CHECK_WIRE_1_Pin|CHECK_WIRE_2_Pin|CHECK_WIRE_3_Pin|CHECK_WIRE_4_Pin
 8002270:	f240 330f 	movw	r3, #783	; 0x30f
 8002274:	623b      	str	r3, [r7, #32]
                          |BUTTON_DOWN_Pin|BUTTON_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002276:	2300      	movs	r3, #0
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800227e:	f107 0320 	add.w	r3, r7, #32
 8002282:	4619      	mov	r1, r3
 8002284:	4828      	ldr	r0, [pc, #160]	; (8002328 <MX_GPIO_Init+0x1f4>)
 8002286:	f003 fe0d 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_OPEN_Pin;
 800228a:	2301      	movs	r3, #1
 800228c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800228e:	2300      	movs	r3, #0
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SW_OPEN_GPIO_Port, &GPIO_InitStruct);
 8002296:	f107 0320 	add.w	r3, r7, #32
 800229a:	4619      	mov	r1, r3
 800229c:	4820      	ldr	r0, [pc, #128]	; (8002320 <MX_GPIO_Init+0x1ec>)
 800229e:	f003 fe01 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RS485_TXE_Pin;
 80022a2:	2312      	movs	r3, #18
 80022a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a6:	2301      	movs	r3, #1
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ae:	2302      	movs	r3, #2
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b2:	f107 0320 	add.w	r3, r7, #32
 80022b6:	4619      	mov	r1, r3
 80022b8:	4819      	ldr	r0, [pc, #100]	; (8002320 <MX_GPIO_Init+0x1ec>)
 80022ba:	f003 fdf3 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80022be:	230f      	movs	r3, #15
 80022c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c2:	2300      	movs	r3, #0
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022ca:	f107 0320 	add.w	r3, r7, #32
 80022ce:	4619      	mov	r1, r3
 80022d0:	4816      	ldr	r0, [pc, #88]	; (800232c <MX_GPIO_Init+0x1f8>)
 80022d2:	f003 fde7 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80022d6:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80022da:	623b      	str	r3, [r7, #32]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022dc:	2300      	movs	r3, #0
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022e0:	2301      	movs	r3, #1
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022e4:	f107 0320 	add.w	r3, r7, #32
 80022e8:	4619      	mov	r1, r3
 80022ea:	4810      	ldr	r0, [pc, #64]	; (800232c <MX_GPIO_Init+0x1f8>)
 80022ec:	f003 fdda 	bl	8005ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WC_EEPROM_Pin;
 80022f0:	2320      	movs	r3, #32
 80022f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f4:	2301      	movs	r3, #1
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2302      	movs	r3, #2
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(WC_EEPROM_GPIO_Port, &GPIO_InitStruct);
 8002300:	f107 0320 	add.w	r3, r7, #32
 8002304:	4619      	mov	r1, r3
 8002306:	4807      	ldr	r0, [pc, #28]	; (8002324 <MX_GPIO_Init+0x1f0>)
 8002308:	f003 fdcc 	bl	8005ea4 <HAL_GPIO_Init>

}
 800230c:	bf00      	nop
 800230e:	3730      	adds	r7, #48	; 0x30
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	40011800 	.word	0x40011800
 800231c:	40011c00 	.word	0x40011c00
 8002320:	40010800 	.word	0x40010800
 8002324:	40010c00 	.word	0x40010c00
 8002328:	40011000 	.word	0x40011000
 800232c:	40012000 	.word	0x40012000

08002330 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <MX_I2C1_Init+0x50>)
 8002336:	4a13      	ldr	r2, [pc, #76]	; (8002384 <MX_I2C1_Init+0x54>)
 8002338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800233a:	4b11      	ldr	r3, [pc, #68]	; (8002380 <MX_I2C1_Init+0x50>)
 800233c:	4a12      	ldr	r2, [pc, #72]	; (8002388 <MX_I2C1_Init+0x58>)
 800233e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002340:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <MX_I2C1_Init+0x50>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002346:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <MX_I2C1_Init+0x50>)
 8002348:	2200      	movs	r2, #0
 800234a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <MX_I2C1_Init+0x50>)
 800234e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002352:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002354:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <MX_I2C1_Init+0x50>)
 8002356:	2200      	movs	r2, #0
 8002358:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <MX_I2C1_Init+0x50>)
 800235c:	2200      	movs	r2, #0
 800235e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002360:	4b07      	ldr	r3, [pc, #28]	; (8002380 <MX_I2C1_Init+0x50>)
 8002362:	2200      	movs	r2, #0
 8002364:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <MX_I2C1_Init+0x50>)
 8002368:	2200      	movs	r2, #0
 800236a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800236c:	4804      	ldr	r0, [pc, #16]	; (8002380 <MX_I2C1_Init+0x50>)
 800236e:	f003 ff75 	bl	800625c <HAL_I2C_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002378:	f000 fe7a 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800237c:	bf00      	nop
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000918 	.word	0x20000918
 8002384:	40005400 	.word	0x40005400
 8002388:	00061a80 	.word	0x00061a80

0800238c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 0310 	add.w	r3, r7, #16
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a3b      	ldr	r2, [pc, #236]	; (8002494 <HAL_I2C_MspInit+0x108>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d16f      	bne.n	800248c <HAL_I2C_MspInit+0x100>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ac:	4b3a      	ldr	r3, [pc, #232]	; (8002498 <HAL_I2C_MspInit+0x10c>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	4a39      	ldr	r2, [pc, #228]	; (8002498 <HAL_I2C_MspInit+0x10c>)
 80023b2:	f043 0308 	orr.w	r3, r3, #8
 80023b6:	6193      	str	r3, [r2, #24]
 80023b8:	4b37      	ldr	r3, [pc, #220]	; (8002498 <HAL_I2C_MspInit+0x10c>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023c4:	23c0      	movs	r3, #192	; 0xc0
 80023c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023c8:	2312      	movs	r3, #18
 80023ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023cc:	2303      	movs	r3, #3
 80023ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d0:	f107 0310 	add.w	r3, r7, #16
 80023d4:	4619      	mov	r1, r3
 80023d6:	4831      	ldr	r0, [pc, #196]	; (800249c <HAL_I2C_MspInit+0x110>)
 80023d8:	f003 fd64 	bl	8005ea4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023dc:	4b2e      	ldr	r3, [pc, #184]	; (8002498 <HAL_I2C_MspInit+0x10c>)
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	4a2d      	ldr	r2, [pc, #180]	; (8002498 <HAL_I2C_MspInit+0x10c>)
 80023e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023e6:	61d3      	str	r3, [r2, #28]
 80023e8:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <HAL_I2C_MspInit+0x10c>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80023f4:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <HAL_I2C_MspInit+0x114>)
 80023f6:	4a2b      	ldr	r2, [pc, #172]	; (80024a4 <HAL_I2C_MspInit+0x118>)
 80023f8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023fa:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <HAL_I2C_MspInit+0x114>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002400:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <HAL_I2C_MspInit+0x114>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002406:	4b26      	ldr	r3, [pc, #152]	; (80024a0 <HAL_I2C_MspInit+0x114>)
 8002408:	2280      	movs	r2, #128	; 0x80
 800240a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800240c:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <HAL_I2C_MspInit+0x114>)
 800240e:	2200      	movs	r2, #0
 8002410:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002412:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <HAL_I2C_MspInit+0x114>)
 8002414:	2200      	movs	r2, #0
 8002416:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002418:	4b21      	ldr	r3, [pc, #132]	; (80024a0 <HAL_I2C_MspInit+0x114>)
 800241a:	2200      	movs	r2, #0
 800241c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <HAL_I2C_MspInit+0x114>)
 8002420:	2200      	movs	r2, #0
 8002422:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002424:	481e      	ldr	r0, [pc, #120]	; (80024a0 <HAL_I2C_MspInit+0x114>)
 8002426:	f003 f8e9 	bl	80055fc <HAL_DMA_Init>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8002430:	f000 fe1e 	bl	8003070 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a1a      	ldr	r2, [pc, #104]	; (80024a0 <HAL_I2C_MspInit+0x114>)
 8002438:	639a      	str	r2, [r3, #56]	; 0x38
 800243a:	4a19      	ldr	r2, [pc, #100]	; (80024a0 <HAL_I2C_MspInit+0x114>)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8002440:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_I2C_MspInit+0x11c>)
 8002442:	4a1a      	ldr	r2, [pc, #104]	; (80024ac <HAL_I2C_MspInit+0x120>)
 8002444:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002446:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <HAL_I2C_MspInit+0x11c>)
 8002448:	2210      	movs	r2, #16
 800244a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800244c:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <HAL_I2C_MspInit+0x11c>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002452:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <HAL_I2C_MspInit+0x11c>)
 8002454:	2280      	movs	r2, #128	; 0x80
 8002456:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002458:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <HAL_I2C_MspInit+0x11c>)
 800245a:	2200      	movs	r2, #0
 800245c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800245e:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_I2C_MspInit+0x11c>)
 8002460:	2200      	movs	r2, #0
 8002462:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002464:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <HAL_I2C_MspInit+0x11c>)
 8002466:	2200      	movs	r2, #0
 8002468:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800246a:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <HAL_I2C_MspInit+0x11c>)
 800246c:	2200      	movs	r2, #0
 800246e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002470:	480d      	ldr	r0, [pc, #52]	; (80024a8 <HAL_I2C_MspInit+0x11c>)
 8002472:	f003 f8c3 	bl	80055fc <HAL_DMA_Init>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 800247c:	f000 fdf8 	bl	8003070 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a09      	ldr	r2, [pc, #36]	; (80024a8 <HAL_I2C_MspInit+0x11c>)
 8002484:	635a      	str	r2, [r3, #52]	; 0x34
 8002486:	4a08      	ldr	r2, [pc, #32]	; (80024a8 <HAL_I2C_MspInit+0x11c>)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800248c:	bf00      	nop
 800248e:	3720      	adds	r7, #32
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40005400 	.word	0x40005400
 8002498:	40021000 	.word	0x40021000
 800249c:	40010c00 	.word	0x40010c00
 80024a0:	2000096c 	.word	0x2000096c
 80024a4:	40020080 	.word	0x40020080
 80024a8:	200009b0 	.word	0x200009b0
 80024ac:	4002006c 	.word	0x4002006c

080024b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024b6:	f002 fa8d 	bl	80049d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024ba:	f000 f8cd 	bl	8002658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024be:	f7ff fe39 	bl	8002134 <MX_GPIO_Init>
  MX_DMA_Init();
 80024c2:	f7ff fd29 	bl	8001f18 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80024c6:	f002 f981 	bl	80047cc <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80024ca:	f7ff ff31 	bl	8002330 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80024ce:	f00d fd03 	bl	800fed8 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80024d2:	f7ff fb15 	bl	8001b00 <MX_ADC1_Init>
  MX_TIM3_Init();
 80024d6:	f001 ff6b 	bl	80043b0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80024da:	f001 ffdf 	bl	800449c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80024de:	f002 f921 	bl	8004724 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80024e2:	f002 f949 	bl	8004778 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80024e6:	f000 f916 	bl	8002716 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init(&hi2c1, &hdma_memtomem_dma2_channel1);
 80024ea:	4948      	ldr	r1, [pc, #288]	; (800260c <main+0x15c>)
 80024ec:	4848      	ldr	r0, [pc, #288]	; (8002610 <main+0x160>)
 80024ee:	f001 fd83 	bl	8003ff8 <SSD1306_Init>

  OldTick500ms = HAL_GetTick();
 80024f2:	f002 fac7 	bl	8004a84 <HAL_GetTick>
 80024f6:	4603      	mov	r3, r0
 80024f8:	4a46      	ldr	r2, [pc, #280]	; (8002614 <main+0x164>)
 80024fa:	6013      	str	r3, [r2, #0]
  OldTick100ms = HAL_GetTick();
 80024fc:	f002 fac2 	bl	8004a84 <HAL_GetTick>
 8002500:	4603      	mov	r3, r0
 8002502:	4a45      	ldr	r2, [pc, #276]	; (8002618 <main+0x168>)
 8002504:	6013      	str	r3, [r2, #0]
  OldTick50ms = HAL_GetTick();
 8002506:	f002 fabd 	bl	8004a84 <HAL_GetTick>
 800250a:	4603      	mov	r3, r0
 800250c:	4a43      	ldr	r2, [pc, #268]	; (800261c <main+0x16c>)
 800250e:	6013      	str	r3, [r2, #0]

  if (ds18b20_read_address(ds1) != HAL_OK)
 8002510:	4843      	ldr	r0, [pc, #268]	; (8002620 <main+0x170>)
 8002512:	f7ff fd4f 	bl	8001fb4 <ds18b20_read_address>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <main+0x70>
  {
    Error_Handler();
 800251c:	f000 fda8 	bl	8003070 <Error_Handler>
  }

  ButtonInitKey(&KeyUp, BUTTON_UP_GPIO_Port, BUTTON_UP_Pin, 20, 1000, 500);
 8002520:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002524:	9301      	str	r3, [sp, #4]
 8002526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	2314      	movs	r3, #20
 800252e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002532:	493c      	ldr	r1, [pc, #240]	; (8002624 <main+0x174>)
 8002534:	483c      	ldr	r0, [pc, #240]	; (8002628 <main+0x178>)
 8002536:	f7ff fbcd 	bl	8001cd4 <ButtonInitKey>
  ButtonInitKey(&KeyDown, BUTTON_DOWN_GPIO_Port, BUTTON_DOWN_Pin, 20, 1000, 500);
 800253a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	2314      	movs	r3, #20
 8002548:	f44f 7280 	mov.w	r2, #256	; 0x100
 800254c:	4935      	ldr	r1, [pc, #212]	; (8002624 <main+0x174>)
 800254e:	4837      	ldr	r0, [pc, #220]	; (800262c <main+0x17c>)
 8002550:	f7ff fbc0 	bl	8001cd4 <ButtonInitKey>

  ShowMenu();
 8002554:	f000 f9cc 	bl	80028f0 <ShowMenu>


  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002558:	2100      	movs	r1, #0
 800255a:	4835      	ldr	r0, [pc, #212]	; (8002630 <main+0x180>)
 800255c:	f008 fd66 	bl	800b02c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002560:	2104      	movs	r1, #4
 8002562:	4833      	ldr	r0, [pc, #204]	; (8002630 <main+0x180>)
 8002564:	f008 fd62 	bl	800b02c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002568:	2108      	movs	r1, #8
 800256a:	4831      	ldr	r0, [pc, #196]	; (8002630 <main+0x180>)
 800256c:	f008 fd5e 	bl	800b02c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002570:	210c      	movs	r1, #12
 8002572:	482f      	ldr	r0, [pc, #188]	; (8002630 <main+0x180>)
 8002574:	f008 fd5a 	bl	800b02c <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 100);
 8002578:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <main+0x180>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2264      	movs	r2, #100	; 0x64
 800257e:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  m24cxxInit(&M24C02, &hi2c1, EEPROM_ADDRES, M24C02_MEM_SIZE, WC_EEPROM_GPIO_Port, WC_EEPROM_Pin);
 8002580:	2320      	movs	r3, #32
 8002582:	9301      	str	r3, [sp, #4]
 8002584:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <main+0x184>)
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	f44f 7380 	mov.w	r3, #256	; 0x100
 800258c:	2250      	movs	r2, #80	; 0x50
 800258e:	4920      	ldr	r1, [pc, #128]	; (8002610 <main+0x160>)
 8002590:	4829      	ldr	r0, [pc, #164]	; (8002638 <main+0x188>)
 8002592:	f7ff fa6d 	bl	8001a70 <m24cxxInit>

  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)Measurements.Adc1Value, 4);
 8002596:	2204      	movs	r2, #4
 8002598:	4928      	ldr	r1, [pc, #160]	; (800263c <main+0x18c>)
 800259a:	4829      	ldr	r0, [pc, #164]	; (8002640 <main+0x190>)
 800259c:	f002 fb66 	bl	8004c6c <HAL_ADC_Start_DMA>

  while (1)
  {


	  if(LineCounter)
 80025a0:	4b28      	ldr	r3, [pc, #160]	; (8002644 <main+0x194>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00c      	beq.n	80025c2 <main+0x112>
	  {
		  Parser_TakeLine(&ReceiveBuffer, ReceivedData);
 80025a8:	4927      	ldr	r1, [pc, #156]	; (8002648 <main+0x198>)
 80025aa:	4828      	ldr	r0, [pc, #160]	; (800264c <main+0x19c>)
 80025ac:	f001 fb20 	bl	8003bf0 <Parser_TakeLine>

		  LineCounter--;
 80025b0:	4b24      	ldr	r3, [pc, #144]	; (8002644 <main+0x194>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	4b22      	ldr	r3, [pc, #136]	; (8002644 <main+0x194>)
 80025ba:	701a      	strb	r2, [r3, #0]

		  Parser_parse(ReceivedData);
 80025bc:	4822      	ldr	r0, [pc, #136]	; (8002648 <main+0x198>)
 80025be:	f001 fb3f 	bl	8003c40 <Parser_parse>
	  }
	  if(DataToTransmit > 0 )
 80025c2:	4b23      	ldr	r3, [pc, #140]	; (8002650 <main+0x1a0>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d010      	beq.n	80025ec <main+0x13c>
	  {

		  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80025ca:	4b22      	ldr	r3, [pc, #136]	; (8002654 <main+0x1a4>)
 80025cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80025d0:	607b      	str	r3, [r7, #4]
		  if (hcdc->TxState == 0)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d107      	bne.n	80025ec <main+0x13c>
		  {
			  UsbTransmitTask();
 80025dc:	f000 fd1e 	bl	800301c <UsbTransmitTask>

			  DataToTransmit--;
 80025e0:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <main+0x1a0>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <main+0x1a0>)
 80025ea:	701a      	strb	r2, [r3, #0]
		  }

	  }

	  IntervalFunc100ms();
 80025ec:	f000 fc08 	bl	8002e00 <IntervalFunc100ms>
	  IntervalFunc500ms();
 80025f0:	f000 fbbc 	bl	8002d6c <IntervalFunc500ms>
	  IntervalFunc50ms();
 80025f4:	f000 fc66 	bl	8002ec4 <IntervalFunc50ms>

	  ButtonTask(&KeyDown);
 80025f8:	480c      	ldr	r0, [pc, #48]	; (800262c <main+0x17c>)
 80025fa:	f7ff fc5f 	bl	8001ebc <ButtonTask>
	  ButtonTask(&KeyUp);
 80025fe:	480a      	ldr	r0, [pc, #40]	; (8002628 <main+0x178>)
 8002600:	f7ff fc5c 	bl	8001ebc <ButtonTask>

	  MeasurementConversion();
 8002604:	f000 fb72 	bl	8002cec <MeasurementConversion>
	  if(LineCounter)
 8002608:	e7ca      	b.n	80025a0 <main+0xf0>
 800260a:	bf00      	nop
 800260c:	200008d4 	.word	0x200008d4
 8002610:	20000918 	.word	0x20000918
 8002614:	20001a5c 	.word	0x20001a5c
 8002618:	20001a60 	.word	0x20001a60
 800261c:	20001a64 	.word	0x20001a64
 8002620:	20001a70 	.word	0x20001a70
 8002624:	40011000 	.word	0x40011000
 8002628:	200009f4 	.word	0x200009f4
 800262c:	20000a20 	.word	0x20000a20
 8002630:	20002358 	.word	0x20002358
 8002634:	40010c00 	.word	0x40010c00
 8002638:	20001a78 	.word	0x20001a78
 800263c:	20001a90 	.word	0x20001a90
 8002640:	20000860 	.word	0x20000860
 8002644:	20001254 	.word	0x20001254
 8002648:	20001258 	.word	0x20001258
 800264c:	20000a4c 	.word	0x20000a4c
 8002650:	20001a58 	.word	0x20001a58
 8002654:	20002480 	.word	0x20002480

08002658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b096      	sub	sp, #88	; 0x58
 800265c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800265e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002662:	2228      	movs	r2, #40	; 0x28
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f00e f912 	bl	8010890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800266c:	f107 031c 	add.w	r3, r7, #28
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800267c:	1d3b      	adds	r3, r7, #4
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	60da      	str	r2, [r3, #12]
 8002688:	611a      	str	r2, [r3, #16]
 800268a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800268c:	2301      	movs	r3, #1
 800268e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002694:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002696:	2300      	movs	r3, #0
 8002698:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800269a:	2301      	movs	r3, #1
 800269c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800269e:	2302      	movs	r3, #2
 80026a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80026a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026b2:	4618      	mov	r0, r3
 80026b4:	f007 ff4a 	bl	800a54c <HAL_RCC_OscConfig>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80026be:	f000 fcd7 	bl	8003070 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026c2:	230f      	movs	r3, #15
 80026c4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026c6:	2302      	movs	r3, #2
 80026c8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ca:	2300      	movs	r3, #0
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026d4:	2300      	movs	r3, #0
 80026d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026d8:	f107 031c 	add.w	r3, r7, #28
 80026dc:	2102      	movs	r1, #2
 80026de:	4618      	mov	r0, r3
 80026e0:	f008 f9b6 	bl	800aa50 <HAL_RCC_ClockConfig>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80026ea:	f000 fcc1 	bl	8003070 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 80026ee:	2312      	movs	r3, #18
 80026f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80026f2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80026f6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026fc:	1d3b      	adds	r3, r7, #4
 80026fe:	4618      	mov	r0, r3
 8002700:	f008 fb36 	bl	800ad70 <HAL_RCCEx_PeriphCLKConfig>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800270a:	f000 fcb1 	bl	8003070 <Error_Handler>
  }
}
 800270e:	bf00      	nop
 8002710:	3758      	adds	r7, #88	; 0x58
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800271a:	2200      	movs	r2, #0
 800271c:	2100      	movs	r1, #0
 800271e:	201f      	movs	r0, #31
 8002720:	f002 ff35 	bl	800558e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002724:	201f      	movs	r0, #31
 8002726:	f002 ff4e 	bl	80055c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800272a:	2200      	movs	r2, #0
 800272c:	2100      	movs	r1, #0
 800272e:	2011      	movs	r0, #17
 8002730:	f002 ff2d 	bl	800558e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002734:	2011      	movs	r0, #17
 8002736:	f002 ff46 	bl	80055c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800273a:	2200      	movs	r2, #0
 800273c:	2100      	movs	r1, #0
 800273e:	2010      	movs	r0, #16
 8002740:	f002 ff25 	bl	800558e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002744:	2010      	movs	r0, #16
 8002746:	f002 ff3e 	bl	80055c6 <HAL_NVIC_EnableIRQ>
  /* USB_LP_CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800274a:	2200      	movs	r2, #0
 800274c:	2100      	movs	r1, #0
 800274e:	2014      	movs	r0, #20
 8002750:	f002 ff1d 	bl	800558e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002754:	2014      	movs	r0, #20
 8002756:	f002 ff36 	bl	80055c6 <HAL_NVIC_EnableIRQ>
  /* ADC1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800275a:	2200      	movs	r2, #0
 800275c:	2100      	movs	r1, #0
 800275e:	2012      	movs	r0, #18
 8002760:	f002 ff15 	bl	800558e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002764:	2012      	movs	r0, #18
 8002766:	f002 ff2e 	bl	80055c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800276a:	2200      	movs	r2, #0
 800276c:	2100      	movs	r1, #0
 800276e:	2038      	movs	r0, #56	; 0x38
 8002770:	f002 ff0d 	bl	800558e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8002774:	2038      	movs	r0, #56	; 0x38
 8002776:	f002 ff26 	bl	80055c6 <HAL_NVIC_EnableIRQ>
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <OutputSet>:
{
	HAL_Delay(x);
}

void OutputSet(uint16_t ODRvalue)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	80fb      	strh	r3, [r7, #6]
	GPIOE -> ODR = ODRvalue;
 800278a:	4a04      	ldr	r2, [pc, #16]	; (800279c <OutputSet+0x1c>)
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	60d3      	str	r3, [r2, #12]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40011800 	.word	0x40011800

080027a0 <OutputPinStateSet>:

void OutputPinStateSet(uint8_t Pin, uint8_t State)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	460a      	mov	r2, r1
 80027aa:	71fb      	strb	r3, [r7, #7]
 80027ac:	4613      	mov	r3, r2
 80027ae:	71bb      	strb	r3, [r7, #6]
	if(State == 1)
 80027b0:	79bb      	ldrb	r3, [r7, #6]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d10a      	bne.n	80027cc <OutputPinStateSet+0x2c>
	{
		GPIOE -> ODR |= (1 << Pin);
 80027b6:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <OutputPinStateSet+0x54>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	79fa      	ldrb	r2, [r7, #7]
 80027bc:	2101      	movs	r1, #1
 80027be:	fa01 f202 	lsl.w	r2, r1, r2
 80027c2:	4611      	mov	r1, r2
 80027c4:	4a0b      	ldr	r2, [pc, #44]	; (80027f4 <OutputPinStateSet+0x54>)
 80027c6:	430b      	orrs	r3, r1
 80027c8:	60d3      	str	r3, [r2, #12]
	}
	else if (State == 0)
	{
		GPIOE -> ODR &= ~(1 << Pin);
	}
}
 80027ca:	e00d      	b.n	80027e8 <OutputPinStateSet+0x48>
	else if (State == 0)
 80027cc:	79bb      	ldrb	r3, [r7, #6]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10a      	bne.n	80027e8 <OutputPinStateSet+0x48>
		GPIOE -> ODR &= ~(1 << Pin);
 80027d2:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <OutputPinStateSet+0x54>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	79fa      	ldrb	r2, [r7, #7]
 80027d8:	2101      	movs	r1, #1
 80027da:	fa01 f202 	lsl.w	r2, r1, r2
 80027de:	43d2      	mvns	r2, r2
 80027e0:	4611      	mov	r1, r2
 80027e2:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <OutputPinStateSet+0x54>)
 80027e4:	400b      	ands	r3, r1
 80027e6:	60d3      	str	r3, [r2, #12]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40011800 	.word	0x40011800

080027f8 <OutputPinToggle>:

void OutputPinToggle(uint8_t Pin)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	71fb      	strb	r3, [r7, #7]
	GPIOE -> ODR ^= (1 << Pin);
 8002802:	4b07      	ldr	r3, [pc, #28]	; (8002820 <OutputPinToggle+0x28>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	79fa      	ldrb	r2, [r7, #7]
 8002808:	2101      	movs	r1, #1
 800280a:	fa01 f202 	lsl.w	r2, r1, r2
 800280e:	4611      	mov	r1, r2
 8002810:	4a03      	ldr	r2, [pc, #12]	; (8002820 <OutputPinToggle+0x28>)
 8002812:	404b      	eors	r3, r1
 8002814:	60d3      	str	r3, [r2, #12]
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	40011800 	.word	0x40011800

08002824 <PwmSet>:

void PwmSet(uint16_t Pwm1, uint16_t Pwm2, uint16_t Pwm3, uint16_t Pwm4)
{
 8002824:	b490      	push	{r4, r7}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	4604      	mov	r4, r0
 800282c:	4608      	mov	r0, r1
 800282e:	4611      	mov	r1, r2
 8002830:	461a      	mov	r2, r3
 8002832:	4623      	mov	r3, r4
 8002834:	80fb      	strh	r3, [r7, #6]
 8002836:	4603      	mov	r3, r0
 8002838:	80bb      	strh	r3, [r7, #4]
 800283a:	460b      	mov	r3, r1
 800283c:	807b      	strh	r3, [r7, #2]
 800283e:	4613      	mov	r3, r2
 8002840:	803b      	strh	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, Pwm1);
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <PwmSet+0x48>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	88fa      	ldrh	r2, [r7, #6]
 8002848:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, Pwm2);
 800284a:	4b08      	ldr	r3, [pc, #32]	; (800286c <PwmSet+0x48>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	88ba      	ldrh	r2, [r7, #4]
 8002850:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, Pwm3);
 8002852:	4b06      	ldr	r3, [pc, #24]	; (800286c <PwmSet+0x48>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	887a      	ldrh	r2, [r7, #2]
 8002858:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, Pwm4);
 800285a:	4b04      	ldr	r3, [pc, #16]	; (800286c <PwmSet+0x48>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	883a      	ldrh	r2, [r7, #0]
 8002860:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bc90      	pop	{r4, r7}
 800286a:	4770      	bx	lr
 800286c:	20002358 	.word	0x20002358

08002870 <PwmChannelSet>:

void PwmChannelSet(uint8_t Channel, uint16_t Value)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	460a      	mov	r2, r1
 800287a:	71fb      	strb	r3, [r7, #7]
 800287c:	4613      	mov	r3, r2
 800287e:	80bb      	strh	r3, [r7, #4]
	Channel = Channel - 1;
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	3b01      	subs	r3, #1
 8002884:	71fb      	strb	r3, [r7, #7]

//	uint8_t ChannelMapper[] = {TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, TIM_CHANNEL_4};
//	__HAL_TIM_SET_COMPARE(&htim4, ChannelMapper[Channel], Value);

	__HAL_TIM_SET_COMPARE(&htim4, Channel*4, Value);
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d104      	bne.n	8002896 <PwmChannelSet+0x26>
 800288c:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <PwmChannelSet+0x5c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	88ba      	ldrh	r2, [r7, #4]
 8002892:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002894:	e015      	b.n	80028c2 <PwmChannelSet+0x52>
	__HAL_TIM_SET_COMPARE(&htim4, Channel*4, Value);
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	2b04      	cmp	r3, #4
 800289c:	d104      	bne.n	80028a8 <PwmChannelSet+0x38>
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <PwmChannelSet+0x5c>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	88bb      	ldrh	r3, [r7, #4]
 80028a4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80028a6:	e00c      	b.n	80028c2 <PwmChannelSet+0x52>
	__HAL_TIM_SET_COMPARE(&htim4, Channel*4, Value);
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d104      	bne.n	80028ba <PwmChannelSet+0x4a>
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <PwmChannelSet+0x5c>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	88bb      	ldrh	r3, [r7, #4]
 80028b6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80028b8:	e003      	b.n	80028c2 <PwmChannelSet+0x52>
	__HAL_TIM_SET_COMPARE(&htim4, Channel*4, Value);
 80028ba:	4b04      	ldr	r3, [pc, #16]	; (80028cc <PwmChannelSet+0x5c>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	88bb      	ldrh	r3, [r7, #4]
 80028c0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	20002358 	.word	0x20002358

080028d0 <DisplayContrast>:

void DisplayContrast(uint8_t Contrast)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
	SSD1306_Command(SSD1306_SETCONTRAST);
 80028da:	2081      	movs	r0, #129	; 0x81
 80028dc:	f001 fa6a 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(Contrast);
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f001 fa66 	bl	8003db4 <SSD1306_Command>
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <ShowMenu>:



void ShowMenu(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
	ButtonRegisterPressCallback(&KeyDown, MenuNext);
 80028f4:	4909      	ldr	r1, [pc, #36]	; (800291c <ShowMenu+0x2c>)
 80028f6:	480a      	ldr	r0, [pc, #40]	; (8002920 <ShowMenu+0x30>)
 80028f8:	f7ff fa0b 	bl	8001d12 <ButtonRegisterPressCallback>
	ButtonRegisterRepeatCallback(&KeyDown, MenuPrev);
 80028fc:	4909      	ldr	r1, [pc, #36]	; (8002924 <ShowMenu+0x34>)
 80028fe:	4808      	ldr	r0, [pc, #32]	; (8002920 <ShowMenu+0x30>)
 8002900:	f7ff fa14 	bl	8001d2c <ButtonRegisterRepeatCallback>
	ButtonRegisterPressCallback(&KeyUp, MenuEnter);
 8002904:	4908      	ldr	r1, [pc, #32]	; (8002928 <ShowMenu+0x38>)
 8002906:	4809      	ldr	r0, [pc, #36]	; (800292c <ShowMenu+0x3c>)
 8002908:	f7ff fa03 	bl	8001d12 <ButtonRegisterPressCallback>
	ActualVisibleFunc = ScrollString;
 800290c:	4b08      	ldr	r3, [pc, #32]	; (8002930 <ShowMenu+0x40>)
 800290e:	4a09      	ldr	r2, [pc, #36]	; (8002934 <ShowMenu+0x44>)
 8002910:	601a      	str	r2, [r3, #0]
	MenuRefresh();
 8002912:	f000 fda7 	bl	8003464 <MenuRefresh>
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	080031e9 	.word	0x080031e9
 8002920:	20000a20 	.word	0x20000a20
 8002924:	0800326d 	.word	0x0800326d
 8002928:	080032e5 	.word	0x080032e5
 800292c:	200009f4 	.word	0x200009f4
 8002930:	20001aa8 	.word	0x20001aa8
 8002934:	0800360d 	.word	0x0800360d

08002938 <HideMenu>:

void HideMenu(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
	ButtonRegisterPressCallback(&KeyDown, NULL);
 800293c:	2100      	movs	r1, #0
 800293e:	4808      	ldr	r0, [pc, #32]	; (8002960 <HideMenu+0x28>)
 8002940:	f7ff f9e7 	bl	8001d12 <ButtonRegisterPressCallback>
	ButtonRegisterRepeatCallback(&KeyDown, NULL);
 8002944:	2100      	movs	r1, #0
 8002946:	4806      	ldr	r0, [pc, #24]	; (8002960 <HideMenu+0x28>)
 8002948:	f7ff f9f0 	bl	8001d2c <ButtonRegisterRepeatCallback>
	ButtonRegisterPressCallback(&KeyUp, NULL);
 800294c:	2100      	movs	r1, #0
 800294e:	4805      	ldr	r0, [pc, #20]	; (8002964 <HideMenu+0x2c>)
 8002950:	f7ff f9df 	bl	8001d12 <ButtonRegisterPressCallback>
	ActualVisibleFunc = NULL;
 8002954:	4b04      	ldr	r3, [pc, #16]	; (8002968 <HideMenu+0x30>)
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20000a20 	.word	0x20000a20
 8002964:	200009f4 	.word	0x200009f4
 8002968:	20001aa8 	.word	0x20001aa8

0800296c <ShowMeasurements>:

void ShowMeasurements(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af02      	add	r7, sp, #8
	HideMenu();
 8002972:	f7ff ffe1 	bl	8002938 <HideMenu>
	ActualVisibleFunc = ShowMeasurements;
 8002976:	4b23      	ldr	r3, [pc, #140]	; (8002a04 <ShowMeasurements+0x98>)
 8002978:	4a23      	ldr	r2, [pc, #140]	; (8002a08 <ShowMeasurements+0x9c>)
 800297a:	601a      	str	r2, [r3, #0]
	ButtonRegisterPressCallback(&KeyDown, ShowMenu);
 800297c:	4923      	ldr	r1, [pc, #140]	; (8002a0c <ShowMeasurements+0xa0>)
 800297e:	4824      	ldr	r0, [pc, #144]	; (8002a10 <ShowMeasurements+0xa4>)
 8002980:	f7ff f9c7 	bl	8001d12 <ButtonRegisterPressCallback>
	SSD1306_Clear(BLACK);
 8002984:	2000      	movs	r0, #0
 8002986:	f001 fadd 	bl	8003f44 <SSD1306_Clear>
	char buff[16];
	sprintf(buff, "5V:   %.2fV", Measurements.Voltage5);
 800298a:	4b22      	ldr	r3, [pc, #136]	; (8002a14 <ShowMeasurements+0xa8>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fd fdb6 	bl	8000500 <__aeabi_f2d>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4638      	mov	r0, r7
 800299a:	491f      	ldr	r1, [pc, #124]	; (8002a18 <ShowMeasurements+0xac>)
 800299c:	f00e fbe0 	bl	8011160 <siprintf>
	GFX_DrawString(0, 0, buff, WHITE, 1);
 80029a0:	463a      	mov	r2, r7
 80029a2:	2301      	movs	r3, #1
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	2301      	movs	r3, #1
 80029a8:	2100      	movs	r1, #0
 80029aa:	2000      	movs	r0, #0
 80029ac:	f7fe fd38 	bl	8001420 <GFX_DrawString>
	sprintf(buff, "12V:  %.2fV", Measurements.Voltage12);
 80029b0:	4b18      	ldr	r3, [pc, #96]	; (8002a14 <ShowMeasurements+0xa8>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fd fda3 	bl	8000500 <__aeabi_f2d>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4638      	mov	r0, r7
 80029c0:	4916      	ldr	r1, [pc, #88]	; (8002a1c <ShowMeasurements+0xb0>)
 80029c2:	f00e fbcd 	bl	8011160 <siprintf>
	GFX_DrawString(0, 16, buff, WHITE, 1);
 80029c6:	463a      	mov	r2, r7
 80029c8:	2301      	movs	r3, #1
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	2301      	movs	r3, #1
 80029ce:	2110      	movs	r1, #16
 80029d0:	2000      	movs	r0, #0
 80029d2:	f7fe fd25 	bl	8001420 <GFX_DrawString>
	sprintf(buff, "Curr: %.2fA", Measurements.Current);
 80029d6:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <ShowMeasurements+0xa8>)
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fd90 	bl	8000500 <__aeabi_f2d>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4638      	mov	r0, r7
 80029e6:	490e      	ldr	r1, [pc, #56]	; (8002a20 <ShowMeasurements+0xb4>)
 80029e8:	f00e fbba 	bl	8011160 <siprintf>
	GFX_DrawString(0, 32, buff, WHITE, 1);
 80029ec:	463a      	mov	r2, r7
 80029ee:	2301      	movs	r3, #1
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	2301      	movs	r3, #1
 80029f4:	2120      	movs	r1, #32
 80029f6:	2000      	movs	r0, #0
 80029f8:	f7fe fd12 	bl	8001420 <GFX_DrawString>
}
 80029fc:	bf00      	nop
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20001aa8 	.word	0x20001aa8
 8002a08:	0800296d 	.word	0x0800296d
 8002a0c:	080028f1 	.word	0x080028f1
 8002a10:	20000a20 	.word	0x20000a20
 8002a14:	20001a90 	.word	0x20001a90
 8002a18:	08013830 	.word	0x08013830
 8002a1c:	0801383c 	.word	0x0801383c
 8002a20:	08013848 	.word	0x08013848

08002a24 <ShowTemperature>:

void ShowTemperature(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af02      	add	r7, sp, #8
	HideMenu();
 8002a2a:	f7ff ff85 	bl	8002938 <HideMenu>
	ActualVisibleFunc = ShowTemperature;
 8002a2e:	4b1a      	ldr	r3, [pc, #104]	; (8002a98 <ShowTemperature+0x74>)
 8002a30:	4a1a      	ldr	r2, [pc, #104]	; (8002a9c <ShowTemperature+0x78>)
 8002a32:	601a      	str	r2, [r3, #0]
	ButtonRegisterPressCallback(&KeyDown, ShowMenu);
 8002a34:	491a      	ldr	r1, [pc, #104]	; (8002aa0 <ShowTemperature+0x7c>)
 8002a36:	481b      	ldr	r0, [pc, #108]	; (8002aa4 <ShowTemperature+0x80>)
 8002a38:	f7ff f96b 	bl	8001d12 <ButtonRegisterPressCallback>
	SSD1306_Clear(BLACK);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f001 fa81 	bl	8003f44 <SSD1306_Clear>
	char buff[16];
	sprintf(buff, "MCU: %.2fC", Measurements.InternalTemperature);
 8002a42:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <ShowTemperature+0x84>)
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fd fd5a 	bl	8000500 <__aeabi_f2d>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4638      	mov	r0, r7
 8002a52:	4916      	ldr	r1, [pc, #88]	; (8002aac <ShowTemperature+0x88>)
 8002a54:	f00e fb84 	bl	8011160 <siprintf>
	GFX_DrawString(0, 0, buff, WHITE, 1);
 8002a58:	463a      	mov	r2, r7
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	2301      	movs	r3, #1
 8002a60:	2100      	movs	r1, #0
 8002a62:	2000      	movs	r0, #0
 8002a64:	f7fe fcdc 	bl	8001420 <GFX_DrawString>
	sprintf(buff, "Amb: %.2fC", Temperature);
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <ShowTemperature+0x8c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fd47 	bl	8000500 <__aeabi_f2d>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	4638      	mov	r0, r7
 8002a78:	490e      	ldr	r1, [pc, #56]	; (8002ab4 <ShowTemperature+0x90>)
 8002a7a:	f00e fb71 	bl	8011160 <siprintf>
	GFX_DrawString(0, 16, buff, WHITE, 1);
 8002a7e:	463a      	mov	r2, r7
 8002a80:	2301      	movs	r3, #1
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	2301      	movs	r3, #1
 8002a86:	2110      	movs	r1, #16
 8002a88:	2000      	movs	r0, #0
 8002a8a:	f7fe fcc9 	bl	8001420 <GFX_DrawString>
}
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20001aa8 	.word	0x20001aa8
 8002a9c:	08002a25 	.word	0x08002a25
 8002aa0:	080028f1 	.word	0x080028f1
 8002aa4:	20000a20 	.word	0x20000a20
 8002aa8:	20001a90 	.word	0x20001a90
 8002aac:	08013854 	.word	0x08013854
 8002ab0:	20001a6c 	.word	0x20001a6c
 8002ab4:	08013860 	.word	0x08013860

08002ab8 <Show8bitIndicators>:

void Show8bitIndicators(uint8_t Data, uint8_t NameNumberStart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	4603      	mov	r3, r0
 8002ac0:	460a      	mov	r2, r1
 8002ac2:	71fb      	strb	r3, [r7, #7]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	71bb      	strb	r3, [r7, #6]
	ButtonRegisterPressCallback(&KeyDown, ShowMenu);
 8002ac8:	4941      	ldr	r1, [pc, #260]	; (8002bd0 <Show8bitIndicators+0x118>)
 8002aca:	4842      	ldr	r0, [pc, #264]	; (8002bd4 <Show8bitIndicators+0x11c>)
 8002acc:	f7ff f921 	bl	8001d12 <ButtonRegisterPressCallback>
	SSD1306_Clear(BLACK);
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f001 fa37 	bl	8003f44 <SSD1306_Clear>

	char buff[4];
	GFX_SetFont(font_8x5);
 8002ad6:	4840      	ldr	r0, [pc, #256]	; (8002bd8 <Show8bitIndicators+0x120>)
 8002ad8:	f7fe fbc8 	bl	800126c <GFX_SetFont>
	GFX_SetFontSize(1);
 8002adc:	2001      	movs	r0, #1
 8002ade:	f7fe fbd3 	bl	8001288 <GFX_SetFontSize>
	for(uint8_t i=0; i<=7; i++)
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73fb      	strb	r3, [r7, #15]
 8002ae6:	e06a      	b.n	8002bbe <Show8bitIndicators+0x106>
	{
		sprintf(buff, "%u.", NameNumberStart + i);
 8002ae8:	79ba      	ldrb	r2, [r7, #6]
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	441a      	add	r2, r3
 8002aee:	f107 0308 	add.w	r3, r7, #8
 8002af2:	493a      	ldr	r1, [pc, #232]	; (8002bdc <Show8bitIndicators+0x124>)
 8002af4:	4618      	mov	r0, r3
 8002af6:	f00e fb33 	bl	8011160 <siprintf>
		uint8_t y = 20;
 8002afa:	2314      	movs	r3, #20
 8002afc:	73bb      	strb	r3, [r7, #14]
		uint8_t y_name = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	737b      	strb	r3, [r7, #13]
		if(i>3)
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d903      	bls.n	8002b10 <Show8bitIndicators+0x58>
		{
			y = 43;
 8002b08:	232b      	movs	r3, #43	; 0x2b
 8002b0a:	73bb      	strb	r3, [r7, #14]
			y_name = 57;
 8002b0c:	2339      	movs	r3, #57	; 0x39
 8002b0e:	737b      	strb	r3, [r7, #13]
		}
		GFX_DrawString(15 + (30 * ((i<4)?i:i-4)), y_name, buff, WHITE, 1);
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d807      	bhi.n	8002b26 <Show8bitIndicators+0x6e>
 8002b16:	7bfa      	ldrb	r2, [r7, #15]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	f103 000f 	add.w	r0, r3, #15
 8002b24:	e007      	b.n	8002b36 <Show8bitIndicators+0x7e>
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	1f1a      	subs	r2, r3, #4
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	1a9b      	subs	r3, r3, r2
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	f103 000f 	add.w	r0, r3, #15
 8002b36:	7b79      	ldrb	r1, [r7, #13]
 8002b38:	f107 0208 	add.w	r2, r7, #8
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	2301      	movs	r3, #1
 8002b42:	f7fe fc6d 	bl	8001420 <GFX_DrawString>
		if((Data>>i)&1)
 8002b46:	79fa      	ldrb	r2, [r7, #7]
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	fa42 f303 	asr.w	r3, r2, r3
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d018      	beq.n	8002b88 <Show8bitIndicators+0xd0>
		{
			GFX_DrawFillCircle(20 + (30 * ((i<4)?i:i-4)), y, 10, WHITE);
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d807      	bhi.n	8002b6c <Show8bitIndicators+0xb4>
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	f103 0014 	add.w	r0, r3, #20
 8002b6a:	e007      	b.n	8002b7c <Show8bitIndicators+0xc4>
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	1f1a      	subs	r2, r3, #4
 8002b70:	4613      	mov	r3, r2
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	f103 0014 	add.w	r0, r3, #20
 8002b7c:	7bb9      	ldrb	r1, [r7, #14]
 8002b7e:	2301      	movs	r3, #1
 8002b80:	220a      	movs	r2, #10
 8002b82:	f7fe ff52 	bl	8001a2a <GFX_DrawFillCircle>
 8002b86:	e017      	b.n	8002bb8 <Show8bitIndicators+0x100>
		}
		else
		{
			GFX_DrawCircle(20 + (30 * ((i<4)?i:i-4)), y, 10, WHITE);
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d807      	bhi.n	8002b9e <Show8bitIndicators+0xe6>
 8002b8e:	7bfa      	ldrb	r2, [r7, #15]
 8002b90:	4613      	mov	r3, r2
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	f103 0014 	add.w	r0, r3, #20
 8002b9c:	e007      	b.n	8002bae <Show8bitIndicators+0xf6>
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	1f1a      	subs	r2, r3, #4
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	f103 0014 	add.w	r0, r3, #20
 8002bae:	7bb9      	ldrb	r1, [r7, #14]
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	220a      	movs	r2, #10
 8002bb4:	f7fe fd9c 	bl	80016f0 <GFX_DrawCircle>
	for(uint8_t i=0; i<=7; i++)
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	2b07      	cmp	r3, #7
 8002bc2:	d991      	bls.n	8002ae8 <Show8bitIndicators+0x30>
		}


	}
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	080028f1 	.word	0x080028f1
 8002bd4:	20000a20 	.word	0x20000a20
 8002bd8:	08013a54 	.word	0x08013a54
 8002bdc:	0801386c 	.word	0x0801386c

08002be0 <ShowOut0to7>:

void ShowOut0to7(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
	HideMenu();
 8002be4:	f7ff fea8 	bl	8002938 <HideMenu>
	ActualVisibleFunc = ShowOut0to7;
 8002be8:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <ShowOut0to7+0x20>)
 8002bea:	4a06      	ldr	r2, [pc, #24]	; (8002c04 <ShowOut0to7+0x24>)
 8002bec:	601a      	str	r2, [r3, #0]
	Show8bitIndicators(GPIOE -> ODR, 0);
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <ShowOut0to7+0x28>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff ff5e 	bl	8002ab8 <Show8bitIndicators>
}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	20001aa8 	.word	0x20001aa8
 8002c04:	08002be1 	.word	0x08002be1
 8002c08:	40011800 	.word	0x40011800

08002c0c <ShowOut8to15>:

void ShowOut8to15(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
	HideMenu();
 8002c10:	f7ff fe92 	bl	8002938 <HideMenu>
	ActualVisibleFunc = ShowOut8to15;
 8002c14:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <ShowOut8to15+0x24>)
 8002c16:	4a07      	ldr	r2, [pc, #28]	; (8002c34 <ShowOut8to15+0x28>)
 8002c18:	601a      	str	r2, [r3, #0]
	Show8bitIndicators((GPIOE -> ODR) >> 8, 8);
 8002c1a:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <ShowOut8to15+0x2c>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	0a1b      	lsrs	r3, r3, #8
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2108      	movs	r1, #8
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ff47 	bl	8002ab8 <Show8bitIndicators>
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20001aa8 	.word	0x20001aa8
 8002c34:	08002c0d 	.word	0x08002c0d
 8002c38:	40011800 	.word	0x40011800

08002c3c <ShowIn0to7>:

void ShowIn0to7(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
	HideMenu();
 8002c40:	f7ff fe7a 	bl	8002938 <HideMenu>
	ActualVisibleFunc = ShowIn0to7;
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <ShowIn0to7+0x24>)
 8002c46:	4a07      	ldr	r2, [pc, #28]	; (8002c64 <ShowIn0to7+0x28>)
 8002c48:	601a      	str	r2, [r3, #0]
	Show8bitIndicators(~(GPIOG -> IDR), 0);
 8002c4a:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <ShowIn0to7+0x2c>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2100      	movs	r1, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff ff2e 	bl	8002ab8 <Show8bitIndicators>
}
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20001aa8 	.word	0x20001aa8
 8002c64:	08002c3d 	.word	0x08002c3d
 8002c68:	40012000 	.word	0x40012000

08002c6c <ShowIn8to15>:

void ShowIn8to15(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
	HideMenu();
 8002c70:	f7ff fe62 	bl	8002938 <HideMenu>
	ActualVisibleFunc = ShowIn8to15;
 8002c74:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <ShowIn8to15+0x28>)
 8002c76:	4a08      	ldr	r2, [pc, #32]	; (8002c98 <ShowIn8to15+0x2c>)
 8002c78:	601a      	str	r2, [r3, #0]
	Show8bitIndicators(~((GPIOG -> IDR) >> 8), 8);
 8002c7a:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <ShowIn8to15+0x30>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	0a1b      	lsrs	r3, r3, #8
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2108      	movs	r1, #8
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff15 	bl	8002ab8 <Show8bitIndicators>
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20001aa8 	.word	0x20001aa8
 8002c98:	08002c6d 	.word	0x08002c6d
 8002c9c:	40012000 	.word	0x40012000

08002ca0 <ShowPWMsetMenu>:

void ShowPWMsetMenu(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
//	for(uint8_t i; i<4; i++)
//	{
//		sprintf(buff, "%u", (uint16_t*)__HAL_TIM_GET_COMPARE(&htim4, i * 4));
//		GFX_DrawString(3 + (30*i), 25, buff, WHITE, 1);
//	}
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	if(hadc ->Instance == ADC1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a08      	ldr	r2, [pc, #32]	; (8002cdc <HAL_ADC_ConvCpltCallback+0x30>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d109      	bne.n	8002cd2 <HAL_ADC_ConvCpltCallback+0x26>
	{
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)Measurements.Adc1Value, 4);
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	4907      	ldr	r1, [pc, #28]	; (8002ce0 <HAL_ADC_ConvCpltCallback+0x34>)
 8002cc2:	4808      	ldr	r0, [pc, #32]	; (8002ce4 <HAL_ADC_ConvCpltCallback+0x38>)
 8002cc4:	f001 ffd2 	bl	8004c6c <HAL_ADC_Start_DMA>
		ITCount++;
 8002cc8:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <HAL_ADC_ConvCpltCallback+0x3c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	4a06      	ldr	r2, [pc, #24]	; (8002ce8 <HAL_ADC_ConvCpltCallback+0x3c>)
 8002cd0:	6013      	str	r3, [r2, #0]
	}
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40012400 	.word	0x40012400
 8002ce0:	20001a90 	.word	0x20001a90
 8002ce4:	20000860 	.word	0x20000860
 8002ce8:	20001a8c 	.word	0x20001a8c

08002cec <MeasurementConversion>:

void MeasurementConversion(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
	Measurements.Voltage5 = Measurements.Voltage5Raw /1241.0F*2;
 8002cf0:	4b19      	ldr	r3, [pc, #100]	; (8002d58 <MeasurementConversion+0x6c>)
 8002cf2:	885b      	ldrh	r3, [r3, #2]
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd ffec 	bl	8000cd4 <__aeabi_i2f>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4917      	ldr	r1, [pc, #92]	; (8002d5c <MeasurementConversion+0x70>)
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fe f8ef 	bl	8000ee4 <__aeabi_fdiv>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fd ff2e 	bl	8000b6c <__addsf3>
 8002d10:	4603      	mov	r3, r0
 8002d12:	461a      	mov	r2, r3
 8002d14:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <MeasurementConversion+0x6c>)
 8002d16:	60da      	str	r2, [r3, #12]
	Measurements.InternalTemperature = ((Measurements.InternalTemperatureRaw /1241.0F) - V25) / AVG_SLOPE + 25;
 8002d18:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <MeasurementConversion+0x6c>)
 8002d1a:	88db      	ldrh	r3, [r3, #6]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd ffd8 	bl	8000cd4 <__aeabi_i2f>
 8002d24:	4603      	mov	r3, r0
 8002d26:	490d      	ldr	r1, [pc, #52]	; (8002d5c <MeasurementConversion+0x70>)
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fe f8db 	bl	8000ee4 <__aeabi_fdiv>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	490b      	ldr	r1, [pc, #44]	; (8002d60 <MeasurementConversion+0x74>)
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fd ff18 	bl	8000b68 <__aeabi_fsub>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	490a      	ldr	r1, [pc, #40]	; (8002d64 <MeasurementConversion+0x78>)
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe f8d1 	bl	8000ee4 <__aeabi_fdiv>
 8002d42:	4603      	mov	r3, r0
 8002d44:	4908      	ldr	r1, [pc, #32]	; (8002d68 <MeasurementConversion+0x7c>)
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd ff10 	bl	8000b6c <__addsf3>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4b01      	ldr	r3, [pc, #4]	; (8002d58 <MeasurementConversion+0x6c>)
 8002d52:	615a      	str	r2, [r3, #20]
}
 8002d54:	bf00      	nop
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20001a90 	.word	0x20001a90
 8002d5c:	449b2000 	.word	0x449b2000
 8002d60:	3fb70a3d 	.word	0x3fb70a3d
 8002d64:	4089999a 	.word	0x4089999a
 8002d68:	41c80000 	.word	0x41c80000

08002d6c <IntervalFunc500ms>:



void IntervalFunc500ms(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
	  if(HAL_GetTick() - OldTick500ms >500)
 8002d70:	f001 fe88 	bl	8004a84 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	4b1c      	ldr	r3, [pc, #112]	; (8002de8 <IntervalFunc500ms+0x7c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d80:	d92f      	bls.n	8002de2 <IntervalFunc500ms+0x76>
	  {
		  OldTick500ms = HAL_GetTick();
 8002d82:	f001 fe7f 	bl	8004a84 <HAL_GetTick>
 8002d86:	4603      	mov	r3, r0
 8002d88:	4a17      	ldr	r2, [pc, #92]	; (8002de8 <IntervalFunc500ms+0x7c>)
 8002d8a:	6013      	str	r3, [r2, #0]
//		  {
//			  m24cxxFullRead(&M24C02, EpromBufer);
//		  }


		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8002d8c:	2102      	movs	r1, #2
 8002d8e:	4817      	ldr	r0, [pc, #92]	; (8002dec <IntervalFunc500ms+0x80>)
 8002d90:	f003 fa4b 	bl	800622a <HAL_GPIO_TogglePin>

		  static uint8_t TempMeasureFlag = 0;
		  if(!TempMeasureFlag)
 8002d94:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <IntervalFunc500ms+0x84>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d106      	bne.n	8002daa <IntervalFunc500ms+0x3e>
		  {
			  ds18b20_start_measure(NULL);
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f7ff f96a 	bl	8002076 <ds18b20_start_measure>
			  TempMeasureFlag = 1;
 8002da2:	4b13      	ldr	r3, [pc, #76]	; (8002df0 <IntervalFunc500ms+0x84>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	701a      	strb	r2, [r3, #0]
			  Temperature = Temp;
			  Temperature = Temperature/100;
			  TempMeasureFlag = 0;
		  }
	  }
}
 8002da8:	e01b      	b.n	8002de2 <IntervalFunc500ms+0x76>
			  Temp = ds18b20_get_temp_wo_fp(NULL);
 8002daa:	2000      	movs	r0, #0
 8002dac:	f7ff f9a1 	bl	80020f2 <ds18b20_get_temp_wo_fp>
 8002db0:	4603      	mov	r3, r0
 8002db2:	461a      	mov	r2, r3
 8002db4:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <IntervalFunc500ms+0x88>)
 8002db6:	601a      	str	r2, [r3, #0]
			  Temperature = Temp;
 8002db8:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <IntervalFunc500ms+0x88>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fd ff89 	bl	8000cd4 <__aeabi_i2f>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	4a0c      	ldr	r2, [pc, #48]	; (8002df8 <IntervalFunc500ms+0x8c>)
 8002dc6:	6013      	str	r3, [r2, #0]
			  Temperature = Temperature/100;
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <IntervalFunc500ms+0x8c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	490b      	ldr	r1, [pc, #44]	; (8002dfc <IntervalFunc500ms+0x90>)
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe f888 	bl	8000ee4 <__aeabi_fdiv>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	4b07      	ldr	r3, [pc, #28]	; (8002df8 <IntervalFunc500ms+0x8c>)
 8002dda:	601a      	str	r2, [r3, #0]
			  TempMeasureFlag = 0;
 8002ddc:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <IntervalFunc500ms+0x84>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20001a5c 	.word	0x20001a5c
 8002dec:	40010800 	.word	0x40010800
 8002df0:	20001aac 	.word	0x20001aac
 8002df4:	20001a68 	.word	0x20001a68
 8002df8:	20001a6c 	.word	0x20001a6c
 8002dfc:	42c80000 	.word	0x42c80000

08002e00 <IntervalFunc100ms>:

void IntervalFunc100ms(void)
{
 8002e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e04:	b0cd      	sub	sp, #308	; 0x134
 8002e06:	af08      	add	r7, sp, #32
	if(HAL_GetTick() - OldTick100ms >100)
 8002e08:	f001 fe3c 	bl	8004a84 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	4b26      	ldr	r3, [pc, #152]	; (8002ea8 <IntervalFunc100ms+0xa8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b64      	cmp	r3, #100	; 0x64
 8002e16:	d941      	bls.n	8002e9c <IntervalFunc100ms+0x9c>
		/*
		 * Message to send id. 0.
		 * 0/Input 16bit/Output 16bit/PWM1/PWM2/PWM3/PWM4/Temperature/12V/5V/Current
		 */
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f",
									(uint16_t*)((~GPIOG->IDR)&0xff),
 8002e18:	4b24      	ldr	r3, [pc, #144]	; (8002eac <IntervalFunc100ms+0xac>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f",
 8002e20:	4698      	mov	r8, r3
									(uint16_t*)GPIOE->ODR,
 8002e22:	4b23      	ldr	r3, [pc, #140]	; (8002eb0 <IntervalFunc100ms+0xb0>)
 8002e24:	68db      	ldr	r3, [r3, #12]
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f",
 8002e26:	4699      	mov	r9, r3
									(uint16_t*)__HAL_TIM_GetCompare(&htim4, TIM_CHANNEL_1),
 8002e28:	4b22      	ldr	r3, [pc, #136]	; (8002eb4 <IntervalFunc100ms+0xb4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f",
 8002e2e:	461e      	mov	r6, r3
									(uint16_t*)__HAL_TIM_GetCompare(&htim4, TIM_CHANNEL_2),
 8002e30:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <IntervalFunc100ms+0xb4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f",
 8002e36:	60fb      	str	r3, [r7, #12]
									(uint16_t*)__HAL_TIM_GetCompare(&htim4, TIM_CHANNEL_3),
 8002e38:	4b1e      	ldr	r3, [pc, #120]	; (8002eb4 <IntervalFunc100ms+0xb4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f",
 8002e3e:	60bb      	str	r3, [r7, #8]
									(uint16_t*)__HAL_TIM_GetCompare(&htim4, TIM_CHANNEL_4),
 8002e40:	4b1c      	ldr	r3, [pc, #112]	; (8002eb4 <IntervalFunc100ms+0xb4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f",
 8002e46:	607b      	str	r3, [r7, #4]
 8002e48:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <IntervalFunc100ms+0xb8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fd fb57 	bl	8000500 <__aeabi_f2d>
 8002e52:	4604      	mov	r4, r0
 8002e54:	460d      	mov	r5, r1
									Temperature,
									Measurements.InternalTemperature);
 8002e56:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <IntervalFunc100ms+0xbc>)
 8002e58:	695b      	ldr	r3, [r3, #20]
		sprintf(MsgToSend, "0/%u/%u/%u/%u/%u/%u/%.2f/%.2f",
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fd fb50 	bl	8000500 <__aeabi_f2d>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	f107 0010 	add.w	r0, r7, #16
 8002e68:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002e6c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	9203      	str	r2, [sp, #12]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	9202      	str	r2, [sp, #8]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	9301      	str	r3, [sp, #4]
 8002e7c:	9600      	str	r6, [sp, #0]
 8002e7e:	464b      	mov	r3, r9
 8002e80:	4642      	mov	r2, r8
 8002e82:	490f      	ldr	r1, [pc, #60]	; (8002ec0 <IntervalFunc100ms+0xc0>)
 8002e84:	f00e f96c 	bl	8011160 <siprintf>
		UsbBuffWrite(MsgToSend);
 8002e88:	f107 0310 	add.w	r3, r7, #16
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 f881 	bl	8002f94 <UsbBuffWrite>
		OldTick100ms = HAL_GetTick();
 8002e92:	f001 fdf7 	bl	8004a84 <HAL_GetTick>
 8002e96:	4603      	mov	r3, r0
 8002e98:	4a03      	ldr	r2, [pc, #12]	; (8002ea8 <IntervalFunc100ms+0xa8>)
 8002e9a:	6013      	str	r3, [r2, #0]
	}

}
 8002e9c:	bf00      	nop
 8002e9e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ea8:	20001a60 	.word	0x20001a60
 8002eac:	40012000 	.word	0x40012000
 8002eb0:	40011800 	.word	0x40011800
 8002eb4:	20002358 	.word	0x20002358
 8002eb8:	20001a6c 	.word	0x20001a6c
 8002ebc:	20001a90 	.word	0x20001a90
 8002ec0:	08013870 	.word	0x08013870

08002ec4 <IntervalFunc50ms>:

void IntervalFunc50ms(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - OldTick50ms >50)
 8002ec8:	f001 fddc 	bl	8004a84 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <IntervalFunc50ms+0x34>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b32      	cmp	r3, #50	; 0x32
 8002ed6:	d90d      	bls.n	8002ef4 <IntervalFunc50ms+0x30>
	{
		if(ActualVisibleFunc != NULL)
 8002ed8:	4b08      	ldr	r3, [pc, #32]	; (8002efc <IntervalFunc50ms+0x38>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <IntervalFunc50ms+0x22>
		{
			ActualVisibleFunc();
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <IntervalFunc50ms+0x38>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4798      	blx	r3
		}

		SSD1306_Display();
 8002ee6:	f001 f84b 	bl	8003f80 <SSD1306_Display>

		OldTick50ms = HAL_GetTick();
 8002eea:	f001 fdcb 	bl	8004a84 <HAL_GetTick>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	4a01      	ldr	r2, [pc, #4]	; (8002ef8 <IntervalFunc50ms+0x34>)
 8002ef2:	6013      	str	r3, [r2, #0]
	}

}
 8002ef4:	bf00      	nop
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	20001a64 	.word	0x20001a64
 8002efc:	20001aa8 	.word	0x20001aa8

08002f00 <HAL_I2C_MemTxCpltCallback>:



void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	m24cxxWcSetIt(&M24C02, hi2c);
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	4803      	ldr	r0, [pc, #12]	; (8002f18 <HAL_I2C_MemTxCpltCallback+0x18>)
 8002f0c:	f7fe fdd8 	bl	8001ac0 <m24cxxWcSetIt>
}
 8002f10:	bf00      	nop
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20001a78 	.word	0x20001a78

08002f1c <CDC_ReveiveCallback>:

void CDC_ReveiveCallback(uint8_t *Buffer, uint8_t Length)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	70fb      	strb	r3, [r7, #3]
	if(Length > 0)
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d027      	beq.n	8002f7e <CDC_ReveiveCallback+0x62>
	{
		uint8_t i = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	73fb      	strb	r3, [r7, #15]
		while(i < Length)
 8002f32:	e020      	b.n	8002f76 <CDC_ReveiveCallback+0x5a>
		{
		if (RB_OK == Ring_Buffer_Write(&ReceiveBuffer, Buffer[i]))
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	4413      	add	r3, r2
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4812      	ldr	r0, [pc, #72]	; (8002f88 <CDC_ReveiveCallback+0x6c>)
 8002f40:	f000 ff00 	bl	8003d44 <Ring_Buffer_Write>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10c      	bne.n	8002f64 <CDC_ReveiveCallback+0x48>
		{
			if(Buffer[i] == ENDLINE)
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	4413      	add	r3, r2
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b5e      	cmp	r3, #94	; 0x5e
 8002f54:	d10c      	bne.n	8002f70 <CDC_ReveiveCallback+0x54>
			{
				LineCounter++;
 8002f56:	4b0d      	ldr	r3, [pc, #52]	; (8002f8c <CDC_ReveiveCallback+0x70>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <CDC_ReveiveCallback+0x70>)
 8002f60:	701a      	strb	r2, [r3, #0]
 8002f62:	e005      	b.n	8002f70 <CDC_ReveiveCallback+0x54>
			}
		}
		else
		{
			Ring_Buffer_Flush(&ReceiveBuffer);
 8002f64:	4808      	ldr	r0, [pc, #32]	; (8002f88 <CDC_ReveiveCallback+0x6c>)
 8002f66:	f000 ff15 	bl	8003d94 <Ring_Buffer_Flush>
			UsbBuffWrite("ERROR");
 8002f6a:	4809      	ldr	r0, [pc, #36]	; (8002f90 <CDC_ReveiveCallback+0x74>)
 8002f6c:	f000 f812 	bl	8002f94 <UsbBuffWrite>
		}
		i++;
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	3301      	adds	r3, #1
 8002f74:	73fb      	strb	r3, [r7, #15]
		while(i < Length)
 8002f76:	7bfa      	ldrb	r2, [r7, #15]
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d3da      	bcc.n	8002f34 <CDC_ReveiveCallback+0x18>
		}
	}
}
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20000a4c 	.word	0x20000a4c
 8002f8c:	20001254 	.word	0x20001254
 8002f90:	08013890 	.word	0x08013890

08002f94 <UsbBuffWrite>:

void UsbBuffWrite(char * Message)
{
 8002f94:	b590      	push	{r4, r7, lr}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]

	DataToTransmit++;
 8002f9c:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <UsbBuffWrite+0x80>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <UsbBuffWrite+0x80>)
 8002fa6:	701a      	strb	r2, [r3, #0]
	for(uint8_t y = 0 ; y < strlen(Message) ; y++)
 8002fa8:	2300      	movs	r3, #0
 8002faa:	73fb      	strb	r3, [r7, #15]
 8002fac:	e016      	b.n	8002fdc <UsbBuffWrite+0x48>
	{
		if(RB_OK == Ring_Buffer_Write(&TransmitBuffer, Message[y]))
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4817      	ldr	r0, [pc, #92]	; (8003018 <UsbBuffWrite+0x84>)
 8002fba:	f000 fec3 	bl	8003d44 <Ring_Buffer_Write>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <UsbBuffWrite+0x42>
		{

		}
		else
		{
			Ring_Buffer_Flush(&TransmitBuffer);
 8002fc4:	4814      	ldr	r0, [pc, #80]	; (8003018 <UsbBuffWrite+0x84>)
 8002fc6:	f000 fee5 	bl	8003d94 <Ring_Buffer_Flush>
			DataToTransmit--;
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <UsbBuffWrite+0x80>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	4b10      	ldr	r3, [pc, #64]	; (8003014 <UsbBuffWrite+0x80>)
 8002fd4:	701a      	strb	r2, [r3, #0]
	for(uint8_t y = 0 ; y < strlen(Message) ; y++)
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
 8002fdc:	7bfc      	ldrb	r4, [r7, #15]
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fd f922 	bl	8000228 <strlen>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	429c      	cmp	r4, r3
 8002fe8:	d3e1      	bcc.n	8002fae <UsbBuffWrite+0x1a>
		}
	}

	if(RB_OK == Ring_Buffer_Write(&TransmitBuffer, '^'))
 8002fea:	215e      	movs	r1, #94	; 0x5e
 8002fec:	480a      	ldr	r0, [pc, #40]	; (8003018 <UsbBuffWrite+0x84>)
 8002fee:	f000 fea9 	bl	8003d44 <Ring_Buffer_Write>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <UsbBuffWrite+0x76>
	{

	}
	else
	{
		Ring_Buffer_Flush(&TransmitBuffer);
 8002ff8:	4807      	ldr	r0, [pc, #28]	; (8003018 <UsbBuffWrite+0x84>)
 8002ffa:	f000 fecb 	bl	8003d94 <Ring_Buffer_Flush>
		DataToTransmit--;
 8002ffe:	4b05      	ldr	r3, [pc, #20]	; (8003014 <UsbBuffWrite+0x80>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	3b01      	subs	r3, #1
 8003004:	b2da      	uxtb	r2, r3
 8003006:	4b03      	ldr	r3, [pc, #12]	; (8003014 <UsbBuffWrite+0x80>)
 8003008:	701a      	strb	r2, [r3, #0]
	}

}
 800300a:	bf00      	nop
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	bd90      	pop	{r4, r7, pc}
 8003012:	bf00      	nop
 8003014:	20001a58 	.word	0x20001a58
 8003018:	20000e50 	.word	0x20000e50

0800301c <UsbTransmitTask>:

void UsbTransmitTask(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8003022:	2300      	movs	r3, #0
 8003024:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	71bb      	strb	r3, [r7, #6]
		do
		{
			if(Ring_Buffer_Read(&TransmitBuffer, &tmp) == RB_OK)
 800302a:	1dbb      	adds	r3, r7, #6
 800302c:	4619      	mov	r1, r3
 800302e:	480e      	ldr	r0, [pc, #56]	; (8003068 <UsbTransmitTask+0x4c>)
 8003030:	f000 fe60 	bl	8003cf4 <Ring_Buffer_Read>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <UsbTransmitTask+0x34>
			{
			TransmitData[i] = tmp;
 800303a:	79fb      	ldrb	r3, [r7, #7]
 800303c:	79b9      	ldrb	r1, [r7, #6]
 800303e:	4a0b      	ldr	r2, [pc, #44]	; (800306c <UsbTransmitTask+0x50>)
 8003040:	54d1      	strb	r1, [r2, r3]
			i++;
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	3301      	adds	r3, #1
 8003046:	71fb      	strb	r3, [r7, #7]
			else
			{
				break;
			}

		} while(tmp != '^');
 8003048:	79bb      	ldrb	r3, [r7, #6]
 800304a:	2b5e      	cmp	r3, #94	; 0x5e
 800304c:	d1ed      	bne.n	800302a <UsbTransmitTask+0xe>
 800304e:	e000      	b.n	8003052 <UsbTransmitTask+0x36>
				break;
 8003050:	bf00      	nop

		CDC_Transmit_FS(TransmitData, i);
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	b29b      	uxth	r3, r3
 8003056:	4619      	mov	r1, r3
 8003058:	4804      	ldr	r0, [pc, #16]	; (800306c <UsbTransmitTask+0x50>)
 800305a:	f00d f815 	bl	8010088 <CDC_Transmit_FS>
}
 800305e:	bf00      	nop
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000e50 	.word	0x20000e50
 800306c:	20001658 	.word	0x20001658

08003070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003074:	b672      	cpsid	i
}
 8003076:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003078:	e7fe      	b.n	8003078 <Error_Handler+0x8>
	...

0800307c <HeaderDraw>:
	menu_t sub_menu6_3 = { BackStr, NULL, &sub_menu6_2, NULL, &menu6, MenuBack };


static void HeaderDraw(char *header)

{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08c      	sub	sp, #48	; 0x30
 8003080:	af02      	add	r7, sp, #8
 8003082:	6078      	str	r0, [r7, #4]
	  GFX_SetFont(font_8x5);
 8003084:	4857      	ldr	r0, [pc, #348]	; (80031e4 <HeaderDraw+0x168>)
 8003086:	f7fe f8f1 	bl	800126c <GFX_SetFont>
	  GFX_SetFontSize(1);
 800308a:	2001      	movs	r0, #1
 800308c:	f7fe f8fc 	bl	8001288 <GFX_SetFontSize>
	  size_t headerLen = strlen(header);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7fd f8c9 	bl	8000228 <strlen>
 8003096:	6238      	str	r0, [r7, #32]
	  char buff[20];
	  if(headerLen % 2)
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d04e      	beq.n	8003140 <HeaderDraw+0xc4>
	  {
		  for(uint8_t i = 0; i<19; i++)
 80030a2:	2300      	movs	r3, #0
 80030a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030a8:	e03a      	b.n	8003120 <HeaderDraw+0xa4>
		  {
			  if(i<9-(headerLen/2))
 80030aa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	085b      	lsrs	r3, r3, #1
 80030b2:	f1c3 0309 	rsb	r3, r3, #9
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d207      	bcs.n	80030ca <HeaderDraw+0x4e>
			  {
				  buff[i] = '-';
 80030ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030be:	3328      	adds	r3, #40	; 0x28
 80030c0:	443b      	add	r3, r7
 80030c2:	222d      	movs	r2, #45	; 0x2d
 80030c4:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80030c8:	e025      	b.n	8003116 <HeaderDraw+0x9a>
			  }
			  else if(i>=9-(headerLen/2) && i<9+(headerLen/2) + 1)
 80030ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	085b      	lsrs	r3, r3, #1
 80030d2:	f1c3 0309 	rsb	r3, r3, #9
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d316      	bcc.n	8003108 <HeaderDraw+0x8c>
 80030da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	085b      	lsrs	r3, r3, #1
 80030e2:	330a      	adds	r3, #10
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d20f      	bcs.n	8003108 <HeaderDraw+0x8c>
			  {
				  buff[i] = header[i-9+(headerLen/2)];
 80030e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	085b      	lsrs	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	3b09      	subs	r3, #9
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	441a      	add	r2, r3
 80030f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030fc:	7812      	ldrb	r2, [r2, #0]
 80030fe:	3328      	adds	r3, #40	; 0x28
 8003100:	443b      	add	r3, r7
 8003102:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8003106:	e006      	b.n	8003116 <HeaderDraw+0x9a>
			  }
			  else
			  {
				  buff[i] = '-';
 8003108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800310c:	3328      	adds	r3, #40	; 0x28
 800310e:	443b      	add	r3, r7
 8003110:	222d      	movs	r2, #45	; 0x2d
 8003112:	f803 2c1c 	strb.w	r2, [r3, #-28]
		  for(uint8_t i = 0; i<19; i++)
 8003116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800311a:	3301      	adds	r3, #1
 800311c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003124:	2b12      	cmp	r3, #18
 8003126:	d9c0      	bls.n	80030aa <HeaderDraw+0x2e>
			  }
		  }
		  buff[19] = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	77fb      	strb	r3, [r7, #31]
		  GFX_DrawString(9, 0, buff, WHITE, 0);
 800312c:	f107 020c 	add.w	r2, r7, #12
 8003130:	2300      	movs	r3, #0
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	2301      	movs	r3, #1
 8003136:	2100      	movs	r1, #0
 8003138:	2009      	movs	r0, #9
 800313a:	f7fe f971 	bl	8001420 <GFX_DrawString>
			  }
		  }
		  buff[18] = 0;
		  GFX_DrawString(11, 0, buff, WHITE, 0);
	  }
}
 800313e:	e04d      	b.n	80031dc <HeaderDraw+0x160>
		  for(uint8_t i = 0; i<18; i++)
 8003140:	2300      	movs	r3, #0
 8003142:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003146:	e03a      	b.n	80031be <HeaderDraw+0x142>
			  if(i<9-(headerLen/2))
 8003148:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	085b      	lsrs	r3, r3, #1
 8003150:	f1c3 0309 	rsb	r3, r3, #9
 8003154:	429a      	cmp	r2, r3
 8003156:	d207      	bcs.n	8003168 <HeaderDraw+0xec>
				  buff[i] = '-';
 8003158:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800315c:	3328      	adds	r3, #40	; 0x28
 800315e:	443b      	add	r3, r7
 8003160:	222d      	movs	r2, #45	; 0x2d
 8003162:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8003166:	e025      	b.n	80031b4 <HeaderDraw+0x138>
			  else if(i>=9-(headerLen/2) && i<9+(headerLen/2))
 8003168:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	085b      	lsrs	r3, r3, #1
 8003170:	f1c3 0309 	rsb	r3, r3, #9
 8003174:	429a      	cmp	r2, r3
 8003176:	d316      	bcc.n	80031a6 <HeaderDraw+0x12a>
 8003178:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	085b      	lsrs	r3, r3, #1
 8003180:	3309      	adds	r3, #9
 8003182:	429a      	cmp	r2, r3
 8003184:	d20f      	bcs.n	80031a6 <HeaderDraw+0x12a>
				  buff[i] = header[i-9+(headerLen/2)];
 8003186:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	085b      	lsrs	r3, r3, #1
 800318e:	4413      	add	r3, r2
 8003190:	3b09      	subs	r3, #9
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	441a      	add	r2, r3
 8003196:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800319a:	7812      	ldrb	r2, [r2, #0]
 800319c:	3328      	adds	r3, #40	; 0x28
 800319e:	443b      	add	r3, r7
 80031a0:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80031a4:	e006      	b.n	80031b4 <HeaderDraw+0x138>
				  buff[i] = '-';
 80031a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80031aa:	3328      	adds	r3, #40	; 0x28
 80031ac:	443b      	add	r3, r7
 80031ae:	222d      	movs	r2, #45	; 0x2d
 80031b0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		  for(uint8_t i = 0; i<18; i++)
 80031b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80031b8:	3301      	adds	r3, #1
 80031ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80031be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80031c2:	2b11      	cmp	r3, #17
 80031c4:	d9c0      	bls.n	8003148 <HeaderDraw+0xcc>
		  buff[18] = 0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	77bb      	strb	r3, [r7, #30]
		  GFX_DrawString(11, 0, buff, WHITE, 0);
 80031ca:	f107 020c 	add.w	r2, r7, #12
 80031ce:	2300      	movs	r3, #0
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	2301      	movs	r3, #1
 80031d4:	2100      	movs	r1, #0
 80031d6:	200b      	movs	r0, #11
 80031d8:	f7fe f922 	bl	8001420 <GFX_DrawString>
}
 80031dc:	bf00      	nop
 80031de:	3728      	adds	r7, #40	; 0x28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	08013a54 	.word	0x08013a54

080031e8 <MenuNext>:

void MenuNext(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
	if(CurrentPointer->next)
 80031ec:	4b1b      	ldr	r3, [pc, #108]	; (800325c <MenuNext+0x74>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d018      	beq.n	8003228 <MenuNext+0x40>
	{
		CurrentPointer = CurrentPointer->next;
 80031f6:	4b19      	ldr	r3, [pc, #100]	; (800325c <MenuNext+0x74>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4a17      	ldr	r2, [pc, #92]	; (800325c <MenuNext+0x74>)
 80031fe:	6013      	str	r3, [r2, #0]
		MenuIndex++;
 8003200:	4b17      	ldr	r3, [pc, #92]	; (8003260 <MenuNext+0x78>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	3301      	adds	r3, #1
 8003206:	b2da      	uxtb	r2, r3
 8003208:	4b15      	ldr	r3, [pc, #84]	; (8003260 <MenuNext+0x78>)
 800320a:	701a      	strb	r2, [r3, #0]
		if(++OledRowPos > OLED_ROWS - 1)
 800320c:	4b15      	ldr	r3, [pc, #84]	; (8003264 <MenuNext+0x7c>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	3301      	adds	r3, #1
 8003212:	b2da      	uxtb	r2, r3
 8003214:	4b13      	ldr	r3, [pc, #76]	; (8003264 <MenuNext+0x7c>)
 8003216:	701a      	strb	r2, [r3, #0]
 8003218:	4b12      	ldr	r3, [pc, #72]	; (8003264 <MenuNext+0x7c>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b02      	cmp	r3, #2
 800321e:	d918      	bls.n	8003252 <MenuNext+0x6a>
		{
			OledRowPos = OLED_ROWS - 1;
 8003220:	4b10      	ldr	r3, [pc, #64]	; (8003264 <MenuNext+0x7c>)
 8003222:	2202      	movs	r2, #2
 8003224:	701a      	strb	r2, [r3, #0]
 8003226:	e014      	b.n	8003252 <MenuNext+0x6a>
		}
	}
	else
	{
		MenuIndex = 0;
 8003228:	4b0d      	ldr	r3, [pc, #52]	; (8003260 <MenuNext+0x78>)
 800322a:	2200      	movs	r2, #0
 800322c:	701a      	strb	r2, [r3, #0]
		OledRowPos = 0;
 800322e:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <MenuNext+0x7c>)
 8003230:	2200      	movs	r2, #0
 8003232:	701a      	strb	r2, [r3, #0]
		if(CurrentPointer->parent)
 8003234:	4b09      	ldr	r3, [pc, #36]	; (800325c <MenuNext+0x74>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d006      	beq.n	800324c <MenuNext+0x64>
		{
			CurrentPointer = (CurrentPointer -> parent) -> child;
 800323e:	4b07      	ldr	r3, [pc, #28]	; (800325c <MenuNext+0x74>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	4a05      	ldr	r2, [pc, #20]	; (800325c <MenuNext+0x74>)
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e002      	b.n	8003252 <MenuNext+0x6a>
		}
		else
		{
			CurrentPointer = &menu1;
 800324c:	4b03      	ldr	r3, [pc, #12]	; (800325c <MenuNext+0x74>)
 800324e:	4a06      	ldr	r2, [pc, #24]	; (8003268 <MenuNext+0x80>)
 8003250:	601a      	str	r2, [r3, #0]
		}
	}
	MenuRefresh();
 8003252:	f000 f907 	bl	8003464 <MenuRefresh>
}
 8003256:	bf00      	nop
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20000004 	.word	0x20000004
 8003260:	20001aad 	.word	0x20001aad
 8003264:	20001aae 	.word	0x20001aae
 8003268:	20000008 	.word	0x20000008

0800326c <MenuPrev>:

void MenuPrev(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
	CurrentPointer = CurrentPointer -> prev;
 8003270:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <MenuPrev+0x6c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	4a18      	ldr	r2, [pc, #96]	; (80032d8 <MenuPrev+0x6c>)
 8003278:	6013      	str	r3, [r2, #0]

	if(MenuIndex)
 800327a:	4b18      	ldr	r3, [pc, #96]	; (80032dc <MenuPrev+0x70>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d010      	beq.n	80032a4 <MenuPrev+0x38>
	{
		MenuIndex--;
 8003282:	4b16      	ldr	r3, [pc, #88]	; (80032dc <MenuPrev+0x70>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	3b01      	subs	r3, #1
 8003288:	b2da      	uxtb	r2, r3
 800328a:	4b14      	ldr	r3, [pc, #80]	; (80032dc <MenuPrev+0x70>)
 800328c:	701a      	strb	r2, [r3, #0]
		if(OledRowPos > 0)
 800328e:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <MenuPrev+0x74>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d01b      	beq.n	80032ce <MenuPrev+0x62>
		{
			OledRowPos--;
 8003296:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <MenuPrev+0x74>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	3b01      	subs	r3, #1
 800329c:	b2da      	uxtb	r2, r3
 800329e:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <MenuPrev+0x74>)
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	e014      	b.n	80032ce <MenuPrev+0x62>
		}
	}
	else
	{
		MenuIndex = MenuGetIndex(CurrentPointer);
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <MenuPrev+0x6c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 f899 	bl	80033e0 <MenuGetIndex>
 80032ae:	4603      	mov	r3, r0
 80032b0:	461a      	mov	r2, r3
 80032b2:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <MenuPrev+0x70>)
 80032b4:	701a      	strb	r2, [r3, #0]
		{
			if(MenuIndex >= OLED_ROWS)
 80032b6:	4b09      	ldr	r3, [pc, #36]	; (80032dc <MenuPrev+0x70>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d903      	bls.n	80032c6 <MenuPrev+0x5a>
			{
				OledRowPos = OLED_ROWS - 1;
 80032be:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <MenuPrev+0x74>)
 80032c0:	2202      	movs	r2, #2
 80032c2:	701a      	strb	r2, [r3, #0]
 80032c4:	e003      	b.n	80032ce <MenuPrev+0x62>
			}
			else
			{
				OledRowPos = MenuIndex;
 80032c6:	4b05      	ldr	r3, [pc, #20]	; (80032dc <MenuPrev+0x70>)
 80032c8:	781a      	ldrb	r2, [r3, #0]
 80032ca:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <MenuPrev+0x74>)
 80032cc:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	MenuRefresh();
 80032ce:	f000 f8c9 	bl	8003464 <MenuRefresh>
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20000004 	.word	0x20000004
 80032dc:	20001aad 	.word	0x20001aad
 80032e0:	20001aae 	.word	0x20001aae

080032e4 <MenuEnter>:

void MenuEnter(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
	uint8_t Back = 0;
 80032ea:	2300      	movs	r3, #0
 80032ec:	71fb      	strb	r3, [r7, #7]

	if(CurrentPointer->menu_function != NULL && CurrentPointer->menu_function !=MenuBack)
 80032ee:	4b21      	ldr	r3, [pc, #132]	; (8003374 <MenuEnter+0x90>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <MenuEnter+0x2a>
 80032f8:	4b1e      	ldr	r3, [pc, #120]	; (8003374 <MenuEnter+0x90>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	4a1e      	ldr	r2, [pc, #120]	; (8003378 <MenuEnter+0x94>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d004      	beq.n	800330e <MenuEnter+0x2a>
	{
		CurrentPointer -> menu_function();
 8003304:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <MenuEnter+0x90>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	4798      	blx	r3
 800330c:	e00c      	b.n	8003328 <MenuEnter+0x44>
	}
	else if(CurrentPointer->menu_function != NULL && CurrentPointer->menu_function == MenuBack)
 800330e:	4b19      	ldr	r3, [pc, #100]	; (8003374 <MenuEnter+0x90>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d007      	beq.n	8003328 <MenuEnter+0x44>
 8003318:	4b16      	ldr	r3, [pc, #88]	; (8003374 <MenuEnter+0x90>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	4a16      	ldr	r2, [pc, #88]	; (8003378 <MenuEnter+0x94>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d101      	bne.n	8003328 <MenuEnter+0x44>
	{
		Back = 1;
 8003324:	2301      	movs	r3, #1
 8003326:	71fb      	strb	r3, [r7, #7]
	}

	if(CurrentPointer->child != NULL)
 8003328:	4b12      	ldr	r3, [pc, #72]	; (8003374 <MenuEnter+0x90>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d015      	beq.n	800335e <MenuEnter+0x7a>
	{

			OledRowPosLevel[MenuGetLevel(CurrentPointer)] = OledRowPos;
 8003332:	4b10      	ldr	r3, [pc, #64]	; (8003374 <MenuEnter+0x90>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f000 f876 	bl	8003428 <MenuGetLevel>
 800333c:	4603      	mov	r3, r0
 800333e:	461a      	mov	r2, r3
 8003340:	4b0e      	ldr	r3, [pc, #56]	; (800337c <MenuEnter+0x98>)
 8003342:	7819      	ldrb	r1, [r3, #0]
 8003344:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <MenuEnter+0x9c>)
 8003346:	5499      	strb	r1, [r3, r2]

		MenuIndex = 0;
 8003348:	4b0e      	ldr	r3, [pc, #56]	; (8003384 <MenuEnter+0xa0>)
 800334a:	2200      	movs	r2, #0
 800334c:	701a      	strb	r2, [r3, #0]
		OledRowPos = 0;
 800334e:	4b0b      	ldr	r3, [pc, #44]	; (800337c <MenuEnter+0x98>)
 8003350:	2200      	movs	r2, #0
 8003352:	701a      	strb	r2, [r3, #0]
		CurrentPointer = CurrentPointer -> child;
 8003354:	4b07      	ldr	r3, [pc, #28]	; (8003374 <MenuEnter+0x90>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	4a06      	ldr	r2, [pc, #24]	; (8003374 <MenuEnter+0x90>)
 800335c:	6013      	str	r3, [r2, #0]
	}

	if(Back == 1)
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <MenuEnter+0x84>
	{
		MenuBack();
 8003364:	f000 f810 	bl	8003388 <MenuBack>
	}

	MenuRefresh();
 8003368:	f000 f87c 	bl	8003464 <MenuRefresh>
}
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20000004 	.word	0x20000004
 8003378:	08003389 	.word	0x08003389
 800337c:	20001aae 	.word	0x20001aae
 8003380:	20001ab0 	.word	0x20001ab0
 8003384:	20001aad 	.word	0x20001aad

08003388 <MenuBack>:

void MenuBack(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
	if(CurrentPointer->parent != NULL)
 800338c:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <MenuBack+0x48>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00f      	beq.n	80033b6 <MenuBack+0x2e>
	{
		CurrentPointer = CurrentPointer -> parent;
 8003396:	4b0e      	ldr	r3, [pc, #56]	; (80033d0 <MenuBack+0x48>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	4a0c      	ldr	r2, [pc, #48]	; (80033d0 <MenuBack+0x48>)
 800339e:	6013      	str	r3, [r2, #0]
		OledRowPos = OledRowPosLevel[MenuGetLevel(CurrentPointer)];
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <MenuBack+0x48>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 f83f 	bl	8003428 <MenuGetLevel>
 80033aa:	4603      	mov	r3, r0
 80033ac:	461a      	mov	r2, r3
 80033ae:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <MenuBack+0x4c>)
 80033b0:	5c9a      	ldrb	r2, [r3, r2]
 80033b2:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <MenuBack+0x50>)
 80033b4:	701a      	strb	r2, [r3, #0]
	}

//	CurrentPointer = CurrentPointer -> parent;
	MenuIndex = MenuGetIndex(CurrentPointer);
 80033b6:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <MenuBack+0x48>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 f810 	bl	80033e0 <MenuGetIndex>
 80033c0:	4603      	mov	r3, r0
 80033c2:	461a      	mov	r2, r3
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <MenuBack+0x54>)
 80033c6:	701a      	strb	r2, [r3, #0]

	MenuRefresh();
 80033c8:	f000 f84c 	bl	8003464 <MenuRefresh>
}
 80033cc:	bf00      	nop
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	20000004 	.word	0x20000004
 80033d4:	20001ab0 	.word	0x20001ab0
 80033d8:	20001aae 	.word	0x20001aae
 80033dc:	20001aad 	.word	0x20001aad

080033e0 <MenuGetIndex>:

static uint8_t MenuGetIndex(menu_t *menu)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
	menu_t *temp;
	uint8_t i = 0;
 80033e8:	2300      	movs	r3, #0
 80033ea:	72fb      	strb	r3, [r7, #11]

	if(menu->parent)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d004      	beq.n	80033fe <MenuGetIndex+0x1e>
	{
		temp = (menu->parent) -> child;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	e008      	b.n	8003410 <MenuGetIndex+0x30>
	}
	else
	{
		temp = &menu1;
 80033fe:	4b09      	ldr	r3, [pc, #36]	; (8003424 <MenuGetIndex+0x44>)
 8003400:	60fb      	str	r3, [r7, #12]
	}

	while(temp != menu)
 8003402:	e005      	b.n	8003410 <MenuGetIndex+0x30>
	{
		temp = temp -> next;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	60fb      	str	r3, [r7, #12]
		i++;
 800340a:	7afb      	ldrb	r3, [r7, #11]
 800340c:	3301      	adds	r3, #1
 800340e:	72fb      	strb	r3, [r7, #11]
	while(temp != menu)
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	429a      	cmp	r2, r3
 8003416:	d1f5      	bne.n	8003404 <MenuGetIndex+0x24>
	}

	return i;
 8003418:	7afb      	ldrb	r3, [r7, #11]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr
 8003424:	20000008 	.word	0x20000008

08003428 <MenuGetLevel>:

uint8_t MenuGetLevel(menu_t *menu)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	menu_t *temp = menu;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	60fb      	str	r3, [r7, #12]
	uint8_t i = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	72fb      	strb	r3, [r7, #11]

	if(menu->parent == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d107      	bne.n	8003450 <MenuGetLevel+0x28>
	{
		return 0;
 8003440:	2300      	movs	r3, #0
 8003442:	e00a      	b.n	800345a <MenuGetLevel+0x32>
	}

	while(temp->parent != NULL)
	{
		temp = temp -> parent;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	60fb      	str	r3, [r7, #12]
		i++;
 800344a:	7afb      	ldrb	r3, [r7, #11]
 800344c:	3301      	adds	r3, #1
 800344e:	72fb      	strb	r3, [r7, #11]
	while(temp->parent != NULL)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1f5      	bne.n	8003444 <MenuGetLevel+0x1c>
	}
	return i;
 8003458:	7afb      	ldrb	r3, [r7, #11]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	bc80      	pop	{r7}
 8003462:	4770      	bx	lr

08003464 <MenuRefresh>:

void MenuRefresh(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af02      	add	r7, sp, #8
	menu_t *temp;
	uint8_t i;

	if(CurrentPointer->parent == &sub_menu1_6)
 800346a:	4b5c      	ldr	r3, [pc, #368]	; (80035dc <MenuRefresh+0x178>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	4a5b      	ldr	r2, [pc, #364]	; (80035e0 <MenuRefresh+0x17c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d101      	bne.n	800347a <MenuRefresh+0x16>
	{
		MenuIndicatorRefresh();
 8003476:	f000 fa53 	bl	8003920 <MenuIndicatorRefresh>
	}

	SSD1306_Clear(BLACK);
 800347a:	2000      	movs	r0, #0
 800347c:	f000 fd62 	bl	8003f44 <SSD1306_Clear>

	if(CurrentPointer->parent)
 8003480:	4b56      	ldr	r3, [pc, #344]	; (80035dc <MenuRefresh+0x178>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00c      	beq.n	80034a4 <MenuRefresh+0x40>
	{
		temp = (CurrentPointer->parent) -> child;
 800348a:	4b54      	ldr	r3, [pc, #336]	; (80035dc <MenuRefresh+0x178>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	607b      	str	r3, [r7, #4]
		HeaderDraw((CurrentPointer->parent) -> name);
 8003494:	4b51      	ldr	r3, [pc, #324]	; (80035dc <MenuRefresh+0x178>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff fded 	bl	800307c <HeaderDraw>
 80034a2:	e004      	b.n	80034ae <MenuRefresh+0x4a>
	}
	else
	{
		temp = &menu1;
 80034a4:	4b4f      	ldr	r3, [pc, #316]	; (80035e4 <MenuRefresh+0x180>)
 80034a6:	607b      	str	r3, [r7, #4]
		HeaderDraw("Menu");
 80034a8:	484f      	ldr	r0, [pc, #316]	; (80035e8 <MenuRefresh+0x184>)
 80034aa:	f7ff fde7 	bl	800307c <HeaderDraw>
	}

	for(i=0; i!=MenuIndex - OledRowPos; i++)
 80034ae:	2300      	movs	r3, #0
 80034b0:	70fb      	strb	r3, [r7, #3]
 80034b2:	e009      	b.n	80034c8 <MenuRefresh+0x64>
	{
		if(temp -> next == NULL) break; // Hard fault protection
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00f      	beq.n	80034dc <MenuRefresh+0x78>

		temp = temp -> next;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	607b      	str	r3, [r7, #4]
	for(i=0; i!=MenuIndex - OledRowPos; i++)
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	3301      	adds	r3, #1
 80034c6:	70fb      	strb	r3, [r7, #3]
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	4b48      	ldr	r3, [pc, #288]	; (80035ec <MenuRefresh+0x188>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	4619      	mov	r1, r3
 80034d0:	4b47      	ldr	r3, [pc, #284]	; (80035f0 <MenuRefresh+0x18c>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	1acb      	subs	r3, r1, r3
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d1ec      	bne.n	80034b4 <MenuRefresh+0x50>
 80034da:	e000      	b.n	80034de <MenuRefresh+0x7a>
		if(temp -> next == NULL) break; // Hard fault protection
 80034dc:	bf00      	nop
	}

	GFX_SetFont(font_8x5);
 80034de:	4845      	ldr	r0, [pc, #276]	; (80035f4 <MenuRefresh+0x190>)
 80034e0:	f7fd fec4 	bl	800126c <GFX_SetFont>
	GFX_SetFontSize(2);
 80034e4:	2002      	movs	r0, #2
 80034e6:	f7fd fecf 	bl	8001288 <GFX_SetFontSize>
	for(i=0; i<OLED_ROWS; i++)
 80034ea:	2300      	movs	r3, #0
 80034ec:	70fb      	strb	r3, [r7, #3]
 80034ee:	e06c      	b.n	80035ca <MenuRefresh+0x166>
	{
		if(temp == CurrentPointer)
 80034f0:	4b3a      	ldr	r3, [pc, #232]	; (80035dc <MenuRefresh+0x178>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d14a      	bne.n	8003590 <MenuRefresh+0x12c>
		{
//			GFX_DrawFillRectangle(5, (i*20) + OLED_MENU_Y_OFFSET, 123, 16, WHITE);
//			GFX_DrawFillCircle(10, (i*20) + OLED_MENU_Y_OFFSET + 8, 4, BLACK);
//			GFX_DrawString(20, (i*20) + OLED_MENU_Y_OFFSET + 1, temp->name, BLACK, 1);

			TempStr = temp->name;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a3e      	ldr	r2, [pc, #248]	; (80035f8 <MenuRefresh+0x194>)
 8003500:	6013      	str	r3, [r2, #0]
			uint8_t TempStrLength = strlen(TempStr);
 8003502:	4b3d      	ldr	r3, [pc, #244]	; (80035f8 <MenuRefresh+0x194>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fc fe8e 	bl	8000228 <strlen>
 800350c:	4603      	mov	r3, r0
 800350e:	70bb      	strb	r3, [r7, #2]
			TempStrLengthVar = -(TempStrLength * 5);
 8003510:	78bb      	ldrb	r3, [r7, #2]
 8003512:	b29b      	uxth	r3, r3
 8003514:	461a      	mov	r2, r3
 8003516:	0392      	lsls	r2, r2, #14
 8003518:	1ad2      	subs	r2, r2, r3
 800351a:	0092      	lsls	r2, r2, #2
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	b29b      	uxth	r3, r3
 8003520:	b21a      	sxth	r2, r3
 8003522:	4b36      	ldr	r3, [pc, #216]	; (80035fc <MenuRefresh+0x198>)
 8003524:	801a      	strh	r2, [r3, #0]
			TempId = i;
 8003526:	4a36      	ldr	r2, [pc, #216]	; (8003600 <MenuRefresh+0x19c>)
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	7013      	strb	r3, [r2, #0]

			if(TempStrLength >= 10)
 800352c:	78bb      	ldrb	r3, [r7, #2]
 800352e:	2b09      	cmp	r3, #9
 8003530:	d908      	bls.n	8003544 <MenuRefresh+0xe0>
			{
				ScrollEn = 1;
 8003532:	4b34      	ldr	r3, [pc, #208]	; (8003604 <MenuRefresh+0x1a0>)
 8003534:	2201      	movs	r2, #1
 8003536:	701a      	strb	r2, [r3, #0]
				ScrollFirst =1;
 8003538:	4b33      	ldr	r3, [pc, #204]	; (8003608 <MenuRefresh+0x1a4>)
 800353a:	2201      	movs	r2, #1
 800353c:	701a      	strb	r2, [r3, #0]
				ScrollString();
 800353e:	f000 f865 	bl	800360c <ScrollString>
 8003542:	e039      	b.n	80035b8 <MenuRefresh+0x154>
			}
			else
			{
				ScrollEn = 0;
 8003544:	4b2f      	ldr	r3, [pc, #188]	; (8003604 <MenuRefresh+0x1a0>)
 8003546:	2200      	movs	r2, #0
 8003548:	701a      	strb	r2, [r3, #0]
				GFX_DrawRectangle(17, ((i*OLED_MENU_Y_SPACE)-1) + OLED_MENU_Y_OFFSET, 111, 18, WHITE);
 800354a:	78fa      	ldrb	r2, [r7, #3]
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4413      	add	r3, r2
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	f103 0108 	add.w	r1, r3, #8
 8003558:	2301      	movs	r3, #1
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	2312      	movs	r3, #18
 800355e:	226f      	movs	r2, #111	; 0x6f
 8003560:	2011      	movs	r0, #17
 8003562:	f7fe f875 	bl	8001650 <GFX_DrawRectangle>
//				GFX_DrawFillCircle(10, (i*20) + OLED_MENU_Y_OFFSET + 8, 4, BLACK);
//				GFX_DrawChar(5, (i*20) + OLED_MENU_Y_OFFSET + 1, '>', BLACK, 1);
				StateIndicator(temp, i);
 8003566:	78fb      	ldrb	r3, [r7, #3]
 8003568:	4619      	mov	r1, r3
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f916 	bl	800379c <StateIndicator>
				GFX_DrawString(20, (i*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, temp->name, WHITE, 1);
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4413      	add	r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	f103 010a 	add.w	r1, r3, #10
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	2301      	movs	r3, #1
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	2301      	movs	r3, #1
 8003588:	2014      	movs	r0, #20
 800358a:	f7fd ff49 	bl	8001420 <GFX_DrawString>
 800358e:	e013      	b.n	80035b8 <MenuRefresh+0x154>

		}
		else
		{
//			GFX_DrawChar(5, (i*20) + OLED_MENU_Y_OFFSET + 1, '>', WHITE, 0);
			StateIndicator(temp, i);
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	4619      	mov	r1, r3
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f901 	bl	800379c <StateIndicator>
			GFX_DrawString(20, (i*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET, temp->name, WHITE, 0);
 800359a:	78fa      	ldrb	r2, [r7, #3]
 800359c:	4613      	mov	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	4413      	add	r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	f103 0109 	add.w	r1, r3, #9
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	2300      	movs	r3, #0
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	2301      	movs	r3, #1
 80035b2:	2014      	movs	r0, #20
 80035b4:	f7fd ff34 	bl	8001420 <GFX_DrawString>
		}

		temp = temp -> next;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	607b      	str	r3, [r7, #4]
		if(!temp) break;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d006      	beq.n	80035d2 <MenuRefresh+0x16e>
	for(i=0; i<OLED_ROWS; i++)
 80035c4:	78fb      	ldrb	r3, [r7, #3]
 80035c6:	3301      	adds	r3, #1
 80035c8:	70fb      	strb	r3, [r7, #3]
 80035ca:	78fb      	ldrb	r3, [r7, #3]
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d98f      	bls.n	80034f0 <MenuRefresh+0x8c>
	}
}
 80035d0:	e000      	b.n	80035d4 <MenuRefresh+0x170>
		if(!temp) break;
 80035d2:	bf00      	nop
}
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	20000004 	.word	0x20000004
 80035e0:	200000b0 	.word	0x200000b0
 80035e4:	20000008 	.word	0x20000008
 80035e8:	08013a04 	.word	0x08013a04
 80035ec:	20001aad 	.word	0x20001aad
 80035f0:	20001aae 	.word	0x20001aae
 80035f4:	08013a54 	.word	0x08013a54
 80035f8:	20001ab8 	.word	0x20001ab8
 80035fc:	20001ab6 	.word	0x20001ab6
 8003600:	20001abc 	.word	0x20001abc
 8003604:	20001abd 	.word	0x20001abd
 8003608:	20001abe 	.word	0x20001abe

0800360c <ScrollString>:

void ScrollString(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af02      	add	r7, sp, #8
	  static int16_t ScrollVar = 20;
	  static int16_t ScrollVar2 = 123;

	  static uint32_t OldTick = 0;

	  if(ScrollFirst)
 8003612:	4b59      	ldr	r3, [pc, #356]	; (8003778 <ScrollString+0x16c>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00d      	beq.n	8003636 <ScrollString+0x2a>
	  {
		  ScrollFirst = 0;
 800361a:	4b57      	ldr	r3, [pc, #348]	; (8003778 <ScrollString+0x16c>)
 800361c:	2200      	movs	r2, #0
 800361e:	701a      	strb	r2, [r3, #0]
		  ScrollVar = 20;
 8003620:	4b56      	ldr	r3, [pc, #344]	; (800377c <ScrollString+0x170>)
 8003622:	2214      	movs	r2, #20
 8003624:	801a      	strh	r2, [r3, #0]
		  ScrollVar2 = 123;
 8003626:	4b56      	ldr	r3, [pc, #344]	; (8003780 <ScrollString+0x174>)
 8003628:	227b      	movs	r2, #123	; 0x7b
 800362a:	801a      	strh	r2, [r3, #0]
		  OldTick = HAL_GetTick();
 800362c:	f001 fa2a 	bl	8004a84 <HAL_GetTick>
 8003630:	4603      	mov	r3, r0
 8003632:	4a54      	ldr	r2, [pc, #336]	; (8003784 <ScrollString+0x178>)
 8003634:	6013      	str	r3, [r2, #0]
	  }

	  if(ScrollEn)
 8003636:	4b54      	ldr	r3, [pc, #336]	; (8003788 <ScrollString+0x17c>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 8098 	beq.w	8003770 <ScrollString+0x164>
	  {

	  int16_t var = TempStrLengthVar;
 8003640:	4b52      	ldr	r3, [pc, #328]	; (800378c <ScrollString+0x180>)
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	80fb      	strh	r3, [r7, #6]

	  	GFX_DrawFillRectangle(0, ((TempId*OLED_MENU_Y_SPACE)-1) + OLED_MENU_Y_OFFSET, 128, 18, BLACK);
 8003646:	4b52      	ldr	r3, [pc, #328]	; (8003790 <ScrollString+0x184>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	4613      	mov	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4413      	add	r3, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	f103 0108 	add.w	r1, r3, #8
 8003658:	2300      	movs	r3, #0
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	2312      	movs	r3, #18
 800365e:	2280      	movs	r2, #128	; 0x80
 8003660:	2000      	movs	r0, #0
 8003662:	f7fe f822 	bl	80016aa <GFX_DrawFillRectangle>
		if(ScrollVar>var-75)
 8003666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800366a:	3b4a      	subs	r3, #74	; 0x4a
 800366c:	4a43      	ldr	r2, [pc, #268]	; (800377c <ScrollString+0x170>)
 800366e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003672:	4293      	cmp	r3, r2
 8003674:	dc13      	bgt.n	800369e <ScrollString+0x92>
		{
		GFX_DrawString(ScrollVar, (TempId*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, TempStr, WHITE, 1);
 8003676:	4b41      	ldr	r3, [pc, #260]	; (800377c <ScrollString+0x170>)
 8003678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800367c:	4618      	mov	r0, r3
 800367e:	4b44      	ldr	r3, [pc, #272]	; (8003790 <ScrollString+0x184>)
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	461a      	mov	r2, r3
 8003684:	4613      	mov	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4413      	add	r3, r2
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	f103 010a 	add.w	r1, r3, #10
 8003690:	4b40      	ldr	r3, [pc, #256]	; (8003794 <ScrollString+0x188>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	2301      	movs	r3, #1
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	2301      	movs	r3, #1
 800369a:	f7fd fec1 	bl	8001420 <GFX_DrawString>
		}

		GFX_DrawFillRectangle(0, ((TempId*OLED_MENU_Y_SPACE)-1) + OLED_MENU_Y_OFFSET, 17, 18, BLACK);
 800369e:	4b3c      	ldr	r3, [pc, #240]	; (8003790 <ScrollString+0x184>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	461a      	mov	r2, r3
 80036a4:	4613      	mov	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4413      	add	r3, r2
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	f103 0108 	add.w	r1, r3, #8
 80036b0:	2300      	movs	r3, #0
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	2312      	movs	r3, #18
 80036b6:	2211      	movs	r2, #17
 80036b8:	2000      	movs	r0, #0
 80036ba:	f7fd fff6 	bl	80016aa <GFX_DrawFillRectangle>
//		GFX_DrawFillCircle(10, (TempId*20) + OLED_MENU_Y_OFFSET + 8, 4, BLACK);
//		GFX_DrawChar(5, (TempId*20) + OLED_MENU_Y_OFFSET + 1, '>', BLACK, 1);
		StateIndicator(CurrentPointer, TempId);
 80036be:	4b36      	ldr	r3, [pc, #216]	; (8003798 <ScrollString+0x18c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a33      	ldr	r2, [pc, #204]	; (8003790 <ScrollString+0x184>)
 80036c4:	7812      	ldrb	r2, [r2, #0]
 80036c6:	4611      	mov	r1, r2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 f867 	bl	800379c <StateIndicator>
		GFX_DrawRectangle(17, ((TempId*OLED_MENU_Y_SPACE)-1) + OLED_MENU_Y_OFFSET, 111, 18, WHITE);
 80036ce:	4b30      	ldr	r3, [pc, #192]	; (8003790 <ScrollString+0x184>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	4613      	mov	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4413      	add	r3, r2
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	f103 0108 	add.w	r1, r3, #8
 80036e0:	2301      	movs	r3, #1
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	2312      	movs	r3, #18
 80036e6:	226f      	movs	r2, #111	; 0x6f
 80036e8:	2011      	movs	r0, #17
 80036ea:	f7fd ffb1 	bl	8001650 <GFX_DrawRectangle>

		if(HAL_GetTick() - OldTick >= SCROLL_FREEZE) ScrollVar--;
 80036ee:	f001 f9c9 	bl	8004a84 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	4b23      	ldr	r3, [pc, #140]	; (8003784 <ScrollString+0x178>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036fe:	d308      	bcc.n	8003712 <ScrollString+0x106>
 8003700:	4b1e      	ldr	r3, [pc, #120]	; (800377c <ScrollString+0x170>)
 8003702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29b      	uxth	r3, r3
 800370c:	b21a      	sxth	r2, r3
 800370e:	4b1b      	ldr	r3, [pc, #108]	; (800377c <ScrollString+0x170>)
 8003710:	801a      	strh	r2, [r3, #0]

		  if(ScrollVar < var)
 8003712:	4b1a      	ldr	r3, [pc, #104]	; (800377c <ScrollString+0x170>)
 8003714:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003718:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800371c:	429a      	cmp	r2, r3
 800371e:	dd27      	ble.n	8003770 <ScrollString+0x164>
		  {
			  GFX_DrawString(ScrollVar2, (TempId*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, TempStr, WHITE, 1);
 8003720:	4b17      	ldr	r3, [pc, #92]	; (8003780 <ScrollString+0x174>)
 8003722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003726:	4618      	mov	r0, r3
 8003728:	4b19      	ldr	r3, [pc, #100]	; (8003790 <ScrollString+0x184>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	4613      	mov	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	4413      	add	r3, r2
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	f103 010a 	add.w	r1, r3, #10
 800373a:	4b16      	ldr	r3, [pc, #88]	; (8003794 <ScrollString+0x188>)
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	2301      	movs	r3, #1
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	2301      	movs	r3, #1
 8003744:	f7fd fe6c 	bl	8001420 <GFX_DrawString>
			  ScrollVar2--;
 8003748:	4b0d      	ldr	r3, [pc, #52]	; (8003780 <ScrollString+0x174>)
 800374a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29b      	uxth	r3, r3
 8003754:	b21a      	sxth	r2, r3
 8003756:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <ScrollString+0x174>)
 8003758:	801a      	strh	r2, [r3, #0]
			  if(ScrollVar2 == 20)
 800375a:	4b09      	ldr	r3, [pc, #36]	; (8003780 <ScrollString+0x174>)
 800375c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003760:	2b14      	cmp	r3, #20
 8003762:	d105      	bne.n	8003770 <ScrollString+0x164>
			  {
				  ScrollVar = 20;
 8003764:	4b05      	ldr	r3, [pc, #20]	; (800377c <ScrollString+0x170>)
 8003766:	2214      	movs	r2, #20
 8003768:	801a      	strh	r2, [r3, #0]
				  ScrollVar2 = 123;
 800376a:	4b05      	ldr	r3, [pc, #20]	; (8003780 <ScrollString+0x174>)
 800376c:	227b      	movs	r2, #123	; 0x7b
 800376e:	801a      	strh	r2, [r3, #0]
			  }
		  }

	  }

}
 8003770:	bf00      	nop
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20001abe 	.word	0x20001abe
 800377c:	200004a0 	.word	0x200004a0
 8003780:	200004a2 	.word	0x200004a2
 8003784:	20001ac0 	.word	0x20001ac0
 8003788:	20001abd 	.word	0x20001abd
 800378c:	20001ab6 	.word	0x20001ab6
 8003790:	20001abc 	.word	0x20001abc
 8003794:	20001ab8 	.word	0x20001ab8
 8003798:	20000004 	.word	0x20000004

0800379c <StateIndicator>:

static void StateIndicator(menu_t *menu, uint8_t pos)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af02      	add	r7, sp, #8
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	70fb      	strb	r3, [r7, #3]
	if(menu == CurrentPointer)
 80037a8:	4b5b      	ldr	r3, [pc, #364]	; (8003918 <StateIndicator+0x17c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d156      	bne.n	8003860 <StateIndicator+0xc4>
	{
		if(menu->menu_state == 0 && menu->name != BackStr)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d113      	bne.n	80037e4 <StateIndicator+0x48>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a56      	ldr	r2, [pc, #344]	; (800391c <StateIndicator+0x180>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00e      	beq.n	80037e4 <StateIndicator+0x48>
		{
			GFX_DrawChar(5, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, '>', WHITE, 0);
 80037c6:	78fa      	ldrb	r2, [r7, #3]
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4413      	add	r3, r2
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	f103 010a 	add.w	r1, r3, #10
 80037d4:	2300      	movs	r3, #0
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	2301      	movs	r3, #1
 80037da:	223e      	movs	r2, #62	; 0x3e
 80037dc:	2005      	movs	r0, #5
 80037de:	f7fd fd65 	bl	80012ac <GFX_DrawChar>
 80037e2:	e094      	b.n	800390e <StateIndicator+0x172>
		}
		else if(menu->menu_state == 0 && menu->name == BackStr)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d113      	bne.n	8003816 <StateIndicator+0x7a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a4a      	ldr	r2, [pc, #296]	; (800391c <StateIndicator+0x180>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d10e      	bne.n	8003816 <StateIndicator+0x7a>
		{
			GFX_DrawChar(5, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, '<', WHITE, 0);
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	4613      	mov	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4413      	add	r3, r2
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	f103 010a 	add.w	r1, r3, #10
 8003806:	2300      	movs	r3, #0
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	2301      	movs	r3, #1
 800380c:	223c      	movs	r2, #60	; 0x3c
 800380e:	2005      	movs	r0, #5
 8003810:	f7fd fd4c 	bl	80012ac <GFX_DrawChar>
 8003814:	e07b      	b.n	800390e <StateIndicator+0x172>
		}
		else if(menu->menu_state == 1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d10c      	bne.n	800383a <StateIndicator+0x9e>
		{
			GFX_DrawFillCircle(10, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 8, 4, WHITE);
 8003820:	78fa      	ldrb	r2, [r7, #3]
 8003822:	4613      	mov	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4413      	add	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	f103 0111 	add.w	r1, r3, #17
 800382e:	2301      	movs	r3, #1
 8003830:	2204      	movs	r2, #4
 8003832:	200a      	movs	r0, #10
 8003834:	f7fe f8f9 	bl	8001a2a <GFX_DrawFillCircle>
		else if(menu->menu_state == -1)
		{
			GFX_DrawCircle(10, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 8, 4, WHITE);
		}
	}
}
 8003838:	e069      	b.n	800390e <StateIndicator+0x172>
		else if(menu->menu_state == -1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8003840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003844:	d163      	bne.n	800390e <StateIndicator+0x172>
			GFX_DrawCircle(10, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 8, 4, WHITE);
 8003846:	78fa      	ldrb	r2, [r7, #3]
 8003848:	4613      	mov	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4413      	add	r3, r2
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	f103 0111 	add.w	r1, r3, #17
 8003854:	2301      	movs	r3, #1
 8003856:	2204      	movs	r2, #4
 8003858:	200a      	movs	r0, #10
 800385a:	f7fd ff49 	bl	80016f0 <GFX_DrawCircle>
}
 800385e:	e056      	b.n	800390e <StateIndicator+0x172>
		if(menu->menu_state == 0 && menu->name != BackStr)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d113      	bne.n	8003892 <StateIndicator+0xf6>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a2b      	ldr	r2, [pc, #172]	; (800391c <StateIndicator+0x180>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00e      	beq.n	8003892 <StateIndicator+0xf6>
			GFX_DrawChar(5, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, '>', WHITE, 0);
 8003874:	78fa      	ldrb	r2, [r7, #3]
 8003876:	4613      	mov	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	4413      	add	r3, r2
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	f103 010a 	add.w	r1, r3, #10
 8003882:	2300      	movs	r3, #0
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	2301      	movs	r3, #1
 8003888:	223e      	movs	r2, #62	; 0x3e
 800388a:	2005      	movs	r0, #5
 800388c:	f7fd fd0e 	bl	80012ac <GFX_DrawChar>
 8003890:	e03d      	b.n	800390e <StateIndicator+0x172>
		else if(menu->menu_state == 0 && menu->name == BackStr)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d113      	bne.n	80038c4 <StateIndicator+0x128>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a1e      	ldr	r2, [pc, #120]	; (800391c <StateIndicator+0x180>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d10e      	bne.n	80038c4 <StateIndicator+0x128>
			GFX_DrawChar(5, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 1, '<', WHITE, 0);
 80038a6:	78fa      	ldrb	r2, [r7, #3]
 80038a8:	4613      	mov	r3, r2
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4413      	add	r3, r2
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	f103 010a 	add.w	r1, r3, #10
 80038b4:	2300      	movs	r3, #0
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	2301      	movs	r3, #1
 80038ba:	223c      	movs	r2, #60	; 0x3c
 80038bc:	2005      	movs	r0, #5
 80038be:	f7fd fcf5 	bl	80012ac <GFX_DrawChar>
 80038c2:	e024      	b.n	800390e <StateIndicator+0x172>
		else if(menu->menu_state == 1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d10c      	bne.n	80038e8 <StateIndicator+0x14c>
			GFX_DrawFillCircle(10, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 8, 4, WHITE);
 80038ce:	78fa      	ldrb	r2, [r7, #3]
 80038d0:	4613      	mov	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4413      	add	r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	f103 0111 	add.w	r1, r3, #17
 80038dc:	2301      	movs	r3, #1
 80038de:	2204      	movs	r2, #4
 80038e0:	200a      	movs	r0, #10
 80038e2:	f7fe f8a2 	bl	8001a2a <GFX_DrawFillCircle>
}
 80038e6:	e012      	b.n	800390e <StateIndicator+0x172>
		else if(menu->menu_state == -1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f993 3018 	ldrsb.w	r3, [r3, #24]
 80038ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f2:	d10c      	bne.n	800390e <StateIndicator+0x172>
			GFX_DrawCircle(10, (pos*OLED_MENU_Y_SPACE) + OLED_MENU_Y_OFFSET + 8, 4, WHITE);
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	4613      	mov	r3, r2
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	4413      	add	r3, r2
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	f103 0111 	add.w	r1, r3, #17
 8003902:	2301      	movs	r3, #1
 8003904:	2204      	movs	r2, #4
 8003906:	200a      	movs	r0, #10
 8003908:	f7fd fef2 	bl	80016f0 <GFX_DrawCircle>
}
 800390c:	e7ff      	b.n	800390e <StateIndicator+0x172>
 800390e:	bf00      	nop
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000004 	.word	0x20000004
 800391c:	08013c34 	.word	0x08013c34

08003920 <MenuIndicatorRefresh>:
#include "main.h"
#include "menu_out_set.h"
#include "menu.h"

void MenuIndicatorRefresh(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
	sub_menu1_6_1.menu_state =  ((GPIOE -> ODR >> 0)  & 1)? 1 : -1;
 8003924:	4b69      	ldr	r3, [pc, #420]	; (8003acc <MenuIndicatorRefresh+0x1ac>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <MenuIndicatorRefresh+0x14>
 8003930:	2201      	movs	r2, #1
 8003932:	e001      	b.n	8003938 <MenuIndicatorRefresh+0x18>
 8003934:	f04f 32ff 	mov.w	r2, #4294967295
 8003938:	4b65      	ldr	r3, [pc, #404]	; (8003ad0 <MenuIndicatorRefresh+0x1b0>)
 800393a:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_2.menu_state =  ((GPIOE -> ODR >> 1)  & 1)? 1 : -1;
 800393c:	4b63      	ldr	r3, [pc, #396]	; (8003acc <MenuIndicatorRefresh+0x1ac>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	085b      	lsrs	r3, r3, #1
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <MenuIndicatorRefresh+0x2e>
 800394a:	2201      	movs	r2, #1
 800394c:	e001      	b.n	8003952 <MenuIndicatorRefresh+0x32>
 800394e:	f04f 32ff 	mov.w	r2, #4294967295
 8003952:	4b60      	ldr	r3, [pc, #384]	; (8003ad4 <MenuIndicatorRefresh+0x1b4>)
 8003954:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_3.menu_state =  ((GPIOE -> ODR >> 2)  & 1)? 1 : -1;
 8003956:	4b5d      	ldr	r3, [pc, #372]	; (8003acc <MenuIndicatorRefresh+0x1ac>)
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	089b      	lsrs	r3, r3, #2
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <MenuIndicatorRefresh+0x48>
 8003964:	2201      	movs	r2, #1
 8003966:	e001      	b.n	800396c <MenuIndicatorRefresh+0x4c>
 8003968:	f04f 32ff 	mov.w	r2, #4294967295
 800396c:	4b5a      	ldr	r3, [pc, #360]	; (8003ad8 <MenuIndicatorRefresh+0x1b8>)
 800396e:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_4.menu_state =  ((GPIOE -> ODR >> 3)  & 1)? 1 : -1;
 8003970:	4b56      	ldr	r3, [pc, #344]	; (8003acc <MenuIndicatorRefresh+0x1ac>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	08db      	lsrs	r3, r3, #3
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <MenuIndicatorRefresh+0x62>
 800397e:	2201      	movs	r2, #1
 8003980:	e001      	b.n	8003986 <MenuIndicatorRefresh+0x66>
 8003982:	f04f 32ff 	mov.w	r2, #4294967295
 8003986:	4b55      	ldr	r3, [pc, #340]	; (8003adc <MenuIndicatorRefresh+0x1bc>)
 8003988:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_5.menu_state =  ((GPIOE -> ODR >> 4)  & 1)? 1 : -1;
 800398a:	4b50      	ldr	r3, [pc, #320]	; (8003acc <MenuIndicatorRefresh+0x1ac>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	091b      	lsrs	r3, r3, #4
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <MenuIndicatorRefresh+0x7c>
 8003998:	2201      	movs	r2, #1
 800399a:	e001      	b.n	80039a0 <MenuIndicatorRefresh+0x80>
 800399c:	f04f 32ff 	mov.w	r2, #4294967295
 80039a0:	4b4f      	ldr	r3, [pc, #316]	; (8003ae0 <MenuIndicatorRefresh+0x1c0>)
 80039a2:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_6.menu_state =  ((GPIOE -> ODR >> 5)  & 1)? 1 : -1;
 80039a4:	4b49      	ldr	r3, [pc, #292]	; (8003acc <MenuIndicatorRefresh+0x1ac>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	095b      	lsrs	r3, r3, #5
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <MenuIndicatorRefresh+0x96>
 80039b2:	2201      	movs	r2, #1
 80039b4:	e001      	b.n	80039ba <MenuIndicatorRefresh+0x9a>
 80039b6:	f04f 32ff 	mov.w	r2, #4294967295
 80039ba:	4b4a      	ldr	r3, [pc, #296]	; (8003ae4 <MenuIndicatorRefresh+0x1c4>)
 80039bc:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_7.menu_state =  ((GPIOE -> ODR >> 6)  & 1)? 1 : -1;
 80039be:	4b43      	ldr	r3, [pc, #268]	; (8003acc <MenuIndicatorRefresh+0x1ac>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	099b      	lsrs	r3, r3, #6
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <MenuIndicatorRefresh+0xb0>
 80039cc:	2201      	movs	r2, #1
 80039ce:	e001      	b.n	80039d4 <MenuIndicatorRefresh+0xb4>
 80039d0:	f04f 32ff 	mov.w	r2, #4294967295
 80039d4:	4b44      	ldr	r3, [pc, #272]	; (8003ae8 <MenuIndicatorRefresh+0x1c8>)
 80039d6:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_8.menu_state =  ((GPIOE -> ODR >> 7)  & 1)? 1 : -1;
 80039d8:	4b3c      	ldr	r3, [pc, #240]	; (8003acc <MenuIndicatorRefresh+0x1ac>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	09db      	lsrs	r3, r3, #7
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <MenuIndicatorRefresh+0xca>
 80039e6:	2201      	movs	r2, #1
 80039e8:	e001      	b.n	80039ee <MenuIndicatorRefresh+0xce>
 80039ea:	f04f 32ff 	mov.w	r2, #4294967295
 80039ee:	4b3f      	ldr	r3, [pc, #252]	; (8003aec <MenuIndicatorRefresh+0x1cc>)
 80039f0:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_9.menu_state =  ((GPIOE -> ODR >> 8)  & 1)? 1 : -1;
 80039f2:	4b36      	ldr	r3, [pc, #216]	; (8003acc <MenuIndicatorRefresh+0x1ac>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <MenuIndicatorRefresh+0xe4>
 8003a00:	2201      	movs	r2, #1
 8003a02:	e001      	b.n	8003a08 <MenuIndicatorRefresh+0xe8>
 8003a04:	f04f 32ff 	mov.w	r2, #4294967295
 8003a08:	4b39      	ldr	r3, [pc, #228]	; (8003af0 <MenuIndicatorRefresh+0x1d0>)
 8003a0a:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_10.menu_state = ((GPIOE -> ODR >> 9)  & 1)? 1 : -1;
 8003a0c:	4b2f      	ldr	r3, [pc, #188]	; (8003acc <MenuIndicatorRefresh+0x1ac>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	0a5b      	lsrs	r3, r3, #9
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <MenuIndicatorRefresh+0xfe>
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	e001      	b.n	8003a22 <MenuIndicatorRefresh+0x102>
 8003a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a22:	4b34      	ldr	r3, [pc, #208]	; (8003af4 <MenuIndicatorRefresh+0x1d4>)
 8003a24:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_11.menu_state = ((GPIOE -> ODR >> 10) & 1)? 1 : -1;
 8003a26:	4b29      	ldr	r3, [pc, #164]	; (8003acc <MenuIndicatorRefresh+0x1ac>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	0a9b      	lsrs	r3, r3, #10
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <MenuIndicatorRefresh+0x118>
 8003a34:	2201      	movs	r2, #1
 8003a36:	e001      	b.n	8003a3c <MenuIndicatorRefresh+0x11c>
 8003a38:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3c:	4b2e      	ldr	r3, [pc, #184]	; (8003af8 <MenuIndicatorRefresh+0x1d8>)
 8003a3e:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_12.menu_state = ((GPIOE -> ODR >> 11) & 1)? 1 : -1;
 8003a40:	4b22      	ldr	r3, [pc, #136]	; (8003acc <MenuIndicatorRefresh+0x1ac>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	0adb      	lsrs	r3, r3, #11
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <MenuIndicatorRefresh+0x132>
 8003a4e:	2201      	movs	r2, #1
 8003a50:	e001      	b.n	8003a56 <MenuIndicatorRefresh+0x136>
 8003a52:	f04f 32ff 	mov.w	r2, #4294967295
 8003a56:	4b29      	ldr	r3, [pc, #164]	; (8003afc <MenuIndicatorRefresh+0x1dc>)
 8003a58:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_13.menu_state = ((GPIOE -> ODR >> 12) & 1)? 1 : -1;
 8003a5a:	4b1c      	ldr	r3, [pc, #112]	; (8003acc <MenuIndicatorRefresh+0x1ac>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	0b1b      	lsrs	r3, r3, #12
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <MenuIndicatorRefresh+0x14c>
 8003a68:	2201      	movs	r2, #1
 8003a6a:	e001      	b.n	8003a70 <MenuIndicatorRefresh+0x150>
 8003a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a70:	4b23      	ldr	r3, [pc, #140]	; (8003b00 <MenuIndicatorRefresh+0x1e0>)
 8003a72:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_14.menu_state = ((GPIOE -> ODR >> 13) & 1)? 1 : -1;
 8003a74:	4b15      	ldr	r3, [pc, #84]	; (8003acc <MenuIndicatorRefresh+0x1ac>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	0b5b      	lsrs	r3, r3, #13
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <MenuIndicatorRefresh+0x166>
 8003a82:	2201      	movs	r2, #1
 8003a84:	e001      	b.n	8003a8a <MenuIndicatorRefresh+0x16a>
 8003a86:	f04f 32ff 	mov.w	r2, #4294967295
 8003a8a:	4b1e      	ldr	r3, [pc, #120]	; (8003b04 <MenuIndicatorRefresh+0x1e4>)
 8003a8c:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_15.menu_state = ((GPIOE -> ODR >> 14) & 1)? 1 : -1;
 8003a8e:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <MenuIndicatorRefresh+0x1ac>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	0b9b      	lsrs	r3, r3, #14
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <MenuIndicatorRefresh+0x180>
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	e001      	b.n	8003aa4 <MenuIndicatorRefresh+0x184>
 8003aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa4:	4b18      	ldr	r3, [pc, #96]	; (8003b08 <MenuIndicatorRefresh+0x1e8>)
 8003aa6:	761a      	strb	r2, [r3, #24]
	sub_menu1_6_16.menu_state = ((GPIOE -> ODR >> 15) & 1)? 1 : -1;
 8003aa8:	4b08      	ldr	r3, [pc, #32]	; (8003acc <MenuIndicatorRefresh+0x1ac>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	0bdb      	lsrs	r3, r3, #15
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <MenuIndicatorRefresh+0x19a>
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	e001      	b.n	8003abe <MenuIndicatorRefresh+0x19e>
 8003aba:	f04f 32ff 	mov.w	r2, #4294967295
 8003abe:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <MenuIndicatorRefresh+0x1ec>)
 8003ac0:	761a      	strb	r2, [r3, #24]
}
 8003ac2:	bf00      	nop
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bc80      	pop	{r7}
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40011800 	.word	0x40011800
 8003ad0:	200000cc 	.word	0x200000cc
 8003ad4:	200000e8 	.word	0x200000e8
 8003ad8:	20000104 	.word	0x20000104
 8003adc:	20000120 	.word	0x20000120
 8003ae0:	2000013c 	.word	0x2000013c
 8003ae4:	20000158 	.word	0x20000158
 8003ae8:	20000174 	.word	0x20000174
 8003aec:	20000190 	.word	0x20000190
 8003af0:	200001ac 	.word	0x200001ac
 8003af4:	200001c8 	.word	0x200001c8
 8003af8:	200001e4 	.word	0x200001e4
 8003afc:	20000200 	.word	0x20000200
 8003b00:	2000021c 	.word	0x2000021c
 8003b04:	20000238 	.word	0x20000238
 8003b08:	20000254 	.word	0x20000254
 8003b0c:	20000270 	.word	0x20000270

08003b10 <SetOut0>:

void SetOut0(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
	OutputPinToggle(0);
 8003b14:	2000      	movs	r0, #0
 8003b16:	f7fe fe6f 	bl	80027f8 <OutputPinToggle>
}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <SetOut1>:

void SetOut1(void)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	af00      	add	r7, sp, #0
	OutputPinToggle(1);
 8003b22:	2001      	movs	r0, #1
 8003b24:	f7fe fe68 	bl	80027f8 <OutputPinToggle>
}
 8003b28:	bf00      	nop
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <SetOut2>:

void SetOut2(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
	OutputPinToggle(2);
 8003b30:	2002      	movs	r0, #2
 8003b32:	f7fe fe61 	bl	80027f8 <OutputPinToggle>
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <SetOut3>:

void SetOut3(void)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	af00      	add	r7, sp, #0
	OutputPinToggle(3);
 8003b3e:	2003      	movs	r0, #3
 8003b40:	f7fe fe5a 	bl	80027f8 <OutputPinToggle>
}
 8003b44:	bf00      	nop
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <SetOut4>:

void SetOut4(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
	OutputPinToggle(4);
 8003b4c:	2004      	movs	r0, #4
 8003b4e:	f7fe fe53 	bl	80027f8 <OutputPinToggle>
}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <SetOut5>:

void SetOut5(void)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	af00      	add	r7, sp, #0
	OutputPinToggle(5);
 8003b5a:	2005      	movs	r0, #5
 8003b5c:	f7fe fe4c 	bl	80027f8 <OutputPinToggle>
}
 8003b60:	bf00      	nop
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <SetOut6>:

void SetOut6(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
	OutputPinToggle(6);
 8003b68:	2006      	movs	r0, #6
 8003b6a:	f7fe fe45 	bl	80027f8 <OutputPinToggle>
}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <SetOut7>:

void SetOut7(void)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	af00      	add	r7, sp, #0
	OutputPinToggle(7);
 8003b76:	2007      	movs	r0, #7
 8003b78:	f7fe fe3e 	bl	80027f8 <OutputPinToggle>
}
 8003b7c:	bf00      	nop
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <SetOut8>:

void SetOut8(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
	OutputPinToggle(8);
 8003b84:	2008      	movs	r0, #8
 8003b86:	f7fe fe37 	bl	80027f8 <OutputPinToggle>
}
 8003b8a:	bf00      	nop
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <SetOut9>:

void SetOut9(void)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	af00      	add	r7, sp, #0
	OutputPinToggle(9);
 8003b92:	2009      	movs	r0, #9
 8003b94:	f7fe fe30 	bl	80027f8 <OutputPinToggle>
}
 8003b98:	bf00      	nop
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <SetOut10>:

void SetOut10(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
	OutputPinToggle(10);
 8003ba0:	200a      	movs	r0, #10
 8003ba2:	f7fe fe29 	bl	80027f8 <OutputPinToggle>
}
 8003ba6:	bf00      	nop
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <SetOut11>:

void SetOut11(void)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	af00      	add	r7, sp, #0
	OutputPinToggle(11);
 8003bae:	200b      	movs	r0, #11
 8003bb0:	f7fe fe22 	bl	80027f8 <OutputPinToggle>
}
 8003bb4:	bf00      	nop
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <SetOut12>:

void SetOut12(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
	OutputPinToggle(12);
 8003bbc:	200c      	movs	r0, #12
 8003bbe:	f7fe fe1b 	bl	80027f8 <OutputPinToggle>
}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <SetOut13>:

void SetOut13(void)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	af00      	add	r7, sp, #0
	OutputPinToggle(13);
 8003bca:	200d      	movs	r0, #13
 8003bcc:	f7fe fe14 	bl	80027f8 <OutputPinToggle>
}
 8003bd0:	bf00      	nop
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <SetOut14>:

void SetOut14(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
	OutputPinToggle(14);
 8003bd8:	200e      	movs	r0, #14
 8003bda:	f7fe fe0d 	bl	80027f8 <OutputPinToggle>
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <SetOut15>:

void SetOut15(void)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	af00      	add	r7, sp, #0
	OutputPinToggle(15);
 8003be6:	200f      	movs	r0, #15
 8003be8:	f7fe fe06 	bl	80027f8 <OutputPinToggle>
}
 8003bec:	bf00      	nop
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <Parser_TakeLine>:
		{PWM_CHANNEL_SET, PwmChannelSet, 2},
		{DISPLAY_CONTRAST, DisplayContrast, 1},
};

void Parser_TakeLine(RingBuffer_t *Buff, uint8_t *Destination)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
	  uint8_t i = 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	73fb      	strb	r3, [r7, #15]
	  uint8_t tmp = 0;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	73bb      	strb	r3, [r7, #14]
	do
	{
		 Ring_Buffer_Read(Buff, &tmp);
 8003c02:	f107 030e 	add.w	r3, r7, #14
 8003c06:	4619      	mov	r1, r3
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f873 	bl	8003cf4 <Ring_Buffer_Read>
		 if(tmp == ENDLINE)
 8003c0e:	7bbb      	ldrb	r3, [r7, #14]
 8003c10:	2b5e      	cmp	r3, #94	; 0x5e
 8003c12:	d105      	bne.n	8003c20 <Parser_TakeLine+0x30>
			{
			 Destination[i] = 0;
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	4413      	add	r3, r2
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	e004      	b.n	8003c2a <Parser_TakeLine+0x3a>
			}
		else
			{
			Destination[i] = tmp;
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	4413      	add	r3, r2
 8003c26:	7bba      	ldrb	r2, [r7, #14]
 8003c28:	701a      	strb	r2, [r3, #0]
			}

			i++;
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]

	} while(tmp != ENDLINE);
 8003c30:	7bbb      	ldrb	r3, [r7, #14]
 8003c32:	2b5e      	cmp	r3, #94	; 0x5e
 8003c34:	d1e5      	bne.n	8003c02 <Parser_TakeLine+0x12>
}
 8003c36:	bf00      	nop
 8003c38:	bf00      	nop
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <Parser_parse>:




void Parser_parse(uint8_t * DataToParse)
{
 8003c40:	b590      	push	{r4, r7, lr}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	char * ParsePointer = strtok((char*)DataToParse, "/");
 8003c48:	4926      	ldr	r1, [pc, #152]	; (8003ce4 <Parser_parse+0xa4>)
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f00d faa8 	bl	80111a0 <strtok>
 8003c50:	6138      	str	r0, [r7, #16]
	uint8_t CommandID = atoi(ParsePointer);
 8003c52:	6938      	ldr	r0, [r7, #16]
 8003c54:	f00c fdee 	bl	8010834 <atoi>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	73fb      	strb	r3, [r7, #15]

	if(CommandMapper[CommandID].Action != NULL)
 8003c5c:	7bfa      	ldrb	r2, [r7, #15]
 8003c5e:	4922      	ldr	r1, [pc, #136]	; (8003ce8 <Parser_parse+0xa8>)
 8003c60:	4613      	mov	r3, r2
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d033      	beq.n	8003cda <Parser_parse+0x9a>
	{
		for(uint8_t i = 0; i<CommandMapper[CommandID].CommandArgQ; i++)
 8003c72:	2300      	movs	r3, #0
 8003c74:	75fb      	strb	r3, [r7, #23]
 8003c76:	e00f      	b.n	8003c98 <Parser_parse+0x58>
		{
			char * ParsePointer = strtok(NULL, "/");
 8003c78:	491a      	ldr	r1, [pc, #104]	; (8003ce4 <Parser_parse+0xa4>)
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f00d fa90 	bl	80111a0 <strtok>
 8003c80:	60b8      	str	r0, [r7, #8]
			ReceivedCommandArgument[i] = atoi(ParsePointer);
 8003c82:	7dfc      	ldrb	r4, [r7, #23]
 8003c84:	68b8      	ldr	r0, [r7, #8]
 8003c86:	f00c fdd5 	bl	8010834 <atoi>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	4a17      	ldr	r2, [pc, #92]	; (8003cec <Parser_parse+0xac>)
 8003c8e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		for(uint8_t i = 0; i<CommandMapper[CommandID].CommandArgQ; i++)
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
 8003c94:	3301      	adds	r3, #1
 8003c96:	75fb      	strb	r3, [r7, #23]
 8003c98:	7bfa      	ldrb	r2, [r7, #15]
 8003c9a:	4913      	ldr	r1, [pc, #76]	; (8003ce8 <Parser_parse+0xa8>)
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	7dfa      	ldrb	r2, [r7, #23]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d3e3      	bcc.n	8003c78 <Parser_parse+0x38>
		}

 		CommandMapper[CommandID].Action(ReceivedCommandArgument[0], ReceivedCommandArgument[1], ReceivedCommandArgument[2], ReceivedCommandArgument[3]);
 8003cb0:	7bfa      	ldrb	r2, [r7, #15]
 8003cb2:	490d      	ldr	r1, [pc, #52]	; (8003ce8 <Parser_parse+0xa8>)
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	681c      	ldr	r4, [r3, #0]
 8003cc2:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <Parser_parse+0xac>)
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	4b09      	ldr	r3, [pc, #36]	; (8003cec <Parser_parse+0xac>)
 8003cc8:	6859      	ldr	r1, [r3, #4]
 8003cca:	4b08      	ldr	r3, [pc, #32]	; (8003cec <Parser_parse+0xac>)
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	4b07      	ldr	r3, [pc, #28]	; (8003cec <Parser_parse+0xac>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	47a0      	blx	r4
 		UsbBuffWrite("OK");
 8003cd4:	4806      	ldr	r0, [pc, #24]	; (8003cf0 <Parser_parse+0xb0>)
 8003cd6:	f7ff f95d 	bl	8002f94 <UsbBuffWrite>
	}
}
 8003cda:	bf00      	nop
 8003cdc:	371c      	adds	r7, #28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd90      	pop	{r4, r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	08013a0c 	.word	0x08013a0c
 8003ce8:	200004a4 	.word	0x200004a4
 8003cec:	20001ac4 	.word	0x20001ac4
 8003cf0:	08013a10 	.word	0x08013a10

08003cf4 <Ring_Buffer_Read>:
 */
#include "main.h"
#include "ring_buffer.h"

RbStatus_t Ring_Buffer_Read(RingBuffer_t * Buff, uint8_t *value)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
	if(Buff->Head == Buff->Tail)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	881a      	ldrh	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	885b      	ldrh	r3, [r3, #2]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d101      	bne.n	8003d0e <Ring_Buffer_Read+0x1a>
	{
		return RB_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e015      	b.n	8003d3a <Ring_Buffer_Read+0x46>
	}
	*value = Buff->Buffer[Buff->Tail];
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	885b      	ldrh	r3, [r3, #2]
 8003d12:	461a      	mov	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4413      	add	r3, r2
 8003d18:	791a      	ldrb	r2, [r3, #4]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	701a      	strb	r2, [r3, #0]

	Buff->Tail = (Buff->Tail + 1) % RING_BUFFER_SIZE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	885b      	ldrh	r3, [r3, #2]
 8003d22:	3301      	adds	r3, #1
 8003d24:	425a      	negs	r2, r3
 8003d26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d2a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003d2e:	bf58      	it	pl
 8003d30:	4253      	negpl	r3, r2
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	805a      	strh	r2, [r3, #2]

	return RB_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr

08003d44 <Ring_Buffer_Write>:

RbStatus_t Ring_Buffer_Write(RingBuffer_t * Buff, uint8_t value)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	70fb      	strb	r3, [r7, #3]
	uint16_t Head_tmp = (Buff->Head + 1) % RING_BUFFER_SIZE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	3301      	adds	r3, #1
 8003d56:	425a      	negs	r2, r3
 8003d58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d5c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003d60:	bf58      	it	pl
 8003d62:	4253      	negpl	r3, r2
 8003d64:	81fb      	strh	r3, [r7, #14]

	if(Head_tmp == Buff->Tail)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	885b      	ldrh	r3, [r3, #2]
 8003d6a:	89fa      	ldrh	r2, [r7, #14]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d101      	bne.n	8003d74 <Ring_Buffer_Write+0x30>
	{
		return RB_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e00a      	b.n	8003d8a <Ring_Buffer_Write+0x46>
	}
	Buff->Buffer[Buff->Head] = value;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	711a      	strb	r2, [r3, #4]
	Buff->Head = Head_tmp;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	89fa      	ldrh	r2, [r7, #14]
 8003d86:	801a      	strh	r2, [r3, #0]

	return RB_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr

08003d94 <Ring_Buffer_Flush>:

void Ring_Buffer_Flush(RingBuffer_t * Buff)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
	Buff->Head = 0;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	801a      	strh	r2, [r3, #0]
	Buff->Tail = 0;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	805a      	strh	r2, [r3, #2]
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr
	...

08003db4 <SSD1306_Command>:

static uint8_t buffer[SSD1306_BUFFER_SIZE];
static uint8_t buffer_disp[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af04      	add	r7, sp, #16
 8003dba:	4603      	mov	r3, r0
 8003dbc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 8003dbe:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <SSD1306_Command+0x30>)
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dc6:	9302      	str	r3, [sp, #8]
 8003dc8:	2301      	movs	r3, #1
 8003dca:	9301      	str	r3, [sp, #4]
 8003dcc:	1dfb      	adds	r3, r7, #7
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2178      	movs	r1, #120	; 0x78
 8003dd6:	f002 fb99 	bl	800650c <HAL_I2C_Mem_Write>
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20001b04 	.word	0x20001b04

08003de8 <SSD1306_Data>:

static void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	807b      	strh	r3, [r7, #2]
#ifdef SSD1306_USE_DMA

	if(oled_i2c -> hdmatx -> State == HAL_DMA_STATE_READY)
 8003df4:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <SSD1306_Data+0x3c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d10a      	bne.n	8003e1a <SSD1306_Data+0x32>
	{
		HAL_I2C_Mem_Write_DMA(oled_i2c, (SSD1306_ADRESS<<1), 0x40, 1, Data, Size);
 8003e04:	4b07      	ldr	r3, [pc, #28]	; (8003e24 <SSD1306_Data+0x3c>)
 8003e06:	6818      	ldr	r0, [r3, #0]
 8003e08:	887b      	ldrh	r3, [r7, #2]
 8003e0a:	9301      	str	r3, [sp, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	2301      	movs	r3, #1
 8003e12:	2240      	movs	r2, #64	; 0x40
 8003e14:	2178      	movs	r1, #120	; 0x78
 8003e16:	f002 fc73 	bl	8006700 <HAL_I2C_Mem_Write_DMA>
	}
#else
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
#endif
}
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20001b04 	.word	0x20001b04

08003e28 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	80fb      	strh	r3, [r7, #6]
 8003e32:	460b      	mov	r3, r1
 8003e34:	80bb      	strh	r3, [r7, #4]
 8003e36:	4613      	mov	r3, r2
 8003e38:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 8003e3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	db79      	blt.n	8003f36 <SSD1306_DrawPixel+0x10e>
 8003e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e46:	2b7f      	cmp	r3, #127	; 0x7f
 8003e48:	dc75      	bgt.n	8003f36 <SSD1306_DrawPixel+0x10e>
 8003e4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	db71      	blt.n	8003f36 <SSD1306_DrawPixel+0x10e>
 8003e52:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e56:	2b3f      	cmp	r3, #63	; 0x3f
 8003e58:	dc6d      	bgt.n	8003f36 <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d049      	beq.n	8003ef4 <SSD1306_DrawPixel+0xcc>
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	dc69      	bgt.n	8003f38 <SSD1306_DrawPixel+0x110>
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d022      	beq.n	8003eae <SSD1306_DrawPixel+0x86>
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d165      	bne.n	8003f38 <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 8003e6c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e70:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	da00      	bge.n	8003e7a <SSD1306_DrawPixel+0x52>
 8003e78:	3307      	adds	r3, #7
 8003e7a:	10db      	asrs	r3, r3, #3
 8003e7c:	b218      	sxth	r0, r3
 8003e7e:	4603      	mov	r3, r0
 8003e80:	01db      	lsls	r3, r3, #7
 8003e82:	4413      	add	r3, r2
 8003e84:	4a2e      	ldr	r2, [pc, #184]	; (8003f40 <SSD1306_DrawPixel+0x118>)
 8003e86:	5cd3      	ldrb	r3, [r2, r3]
 8003e88:	b25a      	sxtb	r2, r3
 8003e8a:	88bb      	ldrh	r3, [r7, #4]
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	2101      	movs	r1, #1
 8003e92:	fa01 f303 	lsl.w	r3, r1, r3
 8003e96:	b25b      	sxtb	r3, r3
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	b259      	sxtb	r1, r3
 8003e9c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	01db      	lsls	r3, r3, #7
 8003ea4:	4413      	add	r3, r2
 8003ea6:	b2c9      	uxtb	r1, r1
 8003ea8:	4a25      	ldr	r2, [pc, #148]	; (8003f40 <SSD1306_DrawPixel+0x118>)
 8003eaa:	54d1      	strb	r1, [r2, r3]
      break;
 8003eac:	e044      	b.n	8003f38 <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 8003eae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003eb2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	da00      	bge.n	8003ebc <SSD1306_DrawPixel+0x94>
 8003eba:	3307      	adds	r3, #7
 8003ebc:	10db      	asrs	r3, r3, #3
 8003ebe:	b218      	sxth	r0, r3
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	01db      	lsls	r3, r3, #7
 8003ec4:	4413      	add	r3, r2
 8003ec6:	4a1e      	ldr	r2, [pc, #120]	; (8003f40 <SSD1306_DrawPixel+0x118>)
 8003ec8:	5cd3      	ldrb	r3, [r2, r3]
 8003eca:	b25a      	sxtb	r2, r3
 8003ecc:	88bb      	ldrh	r3, [r7, #4]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed8:	b25b      	sxtb	r3, r3
 8003eda:	43db      	mvns	r3, r3
 8003edc:	b25b      	sxtb	r3, r3
 8003ede:	4013      	ands	r3, r2
 8003ee0:	b259      	sxtb	r1, r3
 8003ee2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	01db      	lsls	r3, r3, #7
 8003eea:	4413      	add	r3, r2
 8003eec:	b2c9      	uxtb	r1, r1
 8003eee:	4a14      	ldr	r2, [pc, #80]	; (8003f40 <SSD1306_DrawPixel+0x118>)
 8003ef0:	54d1      	strb	r1, [r2, r3]
      break;
 8003ef2:	e021      	b.n	8003f38 <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 8003ef4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003ef8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	da00      	bge.n	8003f02 <SSD1306_DrawPixel+0xda>
 8003f00:	3307      	adds	r3, #7
 8003f02:	10db      	asrs	r3, r3, #3
 8003f04:	b218      	sxth	r0, r3
 8003f06:	4603      	mov	r3, r0
 8003f08:	01db      	lsls	r3, r3, #7
 8003f0a:	4413      	add	r3, r2
 8003f0c:	4a0c      	ldr	r2, [pc, #48]	; (8003f40 <SSD1306_DrawPixel+0x118>)
 8003f0e:	5cd3      	ldrb	r3, [r2, r3]
 8003f10:	b25a      	sxtb	r2, r3
 8003f12:	88bb      	ldrh	r3, [r7, #4]
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	2101      	movs	r1, #1
 8003f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1e:	b25b      	sxtb	r3, r3
 8003f20:	4053      	eors	r3, r2
 8003f22:	b259      	sxtb	r1, r3
 8003f24:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003f28:	4603      	mov	r3, r0
 8003f2a:	01db      	lsls	r3, r3, #7
 8003f2c:	4413      	add	r3, r2
 8003f2e:	b2c9      	uxtb	r1, r1
 8003f30:	4a03      	ldr	r2, [pc, #12]	; (8003f40 <SSD1306_DrawPixel+0x118>)
 8003f32:	54d1      	strb	r1, [r2, r3]
      break;
 8003f34:	e000      	b.n	8003f38 <SSD1306_DrawPixel+0x110>
	  return;
 8003f36:	bf00      	nop
    }
}
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr
 8003f40:	20001b0c 	.word	0x20001b0c

08003f44 <SSD1306_Clear>:


void SSD1306_Clear(uint8_t Color)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 8003f4e:	79fb      	ldrb	r3, [r7, #7]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <SSD1306_Clear+0x22>
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d10d      	bne.n	8003f74 <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xff, SSD1306_BUFFER_SIZE);
 8003f58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f5c:	21ff      	movs	r1, #255	; 0xff
 8003f5e:	4807      	ldr	r0, [pc, #28]	; (8003f7c <SSD1306_Clear+0x38>)
 8003f60:	f00c fc96 	bl	8010890 <memset>
		break;
 8003f64:	e006      	b.n	8003f74 <SSD1306_Clear+0x30>
	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 8003f66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4803      	ldr	r0, [pc, #12]	; (8003f7c <SSD1306_Clear+0x38>)
 8003f6e:	f00c fc8f 	bl	8010890 <memset>
		break;
 8003f72:	bf00      	nop
	}
}
 8003f74:	bf00      	nop
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	20001b0c 	.word	0x20001b0c

08003f80 <SSD1306_Display>:

void SSD1306_Display(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_PAGEADDR);
 8003f84:	2022      	movs	r0, #34	; 0x22
 8003f86:	f7ff ff15 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(0);                      // Page start address
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	f7ff ff12 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(0xFF);                   // Page end (not really, but works here)
 8003f90:	20ff      	movs	r0, #255	; 0xff
 8003f92:	f7ff ff0f 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 8003f96:	2021      	movs	r0, #33	; 0x21
 8003f98:	f7ff ff0c 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(0); // Column start address
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	f7ff ff09 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 8003fa2:	207f      	movs	r0, #127	; 0x7f
 8003fa4:	f7ff ff06 	bl	8003db4 <SSD1306_Command>

#ifdef SSD1306_USE_DMA_DOUBLE_BUFFERING
	HAL_DMA_Start_IT(&hdma_memtomem_dma2_channel1, (uint32_t*)buffer, (uint32_t*)buffer_disp, SSD1306_BUFFER_SIZE);
 8003fa8:	4904      	ldr	r1, [pc, #16]	; (8003fbc <SSD1306_Display+0x3c>)
 8003faa:	4a05      	ldr	r2, [pc, #20]	; (8003fc0 <SSD1306_Display+0x40>)
 8003fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fb0:	4804      	ldr	r0, [pc, #16]	; (8003fc4 <SSD1306_Display+0x44>)
 8003fb2:	f001 fb99 	bl	80056e8 <HAL_DMA_Start_IT>

	SSD1306_Data(buffer_disp, SSD1306_BUFFER_SIZE);
#endif


}
 8003fb6:	bf00      	nop
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20001b0c 	.word	0x20001b0c
 8003fc0:	20001f0c 	.word	0x20001f0c
 8003fc4:	200008d4 	.word	0x200008d4

08003fc8 <XferCpltCallback>:
#ifdef SSD1306_USE_DMA_DOUBLE_BUFFERING
static void XferCpltCallback(DMA_HandleTypeDef *hdma)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
	if(hdma->Instance == oled_buff_dma->Instance)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <XferCpltCallback+0x28>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d104      	bne.n	8003fe8 <XferCpltCallback+0x20>
	{
		SSD1306_Data(buffer_disp, SSD1306_BUFFER_SIZE);
 8003fde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003fe2:	4804      	ldr	r0, [pc, #16]	; (8003ff4 <XferCpltCallback+0x2c>)
 8003fe4:	f7ff ff00 	bl	8003de8 <SSD1306_Data>
	}
}
 8003fe8:	bf00      	nop
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20001b08 	.word	0x20001b08
 8003ff4:	20001f0c 	.word	0x20001f0c

08003ff8 <SSD1306_Init>:
#endif


#ifdef SSD1306_USE_DMA_DOUBLE_BUFFERING
HAL_StatusTypeDef SSD1306_Init(I2C_HandleTypeDef *i2c, DMA_HandleTypeDef *dma)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
	oled_i2c = i2c;
 8004002:	4a35      	ldr	r2, [pc, #212]	; (80040d8 <SSD1306_Init+0xe0>)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6013      	str	r3, [r2, #0]
	oled_buff_dma = dma;
 8004008:	4a34      	ldr	r2, [pc, #208]	; (80040dc <SSD1306_Init+0xe4>)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	6013      	str	r3, [r2, #0]

	if(HAL_I2C_IsDeviceReady(oled_i2c, (SSD1306_ADRESS<<1), OLED_TRIALS, 10) != HAL_OK)
 800400e:	4b32      	ldr	r3, [pc, #200]	; (80040d8 <SSD1306_Init+0xe0>)
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	230a      	movs	r3, #10
 8004014:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004018:	2178      	movs	r1, #120	; 0x78
 800401a:	f002 fcc7 	bl	80069ac <HAL_I2C_IsDeviceReady>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <SSD1306_Init+0x30>
	{
		return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e052      	b.n	80040ce <SSD1306_Init+0xd6>
	}


	SSD1306_Command(SSD1306_DISPLAYOFF);
 8004028:	20ae      	movs	r0, #174	; 0xae
 800402a:	f7ff fec3 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 800402e:	20d5      	movs	r0, #213	; 0xd5
 8004030:	f7ff fec0 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(0x80);
 8004034:	2080      	movs	r0, #128	; 0x80
 8004036:	f7ff febd 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETMULTIPLEX);
 800403a:	20a8      	movs	r0, #168	; 0xa8
 800403c:	f7ff feba 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 8004040:	203f      	movs	r0, #63	; 0x3f
 8004042:	f7ff feb7 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 8004046:	20d3      	movs	r0, #211	; 0xd3
 8004048:	f7ff feb4 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(0x00);
 800404c:	2000      	movs	r0, #0
 800404e:	f7ff feb1 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 8004052:	2040      	movs	r0, #64	; 0x40
 8004054:	f7ff feae 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(SSD1306_CHARGEPUMP);
 8004058:	208d      	movs	r0, #141	; 0x8d
 800405a:	f7ff feab 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(0x14);
 800405e:	2014      	movs	r0, #20
 8004060:	f7ff fea8 	bl	8003db4 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 8004064:	2020      	movs	r0, #32
 8004066:	f7ff fea5 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 800406a:	2000      	movs	r0, #0
 800406c:	f7ff fea2 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 8004070:	20a1      	movs	r0, #161	; 0xa1
 8004072:	f7ff fe9f 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 8004076:	20c8      	movs	r0, #200	; 0xc8
 8004078:	f7ff fe9c 	bl	8003db4 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 800407c:	20da      	movs	r0, #218	; 0xda
 800407e:	f7ff fe99 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(0x12);
 8004082:	2012      	movs	r0, #18
 8004084:	f7ff fe96 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 8004088:	2081      	movs	r0, #129	; 0x81
 800408a:	f7ff fe93 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(0x10);
 800408e:	2010      	movs	r0, #16
 8004090:	f7ff fe90 	bl	8003db4 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 8004094:	20d9      	movs	r0, #217	; 0xd9
 8004096:	f7ff fe8d 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(0xF1);
 800409a:	20f1      	movs	r0, #241	; 0xf1
 800409c:	f7ff fe8a 	bl	8003db4 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 80040a0:	20db      	movs	r0, #219	; 0xdb
 80040a2:	f7ff fe87 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(0x40);
 80040a6:	2040      	movs	r0, #64	; 0x40
 80040a8:	f7ff fe84 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 80040ac:	20a4      	movs	r0, #164	; 0xa4
 80040ae:	f7ff fe81 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 80040b2:	20a6      	movs	r0, #166	; 0xa6
 80040b4:	f7ff fe7e 	bl	8003db4 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 80040b8:	202e      	movs	r0, #46	; 0x2e
 80040ba:	f7ff fe7b 	bl	8003db4 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON);
 80040be:	20af      	movs	r0, #175	; 0xaf
 80040c0:	f7ff fe78 	bl	8003db4 <SSD1306_Command>

	/*
	 * Bufforing DMA Cplt Callback
	 */
	oled_buff_dma->XferCpltCallback = XferCpltCallback;
 80040c4:	4b05      	ldr	r3, [pc, #20]	; (80040dc <SSD1306_Init+0xe4>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a05      	ldr	r2, [pc, #20]	; (80040e0 <SSD1306_Init+0xe8>)
 80040ca:	629a      	str	r2, [r3, #40]	; 0x28
	return HAL_OK;
 80040cc:	2300      	movs	r3, #0

}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20001b04 	.word	0x20001b04
 80040dc:	20001b08 	.word	0x20001b08
 80040e0:	08003fc9 	.word	0x08003fc9

080040e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80040ea:	4b15      	ldr	r3, [pc, #84]	; (8004140 <HAL_MspInit+0x5c>)
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	4a14      	ldr	r2, [pc, #80]	; (8004140 <HAL_MspInit+0x5c>)
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	6193      	str	r3, [r2, #24]
 80040f6:	4b12      	ldr	r3, [pc, #72]	; (8004140 <HAL_MspInit+0x5c>)
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	60bb      	str	r3, [r7, #8]
 8004100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004102:	4b0f      	ldr	r3, [pc, #60]	; (8004140 <HAL_MspInit+0x5c>)
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	4a0e      	ldr	r2, [pc, #56]	; (8004140 <HAL_MspInit+0x5c>)
 8004108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800410c:	61d3      	str	r3, [r2, #28]
 800410e:	4b0c      	ldr	r3, [pc, #48]	; (8004140 <HAL_MspInit+0x5c>)
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004116:	607b      	str	r3, [r7, #4]
 8004118:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800411a:	4b0a      	ldr	r3, [pc, #40]	; (8004144 <HAL_MspInit+0x60>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	4a04      	ldr	r2, [pc, #16]	; (8004144 <HAL_MspInit+0x60>)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004136:	bf00      	nop
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr
 8004140:	40021000 	.word	0x40021000
 8004144:	40010000 	.word	0x40010000

08004148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800414c:	e7fe      	b.n	800414c <NMI_Handler+0x4>

0800414e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800414e:	b480      	push	{r7}
 8004150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004152:	e7fe      	b.n	8004152 <HardFault_Handler+0x4>

08004154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004158:	e7fe      	b.n	8004158 <MemManage_Handler+0x4>

0800415a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800415a:	b480      	push	{r7}
 800415c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800415e:	e7fe      	b.n	800415e <BusFault_Handler+0x4>

08004160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004164:	e7fe      	b.n	8004164 <UsageFault_Handler+0x4>

08004166 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004166:	b480      	push	{r7}
 8004168:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800416a:	bf00      	nop
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr

08004172 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004172:	b480      	push	{r7}
 8004174:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004176:	bf00      	nop
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr

0800417e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800417e:	b480      	push	{r7}
 8004180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004182:	bf00      	nop
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr

0800418a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800418e:	f000 fc67 	bl	8004a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800419c:	4802      	ldr	r0, [pc, #8]	; (80041a8 <DMA1_Channel1_IRQHandler+0x10>)
 800419e:	f001 fc0b 	bl	80059b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80041a2:	bf00      	nop
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20000890 	.word	0x20000890

080041ac <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80041b0:	4802      	ldr	r0, [pc, #8]	; (80041bc <DMA1_Channel6_IRQHandler+0x10>)
 80041b2:	f001 fc01 	bl	80059b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80041b6:	bf00      	nop
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	200009b0 	.word	0x200009b0

080041c0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80041c4:	4802      	ldr	r0, [pc, #8]	; (80041d0 <DMA1_Channel7_IRQHandler+0x10>)
 80041c6:	f001 fbf7 	bl	80059b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80041ca:	bf00      	nop
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	2000096c 	.word	0x2000096c

080041d4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80041d8:	4802      	ldr	r0, [pc, #8]	; (80041e4 <ADC1_2_IRQHandler+0x10>)
 80041da:	f000 fe25 	bl	8004e28 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000860 	.word	0x20000860

080041e8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80041ec:	4802      	ldr	r0, [pc, #8]	; (80041f8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80041ee:	f004 fd64 	bl	8008cba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20003144 	.word	0x20003144

080041fc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004200:	4802      	ldr	r0, [pc, #8]	; (800420c <I2C1_EV_IRQHandler+0x10>)
 8004202:	f002 fd01 	bl	8006c08 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004206:	bf00      	nop
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20000918 	.word	0x20000918

08004210 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_channel1);
 8004214:	4802      	ldr	r0, [pc, #8]	; (8004220 <DMA2_Channel1_IRQHandler+0x10>)
 8004216:	f001 fbcf 	bl	80059b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800421a:	bf00      	nop
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	200008d4 	.word	0x200008d4

08004224 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  return 1;
 8004228:	2301      	movs	r3, #1
}
 800422a:	4618      	mov	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr

08004232 <_kill>:

int _kill(int pid, int sig)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b082      	sub	sp, #8
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800423c:	f00c fafe 	bl	801083c <__errno>
 8004240:	4603      	mov	r3, r0
 8004242:	2216      	movs	r2, #22
 8004244:	601a      	str	r2, [r3, #0]
  return -1;
 8004246:	f04f 33ff 	mov.w	r3, #4294967295
}
 800424a:	4618      	mov	r0, r3
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <_exit>:

void _exit (int status)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b082      	sub	sp, #8
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800425a:	f04f 31ff 	mov.w	r1, #4294967295
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7ff ffe7 	bl	8004232 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004264:	e7fe      	b.n	8004264 <_exit+0x12>

08004266 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b086      	sub	sp, #24
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	e00a      	b.n	800428e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004278:	f3af 8000 	nop.w
 800427c:	4601      	mov	r1, r0
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	60ba      	str	r2, [r7, #8]
 8004284:	b2ca      	uxtb	r2, r1
 8004286:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	3301      	adds	r3, #1
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	429a      	cmp	r2, r3
 8004294:	dbf0      	blt.n	8004278 <_read+0x12>
  }

  return len;
 8004296:	687b      	ldr	r3, [r7, #4]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	e009      	b.n	80042c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	60ba      	str	r2, [r7, #8]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	3301      	adds	r3, #1
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	dbf1      	blt.n	80042b2 <_write+0x12>
  }
  return len;
 80042ce:	687b      	ldr	r3, [r7, #4]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <_close>:

int _close(int file)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bc80      	pop	{r7}
 80042ec:	4770      	bx	lr

080042ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042fe:	605a      	str	r2, [r3, #4]
  return 0;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr

0800430c <_isatty>:

int _isatty(int file)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004314:	2301      	movs	r3, #1
}
 8004316:	4618      	mov	r0, r3
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr

08004338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b086      	sub	sp, #24
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004340:	4a14      	ldr	r2, [pc, #80]	; (8004394 <_sbrk+0x5c>)
 8004342:	4b15      	ldr	r3, [pc, #84]	; (8004398 <_sbrk+0x60>)
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800434c:	4b13      	ldr	r3, [pc, #76]	; (800439c <_sbrk+0x64>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d102      	bne.n	800435a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004354:	4b11      	ldr	r3, [pc, #68]	; (800439c <_sbrk+0x64>)
 8004356:	4a12      	ldr	r2, [pc, #72]	; (80043a0 <_sbrk+0x68>)
 8004358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800435a:	4b10      	ldr	r3, [pc, #64]	; (800439c <_sbrk+0x64>)
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4413      	add	r3, r2
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	429a      	cmp	r2, r3
 8004366:	d207      	bcs.n	8004378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004368:	f00c fa68 	bl	801083c <__errno>
 800436c:	4603      	mov	r3, r0
 800436e:	220c      	movs	r2, #12
 8004370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004372:	f04f 33ff 	mov.w	r3, #4294967295
 8004376:	e009      	b.n	800438c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004378:	4b08      	ldr	r3, [pc, #32]	; (800439c <_sbrk+0x64>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800437e:	4b07      	ldr	r3, [pc, #28]	; (800439c <_sbrk+0x64>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4413      	add	r3, r2
 8004386:	4a05      	ldr	r2, [pc, #20]	; (800439c <_sbrk+0x64>)
 8004388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800438a:	68fb      	ldr	r3, [r7, #12]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	20010000 	.word	0x20010000
 8004398:	00001000 	.word	0x00001000
 800439c:	2000230c 	.word	0x2000230c
 80043a0:	20003668 	.word	0x20003668

080043a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043a8:	bf00      	nop
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr

080043b0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08e      	sub	sp, #56	; 0x38
 80043b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	605a      	str	r2, [r3, #4]
 80043c0:	609a      	str	r2, [r3, #8]
 80043c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043c4:	f107 0320 	add.w	r3, r7, #32
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043ce:	1d3b      	adds	r3, r7, #4
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	605a      	str	r2, [r3, #4]
 80043d6:	609a      	str	r2, [r3, #8]
 80043d8:	60da      	str	r2, [r3, #12]
 80043da:	611a      	str	r2, [r3, #16]
 80043dc:	615a      	str	r2, [r3, #20]
 80043de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80043e0:	4b2c      	ldr	r3, [pc, #176]	; (8004494 <MX_TIM3_Init+0xe4>)
 80043e2:	4a2d      	ldr	r2, [pc, #180]	; (8004498 <MX_TIM3_Init+0xe8>)
 80043e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80043e6:	4b2b      	ldr	r3, [pc, #172]	; (8004494 <MX_TIM3_Init+0xe4>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043ec:	4b29      	ldr	r3, [pc, #164]	; (8004494 <MX_TIM3_Init+0xe4>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80043f2:	4b28      	ldr	r3, [pc, #160]	; (8004494 <MX_TIM3_Init+0xe4>)
 80043f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043fa:	4b26      	ldr	r3, [pc, #152]	; (8004494 <MX_TIM3_Init+0xe4>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004400:	4b24      	ldr	r3, [pc, #144]	; (8004494 <MX_TIM3_Init+0xe4>)
 8004402:	2200      	movs	r2, #0
 8004404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004406:	4823      	ldr	r0, [pc, #140]	; (8004494 <MX_TIM3_Init+0xe4>)
 8004408:	f006 fd68 	bl	800aedc <HAL_TIM_Base_Init>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004412:	f7fe fe2d 	bl	8003070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800441a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800441c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004420:	4619      	mov	r1, r3
 8004422:	481c      	ldr	r0, [pc, #112]	; (8004494 <MX_TIM3_Init+0xe4>)
 8004424:	f006 ff7e 	bl	800b324 <HAL_TIM_ConfigClockSource>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800442e:	f7fe fe1f 	bl	8003070 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004432:	4818      	ldr	r0, [pc, #96]	; (8004494 <MX_TIM3_Init+0xe4>)
 8004434:	f006 fda1 	bl	800af7a <HAL_TIM_PWM_Init>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800443e:	f7fe fe17 	bl	8003070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004442:	2300      	movs	r3, #0
 8004444:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004446:	2300      	movs	r3, #0
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800444a:	f107 0320 	add.w	r3, r7, #32
 800444e:	4619      	mov	r1, r3
 8004450:	4810      	ldr	r0, [pc, #64]	; (8004494 <MX_TIM3_Init+0xe4>)
 8004452:	f007 fb0f 	bl	800ba74 <HAL_TIMEx_MasterConfigSynchronization>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800445c:	f7fe fe08 	bl	8003070 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004460:	2360      	movs	r3, #96	; 0x60
 8004462:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004470:	1d3b      	adds	r3, r7, #4
 8004472:	2200      	movs	r2, #0
 8004474:	4619      	mov	r1, r3
 8004476:	4807      	ldr	r0, [pc, #28]	; (8004494 <MX_TIM3_Init+0xe4>)
 8004478:	f006 fe92 	bl	800b1a0 <HAL_TIM_PWM_ConfigChannel>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004482:	f7fe fdf5 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004486:	4803      	ldr	r0, [pc, #12]	; (8004494 <MX_TIM3_Init+0xe4>)
 8004488:	f000 f8d4 	bl	8004634 <HAL_TIM_MspPostInit>

}
 800448c:	bf00      	nop
 800448e:	3738      	adds	r7, #56	; 0x38
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	20002310 	.word	0x20002310
 8004498:	40000400 	.word	0x40000400

0800449c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08e      	sub	sp, #56	; 0x38
 80044a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	605a      	str	r2, [r3, #4]
 80044ac:	609a      	str	r2, [r3, #8]
 80044ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044b0:	f107 0320 	add.w	r3, r7, #32
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044ba:	1d3b      	adds	r3, r7, #4
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	605a      	str	r2, [r3, #4]
 80044c2:	609a      	str	r2, [r3, #8]
 80044c4:	60da      	str	r2, [r3, #12]
 80044c6:	611a      	str	r2, [r3, #16]
 80044c8:	615a      	str	r2, [r3, #20]
 80044ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80044cc:	4b3e      	ldr	r3, [pc, #248]	; (80045c8 <MX_TIM4_Init+0x12c>)
 80044ce:	4a3f      	ldr	r2, [pc, #252]	; (80045cc <MX_TIM4_Init+0x130>)
 80044d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 80044d2:	4b3d      	ldr	r3, [pc, #244]	; (80045c8 <MX_TIM4_Init+0x12c>)
 80044d4:	f240 22cf 	movw	r2, #719	; 0x2cf
 80044d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044da:	4b3b      	ldr	r3, [pc, #236]	; (80045c8 <MX_TIM4_Init+0x12c>)
 80044dc:	2200      	movs	r2, #0
 80044de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80044e0:	4b39      	ldr	r3, [pc, #228]	; (80045c8 <MX_TIM4_Init+0x12c>)
 80044e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80044e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044e8:	4b37      	ldr	r3, [pc, #220]	; (80045c8 <MX_TIM4_Init+0x12c>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044ee:	4b36      	ldr	r3, [pc, #216]	; (80045c8 <MX_TIM4_Init+0x12c>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80044f4:	4834      	ldr	r0, [pc, #208]	; (80045c8 <MX_TIM4_Init+0x12c>)
 80044f6:	f006 fcf1 	bl	800aedc <HAL_TIM_Base_Init>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8004500:	f7fe fdb6 	bl	8003070 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004508:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800450a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800450e:	4619      	mov	r1, r3
 8004510:	482d      	ldr	r0, [pc, #180]	; (80045c8 <MX_TIM4_Init+0x12c>)
 8004512:	f006 ff07 	bl	800b324 <HAL_TIM_ConfigClockSource>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800451c:	f7fe fda8 	bl	8003070 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004520:	4829      	ldr	r0, [pc, #164]	; (80045c8 <MX_TIM4_Init+0x12c>)
 8004522:	f006 fd2a 	bl	800af7a <HAL_TIM_PWM_Init>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800452c:	f7fe fda0 	bl	8003070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004530:	2300      	movs	r3, #0
 8004532:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004534:	2300      	movs	r3, #0
 8004536:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004538:	f107 0320 	add.w	r3, r7, #32
 800453c:	4619      	mov	r1, r3
 800453e:	4822      	ldr	r0, [pc, #136]	; (80045c8 <MX_TIM4_Init+0x12c>)
 8004540:	f007 fa98 	bl	800ba74 <HAL_TIMEx_MasterConfigSynchronization>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800454a:	f7fe fd91 	bl	8003070 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800454e:	2360      	movs	r3, #96	; 0x60
 8004550:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 8004552:	f240 13f3 	movw	r3, #499	; 0x1f3
 8004556:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004560:	1d3b      	adds	r3, r7, #4
 8004562:	2200      	movs	r2, #0
 8004564:	4619      	mov	r1, r3
 8004566:	4818      	ldr	r0, [pc, #96]	; (80045c8 <MX_TIM4_Init+0x12c>)
 8004568:	f006 fe1a 	bl	800b1a0 <HAL_TIM_PWM_ConfigChannel>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8004572:	f7fe fd7d 	bl	8003070 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004576:	1d3b      	adds	r3, r7, #4
 8004578:	2204      	movs	r2, #4
 800457a:	4619      	mov	r1, r3
 800457c:	4812      	ldr	r0, [pc, #72]	; (80045c8 <MX_TIM4_Init+0x12c>)
 800457e:	f006 fe0f 	bl	800b1a0 <HAL_TIM_PWM_ConfigChannel>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8004588:	f7fe fd72 	bl	8003070 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800458c:	1d3b      	adds	r3, r7, #4
 800458e:	2208      	movs	r2, #8
 8004590:	4619      	mov	r1, r3
 8004592:	480d      	ldr	r0, [pc, #52]	; (80045c8 <MX_TIM4_Init+0x12c>)
 8004594:	f006 fe04 	bl	800b1a0 <HAL_TIM_PWM_ConfigChannel>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 800459e:	f7fe fd67 	bl	8003070 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80045a2:	1d3b      	adds	r3, r7, #4
 80045a4:	220c      	movs	r2, #12
 80045a6:	4619      	mov	r1, r3
 80045a8:	4807      	ldr	r0, [pc, #28]	; (80045c8 <MX_TIM4_Init+0x12c>)
 80045aa:	f006 fdf9 	bl	800b1a0 <HAL_TIM_PWM_ConfigChannel>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <MX_TIM4_Init+0x11c>
  {
    Error_Handler();
 80045b4:	f7fe fd5c 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80045b8:	4803      	ldr	r0, [pc, #12]	; (80045c8 <MX_TIM4_Init+0x12c>)
 80045ba:	f000 f83b 	bl	8004634 <HAL_TIM_MspPostInit>

}
 80045be:	bf00      	nop
 80045c0:	3738      	adds	r7, #56	; 0x38
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20002358 	.word	0x20002358
 80045cc:	40000800 	.word	0x40000800

080045d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a12      	ldr	r2, [pc, #72]	; (8004628 <HAL_TIM_Base_MspInit+0x58>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d10c      	bne.n	80045fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045e2:	4b12      	ldr	r3, [pc, #72]	; (800462c <HAL_TIM_Base_MspInit+0x5c>)
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	4a11      	ldr	r2, [pc, #68]	; (800462c <HAL_TIM_Base_MspInit+0x5c>)
 80045e8:	f043 0302 	orr.w	r3, r3, #2
 80045ec:	61d3      	str	r3, [r2, #28]
 80045ee:	4b0f      	ldr	r3, [pc, #60]	; (800462c <HAL_TIM_Base_MspInit+0x5c>)
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80045fa:	e010      	b.n	800461e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a0b      	ldr	r2, [pc, #44]	; (8004630 <HAL_TIM_Base_MspInit+0x60>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d10b      	bne.n	800461e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004606:	4b09      	ldr	r3, [pc, #36]	; (800462c <HAL_TIM_Base_MspInit+0x5c>)
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	4a08      	ldr	r2, [pc, #32]	; (800462c <HAL_TIM_Base_MspInit+0x5c>)
 800460c:	f043 0304 	orr.w	r3, r3, #4
 8004610:	61d3      	str	r3, [r2, #28]
 8004612:	4b06      	ldr	r3, [pc, #24]	; (800462c <HAL_TIM_Base_MspInit+0x5c>)
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	60bb      	str	r3, [r7, #8]
 800461c:	68bb      	ldr	r3, [r7, #8]
}
 800461e:	bf00      	nop
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr
 8004628:	40000400 	.word	0x40000400
 800462c:	40021000 	.word	0x40021000
 8004630:	40000800 	.word	0x40000800

08004634 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08a      	sub	sp, #40	; 0x28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800463c:	f107 0310 	add.w	r3, r7, #16
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	605a      	str	r2, [r3, #4]
 8004646:	609a      	str	r2, [r3, #8]
 8004648:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a2f      	ldr	r2, [pc, #188]	; (800470c <HAL_TIM_MspPostInit+0xd8>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d12a      	bne.n	80046aa <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004654:	4b2e      	ldr	r3, [pc, #184]	; (8004710 <HAL_TIM_MspPostInit+0xdc>)
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	4a2d      	ldr	r2, [pc, #180]	; (8004710 <HAL_TIM_MspPostInit+0xdc>)
 800465a:	f043 0310 	orr.w	r3, r3, #16
 800465e:	6193      	str	r3, [r2, #24]
 8004660:	4b2b      	ldr	r3, [pc, #172]	; (8004710 <HAL_TIM_MspPostInit+0xdc>)
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800466c:	2340      	movs	r3, #64	; 0x40
 800466e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004670:	2302      	movs	r3, #2
 8004672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004674:	2302      	movs	r3, #2
 8004676:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004678:	f107 0310 	add.w	r3, r7, #16
 800467c:	4619      	mov	r1, r3
 800467e:	4825      	ldr	r0, [pc, #148]	; (8004714 <HAL_TIM_MspPostInit+0xe0>)
 8004680:	f001 fc10 	bl	8005ea4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8004684:	4b24      	ldr	r3, [pc, #144]	; (8004718 <HAL_TIM_MspPostInit+0xe4>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	623b      	str	r3, [r7, #32]
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004690:	623b      	str	r3, [r7, #32]
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004698:	623b      	str	r3, [r7, #32]
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80046a0:	623b      	str	r3, [r7, #32]
 80046a2:	4a1d      	ldr	r2, [pc, #116]	; (8004718 <HAL_TIM_MspPostInit+0xe4>)
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80046a8:	e02b      	b.n	8004702 <HAL_TIM_MspPostInit+0xce>
  else if(timHandle->Instance==TIM4)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a1b      	ldr	r2, [pc, #108]	; (800471c <HAL_TIM_MspPostInit+0xe8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d126      	bne.n	8004702 <HAL_TIM_MspPostInit+0xce>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80046b4:	4b16      	ldr	r3, [pc, #88]	; (8004710 <HAL_TIM_MspPostInit+0xdc>)
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	4a15      	ldr	r2, [pc, #84]	; (8004710 <HAL_TIM_MspPostInit+0xdc>)
 80046ba:	f043 0320 	orr.w	r3, r3, #32
 80046be:	6193      	str	r3, [r2, #24]
 80046c0:	4b13      	ldr	r3, [pc, #76]	; (8004710 <HAL_TIM_MspPostInit+0xdc>)
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	f003 0320 	and.w	r3, r3, #32
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80046cc:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80046d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d2:	2302      	movs	r3, #2
 80046d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046d6:	2302      	movs	r3, #2
 80046d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046da:	f107 0310 	add.w	r3, r7, #16
 80046de:	4619      	mov	r1, r3
 80046e0:	480f      	ldr	r0, [pc, #60]	; (8004720 <HAL_TIM_MspPostInit+0xec>)
 80046e2:	f001 fbdf 	bl	8005ea4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 80046e6:	4b0c      	ldr	r3, [pc, #48]	; (8004718 <HAL_TIM_MspPostInit+0xe4>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	627b      	str	r3, [r7, #36]	; 0x24
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80046f2:	627b      	str	r3, [r7, #36]	; 0x24
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
 80046fc:	4a06      	ldr	r2, [pc, #24]	; (8004718 <HAL_TIM_MspPostInit+0xe4>)
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	6053      	str	r3, [r2, #4]
}
 8004702:	bf00      	nop
 8004704:	3728      	adds	r7, #40	; 0x28
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	40000400 	.word	0x40000400
 8004710:	40021000 	.word	0x40021000
 8004714:	40011000 	.word	0x40011000
 8004718:	40010000 	.word	0x40010000
 800471c:	40000800 	.word	0x40000800
 8004720:	40011400 	.word	0x40011400

08004724 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004728:	4b11      	ldr	r3, [pc, #68]	; (8004770 <MX_USART1_UART_Init+0x4c>)
 800472a:	4a12      	ldr	r2, [pc, #72]	; (8004774 <MX_USART1_UART_Init+0x50>)
 800472c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800472e:	4b10      	ldr	r3, [pc, #64]	; (8004770 <MX_USART1_UART_Init+0x4c>)
 8004730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004734:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004736:	4b0e      	ldr	r3, [pc, #56]	; (8004770 <MX_USART1_UART_Init+0x4c>)
 8004738:	2200      	movs	r2, #0
 800473a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800473c:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <MX_USART1_UART_Init+0x4c>)
 800473e:	2200      	movs	r2, #0
 8004740:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004742:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <MX_USART1_UART_Init+0x4c>)
 8004744:	2200      	movs	r2, #0
 8004746:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004748:	4b09      	ldr	r3, [pc, #36]	; (8004770 <MX_USART1_UART_Init+0x4c>)
 800474a:	220c      	movs	r2, #12
 800474c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800474e:	4b08      	ldr	r3, [pc, #32]	; (8004770 <MX_USART1_UART_Init+0x4c>)
 8004750:	2200      	movs	r2, #0
 8004752:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004754:	4b06      	ldr	r3, [pc, #24]	; (8004770 <MX_USART1_UART_Init+0x4c>)
 8004756:	2200      	movs	r2, #0
 8004758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800475a:	4805      	ldr	r0, [pc, #20]	; (8004770 <MX_USART1_UART_Init+0x4c>)
 800475c:	f007 f9f6 	bl	800bb4c <HAL_UART_Init>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004766:	f7fe fc83 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800476a:	bf00      	nop
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	200023a0 	.word	0x200023a0
 8004774:	40013800 	.word	0x40013800

08004778 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800477c:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <MX_USART2_UART_Init+0x4c>)
 800477e:	4a12      	ldr	r2, [pc, #72]	; (80047c8 <MX_USART2_UART_Init+0x50>)
 8004780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004782:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <MX_USART2_UART_Init+0x4c>)
 8004784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800478a:	4b0e      	ldr	r3, [pc, #56]	; (80047c4 <MX_USART2_UART_Init+0x4c>)
 800478c:	2200      	movs	r2, #0
 800478e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004790:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <MX_USART2_UART_Init+0x4c>)
 8004792:	2200      	movs	r2, #0
 8004794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004796:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <MX_USART2_UART_Init+0x4c>)
 8004798:	2200      	movs	r2, #0
 800479a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800479c:	4b09      	ldr	r3, [pc, #36]	; (80047c4 <MX_USART2_UART_Init+0x4c>)
 800479e:	220c      	movs	r2, #12
 80047a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047a2:	4b08      	ldr	r3, [pc, #32]	; (80047c4 <MX_USART2_UART_Init+0x4c>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80047a8:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <MX_USART2_UART_Init+0x4c>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80047ae:	4805      	ldr	r0, [pc, #20]	; (80047c4 <MX_USART2_UART_Init+0x4c>)
 80047b0:	f007 f9cc 	bl	800bb4c <HAL_UART_Init>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80047ba:	f7fe fc59 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80047be:	bf00      	nop
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	200023e8 	.word	0x200023e8
 80047c8:	40004400 	.word	0x40004400

080047cc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80047d0:	4b11      	ldr	r3, [pc, #68]	; (8004818 <MX_USART3_UART_Init+0x4c>)
 80047d2:	4a12      	ldr	r2, [pc, #72]	; (800481c <MX_USART3_UART_Init+0x50>)
 80047d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80047d6:	4b10      	ldr	r3, [pc, #64]	; (8004818 <MX_USART3_UART_Init+0x4c>)
 80047d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80047dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80047de:	4b0e      	ldr	r3, [pc, #56]	; (8004818 <MX_USART3_UART_Init+0x4c>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80047e4:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <MX_USART3_UART_Init+0x4c>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80047ea:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <MX_USART3_UART_Init+0x4c>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80047f0:	4b09      	ldr	r3, [pc, #36]	; (8004818 <MX_USART3_UART_Init+0x4c>)
 80047f2:	220c      	movs	r2, #12
 80047f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047f6:	4b08      	ldr	r3, [pc, #32]	; (8004818 <MX_USART3_UART_Init+0x4c>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80047fc:	4b06      	ldr	r3, [pc, #24]	; (8004818 <MX_USART3_UART_Init+0x4c>)
 80047fe:	2200      	movs	r2, #0
 8004800:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8004802:	4805      	ldr	r0, [pc, #20]	; (8004818 <MX_USART3_UART_Init+0x4c>)
 8004804:	f007 f9f2 	bl	800bbec <HAL_HalfDuplex_Init>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800480e:	f7fe fc2f 	bl	8003070 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004812:	bf00      	nop
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20002430 	.word	0x20002430
 800481c:	40004800 	.word	0x40004800

08004820 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08c      	sub	sp, #48	; 0x30
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004828:	f107 0320 	add.w	r3, r7, #32
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	605a      	str	r2, [r3, #4]
 8004832:	609a      	str	r2, [r3, #8]
 8004834:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a4d      	ldr	r2, [pc, #308]	; (8004970 <HAL_UART_MspInit+0x150>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d132      	bne.n	80048a6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004840:	4b4c      	ldr	r3, [pc, #304]	; (8004974 <HAL_UART_MspInit+0x154>)
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	4a4b      	ldr	r2, [pc, #300]	; (8004974 <HAL_UART_MspInit+0x154>)
 8004846:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800484a:	6193      	str	r3, [r2, #24]
 800484c:	4b49      	ldr	r3, [pc, #292]	; (8004974 <HAL_UART_MspInit+0x154>)
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004854:	61fb      	str	r3, [r7, #28]
 8004856:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004858:	4b46      	ldr	r3, [pc, #280]	; (8004974 <HAL_UART_MspInit+0x154>)
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	4a45      	ldr	r2, [pc, #276]	; (8004974 <HAL_UART_MspInit+0x154>)
 800485e:	f043 0304 	orr.w	r3, r3, #4
 8004862:	6193      	str	r3, [r2, #24]
 8004864:	4b43      	ldr	r3, [pc, #268]	; (8004974 <HAL_UART_MspInit+0x154>)
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	61bb      	str	r3, [r7, #24]
 800486e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004876:	2302      	movs	r3, #2
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800487a:	2303      	movs	r3, #3
 800487c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800487e:	f107 0320 	add.w	r3, r7, #32
 8004882:	4619      	mov	r1, r3
 8004884:	483c      	ldr	r0, [pc, #240]	; (8004978 <HAL_UART_MspInit+0x158>)
 8004886:	f001 fb0d 	bl	8005ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800488a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800488e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004890:	2300      	movs	r3, #0
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004894:	2300      	movs	r3, #0
 8004896:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004898:	f107 0320 	add.w	r3, r7, #32
 800489c:	4619      	mov	r1, r3
 800489e:	4836      	ldr	r0, [pc, #216]	; (8004978 <HAL_UART_MspInit+0x158>)
 80048a0:	f001 fb00 	bl	8005ea4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80048a4:	e05f      	b.n	8004966 <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART2)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a34      	ldr	r2, [pc, #208]	; (800497c <HAL_UART_MspInit+0x15c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d130      	bne.n	8004912 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80048b0:	4b30      	ldr	r3, [pc, #192]	; (8004974 <HAL_UART_MspInit+0x154>)
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	4a2f      	ldr	r2, [pc, #188]	; (8004974 <HAL_UART_MspInit+0x154>)
 80048b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ba:	61d3      	str	r3, [r2, #28]
 80048bc:	4b2d      	ldr	r3, [pc, #180]	; (8004974 <HAL_UART_MspInit+0x154>)
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c4:	617b      	str	r3, [r7, #20]
 80048c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048c8:	4b2a      	ldr	r3, [pc, #168]	; (8004974 <HAL_UART_MspInit+0x154>)
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	4a29      	ldr	r2, [pc, #164]	; (8004974 <HAL_UART_MspInit+0x154>)
 80048ce:	f043 0304 	orr.w	r3, r3, #4
 80048d2:	6193      	str	r3, [r2, #24]
 80048d4:	4b27      	ldr	r3, [pc, #156]	; (8004974 <HAL_UART_MspInit+0x154>)
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80048e0:	2304      	movs	r3, #4
 80048e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e4:	2302      	movs	r3, #2
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048e8:	2303      	movs	r3, #3
 80048ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ec:	f107 0320 	add.w	r3, r7, #32
 80048f0:	4619      	mov	r1, r3
 80048f2:	4821      	ldr	r0, [pc, #132]	; (8004978 <HAL_UART_MspInit+0x158>)
 80048f4:	f001 fad6 	bl	8005ea4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80048f8:	2308      	movs	r3, #8
 80048fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048fc:	2300      	movs	r3, #0
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004900:	2300      	movs	r3, #0
 8004902:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004904:	f107 0320 	add.w	r3, r7, #32
 8004908:	4619      	mov	r1, r3
 800490a:	481b      	ldr	r0, [pc, #108]	; (8004978 <HAL_UART_MspInit+0x158>)
 800490c:	f001 faca 	bl	8005ea4 <HAL_GPIO_Init>
}
 8004910:	e029      	b.n	8004966 <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART3)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a1a      	ldr	r2, [pc, #104]	; (8004980 <HAL_UART_MspInit+0x160>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d124      	bne.n	8004966 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 800491c:	4b15      	ldr	r3, [pc, #84]	; (8004974 <HAL_UART_MspInit+0x154>)
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	4a14      	ldr	r2, [pc, #80]	; (8004974 <HAL_UART_MspInit+0x154>)
 8004922:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004926:	61d3      	str	r3, [r2, #28]
 8004928:	4b12      	ldr	r3, [pc, #72]	; (8004974 <HAL_UART_MspInit+0x154>)
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004934:	4b0f      	ldr	r3, [pc, #60]	; (8004974 <HAL_UART_MspInit+0x154>)
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	4a0e      	ldr	r2, [pc, #56]	; (8004974 <HAL_UART_MspInit+0x154>)
 800493a:	f043 0308 	orr.w	r3, r3, #8
 800493e:	6193      	str	r3, [r2, #24]
 8004940:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <HAL_UART_MspInit+0x154>)
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	60bb      	str	r3, [r7, #8]
 800494a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800494c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004952:	2312      	movs	r3, #18
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004956:	2303      	movs	r3, #3
 8004958:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800495a:	f107 0320 	add.w	r3, r7, #32
 800495e:	4619      	mov	r1, r3
 8004960:	4808      	ldr	r0, [pc, #32]	; (8004984 <HAL_UART_MspInit+0x164>)
 8004962:	f001 fa9f 	bl	8005ea4 <HAL_GPIO_Init>
}
 8004966:	bf00      	nop
 8004968:	3730      	adds	r7, #48	; 0x30
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	40013800 	.word	0x40013800
 8004974:	40021000 	.word	0x40021000
 8004978:	40010800 	.word	0x40010800
 800497c:	40004400 	.word	0x40004400
 8004980:	40004800 	.word	0x40004800
 8004984:	40010c00 	.word	0x40010c00

08004988 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004988:	f7ff fd0c 	bl	80043a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800498c:	480b      	ldr	r0, [pc, #44]	; (80049bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800498e:	490c      	ldr	r1, [pc, #48]	; (80049c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004990:	4a0c      	ldr	r2, [pc, #48]	; (80049c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004994:	e002      	b.n	800499c <LoopCopyDataInit>

08004996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800499a:	3304      	adds	r3, #4

0800499c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800499c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800499e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049a0:	d3f9      	bcc.n	8004996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049a2:	4a09      	ldr	r2, [pc, #36]	; (80049c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80049a4:	4c09      	ldr	r4, [pc, #36]	; (80049cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80049a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049a8:	e001      	b.n	80049ae <LoopFillZerobss>

080049aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049ac:	3204      	adds	r2, #4

080049ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049b0:	d3fb      	bcc.n	80049aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80049b2:	f00b ff49 	bl	8010848 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80049b6:	f7fd fd7b 	bl	80024b0 <main>
  bx lr
 80049ba:	4770      	bx	lr
  ldr r0, =_sdata
 80049bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049c0:	20000840 	.word	0x20000840
  ldr r2, =_sidata
 80049c4:	080140ac 	.word	0x080140ac
  ldr r2, =_sbss
 80049c8:	20000840 	.word	0x20000840
  ldr r4, =_ebss
 80049cc:	20003664 	.word	0x20003664

080049d0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80049d0:	e7fe      	b.n	80049d0 <ADC3_IRQHandler>
	...

080049d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049d8:	4b08      	ldr	r3, [pc, #32]	; (80049fc <HAL_Init+0x28>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a07      	ldr	r2, [pc, #28]	; (80049fc <HAL_Init+0x28>)
 80049de:	f043 0310 	orr.w	r3, r3, #16
 80049e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049e4:	2003      	movs	r0, #3
 80049e6:	f000 fdc7 	bl	8005578 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049ea:	200f      	movs	r0, #15
 80049ec:	f000 f808 	bl	8004a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049f0:	f7ff fb78 	bl	80040e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40022000 	.word	0x40022000

08004a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a08:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <HAL_InitTick+0x54>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	4b12      	ldr	r3, [pc, #72]	; (8004a58 <HAL_InitTick+0x58>)
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	4619      	mov	r1, r3
 8004a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fddf 	bl	80055e2 <HAL_SYSTICK_Config>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e00e      	b.n	8004a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b0f      	cmp	r3, #15
 8004a32:	d80a      	bhi.n	8004a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a34:	2200      	movs	r2, #0
 8004a36:	6879      	ldr	r1, [r7, #4]
 8004a38:	f04f 30ff 	mov.w	r0, #4294967295
 8004a3c:	f000 fda7 	bl	800558e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a40:	4a06      	ldr	r2, [pc, #24]	; (8004a5c <HAL_InitTick+0x5c>)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	e000      	b.n	8004a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	200004ec 	.word	0x200004ec
 8004a58:	200004f4 	.word	0x200004f4
 8004a5c:	200004f0 	.word	0x200004f0

08004a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <HAL_IncTick+0x1c>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <HAL_IncTick+0x20>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4413      	add	r3, r2
 8004a70:	4a03      	ldr	r2, [pc, #12]	; (8004a80 <HAL_IncTick+0x20>)
 8004a72:	6013      	str	r3, [r2, #0]
}
 8004a74:	bf00      	nop
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr
 8004a7c:	200004f4 	.word	0x200004f4
 8004a80:	20002478 	.word	0x20002478

08004a84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  return uwTick;
 8004a88:	4b02      	ldr	r3, [pc, #8]	; (8004a94 <HAL_GetTick+0x10>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr
 8004a94:	20002478 	.word	0x20002478

08004a98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e0ce      	b.n	8004c58 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d109      	bne.n	8004adc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7fd f87c 	bl	8001bd4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fbcf 	bl	8005280 <ADC_ConversionStop_Disable>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aea:	f003 0310 	and.w	r3, r3, #16
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f040 80a9 	bne.w	8004c46 <HAL_ADC_Init+0x1ae>
 8004af4:	7dfb      	ldrb	r3, [r7, #23]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f040 80a5 	bne.w	8004c46 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b00:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004b04:	f023 0302 	bic.w	r3, r3, #2
 8004b08:	f043 0202 	orr.w	r2, r3, #2
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4951      	ldr	r1, [pc, #324]	; (8004c60 <HAL_ADC_Init+0x1c8>)
 8004b1a:	428b      	cmp	r3, r1
 8004b1c:	d10a      	bne.n	8004b34 <HAL_ADC_Init+0x9c>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b26:	d002      	beq.n	8004b2e <HAL_ADC_Init+0x96>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	e004      	b.n	8004b38 <HAL_ADC_Init+0xa0>
 8004b2e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004b32:	e001      	b.n	8004b38 <HAL_ADC_Init+0xa0>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004b38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	7b1b      	ldrb	r3, [r3, #12]
 8004b3e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004b40:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b50:	d003      	beq.n	8004b5a <HAL_ADC_Init+0xc2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d102      	bne.n	8004b60 <HAL_ADC_Init+0xc8>
 8004b5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b5e:	e000      	b.n	8004b62 <HAL_ADC_Init+0xca>
 8004b60:	2300      	movs	r3, #0
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	7d1b      	ldrb	r3, [r3, #20]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d119      	bne.n	8004ba4 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	7b1b      	ldrb	r3, [r3, #12]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	035a      	lsls	r2, r3, #13
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	e00b      	b.n	8004ba4 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b90:	f043 0220 	orr.w	r2, r3, #32
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	f043 0201 	orr.w	r2, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	4b29      	ldr	r3, [pc, #164]	; (8004c64 <HAL_ADC_Init+0x1cc>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6812      	ldr	r2, [r2, #0]
 8004bc6:	68b9      	ldr	r1, [r7, #8]
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bd4:	d003      	beq.n	8004bde <HAL_ADC_Init+0x146>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d104      	bne.n	8004be8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	051b      	lsls	r3, r3, #20
 8004be6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	4b19      	ldr	r3, [pc, #100]	; (8004c68 <HAL_ADC_Init+0x1d0>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d10b      	bne.n	8004c24 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c16:	f023 0303 	bic.w	r3, r3, #3
 8004c1a:	f043 0201 	orr.w	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004c22:	e018      	b.n	8004c56 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c28:	f023 0312 	bic.w	r3, r3, #18
 8004c2c:	f043 0210 	orr.w	r2, r3, #16
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c38:	f043 0201 	orr.w	r2, r3, #1
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004c44:	e007      	b.n	8004c56 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4a:	f043 0210 	orr.w	r2, r3, #16
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40013c00 	.word	0x40013c00
 8004c64:	ffe1f7fd 	.word	0xffe1f7fd
 8004c68:	ff1f0efe 	.word	0xff1f0efe

08004c6c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a64      	ldr	r2, [pc, #400]	; (8004e14 <HAL_ADC_Start_DMA+0x1a8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d004      	beq.n	8004c90 <HAL_ADC_Start_DMA+0x24>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a63      	ldr	r2, [pc, #396]	; (8004e18 <HAL_ADC_Start_DMA+0x1ac>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d106      	bne.n	8004c9e <HAL_ADC_Start_DMA+0x32>
 8004c90:	4b60      	ldr	r3, [pc, #384]	; (8004e14 <HAL_ADC_Start_DMA+0x1a8>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f040 80b3 	bne.w	8004e04 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_ADC_Start_DMA+0x40>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e0ae      	b.n	8004e0a <HAL_ADC_Start_DMA+0x19e>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 fa89 	bl	80051cc <ADC_Enable>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f040 809a 	bne.w	8004dfa <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004cce:	f023 0301 	bic.w	r3, r3, #1
 8004cd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a4e      	ldr	r2, [pc, #312]	; (8004e18 <HAL_ADC_Start_DMA+0x1ac>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d105      	bne.n	8004cf0 <HAL_ADC_Start_DMA+0x84>
 8004ce4:	4b4b      	ldr	r3, [pc, #300]	; (8004e14 <HAL_ADC_Start_DMA+0x1a8>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d115      	bne.n	8004d1c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d026      	beq.n	8004d58 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004d1a:	e01d      	b.n	8004d58 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d20:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a39      	ldr	r2, [pc, #228]	; (8004e14 <HAL_ADC_Start_DMA+0x1a8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d004      	beq.n	8004d3c <HAL_ADC_Start_DMA+0xd0>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a38      	ldr	r2, [pc, #224]	; (8004e18 <HAL_ADC_Start_DMA+0x1ac>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d10d      	bne.n	8004d58 <HAL_ADC_Start_DMA+0xec>
 8004d3c:	4b35      	ldr	r3, [pc, #212]	; (8004e14 <HAL_ADC_Start_DMA+0x1a8>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d007      	beq.n	8004d58 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d006      	beq.n	8004d72 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	f023 0206 	bic.w	r2, r3, #6
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d70:	e002      	b.n	8004d78 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	4a25      	ldr	r2, [pc, #148]	; (8004e1c <HAL_ADC_Start_DMA+0x1b0>)
 8004d86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	4a24      	ldr	r2, [pc, #144]	; (8004e20 <HAL_ADC_Start_DMA+0x1b4>)
 8004d8e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	4a23      	ldr	r2, [pc, #140]	; (8004e24 <HAL_ADC_Start_DMA+0x1b8>)
 8004d96:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f06f 0202 	mvn.w	r2, #2
 8004da0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004db0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a18      	ldr	r0, [r3, #32]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	334c      	adds	r3, #76	; 0x4c
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f000 fc91 	bl	80056e8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004dd0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004dd4:	d108      	bne.n	8004de8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004de4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004de6:	e00f      	b.n	8004e08 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689a      	ldr	r2, [r3, #8]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004df6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004df8:	e006      	b.n	8004e08 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8004e02:	e001      	b.n	8004e08 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	40012400 	.word	0x40012400
 8004e18:	40012800 	.word	0x40012800
 8004e1c:	08005303 	.word	0x08005303
 8004e20:	0800537f 	.word	0x0800537f
 8004e24:	0800539b 	.word	0x0800539b

08004e28 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d03e      	beq.n	8004ec8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d039      	beq.n	8004ec8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e58:	f003 0310 	and.w	r3, r3, #16
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d105      	bne.n	8004e6c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004e76:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004e7a:	d11d      	bne.n	8004eb8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d119      	bne.n	8004eb8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0220 	bic.w	r2, r2, #32
 8004e92:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d105      	bne.n	8004eb8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	f043 0201 	orr.w	r2, r3, #1
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7fd fef7 	bl	8002cac <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f06f 0212 	mvn.w	r2, #18
 8004ec6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d04d      	beq.n	8004f6e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d048      	beq.n	8004f6e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee0:	f003 0310 	and.w	r3, r3, #16
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d105      	bne.n	8004ef4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004efe:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8004f02:	d012      	beq.n	8004f2a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d125      	bne.n	8004f5e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8004f1c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004f20:	d11d      	bne.n	8004f5e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d119      	bne.n	8004f5e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f38:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d105      	bne.n	8004f5e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f56:	f043 0201 	orr.w	r2, r3, #1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fa35 	bl	80053ce <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f06f 020c 	mvn.w	r2, #12
 8004f6c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d012      	beq.n	8004f9e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00d      	beq.n	8004f9e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f812 	bl	8004fb8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f06f 0201 	mvn.w	r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8004f9e:	bf00      	nop
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bc80      	pop	{r7}
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr

08004fca <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bc80      	pop	{r7}
 8004fda:	4770      	bx	lr

08004fdc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d101      	bne.n	8004ffc <HAL_ADC_ConfigChannel+0x20>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	e0dc      	b.n	80051b6 <HAL_ADC_ConfigChannel+0x1da>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2b06      	cmp	r3, #6
 800500a:	d81c      	bhi.n	8005046 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	4613      	mov	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	3b05      	subs	r3, #5
 800501e:	221f      	movs	r2, #31
 8005020:	fa02 f303 	lsl.w	r3, r2, r3
 8005024:	43db      	mvns	r3, r3
 8005026:	4019      	ands	r1, r3
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	6818      	ldr	r0, [r3, #0]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	3b05      	subs	r3, #5
 8005038:	fa00 f203 	lsl.w	r2, r0, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	635a      	str	r2, [r3, #52]	; 0x34
 8005044:	e03c      	b.n	80050c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b0c      	cmp	r3, #12
 800504c:	d81c      	bhi.n	8005088 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	4613      	mov	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	3b23      	subs	r3, #35	; 0x23
 8005060:	221f      	movs	r2, #31
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	43db      	mvns	r3, r3
 8005068:	4019      	ands	r1, r3
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	4613      	mov	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	3b23      	subs	r3, #35	; 0x23
 800507a:	fa00 f203 	lsl.w	r2, r0, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	631a      	str	r2, [r3, #48]	; 0x30
 8005086:	e01b      	b.n	80050c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	3b41      	subs	r3, #65	; 0x41
 800509a:	221f      	movs	r2, #31
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	43db      	mvns	r3, r3
 80050a2:	4019      	ands	r1, r3
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	6818      	ldr	r0, [r3, #0]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	4613      	mov	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	3b41      	subs	r3, #65	; 0x41
 80050b4:	fa00 f203 	lsl.w	r2, r0, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b09      	cmp	r3, #9
 80050c6:	d91c      	bls.n	8005102 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68d9      	ldr	r1, [r3, #12]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	4613      	mov	r3, r2
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	4413      	add	r3, r2
 80050d8:	3b1e      	subs	r3, #30
 80050da:	2207      	movs	r2, #7
 80050dc:	fa02 f303 	lsl.w	r3, r2, r3
 80050e0:	43db      	mvns	r3, r3
 80050e2:	4019      	ands	r1, r3
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	6898      	ldr	r0, [r3, #8]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	4613      	mov	r3, r2
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	4413      	add	r3, r2
 80050f2:	3b1e      	subs	r3, #30
 80050f4:	fa00 f203 	lsl.w	r2, r0, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	60da      	str	r2, [r3, #12]
 8005100:	e019      	b.n	8005136 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6919      	ldr	r1, [r3, #16]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	4613      	mov	r3, r2
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	4413      	add	r3, r2
 8005112:	2207      	movs	r2, #7
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	43db      	mvns	r3, r3
 800511a:	4019      	ands	r1, r3
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	6898      	ldr	r0, [r3, #8]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	4613      	mov	r3, r2
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	4413      	add	r3, r2
 800512a:	fa00 f203 	lsl.w	r2, r0, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b10      	cmp	r3, #16
 800513c:	d003      	beq.n	8005146 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005142:	2b11      	cmp	r3, #17
 8005144:	d132      	bne.n	80051ac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a1d      	ldr	r2, [pc, #116]	; (80051c0 <HAL_ADC_ConfigChannel+0x1e4>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d125      	bne.n	800519c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d126      	bne.n	80051ac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800516c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b10      	cmp	r3, #16
 8005174:	d11a      	bne.n	80051ac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005176:	4b13      	ldr	r3, [pc, #76]	; (80051c4 <HAL_ADC_ConfigChannel+0x1e8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a13      	ldr	r2, [pc, #76]	; (80051c8 <HAL_ADC_ConfigChannel+0x1ec>)
 800517c:	fba2 2303 	umull	r2, r3, r2, r3
 8005180:	0c9a      	lsrs	r2, r3, #18
 8005182:	4613      	mov	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	005b      	lsls	r3, r3, #1
 800518a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800518c:	e002      	b.n	8005194 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	3b01      	subs	r3, #1
 8005192:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f9      	bne.n	800518e <HAL_ADC_ConfigChannel+0x1b2>
 800519a:	e007      	b.n	80051ac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a0:	f043 0220 	orr.w	r2, r3, #32
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bc80      	pop	{r7}
 80051be:	4770      	bx	lr
 80051c0:	40012400 	.word	0x40012400
 80051c4:	200004ec 	.word	0x200004ec
 80051c8:	431bde83 	.word	0x431bde83

080051cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d040      	beq.n	800526c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f042 0201 	orr.w	r2, r2, #1
 80051f8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80051fa:	4b1f      	ldr	r3, [pc, #124]	; (8005278 <ADC_Enable+0xac>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a1f      	ldr	r2, [pc, #124]	; (800527c <ADC_Enable+0xb0>)
 8005200:	fba2 2303 	umull	r2, r3, r2, r3
 8005204:	0c9b      	lsrs	r3, r3, #18
 8005206:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005208:	e002      	b.n	8005210 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	3b01      	subs	r3, #1
 800520e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f9      	bne.n	800520a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005216:	f7ff fc35 	bl	8004a84 <HAL_GetTick>
 800521a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800521c:	e01f      	b.n	800525e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800521e:	f7ff fc31 	bl	8004a84 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d918      	bls.n	800525e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b01      	cmp	r3, #1
 8005238:	d011      	beq.n	800525e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	f043 0210 	orr.w	r2, r3, #16
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524a:	f043 0201 	orr.w	r2, r3, #1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e007      	b.n	800526e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b01      	cmp	r3, #1
 800526a:	d1d8      	bne.n	800521e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	200004ec 	.word	0x200004ec
 800527c:	431bde83 	.word	0x431bde83

08005280 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b01      	cmp	r3, #1
 8005298:	d12e      	bne.n	80052f8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0201 	bic.w	r2, r2, #1
 80052a8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80052aa:	f7ff fbeb 	bl	8004a84 <HAL_GetTick>
 80052ae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80052b0:	e01b      	b.n	80052ea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80052b2:	f7ff fbe7 	bl	8004a84 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d914      	bls.n	80052ea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d10d      	bne.n	80052ea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d2:	f043 0210 	orr.w	r2, r3, #16
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052de:	f043 0201 	orr.w	r2, r3, #1
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e007      	b.n	80052fa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d0dc      	beq.n	80052b2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005314:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005318:	2b00      	cmp	r3, #0
 800531a:	d127      	bne.n	800536c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005332:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005336:	d115      	bne.n	8005364 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800533c:	2b00      	cmp	r3, #0
 800533e:	d111      	bne.n	8005364 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d105      	bne.n	8005364 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535c:	f043 0201 	orr.w	r2, r3, #1
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f7fd fca1 	bl	8002cac <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800536a:	e004      	b.n	8005376 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	4798      	blx	r3
}
 8005376:	bf00      	nop
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f7ff fe0a 	bl	8004fa6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005392:	bf00      	nop
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b084      	sub	sp, #16
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	f043 0204 	orr.w	r2, r3, #4
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f7ff fe02 	bl	8004fca <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80053c6:	bf00      	nop
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b083      	sub	sp, #12
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80053d6:	bf00      	nop
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	bc80      	pop	{r7}
 80053de:	4770      	bx	lr

080053e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f003 0307 	and.w	r3, r3, #7
 80053ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053f0:	4b0c      	ldr	r3, [pc, #48]	; (8005424 <__NVIC_SetPriorityGrouping+0x44>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053fc:	4013      	ands	r3, r2
 80053fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800540c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005412:	4a04      	ldr	r2, [pc, #16]	; (8005424 <__NVIC_SetPriorityGrouping+0x44>)
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	60d3      	str	r3, [r2, #12]
}
 8005418:	bf00      	nop
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	bc80      	pop	{r7}
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	e000ed00 	.word	0xe000ed00

08005428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800542c:	4b04      	ldr	r3, [pc, #16]	; (8005440 <__NVIC_GetPriorityGrouping+0x18>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	0a1b      	lsrs	r3, r3, #8
 8005432:	f003 0307 	and.w	r3, r3, #7
}
 8005436:	4618      	mov	r0, r3
 8005438:	46bd      	mov	sp, r7
 800543a:	bc80      	pop	{r7}
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	e000ed00 	.word	0xe000ed00

08005444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	4603      	mov	r3, r0
 800544c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800544e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005452:	2b00      	cmp	r3, #0
 8005454:	db0b      	blt.n	800546e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005456:	79fb      	ldrb	r3, [r7, #7]
 8005458:	f003 021f 	and.w	r2, r3, #31
 800545c:	4906      	ldr	r1, [pc, #24]	; (8005478 <__NVIC_EnableIRQ+0x34>)
 800545e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	2001      	movs	r0, #1
 8005466:	fa00 f202 	lsl.w	r2, r0, r2
 800546a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	bc80      	pop	{r7}
 8005476:	4770      	bx	lr
 8005478:	e000e100 	.word	0xe000e100

0800547c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	4603      	mov	r3, r0
 8005484:	6039      	str	r1, [r7, #0]
 8005486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800548c:	2b00      	cmp	r3, #0
 800548e:	db0a      	blt.n	80054a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	b2da      	uxtb	r2, r3
 8005494:	490c      	ldr	r1, [pc, #48]	; (80054c8 <__NVIC_SetPriority+0x4c>)
 8005496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800549a:	0112      	lsls	r2, r2, #4
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	440b      	add	r3, r1
 80054a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054a4:	e00a      	b.n	80054bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	4908      	ldr	r1, [pc, #32]	; (80054cc <__NVIC_SetPriority+0x50>)
 80054ac:	79fb      	ldrb	r3, [r7, #7]
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	3b04      	subs	r3, #4
 80054b4:	0112      	lsls	r2, r2, #4
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	440b      	add	r3, r1
 80054ba:	761a      	strb	r2, [r3, #24]
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bc80      	pop	{r7}
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	e000e100 	.word	0xe000e100
 80054cc:	e000ed00 	.word	0xe000ed00

080054d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b089      	sub	sp, #36	; 0x24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	f1c3 0307 	rsb	r3, r3, #7
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	bf28      	it	cs
 80054ee:	2304      	movcs	r3, #4
 80054f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	3304      	adds	r3, #4
 80054f6:	2b06      	cmp	r3, #6
 80054f8:	d902      	bls.n	8005500 <NVIC_EncodePriority+0x30>
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	3b03      	subs	r3, #3
 80054fe:	e000      	b.n	8005502 <NVIC_EncodePriority+0x32>
 8005500:	2300      	movs	r3, #0
 8005502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005504:	f04f 32ff 	mov.w	r2, #4294967295
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	43da      	mvns	r2, r3
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	401a      	ands	r2, r3
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005518:	f04f 31ff 	mov.w	r1, #4294967295
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	fa01 f303 	lsl.w	r3, r1, r3
 8005522:	43d9      	mvns	r1, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005528:	4313      	orrs	r3, r2
         );
}
 800552a:	4618      	mov	r0, r3
 800552c:	3724      	adds	r7, #36	; 0x24
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr

08005534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3b01      	subs	r3, #1
 8005540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005544:	d301      	bcc.n	800554a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005546:	2301      	movs	r3, #1
 8005548:	e00f      	b.n	800556a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800554a:	4a0a      	ldr	r2, [pc, #40]	; (8005574 <SysTick_Config+0x40>)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3b01      	subs	r3, #1
 8005550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005552:	210f      	movs	r1, #15
 8005554:	f04f 30ff 	mov.w	r0, #4294967295
 8005558:	f7ff ff90 	bl	800547c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800555c:	4b05      	ldr	r3, [pc, #20]	; (8005574 <SysTick_Config+0x40>)
 800555e:	2200      	movs	r2, #0
 8005560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005562:	4b04      	ldr	r3, [pc, #16]	; (8005574 <SysTick_Config+0x40>)
 8005564:	2207      	movs	r2, #7
 8005566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	e000e010 	.word	0xe000e010

08005578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7ff ff2d 	bl	80053e0 <__NVIC_SetPriorityGrouping>
}
 8005586:	bf00      	nop
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800558e:	b580      	push	{r7, lr}
 8005590:	b086      	sub	sp, #24
 8005592:	af00      	add	r7, sp, #0
 8005594:	4603      	mov	r3, r0
 8005596:	60b9      	str	r1, [r7, #8]
 8005598:	607a      	str	r2, [r7, #4]
 800559a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800559c:	2300      	movs	r3, #0
 800559e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055a0:	f7ff ff42 	bl	8005428 <__NVIC_GetPriorityGrouping>
 80055a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	6978      	ldr	r0, [r7, #20]
 80055ac:	f7ff ff90 	bl	80054d0 <NVIC_EncodePriority>
 80055b0:	4602      	mov	r2, r0
 80055b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055b6:	4611      	mov	r1, r2
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7ff ff5f 	bl	800547c <__NVIC_SetPriority>
}
 80055be:	bf00      	nop
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b082      	sub	sp, #8
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	4603      	mov	r3, r0
 80055ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff ff35 	bl	8005444 <__NVIC_EnableIRQ>
}
 80055da:	bf00      	nop
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b082      	sub	sp, #8
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff ffa2 	bl	8005534 <SysTick_Config>
 80055f0:	4603      	mov	r3, r0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e059      	b.n	80056c6 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	4b2d      	ldr	r3, [pc, #180]	; (80056d0 <HAL_DMA_Init+0xd4>)
 800561a:	429a      	cmp	r2, r3
 800561c:	d80f      	bhi.n	800563e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	4b2b      	ldr	r3, [pc, #172]	; (80056d4 <HAL_DMA_Init+0xd8>)
 8005626:	4413      	add	r3, r2
 8005628:	4a2b      	ldr	r2, [pc, #172]	; (80056d8 <HAL_DMA_Init+0xdc>)
 800562a:	fba2 2303 	umull	r2, r3, r2, r3
 800562e:	091b      	lsrs	r3, r3, #4
 8005630:	009a      	lsls	r2, r3, #2
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a28      	ldr	r2, [pc, #160]	; (80056dc <HAL_DMA_Init+0xe0>)
 800563a:	63da      	str	r2, [r3, #60]	; 0x3c
 800563c:	e00e      	b.n	800565c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	461a      	mov	r2, r3
 8005644:	4b26      	ldr	r3, [pc, #152]	; (80056e0 <HAL_DMA_Init+0xe4>)
 8005646:	4413      	add	r3, r2
 8005648:	4a23      	ldr	r2, [pc, #140]	; (80056d8 <HAL_DMA_Init+0xdc>)
 800564a:	fba2 2303 	umull	r2, r3, r2, r3
 800564e:	091b      	lsrs	r3, r3, #4
 8005650:	009a      	lsls	r2, r3, #2
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a22      	ldr	r2, [pc, #136]	; (80056e4 <HAL_DMA_Init+0xe8>)
 800565a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005672:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005676:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005680:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800568c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005698:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bc80      	pop	{r7}
 80056ce:	4770      	bx	lr
 80056d0:	40020407 	.word	0x40020407
 80056d4:	bffdfff8 	.word	0xbffdfff8
 80056d8:	cccccccd 	.word	0xcccccccd
 80056dc:	40020000 	.word	0x40020000
 80056e0:	bffdfbf8 	.word	0xbffdfbf8
 80056e4:	40020400 	.word	0x40020400

080056e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d101      	bne.n	8005708 <HAL_DMA_Start_IT+0x20>
 8005704:	2302      	movs	r3, #2
 8005706:	e04b      	b.n	80057a0 <HAL_DMA_Start_IT+0xb8>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b01      	cmp	r3, #1
 800571a:	d13a      	bne.n	8005792 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0201 	bic.w	r2, r2, #1
 8005738:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	68b9      	ldr	r1, [r7, #8]
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 fb82 	bl	8005e4a <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d008      	beq.n	8005760 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f042 020e 	orr.w	r2, r2, #14
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	e00f      	b.n	8005780 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0204 	bic.w	r2, r2, #4
 800576e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 020a 	orr.w	r2, r2, #10
 800577e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0201 	orr.w	r2, r2, #1
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	e005      	b.n	800579e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800579a:	2302      	movs	r3, #2
 800579c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800579e:	7dfb      	ldrb	r3, [r7, #23]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d005      	beq.n	80057cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2204      	movs	r2, #4
 80057c4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	73fb      	strb	r3, [r7, #15]
 80057ca:	e0d6      	b.n	800597a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 020e 	bic.w	r2, r2, #14
 80057da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0201 	bic.w	r2, r2, #1
 80057ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	461a      	mov	r2, r3
 80057f2:	4b64      	ldr	r3, [pc, #400]	; (8005984 <HAL_DMA_Abort_IT+0x1dc>)
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d958      	bls.n	80058aa <HAL_DMA_Abort_IT+0x102>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a62      	ldr	r2, [pc, #392]	; (8005988 <HAL_DMA_Abort_IT+0x1e0>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d04f      	beq.n	80058a2 <HAL_DMA_Abort_IT+0xfa>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a61      	ldr	r2, [pc, #388]	; (800598c <HAL_DMA_Abort_IT+0x1e4>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d048      	beq.n	800589e <HAL_DMA_Abort_IT+0xf6>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a5f      	ldr	r2, [pc, #380]	; (8005990 <HAL_DMA_Abort_IT+0x1e8>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d040      	beq.n	8005898 <HAL_DMA_Abort_IT+0xf0>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a5e      	ldr	r2, [pc, #376]	; (8005994 <HAL_DMA_Abort_IT+0x1ec>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d038      	beq.n	8005892 <HAL_DMA_Abort_IT+0xea>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a5c      	ldr	r2, [pc, #368]	; (8005998 <HAL_DMA_Abort_IT+0x1f0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d030      	beq.n	800588c <HAL_DMA_Abort_IT+0xe4>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a5b      	ldr	r2, [pc, #364]	; (800599c <HAL_DMA_Abort_IT+0x1f4>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d028      	beq.n	8005886 <HAL_DMA_Abort_IT+0xde>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a52      	ldr	r2, [pc, #328]	; (8005984 <HAL_DMA_Abort_IT+0x1dc>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d020      	beq.n	8005880 <HAL_DMA_Abort_IT+0xd8>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a57      	ldr	r2, [pc, #348]	; (80059a0 <HAL_DMA_Abort_IT+0x1f8>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d019      	beq.n	800587c <HAL_DMA_Abort_IT+0xd4>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a55      	ldr	r2, [pc, #340]	; (80059a4 <HAL_DMA_Abort_IT+0x1fc>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d012      	beq.n	8005878 <HAL_DMA_Abort_IT+0xd0>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a54      	ldr	r2, [pc, #336]	; (80059a8 <HAL_DMA_Abort_IT+0x200>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d00a      	beq.n	8005872 <HAL_DMA_Abort_IT+0xca>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a52      	ldr	r2, [pc, #328]	; (80059ac <HAL_DMA_Abort_IT+0x204>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d102      	bne.n	800586c <HAL_DMA_Abort_IT+0xc4>
 8005866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800586a:	e01b      	b.n	80058a4 <HAL_DMA_Abort_IT+0xfc>
 800586c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005870:	e018      	b.n	80058a4 <HAL_DMA_Abort_IT+0xfc>
 8005872:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005876:	e015      	b.n	80058a4 <HAL_DMA_Abort_IT+0xfc>
 8005878:	2310      	movs	r3, #16
 800587a:	e013      	b.n	80058a4 <HAL_DMA_Abort_IT+0xfc>
 800587c:	2301      	movs	r3, #1
 800587e:	e011      	b.n	80058a4 <HAL_DMA_Abort_IT+0xfc>
 8005880:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005884:	e00e      	b.n	80058a4 <HAL_DMA_Abort_IT+0xfc>
 8005886:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800588a:	e00b      	b.n	80058a4 <HAL_DMA_Abort_IT+0xfc>
 800588c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005890:	e008      	b.n	80058a4 <HAL_DMA_Abort_IT+0xfc>
 8005892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005896:	e005      	b.n	80058a4 <HAL_DMA_Abort_IT+0xfc>
 8005898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800589c:	e002      	b.n	80058a4 <HAL_DMA_Abort_IT+0xfc>
 800589e:	2310      	movs	r3, #16
 80058a0:	e000      	b.n	80058a4 <HAL_DMA_Abort_IT+0xfc>
 80058a2:	2301      	movs	r3, #1
 80058a4:	4a42      	ldr	r2, [pc, #264]	; (80059b0 <HAL_DMA_Abort_IT+0x208>)
 80058a6:	6053      	str	r3, [r2, #4]
 80058a8:	e057      	b.n	800595a <HAL_DMA_Abort_IT+0x1b2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a36      	ldr	r2, [pc, #216]	; (8005988 <HAL_DMA_Abort_IT+0x1e0>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d04f      	beq.n	8005954 <HAL_DMA_Abort_IT+0x1ac>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a34      	ldr	r2, [pc, #208]	; (800598c <HAL_DMA_Abort_IT+0x1e4>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d048      	beq.n	8005950 <HAL_DMA_Abort_IT+0x1a8>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a33      	ldr	r2, [pc, #204]	; (8005990 <HAL_DMA_Abort_IT+0x1e8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d040      	beq.n	800594a <HAL_DMA_Abort_IT+0x1a2>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a31      	ldr	r2, [pc, #196]	; (8005994 <HAL_DMA_Abort_IT+0x1ec>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d038      	beq.n	8005944 <HAL_DMA_Abort_IT+0x19c>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a30      	ldr	r2, [pc, #192]	; (8005998 <HAL_DMA_Abort_IT+0x1f0>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d030      	beq.n	800593e <HAL_DMA_Abort_IT+0x196>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a2e      	ldr	r2, [pc, #184]	; (800599c <HAL_DMA_Abort_IT+0x1f4>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d028      	beq.n	8005938 <HAL_DMA_Abort_IT+0x190>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a26      	ldr	r2, [pc, #152]	; (8005984 <HAL_DMA_Abort_IT+0x1dc>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d020      	beq.n	8005932 <HAL_DMA_Abort_IT+0x18a>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a2a      	ldr	r2, [pc, #168]	; (80059a0 <HAL_DMA_Abort_IT+0x1f8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d019      	beq.n	800592e <HAL_DMA_Abort_IT+0x186>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a29      	ldr	r2, [pc, #164]	; (80059a4 <HAL_DMA_Abort_IT+0x1fc>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d012      	beq.n	800592a <HAL_DMA_Abort_IT+0x182>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a27      	ldr	r2, [pc, #156]	; (80059a8 <HAL_DMA_Abort_IT+0x200>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00a      	beq.n	8005924 <HAL_DMA_Abort_IT+0x17c>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a26      	ldr	r2, [pc, #152]	; (80059ac <HAL_DMA_Abort_IT+0x204>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d102      	bne.n	800591e <HAL_DMA_Abort_IT+0x176>
 8005918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800591c:	e01b      	b.n	8005956 <HAL_DMA_Abort_IT+0x1ae>
 800591e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005922:	e018      	b.n	8005956 <HAL_DMA_Abort_IT+0x1ae>
 8005924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005928:	e015      	b.n	8005956 <HAL_DMA_Abort_IT+0x1ae>
 800592a:	2310      	movs	r3, #16
 800592c:	e013      	b.n	8005956 <HAL_DMA_Abort_IT+0x1ae>
 800592e:	2301      	movs	r3, #1
 8005930:	e011      	b.n	8005956 <HAL_DMA_Abort_IT+0x1ae>
 8005932:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005936:	e00e      	b.n	8005956 <HAL_DMA_Abort_IT+0x1ae>
 8005938:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800593c:	e00b      	b.n	8005956 <HAL_DMA_Abort_IT+0x1ae>
 800593e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005942:	e008      	b.n	8005956 <HAL_DMA_Abort_IT+0x1ae>
 8005944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005948:	e005      	b.n	8005956 <HAL_DMA_Abort_IT+0x1ae>
 800594a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800594e:	e002      	b.n	8005956 <HAL_DMA_Abort_IT+0x1ae>
 8005950:	2310      	movs	r3, #16
 8005952:	e000      	b.n	8005956 <HAL_DMA_Abort_IT+0x1ae>
 8005954:	2301      	movs	r3, #1
 8005956:	4a17      	ldr	r2, [pc, #92]	; (80059b4 <HAL_DMA_Abort_IT+0x20c>)
 8005958:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	4798      	blx	r3
    } 
  }
  return status;
 800597a:	7bfb      	ldrb	r3, [r7, #15]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40020080 	.word	0x40020080
 8005988:	40020008 	.word	0x40020008
 800598c:	4002001c 	.word	0x4002001c
 8005990:	40020030 	.word	0x40020030
 8005994:	40020044 	.word	0x40020044
 8005998:	40020058 	.word	0x40020058
 800599c:	4002006c 	.word	0x4002006c
 80059a0:	40020408 	.word	0x40020408
 80059a4:	4002041c 	.word	0x4002041c
 80059a8:	40020430 	.word	0x40020430
 80059ac:	40020444 	.word	0x40020444
 80059b0:	40020400 	.word	0x40020400
 80059b4:	40020000 	.word	0x40020000

080059b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d4:	2204      	movs	r2, #4
 80059d6:	409a      	lsls	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4013      	ands	r3, r2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 80f1 	beq.w	8005bc4 <HAL_DMA_IRQHandler+0x20c>
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 80eb 	beq.w	8005bc4 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d107      	bne.n	8005a0c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0204 	bic.w	r2, r2, #4
 8005a0a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	461a      	mov	r2, r3
 8005a12:	4b5f      	ldr	r3, [pc, #380]	; (8005b90 <HAL_DMA_IRQHandler+0x1d8>)
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d958      	bls.n	8005aca <HAL_DMA_IRQHandler+0x112>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a5d      	ldr	r2, [pc, #372]	; (8005b94 <HAL_DMA_IRQHandler+0x1dc>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d04f      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x10a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a5c      	ldr	r2, [pc, #368]	; (8005b98 <HAL_DMA_IRQHandler+0x1e0>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d048      	beq.n	8005abe <HAL_DMA_IRQHandler+0x106>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a5a      	ldr	r2, [pc, #360]	; (8005b9c <HAL_DMA_IRQHandler+0x1e4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d040      	beq.n	8005ab8 <HAL_DMA_IRQHandler+0x100>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a59      	ldr	r2, [pc, #356]	; (8005ba0 <HAL_DMA_IRQHandler+0x1e8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d038      	beq.n	8005ab2 <HAL_DMA_IRQHandler+0xfa>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a57      	ldr	r2, [pc, #348]	; (8005ba4 <HAL_DMA_IRQHandler+0x1ec>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d030      	beq.n	8005aac <HAL_DMA_IRQHandler+0xf4>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a56      	ldr	r2, [pc, #344]	; (8005ba8 <HAL_DMA_IRQHandler+0x1f0>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d028      	beq.n	8005aa6 <HAL_DMA_IRQHandler+0xee>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a4d      	ldr	r2, [pc, #308]	; (8005b90 <HAL_DMA_IRQHandler+0x1d8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d020      	beq.n	8005aa0 <HAL_DMA_IRQHandler+0xe8>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a52      	ldr	r2, [pc, #328]	; (8005bac <HAL_DMA_IRQHandler+0x1f4>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d019      	beq.n	8005a9c <HAL_DMA_IRQHandler+0xe4>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a50      	ldr	r2, [pc, #320]	; (8005bb0 <HAL_DMA_IRQHandler+0x1f8>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d012      	beq.n	8005a98 <HAL_DMA_IRQHandler+0xe0>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a4f      	ldr	r2, [pc, #316]	; (8005bb4 <HAL_DMA_IRQHandler+0x1fc>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d00a      	beq.n	8005a92 <HAL_DMA_IRQHandler+0xda>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a4d      	ldr	r2, [pc, #308]	; (8005bb8 <HAL_DMA_IRQHandler+0x200>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d102      	bne.n	8005a8c <HAL_DMA_IRQHandler+0xd4>
 8005a86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a8a:	e01b      	b.n	8005ac4 <HAL_DMA_IRQHandler+0x10c>
 8005a8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005a90:	e018      	b.n	8005ac4 <HAL_DMA_IRQHandler+0x10c>
 8005a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a96:	e015      	b.n	8005ac4 <HAL_DMA_IRQHandler+0x10c>
 8005a98:	2340      	movs	r3, #64	; 0x40
 8005a9a:	e013      	b.n	8005ac4 <HAL_DMA_IRQHandler+0x10c>
 8005a9c:	2304      	movs	r3, #4
 8005a9e:	e011      	b.n	8005ac4 <HAL_DMA_IRQHandler+0x10c>
 8005aa0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005aa4:	e00e      	b.n	8005ac4 <HAL_DMA_IRQHandler+0x10c>
 8005aa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005aaa:	e00b      	b.n	8005ac4 <HAL_DMA_IRQHandler+0x10c>
 8005aac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005ab0:	e008      	b.n	8005ac4 <HAL_DMA_IRQHandler+0x10c>
 8005ab2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ab6:	e005      	b.n	8005ac4 <HAL_DMA_IRQHandler+0x10c>
 8005ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005abc:	e002      	b.n	8005ac4 <HAL_DMA_IRQHandler+0x10c>
 8005abe:	2340      	movs	r3, #64	; 0x40
 8005ac0:	e000      	b.n	8005ac4 <HAL_DMA_IRQHandler+0x10c>
 8005ac2:	2304      	movs	r3, #4
 8005ac4:	4a3d      	ldr	r2, [pc, #244]	; (8005bbc <HAL_DMA_IRQHandler+0x204>)
 8005ac6:	6053      	str	r3, [r2, #4]
 8005ac8:	e057      	b.n	8005b7a <HAL_DMA_IRQHandler+0x1c2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a31      	ldr	r2, [pc, #196]	; (8005b94 <HAL_DMA_IRQHandler+0x1dc>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d04f      	beq.n	8005b74 <HAL_DMA_IRQHandler+0x1bc>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a2f      	ldr	r2, [pc, #188]	; (8005b98 <HAL_DMA_IRQHandler+0x1e0>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d048      	beq.n	8005b70 <HAL_DMA_IRQHandler+0x1b8>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a2e      	ldr	r2, [pc, #184]	; (8005b9c <HAL_DMA_IRQHandler+0x1e4>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d040      	beq.n	8005b6a <HAL_DMA_IRQHandler+0x1b2>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a2c      	ldr	r2, [pc, #176]	; (8005ba0 <HAL_DMA_IRQHandler+0x1e8>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d038      	beq.n	8005b64 <HAL_DMA_IRQHandler+0x1ac>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a2b      	ldr	r2, [pc, #172]	; (8005ba4 <HAL_DMA_IRQHandler+0x1ec>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d030      	beq.n	8005b5e <HAL_DMA_IRQHandler+0x1a6>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a29      	ldr	r2, [pc, #164]	; (8005ba8 <HAL_DMA_IRQHandler+0x1f0>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d028      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x1a0>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a21      	ldr	r2, [pc, #132]	; (8005b90 <HAL_DMA_IRQHandler+0x1d8>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d020      	beq.n	8005b52 <HAL_DMA_IRQHandler+0x19a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a25      	ldr	r2, [pc, #148]	; (8005bac <HAL_DMA_IRQHandler+0x1f4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d019      	beq.n	8005b4e <HAL_DMA_IRQHandler+0x196>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a24      	ldr	r2, [pc, #144]	; (8005bb0 <HAL_DMA_IRQHandler+0x1f8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d012      	beq.n	8005b4a <HAL_DMA_IRQHandler+0x192>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a22      	ldr	r2, [pc, #136]	; (8005bb4 <HAL_DMA_IRQHandler+0x1fc>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00a      	beq.n	8005b44 <HAL_DMA_IRQHandler+0x18c>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a21      	ldr	r2, [pc, #132]	; (8005bb8 <HAL_DMA_IRQHandler+0x200>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d102      	bne.n	8005b3e <HAL_DMA_IRQHandler+0x186>
 8005b38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005b3c:	e01b      	b.n	8005b76 <HAL_DMA_IRQHandler+0x1be>
 8005b3e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005b42:	e018      	b.n	8005b76 <HAL_DMA_IRQHandler+0x1be>
 8005b44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b48:	e015      	b.n	8005b76 <HAL_DMA_IRQHandler+0x1be>
 8005b4a:	2340      	movs	r3, #64	; 0x40
 8005b4c:	e013      	b.n	8005b76 <HAL_DMA_IRQHandler+0x1be>
 8005b4e:	2304      	movs	r3, #4
 8005b50:	e011      	b.n	8005b76 <HAL_DMA_IRQHandler+0x1be>
 8005b52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005b56:	e00e      	b.n	8005b76 <HAL_DMA_IRQHandler+0x1be>
 8005b58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b5c:	e00b      	b.n	8005b76 <HAL_DMA_IRQHandler+0x1be>
 8005b5e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005b62:	e008      	b.n	8005b76 <HAL_DMA_IRQHandler+0x1be>
 8005b64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005b68:	e005      	b.n	8005b76 <HAL_DMA_IRQHandler+0x1be>
 8005b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b6e:	e002      	b.n	8005b76 <HAL_DMA_IRQHandler+0x1be>
 8005b70:	2340      	movs	r3, #64	; 0x40
 8005b72:	e000      	b.n	8005b76 <HAL_DMA_IRQHandler+0x1be>
 8005b74:	2304      	movs	r3, #4
 8005b76:	4a12      	ldr	r2, [pc, #72]	; (8005bc0 <HAL_DMA_IRQHandler+0x208>)
 8005b78:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 8136 	beq.w	8005df0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005b8c:	e130      	b.n	8005df0 <HAL_DMA_IRQHandler+0x438>
 8005b8e:	bf00      	nop
 8005b90:	40020080 	.word	0x40020080
 8005b94:	40020008 	.word	0x40020008
 8005b98:	4002001c 	.word	0x4002001c
 8005b9c:	40020030 	.word	0x40020030
 8005ba0:	40020044 	.word	0x40020044
 8005ba4:	40020058 	.word	0x40020058
 8005ba8:	4002006c 	.word	0x4002006c
 8005bac:	40020408 	.word	0x40020408
 8005bb0:	4002041c 	.word	0x4002041c
 8005bb4:	40020430 	.word	0x40020430
 8005bb8:	40020444 	.word	0x40020444
 8005bbc:	40020400 	.word	0x40020400
 8005bc0:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc8:	2202      	movs	r2, #2
 8005bca:	409a      	lsls	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 80dd 	beq.w	8005d90 <HAL_DMA_IRQHandler+0x3d8>
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 80d7 	beq.w	8005d90 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0320 	and.w	r3, r3, #32
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10b      	bne.n	8005c08 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 020a 	bic.w	r2, r2, #10
 8005bfe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	4b7b      	ldr	r3, [pc, #492]	; (8005dfc <HAL_DMA_IRQHandler+0x444>)
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d958      	bls.n	8005cc6 <HAL_DMA_IRQHandler+0x30e>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a79      	ldr	r2, [pc, #484]	; (8005e00 <HAL_DMA_IRQHandler+0x448>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d04f      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x306>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a78      	ldr	r2, [pc, #480]	; (8005e04 <HAL_DMA_IRQHandler+0x44c>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d048      	beq.n	8005cba <HAL_DMA_IRQHandler+0x302>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a76      	ldr	r2, [pc, #472]	; (8005e08 <HAL_DMA_IRQHandler+0x450>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d040      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x2fc>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a75      	ldr	r2, [pc, #468]	; (8005e0c <HAL_DMA_IRQHandler+0x454>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d038      	beq.n	8005cae <HAL_DMA_IRQHandler+0x2f6>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a73      	ldr	r2, [pc, #460]	; (8005e10 <HAL_DMA_IRQHandler+0x458>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d030      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x2f0>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a72      	ldr	r2, [pc, #456]	; (8005e14 <HAL_DMA_IRQHandler+0x45c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d028      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x2ea>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a69      	ldr	r2, [pc, #420]	; (8005dfc <HAL_DMA_IRQHandler+0x444>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d020      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x2e4>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a6e      	ldr	r2, [pc, #440]	; (8005e18 <HAL_DMA_IRQHandler+0x460>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d019      	beq.n	8005c98 <HAL_DMA_IRQHandler+0x2e0>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a6c      	ldr	r2, [pc, #432]	; (8005e1c <HAL_DMA_IRQHandler+0x464>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d012      	beq.n	8005c94 <HAL_DMA_IRQHandler+0x2dc>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a6b      	ldr	r2, [pc, #428]	; (8005e20 <HAL_DMA_IRQHandler+0x468>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00a      	beq.n	8005c8e <HAL_DMA_IRQHandler+0x2d6>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a69      	ldr	r2, [pc, #420]	; (8005e24 <HAL_DMA_IRQHandler+0x46c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d102      	bne.n	8005c88 <HAL_DMA_IRQHandler+0x2d0>
 8005c82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c86:	e01b      	b.n	8005cc0 <HAL_DMA_IRQHandler+0x308>
 8005c88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c8c:	e018      	b.n	8005cc0 <HAL_DMA_IRQHandler+0x308>
 8005c8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c92:	e015      	b.n	8005cc0 <HAL_DMA_IRQHandler+0x308>
 8005c94:	2320      	movs	r3, #32
 8005c96:	e013      	b.n	8005cc0 <HAL_DMA_IRQHandler+0x308>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e011      	b.n	8005cc0 <HAL_DMA_IRQHandler+0x308>
 8005c9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ca0:	e00e      	b.n	8005cc0 <HAL_DMA_IRQHandler+0x308>
 8005ca2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005ca6:	e00b      	b.n	8005cc0 <HAL_DMA_IRQHandler+0x308>
 8005ca8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cac:	e008      	b.n	8005cc0 <HAL_DMA_IRQHandler+0x308>
 8005cae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005cb2:	e005      	b.n	8005cc0 <HAL_DMA_IRQHandler+0x308>
 8005cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cb8:	e002      	b.n	8005cc0 <HAL_DMA_IRQHandler+0x308>
 8005cba:	2320      	movs	r3, #32
 8005cbc:	e000      	b.n	8005cc0 <HAL_DMA_IRQHandler+0x308>
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	4a59      	ldr	r2, [pc, #356]	; (8005e28 <HAL_DMA_IRQHandler+0x470>)
 8005cc2:	6053      	str	r3, [r2, #4]
 8005cc4:	e057      	b.n	8005d76 <HAL_DMA_IRQHandler+0x3be>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a4d      	ldr	r2, [pc, #308]	; (8005e00 <HAL_DMA_IRQHandler+0x448>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d04f      	beq.n	8005d70 <HAL_DMA_IRQHandler+0x3b8>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a4b      	ldr	r2, [pc, #300]	; (8005e04 <HAL_DMA_IRQHandler+0x44c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d048      	beq.n	8005d6c <HAL_DMA_IRQHandler+0x3b4>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a4a      	ldr	r2, [pc, #296]	; (8005e08 <HAL_DMA_IRQHandler+0x450>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d040      	beq.n	8005d66 <HAL_DMA_IRQHandler+0x3ae>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a48      	ldr	r2, [pc, #288]	; (8005e0c <HAL_DMA_IRQHandler+0x454>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d038      	beq.n	8005d60 <HAL_DMA_IRQHandler+0x3a8>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a47      	ldr	r2, [pc, #284]	; (8005e10 <HAL_DMA_IRQHandler+0x458>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d030      	beq.n	8005d5a <HAL_DMA_IRQHandler+0x3a2>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a45      	ldr	r2, [pc, #276]	; (8005e14 <HAL_DMA_IRQHandler+0x45c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d028      	beq.n	8005d54 <HAL_DMA_IRQHandler+0x39c>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a3d      	ldr	r2, [pc, #244]	; (8005dfc <HAL_DMA_IRQHandler+0x444>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d020      	beq.n	8005d4e <HAL_DMA_IRQHandler+0x396>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a41      	ldr	r2, [pc, #260]	; (8005e18 <HAL_DMA_IRQHandler+0x460>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d019      	beq.n	8005d4a <HAL_DMA_IRQHandler+0x392>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a40      	ldr	r2, [pc, #256]	; (8005e1c <HAL_DMA_IRQHandler+0x464>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d012      	beq.n	8005d46 <HAL_DMA_IRQHandler+0x38e>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a3e      	ldr	r2, [pc, #248]	; (8005e20 <HAL_DMA_IRQHandler+0x468>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00a      	beq.n	8005d40 <HAL_DMA_IRQHandler+0x388>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a3d      	ldr	r2, [pc, #244]	; (8005e24 <HAL_DMA_IRQHandler+0x46c>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d102      	bne.n	8005d3a <HAL_DMA_IRQHandler+0x382>
 8005d34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d38:	e01b      	b.n	8005d72 <HAL_DMA_IRQHandler+0x3ba>
 8005d3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d3e:	e018      	b.n	8005d72 <HAL_DMA_IRQHandler+0x3ba>
 8005d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d44:	e015      	b.n	8005d72 <HAL_DMA_IRQHandler+0x3ba>
 8005d46:	2320      	movs	r3, #32
 8005d48:	e013      	b.n	8005d72 <HAL_DMA_IRQHandler+0x3ba>
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	e011      	b.n	8005d72 <HAL_DMA_IRQHandler+0x3ba>
 8005d4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d52:	e00e      	b.n	8005d72 <HAL_DMA_IRQHandler+0x3ba>
 8005d54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d58:	e00b      	b.n	8005d72 <HAL_DMA_IRQHandler+0x3ba>
 8005d5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d5e:	e008      	b.n	8005d72 <HAL_DMA_IRQHandler+0x3ba>
 8005d60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d64:	e005      	b.n	8005d72 <HAL_DMA_IRQHandler+0x3ba>
 8005d66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d6a:	e002      	b.n	8005d72 <HAL_DMA_IRQHandler+0x3ba>
 8005d6c:	2320      	movs	r3, #32
 8005d6e:	e000      	b.n	8005d72 <HAL_DMA_IRQHandler+0x3ba>
 8005d70:	2302      	movs	r3, #2
 8005d72:	4a2e      	ldr	r2, [pc, #184]	; (8005e2c <HAL_DMA_IRQHandler+0x474>)
 8005d74:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d034      	beq.n	8005df0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005d8e:	e02f      	b.n	8005df0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d94:	2208      	movs	r2, #8
 8005d96:	409a      	lsls	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d028      	beq.n	8005df2 <HAL_DMA_IRQHandler+0x43a>
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f003 0308 	and.w	r3, r3, #8
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d023      	beq.n	8005df2 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 020e 	bic.w	r2, r2, #14
 8005db8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8005dc8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d004      	beq.n	8005df2 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	4798      	blx	r3
    }
  }
  return;
 8005df0:	bf00      	nop
 8005df2:	bf00      	nop
}
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	40020080 	.word	0x40020080
 8005e00:	40020008 	.word	0x40020008
 8005e04:	4002001c 	.word	0x4002001c
 8005e08:	40020030 	.word	0x40020030
 8005e0c:	40020044 	.word	0x40020044
 8005e10:	40020058 	.word	0x40020058
 8005e14:	4002006c 	.word	0x4002006c
 8005e18:	40020408 	.word	0x40020408
 8005e1c:	4002041c 	.word	0x4002041c
 8005e20:	40020430 	.word	0x40020430
 8005e24:	40020444 	.word	0x40020444
 8005e28:	40020400 	.word	0x40020400
 8005e2c:	40020000 	.word	0x40020000

08005e30 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e3e:	b2db      	uxtb	r3, r3
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bc80      	pop	{r7}
 8005e48:	4770      	bx	lr

08005e4a <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b085      	sub	sp, #20
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	60f8      	str	r0, [r7, #12]
 8005e52:	60b9      	str	r1, [r7, #8]
 8005e54:	607a      	str	r2, [r7, #4]
 8005e56:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e60:	2101      	movs	r1, #1
 8005e62:	fa01 f202 	lsl.w	r2, r1, r2
 8005e66:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	2b10      	cmp	r3, #16
 8005e76:	d108      	bne.n	8005e8a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005e88:	e007      	b.n	8005e9a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	60da      	str	r2, [r3, #12]
}
 8005e9a:	bf00      	nop
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bc80      	pop	{r7}
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b08b      	sub	sp, #44	; 0x2c
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005eb6:	e179      	b.n	80061ac <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005eb8:	2201      	movs	r2, #1
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69fa      	ldr	r2, [r7, #28]
 8005ec8:	4013      	ands	r3, r2
 8005eca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005ecc:	69ba      	ldr	r2, [r7, #24]
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	f040 8168 	bne.w	80061a6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	4a96      	ldr	r2, [pc, #600]	; (8006134 <HAL_GPIO_Init+0x290>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d05e      	beq.n	8005f9e <HAL_GPIO_Init+0xfa>
 8005ee0:	4a94      	ldr	r2, [pc, #592]	; (8006134 <HAL_GPIO_Init+0x290>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d875      	bhi.n	8005fd2 <HAL_GPIO_Init+0x12e>
 8005ee6:	4a94      	ldr	r2, [pc, #592]	; (8006138 <HAL_GPIO_Init+0x294>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d058      	beq.n	8005f9e <HAL_GPIO_Init+0xfa>
 8005eec:	4a92      	ldr	r2, [pc, #584]	; (8006138 <HAL_GPIO_Init+0x294>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d86f      	bhi.n	8005fd2 <HAL_GPIO_Init+0x12e>
 8005ef2:	4a92      	ldr	r2, [pc, #584]	; (800613c <HAL_GPIO_Init+0x298>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d052      	beq.n	8005f9e <HAL_GPIO_Init+0xfa>
 8005ef8:	4a90      	ldr	r2, [pc, #576]	; (800613c <HAL_GPIO_Init+0x298>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d869      	bhi.n	8005fd2 <HAL_GPIO_Init+0x12e>
 8005efe:	4a90      	ldr	r2, [pc, #576]	; (8006140 <HAL_GPIO_Init+0x29c>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d04c      	beq.n	8005f9e <HAL_GPIO_Init+0xfa>
 8005f04:	4a8e      	ldr	r2, [pc, #568]	; (8006140 <HAL_GPIO_Init+0x29c>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d863      	bhi.n	8005fd2 <HAL_GPIO_Init+0x12e>
 8005f0a:	4a8e      	ldr	r2, [pc, #568]	; (8006144 <HAL_GPIO_Init+0x2a0>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d046      	beq.n	8005f9e <HAL_GPIO_Init+0xfa>
 8005f10:	4a8c      	ldr	r2, [pc, #560]	; (8006144 <HAL_GPIO_Init+0x2a0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d85d      	bhi.n	8005fd2 <HAL_GPIO_Init+0x12e>
 8005f16:	2b12      	cmp	r3, #18
 8005f18:	d82a      	bhi.n	8005f70 <HAL_GPIO_Init+0xcc>
 8005f1a:	2b12      	cmp	r3, #18
 8005f1c:	d859      	bhi.n	8005fd2 <HAL_GPIO_Init+0x12e>
 8005f1e:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <HAL_GPIO_Init+0x80>)
 8005f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f24:	08005f9f 	.word	0x08005f9f
 8005f28:	08005f79 	.word	0x08005f79
 8005f2c:	08005f8b 	.word	0x08005f8b
 8005f30:	08005fcd 	.word	0x08005fcd
 8005f34:	08005fd3 	.word	0x08005fd3
 8005f38:	08005fd3 	.word	0x08005fd3
 8005f3c:	08005fd3 	.word	0x08005fd3
 8005f40:	08005fd3 	.word	0x08005fd3
 8005f44:	08005fd3 	.word	0x08005fd3
 8005f48:	08005fd3 	.word	0x08005fd3
 8005f4c:	08005fd3 	.word	0x08005fd3
 8005f50:	08005fd3 	.word	0x08005fd3
 8005f54:	08005fd3 	.word	0x08005fd3
 8005f58:	08005fd3 	.word	0x08005fd3
 8005f5c:	08005fd3 	.word	0x08005fd3
 8005f60:	08005fd3 	.word	0x08005fd3
 8005f64:	08005fd3 	.word	0x08005fd3
 8005f68:	08005f81 	.word	0x08005f81
 8005f6c:	08005f95 	.word	0x08005f95
 8005f70:	4a75      	ldr	r2, [pc, #468]	; (8006148 <HAL_GPIO_Init+0x2a4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d013      	beq.n	8005f9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005f76:	e02c      	b.n	8005fd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	623b      	str	r3, [r7, #32]
          break;
 8005f7e:	e029      	b.n	8005fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	3304      	adds	r3, #4
 8005f86:	623b      	str	r3, [r7, #32]
          break;
 8005f88:	e024      	b.n	8005fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	3308      	adds	r3, #8
 8005f90:	623b      	str	r3, [r7, #32]
          break;
 8005f92:	e01f      	b.n	8005fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	330c      	adds	r3, #12
 8005f9a:	623b      	str	r3, [r7, #32]
          break;
 8005f9c:	e01a      	b.n	8005fd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d102      	bne.n	8005fac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005fa6:	2304      	movs	r3, #4
 8005fa8:	623b      	str	r3, [r7, #32]
          break;
 8005faa:	e013      	b.n	8005fd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d105      	bne.n	8005fc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005fb4:	2308      	movs	r3, #8
 8005fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	611a      	str	r2, [r3, #16]
          break;
 8005fbe:	e009      	b.n	8005fd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005fc0:	2308      	movs	r3, #8
 8005fc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	69fa      	ldr	r2, [r7, #28]
 8005fc8:	615a      	str	r2, [r3, #20]
          break;
 8005fca:	e003      	b.n	8005fd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	623b      	str	r3, [r7, #32]
          break;
 8005fd0:	e000      	b.n	8005fd4 <HAL_GPIO_Init+0x130>
          break;
 8005fd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	2bff      	cmp	r3, #255	; 0xff
 8005fd8:	d801      	bhi.n	8005fde <HAL_GPIO_Init+0x13a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	e001      	b.n	8005fe2 <HAL_GPIO_Init+0x13e>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	2bff      	cmp	r3, #255	; 0xff
 8005fe8:	d802      	bhi.n	8005ff0 <HAL_GPIO_Init+0x14c>
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	e002      	b.n	8005ff6 <HAL_GPIO_Init+0x152>
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	3b08      	subs	r3, #8
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	210f      	movs	r1, #15
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	fa01 f303 	lsl.w	r3, r1, r3
 8006004:	43db      	mvns	r3, r3
 8006006:	401a      	ands	r2, r3
 8006008:	6a39      	ldr	r1, [r7, #32]
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	fa01 f303 	lsl.w	r3, r1, r3
 8006010:	431a      	orrs	r2, r3
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 80c1 	beq.w	80061a6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006024:	4b49      	ldr	r3, [pc, #292]	; (800614c <HAL_GPIO_Init+0x2a8>)
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	4a48      	ldr	r2, [pc, #288]	; (800614c <HAL_GPIO_Init+0x2a8>)
 800602a:	f043 0301 	orr.w	r3, r3, #1
 800602e:	6193      	str	r3, [r2, #24]
 8006030:	4b46      	ldr	r3, [pc, #280]	; (800614c <HAL_GPIO_Init+0x2a8>)
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	60bb      	str	r3, [r7, #8]
 800603a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800603c:	4a44      	ldr	r2, [pc, #272]	; (8006150 <HAL_GPIO_Init+0x2ac>)
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	089b      	lsrs	r3, r3, #2
 8006042:	3302      	adds	r3, #2
 8006044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006048:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	f003 0303 	and.w	r3, r3, #3
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	220f      	movs	r2, #15
 8006054:	fa02 f303 	lsl.w	r3, r2, r3
 8006058:	43db      	mvns	r3, r3
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	4013      	ands	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a3c      	ldr	r2, [pc, #240]	; (8006154 <HAL_GPIO_Init+0x2b0>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d01f      	beq.n	80060a8 <HAL_GPIO_Init+0x204>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a3b      	ldr	r2, [pc, #236]	; (8006158 <HAL_GPIO_Init+0x2b4>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d019      	beq.n	80060a4 <HAL_GPIO_Init+0x200>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a3a      	ldr	r2, [pc, #232]	; (800615c <HAL_GPIO_Init+0x2b8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d013      	beq.n	80060a0 <HAL_GPIO_Init+0x1fc>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a39      	ldr	r2, [pc, #228]	; (8006160 <HAL_GPIO_Init+0x2bc>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d00d      	beq.n	800609c <HAL_GPIO_Init+0x1f8>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a38      	ldr	r2, [pc, #224]	; (8006164 <HAL_GPIO_Init+0x2c0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d007      	beq.n	8006098 <HAL_GPIO_Init+0x1f4>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a37      	ldr	r2, [pc, #220]	; (8006168 <HAL_GPIO_Init+0x2c4>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d101      	bne.n	8006094 <HAL_GPIO_Init+0x1f0>
 8006090:	2305      	movs	r3, #5
 8006092:	e00a      	b.n	80060aa <HAL_GPIO_Init+0x206>
 8006094:	2306      	movs	r3, #6
 8006096:	e008      	b.n	80060aa <HAL_GPIO_Init+0x206>
 8006098:	2304      	movs	r3, #4
 800609a:	e006      	b.n	80060aa <HAL_GPIO_Init+0x206>
 800609c:	2303      	movs	r3, #3
 800609e:	e004      	b.n	80060aa <HAL_GPIO_Init+0x206>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e002      	b.n	80060aa <HAL_GPIO_Init+0x206>
 80060a4:	2301      	movs	r3, #1
 80060a6:	e000      	b.n	80060aa <HAL_GPIO_Init+0x206>
 80060a8:	2300      	movs	r3, #0
 80060aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ac:	f002 0203 	and.w	r2, r2, #3
 80060b0:	0092      	lsls	r2, r2, #2
 80060b2:	4093      	lsls	r3, r2
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80060ba:	4925      	ldr	r1, [pc, #148]	; (8006150 <HAL_GPIO_Init+0x2ac>)
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	089b      	lsrs	r3, r3, #2
 80060c0:	3302      	adds	r3, #2
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d006      	beq.n	80060e2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80060d4:	4b25      	ldr	r3, [pc, #148]	; (800616c <HAL_GPIO_Init+0x2c8>)
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	4924      	ldr	r1, [pc, #144]	; (800616c <HAL_GPIO_Init+0x2c8>)
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	4313      	orrs	r3, r2
 80060de:	608b      	str	r3, [r1, #8]
 80060e0:	e006      	b.n	80060f0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80060e2:	4b22      	ldr	r3, [pc, #136]	; (800616c <HAL_GPIO_Init+0x2c8>)
 80060e4:	689a      	ldr	r2, [r3, #8]
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	43db      	mvns	r3, r3
 80060ea:	4920      	ldr	r1, [pc, #128]	; (800616c <HAL_GPIO_Init+0x2c8>)
 80060ec:	4013      	ands	r3, r2
 80060ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d006      	beq.n	800610a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80060fc:	4b1b      	ldr	r3, [pc, #108]	; (800616c <HAL_GPIO_Init+0x2c8>)
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	491a      	ldr	r1, [pc, #104]	; (800616c <HAL_GPIO_Init+0x2c8>)
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	4313      	orrs	r3, r2
 8006106:	60cb      	str	r3, [r1, #12]
 8006108:	e006      	b.n	8006118 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800610a:	4b18      	ldr	r3, [pc, #96]	; (800616c <HAL_GPIO_Init+0x2c8>)
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	43db      	mvns	r3, r3
 8006112:	4916      	ldr	r1, [pc, #88]	; (800616c <HAL_GPIO_Init+0x2c8>)
 8006114:	4013      	ands	r3, r2
 8006116:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d025      	beq.n	8006170 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006124:	4b11      	ldr	r3, [pc, #68]	; (800616c <HAL_GPIO_Init+0x2c8>)
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	4910      	ldr	r1, [pc, #64]	; (800616c <HAL_GPIO_Init+0x2c8>)
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	4313      	orrs	r3, r2
 800612e:	604b      	str	r3, [r1, #4]
 8006130:	e025      	b.n	800617e <HAL_GPIO_Init+0x2da>
 8006132:	bf00      	nop
 8006134:	10320000 	.word	0x10320000
 8006138:	10310000 	.word	0x10310000
 800613c:	10220000 	.word	0x10220000
 8006140:	10210000 	.word	0x10210000
 8006144:	10120000 	.word	0x10120000
 8006148:	10110000 	.word	0x10110000
 800614c:	40021000 	.word	0x40021000
 8006150:	40010000 	.word	0x40010000
 8006154:	40010800 	.word	0x40010800
 8006158:	40010c00 	.word	0x40010c00
 800615c:	40011000 	.word	0x40011000
 8006160:	40011400 	.word	0x40011400
 8006164:	40011800 	.word	0x40011800
 8006168:	40011c00 	.word	0x40011c00
 800616c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006170:	4b15      	ldr	r3, [pc, #84]	; (80061c8 <HAL_GPIO_Init+0x324>)
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	43db      	mvns	r3, r3
 8006178:	4913      	ldr	r1, [pc, #76]	; (80061c8 <HAL_GPIO_Init+0x324>)
 800617a:	4013      	ands	r3, r2
 800617c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d006      	beq.n	8006198 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800618a:	4b0f      	ldr	r3, [pc, #60]	; (80061c8 <HAL_GPIO_Init+0x324>)
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	490e      	ldr	r1, [pc, #56]	; (80061c8 <HAL_GPIO_Init+0x324>)
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	4313      	orrs	r3, r2
 8006194:	600b      	str	r3, [r1, #0]
 8006196:	e006      	b.n	80061a6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006198:	4b0b      	ldr	r3, [pc, #44]	; (80061c8 <HAL_GPIO_Init+0x324>)
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	43db      	mvns	r3, r3
 80061a0:	4909      	ldr	r1, [pc, #36]	; (80061c8 <HAL_GPIO_Init+0x324>)
 80061a2:	4013      	ands	r3, r2
 80061a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	3301      	adds	r3, #1
 80061aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b2:	fa22 f303 	lsr.w	r3, r2, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f47f ae7e 	bne.w	8005eb8 <HAL_GPIO_Init+0x14>
  }
}
 80061bc:	bf00      	nop
 80061be:	bf00      	nop
 80061c0:	372c      	adds	r7, #44	; 0x2c
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bc80      	pop	{r7}
 80061c6:	4770      	bx	lr
 80061c8:	40010400 	.word	0x40010400

080061cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	887b      	ldrh	r3, [r7, #2]
 80061de:	4013      	ands	r3, r2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d002      	beq.n	80061ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80061e4:	2301      	movs	r3, #1
 80061e6:	73fb      	strb	r3, [r7, #15]
 80061e8:	e001      	b.n	80061ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061ea:	2300      	movs	r3, #0
 80061ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bc80      	pop	{r7}
 80061f8:	4770      	bx	lr

080061fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	460b      	mov	r3, r1
 8006204:	807b      	strh	r3, [r7, #2]
 8006206:	4613      	mov	r3, r2
 8006208:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800620a:	787b      	ldrb	r3, [r7, #1]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006210:	887a      	ldrh	r2, [r7, #2]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006216:	e003      	b.n	8006220 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006218:	887b      	ldrh	r3, [r7, #2]
 800621a:	041a      	lsls	r2, r3, #16
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	611a      	str	r2, [r3, #16]
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr

0800622a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800622a:	b480      	push	{r7}
 800622c:	b085      	sub	sp, #20
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	460b      	mov	r3, r1
 8006234:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800623c:	887a      	ldrh	r2, [r7, #2]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	4013      	ands	r3, r2
 8006242:	041a      	lsls	r2, r3, #16
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	43d9      	mvns	r1, r3
 8006248:	887b      	ldrh	r3, [r7, #2]
 800624a:	400b      	ands	r3, r1
 800624c:	431a      	orrs	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	611a      	str	r2, [r3, #16]
}
 8006252:	bf00      	nop
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	bc80      	pop	{r7}
 800625a:	4770      	bx	lr

0800625c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e12b      	b.n	80064c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d106      	bne.n	8006288 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7fc f882 	bl	800238c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2224      	movs	r2, #36	; 0x24
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0201 	bic.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80062c0:	f004 fd10 	bl	800ace4 <HAL_RCC_GetPCLK1Freq>
 80062c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	4a81      	ldr	r2, [pc, #516]	; (80064d0 <HAL_I2C_Init+0x274>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d807      	bhi.n	80062e0 <HAL_I2C_Init+0x84>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4a80      	ldr	r2, [pc, #512]	; (80064d4 <HAL_I2C_Init+0x278>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	bf94      	ite	ls
 80062d8:	2301      	movls	r3, #1
 80062da:	2300      	movhi	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	e006      	b.n	80062ee <HAL_I2C_Init+0x92>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4a7d      	ldr	r2, [pc, #500]	; (80064d8 <HAL_I2C_Init+0x27c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	bf94      	ite	ls
 80062e8:	2301      	movls	r3, #1
 80062ea:	2300      	movhi	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e0e7      	b.n	80064c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4a78      	ldr	r2, [pc, #480]	; (80064dc <HAL_I2C_Init+0x280>)
 80062fa:	fba2 2303 	umull	r2, r3, r2, r3
 80062fe:	0c9b      	lsrs	r3, r3, #18
 8006300:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	430a      	orrs	r2, r1
 8006314:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	4a6a      	ldr	r2, [pc, #424]	; (80064d0 <HAL_I2C_Init+0x274>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d802      	bhi.n	8006330 <HAL_I2C_Init+0xd4>
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	3301      	adds	r3, #1
 800632e:	e009      	b.n	8006344 <HAL_I2C_Init+0xe8>
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006336:	fb02 f303 	mul.w	r3, r2, r3
 800633a:	4a69      	ldr	r2, [pc, #420]	; (80064e0 <HAL_I2C_Init+0x284>)
 800633c:	fba2 2303 	umull	r2, r3, r2, r3
 8006340:	099b      	lsrs	r3, r3, #6
 8006342:	3301      	adds	r3, #1
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6812      	ldr	r2, [r2, #0]
 8006348:	430b      	orrs	r3, r1
 800634a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006356:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	495c      	ldr	r1, [pc, #368]	; (80064d0 <HAL_I2C_Init+0x274>)
 8006360:	428b      	cmp	r3, r1
 8006362:	d819      	bhi.n	8006398 <HAL_I2C_Init+0x13c>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	1e59      	subs	r1, r3, #1
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006372:	1c59      	adds	r1, r3, #1
 8006374:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006378:	400b      	ands	r3, r1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00a      	beq.n	8006394 <HAL_I2C_Init+0x138>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	1e59      	subs	r1, r3, #1
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	fbb1 f3f3 	udiv	r3, r1, r3
 800638c:	3301      	adds	r3, #1
 800638e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006392:	e051      	b.n	8006438 <HAL_I2C_Init+0x1dc>
 8006394:	2304      	movs	r3, #4
 8006396:	e04f      	b.n	8006438 <HAL_I2C_Init+0x1dc>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d111      	bne.n	80063c4 <HAL_I2C_Init+0x168>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	1e58      	subs	r0, r3, #1
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6859      	ldr	r1, [r3, #4]
 80063a8:	460b      	mov	r3, r1
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	440b      	add	r3, r1
 80063ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80063b2:	3301      	adds	r3, #1
 80063b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	bf0c      	ite	eq
 80063bc:	2301      	moveq	r3, #1
 80063be:	2300      	movne	r3, #0
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	e012      	b.n	80063ea <HAL_I2C_Init+0x18e>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	1e58      	subs	r0, r3, #1
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6859      	ldr	r1, [r3, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	440b      	add	r3, r1
 80063d2:	0099      	lsls	r1, r3, #2
 80063d4:	440b      	add	r3, r1
 80063d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80063da:	3301      	adds	r3, #1
 80063dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	bf0c      	ite	eq
 80063e4:	2301      	moveq	r3, #1
 80063e6:	2300      	movne	r3, #0
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <HAL_I2C_Init+0x196>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e022      	b.n	8006438 <HAL_I2C_Init+0x1dc>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10e      	bne.n	8006418 <HAL_I2C_Init+0x1bc>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	1e58      	subs	r0, r3, #1
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6859      	ldr	r1, [r3, #4]
 8006402:	460b      	mov	r3, r1
 8006404:	005b      	lsls	r3, r3, #1
 8006406:	440b      	add	r3, r1
 8006408:	fbb0 f3f3 	udiv	r3, r0, r3
 800640c:	3301      	adds	r3, #1
 800640e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006416:	e00f      	b.n	8006438 <HAL_I2C_Init+0x1dc>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	1e58      	subs	r0, r3, #1
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6859      	ldr	r1, [r3, #4]
 8006420:	460b      	mov	r3, r1
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	440b      	add	r3, r1
 8006426:	0099      	lsls	r1, r3, #2
 8006428:	440b      	add	r3, r1
 800642a:	fbb0 f3f3 	udiv	r3, r0, r3
 800642e:	3301      	adds	r3, #1
 8006430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006434:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006438:	6879      	ldr	r1, [r7, #4]
 800643a:	6809      	ldr	r1, [r1, #0]
 800643c:	4313      	orrs	r3, r2
 800643e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	69da      	ldr	r2, [r3, #28]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	431a      	orrs	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006466:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6911      	ldr	r1, [r2, #16]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	68d2      	ldr	r2, [r2, #12]
 8006472:	4311      	orrs	r1, r2
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6812      	ldr	r2, [r2, #0]
 8006478:	430b      	orrs	r3, r1
 800647a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	695a      	ldr	r2, [r3, #20]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	431a      	orrs	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f042 0201 	orr.w	r2, r2, #1
 80064a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2220      	movs	r2, #32
 80064b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	000186a0 	.word	0x000186a0
 80064d4:	001e847f 	.word	0x001e847f
 80064d8:	003d08ff 	.word	0x003d08ff
 80064dc:	431bde83 	.word	0x431bde83
 80064e0:	10624dd3 	.word	0x10624dd3

080064e4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f6:	2b80      	cmp	r3, #128	; 0x80
 80064f8:	d103      	bne.n	8006502 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2200      	movs	r2, #0
 8006500:	611a      	str	r2, [r3, #16]
  }
}
 8006502:	bf00      	nop
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	bc80      	pop	{r7}
 800650a:	4770      	bx	lr

0800650c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b088      	sub	sp, #32
 8006510:	af02      	add	r7, sp, #8
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	4608      	mov	r0, r1
 8006516:	4611      	mov	r1, r2
 8006518:	461a      	mov	r2, r3
 800651a:	4603      	mov	r3, r0
 800651c:	817b      	strh	r3, [r7, #10]
 800651e:	460b      	mov	r3, r1
 8006520:	813b      	strh	r3, [r7, #8]
 8006522:	4613      	mov	r3, r2
 8006524:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006526:	f7fe faad 	bl	8004a84 <HAL_GetTick>
 800652a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b20      	cmp	r3, #32
 8006536:	f040 80d9 	bne.w	80066ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	2319      	movs	r3, #25
 8006540:	2201      	movs	r2, #1
 8006542:	496d      	ldr	r1, [pc, #436]	; (80066f8 <HAL_I2C_Mem_Write+0x1ec>)
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f002 f86f 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006550:	2302      	movs	r3, #2
 8006552:	e0cc      	b.n	80066ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800655a:	2b01      	cmp	r3, #1
 800655c:	d101      	bne.n	8006562 <HAL_I2C_Mem_Write+0x56>
 800655e:	2302      	movs	r3, #2
 8006560:	e0c5      	b.n	80066ee <HAL_I2C_Mem_Write+0x1e2>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b01      	cmp	r3, #1
 8006576:	d007      	beq.n	8006588 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0201 	orr.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006596:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2221      	movs	r2, #33	; 0x21
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2240      	movs	r2, #64	; 0x40
 80065a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6a3a      	ldr	r2, [r7, #32]
 80065b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065be:	b29a      	uxth	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4a4d      	ldr	r2, [pc, #308]	; (80066fc <HAL_I2C_Mem_Write+0x1f0>)
 80065c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065ca:	88f8      	ldrh	r0, [r7, #6]
 80065cc:	893a      	ldrh	r2, [r7, #8]
 80065ce:	8979      	ldrh	r1, [r7, #10]
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	9301      	str	r3, [sp, #4]
 80065d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	4603      	mov	r3, r0
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f001 fdda 	bl	8008194 <I2C_RequestMemoryWrite>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d052      	beq.n	800668c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e081      	b.n	80066ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f002 f934 	bl	800885c <I2C_WaitOnTXEFlagUntilTimeout>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00d      	beq.n	8006616 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d107      	bne.n	8006612 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006610:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e06b      	b.n	80066ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661a:	781a      	ldrb	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006630:	3b01      	subs	r3, #1
 8006632:	b29a      	uxth	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663c:	b29b      	uxth	r3, r3
 800663e:	3b01      	subs	r3, #1
 8006640:	b29a      	uxth	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	f003 0304 	and.w	r3, r3, #4
 8006650:	2b04      	cmp	r3, #4
 8006652:	d11b      	bne.n	800668c <HAL_I2C_Mem_Write+0x180>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006658:	2b00      	cmp	r3, #0
 800665a:	d017      	beq.n	800668c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	781a      	ldrb	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006676:	3b01      	subs	r3, #1
 8006678:	b29a      	uxth	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006682:	b29b      	uxth	r3, r3
 8006684:	3b01      	subs	r3, #1
 8006686:	b29a      	uxth	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1aa      	bne.n	80065ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f002 f927 	bl	80088ec <I2C_WaitOnBTFFlagUntilTimeout>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00d      	beq.n	80066c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	d107      	bne.n	80066bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e016      	b.n	80066ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	e000      	b.n	80066ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80066ec:	2302      	movs	r3, #2
  }
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3718      	adds	r7, #24
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	00100002 	.word	0x00100002
 80066fc:	ffff0000 	.word	0xffff0000

08006700 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b08a      	sub	sp, #40	; 0x28
 8006704:	af02      	add	r7, sp, #8
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	4608      	mov	r0, r1
 800670a:	4611      	mov	r1, r2
 800670c:	461a      	mov	r2, r3
 800670e:	4603      	mov	r3, r0
 8006710:	817b      	strh	r3, [r7, #10]
 8006712:	460b      	mov	r3, r1
 8006714:	813b      	strh	r3, [r7, #8]
 8006716:	4613      	mov	r3, r2
 8006718:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800671a:	2300      	movs	r3, #0
 800671c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800671e:	f7fe f9b1 	bl	8004a84 <HAL_GetTick>
 8006722:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b20      	cmp	r3, #32
 800672e:	f040 812e 	bne.w	800698e <HAL_I2C_Mem_Write_DMA+0x28e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006732:	4b99      	ldr	r3, [pc, #612]	; (8006998 <HAL_I2C_Mem_Write_DMA+0x298>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	08db      	lsrs	r3, r3, #3
 8006738:	4a98      	ldr	r2, [pc, #608]	; (800699c <HAL_I2C_Mem_Write_DMA+0x29c>)
 800673a:	fba2 2303 	umull	r2, r3, r2, r3
 800673e:	0a1a      	lsrs	r2, r3, #8
 8006740:	4613      	mov	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	009a      	lsls	r2, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	3b01      	subs	r3, #1
 8006750:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d112      	bne.n	800677e <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2220      	movs	r2, #32
 8006762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006772:	f043 0220 	orr.w	r2, r3, #32
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	641a      	str	r2, [r3, #64]	; 0x40

        return HAL_BUSY;
 800677a:	2302      	movs	r3, #2
 800677c:	e108      	b.n	8006990 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b02      	cmp	r3, #2
 800678a:	d0df      	beq.n	800674c <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <HAL_I2C_Mem_Write_DMA+0x9a>
 8006796:	2302      	movs	r3, #2
 8006798:	e0fa      	b.n	8006990 <HAL_I2C_Mem_Write_DMA+0x290>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d007      	beq.n	80067c0 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f042 0201 	orr.w	r2, r2, #1
 80067be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2221      	movs	r2, #33	; 0x21
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2240      	movs	r2, #64	; 0x40
 80067dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80067f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4a68      	ldr	r2, [pc, #416]	; (80069a0 <HAL_I2C_Mem_Write_DMA+0x2a0>)
 8006800:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006802:	897a      	ldrh	r2, [r7, #10]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8006808:	893a      	ldrh	r2, [r7, #8]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800680e:	88fa      	ldrh	r2, [r7, #6]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 80a1 	beq.w	8006966 <HAL_I2C_Mem_Write_DMA+0x266>
    {
      if (hi2c->hdmatx != NULL)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006828:	2b00      	cmp	r3, #0
 800682a:	d022      	beq.n	8006872 <HAL_I2C_Mem_Write_DMA+0x172>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006830:	4a5c      	ldr	r2, [pc, #368]	; (80069a4 <HAL_I2C_Mem_Write_DMA+0x2a4>)
 8006832:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006838:	4a5b      	ldr	r2, [pc, #364]	; (80069a8 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 800683a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006840:	2200      	movs	r2, #0
 8006842:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006848:	2200      	movs	r2, #0
 800684a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	4619      	mov	r1, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3310      	adds	r3, #16
 800685c:	461a      	mov	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006862:	f7fe ff41 	bl	80056e8 <HAL_DMA_Start_IT>
 8006866:	4603      	mov	r3, r0
 8006868:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800686a:	7efb      	ldrb	r3, [r7, #27]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d166      	bne.n	800693e <HAL_I2C_Mem_Write_DMA+0x23e>
 8006870:	e013      	b.n	800689a <HAL_I2C_Mem_Write_DMA+0x19a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2220      	movs	r2, #32
 8006876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e07a      	b.n	8006990 <HAL_I2C_Mem_Write_DMA+0x290>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800689a:	88f8      	ldrh	r0, [r7, #6]
 800689c:	893a      	ldrh	r2, [r7, #8]
 800689e:	8979      	ldrh	r1, [r7, #10]
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	9301      	str	r3, [sp, #4]
 80068a4:	2323      	movs	r3, #35	; 0x23
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	4603      	mov	r3, r0
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f001 fc72 	bl	8008194 <I2C_RequestMemoryWrite>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d022      	beq.n	80068fc <HAL_I2C_Mem_Write_DMA+0x1fc>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fe ff74 	bl	80057a8 <HAL_DMA_Abort_IT>
 80068c0:	4603      	mov	r3, r0
 80068c2:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c8:	2200      	movs	r2, #0
 80068ca:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068da:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 0201 	bic.w	r2, r2, #1
 80068f6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e049      	b.n	8006990 <HAL_I2C_Mem_Write_DMA+0x290>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068fc:	2300      	movs	r3, #0
 80068fe:	613b      	str	r3, [r7, #16]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	613b      	str	r3, [r7, #16]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	613b      	str	r3, [r7, #16]
 8006910:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006928:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006938:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	e028      	b.n	8006990 <HAL_I2C_Mem_Write_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2220      	movs	r2, #32
 8006942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	f043 0210 	orr.w	r2, r3, #16
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e014      	b.n	8006990 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2220      	movs	r2, #32
 800696a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e000      	b.n	8006990 <HAL_I2C_Mem_Write_DMA+0x290>
    }
  }
  else
  {
    return HAL_BUSY;
 800698e:	2302      	movs	r3, #2
  }
}
 8006990:	4618      	mov	r0, r3
 8006992:	3720      	adds	r7, #32
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	200004ec 	.word	0x200004ec
 800699c:	14f8b589 	.word	0x14f8b589
 80069a0:	ffff0000 	.word	0xffff0000
 80069a4:	080082c1 	.word	0x080082c1
 80069a8:	0800846b 	.word	0x0800846b

080069ac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b08a      	sub	sp, #40	; 0x28
 80069b0:	af02      	add	r7, sp, #8
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	607a      	str	r2, [r7, #4]
 80069b6:	603b      	str	r3, [r7, #0]
 80069b8:	460b      	mov	r3, r1
 80069ba:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80069bc:	f7fe f862 	bl	8004a84 <HAL_GetTick>
 80069c0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80069c2:	2300      	movs	r3, #0
 80069c4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b20      	cmp	r3, #32
 80069d0:	f040 8111 	bne.w	8006bf6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	2319      	movs	r3, #25
 80069da:	2201      	movs	r2, #1
 80069dc:	4988      	ldr	r1, [pc, #544]	; (8006c00 <HAL_I2C_IsDeviceReady+0x254>)
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f001 fe22 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80069ea:	2302      	movs	r3, #2
 80069ec:	e104      	b.n	8006bf8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d101      	bne.n	80069fc <HAL_I2C_IsDeviceReady+0x50>
 80069f8:	2302      	movs	r3, #2
 80069fa:	e0fd      	b.n	8006bf8 <HAL_I2C_IsDeviceReady+0x24c>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d007      	beq.n	8006a22 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f042 0201 	orr.w	r2, r2, #1
 8006a20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2224      	movs	r2, #36	; 0x24
 8006a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4a70      	ldr	r2, [pc, #448]	; (8006c04 <HAL_I2C_IsDeviceReady+0x258>)
 8006a44:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a54:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f001 fde0 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00d      	beq.n	8006a8a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a7c:	d103      	bne.n	8006a86 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a84:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e0b6      	b.n	8006bf8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a8a:	897b      	ldrh	r3, [r7, #10]
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	461a      	mov	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a98:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006a9a:	f7fd fff3 	bl	8004a84 <HAL_GetTick>
 8006a9e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	bf0c      	ite	eq
 8006aae:	2301      	moveq	r3, #1
 8006ab0:	2300      	movne	r3, #0
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ac4:	bf0c      	ite	eq
 8006ac6:	2301      	moveq	r3, #1
 8006ac8:	2300      	movne	r3, #0
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006ace:	e025      	b.n	8006b1c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006ad0:	f7fd ffd8 	bl	8004a84 <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d302      	bcc.n	8006ae6 <HAL_I2C_IsDeviceReady+0x13a>
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d103      	bne.n	8006aee <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	22a0      	movs	r2, #160	; 0xa0
 8006aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	bf0c      	ite	eq
 8006afc:	2301      	moveq	r3, #1
 8006afe:	2300      	movne	r3, #0
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b12:	bf0c      	ite	eq
 8006b14:	2301      	moveq	r3, #1
 8006b16:	2300      	movne	r3, #0
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2ba0      	cmp	r3, #160	; 0xa0
 8006b26:	d005      	beq.n	8006b34 <HAL_I2C_IsDeviceReady+0x188>
 8006b28:	7dfb      	ldrb	r3, [r7, #23]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d102      	bne.n	8006b34 <HAL_I2C_IsDeviceReady+0x188>
 8006b2e:	7dbb      	ldrb	r3, [r7, #22]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0cd      	beq.n	8006ad0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2220      	movs	r2, #32
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d129      	bne.n	8006b9e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b58:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	613b      	str	r3, [r7, #16]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	613b      	str	r3, [r7, #16]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	613b      	str	r3, [r7, #16]
 8006b6e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	2319      	movs	r3, #25
 8006b76:	2201      	movs	r2, #1
 8006b78:	4921      	ldr	r1, [pc, #132]	; (8006c00 <HAL_I2C_IsDeviceReady+0x254>)
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f001 fd54 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e036      	b.n	8006bf8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	e02c      	b.n	8006bf8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bac:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006bb6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	9300      	str	r3, [sp, #0]
 8006bbc:	2319      	movs	r3, #25
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	490f      	ldr	r1, [pc, #60]	; (8006c00 <HAL_I2C_IsDeviceReady+0x254>)
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f001 fd30 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e012      	b.n	8006bf8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	f4ff af32 	bcc.w	8006a46 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2220      	movs	r2, #32
 8006be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e000      	b.n	8006bf8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006bf6:	2302      	movs	r3, #2
  }
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3720      	adds	r7, #32
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	00100002 	.word	0x00100002
 8006c04:	ffff0000 	.word	0xffff0000

08006c08 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b088      	sub	sp, #32
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c20:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c28:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c30:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
 8006c34:	2b10      	cmp	r3, #16
 8006c36:	d003      	beq.n	8006c40 <HAL_I2C_EV_IRQHandler+0x38>
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
 8006c3a:	2b40      	cmp	r3, #64	; 0x40
 8006c3c:	f040 80c1 	bne.w	8006dc2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10d      	bne.n	8006c76 <HAL_I2C_EV_IRQHandler+0x6e>
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006c60:	d003      	beq.n	8006c6a <HAL_I2C_EV_IRQHandler+0x62>
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006c68:	d101      	bne.n	8006c6e <HAL_I2C_EV_IRQHandler+0x66>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e000      	b.n	8006c70 <HAL_I2C_EV_IRQHandler+0x68>
 8006c6e:	2300      	movs	r3, #0
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	f000 8132 	beq.w	8006eda <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00c      	beq.n	8006c9a <HAL_I2C_EV_IRQHandler+0x92>
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	0a5b      	lsrs	r3, r3, #9
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d006      	beq.n	8006c9a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f001 fed5 	bl	8008a3c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fccd 	bl	8007632 <I2C_Master_SB>
 8006c98:	e092      	b.n	8006dc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	08db      	lsrs	r3, r3, #3
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d009      	beq.n	8006cba <HAL_I2C_EV_IRQHandler+0xb2>
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	0a5b      	lsrs	r3, r3, #9
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fd42 	bl	800773c <I2C_Master_ADD10>
 8006cb8:	e082      	b.n	8006dc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	085b      	lsrs	r3, r3, #1
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d009      	beq.n	8006cda <HAL_I2C_EV_IRQHandler+0xd2>
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	0a5b      	lsrs	r3, r3, #9
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fd5b 	bl	800778e <I2C_Master_ADDR>
 8006cd8:	e072      	b.n	8006dc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	089b      	lsrs	r3, r3, #2
 8006cde:	f003 0301 	and.w	r3, r3, #1
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d03b      	beq.n	8006d5e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cf4:	f000 80f3 	beq.w	8006ede <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	09db      	lsrs	r3, r3, #7
 8006cfc:	f003 0301 	and.w	r3, r3, #1
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00f      	beq.n	8006d24 <HAL_I2C_EV_IRQHandler+0x11c>
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	0a9b      	lsrs	r3, r3, #10
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d009      	beq.n	8006d24 <HAL_I2C_EV_IRQHandler+0x11c>
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	089b      	lsrs	r3, r3, #2
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d103      	bne.n	8006d24 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f939 	bl	8006f94 <I2C_MasterTransmit_TXE>
 8006d22:	e04d      	b.n	8006dc0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	089b      	lsrs	r3, r3, #2
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 80d6 	beq.w	8006ede <HAL_I2C_EV_IRQHandler+0x2d6>
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	0a5b      	lsrs	r3, r3, #9
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 80cf 	beq.w	8006ede <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006d40:	7bbb      	ldrb	r3, [r7, #14]
 8006d42:	2b21      	cmp	r3, #33	; 0x21
 8006d44:	d103      	bne.n	8006d4e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f9c0 	bl	80070cc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d4c:	e0c7      	b.n	8006ede <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	2b40      	cmp	r3, #64	; 0x40
 8006d52:	f040 80c4 	bne.w	8006ede <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fa2e 	bl	80071b8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d5c:	e0bf      	b.n	8006ede <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d6c:	f000 80b7 	beq.w	8006ede <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	099b      	lsrs	r3, r3, #6
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00f      	beq.n	8006d9c <HAL_I2C_EV_IRQHandler+0x194>
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	0a9b      	lsrs	r3, r3, #10
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d009      	beq.n	8006d9c <HAL_I2C_EV_IRQHandler+0x194>
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	089b      	lsrs	r3, r3, #2
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d103      	bne.n	8006d9c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 faa7 	bl	80072e8 <I2C_MasterReceive_RXNE>
 8006d9a:	e011      	b.n	8006dc0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	089b      	lsrs	r3, r3, #2
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 809a 	beq.w	8006ede <HAL_I2C_EV_IRQHandler+0x2d6>
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	0a5b      	lsrs	r3, r3, #9
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f000 8093 	beq.w	8006ede <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fb50 	bl	800745e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006dbe:	e08e      	b.n	8006ede <HAL_I2C_EV_IRQHandler+0x2d6>
 8006dc0:	e08d      	b.n	8006ede <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d004      	beq.n	8006dd4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	61fb      	str	r3, [r7, #28]
 8006dd2:	e007      	b.n	8006de4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	085b      	lsrs	r3, r3, #1
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d012      	beq.n	8006e16 <HAL_I2C_EV_IRQHandler+0x20e>
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	0a5b      	lsrs	r3, r3, #9
 8006df4:	f003 0301 	and.w	r3, r3, #1
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00c      	beq.n	8006e16 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d003      	beq.n	8006e0c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006e0c:	69b9      	ldr	r1, [r7, #24]
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 ff14 	bl	8007c3c <I2C_Slave_ADDR>
 8006e14:	e066      	b.n	8006ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	091b      	lsrs	r3, r3, #4
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d009      	beq.n	8006e36 <HAL_I2C_EV_IRQHandler+0x22e>
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	0a5b      	lsrs	r3, r3, #9
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 ff4e 	bl	8007cd0 <I2C_Slave_STOPF>
 8006e34:	e056      	b.n	8006ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006e36:	7bbb      	ldrb	r3, [r7, #14]
 8006e38:	2b21      	cmp	r3, #33	; 0x21
 8006e3a:	d002      	beq.n	8006e42 <HAL_I2C_EV_IRQHandler+0x23a>
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	2b29      	cmp	r3, #41	; 0x29
 8006e40:	d125      	bne.n	8006e8e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	09db      	lsrs	r3, r3, #7
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00f      	beq.n	8006e6e <HAL_I2C_EV_IRQHandler+0x266>
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	0a9b      	lsrs	r3, r3, #10
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d009      	beq.n	8006e6e <HAL_I2C_EV_IRQHandler+0x266>
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	089b      	lsrs	r3, r3, #2
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d103      	bne.n	8006e6e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fe2c 	bl	8007ac4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e6c:	e039      	b.n	8006ee2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	089b      	lsrs	r3, r3, #2
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d033      	beq.n	8006ee2 <HAL_I2C_EV_IRQHandler+0x2da>
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	0a5b      	lsrs	r3, r3, #9
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d02d      	beq.n	8006ee2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fe59 	bl	8007b3e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e8c:	e029      	b.n	8006ee2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	099b      	lsrs	r3, r3, #6
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00f      	beq.n	8006eba <HAL_I2C_EV_IRQHandler+0x2b2>
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	0a9b      	lsrs	r3, r3, #10
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d009      	beq.n	8006eba <HAL_I2C_EV_IRQHandler+0x2b2>
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	089b      	lsrs	r3, r3, #2
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d103      	bne.n	8006eba <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fe63 	bl	8007b7e <I2C_SlaveReceive_RXNE>
 8006eb8:	e014      	b.n	8006ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	089b      	lsrs	r3, r3, #2
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00e      	beq.n	8006ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	0a5b      	lsrs	r3, r3, #9
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d008      	beq.n	8006ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fe91 	bl	8007bfa <I2C_SlaveReceive_BTF>
 8006ed8:	e004      	b.n	8006ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006eda:	bf00      	nop
 8006edc:	e002      	b.n	8006ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ede:	bf00      	nop
 8006ee0:	e000      	b.n	8006ee4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006ee2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006ee4:	3720      	adds	r7, #32
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b083      	sub	sp, #12
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006ef2:	bf00      	nop
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bc80      	pop	{r7}
 8006efa:	4770      	bx	lr

08006efc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bc80      	pop	{r7}
 8006f0c:	4770      	bx	lr

08006f0e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006f16:	bf00      	nop
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bc80      	pop	{r7}
 8006f1e:	4770      	bx	lr

08006f20 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bc80      	pop	{r7}
 8006f30:	4770      	bx	lr

08006f32 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b083      	sub	sp, #12
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	70fb      	strb	r3, [r7, #3]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006f42:	bf00      	nop
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bc80      	pop	{r7}
 8006f4a:	4770      	bx	lr

08006f4c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bc80      	pop	{r7}
 8006f5c:	4770      	bx	lr

08006f5e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b083      	sub	sp, #12
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006f66:	bf00      	nop
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bc80      	pop	{r7}
 8006f6e:	4770      	bx	lr

08006f70 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bc80      	pop	{r7}
 8006f80:	4770      	bx	lr

08006f82 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b083      	sub	sp, #12
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006f8a:	bf00      	nop
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bc80      	pop	{r7}
 8006f92:	4770      	bx	lr

08006f94 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006faa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d150      	bne.n	800705c <I2C_MasterTransmit_TXE+0xc8>
 8006fba:	7bfb      	ldrb	r3, [r7, #15]
 8006fbc:	2b21      	cmp	r3, #33	; 0x21
 8006fbe:	d14d      	bne.n	800705c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2b08      	cmp	r3, #8
 8006fc4:	d01d      	beq.n	8007002 <I2C_MasterTransmit_TXE+0x6e>
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	2b20      	cmp	r3, #32
 8006fca:	d01a      	beq.n	8007002 <I2C_MasterTransmit_TXE+0x6e>
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fd2:	d016      	beq.n	8007002 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fe2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2211      	movs	r2, #17
 8006fe8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7ff ff75 	bl	8006eea <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007000:	e060      	b.n	80070c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685a      	ldr	r2, [r3, #4]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007010:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007020:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2220      	movs	r2, #32
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007036:	b2db      	uxtb	r3, r3
 8007038:	2b40      	cmp	r3, #64	; 0x40
 800703a:	d107      	bne.n	800704c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7fb ff5b 	bl	8002f00 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800704a:	e03b      	b.n	80070c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7ff ff48 	bl	8006eea <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800705a:	e033      	b.n	80070c4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800705c:	7bfb      	ldrb	r3, [r7, #15]
 800705e:	2b21      	cmp	r3, #33	; 0x21
 8007060:	d005      	beq.n	800706e <I2C_MasterTransmit_TXE+0xda>
 8007062:	7bbb      	ldrb	r3, [r7, #14]
 8007064:	2b40      	cmp	r3, #64	; 0x40
 8007066:	d12d      	bne.n	80070c4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007068:	7bfb      	ldrb	r3, [r7, #15]
 800706a:	2b22      	cmp	r3, #34	; 0x22
 800706c:	d12a      	bne.n	80070c4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007072:	b29b      	uxth	r3, r3
 8007074:	2b00      	cmp	r3, #0
 8007076:	d108      	bne.n	800708a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007086:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007088:	e01c      	b.n	80070c4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007090:	b2db      	uxtb	r3, r3
 8007092:	2b40      	cmp	r3, #64	; 0x40
 8007094:	d103      	bne.n	800709e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f88e 	bl	80071b8 <I2C_MemoryTransmit_TXE_BTF>
}
 800709c:	e012      	b.n	80070c4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a2:	781a      	ldrb	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	1c5a      	adds	r2, r3, #1
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b29a      	uxth	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80070c2:	e7ff      	b.n	80070c4 <I2C_MasterTransmit_TXE+0x130>
 80070c4:	bf00      	nop
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b21      	cmp	r3, #33	; 0x21
 80070e4:	d164      	bne.n	80071b0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d012      	beq.n	8007116 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f4:	781a      	ldrb	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800710a:	b29b      	uxth	r3, r3
 800710c:	3b01      	subs	r3, #1
 800710e:	b29a      	uxth	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007114:	e04c      	b.n	80071b0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2b08      	cmp	r3, #8
 800711a:	d01d      	beq.n	8007158 <I2C_MasterTransmit_BTF+0x8c>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2b20      	cmp	r3, #32
 8007120:	d01a      	beq.n	8007158 <I2C_MasterTransmit_BTF+0x8c>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007128:	d016      	beq.n	8007158 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007138:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2211      	movs	r2, #17
 800713e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2220      	movs	r2, #32
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7ff feca 	bl	8006eea <HAL_I2C_MasterTxCpltCallback>
}
 8007156:	e02b      	b.n	80071b0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007166:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007176:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2220      	movs	r2, #32
 8007182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b40      	cmp	r3, #64	; 0x40
 8007190:	d107      	bne.n	80071a2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7fb feb0 	bl	8002f00 <HAL_I2C_MemTxCpltCallback>
}
 80071a0:	e006      	b.n	80071b0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7ff fe9d 	bl	8006eea <HAL_I2C_MasterTxCpltCallback>
}
 80071b0:	bf00      	nop
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d11d      	bne.n	800720c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d10b      	bne.n	80071f0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071dc:	b2da      	uxtb	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e8:	1c9a      	adds	r2, r3, #2
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80071ee:	e077      	b.n	80072e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	121b      	asrs	r3, r3, #8
 80071f8:	b2da      	uxtb	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007204:	1c5a      	adds	r2, r3, #1
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	651a      	str	r2, [r3, #80]	; 0x50
}
 800720a:	e069      	b.n	80072e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007210:	2b01      	cmp	r3, #1
 8007212:	d10b      	bne.n	800722c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007218:	b2da      	uxtb	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007224:	1c5a      	adds	r2, r3, #1
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	651a      	str	r2, [r3, #80]	; 0x50
}
 800722a:	e059      	b.n	80072e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007230:	2b02      	cmp	r3, #2
 8007232:	d152      	bne.n	80072da <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007234:	7bfb      	ldrb	r3, [r7, #15]
 8007236:	2b22      	cmp	r3, #34	; 0x22
 8007238:	d10d      	bne.n	8007256 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007248:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007254:	e044      	b.n	80072e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800725a:	b29b      	uxth	r3, r3
 800725c:	2b00      	cmp	r3, #0
 800725e:	d015      	beq.n	800728c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007260:	7bfb      	ldrb	r3, [r7, #15]
 8007262:	2b21      	cmp	r3, #33	; 0x21
 8007264:	d112      	bne.n	800728c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726a:	781a      	ldrb	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007276:	1c5a      	adds	r2, r3, #1
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007280:	b29b      	uxth	r3, r3
 8007282:	3b01      	subs	r3, #1
 8007284:	b29a      	uxth	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800728a:	e029      	b.n	80072e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007290:	b29b      	uxth	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d124      	bne.n	80072e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8007296:	7bfb      	ldrb	r3, [r7, #15]
 8007298:	2b21      	cmp	r3, #33	; 0x21
 800729a:	d121      	bne.n	80072e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80072aa:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7fb fe14 	bl	8002f00 <HAL_I2C_MemTxCpltCallback>
}
 80072d8:	e002      	b.n	80072e0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7ff f902 	bl	80064e4 <I2C_Flush_DR>
}
 80072e0:	bf00      	nop
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b22      	cmp	r3, #34	; 0x22
 80072fa:	f040 80ac 	bne.w	8007456 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007302:	b29b      	uxth	r3, r3
 8007304:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2b03      	cmp	r3, #3
 800730a:	d921      	bls.n	8007350 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	691a      	ldr	r2, [r3, #16]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007316:	b2d2      	uxtb	r2, r2
 8007318:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007328:	b29b      	uxth	r3, r3
 800732a:	3b01      	subs	r3, #1
 800732c:	b29a      	uxth	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007336:	b29b      	uxth	r3, r3
 8007338:	2b03      	cmp	r3, #3
 800733a:	f040 808c 	bne.w	8007456 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800734c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800734e:	e082      	b.n	8007456 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	2b02      	cmp	r3, #2
 8007356:	d075      	beq.n	8007444 <I2C_MasterReceive_RXNE+0x15c>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d002      	beq.n	8007364 <I2C_MasterReceive_RXNE+0x7c>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d16f      	bne.n	8007444 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f001 fb09 	bl	800897c <I2C_WaitOnSTOPRequestThroughIT>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d142      	bne.n	80073f6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800737e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800738e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	691a      	ldr	r2, [r3, #16]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739a:	b2d2      	uxtb	r2, r2
 800739c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a2:	1c5a      	adds	r2, r3, #1
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	3b01      	subs	r3, #1
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2220      	movs	r2, #32
 80073ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b40      	cmp	r3, #64	; 0x40
 80073c8:	d10a      	bne.n	80073e0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f7ff fdc0 	bl	8006f5e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80073de:	e03a      	b.n	8007456 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2212      	movs	r2, #18
 80073ec:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f7ff fd84 	bl	8006efc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80073f4:	e02f      	b.n	8007456 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007404:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	691a      	ldr	r2, [r3, #16]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	b2d2      	uxtb	r2, r2
 8007412:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007422:	b29b      	uxth	r3, r3
 8007424:	3b01      	subs	r3, #1
 8007426:	b29a      	uxth	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2220      	movs	r2, #32
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7ff fd97 	bl	8006f70 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007442:	e008      	b.n	8007456 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007452:	605a      	str	r2, [r3, #4]
}
 8007454:	e7ff      	b.n	8007456 <I2C_MasterReceive_RXNE+0x16e>
 8007456:	bf00      	nop
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b084      	sub	sp, #16
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007470:	b29b      	uxth	r3, r3
 8007472:	2b04      	cmp	r3, #4
 8007474:	d11b      	bne.n	80074ae <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007484:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	691a      	ldr	r2, [r3, #16]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	b2d2      	uxtb	r2, r2
 8007492:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	3b01      	subs	r3, #1
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80074ac:	e0bd      	b.n	800762a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d129      	bne.n	800750c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074c6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2b04      	cmp	r3, #4
 80074cc:	d00a      	beq.n	80074e4 <I2C_MasterReceive_BTF+0x86>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d007      	beq.n	80074e4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074e2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	691a      	ldr	r2, [r3, #16]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ee:	b2d2      	uxtb	r2, r2
 80074f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f6:	1c5a      	adds	r2, r3, #1
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007500:	b29b      	uxth	r3, r3
 8007502:	3b01      	subs	r3, #1
 8007504:	b29a      	uxth	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800750a:	e08e      	b.n	800762a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007510:	b29b      	uxth	r3, r3
 8007512:	2b02      	cmp	r3, #2
 8007514:	d176      	bne.n	8007604 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d002      	beq.n	8007522 <I2C_MasterReceive_BTF+0xc4>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2b10      	cmp	r3, #16
 8007520:	d108      	bne.n	8007534 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	e019      	b.n	8007568 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b04      	cmp	r3, #4
 8007538:	d002      	beq.n	8007540 <I2C_MasterReceive_BTF+0xe2>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2b02      	cmp	r3, #2
 800753e:	d108      	bne.n	8007552 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800754e:	601a      	str	r2, [r3, #0]
 8007550:	e00a      	b.n	8007568 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2b10      	cmp	r3, #16
 8007556:	d007      	beq.n	8007568 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007566:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	691a      	ldr	r2, [r3, #16]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007572:	b2d2      	uxtb	r2, r2
 8007574:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007584:	b29b      	uxth	r3, r3
 8007586:	3b01      	subs	r3, #1
 8007588:	b29a      	uxth	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	691a      	ldr	r2, [r3, #16]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	b2d2      	uxtb	r2, r2
 800759a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a0:	1c5a      	adds	r2, r3, #1
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	3b01      	subs	r3, #1
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	685a      	ldr	r2, [r3, #4]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80075c2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2220      	movs	r2, #32
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b40      	cmp	r3, #64	; 0x40
 80075d6:	d10a      	bne.n	80075ee <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7ff fcb9 	bl	8006f5e <HAL_I2C_MemRxCpltCallback>
}
 80075ec:	e01d      	b.n	800762a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2212      	movs	r2, #18
 80075fa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7ff fc7d 	bl	8006efc <HAL_I2C_MasterRxCpltCallback>
}
 8007602:	e012      	b.n	800762a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	691a      	ldr	r2, [r3, #16]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760e:	b2d2      	uxtb	r2, r2
 8007610:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007620:	b29b      	uxth	r3, r3
 8007622:	3b01      	subs	r3, #1
 8007624:	b29a      	uxth	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800762a:	bf00      	nop
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b40      	cmp	r3, #64	; 0x40
 8007644:	d117      	bne.n	8007676 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800764a:	2b00      	cmp	r3, #0
 800764c:	d109      	bne.n	8007662 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007652:	b2db      	uxtb	r3, r3
 8007654:	461a      	mov	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800765e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007660:	e067      	b.n	8007732 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007666:	b2db      	uxtb	r3, r3
 8007668:	f043 0301 	orr.w	r3, r3, #1
 800766c:	b2da      	uxtb	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	611a      	str	r2, [r3, #16]
}
 8007674:	e05d      	b.n	8007732 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800767e:	d133      	bne.n	80076e8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b21      	cmp	r3, #33	; 0x21
 800768a:	d109      	bne.n	80076a0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007690:	b2db      	uxtb	r3, r3
 8007692:	461a      	mov	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800769c:	611a      	str	r2, [r3, #16]
 800769e:	e008      	b.n	80076b2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	f043 0301 	orr.w	r3, r3, #1
 80076aa:	b2da      	uxtb	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d004      	beq.n	80076c4 <I2C_Master_SB+0x92>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d108      	bne.n	80076d6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d032      	beq.n	8007732 <I2C_Master_SB+0x100>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d02d      	beq.n	8007732 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076e4:	605a      	str	r2, [r3, #4]
}
 80076e6:	e024      	b.n	8007732 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10e      	bne.n	800770e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	11db      	asrs	r3, r3, #7
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	f003 0306 	and.w	r3, r3, #6
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	f063 030f 	orn	r3, r3, #15
 8007704:	b2da      	uxtb	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	611a      	str	r2, [r3, #16]
}
 800770c:	e011      	b.n	8007732 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007712:	2b01      	cmp	r3, #1
 8007714:	d10d      	bne.n	8007732 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800771a:	b29b      	uxth	r3, r3
 800771c:	11db      	asrs	r3, r3, #7
 800771e:	b2db      	uxtb	r3, r3
 8007720:	f003 0306 	and.w	r3, r3, #6
 8007724:	b2db      	uxtb	r3, r3
 8007726:	f063 030e 	orn	r3, r3, #14
 800772a:	b2da      	uxtb	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	611a      	str	r2, [r3, #16]
}
 8007732:	bf00      	nop
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	bc80      	pop	{r7}
 800773a:	4770      	bx	lr

0800773c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007748:	b2da      	uxtb	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007754:	2b00      	cmp	r3, #0
 8007756:	d004      	beq.n	8007762 <I2C_Master_ADD10+0x26>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800775c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775e:	2b00      	cmp	r3, #0
 8007760:	d108      	bne.n	8007774 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00c      	beq.n	8007784 <I2C_Master_ADD10+0x48>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007770:	2b00      	cmp	r3, #0
 8007772:	d007      	beq.n	8007784 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007782:	605a      	str	r2, [r3, #4]
  }
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	bc80      	pop	{r7}
 800778c:	4770      	bx	lr

0800778e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800778e:	b480      	push	{r7}
 8007790:	b091      	sub	sp, #68	; 0x44
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800779c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077aa:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b22      	cmp	r3, #34	; 0x22
 80077b6:	f040 8174 	bne.w	8007aa2 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10f      	bne.n	80077e2 <I2C_Master_ADDR+0x54>
 80077c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80077c6:	2b40      	cmp	r3, #64	; 0x40
 80077c8:	d10b      	bne.n	80077e2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077ca:	2300      	movs	r3, #0
 80077cc:	633b      	str	r3, [r7, #48]	; 0x30
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	633b      	str	r3, [r7, #48]	; 0x30
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	633b      	str	r3, [r7, #48]	; 0x30
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e0:	e16b      	b.n	8007aba <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d11d      	bne.n	8007826 <I2C_Master_ADDR+0x98>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80077f2:	d118      	bne.n	8007826 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077f4:	2300      	movs	r3, #0
 80077f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007808:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007818:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800781e:	1c5a      	adds	r2, r3, #1
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	651a      	str	r2, [r3, #80]	; 0x50
 8007824:	e149      	b.n	8007aba <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800782a:	b29b      	uxth	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	d113      	bne.n	8007858 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007830:	2300      	movs	r3, #0
 8007832:	62bb      	str	r3, [r7, #40]	; 0x28
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	62bb      	str	r3, [r7, #40]	; 0x28
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	62bb      	str	r3, [r7, #40]	; 0x28
 8007844:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007854:	601a      	str	r2, [r3, #0]
 8007856:	e120      	b.n	8007a9a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800785c:	b29b      	uxth	r3, r3
 800785e:	2b01      	cmp	r3, #1
 8007860:	f040 808a 	bne.w	8007978 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007866:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800786a:	d137      	bne.n	80078dc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800787a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800788a:	d113      	bne.n	80078b4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800789a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800789c:	2300      	movs	r3, #0
 800789e:	627b      	str	r3, [r7, #36]	; 0x24
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	627b      	str	r3, [r7, #36]	; 0x24
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	627b      	str	r3, [r7, #36]	; 0x24
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	e0f2      	b.n	8007a9a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078b4:	2300      	movs	r3, #0
 80078b6:	623b      	str	r3, [r7, #32]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	623b      	str	r3, [r7, #32]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	623b      	str	r3, [r7, #32]
 80078c8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078d8:	601a      	str	r2, [r3, #0]
 80078da:	e0de      	b.n	8007a9a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80078dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078de:	2b08      	cmp	r3, #8
 80078e0:	d02e      	beq.n	8007940 <I2C_Master_ADDR+0x1b2>
 80078e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e4:	2b20      	cmp	r3, #32
 80078e6:	d02b      	beq.n	8007940 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80078e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ea:	2b12      	cmp	r3, #18
 80078ec:	d102      	bne.n	80078f4 <I2C_Master_ADDR+0x166>
 80078ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d125      	bne.n	8007940 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80078f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f6:	2b04      	cmp	r3, #4
 80078f8:	d00e      	beq.n	8007918 <I2C_Master_ADDR+0x18a>
 80078fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fc:	2b02      	cmp	r3, #2
 80078fe:	d00b      	beq.n	8007918 <I2C_Master_ADDR+0x18a>
 8007900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007902:	2b10      	cmp	r3, #16
 8007904:	d008      	beq.n	8007918 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007914:	601a      	str	r2, [r3, #0]
 8007916:	e007      	b.n	8007928 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007926:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007928:	2300      	movs	r3, #0
 800792a:	61fb      	str	r3, [r7, #28]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	61fb      	str	r3, [r7, #28]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	61fb      	str	r3, [r7, #28]
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	e0ac      	b.n	8007a9a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800794e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007950:	2300      	movs	r3, #0
 8007952:	61bb      	str	r3, [r7, #24]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	61bb      	str	r3, [r7, #24]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	61bb      	str	r3, [r7, #24]
 8007964:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007974:	601a      	str	r2, [r3, #0]
 8007976:	e090      	b.n	8007a9a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800797c:	b29b      	uxth	r3, r3
 800797e:	2b02      	cmp	r3, #2
 8007980:	d158      	bne.n	8007a34 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007984:	2b04      	cmp	r3, #4
 8007986:	d021      	beq.n	80079cc <I2C_Master_ADDR+0x23e>
 8007988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798a:	2b02      	cmp	r3, #2
 800798c:	d01e      	beq.n	80079cc <I2C_Master_ADDR+0x23e>
 800798e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007990:	2b10      	cmp	r3, #16
 8007992:	d01b      	beq.n	80079cc <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079a2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079a4:	2300      	movs	r3, #0
 80079a6:	617b      	str	r3, [r7, #20]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	617b      	str	r3, [r7, #20]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	617b      	str	r3, [r7, #20]
 80079b8:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	e012      	b.n	80079f2 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079da:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079dc:	2300      	movs	r3, #0
 80079de:	613b      	str	r3, [r7, #16]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	613b      	str	r3, [r7, #16]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	613b      	str	r3, [r7, #16]
 80079f0:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a00:	d14b      	bne.n	8007a9a <I2C_Master_ADDR+0x30c>
 8007a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a08:	d00b      	beq.n	8007a22 <I2C_Master_ADDR+0x294>
 8007a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d008      	beq.n	8007a22 <I2C_Master_ADDR+0x294>
 8007a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a12:	2b08      	cmp	r3, #8
 8007a14:	d005      	beq.n	8007a22 <I2C_Master_ADDR+0x294>
 8007a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a18:	2b10      	cmp	r3, #16
 8007a1a:	d002      	beq.n	8007a22 <I2C_Master_ADDR+0x294>
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1e:	2b20      	cmp	r3, #32
 8007a20:	d13b      	bne.n	8007a9a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	685a      	ldr	r2, [r3, #4]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a30:	605a      	str	r2, [r3, #4]
 8007a32:	e032      	b.n	8007a9a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a42:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a52:	d117      	bne.n	8007a84 <I2C_Master_ADDR+0x2f6>
 8007a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a5a:	d00b      	beq.n	8007a74 <I2C_Master_ADDR+0x2e6>
 8007a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d008      	beq.n	8007a74 <I2C_Master_ADDR+0x2e6>
 8007a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a64:	2b08      	cmp	r3, #8
 8007a66:	d005      	beq.n	8007a74 <I2C_Master_ADDR+0x2e6>
 8007a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6a:	2b10      	cmp	r3, #16
 8007a6c:	d002      	beq.n	8007a74 <I2C_Master_ADDR+0x2e6>
 8007a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a70:	2b20      	cmp	r3, #32
 8007a72:	d107      	bne.n	8007a84 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	685a      	ldr	r2, [r3, #4]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a82:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a84:	2300      	movs	r3, #0
 8007a86:	60fb      	str	r3, [r7, #12]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	60fb      	str	r3, [r7, #12]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	60fb      	str	r3, [r7, #12]
 8007a98:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007aa0:	e00b      	b.n	8007aba <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60bb      	str	r3, [r7, #8]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	695b      	ldr	r3, [r3, #20]
 8007aac:	60bb      	str	r3, [r7, #8]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	60bb      	str	r3, [r7, #8]
 8007ab6:	68bb      	ldr	r3, [r7, #8]
}
 8007ab8:	e7ff      	b.n	8007aba <I2C_Master_ADDR+0x32c>
 8007aba:	bf00      	nop
 8007abc:	3744      	adds	r7, #68	; 0x44
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bc80      	pop	{r7}
 8007ac2:	4770      	bx	lr

08007ac4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ad2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d02b      	beq.n	8007b36 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae2:	781a      	ldrb	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	3b01      	subs	r3, #1
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d114      	bne.n	8007b36 <I2C_SlaveTransmit_TXE+0x72>
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
 8007b0e:	2b29      	cmp	r3, #41	; 0x29
 8007b10:	d111      	bne.n	8007b36 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	685a      	ldr	r2, [r3, #4]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b20:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2221      	movs	r2, #33	; 0x21
 8007b26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2228      	movs	r2, #40	; 0x28
 8007b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7ff f9ec 	bl	8006f0e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007b36:	bf00      	nop
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b083      	sub	sp, #12
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d011      	beq.n	8007b74 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b54:	781a      	ldrb	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bc80      	pop	{r7}
 8007b7c:	4770      	bx	lr

08007b7e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b8c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d02c      	beq.n	8007bf2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	691a      	ldr	r2, [r3, #16]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	b2d2      	uxtb	r2, r2
 8007ba4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007baa:	1c5a      	adds	r2, r3, #1
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d114      	bne.n	8007bf2 <I2C_SlaveReceive_RXNE+0x74>
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
 8007bca:	2b2a      	cmp	r3, #42	; 0x2a
 8007bcc:	d111      	bne.n	8007bf2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bdc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2222      	movs	r2, #34	; 0x22
 8007be2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2228      	movs	r2, #40	; 0x28
 8007be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f7ff f997 	bl	8006f20 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007bf2:	bf00      	nop
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b083      	sub	sp, #12
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d012      	beq.n	8007c32 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	691a      	ldr	r2, [r3, #16]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c16:	b2d2      	uxtb	r2, r2
 8007c18:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1e:	1c5a      	adds	r2, r3, #1
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007c32:	bf00      	nop
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bc80      	pop	{r7}
 8007c3a:	4770      	bx	lr

08007c3c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007c46:	2300      	movs	r3, #0
 8007c48:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007c56:	2b28      	cmp	r3, #40	; 0x28
 8007c58:	d127      	bne.n	8007caa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c68:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	089b      	lsrs	r3, r3, #2
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007c76:	2301      	movs	r3, #1
 8007c78:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	09db      	lsrs	r3, r3, #7
 8007c7e:	f003 0301 	and.w	r3, r3, #1
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d103      	bne.n	8007c8e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	81bb      	strh	r3, [r7, #12]
 8007c8c:	e002      	b.n	8007c94 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007c9c:	89ba      	ldrh	r2, [r7, #12]
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7ff f945 	bl	8006f32 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007ca8:	e00e      	b.n	8007cc8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007caa:	2300      	movs	r3, #0
 8007cac:	60bb      	str	r3, [r7, #8]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	60bb      	str	r3, [r7, #8]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	60bb      	str	r3, [r7, #8]
 8007cbe:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007cc8:	bf00      	nop
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cde:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685a      	ldr	r2, [r3, #4]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007cee:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60bb      	str	r3, [r7, #8]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	60bb      	str	r3, [r7, #8]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f042 0201 	orr.w	r2, r2, #1
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d1c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d2c:	d172      	bne.n	8007e14 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
 8007d30:	2b22      	cmp	r3, #34	; 0x22
 8007d32:	d002      	beq.n	8007d3a <I2C_Slave_STOPF+0x6a>
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
 8007d36:	2b2a      	cmp	r3, #42	; 0x2a
 8007d38:	d135      	bne.n	8007da6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d005      	beq.n	8007d5e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d56:	f043 0204 	orr.w	r2, r3, #4
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	685a      	ldr	r2, [r3, #4]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d6c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fe f85c 	bl	8005e30 <HAL_DMA_GetState>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d049      	beq.n	8007e12 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d82:	4a69      	ldr	r2, [pc, #420]	; (8007f28 <I2C_Slave_STOPF+0x258>)
 8007d84:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fd fd0c 	bl	80057a8 <HAL_DMA_Abort_IT>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d03d      	beq.n	8007e12 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007da0:	4610      	mov	r0, r2
 8007da2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007da4:	e035      	b.n	8007e12 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d005      	beq.n	8007dca <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc2:	f043 0204 	orr.w	r2, r3, #4
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dd8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fe f826 	bl	8005e30 <HAL_DMA_GetState>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d014      	beq.n	8007e14 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dee:	4a4e      	ldr	r2, [pc, #312]	; (8007f28 <I2C_Slave_STOPF+0x258>)
 8007df0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fd fcd6 	bl	80057a8 <HAL_DMA_Abort_IT>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d008      	beq.n	8007e14 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	4798      	blx	r3
 8007e10:	e000      	b.n	8007e14 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e12:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d03e      	beq.n	8007e9c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	f003 0304 	and.w	r3, r3, #4
 8007e28:	2b04      	cmp	r3, #4
 8007e2a:	d112      	bne.n	8007e52 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	691a      	ldr	r2, [r3, #16]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e36:	b2d2      	uxtb	r2, r2
 8007e38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3e:	1c5a      	adds	r2, r3, #1
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e5c:	2b40      	cmp	r3, #64	; 0x40
 8007e5e:	d112      	bne.n	8007e86 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	691a      	ldr	r2, [r3, #16]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6a:	b2d2      	uxtb	r2, r2
 8007e6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e72:	1c5a      	adds	r2, r3, #1
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d005      	beq.n	8007e9c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e94:	f043 0204 	orr.w	r2, r3, #4
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d003      	beq.n	8007eac <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f843 	bl	8007f30 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007eaa:	e039      	b.n	8007f20 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
 8007eae:	2b2a      	cmp	r3, #42	; 0x2a
 8007eb0:	d109      	bne.n	8007ec6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2228      	movs	r2, #40	; 0x28
 8007ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7ff f82d 	bl	8006f20 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b28      	cmp	r3, #40	; 0x28
 8007ed0:	d111      	bne.n	8007ef6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a15      	ldr	r2, [pc, #84]	; (8007f2c <I2C_Slave_STOPF+0x25c>)
 8007ed6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2220      	movs	r2, #32
 8007ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7ff f82c 	bl	8006f4c <HAL_I2C_ListenCpltCallback>
}
 8007ef4:	e014      	b.n	8007f20 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efa:	2b22      	cmp	r3, #34	; 0x22
 8007efc:	d002      	beq.n	8007f04 <I2C_Slave_STOPF+0x234>
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
 8007f00:	2b22      	cmp	r3, #34	; 0x22
 8007f02:	d10d      	bne.n	8007f20 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2220      	movs	r2, #32
 8007f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7ff f800 	bl	8006f20 <HAL_I2C_SlaveRxCpltCallback>
}
 8007f20:	bf00      	nop
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	080084d9 	.word	0x080084d9
 8007f2c:	ffff0000 	.word	0xffff0000

08007f30 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f3e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f46:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007f48:	7bbb      	ldrb	r3, [r7, #14]
 8007f4a:	2b10      	cmp	r3, #16
 8007f4c:	d002      	beq.n	8007f54 <I2C_ITError+0x24>
 8007f4e:	7bbb      	ldrb	r3, [r7, #14]
 8007f50:	2b40      	cmp	r3, #64	; 0x40
 8007f52:	d10a      	bne.n	8007f6a <I2C_ITError+0x3a>
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
 8007f56:	2b22      	cmp	r3, #34	; 0x22
 8007f58:	d107      	bne.n	8007f6a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f68:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f6a:	7bfb      	ldrb	r3, [r7, #15]
 8007f6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007f70:	2b28      	cmp	r3, #40	; 0x28
 8007f72:	d107      	bne.n	8007f84 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2228      	movs	r2, #40	; 0x28
 8007f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007f82:	e015      	b.n	8007fb0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f92:	d00a      	beq.n	8007faa <I2C_ITError+0x7a>
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
 8007f96:	2b60      	cmp	r3, #96	; 0x60
 8007f98:	d007      	beq.n	8007faa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2220      	movs	r2, #32
 8007f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fbe:	d162      	bne.n	8008086 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	685a      	ldr	r2, [r3, #4]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d020      	beq.n	8008020 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe2:	4a6a      	ldr	r2, [pc, #424]	; (800818c <I2C_ITError+0x25c>)
 8007fe4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fd fbdc 	bl	80057a8 <HAL_DMA_Abort_IT>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f000 8089 	beq.w	800810a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f022 0201 	bic.w	r2, r2, #1
 8008006:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2220      	movs	r2, #32
 800800c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800801a:	4610      	mov	r0, r2
 800801c:	4798      	blx	r3
 800801e:	e074      	b.n	800810a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008024:	4a59      	ldr	r2, [pc, #356]	; (800818c <I2C_ITError+0x25c>)
 8008026:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802c:	4618      	mov	r0, r3
 800802e:	f7fd fbbb 	bl	80057a8 <HAL_DMA_Abort_IT>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d068      	beq.n	800810a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008042:	2b40      	cmp	r3, #64	; 0x40
 8008044:	d10b      	bne.n	800805e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	691a      	ldr	r2, [r3, #16]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008050:	b2d2      	uxtb	r2, r2
 8008052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008058:	1c5a      	adds	r2, r3, #1
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f022 0201 	bic.w	r2, r2, #1
 800806c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2220      	movs	r2, #32
 8008072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008080:	4610      	mov	r0, r2
 8008082:	4798      	blx	r3
 8008084:	e041      	b.n	800810a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b60      	cmp	r3, #96	; 0x60
 8008090:	d125      	bne.n	80080de <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2220      	movs	r2, #32
 8008096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080aa:	2b40      	cmp	r3, #64	; 0x40
 80080ac:	d10b      	bne.n	80080c6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	691a      	ldr	r2, [r3, #16]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	b2d2      	uxtb	r2, r2
 80080ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	1c5a      	adds	r2, r3, #1
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f022 0201 	bic.w	r2, r2, #1
 80080d4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7fe ff53 	bl	8006f82 <HAL_I2C_AbortCpltCallback>
 80080dc:	e015      	b.n	800810a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	695b      	ldr	r3, [r3, #20]
 80080e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e8:	2b40      	cmp	r3, #64	; 0x40
 80080ea:	d10b      	bne.n	8008104 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	691a      	ldr	r2, [r3, #16]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f6:	b2d2      	uxtb	r2, r2
 80080f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fe:	1c5a      	adds	r2, r3, #1
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7fe ff33 	bl	8006f70 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10e      	bne.n	8008138 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008120:	2b00      	cmp	r3, #0
 8008122:	d109      	bne.n	8008138 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800812a:	2b00      	cmp	r3, #0
 800812c:	d104      	bne.n	8008138 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008134:	2b00      	cmp	r3, #0
 8008136:	d007      	beq.n	8008148 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	685a      	ldr	r2, [r3, #4]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008146:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800814e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008154:	f003 0304 	and.w	r3, r3, #4
 8008158:	2b04      	cmp	r3, #4
 800815a:	d113      	bne.n	8008184 <I2C_ITError+0x254>
 800815c:	7bfb      	ldrb	r3, [r7, #15]
 800815e:	2b28      	cmp	r3, #40	; 0x28
 8008160:	d110      	bne.n	8008184 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a0a      	ldr	r2, [pc, #40]	; (8008190 <I2C_ITError+0x260>)
 8008166:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2220      	movs	r2, #32
 8008172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7fe fee4 	bl	8006f4c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008184:	bf00      	nop
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	080084d9 	.word	0x080084d9
 8008190:	ffff0000 	.word	0xffff0000

08008194 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b088      	sub	sp, #32
 8008198:	af02      	add	r7, sp, #8
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	4608      	mov	r0, r1
 800819e:	4611      	mov	r1, r2
 80081a0:	461a      	mov	r2, r3
 80081a2:	4603      	mov	r3, r0
 80081a4:	817b      	strh	r3, [r7, #10]
 80081a6:	460b      	mov	r3, r1
 80081a8:	813b      	strh	r3, [r7, #8]
 80081aa:	4613      	mov	r3, r2
 80081ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	6a3b      	ldr	r3, [r7, #32]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f000 fa2c 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00d      	beq.n	80081f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081e4:	d103      	bne.n	80081ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80081ee:	2303      	movs	r3, #3
 80081f0:	e05f      	b.n	80082b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80081f2:	897b      	ldrh	r3, [r7, #10]
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	461a      	mov	r2, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008200:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008204:	6a3a      	ldr	r2, [r7, #32]
 8008206:	492d      	ldr	r1, [pc, #180]	; (80082bc <I2C_RequestMemoryWrite+0x128>)
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f000 fa87 	bl	800871c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	e04c      	b.n	80082b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008218:	2300      	movs	r3, #0
 800821a:	617b      	str	r3, [r7, #20]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	617b      	str	r3, [r7, #20]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	617b      	str	r3, [r7, #20]
 800822c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800822e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008230:	6a39      	ldr	r1, [r7, #32]
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f000 fb12 	bl	800885c <I2C_WaitOnTXEFlagUntilTimeout>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00d      	beq.n	800825a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008242:	2b04      	cmp	r3, #4
 8008244:	d107      	bne.n	8008256 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008254:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	e02b      	b.n	80082b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800825a:	88fb      	ldrh	r3, [r7, #6]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d105      	bne.n	800826c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008260:	893b      	ldrh	r3, [r7, #8]
 8008262:	b2da      	uxtb	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	611a      	str	r2, [r3, #16]
 800826a:	e021      	b.n	80082b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800826c:	893b      	ldrh	r3, [r7, #8]
 800826e:	0a1b      	lsrs	r3, r3, #8
 8008270:	b29b      	uxth	r3, r3
 8008272:	b2da      	uxtb	r2, r3
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800827a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800827c:	6a39      	ldr	r1, [r7, #32]
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f000 faec 	bl	800885c <I2C_WaitOnTXEFlagUntilTimeout>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00d      	beq.n	80082a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828e:	2b04      	cmp	r3, #4
 8008290:	d107      	bne.n	80082a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e005      	b.n	80082b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80082a6:	893b      	ldrh	r3, [r7, #8]
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3718      	adds	r7, #24
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	00010002 	.word	0x00010002

080082c0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082d4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082dc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	685a      	ldr	r2, [r3, #4]
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80082f2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d003      	beq.n	8008304 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008300:	2200      	movs	r2, #0
 8008302:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008308:	2b00      	cmp	r3, #0
 800830a:	d003      	beq.n	8008314 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008310:	2200      	movs	r2, #0
 8008312:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8008314:	7cfb      	ldrb	r3, [r7, #19]
 8008316:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800831a:	2b21      	cmp	r3, #33	; 0x21
 800831c:	d007      	beq.n	800832e <I2C_DMAXferCplt+0x6e>
 800831e:	7cfb      	ldrb	r3, [r7, #19]
 8008320:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8008324:	2b22      	cmp	r3, #34	; 0x22
 8008326:	d131      	bne.n	800838c <I2C_DMAXferCplt+0xcc>
 8008328:	7cbb      	ldrb	r3, [r7, #18]
 800832a:	2b20      	cmp	r3, #32
 800832c:	d12e      	bne.n	800838c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	685a      	ldr	r2, [r3, #4]
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800833c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	2200      	movs	r2, #0
 8008342:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008344:	7cfb      	ldrb	r3, [r7, #19]
 8008346:	2b29      	cmp	r3, #41	; 0x29
 8008348:	d10a      	bne.n	8008360 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2221      	movs	r2, #33	; 0x21
 800834e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	2228      	movs	r2, #40	; 0x28
 8008354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008358:	6978      	ldr	r0, [r7, #20]
 800835a:	f7fe fdd8 	bl	8006f0e <HAL_I2C_SlaveTxCpltCallback>
 800835e:	e00c      	b.n	800837a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008360:	7cfb      	ldrb	r3, [r7, #19]
 8008362:	2b2a      	cmp	r3, #42	; 0x2a
 8008364:	d109      	bne.n	800837a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	2222      	movs	r2, #34	; 0x22
 800836a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	2228      	movs	r2, #40	; 0x28
 8008370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008374:	6978      	ldr	r0, [r7, #20]
 8008376:	f7fe fdd3 	bl	8006f20 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	685a      	ldr	r2, [r3, #4]
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008388:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800838a:	e06a      	b.n	8008462 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b00      	cmp	r3, #0
 8008396:	d064      	beq.n	8008462 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800839c:	b29b      	uxth	r3, r3
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d107      	bne.n	80083b2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083b0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80083c0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80083c8:	d009      	beq.n	80083de <I2C_DMAXferCplt+0x11e>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b08      	cmp	r3, #8
 80083ce:	d006      	beq.n	80083de <I2C_DMAXferCplt+0x11e>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80083d6:	d002      	beq.n	80083de <I2C_DMAXferCplt+0x11e>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2b20      	cmp	r3, #32
 80083dc:	d107      	bne.n	80083ee <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083ec:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	685a      	ldr	r2, [r3, #4]
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80083fc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	685a      	ldr	r2, [r3, #4]
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800840c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	2200      	movs	r2, #0
 8008412:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008418:	2b00      	cmp	r3, #0
 800841a:	d003      	beq.n	8008424 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800841c:	6978      	ldr	r0, [r7, #20]
 800841e:	f7fe fda7 	bl	8006f70 <HAL_I2C_ErrorCallback>
}
 8008422:	e01e      	b.n	8008462 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	2220      	movs	r2, #32
 8008428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008432:	b2db      	uxtb	r3, r3
 8008434:	2b40      	cmp	r3, #64	; 0x40
 8008436:	d10a      	bne.n	800844e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	2200      	movs	r2, #0
 8008444:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8008446:	6978      	ldr	r0, [r7, #20]
 8008448:	f7fe fd89 	bl	8006f5e <HAL_I2C_MemRxCpltCallback>
}
 800844c:	e009      	b.n	8008462 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	2212      	movs	r2, #18
 800845a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800845c:	6978      	ldr	r0, [r7, #20]
 800845e:	f7fe fd4d 	bl	8006efc <HAL_I2C_MasterRxCpltCallback>
}
 8008462:	bf00      	nop
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800847c:	2b00      	cmp	r3, #0
 800847e:	d003      	beq.n	8008488 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008484:	2200      	movs	r2, #0
 8008486:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848c:	2b00      	cmp	r3, #0
 800848e:	d003      	beq.n	8008498 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008494:	2200      	movs	r2, #0
 8008496:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084a6:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2220      	movs	r2, #32
 80084b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c2:	f043 0210 	orr.w	r2, r3, #16
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f7fe fd50 	bl	8006f70 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80084d0:	bf00      	nop
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084e0:	2300      	movs	r3, #0
 80084e2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084f0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80084f2:	4b4b      	ldr	r3, [pc, #300]	; (8008620 <I2C_DMAAbort+0x148>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	08db      	lsrs	r3, r3, #3
 80084f8:	4a4a      	ldr	r2, [pc, #296]	; (8008624 <I2C_DMAAbort+0x14c>)
 80084fa:	fba2 2303 	umull	r2, r3, r2, r3
 80084fe:	0a1a      	lsrs	r2, r3, #8
 8008500:	4613      	mov	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4413      	add	r3, r2
 8008506:	00da      	lsls	r2, r3, #3
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d106      	bne.n	8008520 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008516:	f043 0220 	orr.w	r2, r3, #32
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800851e:	e00a      	b.n	8008536 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	3b01      	subs	r3, #1
 8008524:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008534:	d0ea      	beq.n	800850c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008542:	2200      	movs	r2, #0
 8008544:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854a:	2b00      	cmp	r3, #0
 800854c:	d003      	beq.n	8008556 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008552:	2200      	movs	r2, #0
 8008554:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008564:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	2200      	movs	r2, #0
 800856a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008570:	2b00      	cmp	r3, #0
 8008572:	d003      	beq.n	800857c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008578:	2200      	movs	r2, #0
 800857a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008580:	2b00      	cmp	r3, #0
 8008582:	d003      	beq.n	800858c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008588:	2200      	movs	r2, #0
 800858a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f022 0201 	bic.w	r2, r2, #1
 800859a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b60      	cmp	r3, #96	; 0x60
 80085a6:	d10e      	bne.n	80085c6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	2220      	movs	r2, #32
 80085ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	2200      	movs	r2, #0
 80085bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80085be:	6978      	ldr	r0, [r7, #20]
 80085c0:	f7fe fcdf 	bl	8006f82 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80085c4:	e027      	b.n	8008616 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80085c6:	7cfb      	ldrb	r3, [r7, #19]
 80085c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80085cc:	2b28      	cmp	r3, #40	; 0x28
 80085ce:	d117      	bne.n	8008600 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f042 0201 	orr.w	r2, r2, #1
 80085de:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80085ee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	2200      	movs	r2, #0
 80085f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	2228      	movs	r2, #40	; 0x28
 80085fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80085fe:	e007      	b.n	8008610 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	2220      	movs	r2, #32
 8008604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008610:	6978      	ldr	r0, [r7, #20]
 8008612:	f7fe fcad 	bl	8006f70 <HAL_I2C_ErrorCallback>
}
 8008616:	bf00      	nop
 8008618:	3718      	adds	r7, #24
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	200004ec 	.word	0x200004ec
 8008624:	14f8b589 	.word	0x14f8b589

08008628 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	603b      	str	r3, [r7, #0]
 8008634:	4613      	mov	r3, r2
 8008636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008638:	e048      	b.n	80086cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008640:	d044      	beq.n	80086cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008642:	f7fc fa1f 	bl	8004a84 <HAL_GetTick>
 8008646:	4602      	mov	r2, r0
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	429a      	cmp	r2, r3
 8008650:	d302      	bcc.n	8008658 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d139      	bne.n	80086cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	0c1b      	lsrs	r3, r3, #16
 800865c:	b2db      	uxtb	r3, r3
 800865e:	2b01      	cmp	r3, #1
 8008660:	d10d      	bne.n	800867e <I2C_WaitOnFlagUntilTimeout+0x56>
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	43da      	mvns	r2, r3
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	4013      	ands	r3, r2
 800866e:	b29b      	uxth	r3, r3
 8008670:	2b00      	cmp	r3, #0
 8008672:	bf0c      	ite	eq
 8008674:	2301      	moveq	r3, #1
 8008676:	2300      	movne	r3, #0
 8008678:	b2db      	uxtb	r3, r3
 800867a:	461a      	mov	r2, r3
 800867c:	e00c      	b.n	8008698 <I2C_WaitOnFlagUntilTimeout+0x70>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	699b      	ldr	r3, [r3, #24]
 8008684:	43da      	mvns	r2, r3
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	4013      	ands	r3, r2
 800868a:	b29b      	uxth	r3, r3
 800868c:	2b00      	cmp	r3, #0
 800868e:	bf0c      	ite	eq
 8008690:	2301      	moveq	r3, #1
 8008692:	2300      	movne	r3, #0
 8008694:	b2db      	uxtb	r3, r3
 8008696:	461a      	mov	r2, r3
 8008698:	79fb      	ldrb	r3, [r7, #7]
 800869a:	429a      	cmp	r2, r3
 800869c:	d116      	bne.n	80086cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2200      	movs	r2, #0
 80086a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2220      	movs	r2, #32
 80086a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b8:	f043 0220 	orr.w	r2, r3, #32
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e023      	b.n	8008714 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	0c1b      	lsrs	r3, r3, #16
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d10d      	bne.n	80086f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	695b      	ldr	r3, [r3, #20]
 80086dc:	43da      	mvns	r2, r3
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	4013      	ands	r3, r2
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	bf0c      	ite	eq
 80086e8:	2301      	moveq	r3, #1
 80086ea:	2300      	movne	r3, #0
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	461a      	mov	r2, r3
 80086f0:	e00c      	b.n	800870c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	43da      	mvns	r2, r3
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	4013      	ands	r3, r2
 80086fe:	b29b      	uxth	r3, r3
 8008700:	2b00      	cmp	r3, #0
 8008702:	bf0c      	ite	eq
 8008704:	2301      	moveq	r3, #1
 8008706:	2300      	movne	r3, #0
 8008708:	b2db      	uxtb	r3, r3
 800870a:	461a      	mov	r2, r3
 800870c:	79fb      	ldrb	r3, [r7, #7]
 800870e:	429a      	cmp	r2, r3
 8008710:	d093      	beq.n	800863a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
 8008728:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800872a:	e071      	b.n	8008810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800873a:	d123      	bne.n	8008784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800874a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008754:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2220      	movs	r2, #32
 8008760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008770:	f043 0204 	orr.w	r2, r3, #4
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e067      	b.n	8008854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878a:	d041      	beq.n	8008810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800878c:	f7fc f97a 	bl	8004a84 <HAL_GetTick>
 8008790:	4602      	mov	r2, r0
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	429a      	cmp	r2, r3
 800879a:	d302      	bcc.n	80087a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d136      	bne.n	8008810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	0c1b      	lsrs	r3, r3, #16
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d10c      	bne.n	80087c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	43da      	mvns	r2, r3
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	4013      	ands	r3, r2
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	bf14      	ite	ne
 80087be:	2301      	movne	r3, #1
 80087c0:	2300      	moveq	r3, #0
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	e00b      	b.n	80087de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	43da      	mvns	r2, r3
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	4013      	ands	r3, r2
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	bf14      	ite	ne
 80087d8:	2301      	movne	r3, #1
 80087da:	2300      	moveq	r3, #0
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d016      	beq.n	8008810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2220      	movs	r2, #32
 80087ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fc:	f043 0220 	orr.w	r2, r3, #32
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	e021      	b.n	8008854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	0c1b      	lsrs	r3, r3, #16
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b01      	cmp	r3, #1
 8008818:	d10c      	bne.n	8008834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	43da      	mvns	r2, r3
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	4013      	ands	r3, r2
 8008826:	b29b      	uxth	r3, r3
 8008828:	2b00      	cmp	r3, #0
 800882a:	bf14      	ite	ne
 800882c:	2301      	movne	r3, #1
 800882e:	2300      	moveq	r3, #0
 8008830:	b2db      	uxtb	r3, r3
 8008832:	e00b      	b.n	800884c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	43da      	mvns	r2, r3
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	4013      	ands	r3, r2
 8008840:	b29b      	uxth	r3, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	bf14      	ite	ne
 8008846:	2301      	movne	r3, #1
 8008848:	2300      	moveq	r3, #0
 800884a:	b2db      	uxtb	r3, r3
 800884c:	2b00      	cmp	r3, #0
 800884e:	f47f af6d 	bne.w	800872c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008868:	e034      	b.n	80088d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f000 f8b8 	bl	80089e0 <I2C_IsAcknowledgeFailed>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d001      	beq.n	800887a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e034      	b.n	80088e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008880:	d028      	beq.n	80088d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008882:	f7fc f8ff 	bl	8004a84 <HAL_GetTick>
 8008886:	4602      	mov	r2, r0
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	429a      	cmp	r2, r3
 8008890:	d302      	bcc.n	8008898 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d11d      	bne.n	80088d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a2:	2b80      	cmp	r3, #128	; 0x80
 80088a4:	d016      	beq.n	80088d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2220      	movs	r2, #32
 80088b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c0:	f043 0220 	orr.w	r2, r3, #32
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e007      	b.n	80088e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088de:	2b80      	cmp	r3, #128	; 0x80
 80088e0:	d1c3      	bne.n	800886a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80088f8:	e034      	b.n	8008964 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f000 f870 	bl	80089e0 <I2C_IsAcknowledgeFailed>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d001      	beq.n	800890a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e034      	b.n	8008974 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008910:	d028      	beq.n	8008964 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008912:	f7fc f8b7 	bl	8004a84 <HAL_GetTick>
 8008916:	4602      	mov	r2, r0
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	429a      	cmp	r2, r3
 8008920:	d302      	bcc.n	8008928 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d11d      	bne.n	8008964 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	f003 0304 	and.w	r3, r3, #4
 8008932:	2b04      	cmp	r3, #4
 8008934:	d016      	beq.n	8008964 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2220      	movs	r2, #32
 8008940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008950:	f043 0220 	orr.w	r2, r3, #32
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e007      	b.n	8008974 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	f003 0304 	and.w	r3, r3, #4
 800896e:	2b04      	cmp	r3, #4
 8008970:	d1c3      	bne.n	80088fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008984:	2300      	movs	r3, #0
 8008986:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008988:	4b13      	ldr	r3, [pc, #76]	; (80089d8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	08db      	lsrs	r3, r3, #3
 800898e:	4a13      	ldr	r2, [pc, #76]	; (80089dc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008990:	fba2 2303 	umull	r2, r3, r2, r3
 8008994:	0a1a      	lsrs	r2, r3, #8
 8008996:	4613      	mov	r3, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4413      	add	r3, r2
 800899c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3b01      	subs	r3, #1
 80089a2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d107      	bne.n	80089ba <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ae:	f043 0220 	orr.w	r2, r3, #32
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e008      	b.n	80089cc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089c8:	d0e9      	beq.n	800899e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bc80      	pop	{r7}
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	200004ec 	.word	0x200004ec
 80089dc:	14f8b589 	.word	0x14f8b589

080089e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089f6:	d11b      	bne.n	8008a30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008a00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2220      	movs	r2, #32
 8008a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1c:	f043 0204 	orr.w	r2, r3, #4
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e000      	b.n	8008a32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bc80      	pop	{r7}
 8008a3a:	4770      	bx	lr

08008a3c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a48:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008a4c:	d103      	bne.n	8008a56 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2201      	movs	r2, #1
 8008a52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008a54:	e007      	b.n	8008a66 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008a5e:	d102      	bne.n	8008a66 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2208      	movs	r2, #8
 8008a64:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008a66:	bf00      	nop
 8008a68:	370c      	adds	r7, #12
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bc80      	pop	{r7}
 8008a6e:	4770      	bx	lr

08008a70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a72:	b08b      	sub	sp, #44	; 0x2c
 8008a74:	af06      	add	r7, sp, #24
 8008a76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d101      	bne.n	8008a82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e0f1      	b.n	8008c66 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d106      	bne.n	8008a9c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f007 fc2a 	bl	80102f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2203      	movs	r2, #3
 8008aa0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f003 fb2f 	bl	800c10c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	603b      	str	r3, [r7, #0]
 8008ab4:	687e      	ldr	r6, [r7, #4]
 8008ab6:	466d      	mov	r5, sp
 8008ab8:	f106 0410 	add.w	r4, r6, #16
 8008abc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008abe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ac0:	6823      	ldr	r3, [r4, #0]
 8008ac2:	602b      	str	r3, [r5, #0]
 8008ac4:	1d33      	adds	r3, r6, #4
 8008ac6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ac8:	6838      	ldr	r0, [r7, #0]
 8008aca:	f003 faf9 	bl	800c0c0 <USB_CoreInit>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d005      	beq.n	8008ae0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2202      	movs	r2, #2
 8008ad8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e0c2      	b.n	8008c66 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f003 fb2a 	bl	800c140 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008aec:	2300      	movs	r3, #0
 8008aee:	73fb      	strb	r3, [r7, #15]
 8008af0:	e040      	b.n	8008b74 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
 8008af4:	6879      	ldr	r1, [r7, #4]
 8008af6:	1c5a      	adds	r2, r3, #1
 8008af8:	4613      	mov	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	00db      	lsls	r3, r3, #3
 8008b00:	440b      	add	r3, r1
 8008b02:	3301      	adds	r3, #1
 8008b04:	2201      	movs	r2, #1
 8008b06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008b08:	7bfb      	ldrb	r3, [r7, #15]
 8008b0a:	6879      	ldr	r1, [r7, #4]
 8008b0c:	1c5a      	adds	r2, r3, #1
 8008b0e:	4613      	mov	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	00db      	lsls	r3, r3, #3
 8008b16:	440b      	add	r3, r1
 8008b18:	7bfa      	ldrb	r2, [r7, #15]
 8008b1a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	6879      	ldr	r1, [r7, #4]
 8008b20:	1c5a      	adds	r2, r3, #1
 8008b22:	4613      	mov	r3, r2
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	4413      	add	r3, r2
 8008b28:	00db      	lsls	r3, r3, #3
 8008b2a:	440b      	add	r3, r1
 8008b2c:	3303      	adds	r3, #3
 8008b2e:	2200      	movs	r2, #0
 8008b30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008b32:	7bfa      	ldrb	r2, [r7, #15]
 8008b34:	6879      	ldr	r1, [r7, #4]
 8008b36:	4613      	mov	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	00db      	lsls	r3, r3, #3
 8008b3e:	440b      	add	r3, r1
 8008b40:	3338      	adds	r3, #56	; 0x38
 8008b42:	2200      	movs	r2, #0
 8008b44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008b46:	7bfa      	ldrb	r2, [r7, #15]
 8008b48:	6879      	ldr	r1, [r7, #4]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4413      	add	r3, r2
 8008b50:	00db      	lsls	r3, r3, #3
 8008b52:	440b      	add	r3, r1
 8008b54:	333c      	adds	r3, #60	; 0x3c
 8008b56:	2200      	movs	r2, #0
 8008b58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008b5a:	7bfa      	ldrb	r2, [r7, #15]
 8008b5c:	6879      	ldr	r1, [r7, #4]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	00db      	lsls	r3, r3, #3
 8008b66:	440b      	add	r3, r1
 8008b68:	3340      	adds	r3, #64	; 0x40
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
 8008b70:	3301      	adds	r3, #1
 8008b72:	73fb      	strb	r3, [r7, #15]
 8008b74:	7bfa      	ldrb	r2, [r7, #15]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d3b9      	bcc.n	8008af2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b7e:	2300      	movs	r3, #0
 8008b80:	73fb      	strb	r3, [r7, #15]
 8008b82:	e044      	b.n	8008c0e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008b84:	7bfa      	ldrb	r2, [r7, #15]
 8008b86:	6879      	ldr	r1, [r7, #4]
 8008b88:	4613      	mov	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	00db      	lsls	r3, r3, #3
 8008b90:	440b      	add	r3, r1
 8008b92:	f203 1369 	addw	r3, r3, #361	; 0x169
 8008b96:	2200      	movs	r2, #0
 8008b98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008b9a:	7bfa      	ldrb	r2, [r7, #15]
 8008b9c:	6879      	ldr	r1, [r7, #4]
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	4413      	add	r3, r2
 8008ba4:	00db      	lsls	r3, r3, #3
 8008ba6:	440b      	add	r3, r1
 8008ba8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008bac:	7bfa      	ldrb	r2, [r7, #15]
 8008bae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008bb0:	7bfa      	ldrb	r2, [r7, #15]
 8008bb2:	6879      	ldr	r1, [r7, #4]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	4413      	add	r3, r2
 8008bba:	00db      	lsls	r3, r3, #3
 8008bbc:	440b      	add	r3, r1
 8008bbe:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008bc6:	7bfa      	ldrb	r2, [r7, #15]
 8008bc8:	6879      	ldr	r1, [r7, #4]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4413      	add	r3, r2
 8008bd0:	00db      	lsls	r3, r3, #3
 8008bd2:	440b      	add	r3, r1
 8008bd4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8008bd8:	2200      	movs	r2, #0
 8008bda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008bdc:	7bfa      	ldrb	r2, [r7, #15]
 8008bde:	6879      	ldr	r1, [r7, #4]
 8008be0:	4613      	mov	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4413      	add	r3, r2
 8008be6:	00db      	lsls	r3, r3, #3
 8008be8:	440b      	add	r3, r1
 8008bea:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008bee:	2200      	movs	r2, #0
 8008bf0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008bf2:	7bfa      	ldrb	r2, [r7, #15]
 8008bf4:	6879      	ldr	r1, [r7, #4]
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4413      	add	r3, r2
 8008bfc:	00db      	lsls	r3, r3, #3
 8008bfe:	440b      	add	r3, r1
 8008c00:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008c04:	2200      	movs	r2, #0
 8008c06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c08:	7bfb      	ldrb	r3, [r7, #15]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	73fb      	strb	r3, [r7, #15]
 8008c0e:	7bfa      	ldrb	r2, [r7, #15]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d3b5      	bcc.n	8008b84 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	603b      	str	r3, [r7, #0]
 8008c1e:	687e      	ldr	r6, [r7, #4]
 8008c20:	466d      	mov	r5, sp
 8008c22:	f106 0410 	add.w	r4, r6, #16
 8008c26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c2a:	6823      	ldr	r3, [r4, #0]
 8008c2c:	602b      	str	r3, [r5, #0]
 8008c2e:	1d33      	adds	r3, r6, #4
 8008c30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c32:	6838      	ldr	r0, [r7, #0]
 8008c34:	f003 fa90 	bl	800c158 <USB_DevInit>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d005      	beq.n	8008c4a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2202      	movs	r2, #2
 8008c42:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e00d      	b.n	8008c66 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f005 fd11 	bl	800e686 <USB_DevDisconnect>

  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c6e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b082      	sub	sp, #8
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d101      	bne.n	8008c84 <HAL_PCD_Start+0x16>
 8008c80:	2302      	movs	r3, #2
 8008c82:	e016      	b.n	8008cb2 <HAL_PCD_Start+0x44>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f003 fa25 	bl	800c0e0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8008c96:	2101      	movs	r1, #1
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f007 fd94 	bl	80107c6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f005 fce5 	bl	800e672 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b088      	sub	sp, #32
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f005 fce7 	bl	800e69a <USB_ReadInterrupts>
 8008ccc:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d003      	beq.n	8008ce0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fb1b 	bl	8009314 <PCD_EP_ISR_Handler>

    return;
 8008cde:	e119      	b.n	8008f14 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d013      	beq.n	8008d12 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cfc:	b292      	uxth	r2, r2
 8008cfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f007 fb67 	bl	80103d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8008d08:	2100      	movs	r1, #0
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f905 	bl	8008f1a <HAL_PCD_SetAddress>

    return;
 8008d10:	e100      	b.n	8008f14 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00c      	beq.n	8008d36 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008d2e:	b292      	uxth	r2, r2
 8008d30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008d34:	e0ee      	b.n	8008f14 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00c      	beq.n	8008d5a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d52:	b292      	uxth	r2, r2
 8008d54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008d58:	e0dc      	b.n	8008f14 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d027      	beq.n	8008db4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f022 0204 	bic.w	r2, r2, #4
 8008d76:	b292      	uxth	r2, r2
 8008d78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f022 0208 	bic.w	r2, r2, #8
 8008d8e:	b292      	uxth	r2, r2
 8008d90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f007 fb57 	bl	8010448 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008da2:	b29a      	uxth	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008dac:	b292      	uxth	r2, r2
 8008dae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008db2:	e0af      	b.n	8008f14 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f000 8083 	beq.w	8008ec6 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	77fb      	strb	r3, [r7, #31]
 8008dc4:	e010      	b.n	8008de8 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	7ffb      	ldrb	r3, [r7, #31]
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	441a      	add	r2, r3
 8008dd2:	7ffb      	ldrb	r3, [r7, #31]
 8008dd4:	8812      	ldrh	r2, [r2, #0]
 8008dd6:	b292      	uxth	r2, r2
 8008dd8:	005b      	lsls	r3, r3, #1
 8008dda:	3320      	adds	r3, #32
 8008ddc:	443b      	add	r3, r7
 8008dde:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8008de2:	7ffb      	ldrb	r3, [r7, #31]
 8008de4:	3301      	adds	r3, #1
 8008de6:	77fb      	strb	r3, [r7, #31]
 8008de8:	7ffb      	ldrb	r3, [r7, #31]
 8008dea:	2b07      	cmp	r3, #7
 8008dec:	d9eb      	bls.n	8008dc6 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f042 0201 	orr.w	r2, r2, #1
 8008e00:	b292      	uxth	r2, r2
 8008e02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f022 0201 	bic.w	r2, r2, #1
 8008e18:	b292      	uxth	r2, r2
 8008e1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8008e1e:	bf00      	nop
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d0f6      	beq.n	8008e20 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e44:	b292      	uxth	r2, r2
 8008e46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	77fb      	strb	r3, [r7, #31]
 8008e4e:	e00f      	b.n	8008e70 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8008e50:	7ffb      	ldrb	r3, [r7, #31]
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	6812      	ldr	r2, [r2, #0]
 8008e56:	4611      	mov	r1, r2
 8008e58:	7ffa      	ldrb	r2, [r7, #31]
 8008e5a:	0092      	lsls	r2, r2, #2
 8008e5c:	440a      	add	r2, r1
 8008e5e:	005b      	lsls	r3, r3, #1
 8008e60:	3320      	adds	r3, #32
 8008e62:	443b      	add	r3, r7
 8008e64:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8008e68:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8008e6a:	7ffb      	ldrb	r3, [r7, #31]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	77fb      	strb	r3, [r7, #31]
 8008e70:	7ffb      	ldrb	r3, [r7, #31]
 8008e72:	2b07      	cmp	r3, #7
 8008e74:	d9ec      	bls.n	8008e50 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f042 0208 	orr.w	r2, r2, #8
 8008e88:	b292      	uxth	r2, r2
 8008e8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ea0:	b292      	uxth	r2, r2
 8008ea2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f042 0204 	orr.w	r2, r2, #4
 8008eb8:	b292      	uxth	r2, r2
 8008eba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f007 faa8 	bl	8010414 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008ec4:	e026      	b.n	8008f14 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00f      	beq.n	8008ef0 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008ee2:	b292      	uxth	r2, r2
 8008ee4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f007 fa66 	bl	80103ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008eee:	e011      	b.n	8008f14 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00c      	beq.n	8008f14 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f0c:	b292      	uxth	r2, r2
 8008f0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8008f12:	bf00      	nop
  }
}
 8008f14:	3720      	adds	r7, #32
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b082      	sub	sp, #8
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
 8008f22:	460b      	mov	r3, r1
 8008f24:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d101      	bne.n	8008f34 <HAL_PCD_SetAddress+0x1a>
 8008f30:	2302      	movs	r3, #2
 8008f32:	e013      	b.n	8008f5c <HAL_PCD_SetAddress+0x42>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	78fa      	ldrb	r2, [r7, #3]
 8008f40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	78fa      	ldrb	r2, [r7, #3]
 8008f4a:	4611      	mov	r1, r2
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f005 fb7d 	bl	800e64c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	4608      	mov	r0, r1
 8008f6e:	4611      	mov	r1, r2
 8008f70:	461a      	mov	r2, r3
 8008f72:	4603      	mov	r3, r0
 8008f74:	70fb      	strb	r3, [r7, #3]
 8008f76:	460b      	mov	r3, r1
 8008f78:	803b      	strh	r3, [r7, #0]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008f82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	da0e      	bge.n	8008fa8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f8a:	78fb      	ldrb	r3, [r7, #3]
 8008f8c:	f003 0307 	and.w	r3, r3, #7
 8008f90:	1c5a      	adds	r2, r3, #1
 8008f92:	4613      	mov	r3, r2
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	4413      	add	r3, r2
 8008f98:	00db      	lsls	r3, r3, #3
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	705a      	strb	r2, [r3, #1]
 8008fa6:	e00e      	b.n	8008fc6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008fa8:	78fb      	ldrb	r3, [r7, #3]
 8008faa:	f003 0207 	and.w	r2, r3, #7
 8008fae:	4613      	mov	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4413      	add	r3, r2
 8008fb4:	00db      	lsls	r3, r3, #3
 8008fb6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008fc6:	78fb      	ldrb	r3, [r7, #3]
 8008fc8:	f003 0307 	and.w	r3, r3, #7
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008fd2:	883a      	ldrh	r2, [r7, #0]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	78ba      	ldrb	r2, [r7, #2]
 8008fdc:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008fde:	78bb      	ldrb	r3, [r7, #2]
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d102      	bne.n	8008fea <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d101      	bne.n	8008ff8 <HAL_PCD_EP_Open+0x94>
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	e00e      	b.n	8009016 <HAL_PCD_EP_Open+0xb2>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68f9      	ldr	r1, [r7, #12]
 8009006:	4618      	mov	r0, r3
 8009008:	f003 f8c6 	bl	800c198 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8009014:	7afb      	ldrb	r3, [r7, #11]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b084      	sub	sp, #16
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	460b      	mov	r3, r1
 8009028:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800902a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800902e:	2b00      	cmp	r3, #0
 8009030:	da0e      	bge.n	8009050 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009032:	78fb      	ldrb	r3, [r7, #3]
 8009034:	f003 0307 	and.w	r3, r3, #7
 8009038:	1c5a      	adds	r2, r3, #1
 800903a:	4613      	mov	r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	4413      	add	r3, r2
 8009040:	00db      	lsls	r3, r3, #3
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	4413      	add	r3, r2
 8009046:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2201      	movs	r2, #1
 800904c:	705a      	strb	r2, [r3, #1]
 800904e:	e00e      	b.n	800906e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009050:	78fb      	ldrb	r3, [r7, #3]
 8009052:	f003 0207 	and.w	r2, r3, #7
 8009056:	4613      	mov	r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	4413      	add	r3, r2
 800905c:	00db      	lsls	r3, r3, #3
 800905e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	4413      	add	r3, r2
 8009066:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800906e:	78fb      	ldrb	r3, [r7, #3]
 8009070:	f003 0307 	and.w	r3, r3, #7
 8009074:	b2da      	uxtb	r2, r3
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009080:	2b01      	cmp	r3, #1
 8009082:	d101      	bne.n	8009088 <HAL_PCD_EP_Close+0x6a>
 8009084:	2302      	movs	r3, #2
 8009086:	e00e      	b.n	80090a6 <HAL_PCD_EP_Close+0x88>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68f9      	ldr	r1, [r7, #12]
 8009096:	4618      	mov	r0, r3
 8009098:	f003 fc3e 	bl	800c918 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b086      	sub	sp, #24
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	60f8      	str	r0, [r7, #12]
 80090b6:	607a      	str	r2, [r7, #4]
 80090b8:	603b      	str	r3, [r7, #0]
 80090ba:	460b      	mov	r3, r1
 80090bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090be:	7afb      	ldrb	r3, [r7, #11]
 80090c0:	f003 0207 	and.w	r2, r3, #7
 80090c4:	4613      	mov	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	00db      	lsls	r3, r3, #3
 80090cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	4413      	add	r3, r2
 80090d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	2200      	movs	r2, #0
 80090e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	2200      	movs	r2, #0
 80090ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80090ee:	7afb      	ldrb	r3, [r7, #11]
 80090f0:	f003 0307 	and.w	r3, r3, #7
 80090f4:	b2da      	uxtb	r2, r3
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	6979      	ldr	r1, [r7, #20]
 8009100:	4618      	mov	r0, r3
 8009102:	f003 fdf5 	bl	800ccf0 <USB_EPStartXfer>

  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3718      	adds	r7, #24
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800911c:	78fb      	ldrb	r3, [r7, #3]
 800911e:	f003 0207 	and.w	r2, r3, #7
 8009122:	6879      	ldr	r1, [r7, #4]
 8009124:	4613      	mov	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4413      	add	r3, r2
 800912a:	00db      	lsls	r3, r3, #3
 800912c:	440b      	add	r3, r1
 800912e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8009132:	681b      	ldr	r3, [r3, #0]
}
 8009134:	4618      	mov	r0, r3
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	bc80      	pop	{r7}
 800913c:	4770      	bx	lr

0800913e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b086      	sub	sp, #24
 8009142:	af00      	add	r7, sp, #0
 8009144:	60f8      	str	r0, [r7, #12]
 8009146:	607a      	str	r2, [r7, #4]
 8009148:	603b      	str	r3, [r7, #0]
 800914a:	460b      	mov	r3, r1
 800914c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800914e:	7afb      	ldrb	r3, [r7, #11]
 8009150:	f003 0307 	and.w	r3, r3, #7
 8009154:	1c5a      	adds	r2, r3, #1
 8009156:	4613      	mov	r3, r2
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	4413      	add	r3, r2
 800915c:	00db      	lsls	r3, r3, #3
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	4413      	add	r3, r2
 8009162:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	683a      	ldr	r2, [r7, #0]
 800916e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	2200      	movs	r2, #0
 8009182:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	2201      	movs	r2, #1
 8009188:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800918a:	7afb      	ldrb	r3, [r7, #11]
 800918c:	f003 0307 	and.w	r3, r3, #7
 8009190:	b2da      	uxtb	r2, r3
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6979      	ldr	r1, [r7, #20]
 800919c:	4618      	mov	r0, r3
 800919e:	f003 fda7 	bl	800ccf0 <USB_EPStartXfer>

  return HAL_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3718      	adds	r7, #24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80091b8:	78fb      	ldrb	r3, [r7, #3]
 80091ba:	f003 0207 	and.w	r2, r3, #7
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d901      	bls.n	80091ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	e04c      	b.n	8009264 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80091ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	da0e      	bge.n	80091f0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091d2:	78fb      	ldrb	r3, [r7, #3]
 80091d4:	f003 0307 	and.w	r3, r3, #7
 80091d8:	1c5a      	adds	r2, r3, #1
 80091da:	4613      	mov	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	00db      	lsls	r3, r3, #3
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	4413      	add	r3, r2
 80091e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2201      	movs	r2, #1
 80091ec:	705a      	strb	r2, [r3, #1]
 80091ee:	e00c      	b.n	800920a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80091f0:	78fa      	ldrb	r2, [r7, #3]
 80091f2:	4613      	mov	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	4413      	add	r3, r2
 80091f8:	00db      	lsls	r3, r3, #3
 80091fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	4413      	add	r3, r2
 8009202:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2201      	movs	r2, #1
 800920e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009210:	78fb      	ldrb	r3, [r7, #3]
 8009212:	f003 0307 	and.w	r3, r3, #7
 8009216:	b2da      	uxtb	r2, r3
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009222:	2b01      	cmp	r3, #1
 8009224:	d101      	bne.n	800922a <HAL_PCD_EP_SetStall+0x7e>
 8009226:	2302      	movs	r3, #2
 8009228:	e01c      	b.n	8009264 <HAL_PCD_EP_SetStall+0xb8>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2201      	movs	r2, #1
 800922e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68f9      	ldr	r1, [r7, #12]
 8009238:	4618      	mov	r0, r3
 800923a:	f005 f90a 	bl	800e452 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800923e:	78fb      	ldrb	r3, [r7, #3]
 8009240:	f003 0307 	and.w	r3, r3, #7
 8009244:	2b00      	cmp	r3, #0
 8009246:	d108      	bne.n	800925a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009252:	4619      	mov	r1, r3
 8009254:	4610      	mov	r0, r2
 8009256:	f005 fa2f 	bl	800e6b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	460b      	mov	r3, r1
 8009276:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009278:	78fb      	ldrb	r3, [r7, #3]
 800927a:	f003 020f 	and.w	r2, r3, #15
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	429a      	cmp	r2, r3
 8009284:	d901      	bls.n	800928a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	e040      	b.n	800930c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800928a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800928e:	2b00      	cmp	r3, #0
 8009290:	da0e      	bge.n	80092b0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009292:	78fb      	ldrb	r3, [r7, #3]
 8009294:	f003 0307 	and.w	r3, r3, #7
 8009298:	1c5a      	adds	r2, r3, #1
 800929a:	4613      	mov	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4413      	add	r3, r2
 80092a0:	00db      	lsls	r3, r3, #3
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	4413      	add	r3, r2
 80092a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2201      	movs	r2, #1
 80092ac:	705a      	strb	r2, [r3, #1]
 80092ae:	e00e      	b.n	80092ce <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092b0:	78fb      	ldrb	r3, [r7, #3]
 80092b2:	f003 0207 	and.w	r2, r3, #7
 80092b6:	4613      	mov	r3, r2
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	4413      	add	r3, r2
 80092bc:	00db      	lsls	r3, r3, #3
 80092be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	4413      	add	r3, r2
 80092c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2200      	movs	r2, #0
 80092d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092d4:	78fb      	ldrb	r3, [r7, #3]
 80092d6:	f003 0307 	and.w	r3, r3, #7
 80092da:	b2da      	uxtb	r2, r3
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d101      	bne.n	80092ee <HAL_PCD_EP_ClrStall+0x82>
 80092ea:	2302      	movs	r3, #2
 80092ec:	e00e      	b.n	800930c <HAL_PCD_EP_ClrStall+0xa0>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2201      	movs	r2, #1
 80092f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68f9      	ldr	r1, [r7, #12]
 80092fc:	4618      	mov	r0, r3
 80092fe:	f005 f8f8 	bl	800e4f2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b096      	sub	sp, #88	; 0x58
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800931c:	e3bf      	b.n	8009a9e <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009326:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800932a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800932e:	b2db      	uxtb	r3, r3
 8009330:	f003 030f 	and.w	r3, r3, #15
 8009334:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8009338:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800933c:	2b00      	cmp	r3, #0
 800933e:	f040 8179 	bne.w	8009634 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009342:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009346:	f003 0310 	and.w	r3, r3, #16
 800934a:	2b00      	cmp	r3, #0
 800934c:	d152      	bne.n	80093f4 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	b29b      	uxth	r3, r3
 8009356:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800935a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800935e:	81fb      	strh	r3, [r7, #14]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	89fb      	ldrh	r3, [r7, #14]
 8009366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800936a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800936e:	b29b      	uxth	r3, r3
 8009370:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	3328      	adds	r3, #40	; 0x28
 8009376:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009380:	b29b      	uxth	r3, r3
 8009382:	461a      	mov	r2, r3
 8009384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	00db      	lsls	r3, r3, #3
 800938a:	4413      	add	r3, r2
 800938c:	3302      	adds	r3, #2
 800938e:	005b      	lsls	r3, r3, #1
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	6812      	ldr	r2, [r2, #0]
 8009394:	4413      	add	r3, r2
 8009396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800939a:	881b      	ldrh	r3, [r3, #0]
 800939c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80093a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093a2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80093a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093a6:	695a      	ldr	r2, [r3, #20]
 80093a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093aa:	69db      	ldr	r3, [r3, #28]
 80093ac:	441a      	add	r2, r3
 80093ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093b0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80093b2:	2100      	movs	r1, #0
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f006 ffe6 	bl	8010386 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f000 836b 	beq.w	8009a9e <PCD_EP_ISR_Handler+0x78a>
 80093c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f040 8366 	bne.w	8009a9e <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80093de:	b2da      	uxtb	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	b292      	uxth	r2, r2
 80093e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80093f2:	e354      	b.n	8009a9e <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80093fa:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	881b      	ldrh	r3, [r3, #0]
 8009402:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009406:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800940a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800940e:	2b00      	cmp	r3, #0
 8009410:	d034      	beq.n	800947c <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800941a:	b29b      	uxth	r3, r3
 800941c:	461a      	mov	r2, r3
 800941e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	00db      	lsls	r3, r3, #3
 8009424:	4413      	add	r3, r2
 8009426:	3306      	adds	r3, #6
 8009428:	005b      	lsls	r3, r3, #1
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	6812      	ldr	r2, [r2, #0]
 800942e:	4413      	add	r3, r2
 8009430:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009434:	881b      	ldrh	r3, [r3, #0]
 8009436:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800943a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800943c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6818      	ldr	r0, [r3, #0]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8009448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800944a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800944c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800944e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009450:	b29b      	uxth	r3, r3
 8009452:	f005 f981 	bl	800e758 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	881b      	ldrh	r3, [r3, #0]
 800945c:	b29a      	uxth	r2, r3
 800945e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009462:	4013      	ands	r3, r2
 8009464:	823b      	strh	r3, [r7, #16]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	8a3a      	ldrh	r2, [r7, #16]
 800946c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009470:	b292      	uxth	r2, r2
 8009472:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f006 ff59 	bl	801032c <HAL_PCD_SetupStageCallback>
 800947a:	e310      	b.n	8009a9e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800947c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009480:	2b00      	cmp	r3, #0
 8009482:	f280 830c 	bge.w	8009a9e <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	881b      	ldrh	r3, [r3, #0]
 800948c:	b29a      	uxth	r2, r3
 800948e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009492:	4013      	ands	r3, r2
 8009494:	83fb      	strh	r3, [r7, #30]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	8bfa      	ldrh	r2, [r7, #30]
 800949c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80094a0:	b292      	uxth	r2, r2
 80094a2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	461a      	mov	r2, r3
 80094b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	00db      	lsls	r3, r3, #3
 80094b6:	4413      	add	r3, r2
 80094b8:	3306      	adds	r3, #6
 80094ba:	005b      	lsls	r3, r3, #1
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	6812      	ldr	r2, [r2, #0]
 80094c0:	4413      	add	r3, r2
 80094c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094c6:	881b      	ldrh	r3, [r3, #0]
 80094c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80094cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094ce:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80094d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094d2:	69db      	ldr	r3, [r3, #28]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d019      	beq.n	800950c <PCD_EP_ISR_Handler+0x1f8>
 80094d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094da:	695b      	ldr	r3, [r3, #20]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d015      	beq.n	800950c <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6818      	ldr	r0, [r3, #0]
 80094e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094e6:	6959      	ldr	r1, [r3, #20]
 80094e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094ea:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80094ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094ee:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	f005 f931 	bl	800e758 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80094f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094f8:	695a      	ldr	r2, [r3, #20]
 80094fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094fc:	69db      	ldr	r3, [r3, #28]
 80094fe:	441a      	add	r2, r3
 8009500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009502:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009504:	2100      	movs	r1, #0
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f006 ff22 	bl	8010350 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	881b      	ldrh	r3, [r3, #0]
 8009512:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8009516:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800951a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800951e:	2b00      	cmp	r3, #0
 8009520:	f040 82bd 	bne.w	8009a9e <PCD_EP_ISR_Handler+0x78a>
 8009524:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009528:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800952c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009530:	f000 82b5 	beq.w	8009a9e <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	61bb      	str	r3, [r7, #24]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009542:	b29b      	uxth	r3, r3
 8009544:	461a      	mov	r2, r3
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	4413      	add	r3, r2
 800954a:	61bb      	str	r3, [r7, #24]
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009552:	617b      	str	r3, [r7, #20]
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	881b      	ldrh	r3, [r3, #0]
 8009558:	b29b      	uxth	r3, r3
 800955a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800955e:	b29a      	uxth	r2, r3
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	801a      	strh	r2, [r3, #0]
 8009564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009566:	691b      	ldr	r3, [r3, #16]
 8009568:	2b3e      	cmp	r3, #62	; 0x3e
 800956a:	d91d      	bls.n	80095a8 <PCD_EP_ISR_Handler+0x294>
 800956c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	095b      	lsrs	r3, r3, #5
 8009572:	647b      	str	r3, [r7, #68]	; 0x44
 8009574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	f003 031f 	and.w	r3, r3, #31
 800957c:	2b00      	cmp	r3, #0
 800957e:	d102      	bne.n	8009586 <PCD_EP_ISR_Handler+0x272>
 8009580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009582:	3b01      	subs	r3, #1
 8009584:	647b      	str	r3, [r7, #68]	; 0x44
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	881b      	ldrh	r3, [r3, #0]
 800958a:	b29a      	uxth	r2, r3
 800958c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800958e:	b29b      	uxth	r3, r3
 8009590:	029b      	lsls	r3, r3, #10
 8009592:	b29b      	uxth	r3, r3
 8009594:	4313      	orrs	r3, r2
 8009596:	b29b      	uxth	r3, r3
 8009598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800959c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	801a      	strh	r2, [r3, #0]
 80095a6:	e026      	b.n	80095f6 <PCD_EP_ISR_Handler+0x2e2>
 80095a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d10a      	bne.n	80095c6 <PCD_EP_ISR_Handler+0x2b2>
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	881b      	ldrh	r3, [r3, #0]
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095be:	b29a      	uxth	r2, r3
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	801a      	strh	r2, [r3, #0]
 80095c4:	e017      	b.n	80095f6 <PCD_EP_ISR_Handler+0x2e2>
 80095c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095c8:	691b      	ldr	r3, [r3, #16]
 80095ca:	085b      	lsrs	r3, r3, #1
 80095cc:	647b      	str	r3, [r7, #68]	; 0x44
 80095ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095d0:	691b      	ldr	r3, [r3, #16]
 80095d2:	f003 0301 	and.w	r3, r3, #1
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d002      	beq.n	80095e0 <PCD_EP_ISR_Handler+0x2cc>
 80095da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095dc:	3301      	adds	r3, #1
 80095de:	647b      	str	r3, [r7, #68]	; 0x44
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	881b      	ldrh	r3, [r3, #0]
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	029b      	lsls	r3, r3, #10
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	4313      	orrs	r3, r2
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	881b      	ldrh	r3, [r3, #0]
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009606:	827b      	strh	r3, [r7, #18]
 8009608:	8a7b      	ldrh	r3, [r7, #18]
 800960a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800960e:	827b      	strh	r3, [r7, #18]
 8009610:	8a7b      	ldrh	r3, [r7, #18]
 8009612:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009616:	827b      	strh	r3, [r7, #18]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	8a7b      	ldrh	r3, [r7, #18]
 800961e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800962a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800962e:	b29b      	uxth	r3, r3
 8009630:	8013      	strh	r3, [r2, #0]
 8009632:	e234      	b.n	8009a9e <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	461a      	mov	r2, r3
 800963a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	4413      	add	r3, r2
 8009642:	881b      	ldrh	r3, [r3, #0]
 8009644:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009648:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800964c:	2b00      	cmp	r3, #0
 800964e:	f280 80fc 	bge.w	800984a <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	461a      	mov	r2, r3
 8009658:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4413      	add	r3, r2
 8009660:	881b      	ldrh	r3, [r3, #0]
 8009662:	b29a      	uxth	r2, r3
 8009664:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009668:	4013      	ands	r3, r2
 800966a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	461a      	mov	r2, r3
 8009674:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	4413      	add	r3, r2
 800967c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8009680:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009684:	b292      	uxth	r2, r2
 8009686:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8009688:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800968c:	4613      	mov	r3, r2
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	4413      	add	r3, r2
 8009692:	00db      	lsls	r3, r3, #3
 8009694:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	4413      	add	r3, r2
 800969c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800969e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096a0:	7b1b      	ldrb	r3, [r3, #12]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d125      	bne.n	80096f2 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	461a      	mov	r2, r3
 80096b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	00db      	lsls	r3, r3, #3
 80096b8:	4413      	add	r3, r2
 80096ba:	3306      	adds	r3, #6
 80096bc:	005b      	lsls	r3, r3, #1
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	6812      	ldr	r2, [r2, #0]
 80096c2:	4413      	add	r3, r2
 80096c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096c8:	881b      	ldrh	r3, [r3, #0]
 80096ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096ce:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80096d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f000 8092 	beq.w	8009800 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6818      	ldr	r0, [r3, #0]
 80096e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096e2:	6959      	ldr	r1, [r3, #20]
 80096e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096e6:	88da      	ldrh	r2, [r3, #6]
 80096e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80096ec:	f005 f834 	bl	800e758 <USB_ReadPMA>
 80096f0:	e086      	b.n	8009800 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80096f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096f4:	78db      	ldrb	r3, [r3, #3]
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d10a      	bne.n	8009710 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80096fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80096fe:	461a      	mov	r2, r3
 8009700:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f9d9 	bl	8009aba <HAL_PCD_EP_DB_Receive>
 8009708:	4603      	mov	r3, r0
 800970a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800970e:	e077      	b.n	8009800 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	461a      	mov	r2, r3
 8009716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	4413      	add	r3, r2
 800971e:	881b      	ldrh	r3, [r3, #0]
 8009720:	b29b      	uxth	r3, r3
 8009722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800972a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	461a      	mov	r2, r3
 8009734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	441a      	add	r2, r3
 800973c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800974c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009750:	b29b      	uxth	r3, r3
 8009752:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	461a      	mov	r2, r3
 800975a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	4413      	add	r3, r2
 8009762:	881b      	ldrh	r3, [r3, #0]
 8009764:	b29b      	uxth	r3, r3
 8009766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800976a:	2b00      	cmp	r3, #0
 800976c:	d024      	beq.n	80097b8 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009776:	b29b      	uxth	r3, r3
 8009778:	461a      	mov	r2, r3
 800977a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	00db      	lsls	r3, r3, #3
 8009780:	4413      	add	r3, r2
 8009782:	3302      	adds	r3, #2
 8009784:	005b      	lsls	r3, r3, #1
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	6812      	ldr	r2, [r2, #0]
 800978a:	4413      	add	r3, r2
 800978c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009790:	881b      	ldrh	r3, [r3, #0]
 8009792:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009796:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800979a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d02e      	beq.n	8009800 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6818      	ldr	r0, [r3, #0]
 80097a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097a8:	6959      	ldr	r1, [r3, #20]
 80097aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097ac:	891a      	ldrh	r2, [r3, #8]
 80097ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80097b2:	f004 ffd1 	bl	800e758 <USB_ReadPMA>
 80097b6:	e023      	b.n	8009800 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	461a      	mov	r2, r3
 80097c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	00db      	lsls	r3, r3, #3
 80097ca:	4413      	add	r3, r2
 80097cc:	3306      	adds	r3, #6
 80097ce:	005b      	lsls	r3, r3, #1
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	6812      	ldr	r2, [r2, #0]
 80097d4:	4413      	add	r3, r2
 80097d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097e0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80097e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d009      	beq.n	8009800 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6818      	ldr	r0, [r3, #0]
 80097f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097f2:	6959      	ldr	r1, [r3, #20]
 80097f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097f6:	895a      	ldrh	r2, [r3, #10]
 80097f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80097fc:	f004 ffac 	bl	800e758 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8009800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009802:	69da      	ldr	r2, [r3, #28]
 8009804:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009808:	441a      	add	r2, r3
 800980a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800980c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800980e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009810:	695a      	ldr	r2, [r3, #20]
 8009812:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009816:	441a      	add	r2, r3
 8009818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800981a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800981c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800981e:	699b      	ldr	r3, [r3, #24]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d005      	beq.n	8009830 <PCD_EP_ISR_Handler+0x51c>
 8009824:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8009828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	429a      	cmp	r2, r3
 800982e:	d206      	bcs.n	800983e <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	4619      	mov	r1, r3
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f006 fd8a 	bl	8010350 <HAL_PCD_DataOutStageCallback>
 800983c:	e005      	b.n	800984a <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009844:	4618      	mov	r0, r3
 8009846:	f003 fa53 	bl	800ccf0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800984a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800984e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009852:	2b00      	cmp	r3, #0
 8009854:	f000 8123 	beq.w	8009a9e <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8009858:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800985c:	1c5a      	adds	r2, r3, #1
 800985e:	4613      	mov	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4413      	add	r3, r2
 8009864:	00db      	lsls	r3, r3, #3
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	4413      	add	r3, r2
 800986a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	461a      	mov	r2, r3
 8009872:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4413      	add	r3, r2
 800987a:	881b      	ldrh	r3, [r3, #0]
 800987c:	b29b      	uxth	r3, r3
 800987e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009886:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	461a      	mov	r2, r3
 8009890:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	441a      	add	r2, r3
 8009898:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800989c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80098a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098aa:	78db      	ldrb	r3, [r3, #3]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	f040 80a2 	bne.w	80099f6 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80098b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098b4:	2200      	movs	r2, #0
 80098b6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80098b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098ba:	7b1b      	ldrb	r3, [r3, #12]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f000 8093 	beq.w	80099e8 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80098c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80098c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d046      	beq.n	800995c <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80098ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098d0:	785b      	ldrb	r3, [r3, #1]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d126      	bne.n	8009924 <PCD_EP_ISR_Handler+0x610>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	627b      	str	r3, [r7, #36]	; 0x24
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	461a      	mov	r2, r3
 80098e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ea:	4413      	add	r3, r2
 80098ec:	627b      	str	r3, [r7, #36]	; 0x24
 80098ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	011a      	lsls	r2, r3, #4
 80098f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f6:	4413      	add	r3, r2
 80098f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80098fc:	623b      	str	r3, [r7, #32]
 80098fe:	6a3b      	ldr	r3, [r7, #32]
 8009900:	881b      	ldrh	r3, [r3, #0]
 8009902:	b29b      	uxth	r3, r3
 8009904:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009908:	b29a      	uxth	r2, r3
 800990a:	6a3b      	ldr	r3, [r7, #32]
 800990c:	801a      	strh	r2, [r3, #0]
 800990e:	6a3b      	ldr	r3, [r7, #32]
 8009910:	881b      	ldrh	r3, [r3, #0]
 8009912:	b29b      	uxth	r3, r3
 8009914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800991c:	b29a      	uxth	r2, r3
 800991e:	6a3b      	ldr	r3, [r7, #32]
 8009920:	801a      	strh	r2, [r3, #0]
 8009922:	e061      	b.n	80099e8 <PCD_EP_ISR_Handler+0x6d4>
 8009924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009926:	785b      	ldrb	r3, [r3, #1]
 8009928:	2b01      	cmp	r3, #1
 800992a:	d15d      	bne.n	80099e8 <PCD_EP_ISR_Handler+0x6d4>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800993a:	b29b      	uxth	r3, r3
 800993c:	461a      	mov	r2, r3
 800993e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009940:	4413      	add	r3, r2
 8009942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	011a      	lsls	r2, r3, #4
 800994a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994c:	4413      	add	r3, r2
 800994e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009952:	62bb      	str	r3, [r7, #40]	; 0x28
 8009954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009956:	2200      	movs	r2, #0
 8009958:	801a      	strh	r2, [r3, #0]
 800995a:	e045      	b.n	80099e8 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009964:	785b      	ldrb	r3, [r3, #1]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d126      	bne.n	80099b8 <PCD_EP_ISR_Handler+0x6a4>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	637b      	str	r3, [r7, #52]	; 0x34
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009978:	b29b      	uxth	r3, r3
 800997a:	461a      	mov	r2, r3
 800997c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800997e:	4413      	add	r3, r2
 8009980:	637b      	str	r3, [r7, #52]	; 0x34
 8009982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	011a      	lsls	r2, r3, #4
 8009988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800998a:	4413      	add	r3, r2
 800998c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009990:	633b      	str	r3, [r7, #48]	; 0x30
 8009992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009994:	881b      	ldrh	r3, [r3, #0]
 8009996:	b29b      	uxth	r3, r3
 8009998:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800999c:	b29a      	uxth	r2, r3
 800999e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a0:	801a      	strh	r2, [r3, #0]
 80099a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a4:	881b      	ldrh	r3, [r3, #0]
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b4:	801a      	strh	r2, [r3, #0]
 80099b6:	e017      	b.n	80099e8 <PCD_EP_ISR_Handler+0x6d4>
 80099b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099ba:	785b      	ldrb	r3, [r3, #1]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d113      	bne.n	80099e8 <PCD_EP_ISR_Handler+0x6d4>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	461a      	mov	r2, r3
 80099cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ce:	4413      	add	r3, r2
 80099d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	011a      	lsls	r2, r3, #4
 80099d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099da:	4413      	add	r3, r2
 80099dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80099e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80099e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e4:	2200      	movs	r2, #0
 80099e6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80099e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	4619      	mov	r1, r3
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f006 fcc9 	bl	8010386 <HAL_PCD_DataInStageCallback>
 80099f4:	e053      	b.n	8009a9e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80099f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80099fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d146      	bne.n	8009a90 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	00db      	lsls	r3, r3, #3
 8009a14:	4413      	add	r3, r2
 8009a16:	3302      	adds	r3, #2
 8009a18:	005b      	lsls	r3, r3, #1
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	6812      	ldr	r2, [r2, #0]
 8009a1e:	4413      	add	r3, r2
 8009a20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a24:	881b      	ldrh	r3, [r3, #0]
 8009a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8009a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a30:	699a      	ldr	r2, [r3, #24]
 8009a32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d907      	bls.n	8009a4a <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8009a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a3c:	699a      	ldr	r2, [r3, #24]
 8009a3e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009a42:	1ad2      	subs	r2, r2, r3
 8009a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a46:	619a      	str	r2, [r3, #24]
 8009a48:	e002      	b.n	8009a50 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8009a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8009a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a52:	699b      	ldr	r3, [r3, #24]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d106      	bne.n	8009a66 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f006 fc91 	bl	8010386 <HAL_PCD_DataInStageCallback>
 8009a64:	e01b      	b.n	8009a9e <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8009a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a68:	695a      	ldr	r2, [r3, #20]
 8009a6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009a6e:	441a      	add	r2, r3
 8009a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a72:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8009a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a76:	69da      	ldr	r2, [r3, #28]
 8009a78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009a7c:	441a      	add	r2, r3
 8009a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a80:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f003 f931 	bl	800ccf0 <USB_EPStartXfer>
 8009a8e:	e006      	b.n	8009a9e <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8009a90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009a94:	461a      	mov	r2, r3
 8009a96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 f91b 	bl	8009cd4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	b21b      	sxth	r3, r3
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f6ff ac37 	blt.w	800931e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3758      	adds	r7, #88	; 0x58
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b088      	sub	sp, #32
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	60f8      	str	r0, [r7, #12]
 8009ac2:	60b9      	str	r1, [r7, #8]
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009ac8:	88fb      	ldrh	r3, [r7, #6]
 8009aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d07e      	beq.n	8009bd0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	461a      	mov	r2, r3
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	00db      	lsls	r3, r3, #3
 8009ae4:	4413      	add	r3, r2
 8009ae6:	3302      	adds	r3, #2
 8009ae8:	005b      	lsls	r3, r3, #1
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	6812      	ldr	r2, [r2, #0]
 8009aee:	4413      	add	r3, r2
 8009af0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009af4:	881b      	ldrh	r3, [r3, #0]
 8009af6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009afa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	699a      	ldr	r2, [r3, #24]
 8009b00:	8b7b      	ldrh	r3, [r7, #26]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d306      	bcc.n	8009b14 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	699a      	ldr	r2, [r3, #24]
 8009b0a:	8b7b      	ldrh	r3, [r7, #26]
 8009b0c:	1ad2      	subs	r2, r2, r3
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	619a      	str	r2, [r3, #24]
 8009b12:	e002      	b.n	8009b1a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	2200      	movs	r2, #0
 8009b18:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	699b      	ldr	r3, [r3, #24]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d123      	bne.n	8009b6a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	461a      	mov	r2, r3
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4413      	add	r3, r2
 8009b30:	881b      	ldrh	r3, [r3, #0]
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b3c:	833b      	strh	r3, [r7, #24]
 8009b3e:	8b3b      	ldrh	r3, [r7, #24]
 8009b40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009b44:	833b      	strh	r3, [r7, #24]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	441a      	add	r2, r3
 8009b54:	8b3b      	ldrh	r3, [r7, #24]
 8009b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009b6a:	88fb      	ldrh	r3, [r7, #6]
 8009b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d01f      	beq.n	8009bb4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	461a      	mov	r2, r3
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	881b      	ldrh	r3, [r3, #0]
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b8e:	82fb      	strh	r3, [r7, #22]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	461a      	mov	r2, r3
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	441a      	add	r2, r3
 8009b9e:	8afb      	ldrh	r3, [r7, #22]
 8009ba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009bb4:	8b7b      	ldrh	r3, [r7, #26]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f000 8087 	beq.w	8009cca <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	6818      	ldr	r0, [r3, #0]
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	6959      	ldr	r1, [r3, #20]
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	891a      	ldrh	r2, [r3, #8]
 8009bc8:	8b7b      	ldrh	r3, [r7, #26]
 8009bca:	f004 fdc5 	bl	800e758 <USB_ReadPMA>
 8009bce:	e07c      	b.n	8009cca <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	461a      	mov	r2, r3
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	00db      	lsls	r3, r3, #3
 8009be2:	4413      	add	r3, r2
 8009be4:	3306      	adds	r3, #6
 8009be6:	005b      	lsls	r3, r3, #1
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	6812      	ldr	r2, [r2, #0]
 8009bec:	4413      	add	r3, r2
 8009bee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bf2:	881b      	ldrh	r3, [r3, #0]
 8009bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bf8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	699a      	ldr	r2, [r3, #24]
 8009bfe:	8b7b      	ldrh	r3, [r7, #26]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d306      	bcc.n	8009c12 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	699a      	ldr	r2, [r3, #24]
 8009c08:	8b7b      	ldrh	r3, [r7, #26]
 8009c0a:	1ad2      	subs	r2, r2, r3
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	619a      	str	r2, [r3, #24]
 8009c10:	e002      	b.n	8009c18 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	2200      	movs	r2, #0
 8009c16:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	699b      	ldr	r3, [r3, #24]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d123      	bne.n	8009c68 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	461a      	mov	r2, r3
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	4413      	add	r3, r2
 8009c2e:	881b      	ldrh	r3, [r3, #0]
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c3a:	83fb      	strh	r3, [r7, #30]
 8009c3c:	8bfb      	ldrh	r3, [r7, #30]
 8009c3e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c42:	83fb      	strh	r3, [r7, #30]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	461a      	mov	r2, r3
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	441a      	add	r2, r3
 8009c52:	8bfb      	ldrh	r3, [r7, #30]
 8009c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009c68:	88fb      	ldrh	r3, [r7, #6]
 8009c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d11f      	bne.n	8009cb2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	461a      	mov	r2, r3
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	881b      	ldrh	r3, [r3, #0]
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c8c:	83bb      	strh	r3, [r7, #28]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	461a      	mov	r2, r3
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	441a      	add	r2, r3
 8009c9c:	8bbb      	ldrh	r3, [r7, #28]
 8009c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009caa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009cb2:	8b7b      	ldrh	r3, [r7, #26]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d008      	beq.n	8009cca <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6818      	ldr	r0, [r3, #0]
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	6959      	ldr	r1, [r3, #20]
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	895a      	ldrh	r2, [r3, #10]
 8009cc4:	8b7b      	ldrh	r3, [r7, #26]
 8009cc6:	f004 fd47 	bl	800e758 <USB_ReadPMA>
    }
  }

  return count;
 8009cca:	8b7b      	ldrh	r3, [r7, #26]
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3720      	adds	r7, #32
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b0a4      	sub	sp, #144	; 0x90
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009ce2:	88fb      	ldrh	r3, [r7, #6]
 8009ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f000 81dd 	beq.w	800a0a8 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	00db      	lsls	r3, r3, #3
 8009d00:	4413      	add	r3, r2
 8009d02:	3302      	adds	r3, #2
 8009d04:	005b      	lsls	r3, r3, #1
 8009d06:	68fa      	ldr	r2, [r7, #12]
 8009d08:	6812      	ldr	r2, [r2, #0]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d10:	881b      	ldrh	r3, [r3, #0]
 8009d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d16:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	699a      	ldr	r2, [r3, #24]
 8009d1e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d907      	bls.n	8009d36 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	699a      	ldr	r2, [r3, #24]
 8009d2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009d2e:	1ad2      	subs	r2, r2, r3
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	619a      	str	r2, [r3, #24]
 8009d34:	e002      	b.n	8009d3c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f040 80b9 	bne.w	8009eb8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	785b      	ldrb	r3, [r3, #1]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d126      	bne.n	8009d9c <HAL_PCD_EP_DB_Transmit+0xc8>
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	461a      	mov	r2, r3
 8009d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d62:	4413      	add	r3, r2
 8009d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	011a      	lsls	r2, r3, #4
 8009d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6e:	4413      	add	r3, r2
 8009d70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d78:	881b      	ldrh	r3, [r3, #0]
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d84:	801a      	strh	r2, [r3, #0]
 8009d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d88:	881b      	ldrh	r3, [r3, #0]
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d98:	801a      	strh	r2, [r3, #0]
 8009d9a:	e01a      	b.n	8009dd2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	785b      	ldrb	r3, [r3, #1]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d116      	bne.n	8009dd2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	637b      	str	r3, [r7, #52]	; 0x34
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	461a      	mov	r2, r3
 8009db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009db8:	4413      	add	r3, r2
 8009dba:	637b      	str	r3, [r7, #52]	; 0x34
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	011a      	lsls	r2, r3, #4
 8009dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc4:	4413      	add	r3, r2
 8009dc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009dca:	633b      	str	r3, [r7, #48]	; 0x30
 8009dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dce:	2200      	movs	r2, #0
 8009dd0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	785b      	ldrb	r3, [r3, #1]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d126      	bne.n	8009e2e <HAL_PCD_EP_DB_Transmit+0x15a>
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	61fb      	str	r3, [r7, #28]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	461a      	mov	r2, r3
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	4413      	add	r3, r2
 8009df6:	61fb      	str	r3, [r7, #28]
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	011a      	lsls	r2, r3, #4
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	4413      	add	r3, r2
 8009e02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009e06:	61bb      	str	r3, [r7, #24]
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	881b      	ldrh	r3, [r3, #0]
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e12:	b29a      	uxth	r2, r3
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	801a      	strh	r2, [r3, #0]
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	881b      	ldrh	r3, [r3, #0]
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	801a      	strh	r2, [r3, #0]
 8009e2c:	e017      	b.n	8009e5e <HAL_PCD_EP_DB_Transmit+0x18a>
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	785b      	ldrb	r3, [r3, #1]
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d113      	bne.n	8009e5e <HAL_PCD_EP_DB_Transmit+0x18a>
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	461a      	mov	r2, r3
 8009e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e44:	4413      	add	r3, r2
 8009e46:	627b      	str	r3, [r7, #36]	; 0x24
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	011a      	lsls	r2, r3, #4
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e50:	4413      	add	r3, r2
 8009e52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009e56:	623b      	str	r3, [r7, #32]
 8009e58:	6a3b      	ldr	r3, [r7, #32]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	4619      	mov	r1, r3
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f006 fa8e 	bl	8010386 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009e6a:	88fb      	ldrh	r3, [r7, #6]
 8009e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	f000 82fc 	beq.w	800a46e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	4413      	add	r3, r2
 8009e84:	881b      	ldrh	r3, [r3, #0]
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e90:	82fb      	strh	r3, [r7, #22]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	461a      	mov	r2, r3
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	441a      	add	r2, r3
 8009ea0:	8afb      	ldrh	r3, [r7, #22]
 8009ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	8013      	strh	r3, [r2, #0]
 8009eb6:	e2da      	b.n	800a46e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009eb8:	88fb      	ldrh	r3, [r7, #6]
 8009eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d021      	beq.n	8009f06 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	4413      	add	r3, r2
 8009ed0:	881b      	ldrh	r3, [r3, #0]
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009edc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	441a      	add	r2, r3
 8009eee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009efa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	f040 82ae 	bne.w	800a46e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	695a      	ldr	r2, [r3, #20]
 8009f16:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009f1a:	441a      	add	r2, r3
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	69da      	ldr	r2, [r3, #28]
 8009f24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009f28:	441a      	add	r2, r3
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	6a1a      	ldr	r2, [r3, #32]
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d30b      	bcc.n	8009f52 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	691b      	ldr	r3, [r3, #16]
 8009f3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	6a1a      	ldr	r2, [r3, #32]
 8009f46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009f4a:	1ad2      	subs	r2, r2, r3
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	621a      	str	r2, [r3, #32]
 8009f50:	e017      	b.n	8009f82 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	6a1b      	ldr	r3, [r3, #32]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d108      	bne.n	8009f6c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8009f5a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009f5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009f6a:	e00a      	b.n	8009f82 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	6a1b      	ldr	r3, [r3, #32]
 8009f78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	785b      	ldrb	r3, [r3, #1]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d165      	bne.n	800a056 <HAL_PCD_EP_DB_Transmit+0x382>
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f9e:	4413      	add	r3, r2
 8009fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	011a      	lsls	r2, r3, #4
 8009fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009faa:	4413      	add	r3, r2
 8009fac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8009fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb4:	881b      	ldrh	r3, [r3, #0]
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc0:	801a      	strh	r2, [r3, #0]
 8009fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009fc6:	2b3e      	cmp	r3, #62	; 0x3e
 8009fc8:	d91d      	bls.n	800a006 <HAL_PCD_EP_DB_Transmit+0x332>
 8009fca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009fce:	095b      	lsrs	r3, r3, #5
 8009fd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009fd6:	f003 031f 	and.w	r3, r3, #31
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d102      	bne.n	8009fe4 <HAL_PCD_EP_DB_Transmit+0x310>
 8009fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe6:	881b      	ldrh	r3, [r3, #0]
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	029b      	lsls	r3, r3, #10
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a002:	801a      	strh	r2, [r3, #0]
 800a004:	e044      	b.n	800a090 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800a006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d10a      	bne.n	800a024 <HAL_PCD_EP_DB_Transmit+0x350>
 800a00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a010:	881b      	ldrh	r3, [r3, #0]
 800a012:	b29b      	uxth	r3, r3
 800a014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a01c:	b29a      	uxth	r2, r3
 800a01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a020:	801a      	strh	r2, [r3, #0]
 800a022:	e035      	b.n	800a090 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800a024:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a028:	085b      	lsrs	r3, r3, #1
 800a02a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a02c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a030:	f003 0301 	and.w	r3, r3, #1
 800a034:	2b00      	cmp	r3, #0
 800a036:	d002      	beq.n	800a03e <HAL_PCD_EP_DB_Transmit+0x36a>
 800a038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a03a:	3301      	adds	r3, #1
 800a03c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a040:	881b      	ldrh	r3, [r3, #0]
 800a042:	b29a      	uxth	r2, r3
 800a044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a046:	b29b      	uxth	r3, r3
 800a048:	029b      	lsls	r3, r3, #10
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	4313      	orrs	r3, r2
 800a04e:	b29a      	uxth	r2, r3
 800a050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a052:	801a      	strh	r2, [r3, #0]
 800a054:	e01c      	b.n	800a090 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	785b      	ldrb	r3, [r3, #1]
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d118      	bne.n	800a090 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	647b      	str	r3, [r7, #68]	; 0x44
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	461a      	mov	r2, r3
 800a070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a072:	4413      	add	r3, r2
 800a074:	647b      	str	r3, [r7, #68]	; 0x44
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	011a      	lsls	r2, r3, #4
 800a07c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a07e:	4413      	add	r3, r2
 800a080:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a084:	643b      	str	r3, [r7, #64]	; 0x40
 800a086:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a08e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6818      	ldr	r0, [r3, #0]
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	6959      	ldr	r1, [r3, #20]
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	891a      	ldrh	r2, [r3, #8]
 800a09c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	f004 fb14 	bl	800e6ce <USB_WritePMA>
 800a0a6:	e1e2      	b.n	800a46e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	00db      	lsls	r3, r3, #3
 800a0ba:	4413      	add	r3, r2
 800a0bc:	3306      	adds	r3, #6
 800a0be:	005b      	lsls	r3, r3, #1
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	6812      	ldr	r2, [r2, #0]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0ca:	881b      	ldrh	r3, [r3, #0]
 800a0cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0d0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	699a      	ldr	r2, [r3, #24]
 800a0d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d307      	bcc.n	800a0f0 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	699a      	ldr	r2, [r3, #24]
 800a0e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a0e8:	1ad2      	subs	r2, r2, r3
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	619a      	str	r2, [r3, #24]
 800a0ee:	e002      	b.n	800a0f6 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f040 80c0 	bne.w	800a280 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	785b      	ldrb	r3, [r3, #1]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d126      	bne.n	800a156 <HAL_PCD_EP_DB_Transmit+0x482>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a116:	b29b      	uxth	r3, r3
 800a118:	461a      	mov	r2, r3
 800a11a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a11c:	4413      	add	r3, r2
 800a11e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	011a      	lsls	r2, r3, #4
 800a126:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a128:	4413      	add	r3, r2
 800a12a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a12e:	67bb      	str	r3, [r7, #120]	; 0x78
 800a130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	b29b      	uxth	r3, r3
 800a136:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a13a:	b29a      	uxth	r2, r3
 800a13c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a13e:	801a      	strh	r2, [r3, #0]
 800a140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a142:	881b      	ldrh	r3, [r3, #0]
 800a144:	b29b      	uxth	r3, r3
 800a146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a14a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a14e:	b29a      	uxth	r2, r3
 800a150:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a152:	801a      	strh	r2, [r3, #0]
 800a154:	e01a      	b.n	800a18c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	785b      	ldrb	r3, [r3, #1]
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d116      	bne.n	800a18c <HAL_PCD_EP_DB_Transmit+0x4b8>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	667b      	str	r3, [r7, #100]	; 0x64
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	461a      	mov	r2, r3
 800a170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a172:	4413      	add	r3, r2
 800a174:	667b      	str	r3, [r7, #100]	; 0x64
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	011a      	lsls	r2, r3, #4
 800a17c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a17e:	4413      	add	r3, r2
 800a180:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a184:	663b      	str	r3, [r7, #96]	; 0x60
 800a186:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a188:	2200      	movs	r2, #0
 800a18a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	677b      	str	r3, [r7, #116]	; 0x74
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	785b      	ldrb	r3, [r3, #1]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d12b      	bne.n	800a1f2 <HAL_PCD_EP_DB_Transmit+0x51e>
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1ae:	4413      	add	r3, r2
 800a1b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	011a      	lsls	r2, r3, #4
 800a1b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1ba:	4413      	add	r3, r2
 800a1bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a1c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a1c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a1c8:	881b      	ldrh	r3, [r3, #0]
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a1d6:	801a      	strh	r2, [r3, #0]
 800a1d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a1dc:	881b      	ldrh	r3, [r3, #0]
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a1ee:	801a      	strh	r2, [r3, #0]
 800a1f0:	e017      	b.n	800a222 <HAL_PCD_EP_DB_Transmit+0x54e>
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	785b      	ldrb	r3, [r3, #1]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d113      	bne.n	800a222 <HAL_PCD_EP_DB_Transmit+0x54e>
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a202:	b29b      	uxth	r3, r3
 800a204:	461a      	mov	r2, r3
 800a206:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a208:	4413      	add	r3, r2
 800a20a:	677b      	str	r3, [r7, #116]	; 0x74
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	011a      	lsls	r2, r3, #4
 800a212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a214:	4413      	add	r3, r2
 800a216:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a21a:	673b      	str	r3, [r7, #112]	; 0x70
 800a21c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a21e:	2200      	movs	r2, #0
 800a220:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	4619      	mov	r1, r3
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f006 f8ac 	bl	8010386 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a22e:	88fb      	ldrh	r3, [r7, #6]
 800a230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a234:	2b00      	cmp	r3, #0
 800a236:	f040 811a 	bne.w	800a46e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	461a      	mov	r2, r3
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	4413      	add	r3, r2
 800a248:	881b      	ldrh	r3, [r3, #0]
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a254:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	461a      	mov	r2, r3
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	441a      	add	r2, r3
 800a266:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800a26a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a26e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a272:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	8013      	strh	r3, [r2, #0]
 800a27e:	e0f6      	b.n	800a46e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a280:	88fb      	ldrh	r3, [r7, #6]
 800a282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a286:	2b00      	cmp	r3, #0
 800a288:	d121      	bne.n	800a2ce <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	461a      	mov	r2, r3
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	781b      	ldrb	r3, [r3, #0]
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	4413      	add	r3, r2
 800a298:	881b      	ldrh	r3, [r3, #0]
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	441a      	add	r2, r3
 800a2b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a2ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a2c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	f040 80ca 	bne.w	800a46e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	695a      	ldr	r2, [r3, #20]
 800a2de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a2e2:	441a      	add	r2, r3
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	69da      	ldr	r2, [r3, #28]
 800a2ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a2f0:	441a      	add	r2, r3
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	6a1a      	ldr	r2, [r3, #32]
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	691b      	ldr	r3, [r3, #16]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d30b      	bcc.n	800a31a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	6a1a      	ldr	r2, [r3, #32]
 800a30e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a312:	1ad2      	subs	r2, r2, r3
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	621a      	str	r2, [r3, #32]
 800a318:	e017      	b.n	800a34a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	6a1b      	ldr	r3, [r3, #32]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d108      	bne.n	800a334 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800a322:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a326:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	2200      	movs	r2, #0
 800a32e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a332:	e00a      	b.n	800a34a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	6a1b      	ldr	r3, [r3, #32]
 800a338:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	2200      	movs	r2, #0
 800a340:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	2200      	movs	r2, #0
 800a346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	657b      	str	r3, [r7, #84]	; 0x54
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	785b      	ldrb	r3, [r3, #1]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d165      	bne.n	800a424 <HAL_PCD_EP_DB_Transmit+0x750>
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a366:	b29b      	uxth	r3, r3
 800a368:	461a      	mov	r2, r3
 800a36a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a36c:	4413      	add	r3, r2
 800a36e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	011a      	lsls	r2, r3, #4
 800a376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a378:	4413      	add	r3, r2
 800a37a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a37e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a380:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a382:	881b      	ldrh	r3, [r3, #0]
 800a384:	b29b      	uxth	r3, r3
 800a386:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a38a:	b29a      	uxth	r2, r3
 800a38c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a38e:	801a      	strh	r2, [r3, #0]
 800a390:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a394:	2b3e      	cmp	r3, #62	; 0x3e
 800a396:	d91d      	bls.n	800a3d4 <HAL_PCD_EP_DB_Transmit+0x700>
 800a398:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a39c:	095b      	lsrs	r3, r3, #5
 800a39e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a3a4:	f003 031f 	and.w	r3, r3, #31
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d102      	bne.n	800a3b2 <HAL_PCD_EP_DB_Transmit+0x6de>
 800a3ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3ae:	3b01      	subs	r3, #1
 800a3b0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a3b4:	881b      	ldrh	r3, [r3, #0]
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	029b      	lsls	r3, r3, #10
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3cc:	b29a      	uxth	r2, r3
 800a3ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a3d0:	801a      	strh	r2, [r3, #0]
 800a3d2:	e041      	b.n	800a458 <HAL_PCD_EP_DB_Transmit+0x784>
 800a3d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d10a      	bne.n	800a3f2 <HAL_PCD_EP_DB_Transmit+0x71e>
 800a3dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a3de:	881b      	ldrh	r3, [r3, #0]
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3ea:	b29a      	uxth	r2, r3
 800a3ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a3ee:	801a      	strh	r2, [r3, #0]
 800a3f0:	e032      	b.n	800a458 <HAL_PCD_EP_DB_Transmit+0x784>
 800a3f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a3f6:	085b      	lsrs	r3, r3, #1
 800a3f8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a3fe:	f003 0301 	and.w	r3, r3, #1
 800a402:	2b00      	cmp	r3, #0
 800a404:	d002      	beq.n	800a40c <HAL_PCD_EP_DB_Transmit+0x738>
 800a406:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a408:	3301      	adds	r3, #1
 800a40a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a40c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a40e:	881b      	ldrh	r3, [r3, #0]
 800a410:	b29a      	uxth	r2, r3
 800a412:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a414:	b29b      	uxth	r3, r3
 800a416:	029b      	lsls	r3, r3, #10
 800a418:	b29b      	uxth	r3, r3
 800a41a:	4313      	orrs	r3, r2
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a420:	801a      	strh	r2, [r3, #0]
 800a422:	e019      	b.n	800a458 <HAL_PCD_EP_DB_Transmit+0x784>
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	785b      	ldrb	r3, [r3, #1]
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d115      	bne.n	800a458 <HAL_PCD_EP_DB_Transmit+0x784>
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a434:	b29b      	uxth	r3, r3
 800a436:	461a      	mov	r2, r3
 800a438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a43a:	4413      	add	r3, r2
 800a43c:	657b      	str	r3, [r7, #84]	; 0x54
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	011a      	lsls	r2, r3, #4
 800a444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a446:	4413      	add	r3, r2
 800a448:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a44c:	653b      	str	r3, [r7, #80]	; 0x50
 800a44e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a452:	b29a      	uxth	r2, r3
 800a454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a456:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6818      	ldr	r0, [r3, #0]
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	6959      	ldr	r1, [r3, #20]
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	895a      	ldrh	r2, [r3, #10]
 800a464:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a468:	b29b      	uxth	r3, r3
 800a46a:	f004 f930 	bl	800e6ce <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	461a      	mov	r2, r3
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	4413      	add	r3, r2
 800a47c:	881b      	ldrh	r3, [r3, #0]
 800a47e:	b29b      	uxth	r3, r3
 800a480:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a488:	82bb      	strh	r3, [r7, #20]
 800a48a:	8abb      	ldrh	r3, [r7, #20]
 800a48c:	f083 0310 	eor.w	r3, r3, #16
 800a490:	82bb      	strh	r3, [r7, #20]
 800a492:	8abb      	ldrh	r3, [r7, #20]
 800a494:	f083 0320 	eor.w	r3, r3, #32
 800a498:	82bb      	strh	r3, [r7, #20]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	441a      	add	r2, r3
 800a4a8:	8abb      	ldrh	r3, [r7, #20]
 800a4aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3790      	adds	r7, #144	; 0x90
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b087      	sub	sp, #28
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	607b      	str	r3, [r7, #4]
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	817b      	strh	r3, [r7, #10]
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a4da:	897b      	ldrh	r3, [r7, #10]
 800a4dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00b      	beq.n	800a4fe <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a4e6:	897b      	ldrh	r3, [r7, #10]
 800a4e8:	f003 0307 	and.w	r3, r3, #7
 800a4ec:	1c5a      	adds	r2, r3, #1
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	4413      	add	r3, r2
 800a4f4:	00db      	lsls	r3, r3, #3
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	617b      	str	r3, [r7, #20]
 800a4fc:	e009      	b.n	800a512 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a4fe:	897a      	ldrh	r2, [r7, #10]
 800a500:	4613      	mov	r3, r2
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4413      	add	r3, r2
 800a506:	00db      	lsls	r3, r3, #3
 800a508:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	4413      	add	r3, r2
 800a510:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a512:	893b      	ldrh	r3, [r7, #8]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d107      	bne.n	800a528 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	2200      	movs	r2, #0
 800a51c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	b29a      	uxth	r2, r3
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	80da      	strh	r2, [r3, #6]
 800a526:	e00b      	b.n	800a540 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	2201      	movs	r2, #1
 800a52c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	b29a      	uxth	r2, r3
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	0c1b      	lsrs	r3, r3, #16
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	371c      	adds	r7, #28
 800a546:	46bd      	mov	sp, r7
 800a548:	bc80      	pop	{r7}
 800a54a:	4770      	bx	lr

0800a54c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b086      	sub	sp, #24
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d101      	bne.n	800a55e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	e272      	b.n	800aa44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f003 0301 	and.w	r3, r3, #1
 800a566:	2b00      	cmp	r3, #0
 800a568:	f000 8087 	beq.w	800a67a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a56c:	4b92      	ldr	r3, [pc, #584]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	f003 030c 	and.w	r3, r3, #12
 800a574:	2b04      	cmp	r3, #4
 800a576:	d00c      	beq.n	800a592 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a578:	4b8f      	ldr	r3, [pc, #572]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	f003 030c 	and.w	r3, r3, #12
 800a580:	2b08      	cmp	r3, #8
 800a582:	d112      	bne.n	800a5aa <HAL_RCC_OscConfig+0x5e>
 800a584:	4b8c      	ldr	r3, [pc, #560]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a58c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a590:	d10b      	bne.n	800a5aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a592:	4b89      	ldr	r3, [pc, #548]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d06c      	beq.n	800a678 <HAL_RCC_OscConfig+0x12c>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d168      	bne.n	800a678 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e24c      	b.n	800aa44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5b2:	d106      	bne.n	800a5c2 <HAL_RCC_OscConfig+0x76>
 800a5b4:	4b80      	ldr	r3, [pc, #512]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a7f      	ldr	r2, [pc, #508]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a5ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5be:	6013      	str	r3, [r2, #0]
 800a5c0:	e02e      	b.n	800a620 <HAL_RCC_OscConfig+0xd4>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d10c      	bne.n	800a5e4 <HAL_RCC_OscConfig+0x98>
 800a5ca:	4b7b      	ldr	r3, [pc, #492]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a7a      	ldr	r2, [pc, #488]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a5d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5d4:	6013      	str	r3, [r2, #0]
 800a5d6:	4b78      	ldr	r3, [pc, #480]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a77      	ldr	r2, [pc, #476]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a5dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5e0:	6013      	str	r3, [r2, #0]
 800a5e2:	e01d      	b.n	800a620 <HAL_RCC_OscConfig+0xd4>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a5ec:	d10c      	bne.n	800a608 <HAL_RCC_OscConfig+0xbc>
 800a5ee:	4b72      	ldr	r3, [pc, #456]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a71      	ldr	r2, [pc, #452]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a5f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a5f8:	6013      	str	r3, [r2, #0]
 800a5fa:	4b6f      	ldr	r3, [pc, #444]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a6e      	ldr	r2, [pc, #440]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a604:	6013      	str	r3, [r2, #0]
 800a606:	e00b      	b.n	800a620 <HAL_RCC_OscConfig+0xd4>
 800a608:	4b6b      	ldr	r3, [pc, #428]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a6a      	ldr	r2, [pc, #424]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a60e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a612:	6013      	str	r3, [r2, #0]
 800a614:	4b68      	ldr	r3, [pc, #416]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a67      	ldr	r2, [pc, #412]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a61a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a61e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d013      	beq.n	800a650 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a628:	f7fa fa2c 	bl	8004a84 <HAL_GetTick>
 800a62c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a62e:	e008      	b.n	800a642 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a630:	f7fa fa28 	bl	8004a84 <HAL_GetTick>
 800a634:	4602      	mov	r2, r0
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	2b64      	cmp	r3, #100	; 0x64
 800a63c:	d901      	bls.n	800a642 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a63e:	2303      	movs	r3, #3
 800a640:	e200      	b.n	800aa44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a642:	4b5d      	ldr	r3, [pc, #372]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d0f0      	beq.n	800a630 <HAL_RCC_OscConfig+0xe4>
 800a64e:	e014      	b.n	800a67a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a650:	f7fa fa18 	bl	8004a84 <HAL_GetTick>
 800a654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a656:	e008      	b.n	800a66a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a658:	f7fa fa14 	bl	8004a84 <HAL_GetTick>
 800a65c:	4602      	mov	r2, r0
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	1ad3      	subs	r3, r2, r3
 800a662:	2b64      	cmp	r3, #100	; 0x64
 800a664:	d901      	bls.n	800a66a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a666:	2303      	movs	r3, #3
 800a668:	e1ec      	b.n	800aa44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a66a:	4b53      	ldr	r3, [pc, #332]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a672:	2b00      	cmp	r3, #0
 800a674:	d1f0      	bne.n	800a658 <HAL_RCC_OscConfig+0x10c>
 800a676:	e000      	b.n	800a67a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f003 0302 	and.w	r3, r3, #2
 800a682:	2b00      	cmp	r3, #0
 800a684:	d063      	beq.n	800a74e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a686:	4b4c      	ldr	r3, [pc, #304]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	f003 030c 	and.w	r3, r3, #12
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00b      	beq.n	800a6aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a692:	4b49      	ldr	r3, [pc, #292]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	f003 030c 	and.w	r3, r3, #12
 800a69a:	2b08      	cmp	r3, #8
 800a69c:	d11c      	bne.n	800a6d8 <HAL_RCC_OscConfig+0x18c>
 800a69e:	4b46      	ldr	r3, [pc, #280]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d116      	bne.n	800a6d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a6aa:	4b43      	ldr	r3, [pc, #268]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f003 0302 	and.w	r3, r3, #2
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d005      	beq.n	800a6c2 <HAL_RCC_OscConfig+0x176>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d001      	beq.n	800a6c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e1c0      	b.n	800aa44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6c2:	4b3d      	ldr	r3, [pc, #244]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	00db      	lsls	r3, r3, #3
 800a6d0:	4939      	ldr	r1, [pc, #228]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a6d6:	e03a      	b.n	800a74e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d020      	beq.n	800a722 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a6e0:	4b36      	ldr	r3, [pc, #216]	; (800a7bc <HAL_RCC_OscConfig+0x270>)
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6e6:	f7fa f9cd 	bl	8004a84 <HAL_GetTick>
 800a6ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6ec:	e008      	b.n	800a700 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6ee:	f7fa f9c9 	bl	8004a84 <HAL_GetTick>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	1ad3      	subs	r3, r2, r3
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d901      	bls.n	800a700 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a6fc:	2303      	movs	r3, #3
 800a6fe:	e1a1      	b.n	800aa44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a700:	4b2d      	ldr	r3, [pc, #180]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f003 0302 	and.w	r3, r3, #2
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d0f0      	beq.n	800a6ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a70c:	4b2a      	ldr	r3, [pc, #168]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	695b      	ldr	r3, [r3, #20]
 800a718:	00db      	lsls	r3, r3, #3
 800a71a:	4927      	ldr	r1, [pc, #156]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a71c:	4313      	orrs	r3, r2
 800a71e:	600b      	str	r3, [r1, #0]
 800a720:	e015      	b.n	800a74e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a722:	4b26      	ldr	r3, [pc, #152]	; (800a7bc <HAL_RCC_OscConfig+0x270>)
 800a724:	2200      	movs	r2, #0
 800a726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a728:	f7fa f9ac 	bl	8004a84 <HAL_GetTick>
 800a72c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a72e:	e008      	b.n	800a742 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a730:	f7fa f9a8 	bl	8004a84 <HAL_GetTick>
 800a734:	4602      	mov	r2, r0
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	1ad3      	subs	r3, r2, r3
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d901      	bls.n	800a742 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a73e:	2303      	movs	r3, #3
 800a740:	e180      	b.n	800aa44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a742:	4b1d      	ldr	r3, [pc, #116]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f003 0302 	and.w	r3, r3, #2
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1f0      	bne.n	800a730 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f003 0308 	and.w	r3, r3, #8
 800a756:	2b00      	cmp	r3, #0
 800a758:	d03a      	beq.n	800a7d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d019      	beq.n	800a796 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a762:	4b17      	ldr	r3, [pc, #92]	; (800a7c0 <HAL_RCC_OscConfig+0x274>)
 800a764:	2201      	movs	r2, #1
 800a766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a768:	f7fa f98c 	bl	8004a84 <HAL_GetTick>
 800a76c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a76e:	e008      	b.n	800a782 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a770:	f7fa f988 	bl	8004a84 <HAL_GetTick>
 800a774:	4602      	mov	r2, r0
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	1ad3      	subs	r3, r2, r3
 800a77a:	2b02      	cmp	r3, #2
 800a77c:	d901      	bls.n	800a782 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a77e:	2303      	movs	r3, #3
 800a780:	e160      	b.n	800aa44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a782:	4b0d      	ldr	r3, [pc, #52]	; (800a7b8 <HAL_RCC_OscConfig+0x26c>)
 800a784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a786:	f003 0302 	and.w	r3, r3, #2
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d0f0      	beq.n	800a770 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a78e:	2001      	movs	r0, #1
 800a790:	f000 fad0 	bl	800ad34 <RCC_Delay>
 800a794:	e01c      	b.n	800a7d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a796:	4b0a      	ldr	r3, [pc, #40]	; (800a7c0 <HAL_RCC_OscConfig+0x274>)
 800a798:	2200      	movs	r2, #0
 800a79a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a79c:	f7fa f972 	bl	8004a84 <HAL_GetTick>
 800a7a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a7a2:	e00f      	b.n	800a7c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a7a4:	f7fa f96e 	bl	8004a84 <HAL_GetTick>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	1ad3      	subs	r3, r2, r3
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	d908      	bls.n	800a7c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a7b2:	2303      	movs	r3, #3
 800a7b4:	e146      	b.n	800aa44 <HAL_RCC_OscConfig+0x4f8>
 800a7b6:	bf00      	nop
 800a7b8:	40021000 	.word	0x40021000
 800a7bc:	42420000 	.word	0x42420000
 800a7c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a7c4:	4b92      	ldr	r3, [pc, #584]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c8:	f003 0302 	and.w	r3, r3, #2
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1e9      	bne.n	800a7a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 0304 	and.w	r3, r3, #4
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f000 80a6 	beq.w	800a92a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a7e2:	4b8b      	ldr	r3, [pc, #556]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a7e4:	69db      	ldr	r3, [r3, #28]
 800a7e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d10d      	bne.n	800a80a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a7ee:	4b88      	ldr	r3, [pc, #544]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a7f0:	69db      	ldr	r3, [r3, #28]
 800a7f2:	4a87      	ldr	r2, [pc, #540]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a7f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7f8:	61d3      	str	r3, [r2, #28]
 800a7fa:	4b85      	ldr	r3, [pc, #532]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a7fc:	69db      	ldr	r3, [r3, #28]
 800a7fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a802:	60bb      	str	r3, [r7, #8]
 800a804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a806:	2301      	movs	r3, #1
 800a808:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a80a:	4b82      	ldr	r3, [pc, #520]	; (800aa14 <HAL_RCC_OscConfig+0x4c8>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a812:	2b00      	cmp	r3, #0
 800a814:	d118      	bne.n	800a848 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a816:	4b7f      	ldr	r3, [pc, #508]	; (800aa14 <HAL_RCC_OscConfig+0x4c8>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a7e      	ldr	r2, [pc, #504]	; (800aa14 <HAL_RCC_OscConfig+0x4c8>)
 800a81c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a822:	f7fa f92f 	bl	8004a84 <HAL_GetTick>
 800a826:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a828:	e008      	b.n	800a83c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a82a:	f7fa f92b 	bl	8004a84 <HAL_GetTick>
 800a82e:	4602      	mov	r2, r0
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	1ad3      	subs	r3, r2, r3
 800a834:	2b64      	cmp	r3, #100	; 0x64
 800a836:	d901      	bls.n	800a83c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a838:	2303      	movs	r3, #3
 800a83a:	e103      	b.n	800aa44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a83c:	4b75      	ldr	r3, [pc, #468]	; (800aa14 <HAL_RCC_OscConfig+0x4c8>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a844:	2b00      	cmp	r3, #0
 800a846:	d0f0      	beq.n	800a82a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d106      	bne.n	800a85e <HAL_RCC_OscConfig+0x312>
 800a850:	4b6f      	ldr	r3, [pc, #444]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a852:	6a1b      	ldr	r3, [r3, #32]
 800a854:	4a6e      	ldr	r2, [pc, #440]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a856:	f043 0301 	orr.w	r3, r3, #1
 800a85a:	6213      	str	r3, [r2, #32]
 800a85c:	e02d      	b.n	800a8ba <HAL_RCC_OscConfig+0x36e>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10c      	bne.n	800a880 <HAL_RCC_OscConfig+0x334>
 800a866:	4b6a      	ldr	r3, [pc, #424]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a868:	6a1b      	ldr	r3, [r3, #32]
 800a86a:	4a69      	ldr	r2, [pc, #420]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a86c:	f023 0301 	bic.w	r3, r3, #1
 800a870:	6213      	str	r3, [r2, #32]
 800a872:	4b67      	ldr	r3, [pc, #412]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a874:	6a1b      	ldr	r3, [r3, #32]
 800a876:	4a66      	ldr	r2, [pc, #408]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a878:	f023 0304 	bic.w	r3, r3, #4
 800a87c:	6213      	str	r3, [r2, #32]
 800a87e:	e01c      	b.n	800a8ba <HAL_RCC_OscConfig+0x36e>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	68db      	ldr	r3, [r3, #12]
 800a884:	2b05      	cmp	r3, #5
 800a886:	d10c      	bne.n	800a8a2 <HAL_RCC_OscConfig+0x356>
 800a888:	4b61      	ldr	r3, [pc, #388]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a88a:	6a1b      	ldr	r3, [r3, #32]
 800a88c:	4a60      	ldr	r2, [pc, #384]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a88e:	f043 0304 	orr.w	r3, r3, #4
 800a892:	6213      	str	r3, [r2, #32]
 800a894:	4b5e      	ldr	r3, [pc, #376]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a896:	6a1b      	ldr	r3, [r3, #32]
 800a898:	4a5d      	ldr	r2, [pc, #372]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a89a:	f043 0301 	orr.w	r3, r3, #1
 800a89e:	6213      	str	r3, [r2, #32]
 800a8a0:	e00b      	b.n	800a8ba <HAL_RCC_OscConfig+0x36e>
 800a8a2:	4b5b      	ldr	r3, [pc, #364]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a8a4:	6a1b      	ldr	r3, [r3, #32]
 800a8a6:	4a5a      	ldr	r2, [pc, #360]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a8a8:	f023 0301 	bic.w	r3, r3, #1
 800a8ac:	6213      	str	r3, [r2, #32]
 800a8ae:	4b58      	ldr	r3, [pc, #352]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a8b0:	6a1b      	ldr	r3, [r3, #32]
 800a8b2:	4a57      	ldr	r2, [pc, #348]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a8b4:	f023 0304 	bic.w	r3, r3, #4
 800a8b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d015      	beq.n	800a8ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a8c2:	f7fa f8df 	bl	8004a84 <HAL_GetTick>
 800a8c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8c8:	e00a      	b.n	800a8e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8ca:	f7fa f8db 	bl	8004a84 <HAL_GetTick>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	1ad3      	subs	r3, r2, r3
 800a8d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d901      	bls.n	800a8e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	e0b1      	b.n	800aa44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8e0:	4b4b      	ldr	r3, [pc, #300]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a8e2:	6a1b      	ldr	r3, [r3, #32]
 800a8e4:	f003 0302 	and.w	r3, r3, #2
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d0ee      	beq.n	800a8ca <HAL_RCC_OscConfig+0x37e>
 800a8ec:	e014      	b.n	800a918 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a8ee:	f7fa f8c9 	bl	8004a84 <HAL_GetTick>
 800a8f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a8f4:	e00a      	b.n	800a90c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8f6:	f7fa f8c5 	bl	8004a84 <HAL_GetTick>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	1ad3      	subs	r3, r2, r3
 800a900:	f241 3288 	movw	r2, #5000	; 0x1388
 800a904:	4293      	cmp	r3, r2
 800a906:	d901      	bls.n	800a90c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a908:	2303      	movs	r3, #3
 800a90a:	e09b      	b.n	800aa44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a90c:	4b40      	ldr	r3, [pc, #256]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a90e:	6a1b      	ldr	r3, [r3, #32]
 800a910:	f003 0302 	and.w	r3, r3, #2
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1ee      	bne.n	800a8f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a918:	7dfb      	ldrb	r3, [r7, #23]
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d105      	bne.n	800a92a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a91e:	4b3c      	ldr	r3, [pc, #240]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a920:	69db      	ldr	r3, [r3, #28]
 800a922:	4a3b      	ldr	r2, [pc, #236]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a928:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	69db      	ldr	r3, [r3, #28]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	f000 8087 	beq.w	800aa42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a934:	4b36      	ldr	r3, [pc, #216]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	f003 030c 	and.w	r3, r3, #12
 800a93c:	2b08      	cmp	r3, #8
 800a93e:	d061      	beq.n	800aa04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	69db      	ldr	r3, [r3, #28]
 800a944:	2b02      	cmp	r3, #2
 800a946:	d146      	bne.n	800a9d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a948:	4b33      	ldr	r3, [pc, #204]	; (800aa18 <HAL_RCC_OscConfig+0x4cc>)
 800a94a:	2200      	movs	r2, #0
 800a94c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a94e:	f7fa f899 	bl	8004a84 <HAL_GetTick>
 800a952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a954:	e008      	b.n	800a968 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a956:	f7fa f895 	bl	8004a84 <HAL_GetTick>
 800a95a:	4602      	mov	r2, r0
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	1ad3      	subs	r3, r2, r3
 800a960:	2b02      	cmp	r3, #2
 800a962:	d901      	bls.n	800a968 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a964:	2303      	movs	r3, #3
 800a966:	e06d      	b.n	800aa44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a968:	4b29      	ldr	r3, [pc, #164]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1f0      	bne.n	800a956 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6a1b      	ldr	r3, [r3, #32]
 800a978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a97c:	d108      	bne.n	800a990 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a97e:	4b24      	ldr	r3, [pc, #144]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	4921      	ldr	r1, [pc, #132]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a98c:	4313      	orrs	r3, r2
 800a98e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a990:	4b1f      	ldr	r3, [pc, #124]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6a19      	ldr	r1, [r3, #32]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a0:	430b      	orrs	r3, r1
 800a9a2:	491b      	ldr	r1, [pc, #108]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a9a8:	4b1b      	ldr	r3, [pc, #108]	; (800aa18 <HAL_RCC_OscConfig+0x4cc>)
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9ae:	f7fa f869 	bl	8004a84 <HAL_GetTick>
 800a9b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a9b4:	e008      	b.n	800a9c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9b6:	f7fa f865 	bl	8004a84 <HAL_GetTick>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	1ad3      	subs	r3, r2, r3
 800a9c0:	2b02      	cmp	r3, #2
 800a9c2:	d901      	bls.n	800a9c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a9c4:	2303      	movs	r3, #3
 800a9c6:	e03d      	b.n	800aa44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a9c8:	4b11      	ldr	r3, [pc, #68]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d0f0      	beq.n	800a9b6 <HAL_RCC_OscConfig+0x46a>
 800a9d4:	e035      	b.n	800aa42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a9d6:	4b10      	ldr	r3, [pc, #64]	; (800aa18 <HAL_RCC_OscConfig+0x4cc>)
 800a9d8:	2200      	movs	r2, #0
 800a9da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9dc:	f7fa f852 	bl	8004a84 <HAL_GetTick>
 800a9e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a9e2:	e008      	b.n	800a9f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9e4:	f7fa f84e 	bl	8004a84 <HAL_GetTick>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	1ad3      	subs	r3, r2, r3
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d901      	bls.n	800a9f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a9f2:	2303      	movs	r3, #3
 800a9f4:	e026      	b.n	800aa44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a9f6:	4b06      	ldr	r3, [pc, #24]	; (800aa10 <HAL_RCC_OscConfig+0x4c4>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d1f0      	bne.n	800a9e4 <HAL_RCC_OscConfig+0x498>
 800aa02:	e01e      	b.n	800aa42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	69db      	ldr	r3, [r3, #28]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d107      	bne.n	800aa1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	e019      	b.n	800aa44 <HAL_RCC_OscConfig+0x4f8>
 800aa10:	40021000 	.word	0x40021000
 800aa14:	40007000 	.word	0x40007000
 800aa18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800aa1c:	4b0b      	ldr	r3, [pc, #44]	; (800aa4c <HAL_RCC_OscConfig+0x500>)
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6a1b      	ldr	r3, [r3, #32]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d106      	bne.n	800aa3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d001      	beq.n	800aa42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e000      	b.n	800aa44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3718      	adds	r7, #24
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	40021000 	.word	0x40021000

0800aa50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d101      	bne.n	800aa64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aa60:	2301      	movs	r3, #1
 800aa62:	e0d0      	b.n	800ac06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aa64:	4b6a      	ldr	r3, [pc, #424]	; (800ac10 <HAL_RCC_ClockConfig+0x1c0>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f003 0307 	and.w	r3, r3, #7
 800aa6c:	683a      	ldr	r2, [r7, #0]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d910      	bls.n	800aa94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa72:	4b67      	ldr	r3, [pc, #412]	; (800ac10 <HAL_RCC_ClockConfig+0x1c0>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f023 0207 	bic.w	r2, r3, #7
 800aa7a:	4965      	ldr	r1, [pc, #404]	; (800ac10 <HAL_RCC_ClockConfig+0x1c0>)
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa82:	4b63      	ldr	r3, [pc, #396]	; (800ac10 <HAL_RCC_ClockConfig+0x1c0>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f003 0307 	and.w	r3, r3, #7
 800aa8a:	683a      	ldr	r2, [r7, #0]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d001      	beq.n	800aa94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800aa90:	2301      	movs	r3, #1
 800aa92:	e0b8      	b.n	800ac06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f003 0302 	and.w	r3, r3, #2
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d020      	beq.n	800aae2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f003 0304 	and.w	r3, r3, #4
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d005      	beq.n	800aab8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aaac:	4b59      	ldr	r3, [pc, #356]	; (800ac14 <HAL_RCC_ClockConfig+0x1c4>)
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	4a58      	ldr	r2, [pc, #352]	; (800ac14 <HAL_RCC_ClockConfig+0x1c4>)
 800aab2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800aab6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 0308 	and.w	r3, r3, #8
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d005      	beq.n	800aad0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800aac4:	4b53      	ldr	r3, [pc, #332]	; (800ac14 <HAL_RCC_ClockConfig+0x1c4>)
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	4a52      	ldr	r2, [pc, #328]	; (800ac14 <HAL_RCC_ClockConfig+0x1c4>)
 800aaca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800aace:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aad0:	4b50      	ldr	r3, [pc, #320]	; (800ac14 <HAL_RCC_ClockConfig+0x1c4>)
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	689b      	ldr	r3, [r3, #8]
 800aadc:	494d      	ldr	r1, [pc, #308]	; (800ac14 <HAL_RCC_ClockConfig+0x1c4>)
 800aade:	4313      	orrs	r3, r2
 800aae0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f003 0301 	and.w	r3, r3, #1
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d040      	beq.n	800ab70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d107      	bne.n	800ab06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aaf6:	4b47      	ldr	r3, [pc, #284]	; (800ac14 <HAL_RCC_ClockConfig+0x1c4>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d115      	bne.n	800ab2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	e07f      	b.n	800ac06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d107      	bne.n	800ab1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab0e:	4b41      	ldr	r3, [pc, #260]	; (800ac14 <HAL_RCC_ClockConfig+0x1c4>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d109      	bne.n	800ab2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e073      	b.n	800ac06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab1e:	4b3d      	ldr	r3, [pc, #244]	; (800ac14 <HAL_RCC_ClockConfig+0x1c4>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f003 0302 	and.w	r3, r3, #2
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d101      	bne.n	800ab2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e06b      	b.n	800ac06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ab2e:	4b39      	ldr	r3, [pc, #228]	; (800ac14 <HAL_RCC_ClockConfig+0x1c4>)
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	f023 0203 	bic.w	r2, r3, #3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	4936      	ldr	r1, [pc, #216]	; (800ac14 <HAL_RCC_ClockConfig+0x1c4>)
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ab40:	f7f9 ffa0 	bl	8004a84 <HAL_GetTick>
 800ab44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab46:	e00a      	b.n	800ab5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab48:	f7f9 ff9c 	bl	8004a84 <HAL_GetTick>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d901      	bls.n	800ab5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ab5a:	2303      	movs	r3, #3
 800ab5c:	e053      	b.n	800ac06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab5e:	4b2d      	ldr	r3, [pc, #180]	; (800ac14 <HAL_RCC_ClockConfig+0x1c4>)
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	f003 020c 	and.w	r2, r3, #12
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d1eb      	bne.n	800ab48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ab70:	4b27      	ldr	r3, [pc, #156]	; (800ac10 <HAL_RCC_ClockConfig+0x1c0>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f003 0307 	and.w	r3, r3, #7
 800ab78:	683a      	ldr	r2, [r7, #0]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d210      	bcs.n	800aba0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab7e:	4b24      	ldr	r3, [pc, #144]	; (800ac10 <HAL_RCC_ClockConfig+0x1c0>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f023 0207 	bic.w	r2, r3, #7
 800ab86:	4922      	ldr	r1, [pc, #136]	; (800ac10 <HAL_RCC_ClockConfig+0x1c0>)
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab8e:	4b20      	ldr	r3, [pc, #128]	; (800ac10 <HAL_RCC_ClockConfig+0x1c0>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f003 0307 	and.w	r3, r3, #7
 800ab96:	683a      	ldr	r2, [r7, #0]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d001      	beq.n	800aba0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	e032      	b.n	800ac06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f003 0304 	and.w	r3, r3, #4
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d008      	beq.n	800abbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800abac:	4b19      	ldr	r3, [pc, #100]	; (800ac14 <HAL_RCC_ClockConfig+0x1c4>)
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	4916      	ldr	r1, [pc, #88]	; (800ac14 <HAL_RCC_ClockConfig+0x1c4>)
 800abba:	4313      	orrs	r3, r2
 800abbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f003 0308 	and.w	r3, r3, #8
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d009      	beq.n	800abde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800abca:	4b12      	ldr	r3, [pc, #72]	; (800ac14 <HAL_RCC_ClockConfig+0x1c4>)
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	691b      	ldr	r3, [r3, #16]
 800abd6:	00db      	lsls	r3, r3, #3
 800abd8:	490e      	ldr	r1, [pc, #56]	; (800ac14 <HAL_RCC_ClockConfig+0x1c4>)
 800abda:	4313      	orrs	r3, r2
 800abdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800abde:	f000 f821 	bl	800ac24 <HAL_RCC_GetSysClockFreq>
 800abe2:	4602      	mov	r2, r0
 800abe4:	4b0b      	ldr	r3, [pc, #44]	; (800ac14 <HAL_RCC_ClockConfig+0x1c4>)
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	091b      	lsrs	r3, r3, #4
 800abea:	f003 030f 	and.w	r3, r3, #15
 800abee:	490a      	ldr	r1, [pc, #40]	; (800ac18 <HAL_RCC_ClockConfig+0x1c8>)
 800abf0:	5ccb      	ldrb	r3, [r1, r3]
 800abf2:	fa22 f303 	lsr.w	r3, r2, r3
 800abf6:	4a09      	ldr	r2, [pc, #36]	; (800ac1c <HAL_RCC_ClockConfig+0x1cc>)
 800abf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800abfa:	4b09      	ldr	r3, [pc, #36]	; (800ac20 <HAL_RCC_ClockConfig+0x1d0>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7f9 fefe 	bl	8004a00 <HAL_InitTick>

  return HAL_OK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	40022000 	.word	0x40022000
 800ac14:	40021000 	.word	0x40021000
 800ac18:	08013c3c 	.word	0x08013c3c
 800ac1c:	200004ec 	.word	0x200004ec
 800ac20:	200004f0 	.word	0x200004f0

0800ac24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b087      	sub	sp, #28
 800ac28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	60fb      	str	r3, [r7, #12]
 800ac2e:	2300      	movs	r3, #0
 800ac30:	60bb      	str	r3, [r7, #8]
 800ac32:	2300      	movs	r3, #0
 800ac34:	617b      	str	r3, [r7, #20]
 800ac36:	2300      	movs	r3, #0
 800ac38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800ac3e:	4b1e      	ldr	r3, [pc, #120]	; (800acb8 <HAL_RCC_GetSysClockFreq+0x94>)
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f003 030c 	and.w	r3, r3, #12
 800ac4a:	2b04      	cmp	r3, #4
 800ac4c:	d002      	beq.n	800ac54 <HAL_RCC_GetSysClockFreq+0x30>
 800ac4e:	2b08      	cmp	r3, #8
 800ac50:	d003      	beq.n	800ac5a <HAL_RCC_GetSysClockFreq+0x36>
 800ac52:	e027      	b.n	800aca4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ac54:	4b19      	ldr	r3, [pc, #100]	; (800acbc <HAL_RCC_GetSysClockFreq+0x98>)
 800ac56:	613b      	str	r3, [r7, #16]
      break;
 800ac58:	e027      	b.n	800acaa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	0c9b      	lsrs	r3, r3, #18
 800ac5e:	f003 030f 	and.w	r3, r3, #15
 800ac62:	4a17      	ldr	r2, [pc, #92]	; (800acc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800ac64:	5cd3      	ldrb	r3, [r2, r3]
 800ac66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d010      	beq.n	800ac94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ac72:	4b11      	ldr	r3, [pc, #68]	; (800acb8 <HAL_RCC_GetSysClockFreq+0x94>)
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	0c5b      	lsrs	r3, r3, #17
 800ac78:	f003 0301 	and.w	r3, r3, #1
 800ac7c:	4a11      	ldr	r2, [pc, #68]	; (800acc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800ac7e:	5cd3      	ldrb	r3, [r2, r3]
 800ac80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	4a0d      	ldr	r2, [pc, #52]	; (800acbc <HAL_RCC_GetSysClockFreq+0x98>)
 800ac86:	fb03 f202 	mul.w	r2, r3, r2
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac90:	617b      	str	r3, [r7, #20]
 800ac92:	e004      	b.n	800ac9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	4a0c      	ldr	r2, [pc, #48]	; (800acc8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800ac98:	fb02 f303 	mul.w	r3, r2, r3
 800ac9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	613b      	str	r3, [r7, #16]
      break;
 800aca2:	e002      	b.n	800acaa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800aca4:	4b09      	ldr	r3, [pc, #36]	; (800accc <HAL_RCC_GetSysClockFreq+0xa8>)
 800aca6:	613b      	str	r3, [r7, #16]
      break;
 800aca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800acaa:	693b      	ldr	r3, [r7, #16]
}
 800acac:	4618      	mov	r0, r3
 800acae:	371c      	adds	r7, #28
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bc80      	pop	{r7}
 800acb4:	4770      	bx	lr
 800acb6:	bf00      	nop
 800acb8:	40021000 	.word	0x40021000
 800acbc:	00b71b00 	.word	0x00b71b00
 800acc0:	08013c54 	.word	0x08013c54
 800acc4:	08013c64 	.word	0x08013c64
 800acc8:	003d0900 	.word	0x003d0900
 800accc:	007a1200 	.word	0x007a1200

0800acd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800acd0:	b480      	push	{r7}
 800acd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800acd4:	4b02      	ldr	r3, [pc, #8]	; (800ace0 <HAL_RCC_GetHCLKFreq+0x10>)
 800acd6:	681b      	ldr	r3, [r3, #0]
}
 800acd8:	4618      	mov	r0, r3
 800acda:	46bd      	mov	sp, r7
 800acdc:	bc80      	pop	{r7}
 800acde:	4770      	bx	lr
 800ace0:	200004ec 	.word	0x200004ec

0800ace4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ace8:	f7ff fff2 	bl	800acd0 <HAL_RCC_GetHCLKFreq>
 800acec:	4602      	mov	r2, r0
 800acee:	4b05      	ldr	r3, [pc, #20]	; (800ad04 <HAL_RCC_GetPCLK1Freq+0x20>)
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	0a1b      	lsrs	r3, r3, #8
 800acf4:	f003 0307 	and.w	r3, r3, #7
 800acf8:	4903      	ldr	r1, [pc, #12]	; (800ad08 <HAL_RCC_GetPCLK1Freq+0x24>)
 800acfa:	5ccb      	ldrb	r3, [r1, r3]
 800acfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	40021000 	.word	0x40021000
 800ad08:	08013c4c 	.word	0x08013c4c

0800ad0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ad10:	f7ff ffde 	bl	800acd0 <HAL_RCC_GetHCLKFreq>
 800ad14:	4602      	mov	r2, r0
 800ad16:	4b05      	ldr	r3, [pc, #20]	; (800ad2c <HAL_RCC_GetPCLK2Freq+0x20>)
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	0adb      	lsrs	r3, r3, #11
 800ad1c:	f003 0307 	and.w	r3, r3, #7
 800ad20:	4903      	ldr	r1, [pc, #12]	; (800ad30 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad22:	5ccb      	ldrb	r3, [r1, r3]
 800ad24:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	40021000 	.word	0x40021000
 800ad30:	08013c4c 	.word	0x08013c4c

0800ad34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b085      	sub	sp, #20
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800ad3c:	4b0a      	ldr	r3, [pc, #40]	; (800ad68 <RCC_Delay+0x34>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a0a      	ldr	r2, [pc, #40]	; (800ad6c <RCC_Delay+0x38>)
 800ad42:	fba2 2303 	umull	r2, r3, r2, r3
 800ad46:	0a5b      	lsrs	r3, r3, #9
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	fb02 f303 	mul.w	r3, r2, r3
 800ad4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800ad50:	bf00      	nop
  }
  while (Delay --);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	1e5a      	subs	r2, r3, #1
 800ad56:	60fa      	str	r2, [r7, #12]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d1f9      	bne.n	800ad50 <RCC_Delay+0x1c>
}
 800ad5c:	bf00      	nop
 800ad5e:	bf00      	nop
 800ad60:	3714      	adds	r7, #20
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bc80      	pop	{r7}
 800ad66:	4770      	bx	lr
 800ad68:	200004ec 	.word	0x200004ec
 800ad6c:	10624dd3 	.word	0x10624dd3

0800ad70 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	613b      	str	r3, [r7, #16]
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f003 0301 	and.w	r3, r3, #1
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d07d      	beq.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ad90:	4b4f      	ldr	r3, [pc, #316]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ad92:	69db      	ldr	r3, [r3, #28]
 800ad94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10d      	bne.n	800adb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ad9c:	4b4c      	ldr	r3, [pc, #304]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ad9e:	69db      	ldr	r3, [r3, #28]
 800ada0:	4a4b      	ldr	r2, [pc, #300]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ada2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ada6:	61d3      	str	r3, [r2, #28]
 800ada8:	4b49      	ldr	r3, [pc, #292]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800adaa:	69db      	ldr	r3, [r3, #28]
 800adac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adb0:	60bb      	str	r3, [r7, #8]
 800adb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800adb4:	2301      	movs	r3, #1
 800adb6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800adb8:	4b46      	ldr	r3, [pc, #280]	; (800aed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d118      	bne.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800adc4:	4b43      	ldr	r3, [pc, #268]	; (800aed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a42      	ldr	r2, [pc, #264]	; (800aed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800adca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800add0:	f7f9 fe58 	bl	8004a84 <HAL_GetTick>
 800add4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800add6:	e008      	b.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800add8:	f7f9 fe54 	bl	8004a84 <HAL_GetTick>
 800addc:	4602      	mov	r2, r0
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	1ad3      	subs	r3, r2, r3
 800ade2:	2b64      	cmp	r3, #100	; 0x64
 800ade4:	d901      	bls.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800ade6:	2303      	movs	r3, #3
 800ade8:	e06d      	b.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800adea:	4b3a      	ldr	r3, [pc, #232]	; (800aed4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d0f0      	beq.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800adf6:	4b36      	ldr	r3, [pc, #216]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800adf8:	6a1b      	ldr	r3, [r3, #32]
 800adfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adfe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d02e      	beq.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d027      	beq.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ae14:	4b2e      	ldr	r3, [pc, #184]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ae16:	6a1b      	ldr	r3, [r3, #32]
 800ae18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ae1e:	4b2e      	ldr	r3, [pc, #184]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800ae20:	2201      	movs	r2, #1
 800ae22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ae24:	4b2c      	ldr	r3, [pc, #176]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800ae26:	2200      	movs	r2, #0
 800ae28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800ae2a:	4a29      	ldr	r2, [pc, #164]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f003 0301 	and.w	r3, r3, #1
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d014      	beq.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae3a:	f7f9 fe23 	bl	8004a84 <HAL_GetTick>
 800ae3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae40:	e00a      	b.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae42:	f7f9 fe1f 	bl	8004a84 <HAL_GetTick>
 800ae46:	4602      	mov	r2, r0
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	1ad3      	subs	r3, r2, r3
 800ae4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d901      	bls.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800ae54:	2303      	movs	r3, #3
 800ae56:	e036      	b.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae58:	4b1d      	ldr	r3, [pc, #116]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ae5a:	6a1b      	ldr	r3, [r3, #32]
 800ae5c:	f003 0302 	and.w	r3, r3, #2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d0ee      	beq.n	800ae42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ae64:	4b1a      	ldr	r3, [pc, #104]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ae66:	6a1b      	ldr	r3, [r3, #32]
 800ae68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	4917      	ldr	r1, [pc, #92]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ae72:	4313      	orrs	r3, r2
 800ae74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800ae76:	7dfb      	ldrb	r3, [r7, #23]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d105      	bne.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ae7c:	4b14      	ldr	r3, [pc, #80]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ae7e:	69db      	ldr	r3, [r3, #28]
 800ae80:	4a13      	ldr	r2, [pc, #76]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ae82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f003 0302 	and.w	r3, r3, #2
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d008      	beq.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ae94:	4b0e      	ldr	r3, [pc, #56]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	490b      	ldr	r1, [pc, #44]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aea2:	4313      	orrs	r3, r2
 800aea4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f003 0310 	and.w	r3, r3, #16
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d008      	beq.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aeb2:	4b07      	ldr	r3, [pc, #28]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	695b      	ldr	r3, [r3, #20]
 800aebe:	4904      	ldr	r1, [pc, #16]	; (800aed0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800aec0:	4313      	orrs	r3, r2
 800aec2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800aec4:	2300      	movs	r3, #0
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3718      	adds	r7, #24
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	40021000 	.word	0x40021000
 800aed4:	40007000 	.word	0x40007000
 800aed8:	42420440 	.word	0x42420440

0800aedc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d101      	bne.n	800aeee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	e041      	b.n	800af72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d106      	bne.n	800af08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2200      	movs	r2, #0
 800aefe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f7f9 fb64 	bl	80045d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2202      	movs	r2, #2
 800af0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	3304      	adds	r3, #4
 800af18:	4619      	mov	r1, r3
 800af1a:	4610      	mov	r0, r2
 800af1c:	f000 faca 	bl	800b4b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2201      	movs	r2, #1
 800af34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2201      	movs	r2, #1
 800af3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	3708      	adds	r7, #8
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}

0800af7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800af7a:	b580      	push	{r7, lr}
 800af7c:	b082      	sub	sp, #8
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d101      	bne.n	800af8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800af88:	2301      	movs	r3, #1
 800af8a:	e041      	b.n	800b010 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af92:	b2db      	uxtb	r3, r3
 800af94:	2b00      	cmp	r3, #0
 800af96:	d106      	bne.n	800afa6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f839 	bl	800b018 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2202      	movs	r2, #2
 800afaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	3304      	adds	r3, #4
 800afb6:	4619      	mov	r1, r3
 800afb8:	4610      	mov	r0, r2
 800afba:	f000 fa7b 	bl	800b4b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2201      	movs	r2, #1
 800afc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2201      	movs	r2, #1
 800afca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2201      	movs	r2, #1
 800afd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2201      	movs	r2, #1
 800afda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2201      	movs	r2, #1
 800afe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2201      	movs	r2, #1
 800afea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2201      	movs	r2, #1
 800aff2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2201      	movs	r2, #1
 800affa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2201      	movs	r2, #1
 800b002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2201      	movs	r2, #1
 800b00a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b00e:	2300      	movs	r3, #0
}
 800b010:	4618      	mov	r0, r3
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b020:	bf00      	nop
 800b022:	370c      	adds	r7, #12
 800b024:	46bd      	mov	sp, r7
 800b026:	bc80      	pop	{r7}
 800b028:	4770      	bx	lr
	...

0800b02c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d109      	bne.n	800b050 <HAL_TIM_PWM_Start+0x24>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b042:	b2db      	uxtb	r3, r3
 800b044:	2b01      	cmp	r3, #1
 800b046:	bf14      	ite	ne
 800b048:	2301      	movne	r3, #1
 800b04a:	2300      	moveq	r3, #0
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	e022      	b.n	800b096 <HAL_TIM_PWM_Start+0x6a>
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	2b04      	cmp	r3, #4
 800b054:	d109      	bne.n	800b06a <HAL_TIM_PWM_Start+0x3e>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	2b01      	cmp	r3, #1
 800b060:	bf14      	ite	ne
 800b062:	2301      	movne	r3, #1
 800b064:	2300      	moveq	r3, #0
 800b066:	b2db      	uxtb	r3, r3
 800b068:	e015      	b.n	800b096 <HAL_TIM_PWM_Start+0x6a>
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	2b08      	cmp	r3, #8
 800b06e:	d109      	bne.n	800b084 <HAL_TIM_PWM_Start+0x58>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b076:	b2db      	uxtb	r3, r3
 800b078:	2b01      	cmp	r3, #1
 800b07a:	bf14      	ite	ne
 800b07c:	2301      	movne	r3, #1
 800b07e:	2300      	moveq	r3, #0
 800b080:	b2db      	uxtb	r3, r3
 800b082:	e008      	b.n	800b096 <HAL_TIM_PWM_Start+0x6a>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b08a:	b2db      	uxtb	r3, r3
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	bf14      	ite	ne
 800b090:	2301      	movne	r3, #1
 800b092:	2300      	moveq	r3, #0
 800b094:	b2db      	uxtb	r3, r3
 800b096:	2b00      	cmp	r3, #0
 800b098:	d001      	beq.n	800b09e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b09a:	2301      	movs	r3, #1
 800b09c:	e072      	b.n	800b184 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d104      	bne.n	800b0ae <HAL_TIM_PWM_Start+0x82>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2202      	movs	r2, #2
 800b0a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0ac:	e013      	b.n	800b0d6 <HAL_TIM_PWM_Start+0xaa>
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	2b04      	cmp	r3, #4
 800b0b2:	d104      	bne.n	800b0be <HAL_TIM_PWM_Start+0x92>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2202      	movs	r2, #2
 800b0b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0bc:	e00b      	b.n	800b0d6 <HAL_TIM_PWM_Start+0xaa>
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	2b08      	cmp	r3, #8
 800b0c2:	d104      	bne.n	800b0ce <HAL_TIM_PWM_Start+0xa2>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2202      	movs	r2, #2
 800b0c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b0cc:	e003      	b.n	800b0d6 <HAL_TIM_PWM_Start+0xaa>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2202      	movs	r2, #2
 800b0d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	6839      	ldr	r1, [r7, #0]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f000 fca4 	bl	800ba2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a28      	ldr	r2, [pc, #160]	; (800b18c <HAL_TIM_PWM_Start+0x160>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d004      	beq.n	800b0f8 <HAL_TIM_PWM_Start+0xcc>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a27      	ldr	r2, [pc, #156]	; (800b190 <HAL_TIM_PWM_Start+0x164>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d101      	bne.n	800b0fc <HAL_TIM_PWM_Start+0xd0>
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	e000      	b.n	800b0fe <HAL_TIM_PWM_Start+0xd2>
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d007      	beq.n	800b112 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b110:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4a1d      	ldr	r2, [pc, #116]	; (800b18c <HAL_TIM_PWM_Start+0x160>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d018      	beq.n	800b14e <HAL_TIM_PWM_Start+0x122>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a1b      	ldr	r2, [pc, #108]	; (800b190 <HAL_TIM_PWM_Start+0x164>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d013      	beq.n	800b14e <HAL_TIM_PWM_Start+0x122>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b12e:	d00e      	beq.n	800b14e <HAL_TIM_PWM_Start+0x122>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4a17      	ldr	r2, [pc, #92]	; (800b194 <HAL_TIM_PWM_Start+0x168>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d009      	beq.n	800b14e <HAL_TIM_PWM_Start+0x122>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4a16      	ldr	r2, [pc, #88]	; (800b198 <HAL_TIM_PWM_Start+0x16c>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d004      	beq.n	800b14e <HAL_TIM_PWM_Start+0x122>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4a14      	ldr	r2, [pc, #80]	; (800b19c <HAL_TIM_PWM_Start+0x170>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d111      	bne.n	800b172 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	f003 0307 	and.w	r3, r3, #7
 800b158:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2b06      	cmp	r3, #6
 800b15e:	d010      	beq.n	800b182 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f042 0201 	orr.w	r2, r2, #1
 800b16e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b170:	e007      	b.n	800b182 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f042 0201 	orr.w	r2, r2, #1
 800b180:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b182:	2300      	movs	r3, #0
}
 800b184:	4618      	mov	r0, r3
 800b186:	3710      	adds	r7, #16
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	40012c00 	.word	0x40012c00
 800b190:	40013400 	.word	0x40013400
 800b194:	40000400 	.word	0x40000400
 800b198:	40000800 	.word	0x40000800
 800b19c:	40000c00 	.word	0x40000c00

0800b1a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b086      	sub	sp, #24
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d101      	bne.n	800b1be <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b1ba:	2302      	movs	r3, #2
 800b1bc:	e0ae      	b.n	800b31c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2b0c      	cmp	r3, #12
 800b1ca:	f200 809f 	bhi.w	800b30c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b1ce:	a201      	add	r2, pc, #4	; (adr r2, 800b1d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d4:	0800b209 	.word	0x0800b209
 800b1d8:	0800b30d 	.word	0x0800b30d
 800b1dc:	0800b30d 	.word	0x0800b30d
 800b1e0:	0800b30d 	.word	0x0800b30d
 800b1e4:	0800b249 	.word	0x0800b249
 800b1e8:	0800b30d 	.word	0x0800b30d
 800b1ec:	0800b30d 	.word	0x0800b30d
 800b1f0:	0800b30d 	.word	0x0800b30d
 800b1f4:	0800b28b 	.word	0x0800b28b
 800b1f8:	0800b30d 	.word	0x0800b30d
 800b1fc:	0800b30d 	.word	0x0800b30d
 800b200:	0800b30d 	.word	0x0800b30d
 800b204:	0800b2cb 	.word	0x0800b2cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	68b9      	ldr	r1, [r7, #8]
 800b20e:	4618      	mov	r0, r3
 800b210:	f000 f9ca 	bl	800b5a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	699a      	ldr	r2, [r3, #24]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f042 0208 	orr.w	r2, r2, #8
 800b222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	699a      	ldr	r2, [r3, #24]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f022 0204 	bic.w	r2, r2, #4
 800b232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	6999      	ldr	r1, [r3, #24]
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	691a      	ldr	r2, [r3, #16]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	430a      	orrs	r2, r1
 800b244:	619a      	str	r2, [r3, #24]
      break;
 800b246:	e064      	b.n	800b312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	68b9      	ldr	r1, [r7, #8]
 800b24e:	4618      	mov	r0, r3
 800b250:	f000 fa1a 	bl	800b688 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	699a      	ldr	r2, [r3, #24]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	699a      	ldr	r2, [r3, #24]
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	6999      	ldr	r1, [r3, #24]
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	691b      	ldr	r3, [r3, #16]
 800b27e:	021a      	lsls	r2, r3, #8
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	430a      	orrs	r2, r1
 800b286:	619a      	str	r2, [r3, #24]
      break;
 800b288:	e043      	b.n	800b312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	68b9      	ldr	r1, [r7, #8]
 800b290:	4618      	mov	r0, r3
 800b292:	f000 fa6d 	bl	800b770 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	69da      	ldr	r2, [r3, #28]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f042 0208 	orr.w	r2, r2, #8
 800b2a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	69da      	ldr	r2, [r3, #28]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f022 0204 	bic.w	r2, r2, #4
 800b2b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	69d9      	ldr	r1, [r3, #28]
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	691a      	ldr	r2, [r3, #16]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	430a      	orrs	r2, r1
 800b2c6:	61da      	str	r2, [r3, #28]
      break;
 800b2c8:	e023      	b.n	800b312 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	68b9      	ldr	r1, [r7, #8]
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f000 fac1 	bl	800b858 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	69da      	ldr	r2, [r3, #28]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	69da      	ldr	r2, [r3, #28]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	69d9      	ldr	r1, [r3, #28]
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	691b      	ldr	r3, [r3, #16]
 800b300:	021a      	lsls	r2, r3, #8
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	430a      	orrs	r2, r1
 800b308:	61da      	str	r2, [r3, #28]
      break;
 800b30a:	e002      	b.n	800b312 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b30c:	2301      	movs	r3, #1
 800b30e:	75fb      	strb	r3, [r7, #23]
      break;
 800b310:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2200      	movs	r2, #0
 800b316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b31a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3718      	adds	r7, #24
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b32e:	2300      	movs	r3, #0
 800b330:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d101      	bne.n	800b340 <HAL_TIM_ConfigClockSource+0x1c>
 800b33c:	2302      	movs	r3, #2
 800b33e:	e0b4      	b.n	800b4aa <HAL_TIM_ConfigClockSource+0x186>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2201      	movs	r2, #1
 800b344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2202      	movs	r2, #2
 800b34c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b35e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b366:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b378:	d03e      	beq.n	800b3f8 <HAL_TIM_ConfigClockSource+0xd4>
 800b37a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b37e:	f200 8087 	bhi.w	800b490 <HAL_TIM_ConfigClockSource+0x16c>
 800b382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b386:	f000 8086 	beq.w	800b496 <HAL_TIM_ConfigClockSource+0x172>
 800b38a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b38e:	d87f      	bhi.n	800b490 <HAL_TIM_ConfigClockSource+0x16c>
 800b390:	2b70      	cmp	r3, #112	; 0x70
 800b392:	d01a      	beq.n	800b3ca <HAL_TIM_ConfigClockSource+0xa6>
 800b394:	2b70      	cmp	r3, #112	; 0x70
 800b396:	d87b      	bhi.n	800b490 <HAL_TIM_ConfigClockSource+0x16c>
 800b398:	2b60      	cmp	r3, #96	; 0x60
 800b39a:	d050      	beq.n	800b43e <HAL_TIM_ConfigClockSource+0x11a>
 800b39c:	2b60      	cmp	r3, #96	; 0x60
 800b39e:	d877      	bhi.n	800b490 <HAL_TIM_ConfigClockSource+0x16c>
 800b3a0:	2b50      	cmp	r3, #80	; 0x50
 800b3a2:	d03c      	beq.n	800b41e <HAL_TIM_ConfigClockSource+0xfa>
 800b3a4:	2b50      	cmp	r3, #80	; 0x50
 800b3a6:	d873      	bhi.n	800b490 <HAL_TIM_ConfigClockSource+0x16c>
 800b3a8:	2b40      	cmp	r3, #64	; 0x40
 800b3aa:	d058      	beq.n	800b45e <HAL_TIM_ConfigClockSource+0x13a>
 800b3ac:	2b40      	cmp	r3, #64	; 0x40
 800b3ae:	d86f      	bhi.n	800b490 <HAL_TIM_ConfigClockSource+0x16c>
 800b3b0:	2b30      	cmp	r3, #48	; 0x30
 800b3b2:	d064      	beq.n	800b47e <HAL_TIM_ConfigClockSource+0x15a>
 800b3b4:	2b30      	cmp	r3, #48	; 0x30
 800b3b6:	d86b      	bhi.n	800b490 <HAL_TIM_ConfigClockSource+0x16c>
 800b3b8:	2b20      	cmp	r3, #32
 800b3ba:	d060      	beq.n	800b47e <HAL_TIM_ConfigClockSource+0x15a>
 800b3bc:	2b20      	cmp	r3, #32
 800b3be:	d867      	bhi.n	800b490 <HAL_TIM_ConfigClockSource+0x16c>
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d05c      	beq.n	800b47e <HAL_TIM_ConfigClockSource+0x15a>
 800b3c4:	2b10      	cmp	r3, #16
 800b3c6:	d05a      	beq.n	800b47e <HAL_TIM_ConfigClockSource+0x15a>
 800b3c8:	e062      	b.n	800b490 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6818      	ldr	r0, [r3, #0]
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	6899      	ldr	r1, [r3, #8]
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	685a      	ldr	r2, [r3, #4]
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	68db      	ldr	r3, [r3, #12]
 800b3da:	f000 fb08 	bl	800b9ee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b3ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	68ba      	ldr	r2, [r7, #8]
 800b3f4:	609a      	str	r2, [r3, #8]
      break;
 800b3f6:	e04f      	b.n	800b498 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6818      	ldr	r0, [r3, #0]
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	6899      	ldr	r1, [r3, #8]
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	685a      	ldr	r2, [r3, #4]
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	f000 faf1 	bl	800b9ee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	689a      	ldr	r2, [r3, #8]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b41a:	609a      	str	r2, [r3, #8]
      break;
 800b41c:	e03c      	b.n	800b498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6818      	ldr	r0, [r3, #0]
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	6859      	ldr	r1, [r3, #4]
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	461a      	mov	r2, r3
 800b42c:	f000 fa68 	bl	800b900 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2150      	movs	r1, #80	; 0x50
 800b436:	4618      	mov	r0, r3
 800b438:	f000 fabf 	bl	800b9ba <TIM_ITRx_SetConfig>
      break;
 800b43c:	e02c      	b.n	800b498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6818      	ldr	r0, [r3, #0]
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	6859      	ldr	r1, [r3, #4]
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	461a      	mov	r2, r3
 800b44c:	f000 fa86 	bl	800b95c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2160      	movs	r1, #96	; 0x60
 800b456:	4618      	mov	r0, r3
 800b458:	f000 faaf 	bl	800b9ba <TIM_ITRx_SetConfig>
      break;
 800b45c:	e01c      	b.n	800b498 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6818      	ldr	r0, [r3, #0]
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	6859      	ldr	r1, [r3, #4]
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	68db      	ldr	r3, [r3, #12]
 800b46a:	461a      	mov	r2, r3
 800b46c:	f000 fa48 	bl	800b900 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2140      	movs	r1, #64	; 0x40
 800b476:	4618      	mov	r0, r3
 800b478:	f000 fa9f 	bl	800b9ba <TIM_ITRx_SetConfig>
      break;
 800b47c:	e00c      	b.n	800b498 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4619      	mov	r1, r3
 800b488:	4610      	mov	r0, r2
 800b48a:	f000 fa96 	bl	800b9ba <TIM_ITRx_SetConfig>
      break;
 800b48e:	e003      	b.n	800b498 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b490:	2301      	movs	r3, #1
 800b492:	73fb      	strb	r3, [r7, #15]
      break;
 800b494:	e000      	b.n	800b498 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2201      	movs	r2, #1
 800b49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
	...

0800b4b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b085      	sub	sp, #20
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	4a33      	ldr	r2, [pc, #204]	; (800b594 <TIM_Base_SetConfig+0xe0>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d013      	beq.n	800b4f4 <TIM_Base_SetConfig+0x40>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4a32      	ldr	r2, [pc, #200]	; (800b598 <TIM_Base_SetConfig+0xe4>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d00f      	beq.n	800b4f4 <TIM_Base_SetConfig+0x40>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4da:	d00b      	beq.n	800b4f4 <TIM_Base_SetConfig+0x40>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	4a2f      	ldr	r2, [pc, #188]	; (800b59c <TIM_Base_SetConfig+0xe8>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d007      	beq.n	800b4f4 <TIM_Base_SetConfig+0x40>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	4a2e      	ldr	r2, [pc, #184]	; (800b5a0 <TIM_Base_SetConfig+0xec>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d003      	beq.n	800b4f4 <TIM_Base_SetConfig+0x40>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	4a2d      	ldr	r2, [pc, #180]	; (800b5a4 <TIM_Base_SetConfig+0xf0>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d108      	bne.n	800b506 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	4313      	orrs	r3, r2
 800b504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4a22      	ldr	r2, [pc, #136]	; (800b594 <TIM_Base_SetConfig+0xe0>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d013      	beq.n	800b536 <TIM_Base_SetConfig+0x82>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4a21      	ldr	r2, [pc, #132]	; (800b598 <TIM_Base_SetConfig+0xe4>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d00f      	beq.n	800b536 <TIM_Base_SetConfig+0x82>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b51c:	d00b      	beq.n	800b536 <TIM_Base_SetConfig+0x82>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4a1e      	ldr	r2, [pc, #120]	; (800b59c <TIM_Base_SetConfig+0xe8>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d007      	beq.n	800b536 <TIM_Base_SetConfig+0x82>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	4a1d      	ldr	r2, [pc, #116]	; (800b5a0 <TIM_Base_SetConfig+0xec>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d003      	beq.n	800b536 <TIM_Base_SetConfig+0x82>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4a1c      	ldr	r2, [pc, #112]	; (800b5a4 <TIM_Base_SetConfig+0xf0>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d108      	bne.n	800b548 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b53c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	4313      	orrs	r3, r2
 800b546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	695b      	ldr	r3, [r3, #20]
 800b552:	4313      	orrs	r3, r2
 800b554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	689a      	ldr	r2, [r3, #8]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4a09      	ldr	r2, [pc, #36]	; (800b594 <TIM_Base_SetConfig+0xe0>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d003      	beq.n	800b57c <TIM_Base_SetConfig+0xc8>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4a08      	ldr	r2, [pc, #32]	; (800b598 <TIM_Base_SetConfig+0xe4>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d103      	bne.n	800b584 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	691a      	ldr	r2, [r3, #16]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2201      	movs	r2, #1
 800b588:	615a      	str	r2, [r3, #20]
}
 800b58a:	bf00      	nop
 800b58c:	3714      	adds	r7, #20
 800b58e:	46bd      	mov	sp, r7
 800b590:	bc80      	pop	{r7}
 800b592:	4770      	bx	lr
 800b594:	40012c00 	.word	0x40012c00
 800b598:	40013400 	.word	0x40013400
 800b59c:	40000400 	.word	0x40000400
 800b5a0:	40000800 	.word	0x40000800
 800b5a4:	40000c00 	.word	0x40000c00

0800b5a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b087      	sub	sp, #28
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6a1b      	ldr	r3, [r3, #32]
 800b5b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6a1b      	ldr	r3, [r3, #32]
 800b5bc:	f023 0201 	bic.w	r2, r3, #1
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	699b      	ldr	r3, [r3, #24]
 800b5ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f023 0303 	bic.w	r3, r3, #3
 800b5de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	68fa      	ldr	r2, [r7, #12]
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	f023 0302 	bic.w	r3, r3, #2
 800b5f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	689b      	ldr	r3, [r3, #8]
 800b5f6:	697a      	ldr	r2, [r7, #20]
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	4a20      	ldr	r2, [pc, #128]	; (800b680 <TIM_OC1_SetConfig+0xd8>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d003      	beq.n	800b60c <TIM_OC1_SetConfig+0x64>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	4a1f      	ldr	r2, [pc, #124]	; (800b684 <TIM_OC1_SetConfig+0xdc>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d10c      	bne.n	800b626 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	f023 0308 	bic.w	r3, r3, #8
 800b612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	697a      	ldr	r2, [r7, #20]
 800b61a:	4313      	orrs	r3, r2
 800b61c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	f023 0304 	bic.w	r3, r3, #4
 800b624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4a15      	ldr	r2, [pc, #84]	; (800b680 <TIM_OC1_SetConfig+0xd8>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d003      	beq.n	800b636 <TIM_OC1_SetConfig+0x8e>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	4a14      	ldr	r2, [pc, #80]	; (800b684 <TIM_OC1_SetConfig+0xdc>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d111      	bne.n	800b65a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b63c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	695b      	ldr	r3, [r3, #20]
 800b64a:	693a      	ldr	r2, [r7, #16]
 800b64c:	4313      	orrs	r3, r2
 800b64e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	699b      	ldr	r3, [r3, #24]
 800b654:	693a      	ldr	r2, [r7, #16]
 800b656:	4313      	orrs	r3, r2
 800b658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	693a      	ldr	r2, [r7, #16]
 800b65e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	68fa      	ldr	r2, [r7, #12]
 800b664:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	685a      	ldr	r2, [r3, #4]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	697a      	ldr	r2, [r7, #20]
 800b672:	621a      	str	r2, [r3, #32]
}
 800b674:	bf00      	nop
 800b676:	371c      	adds	r7, #28
 800b678:	46bd      	mov	sp, r7
 800b67a:	bc80      	pop	{r7}
 800b67c:	4770      	bx	lr
 800b67e:	bf00      	nop
 800b680:	40012c00 	.word	0x40012c00
 800b684:	40013400 	.word	0x40013400

0800b688 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b688:	b480      	push	{r7}
 800b68a:	b087      	sub	sp, #28
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6a1b      	ldr	r3, [r3, #32]
 800b696:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6a1b      	ldr	r3, [r3, #32]
 800b69c:	f023 0210 	bic.w	r2, r3, #16
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	699b      	ldr	r3, [r3, #24]
 800b6ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	021b      	lsls	r3, r3, #8
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	f023 0320 	bic.w	r3, r3, #32
 800b6d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	011b      	lsls	r3, r3, #4
 800b6da:	697a      	ldr	r2, [r7, #20]
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	4a21      	ldr	r2, [pc, #132]	; (800b768 <TIM_OC2_SetConfig+0xe0>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d003      	beq.n	800b6f0 <TIM_OC2_SetConfig+0x68>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	4a20      	ldr	r2, [pc, #128]	; (800b76c <TIM_OC2_SetConfig+0xe4>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d10d      	bne.n	800b70c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	011b      	lsls	r3, r3, #4
 800b6fe:	697a      	ldr	r2, [r7, #20]
 800b700:	4313      	orrs	r3, r2
 800b702:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b70a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	4a16      	ldr	r2, [pc, #88]	; (800b768 <TIM_OC2_SetConfig+0xe0>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d003      	beq.n	800b71c <TIM_OC2_SetConfig+0x94>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	4a15      	ldr	r2, [pc, #84]	; (800b76c <TIM_OC2_SetConfig+0xe4>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d113      	bne.n	800b744 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b722:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b72a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	695b      	ldr	r3, [r3, #20]
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	693a      	ldr	r2, [r7, #16]
 800b734:	4313      	orrs	r3, r2
 800b736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	699b      	ldr	r3, [r3, #24]
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	693a      	ldr	r2, [r7, #16]
 800b740:	4313      	orrs	r3, r2
 800b742:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	693a      	ldr	r2, [r7, #16]
 800b748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	685a      	ldr	r2, [r3, #4]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	697a      	ldr	r2, [r7, #20]
 800b75c:	621a      	str	r2, [r3, #32]
}
 800b75e:	bf00      	nop
 800b760:	371c      	adds	r7, #28
 800b762:	46bd      	mov	sp, r7
 800b764:	bc80      	pop	{r7}
 800b766:	4770      	bx	lr
 800b768:	40012c00 	.word	0x40012c00
 800b76c:	40013400 	.word	0x40013400

0800b770 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b770:	b480      	push	{r7}
 800b772:	b087      	sub	sp, #28
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6a1b      	ldr	r3, [r3, #32]
 800b77e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6a1b      	ldr	r3, [r3, #32]
 800b784:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	69db      	ldr	r3, [r3, #28]
 800b796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b79e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f023 0303 	bic.w	r3, r3, #3
 800b7a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b7b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	021b      	lsls	r3, r3, #8
 800b7c0:	697a      	ldr	r2, [r7, #20]
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	4a21      	ldr	r2, [pc, #132]	; (800b850 <TIM_OC3_SetConfig+0xe0>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d003      	beq.n	800b7d6 <TIM_OC3_SetConfig+0x66>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4a20      	ldr	r2, [pc, #128]	; (800b854 <TIM_OC3_SetConfig+0xe4>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d10d      	bne.n	800b7f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b7dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	021b      	lsls	r3, r3, #8
 800b7e4:	697a      	ldr	r2, [r7, #20]
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b7f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a16      	ldr	r2, [pc, #88]	; (800b850 <TIM_OC3_SetConfig+0xe0>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d003      	beq.n	800b802 <TIM_OC3_SetConfig+0x92>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4a15      	ldr	r2, [pc, #84]	; (800b854 <TIM_OC3_SetConfig+0xe4>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d113      	bne.n	800b82a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	695b      	ldr	r3, [r3, #20]
 800b816:	011b      	lsls	r3, r3, #4
 800b818:	693a      	ldr	r2, [r7, #16]
 800b81a:	4313      	orrs	r3, r2
 800b81c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	699b      	ldr	r3, [r3, #24]
 800b822:	011b      	lsls	r3, r3, #4
 800b824:	693a      	ldr	r2, [r7, #16]
 800b826:	4313      	orrs	r3, r2
 800b828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	693a      	ldr	r2, [r7, #16]
 800b82e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	68fa      	ldr	r2, [r7, #12]
 800b834:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	685a      	ldr	r2, [r3, #4]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	697a      	ldr	r2, [r7, #20]
 800b842:	621a      	str	r2, [r3, #32]
}
 800b844:	bf00      	nop
 800b846:	371c      	adds	r7, #28
 800b848:	46bd      	mov	sp, r7
 800b84a:	bc80      	pop	{r7}
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop
 800b850:	40012c00 	.word	0x40012c00
 800b854:	40013400 	.word	0x40013400

0800b858 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b858:	b480      	push	{r7}
 800b85a:	b087      	sub	sp, #28
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6a1b      	ldr	r3, [r3, #32]
 800b866:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6a1b      	ldr	r3, [r3, #32]
 800b86c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	69db      	ldr	r3, [r3, #28]
 800b87e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b88e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	021b      	lsls	r3, r3, #8
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	4313      	orrs	r3, r2
 800b89a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b8a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	031b      	lsls	r3, r3, #12
 800b8aa:	693a      	ldr	r2, [r7, #16]
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	4a11      	ldr	r2, [pc, #68]	; (800b8f8 <TIM_OC4_SetConfig+0xa0>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d003      	beq.n	800b8c0 <TIM_OC4_SetConfig+0x68>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4a10      	ldr	r2, [pc, #64]	; (800b8fc <TIM_OC4_SetConfig+0xa4>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d109      	bne.n	800b8d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b8c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	695b      	ldr	r3, [r3, #20]
 800b8cc:	019b      	lsls	r3, r3, #6
 800b8ce:	697a      	ldr	r2, [r7, #20]
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	697a      	ldr	r2, [r7, #20]
 800b8d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	68fa      	ldr	r2, [r7, #12]
 800b8de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	685a      	ldr	r2, [r3, #4]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	693a      	ldr	r2, [r7, #16]
 800b8ec:	621a      	str	r2, [r3, #32]
}
 800b8ee:	bf00      	nop
 800b8f0:	371c      	adds	r7, #28
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bc80      	pop	{r7}
 800b8f6:	4770      	bx	lr
 800b8f8:	40012c00 	.word	0x40012c00
 800b8fc:	40013400 	.word	0x40013400

0800b900 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b900:	b480      	push	{r7}
 800b902:	b087      	sub	sp, #28
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6a1b      	ldr	r3, [r3, #32]
 800b910:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	6a1b      	ldr	r3, [r3, #32]
 800b916:	f023 0201 	bic.w	r2, r3, #1
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	699b      	ldr	r3, [r3, #24]
 800b922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b92a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	011b      	lsls	r3, r3, #4
 800b930:	693a      	ldr	r2, [r7, #16]
 800b932:	4313      	orrs	r3, r2
 800b934:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	f023 030a 	bic.w	r3, r3, #10
 800b93c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b93e:	697a      	ldr	r2, [r7, #20]
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	4313      	orrs	r3, r2
 800b944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	693a      	ldr	r2, [r7, #16]
 800b94a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	697a      	ldr	r2, [r7, #20]
 800b950:	621a      	str	r2, [r3, #32]
}
 800b952:	bf00      	nop
 800b954:	371c      	adds	r7, #28
 800b956:	46bd      	mov	sp, r7
 800b958:	bc80      	pop	{r7}
 800b95a:	4770      	bx	lr

0800b95c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b087      	sub	sp, #28
 800b960:	af00      	add	r7, sp, #0
 800b962:	60f8      	str	r0, [r7, #12]
 800b964:	60b9      	str	r1, [r7, #8]
 800b966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6a1b      	ldr	r3, [r3, #32]
 800b96c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	6a1b      	ldr	r3, [r3, #32]
 800b972:	f023 0210 	bic.w	r2, r3, #16
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	699b      	ldr	r3, [r3, #24]
 800b97e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	031b      	lsls	r3, r3, #12
 800b98c:	693a      	ldr	r2, [r7, #16]
 800b98e:	4313      	orrs	r3, r2
 800b990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b998:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	011b      	lsls	r3, r3, #4
 800b99e:	697a      	ldr	r2, [r7, #20]
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	693a      	ldr	r2, [r7, #16]
 800b9a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	697a      	ldr	r2, [r7, #20]
 800b9ae:	621a      	str	r2, [r3, #32]
}
 800b9b0:	bf00      	nop
 800b9b2:	371c      	adds	r7, #28
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bc80      	pop	{r7}
 800b9b8:	4770      	bx	lr

0800b9ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b9ba:	b480      	push	{r7}
 800b9bc:	b085      	sub	sp, #20
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6078      	str	r0, [r7, #4]
 800b9c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	689b      	ldr	r3, [r3, #8]
 800b9c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b9d2:	683a      	ldr	r2, [r7, #0]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	f043 0307 	orr.w	r3, r3, #7
 800b9dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	68fa      	ldr	r2, [r7, #12]
 800b9e2:	609a      	str	r2, [r3, #8]
}
 800b9e4:	bf00      	nop
 800b9e6:	3714      	adds	r7, #20
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bc80      	pop	{r7}
 800b9ec:	4770      	bx	lr

0800b9ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b9ee:	b480      	push	{r7}
 800b9f0:	b087      	sub	sp, #28
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	60f8      	str	r0, [r7, #12]
 800b9f6:	60b9      	str	r1, [r7, #8]
 800b9f8:	607a      	str	r2, [r7, #4]
 800b9fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	021a      	lsls	r2, r3, #8
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	431a      	orrs	r2, r3
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	4313      	orrs	r3, r2
 800ba16:	697a      	ldr	r2, [r7, #20]
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	697a      	ldr	r2, [r7, #20]
 800ba20:	609a      	str	r2, [r3, #8]
}
 800ba22:	bf00      	nop
 800ba24:	371c      	adds	r7, #28
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bc80      	pop	{r7}
 800ba2a:	4770      	bx	lr

0800ba2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b087      	sub	sp, #28
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	60b9      	str	r1, [r7, #8]
 800ba36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	f003 031f 	and.w	r3, r3, #31
 800ba3e:	2201      	movs	r2, #1
 800ba40:	fa02 f303 	lsl.w	r3, r2, r3
 800ba44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	6a1a      	ldr	r2, [r3, #32]
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	43db      	mvns	r3, r3
 800ba4e:	401a      	ands	r2, r3
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	6a1a      	ldr	r2, [r3, #32]
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	f003 031f 	and.w	r3, r3, #31
 800ba5e:	6879      	ldr	r1, [r7, #4]
 800ba60:	fa01 f303 	lsl.w	r3, r1, r3
 800ba64:	431a      	orrs	r2, r3
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	621a      	str	r2, [r3, #32]
}
 800ba6a:	bf00      	nop
 800ba6c:	371c      	adds	r7, #28
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bc80      	pop	{r7}
 800ba72:	4770      	bx	lr

0800ba74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b085      	sub	sp, #20
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d101      	bne.n	800ba8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba88:	2302      	movs	r3, #2
 800ba8a:	e050      	b.n	800bb2e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2202      	movs	r2, #2
 800ba98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bab2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	68fa      	ldr	r2, [r7, #12]
 800baba:	4313      	orrs	r3, r2
 800babc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	68fa      	ldr	r2, [r7, #12]
 800bac4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a1b      	ldr	r2, [pc, #108]	; (800bb38 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d018      	beq.n	800bb02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4a19      	ldr	r2, [pc, #100]	; (800bb3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d013      	beq.n	800bb02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bae2:	d00e      	beq.n	800bb02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a15      	ldr	r2, [pc, #84]	; (800bb40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d009      	beq.n	800bb02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4a14      	ldr	r2, [pc, #80]	; (800bb44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d004      	beq.n	800bb02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4a12      	ldr	r2, [pc, #72]	; (800bb48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d10c      	bne.n	800bb1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	68ba      	ldr	r2, [r7, #8]
 800bb10:	4313      	orrs	r3, r2
 800bb12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	68ba      	ldr	r2, [r7, #8]
 800bb1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb2c:	2300      	movs	r3, #0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3714      	adds	r7, #20
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bc80      	pop	{r7}
 800bb36:	4770      	bx	lr
 800bb38:	40012c00 	.word	0x40012c00
 800bb3c:	40013400 	.word	0x40013400
 800bb40:	40000400 	.word	0x40000400
 800bb44:	40000800 	.word	0x40000800
 800bb48:	40000c00 	.word	0x40000c00

0800bb4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d101      	bne.n	800bb5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e042      	b.n	800bbe4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb64:	b2db      	uxtb	r3, r3
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d106      	bne.n	800bb78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7f8 fe54 	bl	8004820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2224      	movs	r2, #36	; 0x24
 800bb7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	68da      	ldr	r2, [r3, #12]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bb8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 fa07 	bl	800bfa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	691a      	ldr	r2, [r3, #16]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bba4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	695a      	ldr	r2, [r3, #20]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bbb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	68da      	ldr	r2, [r3, #12]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bbc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2220      	movs	r2, #32
 800bbd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2220      	movs	r2, #32
 800bbd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bbe2:	2300      	movs	r3, #0
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3708      	adds	r7, #8
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d101      	bne.n	800bbfe <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e04a      	b.n	800bc94 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc04:	b2db      	uxtb	r3, r3
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d106      	bne.n	800bc18 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f7f8 fe04 	bl	8004820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2224      	movs	r2, #36	; 0x24
 800bc1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	68da      	ldr	r2, [r3, #12]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bc2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 f9b7 	bl	800bfa4 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	691a      	ldr	r2, [r3, #16]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bc44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	695a      	ldr	r2, [r3, #20]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800bc54:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	695a      	ldr	r2, [r3, #20]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f042 0208 	orr.w	r2, r2, #8
 800bc64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	68da      	ldr	r2, [r3, #12]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bc74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2220      	movs	r2, #32
 800bc80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2220      	movs	r2, #32
 800bc88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bc92:	2300      	movs	r3, #0
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3708      	adds	r7, #8
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b08a      	sub	sp, #40	; 0x28
 800bca0:	af02      	add	r7, sp, #8
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	60b9      	str	r1, [r7, #8]
 800bca6:	603b      	str	r3, [r7, #0]
 800bca8:	4613      	mov	r3, r2
 800bcaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bcac:	2300      	movs	r3, #0
 800bcae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	2b20      	cmp	r3, #32
 800bcba:	d16d      	bne.n	800bd98 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d002      	beq.n	800bcc8 <HAL_UART_Transmit+0x2c>
 800bcc2:	88fb      	ldrh	r3, [r7, #6]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d101      	bne.n	800bccc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e066      	b.n	800bd9a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2221      	movs	r2, #33	; 0x21
 800bcd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bcda:	f7f8 fed3 	bl	8004a84 <HAL_GetTick>
 800bcde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	88fa      	ldrh	r2, [r7, #6]
 800bce4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	88fa      	ldrh	r2, [r7, #6]
 800bcea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	689b      	ldr	r3, [r3, #8]
 800bcf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcf4:	d108      	bne.n	800bd08 <HAL_UART_Transmit+0x6c>
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	691b      	ldr	r3, [r3, #16]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d104      	bne.n	800bd08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	61bb      	str	r3, [r7, #24]
 800bd06:	e003      	b.n	800bd10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bd10:	e02a      	b.n	800bd68 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	9300      	str	r3, [sp, #0]
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	2180      	movs	r1, #128	; 0x80
 800bd1c:	68f8      	ldr	r0, [r7, #12]
 800bd1e:	f000 f8d2 	bl	800bec6 <UART_WaitOnFlagUntilTimeout>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d001      	beq.n	800bd2c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800bd28:	2303      	movs	r3, #3
 800bd2a:	e036      	b.n	800bd9a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800bd2c:	69fb      	ldr	r3, [r7, #28]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d10b      	bne.n	800bd4a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	881b      	ldrh	r3, [r3, #0]
 800bd36:	461a      	mov	r2, r3
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bd42:	69bb      	ldr	r3, [r7, #24]
 800bd44:	3302      	adds	r3, #2
 800bd46:	61bb      	str	r3, [r7, #24]
 800bd48:	e007      	b.n	800bd5a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	781a      	ldrb	r2, [r3, #0]
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bd54:	69fb      	ldr	r3, [r7, #28]
 800bd56:	3301      	adds	r3, #1
 800bd58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	3b01      	subs	r3, #1
 800bd62:	b29a      	uxth	r2, r3
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d1cf      	bne.n	800bd12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	9300      	str	r3, [sp, #0]
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	2140      	movs	r1, #64	; 0x40
 800bd7c:	68f8      	ldr	r0, [r7, #12]
 800bd7e:	f000 f8a2 	bl	800bec6 <UART_WaitOnFlagUntilTimeout>
 800bd82:	4603      	mov	r3, r0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d001      	beq.n	800bd8c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800bd88:	2303      	movs	r3, #3
 800bd8a:	e006      	b.n	800bd9a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2220      	movs	r2, #32
 800bd90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800bd94:	2300      	movs	r3, #0
 800bd96:	e000      	b.n	800bd9a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800bd98:	2302      	movs	r3, #2
  }
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3720      	adds	r7, #32
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b08a      	sub	sp, #40	; 0x28
 800bda6:	af02      	add	r7, sp, #8
 800bda8:	60f8      	str	r0, [r7, #12]
 800bdaa:	60b9      	str	r1, [r7, #8]
 800bdac:	603b      	str	r3, [r7, #0]
 800bdae:	4613      	mov	r3, r2
 800bdb0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bdbc:	b2db      	uxtb	r3, r3
 800bdbe:	2b20      	cmp	r3, #32
 800bdc0:	d17c      	bne.n	800bebc <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d002      	beq.n	800bdce <HAL_UART_Receive+0x2c>
 800bdc8:	88fb      	ldrh	r3, [r7, #6]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d101      	bne.n	800bdd2 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	e075      	b.n	800bebe <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2222      	movs	r2, #34	; 0x22
 800bddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2200      	movs	r2, #0
 800bde4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bde6:	f7f8 fe4d 	bl	8004a84 <HAL_GetTick>
 800bdea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	88fa      	ldrh	r2, [r7, #6]
 800bdf0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	88fa      	ldrh	r2, [r7, #6]
 800bdf6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be00:	d108      	bne.n	800be14 <HAL_UART_Receive+0x72>
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	691b      	ldr	r3, [r3, #16]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d104      	bne.n	800be14 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800be0a:	2300      	movs	r3, #0
 800be0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	61bb      	str	r3, [r7, #24]
 800be12:	e003      	b.n	800be1c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800be18:	2300      	movs	r3, #0
 800be1a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800be1c:	e043      	b.n	800bea6 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	9300      	str	r3, [sp, #0]
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	2200      	movs	r2, #0
 800be26:	2120      	movs	r1, #32
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f000 f84c 	bl	800bec6 <UART_WaitOnFlagUntilTimeout>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d001      	beq.n	800be38 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800be34:	2303      	movs	r3, #3
 800be36:	e042      	b.n	800bebe <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d10c      	bne.n	800be58 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	b29b      	uxth	r3, r3
 800be46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be4a:	b29a      	uxth	r2, r3
 800be4c:	69bb      	ldr	r3, [r7, #24]
 800be4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	3302      	adds	r3, #2
 800be54:	61bb      	str	r3, [r7, #24]
 800be56:	e01f      	b.n	800be98 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	689b      	ldr	r3, [r3, #8]
 800be5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be60:	d007      	beq.n	800be72 <HAL_UART_Receive+0xd0>
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	689b      	ldr	r3, [r3, #8]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d10a      	bne.n	800be80 <HAL_UART_Receive+0xde>
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	691b      	ldr	r3, [r3, #16]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d106      	bne.n	800be80 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	69fb      	ldr	r3, [r7, #28]
 800be7c:	701a      	strb	r2, [r3, #0]
 800be7e:	e008      	b.n	800be92 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	b2db      	uxtb	r3, r3
 800be88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be8c:	b2da      	uxtb	r2, r3
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	3301      	adds	r3, #1
 800be96:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	3b01      	subs	r3, #1
 800bea0:	b29a      	uxth	r2, r3
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800beaa:	b29b      	uxth	r3, r3
 800beac:	2b00      	cmp	r3, #0
 800beae:	d1b6      	bne.n	800be1e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2220      	movs	r2, #32
 800beb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800beb8:	2300      	movs	r3, #0
 800beba:	e000      	b.n	800bebe <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bebc:	2302      	movs	r3, #2
  }
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3720      	adds	r7, #32
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}

0800bec6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b090      	sub	sp, #64	; 0x40
 800beca:	af00      	add	r7, sp, #0
 800becc:	60f8      	str	r0, [r7, #12]
 800bece:	60b9      	str	r1, [r7, #8]
 800bed0:	603b      	str	r3, [r7, #0]
 800bed2:	4613      	mov	r3, r2
 800bed4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bed6:	e050      	b.n	800bf7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800beda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bede:	d04c      	beq.n	800bf7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d007      	beq.n	800bef6 <UART_WaitOnFlagUntilTimeout+0x30>
 800bee6:	f7f8 fdcd 	bl	8004a84 <HAL_GetTick>
 800beea:	4602      	mov	r2, r0
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	1ad3      	subs	r3, r2, r3
 800bef0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d241      	bcs.n	800bf7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	330c      	adds	r3, #12
 800befc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800befe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf00:	e853 3f00 	ldrex	r3, [r3]
 800bf04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bf0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	330c      	adds	r3, #12
 800bf14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bf16:	637a      	str	r2, [r7, #52]	; 0x34
 800bf18:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf1e:	e841 2300 	strex	r3, r2, [r1]
 800bf22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d1e5      	bne.n	800bef6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	3314      	adds	r3, #20
 800bf30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	e853 3f00 	ldrex	r3, [r3]
 800bf38:	613b      	str	r3, [r7, #16]
   return(result);
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	f023 0301 	bic.w	r3, r3, #1
 800bf40:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	3314      	adds	r3, #20
 800bf48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf4a:	623a      	str	r2, [r7, #32]
 800bf4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf4e:	69f9      	ldr	r1, [r7, #28]
 800bf50:	6a3a      	ldr	r2, [r7, #32]
 800bf52:	e841 2300 	strex	r3, r2, [r1]
 800bf56:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d1e5      	bne.n	800bf2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2220      	movs	r2, #32
 800bf62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2220      	movs	r2, #32
 800bf6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2200      	movs	r2, #0
 800bf72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800bf76:	2303      	movs	r3, #3
 800bf78:	e00f      	b.n	800bf9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	4013      	ands	r3, r2
 800bf84:	68ba      	ldr	r2, [r7, #8]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	bf0c      	ite	eq
 800bf8a:	2301      	moveq	r3, #1
 800bf8c:	2300      	movne	r3, #0
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	461a      	mov	r2, r3
 800bf92:	79fb      	ldrb	r3, [r7, #7]
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d09f      	beq.n	800bed8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bf98:	2300      	movs	r3, #0
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3740      	adds	r7, #64	; 0x40
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
	...

0800bfa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	691b      	ldr	r3, [r3, #16]
 800bfb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	68da      	ldr	r2, [r3, #12]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	430a      	orrs	r2, r1
 800bfc0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	689a      	ldr	r2, [r3, #8]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	691b      	ldr	r3, [r3, #16]
 800bfca:	431a      	orrs	r2, r3
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	695b      	ldr	r3, [r3, #20]
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	68db      	ldr	r3, [r3, #12]
 800bfda:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800bfde:	f023 030c 	bic.w	r3, r3, #12
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	6812      	ldr	r2, [r2, #0]
 800bfe6:	68b9      	ldr	r1, [r7, #8]
 800bfe8:	430b      	orrs	r3, r1
 800bfea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	695b      	ldr	r3, [r3, #20]
 800bff2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	699a      	ldr	r2, [r3, #24]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	430a      	orrs	r2, r1
 800c000:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4a2c      	ldr	r2, [pc, #176]	; (800c0b8 <UART_SetConfig+0x114>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d103      	bne.n	800c014 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c00c:	f7fe fe7e 	bl	800ad0c <HAL_RCC_GetPCLK2Freq>
 800c010:	60f8      	str	r0, [r7, #12]
 800c012:	e002      	b.n	800c01a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c014:	f7fe fe66 	bl	800ace4 <HAL_RCC_GetPCLK1Freq>
 800c018:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c01a:	68fa      	ldr	r2, [r7, #12]
 800c01c:	4613      	mov	r3, r2
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	4413      	add	r3, r2
 800c022:	009a      	lsls	r2, r3, #2
 800c024:	441a      	add	r2, r3
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	685b      	ldr	r3, [r3, #4]
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c030:	4a22      	ldr	r2, [pc, #136]	; (800c0bc <UART_SetConfig+0x118>)
 800c032:	fba2 2303 	umull	r2, r3, r2, r3
 800c036:	095b      	lsrs	r3, r3, #5
 800c038:	0119      	lsls	r1, r3, #4
 800c03a:	68fa      	ldr	r2, [r7, #12]
 800c03c:	4613      	mov	r3, r2
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	4413      	add	r3, r2
 800c042:	009a      	lsls	r2, r3, #2
 800c044:	441a      	add	r2, r3
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c050:	4b1a      	ldr	r3, [pc, #104]	; (800c0bc <UART_SetConfig+0x118>)
 800c052:	fba3 0302 	umull	r0, r3, r3, r2
 800c056:	095b      	lsrs	r3, r3, #5
 800c058:	2064      	movs	r0, #100	; 0x64
 800c05a:	fb00 f303 	mul.w	r3, r0, r3
 800c05e:	1ad3      	subs	r3, r2, r3
 800c060:	011b      	lsls	r3, r3, #4
 800c062:	3332      	adds	r3, #50	; 0x32
 800c064:	4a15      	ldr	r2, [pc, #84]	; (800c0bc <UART_SetConfig+0x118>)
 800c066:	fba2 2303 	umull	r2, r3, r2, r3
 800c06a:	095b      	lsrs	r3, r3, #5
 800c06c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c070:	4419      	add	r1, r3
 800c072:	68fa      	ldr	r2, [r7, #12]
 800c074:	4613      	mov	r3, r2
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	4413      	add	r3, r2
 800c07a:	009a      	lsls	r2, r3, #2
 800c07c:	441a      	add	r2, r3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	fbb2 f2f3 	udiv	r2, r2, r3
 800c088:	4b0c      	ldr	r3, [pc, #48]	; (800c0bc <UART_SetConfig+0x118>)
 800c08a:	fba3 0302 	umull	r0, r3, r3, r2
 800c08e:	095b      	lsrs	r3, r3, #5
 800c090:	2064      	movs	r0, #100	; 0x64
 800c092:	fb00 f303 	mul.w	r3, r0, r3
 800c096:	1ad3      	subs	r3, r2, r3
 800c098:	011b      	lsls	r3, r3, #4
 800c09a:	3332      	adds	r3, #50	; 0x32
 800c09c:	4a07      	ldr	r2, [pc, #28]	; (800c0bc <UART_SetConfig+0x118>)
 800c09e:	fba2 2303 	umull	r2, r3, r2, r3
 800c0a2:	095b      	lsrs	r3, r3, #5
 800c0a4:	f003 020f 	and.w	r2, r3, #15
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	440a      	add	r2, r1
 800c0ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c0b0:	bf00      	nop
 800c0b2:	3710      	adds	r7, #16
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}
 800c0b8:	40013800 	.word	0x40013800
 800c0bc:	51eb851f 	.word	0x51eb851f

0800c0c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c0c0:	b084      	sub	sp, #16
 800c0c2:	b480      	push	{r7}
 800c0c4:	b083      	sub	sp, #12
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
 800c0ca:	f107 0014 	add.w	r0, r7, #20
 800c0ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c0d2:	2300      	movs	r3, #0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	370c      	adds	r7, #12
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bc80      	pop	{r7}
 800c0dc:	b004      	add	sp, #16
 800c0de:	4770      	bx	lr

0800c0e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b085      	sub	sp, #20
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c0f0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800c0f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	b29a      	uxth	r2, r3
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c100:	2300      	movs	r3, #0
}
 800c102:	4618      	mov	r0, r3
 800c104:	3714      	adds	r7, #20
 800c106:	46bd      	mov	sp, r7
 800c108:	bc80      	pop	{r7}
 800c10a:	4770      	bx	lr

0800c10c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b085      	sub	sp, #20
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c114:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800c118:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c120:	b29a      	uxth	r2, r3
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	b29b      	uxth	r3, r3
 800c126:	43db      	mvns	r3, r3
 800c128:	b29b      	uxth	r3, r3
 800c12a:	4013      	ands	r3, r2
 800c12c:	b29a      	uxth	r2, r3
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c134:	2300      	movs	r3, #0
}
 800c136:	4618      	mov	r0, r3
 800c138:	3714      	adds	r7, #20
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bc80      	pop	{r7}
 800c13e:	4770      	bx	lr

0800c140 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	460b      	mov	r3, r1
 800c14a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c14c:	2300      	movs	r3, #0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	370c      	adds	r7, #12
 800c152:	46bd      	mov	sp, r7
 800c154:	bc80      	pop	{r7}
 800c156:	4770      	bx	lr

0800c158 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c158:	b084      	sub	sp, #16
 800c15a:	b480      	push	{r7}
 800c15c:	b083      	sub	sp, #12
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
 800c162:	f107 0014 	add.w	r0, r7, #20
 800c166:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2201      	movs	r2, #1
 800c16e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2200      	movs	r2, #0
 800c17e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	370c      	adds	r7, #12
 800c190:	46bd      	mov	sp, r7
 800c192:	bc80      	pop	{r7}
 800c194:	b004      	add	sp, #16
 800c196:	4770      	bx	lr

0800c198 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c198:	b480      	push	{r7}
 800c19a:	b09d      	sub	sp, #116	; 0x74
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	4413      	add	r3, r2
 800c1b2:	881b      	ldrh	r3, [r3, #0]
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800c1ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1be:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	78db      	ldrb	r3, [r3, #3]
 800c1c6:	2b03      	cmp	r3, #3
 800c1c8:	d81f      	bhi.n	800c20a <USB_ActivateEndpoint+0x72>
 800c1ca:	a201      	add	r2, pc, #4	; (adr r2, 800c1d0 <USB_ActivateEndpoint+0x38>)
 800c1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d0:	0800c1e1 	.word	0x0800c1e1
 800c1d4:	0800c1fd 	.word	0x0800c1fd
 800c1d8:	0800c213 	.word	0x0800c213
 800c1dc:	0800c1ef 	.word	0x0800c1ef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c1e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c1e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c1e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c1ec:	e012      	b.n	800c214 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c1ee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c1f2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800c1f6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c1fa:	e00b      	b.n	800c214 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c1fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c200:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c204:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c208:	e004      	b.n	800c214 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800c20a:	2301      	movs	r3, #1
 800c20c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800c210:	e000      	b.n	800c214 <USB_ActivateEndpoint+0x7c>
      break;
 800c212:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	441a      	add	r2, r3
 800c21e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c22a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c22e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c232:	b29b      	uxth	r3, r3
 800c234:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	4413      	add	r3, r2
 800c240:	881b      	ldrh	r3, [r3, #0]
 800c242:	b29b      	uxth	r3, r3
 800c244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c24c:	b29a      	uxth	r2, r3
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	b29b      	uxth	r3, r3
 800c254:	4313      	orrs	r3, r2
 800c256:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	441a      	add	r2, r3
 800c264:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800c268:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c26c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c278:	b29b      	uxth	r3, r3
 800c27a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	7b1b      	ldrb	r3, [r3, #12]
 800c280:	2b00      	cmp	r3, #0
 800c282:	f040 8178 	bne.w	800c576 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	785b      	ldrb	r3, [r3, #1]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	f000 8084 	beq.w	800c398 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	61bb      	str	r3, [r7, #24]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	461a      	mov	r2, r3
 800c29e:	69bb      	ldr	r3, [r7, #24]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	61bb      	str	r3, [r7, #24]
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	011a      	lsls	r2, r3, #4
 800c2aa:	69bb      	ldr	r3, [r7, #24]
 800c2ac:	4413      	add	r3, r2
 800c2ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c2b2:	617b      	str	r3, [r7, #20]
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	88db      	ldrh	r3, [r3, #6]
 800c2b8:	085b      	lsrs	r3, r3, #1
 800c2ba:	b29b      	uxth	r3, r3
 800c2bc:	005b      	lsls	r3, r3, #1
 800c2be:	b29a      	uxth	r2, r3
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	4413      	add	r3, r2
 800c2ce:	881b      	ldrh	r3, [r3, #0]
 800c2d0:	827b      	strh	r3, [r7, #18]
 800c2d2:	8a7b      	ldrh	r3, [r7, #18]
 800c2d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d01b      	beq.n	800c314 <USB_ActivateEndpoint+0x17c>
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	009b      	lsls	r3, r3, #2
 800c2e4:	4413      	add	r3, r2
 800c2e6:	881b      	ldrh	r3, [r3, #0]
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c2ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2f2:	823b      	strh	r3, [r7, #16]
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	009b      	lsls	r3, r3, #2
 800c2fc:	441a      	add	r2, r3
 800c2fe:	8a3b      	ldrh	r3, [r7, #16]
 800c300:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c304:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c308:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c30c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c310:	b29b      	uxth	r3, r3
 800c312:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	78db      	ldrb	r3, [r3, #3]
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d020      	beq.n	800c35e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	4413      	add	r3, r2
 800c326:	881b      	ldrh	r3, [r3, #0]
 800c328:	b29b      	uxth	r3, r3
 800c32a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c32e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c332:	81bb      	strh	r3, [r7, #12]
 800c334:	89bb      	ldrh	r3, [r7, #12]
 800c336:	f083 0320 	eor.w	r3, r3, #32
 800c33a:	81bb      	strh	r3, [r7, #12]
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	441a      	add	r2, r3
 800c346:	89bb      	ldrh	r3, [r7, #12]
 800c348:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c34c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c358:	b29b      	uxth	r3, r3
 800c35a:	8013      	strh	r3, [r2, #0]
 800c35c:	e2d5      	b.n	800c90a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	009b      	lsls	r3, r3, #2
 800c366:	4413      	add	r3, r2
 800c368:	881b      	ldrh	r3, [r3, #0]
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c374:	81fb      	strh	r3, [r7, #14]
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	441a      	add	r2, r3
 800c380:	89fb      	ldrh	r3, [r7, #14]
 800c382:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c386:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c38a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c38e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c392:	b29b      	uxth	r3, r3
 800c394:	8013      	strh	r3, [r2, #0]
 800c396:	e2b8      	b.n	800c90a <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	633b      	str	r3, [r7, #48]	; 0x30
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a8:	4413      	add	r3, r2
 800c3aa:	633b      	str	r3, [r7, #48]	; 0x30
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	011a      	lsls	r2, r3, #4
 800c3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b4:	4413      	add	r3, r2
 800c3b6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800c3ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	88db      	ldrh	r3, [r3, #6]
 800c3c0:	085b      	lsrs	r3, r3, #1
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	005b      	lsls	r3, r3, #1
 800c3c6:	b29a      	uxth	r2, r3
 800c3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ca:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3d6:	b29b      	uxth	r3, r3
 800c3d8:	461a      	mov	r2, r3
 800c3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3dc:	4413      	add	r3, r2
 800c3de:	62bb      	str	r3, [r7, #40]	; 0x28
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	011a      	lsls	r2, r3, #4
 800c3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e8:	4413      	add	r3, r2
 800c3ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800c3ee:	627b      	str	r3, [r7, #36]	; 0x24
 800c3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3f2:	881b      	ldrh	r3, [r3, #0]
 800c3f4:	b29b      	uxth	r3, r3
 800c3f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c3fa:	b29a      	uxth	r2, r3
 800c3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fe:	801a      	strh	r2, [r3, #0]
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	691b      	ldr	r3, [r3, #16]
 800c404:	2b3e      	cmp	r3, #62	; 0x3e
 800c406:	d91d      	bls.n	800c444 <USB_ActivateEndpoint+0x2ac>
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	691b      	ldr	r3, [r3, #16]
 800c40c:	095b      	lsrs	r3, r3, #5
 800c40e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	691b      	ldr	r3, [r3, #16]
 800c414:	f003 031f 	and.w	r3, r3, #31
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d102      	bne.n	800c422 <USB_ActivateEndpoint+0x28a>
 800c41c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c41e:	3b01      	subs	r3, #1
 800c420:	66bb      	str	r3, [r7, #104]	; 0x68
 800c422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c424:	881b      	ldrh	r3, [r3, #0]
 800c426:	b29a      	uxth	r2, r3
 800c428:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	029b      	lsls	r3, r3, #10
 800c42e:	b29b      	uxth	r3, r3
 800c430:	4313      	orrs	r3, r2
 800c432:	b29b      	uxth	r3, r3
 800c434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c43c:	b29a      	uxth	r2, r3
 800c43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c440:	801a      	strh	r2, [r3, #0]
 800c442:	e026      	b.n	800c492 <USB_ActivateEndpoint+0x2fa>
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	691b      	ldr	r3, [r3, #16]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d10a      	bne.n	800c462 <USB_ActivateEndpoint+0x2ca>
 800c44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44e:	881b      	ldrh	r3, [r3, #0]
 800c450:	b29b      	uxth	r3, r3
 800c452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c45a:	b29a      	uxth	r2, r3
 800c45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45e:	801a      	strh	r2, [r3, #0]
 800c460:	e017      	b.n	800c492 <USB_ActivateEndpoint+0x2fa>
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	691b      	ldr	r3, [r3, #16]
 800c466:	085b      	lsrs	r3, r3, #1
 800c468:	66bb      	str	r3, [r7, #104]	; 0x68
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	691b      	ldr	r3, [r3, #16]
 800c46e:	f003 0301 	and.w	r3, r3, #1
 800c472:	2b00      	cmp	r3, #0
 800c474:	d002      	beq.n	800c47c <USB_ActivateEndpoint+0x2e4>
 800c476:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c478:	3301      	adds	r3, #1
 800c47a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47e:	881b      	ldrh	r3, [r3, #0]
 800c480:	b29a      	uxth	r2, r3
 800c482:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c484:	b29b      	uxth	r3, r3
 800c486:	029b      	lsls	r3, r3, #10
 800c488:	b29b      	uxth	r3, r3
 800c48a:	4313      	orrs	r3, r2
 800c48c:	b29a      	uxth	r2, r3
 800c48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c490:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	009b      	lsls	r3, r3, #2
 800c49a:	4413      	add	r3, r2
 800c49c:	881b      	ldrh	r3, [r3, #0]
 800c49e:	847b      	strh	r3, [r7, #34]	; 0x22
 800c4a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c4a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d01b      	beq.n	800c4e2 <USB_ActivateEndpoint+0x34a>
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	009b      	lsls	r3, r3, #2
 800c4b2:	4413      	add	r3, r2
 800c4b4:	881b      	ldrh	r3, [r3, #0]
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4c0:	843b      	strh	r3, [r7, #32]
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	009b      	lsls	r3, r3, #2
 800c4ca:	441a      	add	r2, r3
 800c4cc:	8c3b      	ldrh	r3, [r7, #32]
 800c4ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c4da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4de:	b29b      	uxth	r3, r3
 800c4e0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	781b      	ldrb	r3, [r3, #0]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d124      	bne.n	800c534 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	009b      	lsls	r3, r3, #2
 800c4f2:	4413      	add	r3, r2
 800c4f4:	881b      	ldrh	r3, [r3, #0]
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c4fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c500:	83bb      	strh	r3, [r7, #28]
 800c502:	8bbb      	ldrh	r3, [r7, #28]
 800c504:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c508:	83bb      	strh	r3, [r7, #28]
 800c50a:	8bbb      	ldrh	r3, [r7, #28]
 800c50c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c510:	83bb      	strh	r3, [r7, #28]
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	009b      	lsls	r3, r3, #2
 800c51a:	441a      	add	r2, r3
 800c51c:	8bbb      	ldrh	r3, [r7, #28]
 800c51e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c52a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c52e:	b29b      	uxth	r3, r3
 800c530:	8013      	strh	r3, [r2, #0]
 800c532:	e1ea      	b.n	800c90a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	009b      	lsls	r3, r3, #2
 800c53c:	4413      	add	r3, r2
 800c53e:	881b      	ldrh	r3, [r3, #0]
 800c540:	b29b      	uxth	r3, r3
 800c542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c54a:	83fb      	strh	r3, [r7, #30]
 800c54c:	8bfb      	ldrh	r3, [r7, #30]
 800c54e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c552:	83fb      	strh	r3, [r7, #30]
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	441a      	add	r2, r3
 800c55e:	8bfb      	ldrh	r3, [r7, #30]
 800c560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c56c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c570:	b29b      	uxth	r3, r3
 800c572:	8013      	strh	r3, [r2, #0]
 800c574:	e1c9      	b.n	800c90a <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	78db      	ldrb	r3, [r3, #3]
 800c57a:	2b02      	cmp	r3, #2
 800c57c:	d11e      	bne.n	800c5bc <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	009b      	lsls	r3, r3, #2
 800c586:	4413      	add	r3, r2
 800c588:	881b      	ldrh	r3, [r3, #0]
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c594:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	009b      	lsls	r3, r3, #2
 800c5a0:	441a      	add	r2, r3
 800c5a2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c5a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5ae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c5b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5b6:	b29b      	uxth	r3, r3
 800c5b8:	8013      	strh	r3, [r2, #0]
 800c5ba:	e01d      	b.n	800c5f8 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	4413      	add	r3, r2
 800c5c6:	881b      	ldrh	r3, [r3, #0]
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800c5ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5d2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	441a      	add	r2, r3
 800c5e0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800c5e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5f4:	b29b      	uxth	r3, r3
 800c5f6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c602:	b29b      	uxth	r3, r3
 800c604:	461a      	mov	r2, r3
 800c606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c608:	4413      	add	r3, r2
 800c60a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	011a      	lsls	r2, r3, #4
 800c612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c614:	4413      	add	r3, r2
 800c616:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c61a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	891b      	ldrh	r3, [r3, #8]
 800c620:	085b      	lsrs	r3, r3, #1
 800c622:	b29b      	uxth	r3, r3
 800c624:	005b      	lsls	r3, r3, #1
 800c626:	b29a      	uxth	r2, r3
 800c628:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c62a:	801a      	strh	r2, [r3, #0]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	657b      	str	r3, [r7, #84]	; 0x54
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c636:	b29b      	uxth	r3, r3
 800c638:	461a      	mov	r2, r3
 800c63a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c63c:	4413      	add	r3, r2
 800c63e:	657b      	str	r3, [r7, #84]	; 0x54
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	011a      	lsls	r2, r3, #4
 800c646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c648:	4413      	add	r3, r2
 800c64a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800c64e:	653b      	str	r3, [r7, #80]	; 0x50
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	895b      	ldrh	r3, [r3, #10]
 800c654:	085b      	lsrs	r3, r3, #1
 800c656:	b29b      	uxth	r3, r3
 800c658:	005b      	lsls	r3, r3, #1
 800c65a:	b29a      	uxth	r2, r3
 800c65c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c65e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	785b      	ldrb	r3, [r3, #1]
 800c664:	2b00      	cmp	r3, #0
 800c666:	f040 8093 	bne.w	800c790 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	4413      	add	r3, r2
 800c674:	881b      	ldrh	r3, [r3, #0]
 800c676:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800c67a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c67e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c682:	2b00      	cmp	r3, #0
 800c684:	d01b      	beq.n	800c6be <USB_ActivateEndpoint+0x526>
 800c686:	687a      	ldr	r2, [r7, #4]
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	009b      	lsls	r3, r3, #2
 800c68e:	4413      	add	r3, r2
 800c690:	881b      	ldrh	r3, [r3, #0]
 800c692:	b29b      	uxth	r3, r3
 800c694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c69c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	009b      	lsls	r3, r3, #2
 800c6a6:	441a      	add	r2, r3
 800c6a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c6aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c6b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	4413      	add	r3, r2
 800c6c8:	881b      	ldrh	r3, [r3, #0]
 800c6ca:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800c6cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c6ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d01b      	beq.n	800c70e <USB_ActivateEndpoint+0x576>
 800c6d6:	687a      	ldr	r2, [r7, #4]
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	4413      	add	r3, r2
 800c6e0:	881b      	ldrh	r3, [r3, #0]
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c6e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6ec:	877b      	strh	r3, [r7, #58]	; 0x3a
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	009b      	lsls	r3, r3, #2
 800c6f6:	441a      	add	r2, r3
 800c6f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c6fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c706:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	4413      	add	r3, r2
 800c718:	881b      	ldrh	r3, [r3, #0]
 800c71a:	b29b      	uxth	r3, r3
 800c71c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c724:	873b      	strh	r3, [r7, #56]	; 0x38
 800c726:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c728:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c72c:	873b      	strh	r3, [r7, #56]	; 0x38
 800c72e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c730:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c734:	873b      	strh	r3, [r7, #56]	; 0x38
 800c736:	687a      	ldr	r2, [r7, #4]
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	009b      	lsls	r3, r3, #2
 800c73e:	441a      	add	r2, r3
 800c740:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c742:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c746:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c74a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c74e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c752:	b29b      	uxth	r3, r3
 800c754:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	009b      	lsls	r3, r3, #2
 800c75e:	4413      	add	r3, r2
 800c760:	881b      	ldrh	r3, [r3, #0]
 800c762:	b29b      	uxth	r3, r3
 800c764:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c76c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	441a      	add	r2, r3
 800c778:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c77a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c77e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	8013      	strh	r3, [r2, #0]
 800c78e:	e0bc      	b.n	800c90a <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	781b      	ldrb	r3, [r3, #0]
 800c796:	009b      	lsls	r3, r3, #2
 800c798:	4413      	add	r3, r2
 800c79a:	881b      	ldrh	r3, [r3, #0]
 800c79c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800c7a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c7a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d01d      	beq.n	800c7e8 <USB_ActivateEndpoint+0x650>
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	009b      	lsls	r3, r3, #2
 800c7b4:	4413      	add	r3, r2
 800c7b6:	881b      	ldrh	r3, [r3, #0]
 800c7b8:	b29b      	uxth	r3, r3
 800c7ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7c2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	441a      	add	r2, r3
 800c7d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c7d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c7dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c7e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	4413      	add	r3, r2
 800c7f2:	881b      	ldrh	r3, [r3, #0]
 800c7f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c7f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c7fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c800:	2b00      	cmp	r3, #0
 800c802:	d01d      	beq.n	800c840 <USB_ActivateEndpoint+0x6a8>
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	4413      	add	r3, r2
 800c80e:	881b      	ldrh	r3, [r3, #0]
 800c810:	b29b      	uxth	r3, r3
 800c812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c81a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800c81e:	687a      	ldr	r2, [r7, #4]
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	441a      	add	r2, r3
 800c828:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c82c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c838:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	78db      	ldrb	r3, [r3, #3]
 800c844:	2b01      	cmp	r3, #1
 800c846:	d024      	beq.n	800c892 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c848:	687a      	ldr	r2, [r7, #4]
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	009b      	lsls	r3, r3, #2
 800c850:	4413      	add	r3, r2
 800c852:	881b      	ldrh	r3, [r3, #0]
 800c854:	b29b      	uxth	r3, r3
 800c856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c85a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c85e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c862:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c866:	f083 0320 	eor.w	r3, r3, #32
 800c86a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	441a      	add	r2, r3
 800c878:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c87c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	8013      	strh	r3, [r2, #0]
 800c890:	e01d      	b.n	800c8ce <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	009b      	lsls	r3, r3, #2
 800c89a:	4413      	add	r3, r2
 800c89c:	881b      	ldrh	r3, [r3, #0]
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8a8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	009b      	lsls	r3, r3, #2
 800c8b4:	441a      	add	r2, r3
 800c8b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c8ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c8be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c8c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c8c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	009b      	lsls	r3, r3, #2
 800c8d6:	4413      	add	r3, r2
 800c8d8:	881b      	ldrh	r3, [r3, #0]
 800c8da:	b29b      	uxth	r3, r3
 800c8dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c8e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c8e8:	687a      	ldr	r2, [r7, #4]
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	781b      	ldrb	r3, [r3, #0]
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	441a      	add	r2, r3
 800c8f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c8f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c8fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c8fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c906:	b29b      	uxth	r3, r3
 800c908:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c90a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3774      	adds	r7, #116	; 0x74
 800c912:	46bd      	mov	sp, r7
 800c914:	bc80      	pop	{r7}
 800c916:	4770      	bx	lr

0800c918 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c918:	b480      	push	{r7}
 800c91a:	b08d      	sub	sp, #52	; 0x34
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	7b1b      	ldrb	r3, [r3, #12]
 800c926:	2b00      	cmp	r3, #0
 800c928:	f040 808e 	bne.w	800ca48 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	785b      	ldrb	r3, [r3, #1]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d044      	beq.n	800c9be <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	009b      	lsls	r3, r3, #2
 800c93c:	4413      	add	r3, r2
 800c93e:	881b      	ldrh	r3, [r3, #0]
 800c940:	81bb      	strh	r3, [r7, #12]
 800c942:	89bb      	ldrh	r3, [r7, #12]
 800c944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d01b      	beq.n	800c984 <USB_DeactivateEndpoint+0x6c>
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	4413      	add	r3, r2
 800c956:	881b      	ldrh	r3, [r3, #0]
 800c958:	b29b      	uxth	r3, r3
 800c95a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c95e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c962:	817b      	strh	r3, [r7, #10]
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	009b      	lsls	r3, r3, #2
 800c96c:	441a      	add	r2, r3
 800c96e:	897b      	ldrh	r3, [r7, #10]
 800c970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c97c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c980:	b29b      	uxth	r3, r3
 800c982:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	4413      	add	r3, r2
 800c98e:	881b      	ldrh	r3, [r3, #0]
 800c990:	b29b      	uxth	r3, r3
 800c992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c99a:	813b      	strh	r3, [r7, #8]
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	009b      	lsls	r3, r3, #2
 800c9a4:	441a      	add	r2, r3
 800c9a6:	893b      	ldrh	r3, [r7, #8]
 800c9a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c9ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c9b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9b8:	b29b      	uxth	r3, r3
 800c9ba:	8013      	strh	r3, [r2, #0]
 800c9bc:	e192      	b.n	800cce4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	009b      	lsls	r3, r3, #2
 800c9c6:	4413      	add	r3, r2
 800c9c8:	881b      	ldrh	r3, [r3, #0]
 800c9ca:	827b      	strh	r3, [r7, #18]
 800c9cc:	8a7b      	ldrh	r3, [r7, #18]
 800c9ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d01b      	beq.n	800ca0e <USB_DeactivateEndpoint+0xf6>
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	4413      	add	r3, r2
 800c9e0:	881b      	ldrh	r3, [r3, #0]
 800c9e2:	b29b      	uxth	r3, r3
 800c9e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c9e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9ec:	823b      	strh	r3, [r7, #16]
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	441a      	add	r2, r3
 800c9f8:	8a3b      	ldrh	r3, [r7, #16]
 800c9fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c9fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ca06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	4413      	add	r3, r2
 800ca18:	881b      	ldrh	r3, [r3, #0]
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca24:	81fb      	strh	r3, [r7, #14]
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	441a      	add	r2, r3
 800ca30:	89fb      	ldrh	r3, [r7, #14]
 800ca32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	8013      	strh	r3, [r2, #0]
 800ca46:	e14d      	b.n	800cce4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	785b      	ldrb	r3, [r3, #1]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	f040 80a5 	bne.w	800cb9c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	009b      	lsls	r3, r3, #2
 800ca5a:	4413      	add	r3, r2
 800ca5c:	881b      	ldrh	r3, [r3, #0]
 800ca5e:	843b      	strh	r3, [r7, #32]
 800ca60:	8c3b      	ldrh	r3, [r7, #32]
 800ca62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d01b      	beq.n	800caa2 <USB_DeactivateEndpoint+0x18a>
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	4413      	add	r3, r2
 800ca74:	881b      	ldrh	r3, [r3, #0]
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca80:	83fb      	strh	r3, [r7, #30]
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	781b      	ldrb	r3, [r3, #0]
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	441a      	add	r2, r3
 800ca8c:	8bfb      	ldrh	r3, [r7, #30]
 800ca8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ca9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	4413      	add	r3, r2
 800caac:	881b      	ldrh	r3, [r3, #0]
 800caae:	83bb      	strh	r3, [r7, #28]
 800cab0:	8bbb      	ldrh	r3, [r7, #28]
 800cab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d01b      	beq.n	800caf2 <USB_DeactivateEndpoint+0x1da>
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	009b      	lsls	r3, r3, #2
 800cac2:	4413      	add	r3, r2
 800cac4:	881b      	ldrh	r3, [r3, #0]
 800cac6:	b29b      	uxth	r3, r3
 800cac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cacc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cad0:	837b      	strh	r3, [r7, #26]
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	009b      	lsls	r3, r3, #2
 800cada:	441a      	add	r2, r3
 800cadc:	8b7b      	ldrh	r3, [r7, #26]
 800cade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800caea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800caee:	b29b      	uxth	r3, r3
 800caf0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800caf2:	687a      	ldr	r2, [r7, #4]
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	009b      	lsls	r3, r3, #2
 800cafa:	4413      	add	r3, r2
 800cafc:	881b      	ldrh	r3, [r3, #0]
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb08:	833b      	strh	r3, [r7, #24]
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	441a      	add	r2, r3
 800cb14:	8b3b      	ldrh	r3, [r7, #24]
 800cb16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cb2a:	687a      	ldr	r2, [r7, #4]
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	009b      	lsls	r3, r3, #2
 800cb32:	4413      	add	r3, r2
 800cb34:	881b      	ldrh	r3, [r3, #0]
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cb3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb40:	82fb      	strh	r3, [r7, #22]
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	441a      	add	r2, r3
 800cb4c:	8afb      	ldrh	r3, [r7, #22]
 800cb4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cb62:	687a      	ldr	r2, [r7, #4]
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	009b      	lsls	r3, r3, #2
 800cb6a:	4413      	add	r3, r2
 800cb6c:	881b      	ldrh	r3, [r3, #0]
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb78:	82bb      	strh	r3, [r7, #20]
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	781b      	ldrb	r3, [r3, #0]
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	441a      	add	r2, r3
 800cb84:	8abb      	ldrh	r3, [r7, #20]
 800cb86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb96:	b29b      	uxth	r3, r3
 800cb98:	8013      	strh	r3, [r2, #0]
 800cb9a:	e0a3      	b.n	800cce4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	009b      	lsls	r3, r3, #2
 800cba4:	4413      	add	r3, r2
 800cba6:	881b      	ldrh	r3, [r3, #0]
 800cba8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cbaa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cbac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d01b      	beq.n	800cbec <USB_DeactivateEndpoint+0x2d4>
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	4413      	add	r3, r2
 800cbbe:	881b      	ldrh	r3, [r3, #0]
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cbc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800cbcc:	687a      	ldr	r2, [r7, #4]
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	009b      	lsls	r3, r3, #2
 800cbd4:	441a      	add	r2, r3
 800cbd6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cbd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cbdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cbe0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cbe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	4413      	add	r3, r2
 800cbf6:	881b      	ldrh	r3, [r3, #0]
 800cbf8:	857b      	strh	r3, [r7, #42]	; 0x2a
 800cbfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cbfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d01b      	beq.n	800cc3c <USB_DeactivateEndpoint+0x324>
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	009b      	lsls	r3, r3, #2
 800cc0c:	4413      	add	r3, r2
 800cc0e:	881b      	ldrh	r3, [r3, #0]
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc1a:	853b      	strh	r3, [r7, #40]	; 0x28
 800cc1c:	687a      	ldr	r2, [r7, #4]
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	009b      	lsls	r3, r3, #2
 800cc24:	441a      	add	r2, r3
 800cc26:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cc28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cc38:	b29b      	uxth	r3, r3
 800cc3a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800cc3c:	687a      	ldr	r2, [r7, #4]
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	009b      	lsls	r3, r3, #2
 800cc44:	4413      	add	r3, r2
 800cc46:	881b      	ldrh	r3, [r3, #0]
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc52:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	009b      	lsls	r3, r3, #2
 800cc5c:	441a      	add	r2, r3
 800cc5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cc60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cc6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	4413      	add	r3, r2
 800cc7e:	881b      	ldrh	r3, [r3, #0]
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc8a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	441a      	add	r2, r3
 800cc96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cca8:	b29b      	uxth	r3, r3
 800ccaa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	009b      	lsls	r3, r3, #2
 800ccb4:	4413      	add	r3, r2
 800ccb6:	881b      	ldrh	r3, [r3, #0]
 800ccb8:	b29b      	uxth	r3, r3
 800ccba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ccbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccc2:	847b      	strh	r3, [r7, #34]	; 0x22
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	441a      	add	r2, r3
 800ccce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ccd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ccd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ccd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ccdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800cce4:	2300      	movs	r3, #0
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3734      	adds	r7, #52	; 0x34
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bc80      	pop	{r7}
 800ccee:	4770      	bx	lr

0800ccf0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b0c2      	sub	sp, #264	; 0x108
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ccfe:	6018      	str	r0, [r3, #0]
 800cd00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd08:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cd0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	785b      	ldrb	r3, [r3, #1]
 800cd16:	2b01      	cmp	r3, #1
 800cd18:	f040 86b7 	bne.w	800da8a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800cd1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	699a      	ldr	r2, [r3, #24]
 800cd28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	691b      	ldr	r3, [r3, #16]
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d908      	bls.n	800cd4a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800cd38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	691b      	ldr	r3, [r3, #16]
 800cd44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cd48:	e007      	b.n	800cd5a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800cd4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	699b      	ldr	r3, [r3, #24]
 800cd56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800cd5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	7b1b      	ldrb	r3, [r3, #12]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d13a      	bne.n	800cde0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800cd6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	6959      	ldr	r1, [r3, #20]
 800cd76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	88da      	ldrh	r2, [r3, #6]
 800cd82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd86:	b29b      	uxth	r3, r3
 800cd88:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cd8c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cd90:	6800      	ldr	r0, [r0, #0]
 800cd92:	f001 fc9c 	bl	800e6ce <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cd96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	613b      	str	r3, [r7, #16]
 800cda2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cda6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	4413      	add	r3, r2
 800cdb8:	613b      	str	r3, [r7, #16]
 800cdba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	011a      	lsls	r2, r3, #4
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	4413      	add	r3, r2
 800cdcc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800cdd0:	60fb      	str	r3, [r7, #12]
 800cdd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdd6:	b29a      	uxth	r2, r3
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	801a      	strh	r2, [r3, #0]
 800cddc:	f000 be1f 	b.w	800da1e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800cde0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cde4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	78db      	ldrb	r3, [r3, #3]
 800cdec:	2b02      	cmp	r3, #2
 800cdee:	f040 8462 	bne.w	800d6b6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800cdf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	6a1a      	ldr	r2, [r3, #32]
 800cdfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	691b      	ldr	r3, [r3, #16]
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	f240 83df 	bls.w	800d5ce <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ce10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	781b      	ldrb	r3, [r3, #0]
 800ce26:	009b      	lsls	r3, r3, #2
 800ce28:	4413      	add	r3, r2
 800ce2a:	881b      	ldrh	r3, [r3, #0]
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce36:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800ce3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce42:	681a      	ldr	r2, [r3, #0]
 800ce44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	009b      	lsls	r3, r3, #2
 800ce52:	441a      	add	r2, r3
 800ce54:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ce58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ce5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ce60:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ce64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce68:	b29b      	uxth	r3, r3
 800ce6a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ce6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	6a1a      	ldr	r2, [r3, #32]
 800ce78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce7c:	1ad2      	subs	r2, r2, r3
 800ce7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ce8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	4413      	add	r3, r2
 800cea4:	881b      	ldrh	r3, [r3, #0]
 800cea6:	b29b      	uxth	r3, r3
 800cea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	f000 81c7 	beq.w	800d240 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ceb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ceb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	633b      	str	r3, [r7, #48]	; 0x30
 800cebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	785b      	ldrb	r3, [r3, #1]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d177      	bne.n	800cfbe <USB_EPStartXfer+0x2ce>
 800cece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ced2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	62bb      	str	r3, [r7, #40]	; 0x28
 800ceda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cede:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cee8:	b29b      	uxth	r3, r3
 800ceea:	461a      	mov	r2, r3
 800ceec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceee:	4413      	add	r3, r2
 800cef0:	62bb      	str	r3, [r7, #40]	; 0x28
 800cef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	011a      	lsls	r2, r3, #4
 800cf00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf02:	4413      	add	r3, r2
 800cf04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cf08:	627b      	str	r3, [r7, #36]	; 0x24
 800cf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0c:	881b      	ldrh	r3, [r3, #0]
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf14:	b29a      	uxth	r2, r3
 800cf16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf18:	801a      	strh	r2, [r3, #0]
 800cf1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf1e:	2b3e      	cmp	r3, #62	; 0x3e
 800cf20:	d921      	bls.n	800cf66 <USB_EPStartXfer+0x276>
 800cf22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf26:	095b      	lsrs	r3, r3, #5
 800cf28:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cf2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf30:	f003 031f 	and.w	r3, r3, #31
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d104      	bne.n	800cf42 <USB_EPStartXfer+0x252>
 800cf38:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cf3c:	3b01      	subs	r3, #1
 800cf3e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cf42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf44:	881b      	ldrh	r3, [r3, #0]
 800cf46:	b29a      	uxth	r2, r3
 800cf48:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cf4c:	b29b      	uxth	r3, r3
 800cf4e:	029b      	lsls	r3, r3, #10
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	4313      	orrs	r3, r2
 800cf54:	b29b      	uxth	r3, r3
 800cf56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf5e:	b29a      	uxth	r2, r3
 800cf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf62:	801a      	strh	r2, [r3, #0]
 800cf64:	e050      	b.n	800d008 <USB_EPStartXfer+0x318>
 800cf66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d10a      	bne.n	800cf84 <USB_EPStartXfer+0x294>
 800cf6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf70:	881b      	ldrh	r3, [r3, #0]
 800cf72:	b29b      	uxth	r3, r3
 800cf74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf7c:	b29a      	uxth	r2, r3
 800cf7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf80:	801a      	strh	r2, [r3, #0]
 800cf82:	e041      	b.n	800d008 <USB_EPStartXfer+0x318>
 800cf84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf88:	085b      	lsrs	r3, r3, #1
 800cf8a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cf8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf92:	f003 0301 	and.w	r3, r3, #1
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d004      	beq.n	800cfa4 <USB_EPStartXfer+0x2b4>
 800cf9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa6:	881b      	ldrh	r3, [r3, #0]
 800cfa8:	b29a      	uxth	r2, r3
 800cfaa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cfae:	b29b      	uxth	r3, r3
 800cfb0:	029b      	lsls	r3, r3, #10
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	b29a      	uxth	r2, r3
 800cfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfba:	801a      	strh	r2, [r3, #0]
 800cfbc:	e024      	b.n	800d008 <USB_EPStartXfer+0x318>
 800cfbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	785b      	ldrb	r3, [r3, #1]
 800cfca:	2b01      	cmp	r3, #1
 800cfcc:	d11c      	bne.n	800d008 <USB_EPStartXfer+0x318>
 800cfce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cfdc:	b29b      	uxth	r3, r3
 800cfde:	461a      	mov	r2, r3
 800cfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe2:	4413      	add	r3, r2
 800cfe4:	633b      	str	r3, [r7, #48]	; 0x30
 800cfe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	011a      	lsls	r2, r3, #4
 800cff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff6:	4413      	add	r3, r2
 800cff8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800cffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d002:	b29a      	uxth	r2, r3
 800d004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d006:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d00c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	895b      	ldrh	r3, [r3, #10]
 800d014:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d01c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	6959      	ldr	r1, [r3, #20]
 800d024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d028:	b29b      	uxth	r3, r3
 800d02a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d02e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d032:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d036:	6800      	ldr	r0, [r0, #0]
 800d038:	f001 fb49 	bl	800e6ce <USB_WritePMA>
            ep->xfer_buff += len;
 800d03c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	695a      	ldr	r2, [r3, #20]
 800d048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d04c:	441a      	add	r2, r3
 800d04e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d05a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d05e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	6a1a      	ldr	r2, [r3, #32]
 800d066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d06a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	691b      	ldr	r3, [r3, #16]
 800d072:	429a      	cmp	r2, r3
 800d074:	d90f      	bls.n	800d096 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800d076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d07a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	6a1a      	ldr	r2, [r3, #32]
 800d082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d086:	1ad2      	subs	r2, r2, r3
 800d088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d08c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	621a      	str	r2, [r3, #32]
 800d094:	e00e      	b.n	800d0b4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800d096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d09a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	6a1b      	ldr	r3, [r3, #32]
 800d0a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800d0a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d0b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	785b      	ldrb	r3, [r3, #1]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d177      	bne.n	800d1b4 <USB_EPStartXfer+0x4c4>
 800d0c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	61bb      	str	r3, [r7, #24]
 800d0d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	461a      	mov	r2, r3
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	4413      	add	r3, r2
 800d0e6:	61bb      	str	r3, [r7, #24]
 800d0e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	011a      	lsls	r2, r3, #4
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	4413      	add	r3, r2
 800d0fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d0fe:	617b      	str	r3, [r7, #20]
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	881b      	ldrh	r3, [r3, #0]
 800d104:	b29b      	uxth	r3, r3
 800d106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d10a:	b29a      	uxth	r2, r3
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	801a      	strh	r2, [r3, #0]
 800d110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d114:	2b3e      	cmp	r3, #62	; 0x3e
 800d116:	d921      	bls.n	800d15c <USB_EPStartXfer+0x46c>
 800d118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d11c:	095b      	lsrs	r3, r3, #5
 800d11e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d126:	f003 031f 	and.w	r3, r3, #31
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d104      	bne.n	800d138 <USB_EPStartXfer+0x448>
 800d12e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d132:	3b01      	subs	r3, #1
 800d134:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	881b      	ldrh	r3, [r3, #0]
 800d13c:	b29a      	uxth	r2, r3
 800d13e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d142:	b29b      	uxth	r3, r3
 800d144:	029b      	lsls	r3, r3, #10
 800d146:	b29b      	uxth	r3, r3
 800d148:	4313      	orrs	r3, r2
 800d14a:	b29b      	uxth	r3, r3
 800d14c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d154:	b29a      	uxth	r2, r3
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	801a      	strh	r2, [r3, #0]
 800d15a:	e056      	b.n	800d20a <USB_EPStartXfer+0x51a>
 800d15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d160:	2b00      	cmp	r3, #0
 800d162:	d10a      	bne.n	800d17a <USB_EPStartXfer+0x48a>
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	881b      	ldrh	r3, [r3, #0]
 800d168:	b29b      	uxth	r3, r3
 800d16a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d16e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d172:	b29a      	uxth	r2, r3
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	801a      	strh	r2, [r3, #0]
 800d178:	e047      	b.n	800d20a <USB_EPStartXfer+0x51a>
 800d17a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d17e:	085b      	lsrs	r3, r3, #1
 800d180:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d188:	f003 0301 	and.w	r3, r3, #1
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d004      	beq.n	800d19a <USB_EPStartXfer+0x4aa>
 800d190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d194:	3301      	adds	r3, #1
 800d196:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	881b      	ldrh	r3, [r3, #0]
 800d19e:	b29a      	uxth	r2, r3
 800d1a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d1a4:	b29b      	uxth	r3, r3
 800d1a6:	029b      	lsls	r3, r3, #10
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	4313      	orrs	r3, r2
 800d1ac:	b29a      	uxth	r2, r3
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	801a      	strh	r2, [r3, #0]
 800d1b2:	e02a      	b.n	800d20a <USB_EPStartXfer+0x51a>
 800d1b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	785b      	ldrb	r3, [r3, #1]
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d122      	bne.n	800d20a <USB_EPStartXfer+0x51a>
 800d1c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	623b      	str	r3, [r7, #32]
 800d1d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	6a3b      	ldr	r3, [r7, #32]
 800d1e4:	4413      	add	r3, r2
 800d1e6:	623b      	str	r3, [r7, #32]
 800d1e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	011a      	lsls	r2, r3, #4
 800d1f6:	6a3b      	ldr	r3, [r7, #32]
 800d1f8:	4413      	add	r3, r2
 800d1fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d1fe:	61fb      	str	r3, [r7, #28]
 800d200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d204:	b29a      	uxth	r2, r3
 800d206:	69fb      	ldr	r3, [r7, #28]
 800d208:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d20a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d20e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	891b      	ldrh	r3, [r3, #8]
 800d216:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d21a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d21e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	6959      	ldr	r1, [r3, #20]
 800d226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d230:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d234:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d238:	6800      	ldr	r0, [r0, #0]
 800d23a:	f001 fa48 	bl	800e6ce <USB_WritePMA>
 800d23e:	e3ee      	b.n	800da1e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	785b      	ldrb	r3, [r3, #1]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d177      	bne.n	800d340 <USB_EPStartXfer+0x650>
 800d250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d254:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d25c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d260:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d26a:	b29b      	uxth	r3, r3
 800d26c:	461a      	mov	r2, r3
 800d26e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d270:	4413      	add	r3, r2
 800d272:	64bb      	str	r3, [r7, #72]	; 0x48
 800d274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	011a      	lsls	r2, r3, #4
 800d282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d284:	4413      	add	r3, r2
 800d286:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d28a:	647b      	str	r3, [r7, #68]	; 0x44
 800d28c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d28e:	881b      	ldrh	r3, [r3, #0]
 800d290:	b29b      	uxth	r3, r3
 800d292:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d296:	b29a      	uxth	r2, r3
 800d298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d29a:	801a      	strh	r2, [r3, #0]
 800d29c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2a0:	2b3e      	cmp	r3, #62	; 0x3e
 800d2a2:	d921      	bls.n	800d2e8 <USB_EPStartXfer+0x5f8>
 800d2a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2a8:	095b      	lsrs	r3, r3, #5
 800d2aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d2ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2b2:	f003 031f 	and.w	r3, r3, #31
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d104      	bne.n	800d2c4 <USB_EPStartXfer+0x5d4>
 800d2ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d2be:	3b01      	subs	r3, #1
 800d2c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d2c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2c6:	881b      	ldrh	r3, [r3, #0]
 800d2c8:	b29a      	uxth	r2, r3
 800d2ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	029b      	lsls	r3, r3, #10
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	4313      	orrs	r3, r2
 800d2d6:	b29b      	uxth	r3, r3
 800d2d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2e4:	801a      	strh	r2, [r3, #0]
 800d2e6:	e056      	b.n	800d396 <USB_EPStartXfer+0x6a6>
 800d2e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d10a      	bne.n	800d306 <USB_EPStartXfer+0x616>
 800d2f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2f2:	881b      	ldrh	r3, [r3, #0]
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d302:	801a      	strh	r2, [r3, #0]
 800d304:	e047      	b.n	800d396 <USB_EPStartXfer+0x6a6>
 800d306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d30a:	085b      	lsrs	r3, r3, #1
 800d30c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d314:	f003 0301 	and.w	r3, r3, #1
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d004      	beq.n	800d326 <USB_EPStartXfer+0x636>
 800d31c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d320:	3301      	adds	r3, #1
 800d322:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d328:	881b      	ldrh	r3, [r3, #0]
 800d32a:	b29a      	uxth	r2, r3
 800d32c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d330:	b29b      	uxth	r3, r3
 800d332:	029b      	lsls	r3, r3, #10
 800d334:	b29b      	uxth	r3, r3
 800d336:	4313      	orrs	r3, r2
 800d338:	b29a      	uxth	r2, r3
 800d33a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d33c:	801a      	strh	r2, [r3, #0]
 800d33e:	e02a      	b.n	800d396 <USB_EPStartXfer+0x6a6>
 800d340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	785b      	ldrb	r3, [r3, #1]
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	d122      	bne.n	800d396 <USB_EPStartXfer+0x6a6>
 800d350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d354:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	653b      	str	r3, [r7, #80]	; 0x50
 800d35c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d360:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	461a      	mov	r2, r3
 800d36e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d370:	4413      	add	r3, r2
 800d372:	653b      	str	r3, [r7, #80]	; 0x50
 800d374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	011a      	lsls	r2, r3, #4
 800d382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d384:	4413      	add	r3, r2
 800d386:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d38a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d390:	b29a      	uxth	r2, r3
 800d392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d394:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d39a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	891b      	ldrh	r3, [r3, #8]
 800d3a2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d3a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	6959      	ldr	r1, [r3, #20]
 800d3b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3b6:	b29b      	uxth	r3, r3
 800d3b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d3bc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d3c0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d3c4:	6800      	ldr	r0, [r0, #0]
 800d3c6:	f001 f982 	bl	800e6ce <USB_WritePMA>
            ep->xfer_buff += len;
 800d3ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	695a      	ldr	r2, [r3, #20]
 800d3d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3da:	441a      	add	r2, r3
 800d3dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d3e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	6a1a      	ldr	r2, [r3, #32]
 800d3f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	691b      	ldr	r3, [r3, #16]
 800d400:	429a      	cmp	r2, r3
 800d402:	d90f      	bls.n	800d424 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800d404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	6a1a      	ldr	r2, [r3, #32]
 800d410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d414:	1ad2      	subs	r2, r2, r3
 800d416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d41a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	621a      	str	r2, [r3, #32]
 800d422:	e00e      	b.n	800d442 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800d424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	6a1b      	ldr	r3, [r3, #32]
 800d430:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800d434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	2200      	movs	r2, #0
 800d440:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d446:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	643b      	str	r3, [r7, #64]	; 0x40
 800d44e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	785b      	ldrb	r3, [r3, #1]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d177      	bne.n	800d54e <USB_EPStartXfer+0x85e>
 800d45e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d462:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	63bb      	str	r3, [r7, #56]	; 0x38
 800d46a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d46e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d478:	b29b      	uxth	r3, r3
 800d47a:	461a      	mov	r2, r3
 800d47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d47e:	4413      	add	r3, r2
 800d480:	63bb      	str	r3, [r7, #56]	; 0x38
 800d482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	781b      	ldrb	r3, [r3, #0]
 800d48e:	011a      	lsls	r2, r3, #4
 800d490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d492:	4413      	add	r3, r2
 800d494:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d498:	637b      	str	r3, [r7, #52]	; 0x34
 800d49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d49c:	881b      	ldrh	r3, [r3, #0]
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d4a4:	b29a      	uxth	r2, r3
 800d4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4a8:	801a      	strh	r2, [r3, #0]
 800d4aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4ae:	2b3e      	cmp	r3, #62	; 0x3e
 800d4b0:	d921      	bls.n	800d4f6 <USB_EPStartXfer+0x806>
 800d4b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4b6:	095b      	lsrs	r3, r3, #5
 800d4b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d4bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4c0:	f003 031f 	and.w	r3, r3, #31
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d104      	bne.n	800d4d2 <USB_EPStartXfer+0x7e2>
 800d4c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d4cc:	3b01      	subs	r3, #1
 800d4ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4d4:	881b      	ldrh	r3, [r3, #0]
 800d4d6:	b29a      	uxth	r2, r3
 800d4d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d4dc:	b29b      	uxth	r3, r3
 800d4de:	029b      	lsls	r3, r3, #10
 800d4e0:	b29b      	uxth	r3, r3
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	b29b      	uxth	r3, r3
 800d4e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d4ee:	b29a      	uxth	r2, r3
 800d4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4f2:	801a      	strh	r2, [r3, #0]
 800d4f4:	e050      	b.n	800d598 <USB_EPStartXfer+0x8a8>
 800d4f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d10a      	bne.n	800d514 <USB_EPStartXfer+0x824>
 800d4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d500:	881b      	ldrh	r3, [r3, #0]
 800d502:	b29b      	uxth	r3, r3
 800d504:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d508:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d50c:	b29a      	uxth	r2, r3
 800d50e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d510:	801a      	strh	r2, [r3, #0]
 800d512:	e041      	b.n	800d598 <USB_EPStartXfer+0x8a8>
 800d514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d518:	085b      	lsrs	r3, r3, #1
 800d51a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d51e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d522:	f003 0301 	and.w	r3, r3, #1
 800d526:	2b00      	cmp	r3, #0
 800d528:	d004      	beq.n	800d534 <USB_EPStartXfer+0x844>
 800d52a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d52e:	3301      	adds	r3, #1
 800d530:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d536:	881b      	ldrh	r3, [r3, #0]
 800d538:	b29a      	uxth	r2, r3
 800d53a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d53e:	b29b      	uxth	r3, r3
 800d540:	029b      	lsls	r3, r3, #10
 800d542:	b29b      	uxth	r3, r3
 800d544:	4313      	orrs	r3, r2
 800d546:	b29a      	uxth	r2, r3
 800d548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d54a:	801a      	strh	r2, [r3, #0]
 800d54c:	e024      	b.n	800d598 <USB_EPStartXfer+0x8a8>
 800d54e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	785b      	ldrb	r3, [r3, #1]
 800d55a:	2b01      	cmp	r3, #1
 800d55c:	d11c      	bne.n	800d598 <USB_EPStartXfer+0x8a8>
 800d55e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d562:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d56c:	b29b      	uxth	r3, r3
 800d56e:	461a      	mov	r2, r3
 800d570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d572:	4413      	add	r3, r2
 800d574:	643b      	str	r3, [r7, #64]	; 0x40
 800d576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d57a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	781b      	ldrb	r3, [r3, #0]
 800d582:	011a      	lsls	r2, r3, #4
 800d584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d586:	4413      	add	r3, r2
 800d588:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d58c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d58e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d592:	b29a      	uxth	r2, r3
 800d594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d596:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d59c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	895b      	ldrh	r3, [r3, #10]
 800d5a4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d5a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	6959      	ldr	r1, [r3, #20]
 800d5b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5b8:	b29b      	uxth	r3, r3
 800d5ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d5be:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d5c2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d5c6:	6800      	ldr	r0, [r0, #0]
 800d5c8:	f001 f881 	bl	800e6ce <USB_WritePMA>
 800d5cc:	e227      	b.n	800da1e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d5ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	6a1b      	ldr	r3, [r3, #32]
 800d5da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d5de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	009b      	lsls	r3, r3, #2
 800d5f6:	4413      	add	r3, r2
 800d5f8:	881b      	ldrh	r3, [r3, #0]
 800d5fa:	b29b      	uxth	r3, r3
 800d5fc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800d600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d604:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800d608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d60c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d610:	681a      	ldr	r2, [r3, #0]
 800d612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	009b      	lsls	r3, r3, #2
 800d620:	441a      	add	r2, r3
 800d622:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d62a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d62e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d636:	b29b      	uxth	r3, r3
 800d638:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d63a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d63e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d64a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d654:	b29b      	uxth	r3, r3
 800d656:	461a      	mov	r2, r3
 800d658:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d65a:	4413      	add	r3, r2
 800d65c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d65e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	011a      	lsls	r2, r3, #4
 800d66c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d66e:	4413      	add	r3, r2
 800d670:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d674:	65bb      	str	r3, [r7, #88]	; 0x58
 800d676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d67a:	b29a      	uxth	r2, r3
 800d67c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d67e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	891b      	ldrh	r3, [r3, #8]
 800d68c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	6959      	ldr	r1, [r3, #20]
 800d69c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6a0:	b29b      	uxth	r3, r3
 800d6a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d6a6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d6aa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d6ae:	6800      	ldr	r0, [r0, #0]
 800d6b0:	f001 f80d 	bl	800e6ce <USB_WritePMA>
 800d6b4:	e1b3      	b.n	800da1e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d6b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	6a1a      	ldr	r2, [r3, #32]
 800d6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d6c6:	1ad2      	subs	r2, r2, r3
 800d6c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d6d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d6dc:	681a      	ldr	r2, [r3, #0]
 800d6de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	009b      	lsls	r3, r3, #2
 800d6ec:	4413      	add	r3, r2
 800d6ee:	881b      	ldrh	r3, [r3, #0]
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	f000 80c6 	beq.w	800d888 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d6fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d700:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	673b      	str	r3, [r7, #112]	; 0x70
 800d708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d70c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	785b      	ldrb	r3, [r3, #1]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d177      	bne.n	800d808 <USB_EPStartXfer+0xb18>
 800d718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d71c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	66bb      	str	r3, [r7, #104]	; 0x68
 800d724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d728:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d732:	b29b      	uxth	r3, r3
 800d734:	461a      	mov	r2, r3
 800d736:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d738:	4413      	add	r3, r2
 800d73a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d73c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	011a      	lsls	r2, r3, #4
 800d74a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d74c:	4413      	add	r3, r2
 800d74e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d752:	667b      	str	r3, [r7, #100]	; 0x64
 800d754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d756:	881b      	ldrh	r3, [r3, #0]
 800d758:	b29b      	uxth	r3, r3
 800d75a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d75e:	b29a      	uxth	r2, r3
 800d760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d762:	801a      	strh	r2, [r3, #0]
 800d764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d768:	2b3e      	cmp	r3, #62	; 0x3e
 800d76a:	d921      	bls.n	800d7b0 <USB_EPStartXfer+0xac0>
 800d76c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d770:	095b      	lsrs	r3, r3, #5
 800d772:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d77a:	f003 031f 	and.w	r3, r3, #31
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d104      	bne.n	800d78c <USB_EPStartXfer+0xa9c>
 800d782:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d786:	3b01      	subs	r3, #1
 800d788:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d78c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d78e:	881b      	ldrh	r3, [r3, #0]
 800d790:	b29a      	uxth	r2, r3
 800d792:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d796:	b29b      	uxth	r3, r3
 800d798:	029b      	lsls	r3, r3, #10
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	4313      	orrs	r3, r2
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7a8:	b29a      	uxth	r2, r3
 800d7aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7ac:	801a      	strh	r2, [r3, #0]
 800d7ae:	e050      	b.n	800d852 <USB_EPStartXfer+0xb62>
 800d7b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d10a      	bne.n	800d7ce <USB_EPStartXfer+0xade>
 800d7b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7ba:	881b      	ldrh	r3, [r3, #0]
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7c6:	b29a      	uxth	r2, r3
 800d7c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7ca:	801a      	strh	r2, [r3, #0]
 800d7cc:	e041      	b.n	800d852 <USB_EPStartXfer+0xb62>
 800d7ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7d2:	085b      	lsrs	r3, r3, #1
 800d7d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d7d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7dc:	f003 0301 	and.w	r3, r3, #1
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d004      	beq.n	800d7ee <USB_EPStartXfer+0xafe>
 800d7e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d7ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7f0:	881b      	ldrh	r3, [r3, #0]
 800d7f2:	b29a      	uxth	r2, r3
 800d7f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d7f8:	b29b      	uxth	r3, r3
 800d7fa:	029b      	lsls	r3, r3, #10
 800d7fc:	b29b      	uxth	r3, r3
 800d7fe:	4313      	orrs	r3, r2
 800d800:	b29a      	uxth	r2, r3
 800d802:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d804:	801a      	strh	r2, [r3, #0]
 800d806:	e024      	b.n	800d852 <USB_EPStartXfer+0xb62>
 800d808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d80c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	785b      	ldrb	r3, [r3, #1]
 800d814:	2b01      	cmp	r3, #1
 800d816:	d11c      	bne.n	800d852 <USB_EPStartXfer+0xb62>
 800d818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d81c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d826:	b29b      	uxth	r3, r3
 800d828:	461a      	mov	r2, r3
 800d82a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d82c:	4413      	add	r3, r2
 800d82e:	673b      	str	r3, [r7, #112]	; 0x70
 800d830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	781b      	ldrb	r3, [r3, #0]
 800d83c:	011a      	lsls	r2, r3, #4
 800d83e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d840:	4413      	add	r3, r2
 800d842:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800d846:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d84c:	b29a      	uxth	r2, r3
 800d84e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d850:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	895b      	ldrh	r3, [r3, #10]
 800d85e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d862:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d866:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	6959      	ldr	r1, [r3, #20]
 800d86e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d872:	b29b      	uxth	r3, r3
 800d874:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d878:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d87c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d880:	6800      	ldr	r0, [r0, #0]
 800d882:	f000 ff24 	bl	800e6ce <USB_WritePMA>
 800d886:	e0ca      	b.n	800da1e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d88c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	785b      	ldrb	r3, [r3, #1]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d177      	bne.n	800d988 <USB_EPStartXfer+0xc98>
 800d898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d89c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d8a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d8b8:	4413      	add	r3, r2
 800d8ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d8bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	011a      	lsls	r2, r3, #4
 800d8ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d8cc:	4413      	add	r3, r2
 800d8ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d8d2:	67bb      	str	r3, [r7, #120]	; 0x78
 800d8d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d8d6:	881b      	ldrh	r3, [r3, #0]
 800d8d8:	b29b      	uxth	r3, r3
 800d8da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d8de:	b29a      	uxth	r2, r3
 800d8e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d8e2:	801a      	strh	r2, [r3, #0]
 800d8e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8e8:	2b3e      	cmp	r3, #62	; 0x3e
 800d8ea:	d921      	bls.n	800d930 <USB_EPStartXfer+0xc40>
 800d8ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8f0:	095b      	lsrs	r3, r3, #5
 800d8f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d8f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8fa:	f003 031f 	and.w	r3, r3, #31
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d104      	bne.n	800d90c <USB_EPStartXfer+0xc1c>
 800d902:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d906:	3b01      	subs	r3, #1
 800d908:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d90c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d90e:	881b      	ldrh	r3, [r3, #0]
 800d910:	b29a      	uxth	r2, r3
 800d912:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d916:	b29b      	uxth	r3, r3
 800d918:	029b      	lsls	r3, r3, #10
 800d91a:	b29b      	uxth	r3, r3
 800d91c:	4313      	orrs	r3, r2
 800d91e:	b29b      	uxth	r3, r3
 800d920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d928:	b29a      	uxth	r2, r3
 800d92a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d92c:	801a      	strh	r2, [r3, #0]
 800d92e:	e05c      	b.n	800d9ea <USB_EPStartXfer+0xcfa>
 800d930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d934:	2b00      	cmp	r3, #0
 800d936:	d10a      	bne.n	800d94e <USB_EPStartXfer+0xc5e>
 800d938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d93a:	881b      	ldrh	r3, [r3, #0]
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d946:	b29a      	uxth	r2, r3
 800d948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d94a:	801a      	strh	r2, [r3, #0]
 800d94c:	e04d      	b.n	800d9ea <USB_EPStartXfer+0xcfa>
 800d94e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d952:	085b      	lsrs	r3, r3, #1
 800d954:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d95c:	f003 0301 	and.w	r3, r3, #1
 800d960:	2b00      	cmp	r3, #0
 800d962:	d004      	beq.n	800d96e <USB_EPStartXfer+0xc7e>
 800d964:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d968:	3301      	adds	r3, #1
 800d96a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d96e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d970:	881b      	ldrh	r3, [r3, #0]
 800d972:	b29a      	uxth	r2, r3
 800d974:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d978:	b29b      	uxth	r3, r3
 800d97a:	029b      	lsls	r3, r3, #10
 800d97c:	b29b      	uxth	r3, r3
 800d97e:	4313      	orrs	r3, r2
 800d980:	b29a      	uxth	r2, r3
 800d982:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d984:	801a      	strh	r2, [r3, #0]
 800d986:	e030      	b.n	800d9ea <USB_EPStartXfer+0xcfa>
 800d988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d98c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	785b      	ldrb	r3, [r3, #1]
 800d994:	2b01      	cmp	r3, #1
 800d996:	d128      	bne.n	800d9ea <USB_EPStartXfer+0xcfa>
 800d998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d99c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d9a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d9b4:	b29b      	uxth	r3, r3
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d9bc:	4413      	add	r3, r2
 800d9be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d9c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	011a      	lsls	r2, r3, #4
 800d9d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d9d4:	4413      	add	r3, r2
 800d9d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d9da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d9de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9e2:	b29a      	uxth	r2, r3
 800d9e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d9e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d9ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	891b      	ldrh	r3, [r3, #8]
 800d9f6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d9fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	6959      	ldr	r1, [r3, #20]
 800da06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800da10:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800da14:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800da18:	6800      	ldr	r0, [r0, #0]
 800da1a:	f000 fe58 	bl	800e6ce <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800da1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da26:	681a      	ldr	r2, [r3, #0]
 800da28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	009b      	lsls	r3, r3, #2
 800da36:	4413      	add	r3, r2
 800da38:	881b      	ldrh	r3, [r3, #0]
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da44:	817b      	strh	r3, [r7, #10]
 800da46:	897b      	ldrh	r3, [r7, #10]
 800da48:	f083 0310 	eor.w	r3, r3, #16
 800da4c:	817b      	strh	r3, [r7, #10]
 800da4e:	897b      	ldrh	r3, [r7, #10]
 800da50:	f083 0320 	eor.w	r3, r3, #32
 800da54:	817b      	strh	r3, [r7, #10]
 800da56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da5e:	681a      	ldr	r2, [r3, #0]
 800da60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	009b      	lsls	r3, r3, #2
 800da6e:	441a      	add	r2, r3
 800da70:	897b      	ldrh	r3, [r7, #10]
 800da72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800da76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800da7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800da7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da82:	b29b      	uxth	r3, r3
 800da84:	8013      	strh	r3, [r2, #0]
 800da86:	f000 bcde 	b.w	800e446 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800da8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	7b1b      	ldrb	r3, [r3, #12]
 800da96:	2b00      	cmp	r3, #0
 800da98:	f040 80bb 	bne.w	800dc12 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800da9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	699a      	ldr	r2, [r3, #24]
 800daa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	691b      	ldr	r3, [r3, #16]
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d917      	bls.n	800dae8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800dab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dabc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	691b      	ldr	r3, [r3, #16]
 800dac4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800dac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dacc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	699a      	ldr	r2, [r3, #24]
 800dad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dad8:	1ad2      	subs	r2, r2, r3
 800dada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	619a      	str	r2, [r3, #24]
 800dae6:	e00e      	b.n	800db06 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800dae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	699b      	ldr	r3, [r3, #24]
 800daf4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800daf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dafc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	2200      	movs	r2, #0
 800db04:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800db06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800db14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800db22:	b29b      	uxth	r3, r3
 800db24:	461a      	mov	r2, r3
 800db26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800db2a:	4413      	add	r3, r2
 800db2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800db30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	781b      	ldrb	r3, [r3, #0]
 800db3c:	011a      	lsls	r2, r3, #4
 800db3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800db42:	4413      	add	r3, r2
 800db44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800db48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800db4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800db50:	881b      	ldrh	r3, [r3, #0]
 800db52:	b29b      	uxth	r3, r3
 800db54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800db58:	b29a      	uxth	r2, r3
 800db5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800db5e:	801a      	strh	r2, [r3, #0]
 800db60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db64:	2b3e      	cmp	r3, #62	; 0x3e
 800db66:	d924      	bls.n	800dbb2 <USB_EPStartXfer+0xec2>
 800db68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db6c:	095b      	lsrs	r3, r3, #5
 800db6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800db72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db76:	f003 031f 	and.w	r3, r3, #31
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d104      	bne.n	800db88 <USB_EPStartXfer+0xe98>
 800db7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800db82:	3b01      	subs	r3, #1
 800db84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800db88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800db8c:	881b      	ldrh	r3, [r3, #0]
 800db8e:	b29a      	uxth	r2, r3
 800db90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800db94:	b29b      	uxth	r3, r3
 800db96:	029b      	lsls	r3, r3, #10
 800db98:	b29b      	uxth	r3, r3
 800db9a:	4313      	orrs	r3, r2
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dba6:	b29a      	uxth	r2, r3
 800dba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dbac:	801a      	strh	r2, [r3, #0]
 800dbae:	f000 bc10 	b.w	800e3d2 <USB_EPStartXfer+0x16e2>
 800dbb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d10c      	bne.n	800dbd4 <USB_EPStartXfer+0xee4>
 800dbba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dbbe:	881b      	ldrh	r3, [r3, #0]
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dbc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dbca:	b29a      	uxth	r2, r3
 800dbcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dbd0:	801a      	strh	r2, [r3, #0]
 800dbd2:	e3fe      	b.n	800e3d2 <USB_EPStartXfer+0x16e2>
 800dbd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dbd8:	085b      	lsrs	r3, r3, #1
 800dbda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dbde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dbe2:	f003 0301 	and.w	r3, r3, #1
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d004      	beq.n	800dbf4 <USB_EPStartXfer+0xf04>
 800dbea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800dbee:	3301      	adds	r3, #1
 800dbf0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dbf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dbf8:	881b      	ldrh	r3, [r3, #0]
 800dbfa:	b29a      	uxth	r2, r3
 800dbfc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800dc00:	b29b      	uxth	r3, r3
 800dc02:	029b      	lsls	r3, r3, #10
 800dc04:	b29b      	uxth	r3, r3
 800dc06:	4313      	orrs	r3, r2
 800dc08:	b29a      	uxth	r2, r3
 800dc0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc0e:	801a      	strh	r2, [r3, #0]
 800dc10:	e3df      	b.n	800e3d2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800dc12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	78db      	ldrb	r3, [r3, #3]
 800dc1e:	2b02      	cmp	r3, #2
 800dc20:	f040 8218 	bne.w	800e054 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800dc24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	785b      	ldrb	r3, [r3, #1]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	f040 809d 	bne.w	800dd70 <USB_EPStartXfer+0x1080>
 800dc36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dc44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	461a      	mov	r2, r3
 800dc56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc5a:	4413      	add	r3, r2
 800dc5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dc60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	011a      	lsls	r2, r3, #4
 800dc6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dc72:	4413      	add	r3, r2
 800dc74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800dc78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800dc7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dc80:	881b      	ldrh	r3, [r3, #0]
 800dc82:	b29b      	uxth	r3, r3
 800dc84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc88:	b29a      	uxth	r2, r3
 800dc8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dc8e:	801a      	strh	r2, [r3, #0]
 800dc90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	691b      	ldr	r3, [r3, #16]
 800dc9c:	2b3e      	cmp	r3, #62	; 0x3e
 800dc9e:	d92b      	bls.n	800dcf8 <USB_EPStartXfer+0x1008>
 800dca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	691b      	ldr	r3, [r3, #16]
 800dcac:	095b      	lsrs	r3, r3, #5
 800dcae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dcb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	691b      	ldr	r3, [r3, #16]
 800dcbe:	f003 031f 	and.w	r3, r3, #31
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d104      	bne.n	800dcd0 <USB_EPStartXfer+0xfe0>
 800dcc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dcca:	3b01      	subs	r3, #1
 800dccc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dcd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dcd4:	881b      	ldrh	r3, [r3, #0]
 800dcd6:	b29a      	uxth	r2, r3
 800dcd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dcdc:	b29b      	uxth	r3, r3
 800dcde:	029b      	lsls	r3, r3, #10
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	4313      	orrs	r3, r2
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcee:	b29a      	uxth	r2, r3
 800dcf0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dcf4:	801a      	strh	r2, [r3, #0]
 800dcf6:	e070      	b.n	800ddda <USB_EPStartXfer+0x10ea>
 800dcf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	691b      	ldr	r3, [r3, #16]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d10c      	bne.n	800dd22 <USB_EPStartXfer+0x1032>
 800dd08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dd0c:	881b      	ldrh	r3, [r3, #0]
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd18:	b29a      	uxth	r2, r3
 800dd1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dd1e:	801a      	strh	r2, [r3, #0]
 800dd20:	e05b      	b.n	800ddda <USB_EPStartXfer+0x10ea>
 800dd22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	691b      	ldr	r3, [r3, #16]
 800dd2e:	085b      	lsrs	r3, r3, #1
 800dd30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dd34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	691b      	ldr	r3, [r3, #16]
 800dd40:	f003 0301 	and.w	r3, r3, #1
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d004      	beq.n	800dd52 <USB_EPStartXfer+0x1062>
 800dd48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dd52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dd56:	881b      	ldrh	r3, [r3, #0]
 800dd58:	b29a      	uxth	r2, r3
 800dd5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	029b      	lsls	r3, r3, #10
 800dd62:	b29b      	uxth	r3, r3
 800dd64:	4313      	orrs	r3, r2
 800dd66:	b29a      	uxth	r2, r3
 800dd68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dd6c:	801a      	strh	r2, [r3, #0]
 800dd6e:	e034      	b.n	800ddda <USB_EPStartXfer+0x10ea>
 800dd70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	785b      	ldrb	r3, [r3, #1]
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	d12c      	bne.n	800ddda <USB_EPStartXfer+0x10ea>
 800dd80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dd8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	461a      	mov	r2, r3
 800dda0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dda4:	4413      	add	r3, r2
 800dda6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ddaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	011a      	lsls	r2, r3, #4
 800ddb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ddbc:	4413      	add	r3, r2
 800ddbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ddc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ddc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	691b      	ldr	r3, [r3, #16]
 800ddd2:	b29a      	uxth	r2, r3
 800ddd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ddd8:	801a      	strh	r2, [r3, #0]
 800ddda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800dde8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	785b      	ldrb	r3, [r3, #1]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	f040 809d 	bne.w	800df34 <USB_EPStartXfer+0x1244>
 800ddfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800de08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800de16:	b29b      	uxth	r3, r3
 800de18:	461a      	mov	r2, r3
 800de1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800de1e:	4413      	add	r3, r2
 800de20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800de24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	011a      	lsls	r2, r3, #4
 800de32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800de36:	4413      	add	r3, r2
 800de38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800de3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800de40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800de44:	881b      	ldrh	r3, [r3, #0]
 800de46:	b29b      	uxth	r3, r3
 800de48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800de4c:	b29a      	uxth	r2, r3
 800de4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800de52:	801a      	strh	r2, [r3, #0]
 800de54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	691b      	ldr	r3, [r3, #16]
 800de60:	2b3e      	cmp	r3, #62	; 0x3e
 800de62:	d92b      	bls.n	800debc <USB_EPStartXfer+0x11cc>
 800de64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	691b      	ldr	r3, [r3, #16]
 800de70:	095b      	lsrs	r3, r3, #5
 800de72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800de76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	691b      	ldr	r3, [r3, #16]
 800de82:	f003 031f 	and.w	r3, r3, #31
 800de86:	2b00      	cmp	r3, #0
 800de88:	d104      	bne.n	800de94 <USB_EPStartXfer+0x11a4>
 800de8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de8e:	3b01      	subs	r3, #1
 800de90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800de94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800de98:	881b      	ldrh	r3, [r3, #0]
 800de9a:	b29a      	uxth	r2, r3
 800de9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dea0:	b29b      	uxth	r3, r3
 800dea2:	029b      	lsls	r3, r3, #10
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	4313      	orrs	r3, r2
 800dea8:	b29b      	uxth	r3, r3
 800deaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800deae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800deb2:	b29a      	uxth	r2, r3
 800deb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800deb8:	801a      	strh	r2, [r3, #0]
 800deba:	e069      	b.n	800df90 <USB_EPStartXfer+0x12a0>
 800debc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	691b      	ldr	r3, [r3, #16]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d10c      	bne.n	800dee6 <USB_EPStartXfer+0x11f6>
 800decc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ded0:	881b      	ldrh	r3, [r3, #0]
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ded8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dedc:	b29a      	uxth	r2, r3
 800dede:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dee2:	801a      	strh	r2, [r3, #0]
 800dee4:	e054      	b.n	800df90 <USB_EPStartXfer+0x12a0>
 800dee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800deea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	691b      	ldr	r3, [r3, #16]
 800def2:	085b      	lsrs	r3, r3, #1
 800def4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800def8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800defc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	691b      	ldr	r3, [r3, #16]
 800df04:	f003 0301 	and.w	r3, r3, #1
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d004      	beq.n	800df16 <USB_EPStartXfer+0x1226>
 800df0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df10:	3301      	adds	r3, #1
 800df12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800df16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800df1a:	881b      	ldrh	r3, [r3, #0]
 800df1c:	b29a      	uxth	r2, r3
 800df1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df22:	b29b      	uxth	r3, r3
 800df24:	029b      	lsls	r3, r3, #10
 800df26:	b29b      	uxth	r3, r3
 800df28:	4313      	orrs	r3, r2
 800df2a:	b29a      	uxth	r2, r3
 800df2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800df30:	801a      	strh	r2, [r3, #0]
 800df32:	e02d      	b.n	800df90 <USB_EPStartXfer+0x12a0>
 800df34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	785b      	ldrb	r3, [r3, #1]
 800df40:	2b01      	cmp	r3, #1
 800df42:	d125      	bne.n	800df90 <USB_EPStartXfer+0x12a0>
 800df44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800df52:	b29b      	uxth	r3, r3
 800df54:	461a      	mov	r2, r3
 800df56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800df5a:	4413      	add	r3, r2
 800df5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800df60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	781b      	ldrb	r3, [r3, #0]
 800df6c:	011a      	lsls	r2, r3, #4
 800df6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800df72:	4413      	add	r3, r2
 800df74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800df78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800df7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	691b      	ldr	r3, [r3, #16]
 800df88:	b29a      	uxth	r2, r3
 800df8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800df8e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800df90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	69db      	ldr	r3, [r3, #28]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	f000 8218 	beq.w	800e3d2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800dfa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dfaa:	681a      	ldr	r2, [r3, #0]
 800dfac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	4413      	add	r3, r2
 800dfbc:	881b      	ldrh	r3, [r3, #0]
 800dfbe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dfc2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800dfc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d005      	beq.n	800dfda <USB_EPStartXfer+0x12ea>
 800dfce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800dfd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d10d      	bne.n	800dff6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dfda:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800dfde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	f040 81f5 	bne.w	800e3d2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dfe8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800dfec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	f040 81ee 	bne.w	800e3d2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800dff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dffa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dffe:	681a      	ldr	r2, [r3, #0]
 800e000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	781b      	ldrb	r3, [r3, #0]
 800e00c:	009b      	lsls	r3, r3, #2
 800e00e:	4413      	add	r3, r2
 800e010:	881b      	ldrh	r3, [r3, #0]
 800e012:	b29b      	uxth	r3, r3
 800e014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e01c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800e020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e024:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e028:	681a      	ldr	r2, [r3, #0]
 800e02a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e02e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	781b      	ldrb	r3, [r3, #0]
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	441a      	add	r2, r3
 800e03a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800e03e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e04a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e04e:	b29b      	uxth	r3, r3
 800e050:	8013      	strh	r3, [r2, #0]
 800e052:	e1be      	b.n	800e3d2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e058:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	78db      	ldrb	r3, [r3, #3]
 800e060:	2b01      	cmp	r3, #1
 800e062:	f040 81b4 	bne.w	800e3ce <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800e066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e06a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	699a      	ldr	r2, [r3, #24]
 800e072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e076:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	691b      	ldr	r3, [r3, #16]
 800e07e:	429a      	cmp	r2, r3
 800e080:	d917      	bls.n	800e0b2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800e082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	691b      	ldr	r3, [r3, #16]
 800e08e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800e092:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	699a      	ldr	r2, [r3, #24]
 800e09e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0a2:	1ad2      	subs	r2, r2, r3
 800e0a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	619a      	str	r2, [r3, #24]
 800e0b0:	e00e      	b.n	800e0d0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800e0b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	699b      	ldr	r3, [r3, #24]
 800e0be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800e0c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800e0d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	785b      	ldrb	r3, [r3, #1]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	f040 8085 	bne.w	800e1ec <USB_EPStartXfer+0x14fc>
 800e0e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e0f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	461a      	mov	r2, r3
 800e102:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e106:	4413      	add	r3, r2
 800e108:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e10c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	011a      	lsls	r2, r3, #4
 800e11a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e11e:	4413      	add	r3, r2
 800e120:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e124:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e128:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e12c:	881b      	ldrh	r3, [r3, #0]
 800e12e:	b29b      	uxth	r3, r3
 800e130:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e134:	b29a      	uxth	r2, r3
 800e136:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e13a:	801a      	strh	r2, [r3, #0]
 800e13c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e140:	2b3e      	cmp	r3, #62	; 0x3e
 800e142:	d923      	bls.n	800e18c <USB_EPStartXfer+0x149c>
 800e144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e148:	095b      	lsrs	r3, r3, #5
 800e14a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e14e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e152:	f003 031f 	and.w	r3, r3, #31
 800e156:	2b00      	cmp	r3, #0
 800e158:	d104      	bne.n	800e164 <USB_EPStartXfer+0x1474>
 800e15a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e15e:	3b01      	subs	r3, #1
 800e160:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e164:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e168:	881b      	ldrh	r3, [r3, #0]
 800e16a:	b29a      	uxth	r2, r3
 800e16c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e170:	b29b      	uxth	r3, r3
 800e172:	029b      	lsls	r3, r3, #10
 800e174:	b29b      	uxth	r3, r3
 800e176:	4313      	orrs	r3, r2
 800e178:	b29b      	uxth	r3, r3
 800e17a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e17e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e182:	b29a      	uxth	r2, r3
 800e184:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e188:	801a      	strh	r2, [r3, #0]
 800e18a:	e060      	b.n	800e24e <USB_EPStartXfer+0x155e>
 800e18c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e190:	2b00      	cmp	r3, #0
 800e192:	d10c      	bne.n	800e1ae <USB_EPStartXfer+0x14be>
 800e194:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e198:	881b      	ldrh	r3, [r3, #0]
 800e19a:	b29b      	uxth	r3, r3
 800e19c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e1a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1a4:	b29a      	uxth	r2, r3
 800e1a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e1aa:	801a      	strh	r2, [r3, #0]
 800e1ac:	e04f      	b.n	800e24e <USB_EPStartXfer+0x155e>
 800e1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1b2:	085b      	lsrs	r3, r3, #1
 800e1b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e1b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1bc:	f003 0301 	and.w	r3, r3, #1
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d004      	beq.n	800e1ce <USB_EPStartXfer+0x14de>
 800e1c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e1ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e1d2:	881b      	ldrh	r3, [r3, #0]
 800e1d4:	b29a      	uxth	r2, r3
 800e1d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1da:	b29b      	uxth	r3, r3
 800e1dc:	029b      	lsls	r3, r3, #10
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	4313      	orrs	r3, r2
 800e1e2:	b29a      	uxth	r2, r3
 800e1e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e1e8:	801a      	strh	r2, [r3, #0]
 800e1ea:	e030      	b.n	800e24e <USB_EPStartXfer+0x155e>
 800e1ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	785b      	ldrb	r3, [r3, #1]
 800e1f8:	2b01      	cmp	r3, #1
 800e1fa:	d128      	bne.n	800e24e <USB_EPStartXfer+0x155e>
 800e1fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e200:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e20a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e20e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e218:	b29b      	uxth	r3, r3
 800e21a:	461a      	mov	r2, r3
 800e21c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e220:	4413      	add	r3, r2
 800e222:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e22a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	011a      	lsls	r2, r3, #4
 800e234:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e238:	4413      	add	r3, r2
 800e23a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800e23e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e246:	b29a      	uxth	r2, r3
 800e248:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e24c:	801a      	strh	r2, [r3, #0]
 800e24e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e25c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	785b      	ldrb	r3, [r3, #1]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	f040 8085 	bne.w	800e378 <USB_EPStartXfer+0x1688>
 800e26e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e272:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e27c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e280:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e28a:	b29b      	uxth	r3, r3
 800e28c:	461a      	mov	r2, r3
 800e28e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e292:	4413      	add	r3, r2
 800e294:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e29c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	011a      	lsls	r2, r3, #4
 800e2a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e2aa:	4413      	add	r3, r2
 800e2ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e2b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e2b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e2b8:	881b      	ldrh	r3, [r3, #0]
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e2c0:	b29a      	uxth	r2, r3
 800e2c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e2c6:	801a      	strh	r2, [r3, #0]
 800e2c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2cc:	2b3e      	cmp	r3, #62	; 0x3e
 800e2ce:	d923      	bls.n	800e318 <USB_EPStartXfer+0x1628>
 800e2d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2d4:	095b      	lsrs	r3, r3, #5
 800e2d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e2da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2de:	f003 031f 	and.w	r3, r3, #31
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d104      	bne.n	800e2f0 <USB_EPStartXfer+0x1600>
 800e2e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e2ea:	3b01      	subs	r3, #1
 800e2ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e2f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e2f4:	881b      	ldrh	r3, [r3, #0]
 800e2f6:	b29a      	uxth	r2, r3
 800e2f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	029b      	lsls	r3, r3, #10
 800e300:	b29b      	uxth	r3, r3
 800e302:	4313      	orrs	r3, r2
 800e304:	b29b      	uxth	r3, r3
 800e306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e30a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e30e:	b29a      	uxth	r2, r3
 800e310:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e314:	801a      	strh	r2, [r3, #0]
 800e316:	e05c      	b.n	800e3d2 <USB_EPStartXfer+0x16e2>
 800e318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d10c      	bne.n	800e33a <USB_EPStartXfer+0x164a>
 800e320:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e324:	881b      	ldrh	r3, [r3, #0]
 800e326:	b29b      	uxth	r3, r3
 800e328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e32c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e330:	b29a      	uxth	r2, r3
 800e332:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e336:	801a      	strh	r2, [r3, #0]
 800e338:	e04b      	b.n	800e3d2 <USB_EPStartXfer+0x16e2>
 800e33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e33e:	085b      	lsrs	r3, r3, #1
 800e340:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e348:	f003 0301 	and.w	r3, r3, #1
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d004      	beq.n	800e35a <USB_EPStartXfer+0x166a>
 800e350:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e354:	3301      	adds	r3, #1
 800e356:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e35a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e35e:	881b      	ldrh	r3, [r3, #0]
 800e360:	b29a      	uxth	r2, r3
 800e362:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e366:	b29b      	uxth	r3, r3
 800e368:	029b      	lsls	r3, r3, #10
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	4313      	orrs	r3, r2
 800e36e:	b29a      	uxth	r2, r3
 800e370:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e374:	801a      	strh	r2, [r3, #0]
 800e376:	e02c      	b.n	800e3d2 <USB_EPStartXfer+0x16e2>
 800e378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e37c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	785b      	ldrb	r3, [r3, #1]
 800e384:	2b01      	cmp	r3, #1
 800e386:	d124      	bne.n	800e3d2 <USB_EPStartXfer+0x16e2>
 800e388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e38c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e396:	b29b      	uxth	r3, r3
 800e398:	461a      	mov	r2, r3
 800e39a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e39e:	4413      	add	r3, r2
 800e3a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e3a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	011a      	lsls	r2, r3, #4
 800e3b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e3b6:	4413      	add	r3, r2
 800e3b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800e3bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e3c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3c4:	b29a      	uxth	r2, r3
 800e3c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e3ca:	801a      	strh	r2, [r3, #0]
 800e3cc:	e001      	b.n	800e3d2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800e3ce:	2301      	movs	r3, #1
 800e3d0:	e03a      	b.n	800e448 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e3d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	781b      	ldrb	r3, [r3, #0]
 800e3e8:	009b      	lsls	r3, r3, #2
 800e3ea:	4413      	add	r3, r2
 800e3ec:	881b      	ldrh	r3, [r3, #0]
 800e3ee:	b29b      	uxth	r3, r3
 800e3f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e3f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e3f8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e3fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e400:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e404:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e408:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e40c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e410:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e418:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e41c:	681a      	ldr	r2, [r3, #0]
 800e41e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	009b      	lsls	r3, r3, #2
 800e42c:	441a      	add	r2, r3
 800e42e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e43a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e43e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e442:	b29b      	uxth	r3, r3
 800e444:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e446:	2300      	movs	r3, #0
}
 800e448:	4618      	mov	r0, r3
 800e44a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}

0800e452 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e452:	b480      	push	{r7}
 800e454:	b085      	sub	sp, #20
 800e456:	af00      	add	r7, sp, #0
 800e458:	6078      	str	r0, [r7, #4]
 800e45a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	785b      	ldrb	r3, [r3, #1]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d020      	beq.n	800e4a6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e464:	687a      	ldr	r2, [r7, #4]
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	009b      	lsls	r3, r3, #2
 800e46c:	4413      	add	r3, r2
 800e46e:	881b      	ldrh	r3, [r3, #0]
 800e470:	b29b      	uxth	r3, r3
 800e472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e476:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e47a:	81bb      	strh	r3, [r7, #12]
 800e47c:	89bb      	ldrh	r3, [r7, #12]
 800e47e:	f083 0310 	eor.w	r3, r3, #16
 800e482:	81bb      	strh	r3, [r7, #12]
 800e484:	687a      	ldr	r2, [r7, #4]
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	781b      	ldrb	r3, [r3, #0]
 800e48a:	009b      	lsls	r3, r3, #2
 800e48c:	441a      	add	r2, r3
 800e48e:	89bb      	ldrh	r3, [r7, #12]
 800e490:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e494:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e49c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4a0:	b29b      	uxth	r3, r3
 800e4a2:	8013      	strh	r3, [r2, #0]
 800e4a4:	e01f      	b.n	800e4e6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e4a6:	687a      	ldr	r2, [r7, #4]
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	781b      	ldrb	r3, [r3, #0]
 800e4ac:	009b      	lsls	r3, r3, #2
 800e4ae:	4413      	add	r3, r2
 800e4b0:	881b      	ldrh	r3, [r3, #0]
 800e4b2:	b29b      	uxth	r3, r3
 800e4b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e4b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e4bc:	81fb      	strh	r3, [r7, #14]
 800e4be:	89fb      	ldrh	r3, [r7, #14]
 800e4c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e4c4:	81fb      	strh	r3, [r7, #14]
 800e4c6:	687a      	ldr	r2, [r7, #4]
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	009b      	lsls	r3, r3, #2
 800e4ce:	441a      	add	r2, r3
 800e4d0:	89fb      	ldrh	r3, [r7, #14]
 800e4d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e4d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e4da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e4de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e4e6:	2300      	movs	r3, #0
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3714      	adds	r7, #20
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bc80      	pop	{r7}
 800e4f0:	4770      	bx	lr

0800e4f2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e4f2:	b480      	push	{r7}
 800e4f4:	b087      	sub	sp, #28
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	6078      	str	r0, [r7, #4]
 800e4fa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	7b1b      	ldrb	r3, [r3, #12]
 800e500:	2b00      	cmp	r3, #0
 800e502:	f040 809d 	bne.w	800e640 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	785b      	ldrb	r3, [r3, #1]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d04c      	beq.n	800e5a8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e50e:	687a      	ldr	r2, [r7, #4]
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	009b      	lsls	r3, r3, #2
 800e516:	4413      	add	r3, r2
 800e518:	881b      	ldrh	r3, [r3, #0]
 800e51a:	823b      	strh	r3, [r7, #16]
 800e51c:	8a3b      	ldrh	r3, [r7, #16]
 800e51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e522:	2b00      	cmp	r3, #0
 800e524:	d01b      	beq.n	800e55e <USB_EPClearStall+0x6c>
 800e526:	687a      	ldr	r2, [r7, #4]
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	781b      	ldrb	r3, [r3, #0]
 800e52c:	009b      	lsls	r3, r3, #2
 800e52e:	4413      	add	r3, r2
 800e530:	881b      	ldrh	r3, [r3, #0]
 800e532:	b29b      	uxth	r3, r3
 800e534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e53c:	81fb      	strh	r3, [r7, #14]
 800e53e:	687a      	ldr	r2, [r7, #4]
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	009b      	lsls	r3, r3, #2
 800e546:	441a      	add	r2, r3
 800e548:	89fb      	ldrh	r3, [r7, #14]
 800e54a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e54e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e556:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e55a:	b29b      	uxth	r3, r3
 800e55c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	78db      	ldrb	r3, [r3, #3]
 800e562:	2b01      	cmp	r3, #1
 800e564:	d06c      	beq.n	800e640 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e566:	687a      	ldr	r2, [r7, #4]
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	781b      	ldrb	r3, [r3, #0]
 800e56c:	009b      	lsls	r3, r3, #2
 800e56e:	4413      	add	r3, r2
 800e570:	881b      	ldrh	r3, [r3, #0]
 800e572:	b29b      	uxth	r3, r3
 800e574:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e57c:	81bb      	strh	r3, [r7, #12]
 800e57e:	89bb      	ldrh	r3, [r7, #12]
 800e580:	f083 0320 	eor.w	r3, r3, #32
 800e584:	81bb      	strh	r3, [r7, #12]
 800e586:	687a      	ldr	r2, [r7, #4]
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	781b      	ldrb	r3, [r3, #0]
 800e58c:	009b      	lsls	r3, r3, #2
 800e58e:	441a      	add	r2, r3
 800e590:	89bb      	ldrh	r3, [r7, #12]
 800e592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e59a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e59e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5a2:	b29b      	uxth	r3, r3
 800e5a4:	8013      	strh	r3, [r2, #0]
 800e5a6:	e04b      	b.n	800e640 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e5a8:	687a      	ldr	r2, [r7, #4]
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	781b      	ldrb	r3, [r3, #0]
 800e5ae:	009b      	lsls	r3, r3, #2
 800e5b0:	4413      	add	r3, r2
 800e5b2:	881b      	ldrh	r3, [r3, #0]
 800e5b4:	82fb      	strh	r3, [r7, #22]
 800e5b6:	8afb      	ldrh	r3, [r7, #22]
 800e5b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d01b      	beq.n	800e5f8 <USB_EPClearStall+0x106>
 800e5c0:	687a      	ldr	r2, [r7, #4]
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	009b      	lsls	r3, r3, #2
 800e5c8:	4413      	add	r3, r2
 800e5ca:	881b      	ldrh	r3, [r3, #0]
 800e5cc:	b29b      	uxth	r3, r3
 800e5ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e5d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e5d6:	82bb      	strh	r3, [r7, #20]
 800e5d8:	687a      	ldr	r2, [r7, #4]
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	781b      	ldrb	r3, [r3, #0]
 800e5de:	009b      	lsls	r3, r3, #2
 800e5e0:	441a      	add	r2, r3
 800e5e2:	8abb      	ldrh	r3, [r7, #20]
 800e5e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e5e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e5ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e5f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5f4:	b29b      	uxth	r3, r3
 800e5f6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e5f8:	687a      	ldr	r2, [r7, #4]
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	009b      	lsls	r3, r3, #2
 800e600:	4413      	add	r3, r2
 800e602:	881b      	ldrh	r3, [r3, #0]
 800e604:	b29b      	uxth	r3, r3
 800e606:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e60a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e60e:	827b      	strh	r3, [r7, #18]
 800e610:	8a7b      	ldrh	r3, [r7, #18]
 800e612:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e616:	827b      	strh	r3, [r7, #18]
 800e618:	8a7b      	ldrh	r3, [r7, #18]
 800e61a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e61e:	827b      	strh	r3, [r7, #18]
 800e620:	687a      	ldr	r2, [r7, #4]
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	781b      	ldrb	r3, [r3, #0]
 800e626:	009b      	lsls	r3, r3, #2
 800e628:	441a      	add	r2, r3
 800e62a:	8a7b      	ldrh	r3, [r7, #18]
 800e62c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e63c:	b29b      	uxth	r3, r3
 800e63e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e640:	2300      	movs	r3, #0
}
 800e642:	4618      	mov	r0, r3
 800e644:	371c      	adds	r7, #28
 800e646:	46bd      	mov	sp, r7
 800e648:	bc80      	pop	{r7}
 800e64a:	4770      	bx	lr

0800e64c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e64c:	b480      	push	{r7}
 800e64e:	b083      	sub	sp, #12
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	460b      	mov	r3, r1
 800e656:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e658:	78fb      	ldrb	r3, [r7, #3]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d103      	bne.n	800e666 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2280      	movs	r2, #128	; 0x80
 800e662:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800e666:	2300      	movs	r3, #0
}
 800e668:	4618      	mov	r0, r3
 800e66a:	370c      	adds	r7, #12
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bc80      	pop	{r7}
 800e670:	4770      	bx	lr

0800e672 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e672:	b480      	push	{r7}
 800e674:	b083      	sub	sp, #12
 800e676:	af00      	add	r7, sp, #0
 800e678:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800e67a:	2300      	movs	r3, #0
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	370c      	adds	r7, #12
 800e680:	46bd      	mov	sp, r7
 800e682:	bc80      	pop	{r7}
 800e684:	4770      	bx	lr

0800e686 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800e686:	b480      	push	{r7}
 800e688:	b083      	sub	sp, #12
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800e68e:	2300      	movs	r3, #0
}
 800e690:	4618      	mov	r0, r3
 800e692:	370c      	adds	r7, #12
 800e694:	46bd      	mov	sp, r7
 800e696:	bc80      	pop	{r7}
 800e698:	4770      	bx	lr

0800e69a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e69a:	b480      	push	{r7}
 800e69c:	b085      	sub	sp, #20
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e6a8:	b29b      	uxth	r3, r3
 800e6aa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3714      	adds	r7, #20
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bc80      	pop	{r7}
 800e6b6:	4770      	bx	lr

0800e6b8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b083      	sub	sp, #12
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800e6c2:	2300      	movs	r3, #0
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	370c      	adds	r7, #12
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bc80      	pop	{r7}
 800e6cc:	4770      	bx	lr

0800e6ce <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e6ce:	b480      	push	{r7}
 800e6d0:	b08b      	sub	sp, #44	; 0x2c
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	60f8      	str	r0, [r7, #12]
 800e6d6:	60b9      	str	r1, [r7, #8]
 800e6d8:	4611      	mov	r1, r2
 800e6da:	461a      	mov	r2, r3
 800e6dc:	460b      	mov	r3, r1
 800e6de:	80fb      	strh	r3, [r7, #6]
 800e6e0:	4613      	mov	r3, r2
 800e6e2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e6e4:	88bb      	ldrh	r3, [r7, #4]
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	085b      	lsrs	r3, r3, #1
 800e6ea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e6f4:	88fb      	ldrh	r3, [r7, #6]
 800e6f6:	005a      	lsls	r2, r3, #1
 800e6f8:	697b      	ldr	r3, [r7, #20]
 800e6fa:	4413      	add	r3, r2
 800e6fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e700:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e702:	69bb      	ldr	r3, [r7, #24]
 800e704:	627b      	str	r3, [r7, #36]	; 0x24
 800e706:	e01e      	b.n	800e746 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800e708:	69fb      	ldr	r3, [r7, #28]
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e70e:	69fb      	ldr	r3, [r7, #28]
 800e710:	3301      	adds	r3, #1
 800e712:	781b      	ldrb	r3, [r3, #0]
 800e714:	021b      	lsls	r3, r3, #8
 800e716:	b21a      	sxth	r2, r3
 800e718:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e71c:	4313      	orrs	r3, r2
 800e71e:	b21b      	sxth	r3, r3
 800e720:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e722:	6a3b      	ldr	r3, [r7, #32]
 800e724:	8a7a      	ldrh	r2, [r7, #18]
 800e726:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e728:	6a3b      	ldr	r3, [r7, #32]
 800e72a:	3302      	adds	r3, #2
 800e72c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800e72e:	6a3b      	ldr	r3, [r7, #32]
 800e730:	3302      	adds	r3, #2
 800e732:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800e734:	69fb      	ldr	r3, [r7, #28]
 800e736:	3301      	adds	r3, #1
 800e738:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e73a:	69fb      	ldr	r3, [r7, #28]
 800e73c:	3301      	adds	r3, #1
 800e73e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e742:	3b01      	subs	r3, #1
 800e744:	627b      	str	r3, [r7, #36]	; 0x24
 800e746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d1dd      	bne.n	800e708 <USB_WritePMA+0x3a>
  }
}
 800e74c:	bf00      	nop
 800e74e:	bf00      	nop
 800e750:	372c      	adds	r7, #44	; 0x2c
 800e752:	46bd      	mov	sp, r7
 800e754:	bc80      	pop	{r7}
 800e756:	4770      	bx	lr

0800e758 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e758:	b480      	push	{r7}
 800e75a:	b08b      	sub	sp, #44	; 0x2c
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	60f8      	str	r0, [r7, #12]
 800e760:	60b9      	str	r1, [r7, #8]
 800e762:	4611      	mov	r1, r2
 800e764:	461a      	mov	r2, r3
 800e766:	460b      	mov	r3, r1
 800e768:	80fb      	strh	r3, [r7, #6]
 800e76a:	4613      	mov	r3, r2
 800e76c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e76e:	88bb      	ldrh	r3, [r7, #4]
 800e770:	085b      	lsrs	r3, r3, #1
 800e772:	b29b      	uxth	r3, r3
 800e774:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e77e:	88fb      	ldrh	r3, [r7, #6]
 800e780:	005a      	lsls	r2, r3, #1
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	4413      	add	r3, r2
 800e786:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e78a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e78c:	69bb      	ldr	r3, [r7, #24]
 800e78e:	627b      	str	r3, [r7, #36]	; 0x24
 800e790:	e01b      	b.n	800e7ca <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e792:	6a3b      	ldr	r3, [r7, #32]
 800e794:	881b      	ldrh	r3, [r3, #0]
 800e796:	b29b      	uxth	r3, r3
 800e798:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e79a:	6a3b      	ldr	r3, [r7, #32]
 800e79c:	3302      	adds	r3, #2
 800e79e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	b2da      	uxtb	r2, r3
 800e7a4:	69fb      	ldr	r3, [r7, #28]
 800e7a6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e7a8:	69fb      	ldr	r3, [r7, #28]
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	0a1b      	lsrs	r3, r3, #8
 800e7b2:	b2da      	uxtb	r2, r3
 800e7b4:	69fb      	ldr	r3, [r7, #28]
 800e7b6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e7b8:	69fb      	ldr	r3, [r7, #28]
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800e7be:	6a3b      	ldr	r3, [r7, #32]
 800e7c0:	3302      	adds	r3, #2
 800e7c2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800e7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c6:	3b01      	subs	r3, #1
 800e7c8:	627b      	str	r3, [r7, #36]	; 0x24
 800e7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d1e0      	bne.n	800e792 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e7d0:	88bb      	ldrh	r3, [r7, #4]
 800e7d2:	f003 0301 	and.w	r3, r3, #1
 800e7d6:	b29b      	uxth	r3, r3
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d007      	beq.n	800e7ec <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800e7dc:	6a3b      	ldr	r3, [r7, #32]
 800e7de:	881b      	ldrh	r3, [r3, #0]
 800e7e0:	b29b      	uxth	r3, r3
 800e7e2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	b2da      	uxtb	r2, r3
 800e7e8:	69fb      	ldr	r3, [r7, #28]
 800e7ea:	701a      	strb	r2, [r3, #0]
  }
}
 800e7ec:	bf00      	nop
 800e7ee:	372c      	adds	r7, #44	; 0x2c
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bc80      	pop	{r7}
 800e7f4:	4770      	bx	lr

0800e7f6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7f6:	b580      	push	{r7, lr}
 800e7f8:	b084      	sub	sp, #16
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	6078      	str	r0, [r7, #4]
 800e7fe:	460b      	mov	r3, r1
 800e800:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800e802:	2300      	movs	r3, #0
 800e804:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	7c1b      	ldrb	r3, [r3, #16]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d115      	bne.n	800e83a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e80e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e812:	2202      	movs	r2, #2
 800e814:	2181      	movs	r1, #129	; 0x81
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f001 fe99 	bl	801054e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2201      	movs	r2, #1
 800e820:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e822:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e826:	2202      	movs	r2, #2
 800e828:	2101      	movs	r1, #1
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f001 fe8f 	bl	801054e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2201      	movs	r2, #1
 800e834:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800e838:	e012      	b.n	800e860 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e83a:	2340      	movs	r3, #64	; 0x40
 800e83c:	2202      	movs	r2, #2
 800e83e:	2181      	movs	r1, #129	; 0x81
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f001 fe84 	bl	801054e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2201      	movs	r2, #1
 800e84a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e84c:	2340      	movs	r3, #64	; 0x40
 800e84e:	2202      	movs	r2, #2
 800e850:	2101      	movs	r1, #1
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f001 fe7b 	bl	801054e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2201      	movs	r2, #1
 800e85c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e860:	2308      	movs	r3, #8
 800e862:	2203      	movs	r2, #3
 800e864:	2182      	movs	r1, #130	; 0x82
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f001 fe71 	bl	801054e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2201      	movs	r2, #1
 800e870:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e872:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e876:	f001 ff91 	bl	801079c <USBD_static_malloc>
 800e87a:	4602      	mov	r2, r0
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d102      	bne.n	800e892 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800e88c:	2301      	movs	r3, #1
 800e88e:	73fb      	strb	r3, [r7, #15]
 800e890:	e026      	b.n	800e8e0 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e898:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	7c1b      	ldrb	r3, [r3, #16]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d109      	bne.n	800e8d0 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e8c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e8c6:	2101      	movs	r1, #1
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f001 ff31 	bl	8010730 <USBD_LL_PrepareReceive>
 800e8ce:	e007      	b.n	800e8e0 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e8d6:	2340      	movs	r3, #64	; 0x40
 800e8d8:	2101      	movs	r1, #1
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	f001 ff28 	bl	8010730 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800e8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	3710      	adds	r7, #16
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}

0800e8ea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e8ea:	b580      	push	{r7, lr}
 800e8ec:	b084      	sub	sp, #16
 800e8ee:	af00      	add	r7, sp, #0
 800e8f0:	6078      	str	r0, [r7, #4]
 800e8f2:	460b      	mov	r3, r1
 800e8f4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e8fa:	2181      	movs	r1, #129	; 0x81
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f001 fe4c 	bl	801059a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2200      	movs	r2, #0
 800e906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e908:	2101      	movs	r1, #1
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f001 fe45 	bl	801059a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2200      	movs	r2, #0
 800e914:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e918:	2182      	movs	r1, #130	; 0x82
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f001 fe3d 	bl	801059a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2200      	movs	r2, #0
 800e924:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d00e      	beq.n	800e94e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e936:	685b      	ldr	r3, [r3, #4]
 800e938:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e940:	4618      	mov	r0, r3
 800e942:	f001 ff37 	bl	80107b4 <USBD_static_free>
    pdev->pClassData = NULL;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2200      	movs	r2, #0
 800e94a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800e94e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e950:	4618      	mov	r0, r3
 800e952:	3710      	adds	r7, #16
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}

0800e958 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b086      	sub	sp, #24
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e968:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800e96a:	2300      	movs	r3, #0
 800e96c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800e96e:	2300      	movs	r3, #0
 800e970:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800e972:	2300      	movs	r3, #0
 800e974:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	781b      	ldrb	r3, [r3, #0]
 800e97a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d039      	beq.n	800e9f6 <USBD_CDC_Setup+0x9e>
 800e982:	2b20      	cmp	r3, #32
 800e984:	d17f      	bne.n	800ea86 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	88db      	ldrh	r3, [r3, #6]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d029      	beq.n	800e9e2 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	b25b      	sxtb	r3, r3
 800e994:	2b00      	cmp	r3, #0
 800e996:	da11      	bge.n	800e9bc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e99e:	689b      	ldr	r3, [r3, #8]
 800e9a0:	683a      	ldr	r2, [r7, #0]
 800e9a2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800e9a4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e9a6:	683a      	ldr	r2, [r7, #0]
 800e9a8:	88d2      	ldrh	r2, [r2, #6]
 800e9aa:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800e9ac:	6939      	ldr	r1, [r7, #16]
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	88db      	ldrh	r3, [r3, #6]
 800e9b2:	461a      	mov	r2, r3
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f001 fa0a 	bl	800fdce <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800e9ba:	e06b      	b.n	800ea94 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	785a      	ldrb	r2, [r3, #1]
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	88db      	ldrh	r3, [r3, #6]
 800e9ca:	b2da      	uxtb	r2, r3
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800e9d2:	6939      	ldr	r1, [r7, #16]
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	88db      	ldrh	r3, [r3, #6]
 800e9d8:	461a      	mov	r2, r3
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f001 fa25 	bl	800fe2a <USBD_CtlPrepareRx>
      break;
 800e9e0:	e058      	b.n	800ea94 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e9e8:	689b      	ldr	r3, [r3, #8]
 800e9ea:	683a      	ldr	r2, [r7, #0]
 800e9ec:	7850      	ldrb	r0, [r2, #1]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	6839      	ldr	r1, [r7, #0]
 800e9f2:	4798      	blx	r3
      break;
 800e9f4:	e04e      	b.n	800ea94 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	785b      	ldrb	r3, [r3, #1]
 800e9fa:	2b0b      	cmp	r3, #11
 800e9fc:	d02e      	beq.n	800ea5c <USBD_CDC_Setup+0x104>
 800e9fe:	2b0b      	cmp	r3, #11
 800ea00:	dc38      	bgt.n	800ea74 <USBD_CDC_Setup+0x11c>
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d002      	beq.n	800ea0c <USBD_CDC_Setup+0xb4>
 800ea06:	2b0a      	cmp	r3, #10
 800ea08:	d014      	beq.n	800ea34 <USBD_CDC_Setup+0xdc>
 800ea0a:	e033      	b.n	800ea74 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea12:	2b03      	cmp	r3, #3
 800ea14:	d107      	bne.n	800ea26 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800ea16:	f107 030c 	add.w	r3, r7, #12
 800ea1a:	2202      	movs	r2, #2
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f001 f9d5 	bl	800fdce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ea24:	e02e      	b.n	800ea84 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800ea26:	6839      	ldr	r1, [r7, #0]
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f001 f966 	bl	800fcfa <USBD_CtlError>
            ret = USBD_FAIL;
 800ea2e:	2302      	movs	r3, #2
 800ea30:	75fb      	strb	r3, [r7, #23]
          break;
 800ea32:	e027      	b.n	800ea84 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea3a:	2b03      	cmp	r3, #3
 800ea3c:	d107      	bne.n	800ea4e <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800ea3e:	f107 030f 	add.w	r3, r7, #15
 800ea42:	2201      	movs	r2, #1
 800ea44:	4619      	mov	r1, r3
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f001 f9c1 	bl	800fdce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ea4c:	e01a      	b.n	800ea84 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800ea4e:	6839      	ldr	r1, [r7, #0]
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f001 f952 	bl	800fcfa <USBD_CtlError>
            ret = USBD_FAIL;
 800ea56:	2302      	movs	r3, #2
 800ea58:	75fb      	strb	r3, [r7, #23]
          break;
 800ea5a:	e013      	b.n	800ea84 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea62:	2b03      	cmp	r3, #3
 800ea64:	d00d      	beq.n	800ea82 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800ea66:	6839      	ldr	r1, [r7, #0]
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f001 f946 	bl	800fcfa <USBD_CtlError>
            ret = USBD_FAIL;
 800ea6e:	2302      	movs	r3, #2
 800ea70:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ea72:	e006      	b.n	800ea82 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800ea74:	6839      	ldr	r1, [r7, #0]
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f001 f93f 	bl	800fcfa <USBD_CtlError>
          ret = USBD_FAIL;
 800ea7c:	2302      	movs	r3, #2
 800ea7e:	75fb      	strb	r3, [r7, #23]
          break;
 800ea80:	e000      	b.n	800ea84 <USBD_CDC_Setup+0x12c>
          break;
 800ea82:	bf00      	nop
      }
      break;
 800ea84:	e006      	b.n	800ea94 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ea86:	6839      	ldr	r1, [r7, #0]
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f001 f936 	bl	800fcfa <USBD_CtlError>
      ret = USBD_FAIL;
 800ea8e:	2302      	movs	r3, #2
 800ea90:	75fb      	strb	r3, [r7, #23]
      break;
 800ea92:	bf00      	nop
  }

  return ret;
 800ea94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3718      	adds	r7, #24
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}

0800ea9e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ea9e:	b580      	push	{r7, lr}
 800eaa0:	b084      	sub	sp, #16
 800eaa2:	af00      	add	r7, sp, #0
 800eaa4:	6078      	str	r0, [r7, #4]
 800eaa6:	460b      	mov	r3, r1
 800eaa8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eab0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eab8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d03a      	beq.n	800eb3a <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800eac4:	78fa      	ldrb	r2, [r7, #3]
 800eac6:	6879      	ldr	r1, [r7, #4]
 800eac8:	4613      	mov	r3, r2
 800eaca:	009b      	lsls	r3, r3, #2
 800eacc:	4413      	add	r3, r2
 800eace:	009b      	lsls	r3, r3, #2
 800ead0:	440b      	add	r3, r1
 800ead2:	331c      	adds	r3, #28
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d029      	beq.n	800eb2e <USBD_CDC_DataIn+0x90>
 800eada:	78fa      	ldrb	r2, [r7, #3]
 800eadc:	6879      	ldr	r1, [r7, #4]
 800eade:	4613      	mov	r3, r2
 800eae0:	009b      	lsls	r3, r3, #2
 800eae2:	4413      	add	r3, r2
 800eae4:	009b      	lsls	r3, r3, #2
 800eae6:	440b      	add	r3, r1
 800eae8:	331c      	adds	r3, #28
 800eaea:	681a      	ldr	r2, [r3, #0]
 800eaec:	78f9      	ldrb	r1, [r7, #3]
 800eaee:	68b8      	ldr	r0, [r7, #8]
 800eaf0:	460b      	mov	r3, r1
 800eaf2:	009b      	lsls	r3, r3, #2
 800eaf4:	440b      	add	r3, r1
 800eaf6:	00db      	lsls	r3, r3, #3
 800eaf8:	4403      	add	r3, r0
 800eafa:	3338      	adds	r3, #56	; 0x38
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	fbb2 f1f3 	udiv	r1, r2, r3
 800eb02:	fb01 f303 	mul.w	r3, r1, r3
 800eb06:	1ad3      	subs	r3, r2, r3
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d110      	bne.n	800eb2e <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800eb0c:	78fa      	ldrb	r2, [r7, #3]
 800eb0e:	6879      	ldr	r1, [r7, #4]
 800eb10:	4613      	mov	r3, r2
 800eb12:	009b      	lsls	r3, r3, #2
 800eb14:	4413      	add	r3, r2
 800eb16:	009b      	lsls	r3, r3, #2
 800eb18:	440b      	add	r3, r1
 800eb1a:	331c      	adds	r3, #28
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800eb20:	78f9      	ldrb	r1, [r7, #3]
 800eb22:	2300      	movs	r3, #0
 800eb24:	2200      	movs	r2, #0
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f001 fddf 	bl	80106ea <USBD_LL_Transmit>
 800eb2c:	e003      	b.n	800eb36 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	2200      	movs	r2, #0
 800eb32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800eb36:	2300      	movs	r3, #0
 800eb38:	e000      	b.n	800eb3c <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800eb3a:	2302      	movs	r3, #2
  }
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3710      	adds	r7, #16
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b084      	sub	sp, #16
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
 800eb4c:	460b      	mov	r3, r1
 800eb4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb56:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800eb58:	78fb      	ldrb	r3, [r7, #3]
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f001 fe0a 	bl	8010776 <USBD_LL_GetRxDataSize>
 800eb62:	4602      	mov	r2, r0
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d00d      	beq.n	800eb90 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb7a:	68db      	ldr	r3, [r3, #12]
 800eb7c:	68fa      	ldr	r2, [r7, #12]
 800eb7e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800eb82:	68fa      	ldr	r2, [r7, #12]
 800eb84:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800eb88:	4611      	mov	r1, r2
 800eb8a:	4798      	blx	r3

    return USBD_OK;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	e000      	b.n	800eb92 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800eb90:	2302      	movs	r3, #2
  }
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3710      	adds	r7, #16
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}

0800eb9a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800eb9a:	b580      	push	{r7, lr}
 800eb9c:	b084      	sub	sp, #16
 800eb9e:	af00      	add	r7, sp, #0
 800eba0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eba8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d015      	beq.n	800ebe0 <USBD_CDC_EP0_RxReady+0x46>
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ebba:	2bff      	cmp	r3, #255	; 0xff
 800ebbc:	d010      	beq.n	800ebe0 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ebc4:	689b      	ldr	r3, [r3, #8]
 800ebc6:	68fa      	ldr	r2, [r7, #12]
 800ebc8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800ebcc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ebce:	68fa      	ldr	r2, [r7, #12]
 800ebd0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ebd4:	b292      	uxth	r2, r2
 800ebd6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	22ff      	movs	r2, #255	; 0xff
 800ebdc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800ebe0:	2300      	movs	r3, #0
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3710      	adds	r7, #16
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}
	...

0800ebec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ebec:	b480      	push	{r7}
 800ebee:	b083      	sub	sp, #12
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2243      	movs	r2, #67	; 0x43
 800ebf8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800ebfa:	4b03      	ldr	r3, [pc, #12]	; (800ec08 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	370c      	adds	r7, #12
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bc80      	pop	{r7}
 800ec04:	4770      	bx	lr
 800ec06:	bf00      	nop
 800ec08:	20000580 	.word	0x20000580

0800ec0c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b083      	sub	sp, #12
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2243      	movs	r2, #67	; 0x43
 800ec18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800ec1a:	4b03      	ldr	r3, [pc, #12]	; (800ec28 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	370c      	adds	r7, #12
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bc80      	pop	{r7}
 800ec24:	4770      	bx	lr
 800ec26:	bf00      	nop
 800ec28:	2000053c 	.word	0x2000053c

0800ec2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b083      	sub	sp, #12
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2243      	movs	r2, #67	; 0x43
 800ec38:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800ec3a:	4b03      	ldr	r3, [pc, #12]	; (800ec48 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	370c      	adds	r7, #12
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bc80      	pop	{r7}
 800ec44:	4770      	bx	lr
 800ec46:	bf00      	nop
 800ec48:	200005c4 	.word	0x200005c4

0800ec4c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	220a      	movs	r2, #10
 800ec58:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ec5a:	4b03      	ldr	r3, [pc, #12]	; (800ec68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	370c      	adds	r7, #12
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bc80      	pop	{r7}
 800ec64:	4770      	bx	lr
 800ec66:	bf00      	nop
 800ec68:	200004f8 	.word	0x200004f8

0800ec6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b085      	sub	sp, #20
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ec76:	2302      	movs	r3, #2
 800ec78:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d005      	beq.n	800ec8c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	683a      	ldr	r2, [r7, #0]
 800ec84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800ec88:	2300      	movs	r3, #0
 800ec8a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ec8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3714      	adds	r7, #20
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bc80      	pop	{r7}
 800ec96:	4770      	bx	lr

0800ec98 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b087      	sub	sp, #28
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	60b9      	str	r1, [r7, #8]
 800eca2:	4613      	mov	r3, r2
 800eca4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecac:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	68ba      	ldr	r2, [r7, #8]
 800ecb2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ecb6:	88fa      	ldrh	r2, [r7, #6]
 800ecb8:	697b      	ldr	r3, [r7, #20]
 800ecba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800ecbe:	2300      	movs	r3, #0
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	371c      	adds	r7, #28
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bc80      	pop	{r7}
 800ecc8:	4770      	bx	lr

0800ecca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800ecca:	b480      	push	{r7}
 800eccc:	b085      	sub	sp, #20
 800ecce:	af00      	add	r7, sp, #0
 800ecd0:	6078      	str	r0, [r7, #4]
 800ecd2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecda:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	683a      	ldr	r2, [r7, #0]
 800ece0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800ece4:	2300      	movs	r3, #0
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3714      	adds	r7, #20
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bc80      	pop	{r7}
 800ecee:	4770      	bx	lr

0800ecf0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b084      	sub	sp, #16
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecfe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d01c      	beq.n	800ed44 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d115      	bne.n	800ed40 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	2201      	movs	r2, #1
 800ed18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ed32:	b29b      	uxth	r3, r3
 800ed34:	2181      	movs	r1, #129	; 0x81
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f001 fcd7 	bl	80106ea <USBD_LL_Transmit>

      return USBD_OK;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	e002      	b.n	800ed46 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800ed40:	2301      	movs	r3, #1
 800ed42:	e000      	b.n	800ed46 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800ed44:	2302      	movs	r3, #2
  }
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3710      	adds	r7, #16
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}

0800ed4e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b084      	sub	sp, #16
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed5c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d017      	beq.n	800ed98 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	7c1b      	ldrb	r3, [r3, #16]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d109      	bne.n	800ed84 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ed76:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ed7a:	2101      	movs	r1, #1
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f001 fcd7 	bl	8010730 <USBD_LL_PrepareReceive>
 800ed82:	e007      	b.n	800ed94 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ed8a:	2340      	movs	r3, #64	; 0x40
 800ed8c:	2101      	movs	r1, #1
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f001 fcce 	bl	8010730 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ed94:	2300      	movs	r3, #0
 800ed96:	e000      	b.n	800ed9a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ed98:	2302      	movs	r3, #2
  }
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3710      	adds	r7, #16
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}

0800eda2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800eda2:	b580      	push	{r7, lr}
 800eda4:	b084      	sub	sp, #16
 800eda6:	af00      	add	r7, sp, #0
 800eda8:	60f8      	str	r0, [r7, #12]
 800edaa:	60b9      	str	r1, [r7, #8]
 800edac:	4613      	mov	r3, r2
 800edae:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d101      	bne.n	800edba <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800edb6:	2302      	movs	r3, #2
 800edb8:	e01a      	b.n	800edf0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d003      	beq.n	800edcc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2200      	movs	r2, #0
 800edc8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d003      	beq.n	800edda <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	68ba      	ldr	r2, [r7, #8]
 800edd6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2201      	movs	r2, #1
 800edde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	79fa      	ldrb	r2, [r7, #7]
 800ede6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ede8:	68f8      	ldr	r0, [r7, #12]
 800edea:	f001 fb3b 	bl	8010464 <USBD_LL_Init>

  return USBD_OK;
 800edee:	2300      	movs	r3, #0
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3710      	adds	r7, #16
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800edf8:	b480      	push	{r7}
 800edfa:	b085      	sub	sp, #20
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
 800ee00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800ee02:	2300      	movs	r3, #0
 800ee04:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d006      	beq.n	800ee1a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	683a      	ldr	r2, [r7, #0]
 800ee10:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800ee14:	2300      	movs	r3, #0
 800ee16:	73fb      	strb	r3, [r7, #15]
 800ee18:	e001      	b.n	800ee1e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ee1a:	2302      	movs	r3, #2
 800ee1c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ee1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	3714      	adds	r7, #20
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bc80      	pop	{r7}
 800ee28:	4770      	bx	lr

0800ee2a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ee2a:	b580      	push	{r7, lr}
 800ee2c:	b082      	sub	sp, #8
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f001 fb70 	bl	8010518 <USBD_LL_Start>

  return USBD_OK;
 800ee38:	2300      	movs	r3, #0
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3708      	adds	r7, #8
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}

0800ee42 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ee42:	b480      	push	{r7}
 800ee44:	b083      	sub	sp, #12
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ee4a:	2300      	movs	r3, #0
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	370c      	adds	r7, #12
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bc80      	pop	{r7}
 800ee54:	4770      	bx	lr

0800ee56 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ee56:	b580      	push	{r7, lr}
 800ee58:	b084      	sub	sp, #16
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	6078      	str	r0, [r7, #4]
 800ee5e:	460b      	mov	r3, r1
 800ee60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ee62:	2302      	movs	r3, #2
 800ee64:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d00c      	beq.n	800ee8a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	78fa      	ldrb	r2, [r7, #3]
 800ee7a:	4611      	mov	r1, r2
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	4798      	blx	r3
 800ee80:	4603      	mov	r3, r0
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d101      	bne.n	800ee8a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ee86:	2300      	movs	r3, #0
 800ee88:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ee8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3710      	adds	r7, #16
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}

0800ee94 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b082      	sub	sp, #8
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	460b      	mov	r3, r1
 800ee9e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eea6:	685b      	ldr	r3, [r3, #4]
 800eea8:	78fa      	ldrb	r2, [r7, #3]
 800eeaa:	4611      	mov	r1, r2
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	4798      	blx	r3

  return USBD_OK;
 800eeb0:	2300      	movs	r3, #0
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3708      	adds	r7, #8
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}

0800eeba <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800eeba:	b580      	push	{r7, lr}
 800eebc:	b082      	sub	sp, #8
 800eebe:	af00      	add	r7, sp, #0
 800eec0:	6078      	str	r0, [r7, #4]
 800eec2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800eeca:	6839      	ldr	r1, [r7, #0]
 800eecc:	4618      	mov	r0, r3
 800eece:	f000 fed8 	bl	800fc82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2201      	movs	r2, #1
 800eed6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800eee0:	461a      	mov	r2, r3
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800eeee:	f003 031f 	and.w	r3, r3, #31
 800eef2:	2b02      	cmp	r3, #2
 800eef4:	d016      	beq.n	800ef24 <USBD_LL_SetupStage+0x6a>
 800eef6:	2b02      	cmp	r3, #2
 800eef8:	d81c      	bhi.n	800ef34 <USBD_LL_SetupStage+0x7a>
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d002      	beq.n	800ef04 <USBD_LL_SetupStage+0x4a>
 800eefe:	2b01      	cmp	r3, #1
 800ef00:	d008      	beq.n	800ef14 <USBD_LL_SetupStage+0x5a>
 800ef02:	e017      	b.n	800ef34 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ef0a:	4619      	mov	r1, r3
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f000 f9cb 	bl	800f2a8 <USBD_StdDevReq>
      break;
 800ef12:	e01a      	b.n	800ef4a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ef1a:	4619      	mov	r1, r3
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f000 fa2d 	bl	800f37c <USBD_StdItfReq>
      break;
 800ef22:	e012      	b.n	800ef4a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800ef2a:	4619      	mov	r1, r3
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f000 fa6d 	bl	800f40c <USBD_StdEPReq>
      break;
 800ef32:	e00a      	b.n	800ef4a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ef3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ef3e:	b2db      	uxtb	r3, r3
 800ef40:	4619      	mov	r1, r3
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f001 fb48 	bl	80105d8 <USBD_LL_StallEP>
      break;
 800ef48:	bf00      	nop
  }

  return USBD_OK;
 800ef4a:	2300      	movs	r3, #0
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3708      	adds	r7, #8
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b086      	sub	sp, #24
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	60f8      	str	r0, [r7, #12]
 800ef5c:	460b      	mov	r3, r1
 800ef5e:	607a      	str	r2, [r7, #4]
 800ef60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ef62:	7afb      	ldrb	r3, [r7, #11]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d14b      	bne.n	800f000 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ef6e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ef76:	2b03      	cmp	r3, #3
 800ef78:	d134      	bne.n	800efe4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	68da      	ldr	r2, [r3, #12]
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	691b      	ldr	r3, [r3, #16]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d919      	bls.n	800efba <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	68da      	ldr	r2, [r3, #12]
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	691b      	ldr	r3, [r3, #16]
 800ef8e:	1ad2      	subs	r2, r2, r3
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	68da      	ldr	r2, [r3, #12]
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ef9c:	429a      	cmp	r2, r3
 800ef9e:	d203      	bcs.n	800efa8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800efa4:	b29b      	uxth	r3, r3
 800efa6:	e002      	b.n	800efae <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800efa8:	697b      	ldr	r3, [r7, #20]
 800efaa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800efac:	b29b      	uxth	r3, r3
 800efae:	461a      	mov	r2, r3
 800efb0:	6879      	ldr	r1, [r7, #4]
 800efb2:	68f8      	ldr	r0, [r7, #12]
 800efb4:	f000 ff57 	bl	800fe66 <USBD_CtlContinueRx>
 800efb8:	e038      	b.n	800f02c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efc0:	691b      	ldr	r3, [r3, #16]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d00a      	beq.n	800efdc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800efcc:	2b03      	cmp	r3, #3
 800efce:	d105      	bne.n	800efdc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efd6:	691b      	ldr	r3, [r3, #16]
 800efd8:	68f8      	ldr	r0, [r7, #12]
 800efda:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800efdc:	68f8      	ldr	r0, [r7, #12]
 800efde:	f000 ff54 	bl	800fe8a <USBD_CtlSendStatus>
 800efe2:	e023      	b.n	800f02c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800efea:	2b05      	cmp	r3, #5
 800efec:	d11e      	bne.n	800f02c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2200      	movs	r2, #0
 800eff2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800eff6:	2100      	movs	r1, #0
 800eff8:	68f8      	ldr	r0, [r7, #12]
 800effa:	f001 faed 	bl	80105d8 <USBD_LL_StallEP>
 800effe:	e015      	b.n	800f02c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f006:	699b      	ldr	r3, [r3, #24]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d00d      	beq.n	800f028 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800f012:	2b03      	cmp	r3, #3
 800f014:	d108      	bne.n	800f028 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f01c:	699b      	ldr	r3, [r3, #24]
 800f01e:	7afa      	ldrb	r2, [r7, #11]
 800f020:	4611      	mov	r1, r2
 800f022:	68f8      	ldr	r0, [r7, #12]
 800f024:	4798      	blx	r3
 800f026:	e001      	b.n	800f02c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f028:	2302      	movs	r3, #2
 800f02a:	e000      	b.n	800f02e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800f02c:	2300      	movs	r3, #0
}
 800f02e:	4618      	mov	r0, r3
 800f030:	3718      	adds	r7, #24
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}

0800f036 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f036:	b580      	push	{r7, lr}
 800f038:	b086      	sub	sp, #24
 800f03a:	af00      	add	r7, sp, #0
 800f03c:	60f8      	str	r0, [r7, #12]
 800f03e:	460b      	mov	r3, r1
 800f040:	607a      	str	r2, [r7, #4]
 800f042:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800f044:	7afb      	ldrb	r3, [r7, #11]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d17f      	bne.n	800f14a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	3314      	adds	r3, #20
 800f04e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f056:	2b02      	cmp	r3, #2
 800f058:	d15c      	bne.n	800f114 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	68da      	ldr	r2, [r3, #12]
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	691b      	ldr	r3, [r3, #16]
 800f062:	429a      	cmp	r2, r3
 800f064:	d915      	bls.n	800f092 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	68da      	ldr	r2, [r3, #12]
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	691b      	ldr	r3, [r3, #16]
 800f06e:	1ad2      	subs	r2, r2, r3
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	68db      	ldr	r3, [r3, #12]
 800f078:	b29b      	uxth	r3, r3
 800f07a:	461a      	mov	r2, r3
 800f07c:	6879      	ldr	r1, [r7, #4]
 800f07e:	68f8      	ldr	r0, [r7, #12]
 800f080:	f000 fec1 	bl	800fe06 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f084:	2300      	movs	r3, #0
 800f086:	2200      	movs	r2, #0
 800f088:	2100      	movs	r1, #0
 800f08a:	68f8      	ldr	r0, [r7, #12]
 800f08c:	f001 fb50 	bl	8010730 <USBD_LL_PrepareReceive>
 800f090:	e04e      	b.n	800f130 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	689b      	ldr	r3, [r3, #8]
 800f096:	697a      	ldr	r2, [r7, #20]
 800f098:	6912      	ldr	r2, [r2, #16]
 800f09a:	fbb3 f1f2 	udiv	r1, r3, r2
 800f09e:	fb01 f202 	mul.w	r2, r1, r2
 800f0a2:	1a9b      	subs	r3, r3, r2
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d11c      	bne.n	800f0e2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	689a      	ldr	r2, [r3, #8]
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800f0b0:	429a      	cmp	r2, r3
 800f0b2:	d316      	bcc.n	800f0e2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	689a      	ldr	r2, [r3, #8]
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	d20f      	bcs.n	800f0e2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	2100      	movs	r1, #0
 800f0c6:	68f8      	ldr	r0, [r7, #12]
 800f0c8:	f000 fe9d 	bl	800fe06 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	2100      	movs	r1, #0
 800f0da:	68f8      	ldr	r0, [r7, #12]
 800f0dc:	f001 fb28 	bl	8010730 <USBD_LL_PrepareReceive>
 800f0e0:	e026      	b.n	800f130 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0e8:	68db      	ldr	r3, [r3, #12]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d00a      	beq.n	800f104 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f0f4:	2b03      	cmp	r3, #3
 800f0f6:	d105      	bne.n	800f104 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0fe:	68db      	ldr	r3, [r3, #12]
 800f100:	68f8      	ldr	r0, [r7, #12]
 800f102:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800f104:	2180      	movs	r1, #128	; 0x80
 800f106:	68f8      	ldr	r0, [r7, #12]
 800f108:	f001 fa66 	bl	80105d8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800f10c:	68f8      	ldr	r0, [r7, #12]
 800f10e:	f000 fecf 	bl	800feb0 <USBD_CtlReceiveStatus>
 800f112:	e00d      	b.n	800f130 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f11a:	2b04      	cmp	r3, #4
 800f11c:	d004      	beq.n	800f128 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800f124:	2b00      	cmp	r3, #0
 800f126:	d103      	bne.n	800f130 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800f128:	2180      	movs	r1, #128	; 0x80
 800f12a:	68f8      	ldr	r0, [r7, #12]
 800f12c:	f001 fa54 	bl	80105d8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f136:	2b01      	cmp	r3, #1
 800f138:	d11d      	bne.n	800f176 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800f13a:	68f8      	ldr	r0, [r7, #12]
 800f13c:	f7ff fe81 	bl	800ee42 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	2200      	movs	r2, #0
 800f144:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f148:	e015      	b.n	800f176 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f150:	695b      	ldr	r3, [r3, #20]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d00d      	beq.n	800f172 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800f15c:	2b03      	cmp	r3, #3
 800f15e:	d108      	bne.n	800f172 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f166:	695b      	ldr	r3, [r3, #20]
 800f168:	7afa      	ldrb	r2, [r7, #11]
 800f16a:	4611      	mov	r1, r2
 800f16c:	68f8      	ldr	r0, [r7, #12]
 800f16e:	4798      	blx	r3
 800f170:	e001      	b.n	800f176 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f172:	2302      	movs	r3, #2
 800f174:	e000      	b.n	800f178 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800f176:	2300      	movs	r3, #0
}
 800f178:	4618      	mov	r0, r3
 800f17a:	3718      	adds	r7, #24
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd80      	pop	{r7, pc}

0800f180 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b082      	sub	sp, #8
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f188:	2340      	movs	r3, #64	; 0x40
 800f18a:	2200      	movs	r2, #0
 800f18c:	2100      	movs	r1, #0
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f001 f9dd 	bl	801054e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2201      	movs	r2, #1
 800f198:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2240      	movs	r2, #64	; 0x40
 800f1a0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f1a4:	2340      	movs	r3, #64	; 0x40
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	2180      	movs	r1, #128	; 0x80
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f001 f9cf 	bl	801054e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2240      	movs	r2, #64	; 0x40
 800f1ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2201      	movs	r2, #1
 800f1c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d009      	beq.n	800f1f8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1ea:	685b      	ldr	r3, [r3, #4]
 800f1ec:	687a      	ldr	r2, [r7, #4]
 800f1ee:	6852      	ldr	r2, [r2, #4]
 800f1f0:	b2d2      	uxtb	r2, r2
 800f1f2:	4611      	mov	r1, r2
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	4798      	blx	r3
  }

  return USBD_OK;
 800f1f8:	2300      	movs	r3, #0
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3708      	adds	r7, #8
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}

0800f202 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f202:	b480      	push	{r7}
 800f204:	b083      	sub	sp, #12
 800f206:	af00      	add	r7, sp, #0
 800f208:	6078      	str	r0, [r7, #4]
 800f20a:	460b      	mov	r3, r1
 800f20c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	78fa      	ldrb	r2, [r7, #3]
 800f212:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f214:	2300      	movs	r3, #0
}
 800f216:	4618      	mov	r0, r3
 800f218:	370c      	adds	r7, #12
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bc80      	pop	{r7}
 800f21e:	4770      	bx	lr

0800f220 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f220:	b480      	push	{r7}
 800f222:	b083      	sub	sp, #12
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2204      	movs	r2, #4
 800f238:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f23c:	2300      	movs	r3, #0
}
 800f23e:	4618      	mov	r0, r3
 800f240:	370c      	adds	r7, #12
 800f242:	46bd      	mov	sp, r7
 800f244:	bc80      	pop	{r7}
 800f246:	4770      	bx	lr

0800f248 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f248:	b480      	push	{r7}
 800f24a:	b083      	sub	sp, #12
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f256:	2b04      	cmp	r3, #4
 800f258:	d105      	bne.n	800f266 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f266:	2300      	movs	r3, #0
}
 800f268:	4618      	mov	r0, r3
 800f26a:	370c      	adds	r7, #12
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bc80      	pop	{r7}
 800f270:	4770      	bx	lr

0800f272 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f272:	b580      	push	{r7, lr}
 800f274:	b082      	sub	sp, #8
 800f276:	af00      	add	r7, sp, #0
 800f278:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f280:	2b03      	cmp	r3, #3
 800f282:	d10b      	bne.n	800f29c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f28a:	69db      	ldr	r3, [r3, #28]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d005      	beq.n	800f29c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f296:	69db      	ldr	r3, [r3, #28]
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f29c:	2300      	movs	r3, #0
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3708      	adds	r7, #8
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
	...

0800f2a8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b084      	sub	sp, #16
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	781b      	ldrb	r3, [r3, #0]
 800f2ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f2be:	2b40      	cmp	r3, #64	; 0x40
 800f2c0:	d005      	beq.n	800f2ce <USBD_StdDevReq+0x26>
 800f2c2:	2b40      	cmp	r3, #64	; 0x40
 800f2c4:	d84f      	bhi.n	800f366 <USBD_StdDevReq+0xbe>
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d009      	beq.n	800f2de <USBD_StdDevReq+0x36>
 800f2ca:	2b20      	cmp	r3, #32
 800f2cc:	d14b      	bne.n	800f366 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f2d4:	689b      	ldr	r3, [r3, #8]
 800f2d6:	6839      	ldr	r1, [r7, #0]
 800f2d8:	6878      	ldr	r0, [r7, #4]
 800f2da:	4798      	blx	r3
      break;
 800f2dc:	e048      	b.n	800f370 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	785b      	ldrb	r3, [r3, #1]
 800f2e2:	2b09      	cmp	r3, #9
 800f2e4:	d839      	bhi.n	800f35a <USBD_StdDevReq+0xb2>
 800f2e6:	a201      	add	r2, pc, #4	; (adr r2, 800f2ec <USBD_StdDevReq+0x44>)
 800f2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2ec:	0800f33d 	.word	0x0800f33d
 800f2f0:	0800f351 	.word	0x0800f351
 800f2f4:	0800f35b 	.word	0x0800f35b
 800f2f8:	0800f347 	.word	0x0800f347
 800f2fc:	0800f35b 	.word	0x0800f35b
 800f300:	0800f31f 	.word	0x0800f31f
 800f304:	0800f315 	.word	0x0800f315
 800f308:	0800f35b 	.word	0x0800f35b
 800f30c:	0800f333 	.word	0x0800f333
 800f310:	0800f329 	.word	0x0800f329
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f314:	6839      	ldr	r1, [r7, #0]
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f000 f9dc 	bl	800f6d4 <USBD_GetDescriptor>
          break;
 800f31c:	e022      	b.n	800f364 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f31e:	6839      	ldr	r1, [r7, #0]
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f000 fb3f 	bl	800f9a4 <USBD_SetAddress>
          break;
 800f326:	e01d      	b.n	800f364 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800f328:	6839      	ldr	r1, [r7, #0]
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f000 fb7e 	bl	800fa2c <USBD_SetConfig>
          break;
 800f330:	e018      	b.n	800f364 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f332:	6839      	ldr	r1, [r7, #0]
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f000 fc07 	bl	800fb48 <USBD_GetConfig>
          break;
 800f33a:	e013      	b.n	800f364 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f33c:	6839      	ldr	r1, [r7, #0]
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f000 fc37 	bl	800fbb2 <USBD_GetStatus>
          break;
 800f344:	e00e      	b.n	800f364 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f346:	6839      	ldr	r1, [r7, #0]
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f000 fc65 	bl	800fc18 <USBD_SetFeature>
          break;
 800f34e:	e009      	b.n	800f364 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f350:	6839      	ldr	r1, [r7, #0]
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f000 fc74 	bl	800fc40 <USBD_ClrFeature>
          break;
 800f358:	e004      	b.n	800f364 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800f35a:	6839      	ldr	r1, [r7, #0]
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f000 fccc 	bl	800fcfa <USBD_CtlError>
          break;
 800f362:	bf00      	nop
      }
      break;
 800f364:	e004      	b.n	800f370 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800f366:	6839      	ldr	r1, [r7, #0]
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f000 fcc6 	bl	800fcfa <USBD_CtlError>
      break;
 800f36e:	bf00      	nop
  }

  return ret;
 800f370:	7bfb      	ldrb	r3, [r7, #15]
}
 800f372:	4618      	mov	r0, r3
 800f374:	3710      	adds	r7, #16
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}
 800f37a:	bf00      	nop

0800f37c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b084      	sub	sp, #16
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f386:	2300      	movs	r3, #0
 800f388:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	781b      	ldrb	r3, [r3, #0]
 800f38e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f392:	2b40      	cmp	r3, #64	; 0x40
 800f394:	d005      	beq.n	800f3a2 <USBD_StdItfReq+0x26>
 800f396:	2b40      	cmp	r3, #64	; 0x40
 800f398:	d82e      	bhi.n	800f3f8 <USBD_StdItfReq+0x7c>
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d001      	beq.n	800f3a2 <USBD_StdItfReq+0x26>
 800f39e:	2b20      	cmp	r3, #32
 800f3a0:	d12a      	bne.n	800f3f8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3a8:	3b01      	subs	r3, #1
 800f3aa:	2b02      	cmp	r3, #2
 800f3ac:	d81d      	bhi.n	800f3ea <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	889b      	ldrh	r3, [r3, #4]
 800f3b2:	b2db      	uxtb	r3, r3
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	d813      	bhi.n	800f3e0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f3be:	689b      	ldr	r3, [r3, #8]
 800f3c0:	6839      	ldr	r1, [r7, #0]
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	4798      	blx	r3
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	88db      	ldrh	r3, [r3, #6]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d110      	bne.n	800f3f4 <USBD_StdItfReq+0x78>
 800f3d2:	7bfb      	ldrb	r3, [r7, #15]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d10d      	bne.n	800f3f4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f000 fd56 	bl	800fe8a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f3de:	e009      	b.n	800f3f4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800f3e0:	6839      	ldr	r1, [r7, #0]
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f000 fc89 	bl	800fcfa <USBD_CtlError>
          break;
 800f3e8:	e004      	b.n	800f3f4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800f3ea:	6839      	ldr	r1, [r7, #0]
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f000 fc84 	bl	800fcfa <USBD_CtlError>
          break;
 800f3f2:	e000      	b.n	800f3f6 <USBD_StdItfReq+0x7a>
          break;
 800f3f4:	bf00      	nop
      }
      break;
 800f3f6:	e004      	b.n	800f402 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800f3f8:	6839      	ldr	r1, [r7, #0]
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f000 fc7d 	bl	800fcfa <USBD_CtlError>
      break;
 800f400:	bf00      	nop
  }

  return USBD_OK;
 800f402:	2300      	movs	r3, #0
}
 800f404:	4618      	mov	r0, r3
 800f406:	3710      	adds	r7, #16
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}

0800f40c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f416:	2300      	movs	r3, #0
 800f418:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	889b      	ldrh	r3, [r3, #4]
 800f41e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f428:	2b40      	cmp	r3, #64	; 0x40
 800f42a:	d007      	beq.n	800f43c <USBD_StdEPReq+0x30>
 800f42c:	2b40      	cmp	r3, #64	; 0x40
 800f42e:	f200 8146 	bhi.w	800f6be <USBD_StdEPReq+0x2b2>
 800f432:	2b00      	cmp	r3, #0
 800f434:	d00a      	beq.n	800f44c <USBD_StdEPReq+0x40>
 800f436:	2b20      	cmp	r3, #32
 800f438:	f040 8141 	bne.w	800f6be <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f442:	689b      	ldr	r3, [r3, #8]
 800f444:	6839      	ldr	r1, [r7, #0]
 800f446:	6878      	ldr	r0, [r7, #4]
 800f448:	4798      	blx	r3
      break;
 800f44a:	e13d      	b.n	800f6c8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	781b      	ldrb	r3, [r3, #0]
 800f450:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f454:	2b20      	cmp	r3, #32
 800f456:	d10a      	bne.n	800f46e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f45e:	689b      	ldr	r3, [r3, #8]
 800f460:	6839      	ldr	r1, [r7, #0]
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	4798      	blx	r3
 800f466:	4603      	mov	r3, r0
 800f468:	73fb      	strb	r3, [r7, #15]

        return ret;
 800f46a:	7bfb      	ldrb	r3, [r7, #15]
 800f46c:	e12d      	b.n	800f6ca <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	785b      	ldrb	r3, [r3, #1]
 800f472:	2b03      	cmp	r3, #3
 800f474:	d007      	beq.n	800f486 <USBD_StdEPReq+0x7a>
 800f476:	2b03      	cmp	r3, #3
 800f478:	f300 811b 	bgt.w	800f6b2 <USBD_StdEPReq+0x2a6>
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d072      	beq.n	800f566 <USBD_StdEPReq+0x15a>
 800f480:	2b01      	cmp	r3, #1
 800f482:	d03a      	beq.n	800f4fa <USBD_StdEPReq+0xee>
 800f484:	e115      	b.n	800f6b2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f48c:	2b02      	cmp	r3, #2
 800f48e:	d002      	beq.n	800f496 <USBD_StdEPReq+0x8a>
 800f490:	2b03      	cmp	r3, #3
 800f492:	d015      	beq.n	800f4c0 <USBD_StdEPReq+0xb4>
 800f494:	e02b      	b.n	800f4ee <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f496:	7bbb      	ldrb	r3, [r7, #14]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d00c      	beq.n	800f4b6 <USBD_StdEPReq+0xaa>
 800f49c:	7bbb      	ldrb	r3, [r7, #14]
 800f49e:	2b80      	cmp	r3, #128	; 0x80
 800f4a0:	d009      	beq.n	800f4b6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800f4a2:	7bbb      	ldrb	r3, [r7, #14]
 800f4a4:	4619      	mov	r1, r3
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f001 f896 	bl	80105d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800f4ac:	2180      	movs	r1, #128	; 0x80
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f001 f892 	bl	80105d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f4b4:	e020      	b.n	800f4f8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800f4b6:	6839      	ldr	r1, [r7, #0]
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f000 fc1e 	bl	800fcfa <USBD_CtlError>
              break;
 800f4be:	e01b      	b.n	800f4f8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	885b      	ldrh	r3, [r3, #2]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d10e      	bne.n	800f4e6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800f4c8:	7bbb      	ldrb	r3, [r7, #14]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d00b      	beq.n	800f4e6 <USBD_StdEPReq+0xda>
 800f4ce:	7bbb      	ldrb	r3, [r7, #14]
 800f4d0:	2b80      	cmp	r3, #128	; 0x80
 800f4d2:	d008      	beq.n	800f4e6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	88db      	ldrh	r3, [r3, #6]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d104      	bne.n	800f4e6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800f4dc:	7bbb      	ldrb	r3, [r7, #14]
 800f4de:	4619      	mov	r1, r3
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f001 f879 	bl	80105d8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f000 fccf 	bl	800fe8a <USBD_CtlSendStatus>

              break;
 800f4ec:	e004      	b.n	800f4f8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800f4ee:	6839      	ldr	r1, [r7, #0]
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f000 fc02 	bl	800fcfa <USBD_CtlError>
              break;
 800f4f6:	bf00      	nop
          }
          break;
 800f4f8:	e0e0      	b.n	800f6bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f500:	2b02      	cmp	r3, #2
 800f502:	d002      	beq.n	800f50a <USBD_StdEPReq+0xfe>
 800f504:	2b03      	cmp	r3, #3
 800f506:	d015      	beq.n	800f534 <USBD_StdEPReq+0x128>
 800f508:	e026      	b.n	800f558 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f50a:	7bbb      	ldrb	r3, [r7, #14]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d00c      	beq.n	800f52a <USBD_StdEPReq+0x11e>
 800f510:	7bbb      	ldrb	r3, [r7, #14]
 800f512:	2b80      	cmp	r3, #128	; 0x80
 800f514:	d009      	beq.n	800f52a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800f516:	7bbb      	ldrb	r3, [r7, #14]
 800f518:	4619      	mov	r1, r3
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f001 f85c 	bl	80105d8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800f520:	2180      	movs	r1, #128	; 0x80
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f001 f858 	bl	80105d8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f528:	e01c      	b.n	800f564 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800f52a:	6839      	ldr	r1, [r7, #0]
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f000 fbe4 	bl	800fcfa <USBD_CtlError>
              break;
 800f532:	e017      	b.n	800f564 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	885b      	ldrh	r3, [r3, #2]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d112      	bne.n	800f562 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f53c:	7bbb      	ldrb	r3, [r7, #14]
 800f53e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f542:	2b00      	cmp	r3, #0
 800f544:	d004      	beq.n	800f550 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800f546:	7bbb      	ldrb	r3, [r7, #14]
 800f548:	4619      	mov	r1, r3
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f001 f863 	bl	8010616 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f000 fc9a 	bl	800fe8a <USBD_CtlSendStatus>
              }
              break;
 800f556:	e004      	b.n	800f562 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800f558:	6839      	ldr	r1, [r7, #0]
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f000 fbcd 	bl	800fcfa <USBD_CtlError>
              break;
 800f560:	e000      	b.n	800f564 <USBD_StdEPReq+0x158>
              break;
 800f562:	bf00      	nop
          }
          break;
 800f564:	e0aa      	b.n	800f6bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f56c:	2b02      	cmp	r3, #2
 800f56e:	d002      	beq.n	800f576 <USBD_StdEPReq+0x16a>
 800f570:	2b03      	cmp	r3, #3
 800f572:	d032      	beq.n	800f5da <USBD_StdEPReq+0x1ce>
 800f574:	e097      	b.n	800f6a6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f576:	7bbb      	ldrb	r3, [r7, #14]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d007      	beq.n	800f58c <USBD_StdEPReq+0x180>
 800f57c:	7bbb      	ldrb	r3, [r7, #14]
 800f57e:	2b80      	cmp	r3, #128	; 0x80
 800f580:	d004      	beq.n	800f58c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800f582:	6839      	ldr	r1, [r7, #0]
 800f584:	6878      	ldr	r0, [r7, #4]
 800f586:	f000 fbb8 	bl	800fcfa <USBD_CtlError>
                break;
 800f58a:	e091      	b.n	800f6b0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f58c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f590:	2b00      	cmp	r3, #0
 800f592:	da0b      	bge.n	800f5ac <USBD_StdEPReq+0x1a0>
 800f594:	7bbb      	ldrb	r3, [r7, #14]
 800f596:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f59a:	4613      	mov	r3, r2
 800f59c:	009b      	lsls	r3, r3, #2
 800f59e:	4413      	add	r3, r2
 800f5a0:	009b      	lsls	r3, r3, #2
 800f5a2:	3310      	adds	r3, #16
 800f5a4:	687a      	ldr	r2, [r7, #4]
 800f5a6:	4413      	add	r3, r2
 800f5a8:	3304      	adds	r3, #4
 800f5aa:	e00b      	b.n	800f5c4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f5ac:	7bbb      	ldrb	r3, [r7, #14]
 800f5ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f5b2:	4613      	mov	r3, r2
 800f5b4:	009b      	lsls	r3, r3, #2
 800f5b6:	4413      	add	r3, r2
 800f5b8:	009b      	lsls	r3, r3, #2
 800f5ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f5be:	687a      	ldr	r2, [r7, #4]
 800f5c0:	4413      	add	r3, r2
 800f5c2:	3304      	adds	r3, #4
 800f5c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	2202      	movs	r2, #2
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f000 fbfb 	bl	800fdce <USBD_CtlSendData>
              break;
 800f5d8:	e06a      	b.n	800f6b0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f5da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	da11      	bge.n	800f606 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f5e2:	7bbb      	ldrb	r3, [r7, #14]
 800f5e4:	f003 020f 	and.w	r2, r3, #15
 800f5e8:	6879      	ldr	r1, [r7, #4]
 800f5ea:	4613      	mov	r3, r2
 800f5ec:	009b      	lsls	r3, r3, #2
 800f5ee:	4413      	add	r3, r2
 800f5f0:	009b      	lsls	r3, r3, #2
 800f5f2:	440b      	add	r3, r1
 800f5f4:	3318      	adds	r3, #24
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d117      	bne.n	800f62c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800f5fc:	6839      	ldr	r1, [r7, #0]
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f000 fb7b 	bl	800fcfa <USBD_CtlError>
                  break;
 800f604:	e054      	b.n	800f6b0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f606:	7bbb      	ldrb	r3, [r7, #14]
 800f608:	f003 020f 	and.w	r2, r3, #15
 800f60c:	6879      	ldr	r1, [r7, #4]
 800f60e:	4613      	mov	r3, r2
 800f610:	009b      	lsls	r3, r3, #2
 800f612:	4413      	add	r3, r2
 800f614:	009b      	lsls	r3, r3, #2
 800f616:	440b      	add	r3, r1
 800f618:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d104      	bne.n	800f62c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800f622:	6839      	ldr	r1, [r7, #0]
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	f000 fb68 	bl	800fcfa <USBD_CtlError>
                  break;
 800f62a:	e041      	b.n	800f6b0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f62c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f630:	2b00      	cmp	r3, #0
 800f632:	da0b      	bge.n	800f64c <USBD_StdEPReq+0x240>
 800f634:	7bbb      	ldrb	r3, [r7, #14]
 800f636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f63a:	4613      	mov	r3, r2
 800f63c:	009b      	lsls	r3, r3, #2
 800f63e:	4413      	add	r3, r2
 800f640:	009b      	lsls	r3, r3, #2
 800f642:	3310      	adds	r3, #16
 800f644:	687a      	ldr	r2, [r7, #4]
 800f646:	4413      	add	r3, r2
 800f648:	3304      	adds	r3, #4
 800f64a:	e00b      	b.n	800f664 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f64c:	7bbb      	ldrb	r3, [r7, #14]
 800f64e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f652:	4613      	mov	r3, r2
 800f654:	009b      	lsls	r3, r3, #2
 800f656:	4413      	add	r3, r2
 800f658:	009b      	lsls	r3, r3, #2
 800f65a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f65e:	687a      	ldr	r2, [r7, #4]
 800f660:	4413      	add	r3, r2
 800f662:	3304      	adds	r3, #4
 800f664:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f666:	7bbb      	ldrb	r3, [r7, #14]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d002      	beq.n	800f672 <USBD_StdEPReq+0x266>
 800f66c:	7bbb      	ldrb	r3, [r7, #14]
 800f66e:	2b80      	cmp	r3, #128	; 0x80
 800f670:	d103      	bne.n	800f67a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	2200      	movs	r2, #0
 800f676:	601a      	str	r2, [r3, #0]
 800f678:	e00e      	b.n	800f698 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800f67a:	7bbb      	ldrb	r3, [r7, #14]
 800f67c:	4619      	mov	r1, r3
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f000 ffe8 	bl	8010654 <USBD_LL_IsStallEP>
 800f684:	4603      	mov	r3, r0
 800f686:	2b00      	cmp	r3, #0
 800f688:	d003      	beq.n	800f692 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	2201      	movs	r2, #1
 800f68e:	601a      	str	r2, [r3, #0]
 800f690:	e002      	b.n	800f698 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	2200      	movs	r2, #0
 800f696:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	2202      	movs	r2, #2
 800f69c:	4619      	mov	r1, r3
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f000 fb95 	bl	800fdce <USBD_CtlSendData>
              break;
 800f6a4:	e004      	b.n	800f6b0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800f6a6:	6839      	ldr	r1, [r7, #0]
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f000 fb26 	bl	800fcfa <USBD_CtlError>
              break;
 800f6ae:	bf00      	nop
          }
          break;
 800f6b0:	e004      	b.n	800f6bc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800f6b2:	6839      	ldr	r1, [r7, #0]
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f000 fb20 	bl	800fcfa <USBD_CtlError>
          break;
 800f6ba:	bf00      	nop
      }
      break;
 800f6bc:	e004      	b.n	800f6c8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800f6be:	6839      	ldr	r1, [r7, #0]
 800f6c0:	6878      	ldr	r0, [r7, #4]
 800f6c2:	f000 fb1a 	bl	800fcfa <USBD_CtlError>
      break;
 800f6c6:	bf00      	nop
  }

  return ret;
 800f6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3710      	adds	r7, #16
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}
	...

0800f6d4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b084      	sub	sp, #16
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	885b      	ldrh	r3, [r3, #2]
 800f6ee:	0a1b      	lsrs	r3, r3, #8
 800f6f0:	b29b      	uxth	r3, r3
 800f6f2:	3b01      	subs	r3, #1
 800f6f4:	2b06      	cmp	r3, #6
 800f6f6:	f200 8128 	bhi.w	800f94a <USBD_GetDescriptor+0x276>
 800f6fa:	a201      	add	r2, pc, #4	; (adr r2, 800f700 <USBD_GetDescriptor+0x2c>)
 800f6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f700:	0800f71d 	.word	0x0800f71d
 800f704:	0800f735 	.word	0x0800f735
 800f708:	0800f775 	.word	0x0800f775
 800f70c:	0800f94b 	.word	0x0800f94b
 800f710:	0800f94b 	.word	0x0800f94b
 800f714:	0800f8eb 	.word	0x0800f8eb
 800f718:	0800f917 	.word	0x0800f917
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	687a      	ldr	r2, [r7, #4]
 800f726:	7c12      	ldrb	r2, [r2, #16]
 800f728:	f107 0108 	add.w	r1, r7, #8
 800f72c:	4610      	mov	r0, r2
 800f72e:	4798      	blx	r3
 800f730:	60f8      	str	r0, [r7, #12]
      break;
 800f732:	e112      	b.n	800f95a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	7c1b      	ldrb	r3, [r3, #16]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d10d      	bne.n	800f758 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f744:	f107 0208 	add.w	r2, r7, #8
 800f748:	4610      	mov	r0, r2
 800f74a:	4798      	blx	r3
 800f74c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	3301      	adds	r3, #1
 800f752:	2202      	movs	r2, #2
 800f754:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f756:	e100      	b.n	800f95a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f760:	f107 0208 	add.w	r2, r7, #8
 800f764:	4610      	mov	r0, r2
 800f766:	4798      	blx	r3
 800f768:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	3301      	adds	r3, #1
 800f76e:	2202      	movs	r2, #2
 800f770:	701a      	strb	r2, [r3, #0]
      break;
 800f772:	e0f2      	b.n	800f95a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	885b      	ldrh	r3, [r3, #2]
 800f778:	b2db      	uxtb	r3, r3
 800f77a:	2b05      	cmp	r3, #5
 800f77c:	f200 80ac 	bhi.w	800f8d8 <USBD_GetDescriptor+0x204>
 800f780:	a201      	add	r2, pc, #4	; (adr r2, 800f788 <USBD_GetDescriptor+0xb4>)
 800f782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f786:	bf00      	nop
 800f788:	0800f7a1 	.word	0x0800f7a1
 800f78c:	0800f7d5 	.word	0x0800f7d5
 800f790:	0800f809 	.word	0x0800f809
 800f794:	0800f83d 	.word	0x0800f83d
 800f798:	0800f871 	.word	0x0800f871
 800f79c:	0800f8a5 	.word	0x0800f8a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f7a6:	685b      	ldr	r3, [r3, #4]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d00b      	beq.n	800f7c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f7b2:	685b      	ldr	r3, [r3, #4]
 800f7b4:	687a      	ldr	r2, [r7, #4]
 800f7b6:	7c12      	ldrb	r2, [r2, #16]
 800f7b8:	f107 0108 	add.w	r1, r7, #8
 800f7bc:	4610      	mov	r0, r2
 800f7be:	4798      	blx	r3
 800f7c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7c2:	e091      	b.n	800f8e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f7c4:	6839      	ldr	r1, [r7, #0]
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f000 fa97 	bl	800fcfa <USBD_CtlError>
            err++;
 800f7cc:	7afb      	ldrb	r3, [r7, #11]
 800f7ce:	3301      	adds	r3, #1
 800f7d0:	72fb      	strb	r3, [r7, #11]
          break;
 800f7d2:	e089      	b.n	800f8e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f7da:	689b      	ldr	r3, [r3, #8]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d00b      	beq.n	800f7f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f7e6:	689b      	ldr	r3, [r3, #8]
 800f7e8:	687a      	ldr	r2, [r7, #4]
 800f7ea:	7c12      	ldrb	r2, [r2, #16]
 800f7ec:	f107 0108 	add.w	r1, r7, #8
 800f7f0:	4610      	mov	r0, r2
 800f7f2:	4798      	blx	r3
 800f7f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f7f6:	e077      	b.n	800f8e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f7f8:	6839      	ldr	r1, [r7, #0]
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f000 fa7d 	bl	800fcfa <USBD_CtlError>
            err++;
 800f800:	7afb      	ldrb	r3, [r7, #11]
 800f802:	3301      	adds	r3, #1
 800f804:	72fb      	strb	r3, [r7, #11]
          break;
 800f806:	e06f      	b.n	800f8e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f80e:	68db      	ldr	r3, [r3, #12]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d00b      	beq.n	800f82c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f81a:	68db      	ldr	r3, [r3, #12]
 800f81c:	687a      	ldr	r2, [r7, #4]
 800f81e:	7c12      	ldrb	r2, [r2, #16]
 800f820:	f107 0108 	add.w	r1, r7, #8
 800f824:	4610      	mov	r0, r2
 800f826:	4798      	blx	r3
 800f828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f82a:	e05d      	b.n	800f8e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f82c:	6839      	ldr	r1, [r7, #0]
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f000 fa63 	bl	800fcfa <USBD_CtlError>
            err++;
 800f834:	7afb      	ldrb	r3, [r7, #11]
 800f836:	3301      	adds	r3, #1
 800f838:	72fb      	strb	r3, [r7, #11]
          break;
 800f83a:	e055      	b.n	800f8e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f842:	691b      	ldr	r3, [r3, #16]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d00b      	beq.n	800f860 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f84e:	691b      	ldr	r3, [r3, #16]
 800f850:	687a      	ldr	r2, [r7, #4]
 800f852:	7c12      	ldrb	r2, [r2, #16]
 800f854:	f107 0108 	add.w	r1, r7, #8
 800f858:	4610      	mov	r0, r2
 800f85a:	4798      	blx	r3
 800f85c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f85e:	e043      	b.n	800f8e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f860:	6839      	ldr	r1, [r7, #0]
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f000 fa49 	bl	800fcfa <USBD_CtlError>
            err++;
 800f868:	7afb      	ldrb	r3, [r7, #11]
 800f86a:	3301      	adds	r3, #1
 800f86c:	72fb      	strb	r3, [r7, #11]
          break;
 800f86e:	e03b      	b.n	800f8e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f876:	695b      	ldr	r3, [r3, #20]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d00b      	beq.n	800f894 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f882:	695b      	ldr	r3, [r3, #20]
 800f884:	687a      	ldr	r2, [r7, #4]
 800f886:	7c12      	ldrb	r2, [r2, #16]
 800f888:	f107 0108 	add.w	r1, r7, #8
 800f88c:	4610      	mov	r0, r2
 800f88e:	4798      	blx	r3
 800f890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f892:	e029      	b.n	800f8e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f894:	6839      	ldr	r1, [r7, #0]
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f000 fa2f 	bl	800fcfa <USBD_CtlError>
            err++;
 800f89c:	7afb      	ldrb	r3, [r7, #11]
 800f89e:	3301      	adds	r3, #1
 800f8a0:	72fb      	strb	r3, [r7, #11]
          break;
 800f8a2:	e021      	b.n	800f8e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f8aa:	699b      	ldr	r3, [r3, #24]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d00b      	beq.n	800f8c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800f8b6:	699b      	ldr	r3, [r3, #24]
 800f8b8:	687a      	ldr	r2, [r7, #4]
 800f8ba:	7c12      	ldrb	r2, [r2, #16]
 800f8bc:	f107 0108 	add.w	r1, r7, #8
 800f8c0:	4610      	mov	r0, r2
 800f8c2:	4798      	blx	r3
 800f8c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f8c6:	e00f      	b.n	800f8e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f8c8:	6839      	ldr	r1, [r7, #0]
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f000 fa15 	bl	800fcfa <USBD_CtlError>
            err++;
 800f8d0:	7afb      	ldrb	r3, [r7, #11]
 800f8d2:	3301      	adds	r3, #1
 800f8d4:	72fb      	strb	r3, [r7, #11]
          break;
 800f8d6:	e007      	b.n	800f8e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800f8d8:	6839      	ldr	r1, [r7, #0]
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f000 fa0d 	bl	800fcfa <USBD_CtlError>
          err++;
 800f8e0:	7afb      	ldrb	r3, [r7, #11]
 800f8e2:	3301      	adds	r3, #1
 800f8e4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800f8e6:	e038      	b.n	800f95a <USBD_GetDescriptor+0x286>
 800f8e8:	e037      	b.n	800f95a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	7c1b      	ldrb	r3, [r3, #16]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d109      	bne.n	800f906 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8fa:	f107 0208 	add.w	r2, r7, #8
 800f8fe:	4610      	mov	r0, r2
 800f900:	4798      	blx	r3
 800f902:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f904:	e029      	b.n	800f95a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f906:	6839      	ldr	r1, [r7, #0]
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f000 f9f6 	bl	800fcfa <USBD_CtlError>
        err++;
 800f90e:	7afb      	ldrb	r3, [r7, #11]
 800f910:	3301      	adds	r3, #1
 800f912:	72fb      	strb	r3, [r7, #11]
      break;
 800f914:	e021      	b.n	800f95a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	7c1b      	ldrb	r3, [r3, #16]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d10d      	bne.n	800f93a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f926:	f107 0208 	add.w	r2, r7, #8
 800f92a:	4610      	mov	r0, r2
 800f92c:	4798      	blx	r3
 800f92e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	3301      	adds	r3, #1
 800f934:	2207      	movs	r2, #7
 800f936:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f938:	e00f      	b.n	800f95a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f93a:	6839      	ldr	r1, [r7, #0]
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f000 f9dc 	bl	800fcfa <USBD_CtlError>
        err++;
 800f942:	7afb      	ldrb	r3, [r7, #11]
 800f944:	3301      	adds	r3, #1
 800f946:	72fb      	strb	r3, [r7, #11]
      break;
 800f948:	e007      	b.n	800f95a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f94a:	6839      	ldr	r1, [r7, #0]
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f000 f9d4 	bl	800fcfa <USBD_CtlError>
      err++;
 800f952:	7afb      	ldrb	r3, [r7, #11]
 800f954:	3301      	adds	r3, #1
 800f956:	72fb      	strb	r3, [r7, #11]
      break;
 800f958:	bf00      	nop
  }

  if (err != 0U)
 800f95a:	7afb      	ldrb	r3, [r7, #11]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d11c      	bne.n	800f99a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800f960:	893b      	ldrh	r3, [r7, #8]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d011      	beq.n	800f98a <USBD_GetDescriptor+0x2b6>
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	88db      	ldrh	r3, [r3, #6]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d00d      	beq.n	800f98a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	88da      	ldrh	r2, [r3, #6]
 800f972:	893b      	ldrh	r3, [r7, #8]
 800f974:	4293      	cmp	r3, r2
 800f976:	bf28      	it	cs
 800f978:	4613      	movcs	r3, r2
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f97e:	893b      	ldrh	r3, [r7, #8]
 800f980:	461a      	mov	r2, r3
 800f982:	68f9      	ldr	r1, [r7, #12]
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f000 fa22 	bl	800fdce <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	88db      	ldrh	r3, [r3, #6]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d104      	bne.n	800f99c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f000 fa79 	bl	800fe8a <USBD_CtlSendStatus>
 800f998:	e000      	b.n	800f99c <USBD_GetDescriptor+0x2c8>
    return;
 800f99a:	bf00      	nop
    }
  }
}
 800f99c:	3710      	adds	r7, #16
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}
 800f9a2:	bf00      	nop

0800f9a4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b084      	sub	sp, #16
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
 800f9ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	889b      	ldrh	r3, [r3, #4]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d130      	bne.n	800fa18 <USBD_SetAddress+0x74>
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	88db      	ldrh	r3, [r3, #6]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d12c      	bne.n	800fa18 <USBD_SetAddress+0x74>
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	885b      	ldrh	r3, [r3, #2]
 800f9c2:	2b7f      	cmp	r3, #127	; 0x7f
 800f9c4:	d828      	bhi.n	800fa18 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	885b      	ldrh	r3, [r3, #2]
 800f9ca:	b2db      	uxtb	r3, r3
 800f9cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9d8:	2b03      	cmp	r3, #3
 800f9da:	d104      	bne.n	800f9e6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f9dc:	6839      	ldr	r1, [r7, #0]
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f000 f98b 	bl	800fcfa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9e4:	e01d      	b.n	800fa22 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	7bfa      	ldrb	r2, [r7, #15]
 800f9ea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f9ee:	7bfb      	ldrb	r3, [r7, #15]
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f000 fe5a 	bl	80106ac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f000 fa46 	bl	800fe8a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f9fe:	7bfb      	ldrb	r3, [r7, #15]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d004      	beq.n	800fa0e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2202      	movs	r2, #2
 800fa08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa0c:	e009      	b.n	800fa22 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	2201      	movs	r2, #1
 800fa12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa16:	e004      	b.n	800fa22 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fa18:	6839      	ldr	r1, [r7, #0]
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f000 f96d 	bl	800fcfa <USBD_CtlError>
  }
}
 800fa20:	bf00      	nop
 800fa22:	bf00      	nop
 800fa24:	3710      	adds	r7, #16
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}
	...

0800fa2c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b082      	sub	sp, #8
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
 800fa34:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	885b      	ldrh	r3, [r3, #2]
 800fa3a:	b2da      	uxtb	r2, r3
 800fa3c:	4b41      	ldr	r3, [pc, #260]	; (800fb44 <USBD_SetConfig+0x118>)
 800fa3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fa40:	4b40      	ldr	r3, [pc, #256]	; (800fb44 <USBD_SetConfig+0x118>)
 800fa42:	781b      	ldrb	r3, [r3, #0]
 800fa44:	2b01      	cmp	r3, #1
 800fa46:	d904      	bls.n	800fa52 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800fa48:	6839      	ldr	r1, [r7, #0]
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f000 f955 	bl	800fcfa <USBD_CtlError>
 800fa50:	e075      	b.n	800fb3e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa58:	2b02      	cmp	r3, #2
 800fa5a:	d002      	beq.n	800fa62 <USBD_SetConfig+0x36>
 800fa5c:	2b03      	cmp	r3, #3
 800fa5e:	d023      	beq.n	800faa8 <USBD_SetConfig+0x7c>
 800fa60:	e062      	b.n	800fb28 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800fa62:	4b38      	ldr	r3, [pc, #224]	; (800fb44 <USBD_SetConfig+0x118>)
 800fa64:	781b      	ldrb	r3, [r3, #0]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d01a      	beq.n	800faa0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800fa6a:	4b36      	ldr	r3, [pc, #216]	; (800fb44 <USBD_SetConfig+0x118>)
 800fa6c:	781b      	ldrb	r3, [r3, #0]
 800fa6e:	461a      	mov	r2, r3
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2203      	movs	r2, #3
 800fa78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800fa7c:	4b31      	ldr	r3, [pc, #196]	; (800fb44 <USBD_SetConfig+0x118>)
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	4619      	mov	r1, r3
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f7ff f9e7 	bl	800ee56 <USBD_SetClassConfig>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	2b02      	cmp	r3, #2
 800fa8c:	d104      	bne.n	800fa98 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800fa8e:	6839      	ldr	r1, [r7, #0]
 800fa90:	6878      	ldr	r0, [r7, #4]
 800fa92:	f000 f932 	bl	800fcfa <USBD_CtlError>
            return;
 800fa96:	e052      	b.n	800fb3e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f000 f9f6 	bl	800fe8a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800fa9e:	e04e      	b.n	800fb3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f000 f9f2 	bl	800fe8a <USBD_CtlSendStatus>
        break;
 800faa6:	e04a      	b.n	800fb3e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800faa8:	4b26      	ldr	r3, [pc, #152]	; (800fb44 <USBD_SetConfig+0x118>)
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d112      	bne.n	800fad6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2202      	movs	r2, #2
 800fab4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800fab8:	4b22      	ldr	r3, [pc, #136]	; (800fb44 <USBD_SetConfig+0x118>)
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	461a      	mov	r2, r3
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800fac2:	4b20      	ldr	r3, [pc, #128]	; (800fb44 <USBD_SetConfig+0x118>)
 800fac4:	781b      	ldrb	r3, [r3, #0]
 800fac6:	4619      	mov	r1, r3
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f7ff f9e3 	bl	800ee94 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f000 f9db 	bl	800fe8a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800fad4:	e033      	b.n	800fb3e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800fad6:	4b1b      	ldr	r3, [pc, #108]	; (800fb44 <USBD_SetConfig+0x118>)
 800fad8:	781b      	ldrb	r3, [r3, #0]
 800fada:	461a      	mov	r2, r3
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	685b      	ldr	r3, [r3, #4]
 800fae0:	429a      	cmp	r2, r3
 800fae2:	d01d      	beq.n	800fb20 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	685b      	ldr	r3, [r3, #4]
 800fae8:	b2db      	uxtb	r3, r3
 800faea:	4619      	mov	r1, r3
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f7ff f9d1 	bl	800ee94 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800faf2:	4b14      	ldr	r3, [pc, #80]	; (800fb44 <USBD_SetConfig+0x118>)
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	461a      	mov	r2, r3
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800fafc:	4b11      	ldr	r3, [pc, #68]	; (800fb44 <USBD_SetConfig+0x118>)
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	4619      	mov	r1, r3
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f7ff f9a7 	bl	800ee56 <USBD_SetClassConfig>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	2b02      	cmp	r3, #2
 800fb0c:	d104      	bne.n	800fb18 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800fb0e:	6839      	ldr	r1, [r7, #0]
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f000 f8f2 	bl	800fcfa <USBD_CtlError>
            return;
 800fb16:	e012      	b.n	800fb3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f000 f9b6 	bl	800fe8a <USBD_CtlSendStatus>
        break;
 800fb1e:	e00e      	b.n	800fb3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f000 f9b2 	bl	800fe8a <USBD_CtlSendStatus>
        break;
 800fb26:	e00a      	b.n	800fb3e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800fb28:	6839      	ldr	r1, [r7, #0]
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	f000 f8e5 	bl	800fcfa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800fb30:	4b04      	ldr	r3, [pc, #16]	; (800fb44 <USBD_SetConfig+0x118>)
 800fb32:	781b      	ldrb	r3, [r3, #0]
 800fb34:	4619      	mov	r1, r3
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f7ff f9ac 	bl	800ee94 <USBD_ClrClassConfig>
        break;
 800fb3c:	bf00      	nop
    }
  }
}
 800fb3e:	3708      	adds	r7, #8
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}
 800fb44:	2000247c 	.word	0x2000247c

0800fb48 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	88db      	ldrh	r3, [r3, #6]
 800fb56:	2b01      	cmp	r3, #1
 800fb58:	d004      	beq.n	800fb64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fb5a:	6839      	ldr	r1, [r7, #0]
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f000 f8cc 	bl	800fcfa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fb62:	e022      	b.n	800fbaa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb6a:	2b02      	cmp	r3, #2
 800fb6c:	dc02      	bgt.n	800fb74 <USBD_GetConfig+0x2c>
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	dc03      	bgt.n	800fb7a <USBD_GetConfig+0x32>
 800fb72:	e015      	b.n	800fba0 <USBD_GetConfig+0x58>
 800fb74:	2b03      	cmp	r3, #3
 800fb76:	d00b      	beq.n	800fb90 <USBD_GetConfig+0x48>
 800fb78:	e012      	b.n	800fba0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	3308      	adds	r3, #8
 800fb84:	2201      	movs	r2, #1
 800fb86:	4619      	mov	r1, r3
 800fb88:	6878      	ldr	r0, [r7, #4]
 800fb8a:	f000 f920 	bl	800fdce <USBD_CtlSendData>
        break;
 800fb8e:	e00c      	b.n	800fbaa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	3304      	adds	r3, #4
 800fb94:	2201      	movs	r2, #1
 800fb96:	4619      	mov	r1, r3
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f000 f918 	bl	800fdce <USBD_CtlSendData>
        break;
 800fb9e:	e004      	b.n	800fbaa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800fba0:	6839      	ldr	r1, [r7, #0]
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f000 f8a9 	bl	800fcfa <USBD_CtlError>
        break;
 800fba8:	bf00      	nop
}
 800fbaa:	bf00      	nop
 800fbac:	3708      	adds	r7, #8
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}

0800fbb2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbb2:	b580      	push	{r7, lr}
 800fbb4:	b082      	sub	sp, #8
 800fbb6:	af00      	add	r7, sp, #0
 800fbb8:	6078      	str	r0, [r7, #4]
 800fbba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbc2:	3b01      	subs	r3, #1
 800fbc4:	2b02      	cmp	r3, #2
 800fbc6:	d81e      	bhi.n	800fc06 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	88db      	ldrh	r3, [r3, #6]
 800fbcc:	2b02      	cmp	r3, #2
 800fbce:	d004      	beq.n	800fbda <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800fbd0:	6839      	ldr	r1, [r7, #0]
 800fbd2:	6878      	ldr	r0, [r7, #4]
 800fbd4:	f000 f891 	bl	800fcfa <USBD_CtlError>
        break;
 800fbd8:	e01a      	b.n	800fc10 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2201      	movs	r2, #1
 800fbde:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d005      	beq.n	800fbf6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	68db      	ldr	r3, [r3, #12]
 800fbee:	f043 0202 	orr.w	r2, r3, #2
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	330c      	adds	r3, #12
 800fbfa:	2202      	movs	r2, #2
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f000 f8e5 	bl	800fdce <USBD_CtlSendData>
      break;
 800fc04:	e004      	b.n	800fc10 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800fc06:	6839      	ldr	r1, [r7, #0]
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f000 f876 	bl	800fcfa <USBD_CtlError>
      break;
 800fc0e:	bf00      	nop
  }
}
 800fc10:	bf00      	nop
 800fc12:	3708      	adds	r7, #8
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}

0800fc18 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
 800fc20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	885b      	ldrh	r3, [r3, #2]
 800fc26:	2b01      	cmp	r3, #1
 800fc28:	d106      	bne.n	800fc38 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f000 f929 	bl	800fe8a <USBD_CtlSendStatus>
  }
}
 800fc38:	bf00      	nop
 800fc3a:	3708      	adds	r7, #8
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}

0800fc40 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b082      	sub	sp, #8
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc50:	3b01      	subs	r3, #1
 800fc52:	2b02      	cmp	r3, #2
 800fc54:	d80b      	bhi.n	800fc6e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	885b      	ldrh	r3, [r3, #2]
 800fc5a:	2b01      	cmp	r3, #1
 800fc5c:	d10c      	bne.n	800fc78 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2200      	movs	r2, #0
 800fc62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f000 f90f 	bl	800fe8a <USBD_CtlSendStatus>
      }
      break;
 800fc6c:	e004      	b.n	800fc78 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800fc6e:	6839      	ldr	r1, [r7, #0]
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f000 f842 	bl	800fcfa <USBD_CtlError>
      break;
 800fc76:	e000      	b.n	800fc7a <USBD_ClrFeature+0x3a>
      break;
 800fc78:	bf00      	nop
  }
}
 800fc7a:	bf00      	nop
 800fc7c:	3708      	adds	r7, #8
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}

0800fc82 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fc82:	b480      	push	{r7}
 800fc84:	b083      	sub	sp, #12
 800fc86:	af00      	add	r7, sp, #0
 800fc88:	6078      	str	r0, [r7, #4]
 800fc8a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	781a      	ldrb	r2, [r3, #0]
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	785a      	ldrb	r2, [r3, #1]
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	3302      	adds	r3, #2
 800fca0:	781b      	ldrb	r3, [r3, #0]
 800fca2:	b29a      	uxth	r2, r3
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	3303      	adds	r3, #3
 800fca8:	781b      	ldrb	r3, [r3, #0]
 800fcaa:	b29b      	uxth	r3, r3
 800fcac:	021b      	lsls	r3, r3, #8
 800fcae:	b29b      	uxth	r3, r3
 800fcb0:	4413      	add	r3, r2
 800fcb2:	b29a      	uxth	r2, r3
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	3304      	adds	r3, #4
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	b29a      	uxth	r2, r3
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	3305      	adds	r3, #5
 800fcc4:	781b      	ldrb	r3, [r3, #0]
 800fcc6:	b29b      	uxth	r3, r3
 800fcc8:	021b      	lsls	r3, r3, #8
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	4413      	add	r3, r2
 800fcce:	b29a      	uxth	r2, r3
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	3306      	adds	r3, #6
 800fcd8:	781b      	ldrb	r3, [r3, #0]
 800fcda:	b29a      	uxth	r2, r3
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	3307      	adds	r3, #7
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	b29b      	uxth	r3, r3
 800fce4:	021b      	lsls	r3, r3, #8
 800fce6:	b29b      	uxth	r3, r3
 800fce8:	4413      	add	r3, r2
 800fcea:	b29a      	uxth	r2, r3
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	80da      	strh	r2, [r3, #6]

}
 800fcf0:	bf00      	nop
 800fcf2:	370c      	adds	r7, #12
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bc80      	pop	{r7}
 800fcf8:	4770      	bx	lr

0800fcfa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800fcfa:	b580      	push	{r7, lr}
 800fcfc:	b082      	sub	sp, #8
 800fcfe:	af00      	add	r7, sp, #0
 800fd00:	6078      	str	r0, [r7, #4]
 800fd02:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800fd04:	2180      	movs	r1, #128	; 0x80
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f000 fc66 	bl	80105d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800fd0c:	2100      	movs	r1, #0
 800fd0e:	6878      	ldr	r0, [r7, #4]
 800fd10:	f000 fc62 	bl	80105d8 <USBD_LL_StallEP>
}
 800fd14:	bf00      	nop
 800fd16:	3708      	adds	r7, #8
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}

0800fd1c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b086      	sub	sp, #24
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	60f8      	str	r0, [r7, #12]
 800fd24:	60b9      	str	r1, [r7, #8]
 800fd26:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fd28:	2300      	movs	r3, #0
 800fd2a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d032      	beq.n	800fd98 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800fd32:	68f8      	ldr	r0, [r7, #12]
 800fd34:	f000 f834 	bl	800fda0 <USBD_GetLen>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	3301      	adds	r3, #1
 800fd3c:	b29b      	uxth	r3, r3
 800fd3e:	005b      	lsls	r3, r3, #1
 800fd40:	b29a      	uxth	r2, r3
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800fd46:	7dfb      	ldrb	r3, [r7, #23]
 800fd48:	1c5a      	adds	r2, r3, #1
 800fd4a:	75fa      	strb	r2, [r7, #23]
 800fd4c:	461a      	mov	r2, r3
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	4413      	add	r3, r2
 800fd52:	687a      	ldr	r2, [r7, #4]
 800fd54:	7812      	ldrb	r2, [r2, #0]
 800fd56:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800fd58:	7dfb      	ldrb	r3, [r7, #23]
 800fd5a:	1c5a      	adds	r2, r3, #1
 800fd5c:	75fa      	strb	r2, [r7, #23]
 800fd5e:	461a      	mov	r2, r3
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	4413      	add	r3, r2
 800fd64:	2203      	movs	r2, #3
 800fd66:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800fd68:	e012      	b.n	800fd90 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	1c5a      	adds	r2, r3, #1
 800fd6e:	60fa      	str	r2, [r7, #12]
 800fd70:	7dfa      	ldrb	r2, [r7, #23]
 800fd72:	1c51      	adds	r1, r2, #1
 800fd74:	75f9      	strb	r1, [r7, #23]
 800fd76:	4611      	mov	r1, r2
 800fd78:	68ba      	ldr	r2, [r7, #8]
 800fd7a:	440a      	add	r2, r1
 800fd7c:	781b      	ldrb	r3, [r3, #0]
 800fd7e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800fd80:	7dfb      	ldrb	r3, [r7, #23]
 800fd82:	1c5a      	adds	r2, r3, #1
 800fd84:	75fa      	strb	r2, [r7, #23]
 800fd86:	461a      	mov	r2, r3
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	4413      	add	r3, r2
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	781b      	ldrb	r3, [r3, #0]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d1e8      	bne.n	800fd6a <USBD_GetString+0x4e>
    }
  }
}
 800fd98:	bf00      	nop
 800fd9a:	3718      	adds	r7, #24
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}

0800fda0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fda0:	b480      	push	{r7}
 800fda2:	b085      	sub	sp, #20
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fda8:	2300      	movs	r3, #0
 800fdaa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800fdac:	e005      	b.n	800fdba <USBD_GetLen+0x1a>
  {
    len++;
 800fdae:	7bfb      	ldrb	r3, [r7, #15]
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	73fb      	strb	r3, [r7, #15]
    buf++;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	3301      	adds	r3, #1
 800fdb8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d1f5      	bne.n	800fdae <USBD_GetLen+0xe>
  }

  return len;
 800fdc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	3714      	adds	r7, #20
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bc80      	pop	{r7}
 800fdcc:	4770      	bx	lr

0800fdce <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800fdce:	b580      	push	{r7, lr}
 800fdd0:	b084      	sub	sp, #16
 800fdd2:	af00      	add	r7, sp, #0
 800fdd4:	60f8      	str	r0, [r7, #12]
 800fdd6:	60b9      	str	r1, [r7, #8]
 800fdd8:	4613      	mov	r3, r2
 800fdda:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	2202      	movs	r2, #2
 800fde0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fde4:	88fa      	ldrh	r2, [r7, #6]
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800fdea:	88fa      	ldrh	r2, [r7, #6]
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fdf0:	88fb      	ldrh	r3, [r7, #6]
 800fdf2:	68ba      	ldr	r2, [r7, #8]
 800fdf4:	2100      	movs	r1, #0
 800fdf6:	68f8      	ldr	r0, [r7, #12]
 800fdf8:	f000 fc77 	bl	80106ea <USBD_LL_Transmit>

  return USBD_OK;
 800fdfc:	2300      	movs	r3, #0
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3710      	adds	r7, #16
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}

0800fe06 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800fe06:	b580      	push	{r7, lr}
 800fe08:	b084      	sub	sp, #16
 800fe0a:	af00      	add	r7, sp, #0
 800fe0c:	60f8      	str	r0, [r7, #12]
 800fe0e:	60b9      	str	r1, [r7, #8]
 800fe10:	4613      	mov	r3, r2
 800fe12:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fe14:	88fb      	ldrh	r3, [r7, #6]
 800fe16:	68ba      	ldr	r2, [r7, #8]
 800fe18:	2100      	movs	r1, #0
 800fe1a:	68f8      	ldr	r0, [r7, #12]
 800fe1c:	f000 fc65 	bl	80106ea <USBD_LL_Transmit>

  return USBD_OK;
 800fe20:	2300      	movs	r3, #0
}
 800fe22:	4618      	mov	r0, r3
 800fe24:	3710      	adds	r7, #16
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}

0800fe2a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800fe2a:	b580      	push	{r7, lr}
 800fe2c:	b084      	sub	sp, #16
 800fe2e:	af00      	add	r7, sp, #0
 800fe30:	60f8      	str	r0, [r7, #12]
 800fe32:	60b9      	str	r1, [r7, #8]
 800fe34:	4613      	mov	r3, r2
 800fe36:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	2203      	movs	r2, #3
 800fe3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fe40:	88fa      	ldrh	r2, [r7, #6]
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800fe48:	88fa      	ldrh	r2, [r7, #6]
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fe50:	88fb      	ldrh	r3, [r7, #6]
 800fe52:	68ba      	ldr	r2, [r7, #8]
 800fe54:	2100      	movs	r1, #0
 800fe56:	68f8      	ldr	r0, [r7, #12]
 800fe58:	f000 fc6a 	bl	8010730 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe5c:	2300      	movs	r3, #0
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3710      	adds	r7, #16
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}

0800fe66 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800fe66:	b580      	push	{r7, lr}
 800fe68:	b084      	sub	sp, #16
 800fe6a:	af00      	add	r7, sp, #0
 800fe6c:	60f8      	str	r0, [r7, #12]
 800fe6e:	60b9      	str	r1, [r7, #8]
 800fe70:	4613      	mov	r3, r2
 800fe72:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fe74:	88fb      	ldrh	r3, [r7, #6]
 800fe76:	68ba      	ldr	r2, [r7, #8]
 800fe78:	2100      	movs	r1, #0
 800fe7a:	68f8      	ldr	r0, [r7, #12]
 800fe7c:	f000 fc58 	bl	8010730 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe80:	2300      	movs	r3, #0
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	3710      	adds	r7, #16
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}

0800fe8a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fe8a:	b580      	push	{r7, lr}
 800fe8c:	b082      	sub	sp, #8
 800fe8e:	af00      	add	r7, sp, #0
 800fe90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2204      	movs	r2, #4
 800fe96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	2100      	movs	r1, #0
 800fea0:	6878      	ldr	r0, [r7, #4]
 800fea2:	f000 fc22 	bl	80106ea <USBD_LL_Transmit>

  return USBD_OK;
 800fea6:	2300      	movs	r3, #0
}
 800fea8:	4618      	mov	r0, r3
 800feaa:	3708      	adds	r7, #8
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}

0800feb0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b082      	sub	sp, #8
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2205      	movs	r2, #5
 800febc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fec0:	2300      	movs	r3, #0
 800fec2:	2200      	movs	r2, #0
 800fec4:	2100      	movs	r1, #0
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f000 fc32 	bl	8010730 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fecc:	2300      	movs	r3, #0
}
 800fece:	4618      	mov	r0, r3
 800fed0:	3708      	adds	r7, #8
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}
	...

0800fed8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fedc:	2200      	movs	r2, #0
 800fede:	4912      	ldr	r1, [pc, #72]	; (800ff28 <MX_USB_DEVICE_Init+0x50>)
 800fee0:	4812      	ldr	r0, [pc, #72]	; (800ff2c <MX_USB_DEVICE_Init+0x54>)
 800fee2:	f7fe ff5e 	bl	800eda2 <USBD_Init>
 800fee6:	4603      	mov	r3, r0
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d001      	beq.n	800fef0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800feec:	f7f3 f8c0 	bl	8003070 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fef0:	490f      	ldr	r1, [pc, #60]	; (800ff30 <MX_USB_DEVICE_Init+0x58>)
 800fef2:	480e      	ldr	r0, [pc, #56]	; (800ff2c <MX_USB_DEVICE_Init+0x54>)
 800fef4:	f7fe ff80 	bl	800edf8 <USBD_RegisterClass>
 800fef8:	4603      	mov	r3, r0
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d001      	beq.n	800ff02 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fefe:	f7f3 f8b7 	bl	8003070 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ff02:	490c      	ldr	r1, [pc, #48]	; (800ff34 <MX_USB_DEVICE_Init+0x5c>)
 800ff04:	4809      	ldr	r0, [pc, #36]	; (800ff2c <MX_USB_DEVICE_Init+0x54>)
 800ff06:	f7fe feb1 	bl	800ec6c <USBD_CDC_RegisterInterface>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d001      	beq.n	800ff14 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ff10:	f7f3 f8ae 	bl	8003070 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ff14:	4805      	ldr	r0, [pc, #20]	; (800ff2c <MX_USB_DEVICE_Init+0x54>)
 800ff16:	f7fe ff88 	bl	800ee2a <USBD_Start>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d001      	beq.n	800ff24 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ff20:	f7f3 f8a6 	bl	8003070 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ff24:	bf00      	nop
 800ff26:	bd80      	pop	{r7, pc}
 800ff28:	20000620 	.word	0x20000620
 800ff2c:	20002480 	.word	0x20002480
 800ff30:	20000504 	.word	0x20000504
 800ff34:	20000608 	.word	0x20000608

0800ff38 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	4905      	ldr	r1, [pc, #20]	; (800ff54 <CDC_Init_FS+0x1c>)
 800ff40:	4805      	ldr	r0, [pc, #20]	; (800ff58 <CDC_Init_FS+0x20>)
 800ff42:	f7fe fea9 	bl	800ec98 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ff46:	4905      	ldr	r1, [pc, #20]	; (800ff5c <CDC_Init_FS+0x24>)
 800ff48:	4803      	ldr	r0, [pc, #12]	; (800ff58 <CDC_Init_FS+0x20>)
 800ff4a:	f7fe febe 	bl	800ecca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ff4e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	bd80      	pop	{r7, pc}
 800ff54:	20002b44 	.word	0x20002b44
 800ff58:	20002480 	.word	0x20002480
 800ff5c:	20002744 	.word	0x20002744

0800ff60 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ff60:	b480      	push	{r7}
 800ff62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ff64:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bc80      	pop	{r7}
 800ff6c:	4770      	bx	lr
	...

0800ff70 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ff70:	b480      	push	{r7}
 800ff72:	b083      	sub	sp, #12
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	4603      	mov	r3, r0
 800ff78:	6039      	str	r1, [r7, #0]
 800ff7a:	71fb      	strb	r3, [r7, #7]
 800ff7c:	4613      	mov	r3, r2
 800ff7e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ff80:	79fb      	ldrb	r3, [r7, #7]
 800ff82:	2b23      	cmp	r3, #35	; 0x23
 800ff84:	d85c      	bhi.n	8010040 <CDC_Control_FS+0xd0>
 800ff86:	a201      	add	r2, pc, #4	; (adr r2, 800ff8c <CDC_Control_FS+0x1c>)
 800ff88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff8c:	08010041 	.word	0x08010041
 800ff90:	08010041 	.word	0x08010041
 800ff94:	08010041 	.word	0x08010041
 800ff98:	08010041 	.word	0x08010041
 800ff9c:	08010041 	.word	0x08010041
 800ffa0:	08010041 	.word	0x08010041
 800ffa4:	08010041 	.word	0x08010041
 800ffa8:	08010041 	.word	0x08010041
 800ffac:	08010041 	.word	0x08010041
 800ffb0:	08010041 	.word	0x08010041
 800ffb4:	08010041 	.word	0x08010041
 800ffb8:	08010041 	.word	0x08010041
 800ffbc:	08010041 	.word	0x08010041
 800ffc0:	08010041 	.word	0x08010041
 800ffc4:	08010041 	.word	0x08010041
 800ffc8:	08010041 	.word	0x08010041
 800ffcc:	08010041 	.word	0x08010041
 800ffd0:	08010041 	.word	0x08010041
 800ffd4:	08010041 	.word	0x08010041
 800ffd8:	08010041 	.word	0x08010041
 800ffdc:	08010041 	.word	0x08010041
 800ffe0:	08010041 	.word	0x08010041
 800ffe4:	08010041 	.word	0x08010041
 800ffe8:	08010041 	.word	0x08010041
 800ffec:	08010041 	.word	0x08010041
 800fff0:	08010041 	.word	0x08010041
 800fff4:	08010041 	.word	0x08010041
 800fff8:	08010041 	.word	0x08010041
 800fffc:	08010041 	.word	0x08010041
 8010000:	08010041 	.word	0x08010041
 8010004:	08010041 	.word	0x08010041
 8010008:	08010041 	.word	0x08010041
 801000c:	0801001d 	.word	0x0801001d
 8010010:	0801002f 	.word	0x0801002f
 8010014:	08010041 	.word	0x08010041
 8010018:	08010041 	.word	0x08010041
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit
                    = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };
    case CDC_SET_LINE_CODING:
        	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 801001c:	4b0c      	ldr	r3, [pc, #48]	; (8010050 <CDC_Control_FS+0xe0>)
 801001e:	683a      	ldr	r2, [r7, #0]
 8010020:	6810      	ldr	r0, [r2, #0]
 8010022:	6018      	str	r0, [r3, #0]
 8010024:	8891      	ldrh	r1, [r2, #4]
 8010026:	7992      	ldrb	r2, [r2, #6]
 8010028:	8099      	strh	r1, [r3, #4]
 801002a:	719a      	strb	r2, [r3, #6]
    break;
 801002c:	e009      	b.n	8010042 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
        	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 801002e:	683b      	ldr	r3, [r7, #0]
 8010030:	4a07      	ldr	r2, [pc, #28]	; (8010050 <CDC_Control_FS+0xe0>)
 8010032:	6810      	ldr	r0, [r2, #0]
 8010034:	6018      	str	r0, [r3, #0]
 8010036:	8891      	ldrh	r1, [r2, #4]
 8010038:	7992      	ldrb	r2, [r2, #6]
 801003a:	8099      	strh	r1, [r3, #4]
 801003c:	719a      	strb	r2, [r3, #6]
    break;
 801003e:	e000      	b.n	8010042 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010040:	bf00      	nop
  }

  return (USBD_OK);
 8010042:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010044:	4618      	mov	r0, r3
 8010046:	370c      	adds	r7, #12
 8010048:	46bd      	mov	sp, r7
 801004a:	bc80      	pop	{r7}
 801004c:	4770      	bx	lr
 801004e:	bf00      	nop
 8010050:	20000618 	.word	0x20000618

08010054 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b082      	sub	sp, #8
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801005e:	6879      	ldr	r1, [r7, #4]
 8010060:	4808      	ldr	r0, [pc, #32]	; (8010084 <CDC_Receive_FS+0x30>)
 8010062:	f7fe fe32 	bl	800ecca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010066:	4807      	ldr	r0, [pc, #28]	; (8010084 <CDC_Receive_FS+0x30>)
 8010068:	f7fe fe71 	bl	800ed4e <USBD_CDC_ReceivePacket>
  CDC_ReveiveCallback(Buf, Len[0]); // My callback function
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	b2db      	uxtb	r3, r3
 8010072:	4619      	mov	r1, r3
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f7f2 ff51 	bl	8002f1c <CDC_ReveiveCallback>

  return (USBD_OK);
 801007a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801007c:	4618      	mov	r0, r3
 801007e:	3708      	adds	r7, #8
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}
 8010084:	20002480 	.word	0x20002480

08010088 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b084      	sub	sp, #16
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
 8010090:	460b      	mov	r3, r1
 8010092:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010094:	2300      	movs	r3, #0
 8010096:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010098:	4b0d      	ldr	r3, [pc, #52]	; (80100d0 <CDC_Transmit_FS+0x48>)
 801009a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801009e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80100a0:	68bb      	ldr	r3, [r7, #8]
 80100a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d001      	beq.n	80100ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80100aa:	2301      	movs	r3, #1
 80100ac:	e00b      	b.n	80100c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80100ae:	887b      	ldrh	r3, [r7, #2]
 80100b0:	461a      	mov	r2, r3
 80100b2:	6879      	ldr	r1, [r7, #4]
 80100b4:	4806      	ldr	r0, [pc, #24]	; (80100d0 <CDC_Transmit_FS+0x48>)
 80100b6:	f7fe fdef 	bl	800ec98 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80100ba:	4805      	ldr	r0, [pc, #20]	; (80100d0 <CDC_Transmit_FS+0x48>)
 80100bc:	f7fe fe18 	bl	800ecf0 <USBD_CDC_TransmitPacket>
 80100c0:	4603      	mov	r3, r0
 80100c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80100c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	3710      	adds	r7, #16
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
 80100ce:	bf00      	nop
 80100d0:	20002480 	.word	0x20002480

080100d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100d4:	b480      	push	{r7}
 80100d6:	b083      	sub	sp, #12
 80100d8:	af00      	add	r7, sp, #0
 80100da:	4603      	mov	r3, r0
 80100dc:	6039      	str	r1, [r7, #0]
 80100de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	2212      	movs	r2, #18
 80100e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80100e6:	4b03      	ldr	r3, [pc, #12]	; (80100f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	370c      	adds	r7, #12
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bc80      	pop	{r7}
 80100f0:	4770      	bx	lr
 80100f2:	bf00      	nop
 80100f4:	2000063c 	.word	0x2000063c

080100f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80100f8:	b480      	push	{r7}
 80100fa:	b083      	sub	sp, #12
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	4603      	mov	r3, r0
 8010100:	6039      	str	r1, [r7, #0]
 8010102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	2204      	movs	r2, #4
 8010108:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801010a:	4b03      	ldr	r3, [pc, #12]	; (8010118 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801010c:	4618      	mov	r0, r3
 801010e:	370c      	adds	r7, #12
 8010110:	46bd      	mov	sp, r7
 8010112:	bc80      	pop	{r7}
 8010114:	4770      	bx	lr
 8010116:	bf00      	nop
 8010118:	20000650 	.word	0x20000650

0801011c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b082      	sub	sp, #8
 8010120:	af00      	add	r7, sp, #0
 8010122:	4603      	mov	r3, r0
 8010124:	6039      	str	r1, [r7, #0]
 8010126:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010128:	79fb      	ldrb	r3, [r7, #7]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d105      	bne.n	801013a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801012e:	683a      	ldr	r2, [r7, #0]
 8010130:	4907      	ldr	r1, [pc, #28]	; (8010150 <USBD_FS_ProductStrDescriptor+0x34>)
 8010132:	4808      	ldr	r0, [pc, #32]	; (8010154 <USBD_FS_ProductStrDescriptor+0x38>)
 8010134:	f7ff fdf2 	bl	800fd1c <USBD_GetString>
 8010138:	e004      	b.n	8010144 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801013a:	683a      	ldr	r2, [r7, #0]
 801013c:	4904      	ldr	r1, [pc, #16]	; (8010150 <USBD_FS_ProductStrDescriptor+0x34>)
 801013e:	4805      	ldr	r0, [pc, #20]	; (8010154 <USBD_FS_ProductStrDescriptor+0x38>)
 8010140:	f7ff fdec 	bl	800fd1c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010144:	4b02      	ldr	r3, [pc, #8]	; (8010150 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010146:	4618      	mov	r0, r3
 8010148:	3708      	adds	r7, #8
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}
 801014e:	bf00      	nop
 8010150:	20002f44 	.word	0x20002f44
 8010154:	08013a14 	.word	0x08013a14

08010158 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b082      	sub	sp, #8
 801015c:	af00      	add	r7, sp, #0
 801015e:	4603      	mov	r3, r0
 8010160:	6039      	str	r1, [r7, #0]
 8010162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010164:	683a      	ldr	r2, [r7, #0]
 8010166:	4904      	ldr	r1, [pc, #16]	; (8010178 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010168:	4804      	ldr	r0, [pc, #16]	; (801017c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801016a:	f7ff fdd7 	bl	800fd1c <USBD_GetString>
  return USBD_StrDesc;
 801016e:	4b02      	ldr	r3, [pc, #8]	; (8010178 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010170:	4618      	mov	r0, r3
 8010172:	3708      	adds	r7, #8
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}
 8010178:	20002f44 	.word	0x20002f44
 801017c:	08013a2c 	.word	0x08013a2c

08010180 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b082      	sub	sp, #8
 8010184:	af00      	add	r7, sp, #0
 8010186:	4603      	mov	r3, r0
 8010188:	6039      	str	r1, [r7, #0]
 801018a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	221a      	movs	r2, #26
 8010190:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010192:	f000 f843 	bl	801021c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010196:	4b02      	ldr	r3, [pc, #8]	; (80101a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010198:	4618      	mov	r0, r3
 801019a:	3708      	adds	r7, #8
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}
 80101a0:	20000654 	.word	0x20000654

080101a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b082      	sub	sp, #8
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	4603      	mov	r3, r0
 80101ac:	6039      	str	r1, [r7, #0]
 80101ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80101b0:	79fb      	ldrb	r3, [r7, #7]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d105      	bne.n	80101c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80101b6:	683a      	ldr	r2, [r7, #0]
 80101b8:	4907      	ldr	r1, [pc, #28]	; (80101d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80101ba:	4808      	ldr	r0, [pc, #32]	; (80101dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80101bc:	f7ff fdae 	bl	800fd1c <USBD_GetString>
 80101c0:	e004      	b.n	80101cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80101c2:	683a      	ldr	r2, [r7, #0]
 80101c4:	4904      	ldr	r1, [pc, #16]	; (80101d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80101c6:	4805      	ldr	r0, [pc, #20]	; (80101dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80101c8:	f7ff fda8 	bl	800fd1c <USBD_GetString>
  }
  return USBD_StrDesc;
 80101cc:	4b02      	ldr	r3, [pc, #8]	; (80101d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	3708      	adds	r7, #8
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}
 80101d6:	bf00      	nop
 80101d8:	20002f44 	.word	0x20002f44
 80101dc:	08013a38 	.word	0x08013a38

080101e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b082      	sub	sp, #8
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	4603      	mov	r3, r0
 80101e8:	6039      	str	r1, [r7, #0]
 80101ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80101ec:	79fb      	ldrb	r3, [r7, #7]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d105      	bne.n	80101fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80101f2:	683a      	ldr	r2, [r7, #0]
 80101f4:	4907      	ldr	r1, [pc, #28]	; (8010214 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80101f6:	4808      	ldr	r0, [pc, #32]	; (8010218 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80101f8:	f7ff fd90 	bl	800fd1c <USBD_GetString>
 80101fc:	e004      	b.n	8010208 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80101fe:	683a      	ldr	r2, [r7, #0]
 8010200:	4904      	ldr	r1, [pc, #16]	; (8010214 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010202:	4805      	ldr	r0, [pc, #20]	; (8010218 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010204:	f7ff fd8a 	bl	800fd1c <USBD_GetString>
  }
  return USBD_StrDesc;
 8010208:	4b02      	ldr	r3, [pc, #8]	; (8010214 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801020a:	4618      	mov	r0, r3
 801020c:	3708      	adds	r7, #8
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}
 8010212:	bf00      	nop
 8010214:	20002f44 	.word	0x20002f44
 8010218:	08013a44 	.word	0x08013a44

0801021c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b084      	sub	sp, #16
 8010220:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010222:	4b0f      	ldr	r3, [pc, #60]	; (8010260 <Get_SerialNum+0x44>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010228:	4b0e      	ldr	r3, [pc, #56]	; (8010264 <Get_SerialNum+0x48>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801022e:	4b0e      	ldr	r3, [pc, #56]	; (8010268 <Get_SerialNum+0x4c>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010234:	68fa      	ldr	r2, [r7, #12]
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	4413      	add	r3, r2
 801023a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d009      	beq.n	8010256 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010242:	2208      	movs	r2, #8
 8010244:	4909      	ldr	r1, [pc, #36]	; (801026c <Get_SerialNum+0x50>)
 8010246:	68f8      	ldr	r0, [r7, #12]
 8010248:	f000 f814 	bl	8010274 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801024c:	2204      	movs	r2, #4
 801024e:	4908      	ldr	r1, [pc, #32]	; (8010270 <Get_SerialNum+0x54>)
 8010250:	68b8      	ldr	r0, [r7, #8]
 8010252:	f000 f80f 	bl	8010274 <IntToUnicode>
  }
}
 8010256:	bf00      	nop
 8010258:	3710      	adds	r7, #16
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}
 801025e:	bf00      	nop
 8010260:	1ffff7e8 	.word	0x1ffff7e8
 8010264:	1ffff7ec 	.word	0x1ffff7ec
 8010268:	1ffff7f0 	.word	0x1ffff7f0
 801026c:	20000656 	.word	0x20000656
 8010270:	20000666 	.word	0x20000666

08010274 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010274:	b480      	push	{r7}
 8010276:	b087      	sub	sp, #28
 8010278:	af00      	add	r7, sp, #0
 801027a:	60f8      	str	r0, [r7, #12]
 801027c:	60b9      	str	r1, [r7, #8]
 801027e:	4613      	mov	r3, r2
 8010280:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010282:	2300      	movs	r3, #0
 8010284:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010286:	2300      	movs	r3, #0
 8010288:	75fb      	strb	r3, [r7, #23]
 801028a:	e027      	b.n	80102dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	0f1b      	lsrs	r3, r3, #28
 8010290:	2b09      	cmp	r3, #9
 8010292:	d80b      	bhi.n	80102ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	0f1b      	lsrs	r3, r3, #28
 8010298:	b2da      	uxtb	r2, r3
 801029a:	7dfb      	ldrb	r3, [r7, #23]
 801029c:	005b      	lsls	r3, r3, #1
 801029e:	4619      	mov	r1, r3
 80102a0:	68bb      	ldr	r3, [r7, #8]
 80102a2:	440b      	add	r3, r1
 80102a4:	3230      	adds	r2, #48	; 0x30
 80102a6:	b2d2      	uxtb	r2, r2
 80102a8:	701a      	strb	r2, [r3, #0]
 80102aa:	e00a      	b.n	80102c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	0f1b      	lsrs	r3, r3, #28
 80102b0:	b2da      	uxtb	r2, r3
 80102b2:	7dfb      	ldrb	r3, [r7, #23]
 80102b4:	005b      	lsls	r3, r3, #1
 80102b6:	4619      	mov	r1, r3
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	440b      	add	r3, r1
 80102bc:	3237      	adds	r2, #55	; 0x37
 80102be:	b2d2      	uxtb	r2, r2
 80102c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	011b      	lsls	r3, r3, #4
 80102c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80102c8:	7dfb      	ldrb	r3, [r7, #23]
 80102ca:	005b      	lsls	r3, r3, #1
 80102cc:	3301      	adds	r3, #1
 80102ce:	68ba      	ldr	r2, [r7, #8]
 80102d0:	4413      	add	r3, r2
 80102d2:	2200      	movs	r2, #0
 80102d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80102d6:	7dfb      	ldrb	r3, [r7, #23]
 80102d8:	3301      	adds	r3, #1
 80102da:	75fb      	strb	r3, [r7, #23]
 80102dc:	7dfa      	ldrb	r2, [r7, #23]
 80102de:	79fb      	ldrb	r3, [r7, #7]
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d3d3      	bcc.n	801028c <IntToUnicode+0x18>
  }
}
 80102e4:	bf00      	nop
 80102e6:	bf00      	nop
 80102e8:	371c      	adds	r7, #28
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bc80      	pop	{r7}
 80102ee:	4770      	bx	lr

080102f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80102f0:	b480      	push	{r7}
 80102f2:	b085      	sub	sp, #20
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	4a09      	ldr	r2, [pc, #36]	; (8010324 <HAL_PCD_MspInit+0x34>)
 80102fe:	4293      	cmp	r3, r2
 8010300:	d10b      	bne.n	801031a <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010302:	4b09      	ldr	r3, [pc, #36]	; (8010328 <HAL_PCD_MspInit+0x38>)
 8010304:	69db      	ldr	r3, [r3, #28]
 8010306:	4a08      	ldr	r2, [pc, #32]	; (8010328 <HAL_PCD_MspInit+0x38>)
 8010308:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801030c:	61d3      	str	r3, [r2, #28]
 801030e:	4b06      	ldr	r3, [pc, #24]	; (8010328 <HAL_PCD_MspInit+0x38>)
 8010310:	69db      	ldr	r3, [r3, #28]
 8010312:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010316:	60fb      	str	r3, [r7, #12]
 8010318:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801031a:	bf00      	nop
 801031c:	3714      	adds	r7, #20
 801031e:	46bd      	mov	sp, r7
 8010320:	bc80      	pop	{r7}
 8010322:	4770      	bx	lr
 8010324:	40005c00 	.word	0x40005c00
 8010328:	40021000 	.word	0x40021000

0801032c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b082      	sub	sp, #8
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8010340:	4619      	mov	r1, r3
 8010342:	4610      	mov	r0, r2
 8010344:	f7fe fdb9 	bl	800eeba <USBD_LL_SetupStage>
}
 8010348:	bf00      	nop
 801034a:	3708      	adds	r7, #8
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}

08010350 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b082      	sub	sp, #8
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
 8010358:	460b      	mov	r3, r1
 801035a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8010362:	78fa      	ldrb	r2, [r7, #3]
 8010364:	6879      	ldr	r1, [r7, #4]
 8010366:	4613      	mov	r3, r2
 8010368:	009b      	lsls	r3, r3, #2
 801036a:	4413      	add	r3, r2
 801036c:	00db      	lsls	r3, r3, #3
 801036e:	440b      	add	r3, r1
 8010370:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8010374:	681a      	ldr	r2, [r3, #0]
 8010376:	78fb      	ldrb	r3, [r7, #3]
 8010378:	4619      	mov	r1, r3
 801037a:	f7fe fdeb 	bl	800ef54 <USBD_LL_DataOutStage>
}
 801037e:	bf00      	nop
 8010380:	3708      	adds	r7, #8
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}

08010386 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010386:	b580      	push	{r7, lr}
 8010388:	b082      	sub	sp, #8
 801038a:	af00      	add	r7, sp, #0
 801038c:	6078      	str	r0, [r7, #4]
 801038e:	460b      	mov	r3, r1
 8010390:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8010398:	78fa      	ldrb	r2, [r7, #3]
 801039a:	6879      	ldr	r1, [r7, #4]
 801039c:	4613      	mov	r3, r2
 801039e:	009b      	lsls	r3, r3, #2
 80103a0:	4413      	add	r3, r2
 80103a2:	00db      	lsls	r3, r3, #3
 80103a4:	440b      	add	r3, r1
 80103a6:	333c      	adds	r3, #60	; 0x3c
 80103a8:	681a      	ldr	r2, [r3, #0]
 80103aa:	78fb      	ldrb	r3, [r7, #3]
 80103ac:	4619      	mov	r1, r3
 80103ae:	f7fe fe42 	bl	800f036 <USBD_LL_DataInStage>
}
 80103b2:	bf00      	nop
 80103b4:	3708      	adds	r7, #8
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}

080103ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103ba:	b580      	push	{r7, lr}
 80103bc:	b082      	sub	sp, #8
 80103be:	af00      	add	r7, sp, #0
 80103c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80103c8:	4618      	mov	r0, r3
 80103ca:	f7fe ff52 	bl	800f272 <USBD_LL_SOF>
}
 80103ce:	bf00      	nop
 80103d0:	3708      	adds	r7, #8
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}

080103d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103d6:	b580      	push	{r7, lr}
 80103d8:	b084      	sub	sp, #16
 80103da:	af00      	add	r7, sp, #0
 80103dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80103de:	2301      	movs	r3, #1
 80103e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	689b      	ldr	r3, [r3, #8]
 80103e6:	2b02      	cmp	r3, #2
 80103e8:	d001      	beq.n	80103ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80103ea:	f7f2 fe41 	bl	8003070 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80103f4:	7bfa      	ldrb	r2, [r7, #15]
 80103f6:	4611      	mov	r1, r2
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7fe ff02 	bl	800f202 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8010404:	4618      	mov	r0, r3
 8010406:	f7fe febb 	bl	800f180 <USBD_LL_Reset>
}
 801040a:	bf00      	nop
 801040c:	3710      	adds	r7, #16
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}
	...

08010414 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8010422:	4618      	mov	r0, r3
 8010424:	f7fe fefc 	bl	800f220 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	699b      	ldr	r3, [r3, #24]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d005      	beq.n	801043c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010430:	4b04      	ldr	r3, [pc, #16]	; (8010444 <HAL_PCD_SuspendCallback+0x30>)
 8010432:	691b      	ldr	r3, [r3, #16]
 8010434:	4a03      	ldr	r2, [pc, #12]	; (8010444 <HAL_PCD_SuspendCallback+0x30>)
 8010436:	f043 0306 	orr.w	r3, r3, #6
 801043a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801043c:	bf00      	nop
 801043e:	3708      	adds	r7, #8
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}
 8010444:	e000ed00 	.word	0xe000ed00

08010448 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b082      	sub	sp, #8
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8010456:	4618      	mov	r0, r3
 8010458:	f7fe fef6 	bl	800f248 <USBD_LL_Resume>
}
 801045c:	bf00      	nop
 801045e:	3708      	adds	r7, #8
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801046c:	4a28      	ldr	r2, [pc, #160]	; (8010510 <USBD_LL_Init+0xac>)
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	4a26      	ldr	r2, [pc, #152]	; (8010510 <USBD_LL_Init+0xac>)
 8010478:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 801047c:	4b24      	ldr	r3, [pc, #144]	; (8010510 <USBD_LL_Init+0xac>)
 801047e:	4a25      	ldr	r2, [pc, #148]	; (8010514 <USBD_LL_Init+0xb0>)
 8010480:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010482:	4b23      	ldr	r3, [pc, #140]	; (8010510 <USBD_LL_Init+0xac>)
 8010484:	2208      	movs	r2, #8
 8010486:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010488:	4b21      	ldr	r3, [pc, #132]	; (8010510 <USBD_LL_Init+0xac>)
 801048a:	2202      	movs	r2, #2
 801048c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801048e:	4b20      	ldr	r3, [pc, #128]	; (8010510 <USBD_LL_Init+0xac>)
 8010490:	2200      	movs	r2, #0
 8010492:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8010494:	4b1e      	ldr	r3, [pc, #120]	; (8010510 <USBD_LL_Init+0xac>)
 8010496:	2200      	movs	r2, #0
 8010498:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801049a:	4b1d      	ldr	r3, [pc, #116]	; (8010510 <USBD_LL_Init+0xac>)
 801049c:	2200      	movs	r2, #0
 801049e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80104a0:	481b      	ldr	r0, [pc, #108]	; (8010510 <USBD_LL_Init+0xac>)
 80104a2:	f7f8 fae5 	bl	8008a70 <HAL_PCD_Init>
 80104a6:	4603      	mov	r3, r0
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d001      	beq.n	80104b0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80104ac:	f7f2 fde0 	bl	8003070 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80104b6:	2318      	movs	r3, #24
 80104b8:	2200      	movs	r2, #0
 80104ba:	2100      	movs	r1, #0
 80104bc:	f7fa f804 	bl	800a4c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80104c6:	2358      	movs	r3, #88	; 0x58
 80104c8:	2200      	movs	r2, #0
 80104ca:	2180      	movs	r1, #128	; 0x80
 80104cc:	f7f9 fffc 	bl	800a4c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80104d6:	23c0      	movs	r3, #192	; 0xc0
 80104d8:	2200      	movs	r2, #0
 80104da:	2181      	movs	r1, #129	; 0x81
 80104dc:	f7f9 fff4 	bl	800a4c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80104e6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80104ea:	2200      	movs	r2, #0
 80104ec:	2101      	movs	r1, #1
 80104ee:	f7f9 ffeb 	bl	800a4c8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80104f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80104fc:	2200      	movs	r2, #0
 80104fe:	2182      	movs	r1, #130	; 0x82
 8010500:	f7f9 ffe2 	bl	800a4c8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8010504:	2300      	movs	r3, #0
}
 8010506:	4618      	mov	r0, r3
 8010508:	3708      	adds	r7, #8
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}
 801050e:	bf00      	nop
 8010510:	20003144 	.word	0x20003144
 8010514:	40005c00 	.word	0x40005c00

08010518 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b084      	sub	sp, #16
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010520:	2300      	movs	r3, #0
 8010522:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010524:	2300      	movs	r3, #0
 8010526:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801052e:	4618      	mov	r0, r3
 8010530:	f7f8 fb9d 	bl	8008c6e <HAL_PCD_Start>
 8010534:	4603      	mov	r3, r0
 8010536:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010538:	7bfb      	ldrb	r3, [r7, #15]
 801053a:	4618      	mov	r0, r3
 801053c:	f000 f94e 	bl	80107dc <USBD_Get_USB_Status>
 8010540:	4603      	mov	r3, r0
 8010542:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010544:	7bbb      	ldrb	r3, [r7, #14]
}
 8010546:	4618      	mov	r0, r3
 8010548:	3710      	adds	r7, #16
 801054a:	46bd      	mov	sp, r7
 801054c:	bd80      	pop	{r7, pc}

0801054e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801054e:	b580      	push	{r7, lr}
 8010550:	b084      	sub	sp, #16
 8010552:	af00      	add	r7, sp, #0
 8010554:	6078      	str	r0, [r7, #4]
 8010556:	4608      	mov	r0, r1
 8010558:	4611      	mov	r1, r2
 801055a:	461a      	mov	r2, r3
 801055c:	4603      	mov	r3, r0
 801055e:	70fb      	strb	r3, [r7, #3]
 8010560:	460b      	mov	r3, r1
 8010562:	70bb      	strb	r3, [r7, #2]
 8010564:	4613      	mov	r3, r2
 8010566:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010568:	2300      	movs	r3, #0
 801056a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801056c:	2300      	movs	r3, #0
 801056e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8010576:	78bb      	ldrb	r3, [r7, #2]
 8010578:	883a      	ldrh	r2, [r7, #0]
 801057a:	78f9      	ldrb	r1, [r7, #3]
 801057c:	f7f8 fcf2 	bl	8008f64 <HAL_PCD_EP_Open>
 8010580:	4603      	mov	r3, r0
 8010582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010584:	7bfb      	ldrb	r3, [r7, #15]
 8010586:	4618      	mov	r0, r3
 8010588:	f000 f928 	bl	80107dc <USBD_Get_USB_Status>
 801058c:	4603      	mov	r3, r0
 801058e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010590:	7bbb      	ldrb	r3, [r7, #14]
}
 8010592:	4618      	mov	r0, r3
 8010594:	3710      	adds	r7, #16
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}

0801059a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801059a:	b580      	push	{r7, lr}
 801059c:	b084      	sub	sp, #16
 801059e:	af00      	add	r7, sp, #0
 80105a0:	6078      	str	r0, [r7, #4]
 80105a2:	460b      	mov	r3, r1
 80105a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105a6:	2300      	movs	r3, #0
 80105a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105aa:	2300      	movs	r3, #0
 80105ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80105b4:	78fa      	ldrb	r2, [r7, #3]
 80105b6:	4611      	mov	r1, r2
 80105b8:	4618      	mov	r0, r3
 80105ba:	f7f8 fd30 	bl	800901e <HAL_PCD_EP_Close>
 80105be:	4603      	mov	r3, r0
 80105c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105c2:	7bfb      	ldrb	r3, [r7, #15]
 80105c4:	4618      	mov	r0, r3
 80105c6:	f000 f909 	bl	80107dc <USBD_Get_USB_Status>
 80105ca:	4603      	mov	r3, r0
 80105cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80105d0:	4618      	mov	r0, r3
 80105d2:	3710      	adds	r7, #16
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd80      	pop	{r7, pc}

080105d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b084      	sub	sp, #16
 80105dc:	af00      	add	r7, sp, #0
 80105de:	6078      	str	r0, [r7, #4]
 80105e0:	460b      	mov	r3, r1
 80105e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105e4:	2300      	movs	r3, #0
 80105e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105e8:	2300      	movs	r3, #0
 80105ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80105f2:	78fa      	ldrb	r2, [r7, #3]
 80105f4:	4611      	mov	r1, r2
 80105f6:	4618      	mov	r0, r3
 80105f8:	f7f8 fdd8 	bl	80091ac <HAL_PCD_EP_SetStall>
 80105fc:	4603      	mov	r3, r0
 80105fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010600:	7bfb      	ldrb	r3, [r7, #15]
 8010602:	4618      	mov	r0, r3
 8010604:	f000 f8ea 	bl	80107dc <USBD_Get_USB_Status>
 8010608:	4603      	mov	r3, r0
 801060a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801060c:	7bbb      	ldrb	r3, [r7, #14]
}
 801060e:	4618      	mov	r0, r3
 8010610:	3710      	adds	r7, #16
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}

08010616 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010616:	b580      	push	{r7, lr}
 8010618:	b084      	sub	sp, #16
 801061a:	af00      	add	r7, sp, #0
 801061c:	6078      	str	r0, [r7, #4]
 801061e:	460b      	mov	r3, r1
 8010620:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010622:	2300      	movs	r3, #0
 8010624:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010626:	2300      	movs	r3, #0
 8010628:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010630:	78fa      	ldrb	r2, [r7, #3]
 8010632:	4611      	mov	r1, r2
 8010634:	4618      	mov	r0, r3
 8010636:	f7f8 fe19 	bl	800926c <HAL_PCD_EP_ClrStall>
 801063a:	4603      	mov	r3, r0
 801063c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801063e:	7bfb      	ldrb	r3, [r7, #15]
 8010640:	4618      	mov	r0, r3
 8010642:	f000 f8cb 	bl	80107dc <USBD_Get_USB_Status>
 8010646:	4603      	mov	r3, r0
 8010648:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801064a:	7bbb      	ldrb	r3, [r7, #14]
}
 801064c:	4618      	mov	r0, r3
 801064e:	3710      	adds	r7, #16
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}

08010654 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010654:	b480      	push	{r7}
 8010656:	b085      	sub	sp, #20
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	460b      	mov	r3, r1
 801065e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010666:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010668:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801066c:	2b00      	cmp	r3, #0
 801066e:	da0c      	bge.n	801068a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010670:	78fb      	ldrb	r3, [r7, #3]
 8010672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010676:	68f9      	ldr	r1, [r7, #12]
 8010678:	1c5a      	adds	r2, r3, #1
 801067a:	4613      	mov	r3, r2
 801067c:	009b      	lsls	r3, r3, #2
 801067e:	4413      	add	r3, r2
 8010680:	00db      	lsls	r3, r3, #3
 8010682:	440b      	add	r3, r1
 8010684:	3302      	adds	r3, #2
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	e00b      	b.n	80106a2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801068a:	78fb      	ldrb	r3, [r7, #3]
 801068c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010690:	68f9      	ldr	r1, [r7, #12]
 8010692:	4613      	mov	r3, r2
 8010694:	009b      	lsls	r3, r3, #2
 8010696:	4413      	add	r3, r2
 8010698:	00db      	lsls	r3, r3, #3
 801069a:	440b      	add	r3, r1
 801069c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80106a0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	3714      	adds	r7, #20
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bc80      	pop	{r7}
 80106aa:	4770      	bx	lr

080106ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b084      	sub	sp, #16
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
 80106b4:	460b      	mov	r3, r1
 80106b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106b8:	2300      	movs	r3, #0
 80106ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106bc:	2300      	movs	r3, #0
 80106be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80106c6:	78fa      	ldrb	r2, [r7, #3]
 80106c8:	4611      	mov	r1, r2
 80106ca:	4618      	mov	r0, r3
 80106cc:	f7f8 fc25 	bl	8008f1a <HAL_PCD_SetAddress>
 80106d0:	4603      	mov	r3, r0
 80106d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106d4:	7bfb      	ldrb	r3, [r7, #15]
 80106d6:	4618      	mov	r0, r3
 80106d8:	f000 f880 	bl	80107dc <USBD_Get_USB_Status>
 80106dc:	4603      	mov	r3, r0
 80106de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	3710      	adds	r7, #16
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}

080106ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80106ea:	b580      	push	{r7, lr}
 80106ec:	b086      	sub	sp, #24
 80106ee:	af00      	add	r7, sp, #0
 80106f0:	60f8      	str	r0, [r7, #12]
 80106f2:	607a      	str	r2, [r7, #4]
 80106f4:	461a      	mov	r2, r3
 80106f6:	460b      	mov	r3, r1
 80106f8:	72fb      	strb	r3, [r7, #11]
 80106fa:	4613      	mov	r3, r2
 80106fc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106fe:	2300      	movs	r3, #0
 8010700:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010702:	2300      	movs	r3, #0
 8010704:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801070c:	893b      	ldrh	r3, [r7, #8]
 801070e:	7af9      	ldrb	r1, [r7, #11]
 8010710:	687a      	ldr	r2, [r7, #4]
 8010712:	f7f8 fd14 	bl	800913e <HAL_PCD_EP_Transmit>
 8010716:	4603      	mov	r3, r0
 8010718:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801071a:	7dfb      	ldrb	r3, [r7, #23]
 801071c:	4618      	mov	r0, r3
 801071e:	f000 f85d 	bl	80107dc <USBD_Get_USB_Status>
 8010722:	4603      	mov	r3, r0
 8010724:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010726:	7dbb      	ldrb	r3, [r7, #22]
}
 8010728:	4618      	mov	r0, r3
 801072a:	3718      	adds	r7, #24
 801072c:	46bd      	mov	sp, r7
 801072e:	bd80      	pop	{r7, pc}

08010730 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b086      	sub	sp, #24
 8010734:	af00      	add	r7, sp, #0
 8010736:	60f8      	str	r0, [r7, #12]
 8010738:	607a      	str	r2, [r7, #4]
 801073a:	461a      	mov	r2, r3
 801073c:	460b      	mov	r3, r1
 801073e:	72fb      	strb	r3, [r7, #11]
 8010740:	4613      	mov	r3, r2
 8010742:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010744:	2300      	movs	r3, #0
 8010746:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010748:	2300      	movs	r3, #0
 801074a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8010752:	893b      	ldrh	r3, [r7, #8]
 8010754:	7af9      	ldrb	r1, [r7, #11]
 8010756:	687a      	ldr	r2, [r7, #4]
 8010758:	f7f8 fca9 	bl	80090ae <HAL_PCD_EP_Receive>
 801075c:	4603      	mov	r3, r0
 801075e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010760:	7dfb      	ldrb	r3, [r7, #23]
 8010762:	4618      	mov	r0, r3
 8010764:	f000 f83a 	bl	80107dc <USBD_Get_USB_Status>
 8010768:	4603      	mov	r3, r0
 801076a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801076c:	7dbb      	ldrb	r3, [r7, #22]
}
 801076e:	4618      	mov	r0, r3
 8010770:	3718      	adds	r7, #24
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}

08010776 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010776:	b580      	push	{r7, lr}
 8010778:	b082      	sub	sp, #8
 801077a:	af00      	add	r7, sp, #0
 801077c:	6078      	str	r0, [r7, #4]
 801077e:	460b      	mov	r3, r1
 8010780:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010788:	78fa      	ldrb	r2, [r7, #3]
 801078a:	4611      	mov	r1, r2
 801078c:	4618      	mov	r0, r3
 801078e:	f7f8 fcbf 	bl	8009110 <HAL_PCD_EP_GetRxCount>
 8010792:	4603      	mov	r3, r0
}
 8010794:	4618      	mov	r0, r3
 8010796:	3708      	adds	r7, #8
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}

0801079c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801079c:	b480      	push	{r7}
 801079e:	b083      	sub	sp, #12
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80107a4:	4b02      	ldr	r3, [pc, #8]	; (80107b0 <USBD_static_malloc+0x14>)
}
 80107a6:	4618      	mov	r0, r3
 80107a8:	370c      	adds	r7, #12
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bc80      	pop	{r7}
 80107ae:	4770      	bx	lr
 80107b0:	20003434 	.word	0x20003434

080107b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80107b4:	b480      	push	{r7}
 80107b6:	b083      	sub	sp, #12
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]

}
 80107bc:	bf00      	nop
 80107be:	370c      	adds	r7, #12
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bc80      	pop	{r7}
 80107c4:	4770      	bx	lr

080107c6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107c6:	b480      	push	{r7}
 80107c8:	b083      	sub	sp, #12
 80107ca:	af00      	add	r7, sp, #0
 80107cc:	6078      	str	r0, [r7, #4]
 80107ce:	460b      	mov	r3, r1
 80107d0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80107d2:	bf00      	nop
 80107d4:	370c      	adds	r7, #12
 80107d6:	46bd      	mov	sp, r7
 80107d8:	bc80      	pop	{r7}
 80107da:	4770      	bx	lr

080107dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80107dc:	b480      	push	{r7}
 80107de:	b085      	sub	sp, #20
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	4603      	mov	r3, r0
 80107e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107e6:	2300      	movs	r3, #0
 80107e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80107ea:	79fb      	ldrb	r3, [r7, #7]
 80107ec:	2b03      	cmp	r3, #3
 80107ee:	d817      	bhi.n	8010820 <USBD_Get_USB_Status+0x44>
 80107f0:	a201      	add	r2, pc, #4	; (adr r2, 80107f8 <USBD_Get_USB_Status+0x1c>)
 80107f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107f6:	bf00      	nop
 80107f8:	08010809 	.word	0x08010809
 80107fc:	0801080f 	.word	0x0801080f
 8010800:	08010815 	.word	0x08010815
 8010804:	0801081b 	.word	0x0801081b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010808:	2300      	movs	r3, #0
 801080a:	73fb      	strb	r3, [r7, #15]
    break;
 801080c:	e00b      	b.n	8010826 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801080e:	2302      	movs	r3, #2
 8010810:	73fb      	strb	r3, [r7, #15]
    break;
 8010812:	e008      	b.n	8010826 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010814:	2301      	movs	r3, #1
 8010816:	73fb      	strb	r3, [r7, #15]
    break;
 8010818:	e005      	b.n	8010826 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801081a:	2302      	movs	r3, #2
 801081c:	73fb      	strb	r3, [r7, #15]
    break;
 801081e:	e002      	b.n	8010826 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010820:	2302      	movs	r3, #2
 8010822:	73fb      	strb	r3, [r7, #15]
    break;
 8010824:	bf00      	nop
  }
  return usb_status;
 8010826:	7bfb      	ldrb	r3, [r7, #15]
}
 8010828:	4618      	mov	r0, r3
 801082a:	3714      	adds	r7, #20
 801082c:	46bd      	mov	sp, r7
 801082e:	bc80      	pop	{r7}
 8010830:	4770      	bx	lr
 8010832:	bf00      	nop

08010834 <atoi>:
 8010834:	220a      	movs	r2, #10
 8010836:	2100      	movs	r1, #0
 8010838:	f000 bd8a 	b.w	8011350 <strtol>

0801083c <__errno>:
 801083c:	4b01      	ldr	r3, [pc, #4]	; (8010844 <__errno+0x8>)
 801083e:	6818      	ldr	r0, [r3, #0]
 8010840:	4770      	bx	lr
 8010842:	bf00      	nop
 8010844:	20000670 	.word	0x20000670

08010848 <__libc_init_array>:
 8010848:	b570      	push	{r4, r5, r6, lr}
 801084a:	2600      	movs	r6, #0
 801084c:	4d0c      	ldr	r5, [pc, #48]	; (8010880 <__libc_init_array+0x38>)
 801084e:	4c0d      	ldr	r4, [pc, #52]	; (8010884 <__libc_init_array+0x3c>)
 8010850:	1b64      	subs	r4, r4, r5
 8010852:	10a4      	asrs	r4, r4, #2
 8010854:	42a6      	cmp	r6, r4
 8010856:	d109      	bne.n	801086c <__libc_init_array+0x24>
 8010858:	f002 ffdc 	bl	8013814 <_init>
 801085c:	2600      	movs	r6, #0
 801085e:	4d0a      	ldr	r5, [pc, #40]	; (8010888 <__libc_init_array+0x40>)
 8010860:	4c0a      	ldr	r4, [pc, #40]	; (801088c <__libc_init_array+0x44>)
 8010862:	1b64      	subs	r4, r4, r5
 8010864:	10a4      	asrs	r4, r4, #2
 8010866:	42a6      	cmp	r6, r4
 8010868:	d105      	bne.n	8010876 <__libc_init_array+0x2e>
 801086a:	bd70      	pop	{r4, r5, r6, pc}
 801086c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010870:	4798      	blx	r3
 8010872:	3601      	adds	r6, #1
 8010874:	e7ee      	b.n	8010854 <__libc_init_array+0xc>
 8010876:	f855 3b04 	ldr.w	r3, [r5], #4
 801087a:	4798      	blx	r3
 801087c:	3601      	adds	r6, #1
 801087e:	e7f2      	b.n	8010866 <__libc_init_array+0x1e>
 8010880:	080140a4 	.word	0x080140a4
 8010884:	080140a4 	.word	0x080140a4
 8010888:	080140a4 	.word	0x080140a4
 801088c:	080140a8 	.word	0x080140a8

08010890 <memset>:
 8010890:	4603      	mov	r3, r0
 8010892:	4402      	add	r2, r0
 8010894:	4293      	cmp	r3, r2
 8010896:	d100      	bne.n	801089a <memset+0xa>
 8010898:	4770      	bx	lr
 801089a:	f803 1b01 	strb.w	r1, [r3], #1
 801089e:	e7f9      	b.n	8010894 <memset+0x4>

080108a0 <__cvt>:
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108a6:	461f      	mov	r7, r3
 80108a8:	bfbb      	ittet	lt
 80108aa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80108ae:	461f      	movlt	r7, r3
 80108b0:	2300      	movge	r3, #0
 80108b2:	232d      	movlt	r3, #45	; 0x2d
 80108b4:	b088      	sub	sp, #32
 80108b6:	4614      	mov	r4, r2
 80108b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80108ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80108bc:	7013      	strb	r3, [r2, #0]
 80108be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80108c0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80108c4:	f023 0820 	bic.w	r8, r3, #32
 80108c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80108cc:	d005      	beq.n	80108da <__cvt+0x3a>
 80108ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80108d2:	d100      	bne.n	80108d6 <__cvt+0x36>
 80108d4:	3501      	adds	r5, #1
 80108d6:	2302      	movs	r3, #2
 80108d8:	e000      	b.n	80108dc <__cvt+0x3c>
 80108da:	2303      	movs	r3, #3
 80108dc:	aa07      	add	r2, sp, #28
 80108de:	9204      	str	r2, [sp, #16]
 80108e0:	aa06      	add	r2, sp, #24
 80108e2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80108e6:	e9cd 3500 	strd	r3, r5, [sp]
 80108ea:	4622      	mov	r2, r4
 80108ec:	463b      	mov	r3, r7
 80108ee:	f000 fde3 	bl	80114b8 <_dtoa_r>
 80108f2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80108f6:	4606      	mov	r6, r0
 80108f8:	d102      	bne.n	8010900 <__cvt+0x60>
 80108fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80108fc:	07db      	lsls	r3, r3, #31
 80108fe:	d522      	bpl.n	8010946 <__cvt+0xa6>
 8010900:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010904:	eb06 0905 	add.w	r9, r6, r5
 8010908:	d110      	bne.n	801092c <__cvt+0x8c>
 801090a:	7833      	ldrb	r3, [r6, #0]
 801090c:	2b30      	cmp	r3, #48	; 0x30
 801090e:	d10a      	bne.n	8010926 <__cvt+0x86>
 8010910:	2200      	movs	r2, #0
 8010912:	2300      	movs	r3, #0
 8010914:	4620      	mov	r0, r4
 8010916:	4639      	mov	r1, r7
 8010918:	f7f0 f8b2 	bl	8000a80 <__aeabi_dcmpeq>
 801091c:	b918      	cbnz	r0, 8010926 <__cvt+0x86>
 801091e:	f1c5 0501 	rsb	r5, r5, #1
 8010922:	f8ca 5000 	str.w	r5, [sl]
 8010926:	f8da 3000 	ldr.w	r3, [sl]
 801092a:	4499      	add	r9, r3
 801092c:	2200      	movs	r2, #0
 801092e:	2300      	movs	r3, #0
 8010930:	4620      	mov	r0, r4
 8010932:	4639      	mov	r1, r7
 8010934:	f7f0 f8a4 	bl	8000a80 <__aeabi_dcmpeq>
 8010938:	b108      	cbz	r0, 801093e <__cvt+0x9e>
 801093a:	f8cd 901c 	str.w	r9, [sp, #28]
 801093e:	2230      	movs	r2, #48	; 0x30
 8010940:	9b07      	ldr	r3, [sp, #28]
 8010942:	454b      	cmp	r3, r9
 8010944:	d307      	bcc.n	8010956 <__cvt+0xb6>
 8010946:	4630      	mov	r0, r6
 8010948:	9b07      	ldr	r3, [sp, #28]
 801094a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801094c:	1b9b      	subs	r3, r3, r6
 801094e:	6013      	str	r3, [r2, #0]
 8010950:	b008      	add	sp, #32
 8010952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010956:	1c59      	adds	r1, r3, #1
 8010958:	9107      	str	r1, [sp, #28]
 801095a:	701a      	strb	r2, [r3, #0]
 801095c:	e7f0      	b.n	8010940 <__cvt+0xa0>

0801095e <__exponent>:
 801095e:	4603      	mov	r3, r0
 8010960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010962:	2900      	cmp	r1, #0
 8010964:	f803 2b02 	strb.w	r2, [r3], #2
 8010968:	bfb6      	itet	lt
 801096a:	222d      	movlt	r2, #45	; 0x2d
 801096c:	222b      	movge	r2, #43	; 0x2b
 801096e:	4249      	neglt	r1, r1
 8010970:	2909      	cmp	r1, #9
 8010972:	7042      	strb	r2, [r0, #1]
 8010974:	dd2b      	ble.n	80109ce <__exponent+0x70>
 8010976:	f10d 0407 	add.w	r4, sp, #7
 801097a:	46a4      	mov	ip, r4
 801097c:	270a      	movs	r7, #10
 801097e:	fb91 f6f7 	sdiv	r6, r1, r7
 8010982:	460a      	mov	r2, r1
 8010984:	46a6      	mov	lr, r4
 8010986:	fb07 1516 	mls	r5, r7, r6, r1
 801098a:	2a63      	cmp	r2, #99	; 0x63
 801098c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8010990:	4631      	mov	r1, r6
 8010992:	f104 34ff 	add.w	r4, r4, #4294967295
 8010996:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801099a:	dcf0      	bgt.n	801097e <__exponent+0x20>
 801099c:	3130      	adds	r1, #48	; 0x30
 801099e:	f1ae 0502 	sub.w	r5, lr, #2
 80109a2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80109a6:	4629      	mov	r1, r5
 80109a8:	1c44      	adds	r4, r0, #1
 80109aa:	4561      	cmp	r1, ip
 80109ac:	d30a      	bcc.n	80109c4 <__exponent+0x66>
 80109ae:	f10d 0209 	add.w	r2, sp, #9
 80109b2:	eba2 020e 	sub.w	r2, r2, lr
 80109b6:	4565      	cmp	r5, ip
 80109b8:	bf88      	it	hi
 80109ba:	2200      	movhi	r2, #0
 80109bc:	4413      	add	r3, r2
 80109be:	1a18      	subs	r0, r3, r0
 80109c0:	b003      	add	sp, #12
 80109c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80109c8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80109cc:	e7ed      	b.n	80109aa <__exponent+0x4c>
 80109ce:	2330      	movs	r3, #48	; 0x30
 80109d0:	3130      	adds	r1, #48	; 0x30
 80109d2:	7083      	strb	r3, [r0, #2]
 80109d4:	70c1      	strb	r1, [r0, #3]
 80109d6:	1d03      	adds	r3, r0, #4
 80109d8:	e7f1      	b.n	80109be <__exponent+0x60>
	...

080109dc <_printf_float>:
 80109dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109e0:	b091      	sub	sp, #68	; 0x44
 80109e2:	460c      	mov	r4, r1
 80109e4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80109e8:	4616      	mov	r6, r2
 80109ea:	461f      	mov	r7, r3
 80109ec:	4605      	mov	r5, r0
 80109ee:	f001 fb63 	bl	80120b8 <_localeconv_r>
 80109f2:	6803      	ldr	r3, [r0, #0]
 80109f4:	4618      	mov	r0, r3
 80109f6:	9309      	str	r3, [sp, #36]	; 0x24
 80109f8:	f7ef fc16 	bl	8000228 <strlen>
 80109fc:	2300      	movs	r3, #0
 80109fe:	930e      	str	r3, [sp, #56]	; 0x38
 8010a00:	f8d8 3000 	ldr.w	r3, [r8]
 8010a04:	900a      	str	r0, [sp, #40]	; 0x28
 8010a06:	3307      	adds	r3, #7
 8010a08:	f023 0307 	bic.w	r3, r3, #7
 8010a0c:	f103 0208 	add.w	r2, r3, #8
 8010a10:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010a14:	f8d4 b000 	ldr.w	fp, [r4]
 8010a18:	f8c8 2000 	str.w	r2, [r8]
 8010a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a20:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010a24:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8010a28:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8010a2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8010a32:	4640      	mov	r0, r8
 8010a34:	4b9c      	ldr	r3, [pc, #624]	; (8010ca8 <_printf_float+0x2cc>)
 8010a36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010a38:	f7f0 f854 	bl	8000ae4 <__aeabi_dcmpun>
 8010a3c:	bb70      	cbnz	r0, 8010a9c <_printf_float+0xc0>
 8010a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8010a42:	4640      	mov	r0, r8
 8010a44:	4b98      	ldr	r3, [pc, #608]	; (8010ca8 <_printf_float+0x2cc>)
 8010a46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010a48:	f7f0 f82e 	bl	8000aa8 <__aeabi_dcmple>
 8010a4c:	bb30      	cbnz	r0, 8010a9c <_printf_float+0xc0>
 8010a4e:	2200      	movs	r2, #0
 8010a50:	2300      	movs	r3, #0
 8010a52:	4640      	mov	r0, r8
 8010a54:	4651      	mov	r1, sl
 8010a56:	f7f0 f81d 	bl	8000a94 <__aeabi_dcmplt>
 8010a5a:	b110      	cbz	r0, 8010a62 <_printf_float+0x86>
 8010a5c:	232d      	movs	r3, #45	; 0x2d
 8010a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a62:	4b92      	ldr	r3, [pc, #584]	; (8010cac <_printf_float+0x2d0>)
 8010a64:	4892      	ldr	r0, [pc, #584]	; (8010cb0 <_printf_float+0x2d4>)
 8010a66:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010a6a:	bf94      	ite	ls
 8010a6c:	4698      	movls	r8, r3
 8010a6e:	4680      	movhi	r8, r0
 8010a70:	2303      	movs	r3, #3
 8010a72:	f04f 0a00 	mov.w	sl, #0
 8010a76:	6123      	str	r3, [r4, #16]
 8010a78:	f02b 0304 	bic.w	r3, fp, #4
 8010a7c:	6023      	str	r3, [r4, #0]
 8010a7e:	4633      	mov	r3, r6
 8010a80:	4621      	mov	r1, r4
 8010a82:	4628      	mov	r0, r5
 8010a84:	9700      	str	r7, [sp, #0]
 8010a86:	aa0f      	add	r2, sp, #60	; 0x3c
 8010a88:	f000 f9d4 	bl	8010e34 <_printf_common>
 8010a8c:	3001      	adds	r0, #1
 8010a8e:	f040 8090 	bne.w	8010bb2 <_printf_float+0x1d6>
 8010a92:	f04f 30ff 	mov.w	r0, #4294967295
 8010a96:	b011      	add	sp, #68	; 0x44
 8010a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a9c:	4642      	mov	r2, r8
 8010a9e:	4653      	mov	r3, sl
 8010aa0:	4640      	mov	r0, r8
 8010aa2:	4651      	mov	r1, sl
 8010aa4:	f7f0 f81e 	bl	8000ae4 <__aeabi_dcmpun>
 8010aa8:	b148      	cbz	r0, 8010abe <_printf_float+0xe2>
 8010aaa:	f1ba 0f00 	cmp.w	sl, #0
 8010aae:	bfb8      	it	lt
 8010ab0:	232d      	movlt	r3, #45	; 0x2d
 8010ab2:	4880      	ldr	r0, [pc, #512]	; (8010cb4 <_printf_float+0x2d8>)
 8010ab4:	bfb8      	it	lt
 8010ab6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8010aba:	4b7f      	ldr	r3, [pc, #508]	; (8010cb8 <_printf_float+0x2dc>)
 8010abc:	e7d3      	b.n	8010a66 <_printf_float+0x8a>
 8010abe:	6863      	ldr	r3, [r4, #4]
 8010ac0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8010ac4:	1c5a      	adds	r2, r3, #1
 8010ac6:	d142      	bne.n	8010b4e <_printf_float+0x172>
 8010ac8:	2306      	movs	r3, #6
 8010aca:	6063      	str	r3, [r4, #4]
 8010acc:	2200      	movs	r2, #0
 8010ace:	9206      	str	r2, [sp, #24]
 8010ad0:	aa0e      	add	r2, sp, #56	; 0x38
 8010ad2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8010ad6:	aa0d      	add	r2, sp, #52	; 0x34
 8010ad8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8010adc:	9203      	str	r2, [sp, #12]
 8010ade:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8010ae2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010ae6:	6023      	str	r3, [r4, #0]
 8010ae8:	6863      	ldr	r3, [r4, #4]
 8010aea:	4642      	mov	r2, r8
 8010aec:	9300      	str	r3, [sp, #0]
 8010aee:	4628      	mov	r0, r5
 8010af0:	4653      	mov	r3, sl
 8010af2:	910b      	str	r1, [sp, #44]	; 0x2c
 8010af4:	f7ff fed4 	bl	80108a0 <__cvt>
 8010af8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010afa:	4680      	mov	r8, r0
 8010afc:	2947      	cmp	r1, #71	; 0x47
 8010afe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010b00:	d108      	bne.n	8010b14 <_printf_float+0x138>
 8010b02:	1cc8      	adds	r0, r1, #3
 8010b04:	db02      	blt.n	8010b0c <_printf_float+0x130>
 8010b06:	6863      	ldr	r3, [r4, #4]
 8010b08:	4299      	cmp	r1, r3
 8010b0a:	dd40      	ble.n	8010b8e <_printf_float+0x1b2>
 8010b0c:	f1a9 0902 	sub.w	r9, r9, #2
 8010b10:	fa5f f989 	uxtb.w	r9, r9
 8010b14:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010b18:	d81f      	bhi.n	8010b5a <_printf_float+0x17e>
 8010b1a:	464a      	mov	r2, r9
 8010b1c:	3901      	subs	r1, #1
 8010b1e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010b22:	910d      	str	r1, [sp, #52]	; 0x34
 8010b24:	f7ff ff1b 	bl	801095e <__exponent>
 8010b28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010b2a:	4682      	mov	sl, r0
 8010b2c:	1813      	adds	r3, r2, r0
 8010b2e:	2a01      	cmp	r2, #1
 8010b30:	6123      	str	r3, [r4, #16]
 8010b32:	dc02      	bgt.n	8010b3a <_printf_float+0x15e>
 8010b34:	6822      	ldr	r2, [r4, #0]
 8010b36:	07d2      	lsls	r2, r2, #31
 8010b38:	d501      	bpl.n	8010b3e <_printf_float+0x162>
 8010b3a:	3301      	adds	r3, #1
 8010b3c:	6123      	str	r3, [r4, #16]
 8010b3e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d09b      	beq.n	8010a7e <_printf_float+0xa2>
 8010b46:	232d      	movs	r3, #45	; 0x2d
 8010b48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010b4c:	e797      	b.n	8010a7e <_printf_float+0xa2>
 8010b4e:	2947      	cmp	r1, #71	; 0x47
 8010b50:	d1bc      	bne.n	8010acc <_printf_float+0xf0>
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d1ba      	bne.n	8010acc <_printf_float+0xf0>
 8010b56:	2301      	movs	r3, #1
 8010b58:	e7b7      	b.n	8010aca <_printf_float+0xee>
 8010b5a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010b5e:	d118      	bne.n	8010b92 <_printf_float+0x1b6>
 8010b60:	2900      	cmp	r1, #0
 8010b62:	6863      	ldr	r3, [r4, #4]
 8010b64:	dd0b      	ble.n	8010b7e <_printf_float+0x1a2>
 8010b66:	6121      	str	r1, [r4, #16]
 8010b68:	b913      	cbnz	r3, 8010b70 <_printf_float+0x194>
 8010b6a:	6822      	ldr	r2, [r4, #0]
 8010b6c:	07d0      	lsls	r0, r2, #31
 8010b6e:	d502      	bpl.n	8010b76 <_printf_float+0x19a>
 8010b70:	3301      	adds	r3, #1
 8010b72:	440b      	add	r3, r1
 8010b74:	6123      	str	r3, [r4, #16]
 8010b76:	f04f 0a00 	mov.w	sl, #0
 8010b7a:	65a1      	str	r1, [r4, #88]	; 0x58
 8010b7c:	e7df      	b.n	8010b3e <_printf_float+0x162>
 8010b7e:	b913      	cbnz	r3, 8010b86 <_printf_float+0x1aa>
 8010b80:	6822      	ldr	r2, [r4, #0]
 8010b82:	07d2      	lsls	r2, r2, #31
 8010b84:	d501      	bpl.n	8010b8a <_printf_float+0x1ae>
 8010b86:	3302      	adds	r3, #2
 8010b88:	e7f4      	b.n	8010b74 <_printf_float+0x198>
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	e7f2      	b.n	8010b74 <_printf_float+0x198>
 8010b8e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010b92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b94:	4299      	cmp	r1, r3
 8010b96:	db05      	blt.n	8010ba4 <_printf_float+0x1c8>
 8010b98:	6823      	ldr	r3, [r4, #0]
 8010b9a:	6121      	str	r1, [r4, #16]
 8010b9c:	07d8      	lsls	r0, r3, #31
 8010b9e:	d5ea      	bpl.n	8010b76 <_printf_float+0x19a>
 8010ba0:	1c4b      	adds	r3, r1, #1
 8010ba2:	e7e7      	b.n	8010b74 <_printf_float+0x198>
 8010ba4:	2900      	cmp	r1, #0
 8010ba6:	bfcc      	ite	gt
 8010ba8:	2201      	movgt	r2, #1
 8010baa:	f1c1 0202 	rsble	r2, r1, #2
 8010bae:	4413      	add	r3, r2
 8010bb0:	e7e0      	b.n	8010b74 <_printf_float+0x198>
 8010bb2:	6823      	ldr	r3, [r4, #0]
 8010bb4:	055a      	lsls	r2, r3, #21
 8010bb6:	d407      	bmi.n	8010bc8 <_printf_float+0x1ec>
 8010bb8:	6923      	ldr	r3, [r4, #16]
 8010bba:	4642      	mov	r2, r8
 8010bbc:	4631      	mov	r1, r6
 8010bbe:	4628      	mov	r0, r5
 8010bc0:	47b8      	blx	r7
 8010bc2:	3001      	adds	r0, #1
 8010bc4:	d12b      	bne.n	8010c1e <_printf_float+0x242>
 8010bc6:	e764      	b.n	8010a92 <_printf_float+0xb6>
 8010bc8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010bcc:	f240 80dd 	bls.w	8010d8a <_printf_float+0x3ae>
 8010bd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	f7ef ff52 	bl	8000a80 <__aeabi_dcmpeq>
 8010bdc:	2800      	cmp	r0, #0
 8010bde:	d033      	beq.n	8010c48 <_printf_float+0x26c>
 8010be0:	2301      	movs	r3, #1
 8010be2:	4631      	mov	r1, r6
 8010be4:	4628      	mov	r0, r5
 8010be6:	4a35      	ldr	r2, [pc, #212]	; (8010cbc <_printf_float+0x2e0>)
 8010be8:	47b8      	blx	r7
 8010bea:	3001      	adds	r0, #1
 8010bec:	f43f af51 	beq.w	8010a92 <_printf_float+0xb6>
 8010bf0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	db02      	blt.n	8010bfe <_printf_float+0x222>
 8010bf8:	6823      	ldr	r3, [r4, #0]
 8010bfa:	07d8      	lsls	r0, r3, #31
 8010bfc:	d50f      	bpl.n	8010c1e <_printf_float+0x242>
 8010bfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010c02:	4631      	mov	r1, r6
 8010c04:	4628      	mov	r0, r5
 8010c06:	47b8      	blx	r7
 8010c08:	3001      	adds	r0, #1
 8010c0a:	f43f af42 	beq.w	8010a92 <_printf_float+0xb6>
 8010c0e:	f04f 0800 	mov.w	r8, #0
 8010c12:	f104 091a 	add.w	r9, r4, #26
 8010c16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c18:	3b01      	subs	r3, #1
 8010c1a:	4543      	cmp	r3, r8
 8010c1c:	dc09      	bgt.n	8010c32 <_printf_float+0x256>
 8010c1e:	6823      	ldr	r3, [r4, #0]
 8010c20:	079b      	lsls	r3, r3, #30
 8010c22:	f100 8102 	bmi.w	8010e2a <_printf_float+0x44e>
 8010c26:	68e0      	ldr	r0, [r4, #12]
 8010c28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010c2a:	4298      	cmp	r0, r3
 8010c2c:	bfb8      	it	lt
 8010c2e:	4618      	movlt	r0, r3
 8010c30:	e731      	b.n	8010a96 <_printf_float+0xba>
 8010c32:	2301      	movs	r3, #1
 8010c34:	464a      	mov	r2, r9
 8010c36:	4631      	mov	r1, r6
 8010c38:	4628      	mov	r0, r5
 8010c3a:	47b8      	blx	r7
 8010c3c:	3001      	adds	r0, #1
 8010c3e:	f43f af28 	beq.w	8010a92 <_printf_float+0xb6>
 8010c42:	f108 0801 	add.w	r8, r8, #1
 8010c46:	e7e6      	b.n	8010c16 <_printf_float+0x23a>
 8010c48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	dc38      	bgt.n	8010cc0 <_printf_float+0x2e4>
 8010c4e:	2301      	movs	r3, #1
 8010c50:	4631      	mov	r1, r6
 8010c52:	4628      	mov	r0, r5
 8010c54:	4a19      	ldr	r2, [pc, #100]	; (8010cbc <_printf_float+0x2e0>)
 8010c56:	47b8      	blx	r7
 8010c58:	3001      	adds	r0, #1
 8010c5a:	f43f af1a 	beq.w	8010a92 <_printf_float+0xb6>
 8010c5e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8010c62:	4313      	orrs	r3, r2
 8010c64:	d102      	bne.n	8010c6c <_printf_float+0x290>
 8010c66:	6823      	ldr	r3, [r4, #0]
 8010c68:	07d9      	lsls	r1, r3, #31
 8010c6a:	d5d8      	bpl.n	8010c1e <_printf_float+0x242>
 8010c6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010c70:	4631      	mov	r1, r6
 8010c72:	4628      	mov	r0, r5
 8010c74:	47b8      	blx	r7
 8010c76:	3001      	adds	r0, #1
 8010c78:	f43f af0b 	beq.w	8010a92 <_printf_float+0xb6>
 8010c7c:	f04f 0900 	mov.w	r9, #0
 8010c80:	f104 0a1a 	add.w	sl, r4, #26
 8010c84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c86:	425b      	negs	r3, r3
 8010c88:	454b      	cmp	r3, r9
 8010c8a:	dc01      	bgt.n	8010c90 <_printf_float+0x2b4>
 8010c8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c8e:	e794      	b.n	8010bba <_printf_float+0x1de>
 8010c90:	2301      	movs	r3, #1
 8010c92:	4652      	mov	r2, sl
 8010c94:	4631      	mov	r1, r6
 8010c96:	4628      	mov	r0, r5
 8010c98:	47b8      	blx	r7
 8010c9a:	3001      	adds	r0, #1
 8010c9c:	f43f aef9 	beq.w	8010a92 <_printf_float+0xb6>
 8010ca0:	f109 0901 	add.w	r9, r9, #1
 8010ca4:	e7ee      	b.n	8010c84 <_printf_float+0x2a8>
 8010ca6:	bf00      	nop
 8010ca8:	7fefffff 	.word	0x7fefffff
 8010cac:	08013c6c 	.word	0x08013c6c
 8010cb0:	08013c70 	.word	0x08013c70
 8010cb4:	08013c78 	.word	0x08013c78
 8010cb8:	08013c74 	.word	0x08013c74
 8010cbc:	08013c7c 	.word	0x08013c7c
 8010cc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010cc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010cc4:	429a      	cmp	r2, r3
 8010cc6:	bfa8      	it	ge
 8010cc8:	461a      	movge	r2, r3
 8010cca:	2a00      	cmp	r2, #0
 8010ccc:	4691      	mov	r9, r2
 8010cce:	dc37      	bgt.n	8010d40 <_printf_float+0x364>
 8010cd0:	f04f 0b00 	mov.w	fp, #0
 8010cd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010cd8:	f104 021a 	add.w	r2, r4, #26
 8010cdc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010ce0:	ebaa 0309 	sub.w	r3, sl, r9
 8010ce4:	455b      	cmp	r3, fp
 8010ce6:	dc33      	bgt.n	8010d50 <_printf_float+0x374>
 8010ce8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8010cec:	429a      	cmp	r2, r3
 8010cee:	db3b      	blt.n	8010d68 <_printf_float+0x38c>
 8010cf0:	6823      	ldr	r3, [r4, #0]
 8010cf2:	07da      	lsls	r2, r3, #31
 8010cf4:	d438      	bmi.n	8010d68 <_printf_float+0x38c>
 8010cf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010cf8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010cfa:	eba3 020a 	sub.w	r2, r3, sl
 8010cfe:	eba3 0901 	sub.w	r9, r3, r1
 8010d02:	4591      	cmp	r9, r2
 8010d04:	bfa8      	it	ge
 8010d06:	4691      	movge	r9, r2
 8010d08:	f1b9 0f00 	cmp.w	r9, #0
 8010d0c:	dc34      	bgt.n	8010d78 <_printf_float+0x39c>
 8010d0e:	f04f 0800 	mov.w	r8, #0
 8010d12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010d16:	f104 0a1a 	add.w	sl, r4, #26
 8010d1a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8010d1e:	1a9b      	subs	r3, r3, r2
 8010d20:	eba3 0309 	sub.w	r3, r3, r9
 8010d24:	4543      	cmp	r3, r8
 8010d26:	f77f af7a 	ble.w	8010c1e <_printf_float+0x242>
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	4652      	mov	r2, sl
 8010d2e:	4631      	mov	r1, r6
 8010d30:	4628      	mov	r0, r5
 8010d32:	47b8      	blx	r7
 8010d34:	3001      	adds	r0, #1
 8010d36:	f43f aeac 	beq.w	8010a92 <_printf_float+0xb6>
 8010d3a:	f108 0801 	add.w	r8, r8, #1
 8010d3e:	e7ec      	b.n	8010d1a <_printf_float+0x33e>
 8010d40:	4613      	mov	r3, r2
 8010d42:	4631      	mov	r1, r6
 8010d44:	4642      	mov	r2, r8
 8010d46:	4628      	mov	r0, r5
 8010d48:	47b8      	blx	r7
 8010d4a:	3001      	adds	r0, #1
 8010d4c:	d1c0      	bne.n	8010cd0 <_printf_float+0x2f4>
 8010d4e:	e6a0      	b.n	8010a92 <_printf_float+0xb6>
 8010d50:	2301      	movs	r3, #1
 8010d52:	4631      	mov	r1, r6
 8010d54:	4628      	mov	r0, r5
 8010d56:	920b      	str	r2, [sp, #44]	; 0x2c
 8010d58:	47b8      	blx	r7
 8010d5a:	3001      	adds	r0, #1
 8010d5c:	f43f ae99 	beq.w	8010a92 <_printf_float+0xb6>
 8010d60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010d62:	f10b 0b01 	add.w	fp, fp, #1
 8010d66:	e7b9      	b.n	8010cdc <_printf_float+0x300>
 8010d68:	4631      	mov	r1, r6
 8010d6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010d6e:	4628      	mov	r0, r5
 8010d70:	47b8      	blx	r7
 8010d72:	3001      	adds	r0, #1
 8010d74:	d1bf      	bne.n	8010cf6 <_printf_float+0x31a>
 8010d76:	e68c      	b.n	8010a92 <_printf_float+0xb6>
 8010d78:	464b      	mov	r3, r9
 8010d7a:	4631      	mov	r1, r6
 8010d7c:	4628      	mov	r0, r5
 8010d7e:	eb08 020a 	add.w	r2, r8, sl
 8010d82:	47b8      	blx	r7
 8010d84:	3001      	adds	r0, #1
 8010d86:	d1c2      	bne.n	8010d0e <_printf_float+0x332>
 8010d88:	e683      	b.n	8010a92 <_printf_float+0xb6>
 8010d8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010d8c:	2a01      	cmp	r2, #1
 8010d8e:	dc01      	bgt.n	8010d94 <_printf_float+0x3b8>
 8010d90:	07db      	lsls	r3, r3, #31
 8010d92:	d537      	bpl.n	8010e04 <_printf_float+0x428>
 8010d94:	2301      	movs	r3, #1
 8010d96:	4642      	mov	r2, r8
 8010d98:	4631      	mov	r1, r6
 8010d9a:	4628      	mov	r0, r5
 8010d9c:	47b8      	blx	r7
 8010d9e:	3001      	adds	r0, #1
 8010da0:	f43f ae77 	beq.w	8010a92 <_printf_float+0xb6>
 8010da4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010da8:	4631      	mov	r1, r6
 8010daa:	4628      	mov	r0, r5
 8010dac:	47b8      	blx	r7
 8010dae:	3001      	adds	r0, #1
 8010db0:	f43f ae6f 	beq.w	8010a92 <_printf_float+0xb6>
 8010db4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010db8:	2200      	movs	r2, #0
 8010dba:	2300      	movs	r3, #0
 8010dbc:	f7ef fe60 	bl	8000a80 <__aeabi_dcmpeq>
 8010dc0:	b9d8      	cbnz	r0, 8010dfa <_printf_float+0x41e>
 8010dc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010dc4:	f108 0201 	add.w	r2, r8, #1
 8010dc8:	3b01      	subs	r3, #1
 8010dca:	4631      	mov	r1, r6
 8010dcc:	4628      	mov	r0, r5
 8010dce:	47b8      	blx	r7
 8010dd0:	3001      	adds	r0, #1
 8010dd2:	d10e      	bne.n	8010df2 <_printf_float+0x416>
 8010dd4:	e65d      	b.n	8010a92 <_printf_float+0xb6>
 8010dd6:	2301      	movs	r3, #1
 8010dd8:	464a      	mov	r2, r9
 8010dda:	4631      	mov	r1, r6
 8010ddc:	4628      	mov	r0, r5
 8010dde:	47b8      	blx	r7
 8010de0:	3001      	adds	r0, #1
 8010de2:	f43f ae56 	beq.w	8010a92 <_printf_float+0xb6>
 8010de6:	f108 0801 	add.w	r8, r8, #1
 8010dea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010dec:	3b01      	subs	r3, #1
 8010dee:	4543      	cmp	r3, r8
 8010df0:	dcf1      	bgt.n	8010dd6 <_printf_float+0x3fa>
 8010df2:	4653      	mov	r3, sl
 8010df4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010df8:	e6e0      	b.n	8010bbc <_printf_float+0x1e0>
 8010dfa:	f04f 0800 	mov.w	r8, #0
 8010dfe:	f104 091a 	add.w	r9, r4, #26
 8010e02:	e7f2      	b.n	8010dea <_printf_float+0x40e>
 8010e04:	2301      	movs	r3, #1
 8010e06:	4642      	mov	r2, r8
 8010e08:	e7df      	b.n	8010dca <_printf_float+0x3ee>
 8010e0a:	2301      	movs	r3, #1
 8010e0c:	464a      	mov	r2, r9
 8010e0e:	4631      	mov	r1, r6
 8010e10:	4628      	mov	r0, r5
 8010e12:	47b8      	blx	r7
 8010e14:	3001      	adds	r0, #1
 8010e16:	f43f ae3c 	beq.w	8010a92 <_printf_float+0xb6>
 8010e1a:	f108 0801 	add.w	r8, r8, #1
 8010e1e:	68e3      	ldr	r3, [r4, #12]
 8010e20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010e22:	1a5b      	subs	r3, r3, r1
 8010e24:	4543      	cmp	r3, r8
 8010e26:	dcf0      	bgt.n	8010e0a <_printf_float+0x42e>
 8010e28:	e6fd      	b.n	8010c26 <_printf_float+0x24a>
 8010e2a:	f04f 0800 	mov.w	r8, #0
 8010e2e:	f104 0919 	add.w	r9, r4, #25
 8010e32:	e7f4      	b.n	8010e1e <_printf_float+0x442>

08010e34 <_printf_common>:
 8010e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e38:	4616      	mov	r6, r2
 8010e3a:	4699      	mov	r9, r3
 8010e3c:	688a      	ldr	r2, [r1, #8]
 8010e3e:	690b      	ldr	r3, [r1, #16]
 8010e40:	4607      	mov	r7, r0
 8010e42:	4293      	cmp	r3, r2
 8010e44:	bfb8      	it	lt
 8010e46:	4613      	movlt	r3, r2
 8010e48:	6033      	str	r3, [r6, #0]
 8010e4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010e4e:	460c      	mov	r4, r1
 8010e50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010e54:	b10a      	cbz	r2, 8010e5a <_printf_common+0x26>
 8010e56:	3301      	adds	r3, #1
 8010e58:	6033      	str	r3, [r6, #0]
 8010e5a:	6823      	ldr	r3, [r4, #0]
 8010e5c:	0699      	lsls	r1, r3, #26
 8010e5e:	bf42      	ittt	mi
 8010e60:	6833      	ldrmi	r3, [r6, #0]
 8010e62:	3302      	addmi	r3, #2
 8010e64:	6033      	strmi	r3, [r6, #0]
 8010e66:	6825      	ldr	r5, [r4, #0]
 8010e68:	f015 0506 	ands.w	r5, r5, #6
 8010e6c:	d106      	bne.n	8010e7c <_printf_common+0x48>
 8010e6e:	f104 0a19 	add.w	sl, r4, #25
 8010e72:	68e3      	ldr	r3, [r4, #12]
 8010e74:	6832      	ldr	r2, [r6, #0]
 8010e76:	1a9b      	subs	r3, r3, r2
 8010e78:	42ab      	cmp	r3, r5
 8010e7a:	dc28      	bgt.n	8010ece <_printf_common+0x9a>
 8010e7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010e80:	1e13      	subs	r3, r2, #0
 8010e82:	6822      	ldr	r2, [r4, #0]
 8010e84:	bf18      	it	ne
 8010e86:	2301      	movne	r3, #1
 8010e88:	0692      	lsls	r2, r2, #26
 8010e8a:	d42d      	bmi.n	8010ee8 <_printf_common+0xb4>
 8010e8c:	4649      	mov	r1, r9
 8010e8e:	4638      	mov	r0, r7
 8010e90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010e94:	47c0      	blx	r8
 8010e96:	3001      	adds	r0, #1
 8010e98:	d020      	beq.n	8010edc <_printf_common+0xa8>
 8010e9a:	6823      	ldr	r3, [r4, #0]
 8010e9c:	68e5      	ldr	r5, [r4, #12]
 8010e9e:	f003 0306 	and.w	r3, r3, #6
 8010ea2:	2b04      	cmp	r3, #4
 8010ea4:	bf18      	it	ne
 8010ea6:	2500      	movne	r5, #0
 8010ea8:	6832      	ldr	r2, [r6, #0]
 8010eaa:	f04f 0600 	mov.w	r6, #0
 8010eae:	68a3      	ldr	r3, [r4, #8]
 8010eb0:	bf08      	it	eq
 8010eb2:	1aad      	subeq	r5, r5, r2
 8010eb4:	6922      	ldr	r2, [r4, #16]
 8010eb6:	bf08      	it	eq
 8010eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010ebc:	4293      	cmp	r3, r2
 8010ebe:	bfc4      	itt	gt
 8010ec0:	1a9b      	subgt	r3, r3, r2
 8010ec2:	18ed      	addgt	r5, r5, r3
 8010ec4:	341a      	adds	r4, #26
 8010ec6:	42b5      	cmp	r5, r6
 8010ec8:	d11a      	bne.n	8010f00 <_printf_common+0xcc>
 8010eca:	2000      	movs	r0, #0
 8010ecc:	e008      	b.n	8010ee0 <_printf_common+0xac>
 8010ece:	2301      	movs	r3, #1
 8010ed0:	4652      	mov	r2, sl
 8010ed2:	4649      	mov	r1, r9
 8010ed4:	4638      	mov	r0, r7
 8010ed6:	47c0      	blx	r8
 8010ed8:	3001      	adds	r0, #1
 8010eda:	d103      	bne.n	8010ee4 <_printf_common+0xb0>
 8010edc:	f04f 30ff 	mov.w	r0, #4294967295
 8010ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ee4:	3501      	adds	r5, #1
 8010ee6:	e7c4      	b.n	8010e72 <_printf_common+0x3e>
 8010ee8:	2030      	movs	r0, #48	; 0x30
 8010eea:	18e1      	adds	r1, r4, r3
 8010eec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010ef0:	1c5a      	adds	r2, r3, #1
 8010ef2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010ef6:	4422      	add	r2, r4
 8010ef8:	3302      	adds	r3, #2
 8010efa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010efe:	e7c5      	b.n	8010e8c <_printf_common+0x58>
 8010f00:	2301      	movs	r3, #1
 8010f02:	4622      	mov	r2, r4
 8010f04:	4649      	mov	r1, r9
 8010f06:	4638      	mov	r0, r7
 8010f08:	47c0      	blx	r8
 8010f0a:	3001      	adds	r0, #1
 8010f0c:	d0e6      	beq.n	8010edc <_printf_common+0xa8>
 8010f0e:	3601      	adds	r6, #1
 8010f10:	e7d9      	b.n	8010ec6 <_printf_common+0x92>
	...

08010f14 <_printf_i>:
 8010f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f18:	7e0f      	ldrb	r7, [r1, #24]
 8010f1a:	4691      	mov	r9, r2
 8010f1c:	2f78      	cmp	r7, #120	; 0x78
 8010f1e:	4680      	mov	r8, r0
 8010f20:	460c      	mov	r4, r1
 8010f22:	469a      	mov	sl, r3
 8010f24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010f26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010f2a:	d807      	bhi.n	8010f3c <_printf_i+0x28>
 8010f2c:	2f62      	cmp	r7, #98	; 0x62
 8010f2e:	d80a      	bhi.n	8010f46 <_printf_i+0x32>
 8010f30:	2f00      	cmp	r7, #0
 8010f32:	f000 80d9 	beq.w	80110e8 <_printf_i+0x1d4>
 8010f36:	2f58      	cmp	r7, #88	; 0x58
 8010f38:	f000 80a4 	beq.w	8011084 <_printf_i+0x170>
 8010f3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010f40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010f44:	e03a      	b.n	8010fbc <_printf_i+0xa8>
 8010f46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010f4a:	2b15      	cmp	r3, #21
 8010f4c:	d8f6      	bhi.n	8010f3c <_printf_i+0x28>
 8010f4e:	a101      	add	r1, pc, #4	; (adr r1, 8010f54 <_printf_i+0x40>)
 8010f50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010f54:	08010fad 	.word	0x08010fad
 8010f58:	08010fc1 	.word	0x08010fc1
 8010f5c:	08010f3d 	.word	0x08010f3d
 8010f60:	08010f3d 	.word	0x08010f3d
 8010f64:	08010f3d 	.word	0x08010f3d
 8010f68:	08010f3d 	.word	0x08010f3d
 8010f6c:	08010fc1 	.word	0x08010fc1
 8010f70:	08010f3d 	.word	0x08010f3d
 8010f74:	08010f3d 	.word	0x08010f3d
 8010f78:	08010f3d 	.word	0x08010f3d
 8010f7c:	08010f3d 	.word	0x08010f3d
 8010f80:	080110cf 	.word	0x080110cf
 8010f84:	08010ff1 	.word	0x08010ff1
 8010f88:	080110b1 	.word	0x080110b1
 8010f8c:	08010f3d 	.word	0x08010f3d
 8010f90:	08010f3d 	.word	0x08010f3d
 8010f94:	080110f1 	.word	0x080110f1
 8010f98:	08010f3d 	.word	0x08010f3d
 8010f9c:	08010ff1 	.word	0x08010ff1
 8010fa0:	08010f3d 	.word	0x08010f3d
 8010fa4:	08010f3d 	.word	0x08010f3d
 8010fa8:	080110b9 	.word	0x080110b9
 8010fac:	682b      	ldr	r3, [r5, #0]
 8010fae:	1d1a      	adds	r2, r3, #4
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	602a      	str	r2, [r5, #0]
 8010fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010fb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	e0a4      	b.n	801110a <_printf_i+0x1f6>
 8010fc0:	6820      	ldr	r0, [r4, #0]
 8010fc2:	6829      	ldr	r1, [r5, #0]
 8010fc4:	0606      	lsls	r6, r0, #24
 8010fc6:	f101 0304 	add.w	r3, r1, #4
 8010fca:	d50a      	bpl.n	8010fe2 <_printf_i+0xce>
 8010fcc:	680e      	ldr	r6, [r1, #0]
 8010fce:	602b      	str	r3, [r5, #0]
 8010fd0:	2e00      	cmp	r6, #0
 8010fd2:	da03      	bge.n	8010fdc <_printf_i+0xc8>
 8010fd4:	232d      	movs	r3, #45	; 0x2d
 8010fd6:	4276      	negs	r6, r6
 8010fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fdc:	230a      	movs	r3, #10
 8010fde:	485e      	ldr	r0, [pc, #376]	; (8011158 <_printf_i+0x244>)
 8010fe0:	e019      	b.n	8011016 <_printf_i+0x102>
 8010fe2:	680e      	ldr	r6, [r1, #0]
 8010fe4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010fe8:	602b      	str	r3, [r5, #0]
 8010fea:	bf18      	it	ne
 8010fec:	b236      	sxthne	r6, r6
 8010fee:	e7ef      	b.n	8010fd0 <_printf_i+0xbc>
 8010ff0:	682b      	ldr	r3, [r5, #0]
 8010ff2:	6820      	ldr	r0, [r4, #0]
 8010ff4:	1d19      	adds	r1, r3, #4
 8010ff6:	6029      	str	r1, [r5, #0]
 8010ff8:	0601      	lsls	r1, r0, #24
 8010ffa:	d501      	bpl.n	8011000 <_printf_i+0xec>
 8010ffc:	681e      	ldr	r6, [r3, #0]
 8010ffe:	e002      	b.n	8011006 <_printf_i+0xf2>
 8011000:	0646      	lsls	r6, r0, #25
 8011002:	d5fb      	bpl.n	8010ffc <_printf_i+0xe8>
 8011004:	881e      	ldrh	r6, [r3, #0]
 8011006:	2f6f      	cmp	r7, #111	; 0x6f
 8011008:	bf0c      	ite	eq
 801100a:	2308      	moveq	r3, #8
 801100c:	230a      	movne	r3, #10
 801100e:	4852      	ldr	r0, [pc, #328]	; (8011158 <_printf_i+0x244>)
 8011010:	2100      	movs	r1, #0
 8011012:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011016:	6865      	ldr	r5, [r4, #4]
 8011018:	2d00      	cmp	r5, #0
 801101a:	bfa8      	it	ge
 801101c:	6821      	ldrge	r1, [r4, #0]
 801101e:	60a5      	str	r5, [r4, #8]
 8011020:	bfa4      	itt	ge
 8011022:	f021 0104 	bicge.w	r1, r1, #4
 8011026:	6021      	strge	r1, [r4, #0]
 8011028:	b90e      	cbnz	r6, 801102e <_printf_i+0x11a>
 801102a:	2d00      	cmp	r5, #0
 801102c:	d04d      	beq.n	80110ca <_printf_i+0x1b6>
 801102e:	4615      	mov	r5, r2
 8011030:	fbb6 f1f3 	udiv	r1, r6, r3
 8011034:	fb03 6711 	mls	r7, r3, r1, r6
 8011038:	5dc7      	ldrb	r7, [r0, r7]
 801103a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801103e:	4637      	mov	r7, r6
 8011040:	42bb      	cmp	r3, r7
 8011042:	460e      	mov	r6, r1
 8011044:	d9f4      	bls.n	8011030 <_printf_i+0x11c>
 8011046:	2b08      	cmp	r3, #8
 8011048:	d10b      	bne.n	8011062 <_printf_i+0x14e>
 801104a:	6823      	ldr	r3, [r4, #0]
 801104c:	07de      	lsls	r6, r3, #31
 801104e:	d508      	bpl.n	8011062 <_printf_i+0x14e>
 8011050:	6923      	ldr	r3, [r4, #16]
 8011052:	6861      	ldr	r1, [r4, #4]
 8011054:	4299      	cmp	r1, r3
 8011056:	bfde      	ittt	le
 8011058:	2330      	movle	r3, #48	; 0x30
 801105a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801105e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011062:	1b52      	subs	r2, r2, r5
 8011064:	6122      	str	r2, [r4, #16]
 8011066:	464b      	mov	r3, r9
 8011068:	4621      	mov	r1, r4
 801106a:	4640      	mov	r0, r8
 801106c:	f8cd a000 	str.w	sl, [sp]
 8011070:	aa03      	add	r2, sp, #12
 8011072:	f7ff fedf 	bl	8010e34 <_printf_common>
 8011076:	3001      	adds	r0, #1
 8011078:	d14c      	bne.n	8011114 <_printf_i+0x200>
 801107a:	f04f 30ff 	mov.w	r0, #4294967295
 801107e:	b004      	add	sp, #16
 8011080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011084:	4834      	ldr	r0, [pc, #208]	; (8011158 <_printf_i+0x244>)
 8011086:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801108a:	6829      	ldr	r1, [r5, #0]
 801108c:	6823      	ldr	r3, [r4, #0]
 801108e:	f851 6b04 	ldr.w	r6, [r1], #4
 8011092:	6029      	str	r1, [r5, #0]
 8011094:	061d      	lsls	r5, r3, #24
 8011096:	d514      	bpl.n	80110c2 <_printf_i+0x1ae>
 8011098:	07df      	lsls	r7, r3, #31
 801109a:	bf44      	itt	mi
 801109c:	f043 0320 	orrmi.w	r3, r3, #32
 80110a0:	6023      	strmi	r3, [r4, #0]
 80110a2:	b91e      	cbnz	r6, 80110ac <_printf_i+0x198>
 80110a4:	6823      	ldr	r3, [r4, #0]
 80110a6:	f023 0320 	bic.w	r3, r3, #32
 80110aa:	6023      	str	r3, [r4, #0]
 80110ac:	2310      	movs	r3, #16
 80110ae:	e7af      	b.n	8011010 <_printf_i+0xfc>
 80110b0:	6823      	ldr	r3, [r4, #0]
 80110b2:	f043 0320 	orr.w	r3, r3, #32
 80110b6:	6023      	str	r3, [r4, #0]
 80110b8:	2378      	movs	r3, #120	; 0x78
 80110ba:	4828      	ldr	r0, [pc, #160]	; (801115c <_printf_i+0x248>)
 80110bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80110c0:	e7e3      	b.n	801108a <_printf_i+0x176>
 80110c2:	0659      	lsls	r1, r3, #25
 80110c4:	bf48      	it	mi
 80110c6:	b2b6      	uxthmi	r6, r6
 80110c8:	e7e6      	b.n	8011098 <_printf_i+0x184>
 80110ca:	4615      	mov	r5, r2
 80110cc:	e7bb      	b.n	8011046 <_printf_i+0x132>
 80110ce:	682b      	ldr	r3, [r5, #0]
 80110d0:	6826      	ldr	r6, [r4, #0]
 80110d2:	1d18      	adds	r0, r3, #4
 80110d4:	6961      	ldr	r1, [r4, #20]
 80110d6:	6028      	str	r0, [r5, #0]
 80110d8:	0635      	lsls	r5, r6, #24
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	d501      	bpl.n	80110e2 <_printf_i+0x1ce>
 80110de:	6019      	str	r1, [r3, #0]
 80110e0:	e002      	b.n	80110e8 <_printf_i+0x1d4>
 80110e2:	0670      	lsls	r0, r6, #25
 80110e4:	d5fb      	bpl.n	80110de <_printf_i+0x1ca>
 80110e6:	8019      	strh	r1, [r3, #0]
 80110e8:	2300      	movs	r3, #0
 80110ea:	4615      	mov	r5, r2
 80110ec:	6123      	str	r3, [r4, #16]
 80110ee:	e7ba      	b.n	8011066 <_printf_i+0x152>
 80110f0:	682b      	ldr	r3, [r5, #0]
 80110f2:	2100      	movs	r1, #0
 80110f4:	1d1a      	adds	r2, r3, #4
 80110f6:	602a      	str	r2, [r5, #0]
 80110f8:	681d      	ldr	r5, [r3, #0]
 80110fa:	6862      	ldr	r2, [r4, #4]
 80110fc:	4628      	mov	r0, r5
 80110fe:	f000 ffe7 	bl	80120d0 <memchr>
 8011102:	b108      	cbz	r0, 8011108 <_printf_i+0x1f4>
 8011104:	1b40      	subs	r0, r0, r5
 8011106:	6060      	str	r0, [r4, #4]
 8011108:	6863      	ldr	r3, [r4, #4]
 801110a:	6123      	str	r3, [r4, #16]
 801110c:	2300      	movs	r3, #0
 801110e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011112:	e7a8      	b.n	8011066 <_printf_i+0x152>
 8011114:	462a      	mov	r2, r5
 8011116:	4649      	mov	r1, r9
 8011118:	4640      	mov	r0, r8
 801111a:	6923      	ldr	r3, [r4, #16]
 801111c:	47d0      	blx	sl
 801111e:	3001      	adds	r0, #1
 8011120:	d0ab      	beq.n	801107a <_printf_i+0x166>
 8011122:	6823      	ldr	r3, [r4, #0]
 8011124:	079b      	lsls	r3, r3, #30
 8011126:	d413      	bmi.n	8011150 <_printf_i+0x23c>
 8011128:	68e0      	ldr	r0, [r4, #12]
 801112a:	9b03      	ldr	r3, [sp, #12]
 801112c:	4298      	cmp	r0, r3
 801112e:	bfb8      	it	lt
 8011130:	4618      	movlt	r0, r3
 8011132:	e7a4      	b.n	801107e <_printf_i+0x16a>
 8011134:	2301      	movs	r3, #1
 8011136:	4632      	mov	r2, r6
 8011138:	4649      	mov	r1, r9
 801113a:	4640      	mov	r0, r8
 801113c:	47d0      	blx	sl
 801113e:	3001      	adds	r0, #1
 8011140:	d09b      	beq.n	801107a <_printf_i+0x166>
 8011142:	3501      	adds	r5, #1
 8011144:	68e3      	ldr	r3, [r4, #12]
 8011146:	9903      	ldr	r1, [sp, #12]
 8011148:	1a5b      	subs	r3, r3, r1
 801114a:	42ab      	cmp	r3, r5
 801114c:	dcf2      	bgt.n	8011134 <_printf_i+0x220>
 801114e:	e7eb      	b.n	8011128 <_printf_i+0x214>
 8011150:	2500      	movs	r5, #0
 8011152:	f104 0619 	add.w	r6, r4, #25
 8011156:	e7f5      	b.n	8011144 <_printf_i+0x230>
 8011158:	08013c7e 	.word	0x08013c7e
 801115c:	08013c8f 	.word	0x08013c8f

08011160 <siprintf>:
 8011160:	b40e      	push	{r1, r2, r3}
 8011162:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011166:	b500      	push	{lr}
 8011168:	b09c      	sub	sp, #112	; 0x70
 801116a:	ab1d      	add	r3, sp, #116	; 0x74
 801116c:	9002      	str	r0, [sp, #8]
 801116e:	9006      	str	r0, [sp, #24]
 8011170:	9107      	str	r1, [sp, #28]
 8011172:	9104      	str	r1, [sp, #16]
 8011174:	4808      	ldr	r0, [pc, #32]	; (8011198 <siprintf+0x38>)
 8011176:	4909      	ldr	r1, [pc, #36]	; (801119c <siprintf+0x3c>)
 8011178:	f853 2b04 	ldr.w	r2, [r3], #4
 801117c:	9105      	str	r1, [sp, #20]
 801117e:	6800      	ldr	r0, [r0, #0]
 8011180:	a902      	add	r1, sp, #8
 8011182:	9301      	str	r3, [sp, #4]
 8011184:	f001 fc8e 	bl	8012aa4 <_svfiprintf_r>
 8011188:	2200      	movs	r2, #0
 801118a:	9b02      	ldr	r3, [sp, #8]
 801118c:	701a      	strb	r2, [r3, #0]
 801118e:	b01c      	add	sp, #112	; 0x70
 8011190:	f85d eb04 	ldr.w	lr, [sp], #4
 8011194:	b003      	add	sp, #12
 8011196:	4770      	bx	lr
 8011198:	20000670 	.word	0x20000670
 801119c:	ffff0208 	.word	0xffff0208

080111a0 <strtok>:
 80111a0:	4b16      	ldr	r3, [pc, #88]	; (80111fc <strtok+0x5c>)
 80111a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111a6:	681f      	ldr	r7, [r3, #0]
 80111a8:	4605      	mov	r5, r0
 80111aa:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 80111ac:	460e      	mov	r6, r1
 80111ae:	b9ec      	cbnz	r4, 80111ec <strtok+0x4c>
 80111b0:	2050      	movs	r0, #80	; 0x50
 80111b2:	f000 ff85 	bl	80120c0 <malloc>
 80111b6:	4602      	mov	r2, r0
 80111b8:	65b8      	str	r0, [r7, #88]	; 0x58
 80111ba:	b920      	cbnz	r0, 80111c6 <strtok+0x26>
 80111bc:	2157      	movs	r1, #87	; 0x57
 80111be:	4b10      	ldr	r3, [pc, #64]	; (8011200 <strtok+0x60>)
 80111c0:	4810      	ldr	r0, [pc, #64]	; (8011204 <strtok+0x64>)
 80111c2:	f000 f8cf 	bl	8011364 <__assert_func>
 80111c6:	e9c0 4400 	strd	r4, r4, [r0]
 80111ca:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80111ce:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80111d2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80111d6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80111da:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80111de:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80111e2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80111e6:	6184      	str	r4, [r0, #24]
 80111e8:	7704      	strb	r4, [r0, #28]
 80111ea:	6244      	str	r4, [r0, #36]	; 0x24
 80111ec:	4631      	mov	r1, r6
 80111ee:	4628      	mov	r0, r5
 80111f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80111f2:	2301      	movs	r3, #1
 80111f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111f8:	f000 b806 	b.w	8011208 <__strtok_r>
 80111fc:	20000670 	.word	0x20000670
 8011200:	08013ca0 	.word	0x08013ca0
 8011204:	08013cb7 	.word	0x08013cb7

08011208 <__strtok_r>:
 8011208:	b5f0      	push	{r4, r5, r6, r7, lr}
 801120a:	b908      	cbnz	r0, 8011210 <__strtok_r+0x8>
 801120c:	6810      	ldr	r0, [r2, #0]
 801120e:	b188      	cbz	r0, 8011234 <__strtok_r+0x2c>
 8011210:	4604      	mov	r4, r0
 8011212:	460f      	mov	r7, r1
 8011214:	4620      	mov	r0, r4
 8011216:	f814 5b01 	ldrb.w	r5, [r4], #1
 801121a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801121e:	b91e      	cbnz	r6, 8011228 <__strtok_r+0x20>
 8011220:	b965      	cbnz	r5, 801123c <__strtok_r+0x34>
 8011222:	4628      	mov	r0, r5
 8011224:	6015      	str	r5, [r2, #0]
 8011226:	e005      	b.n	8011234 <__strtok_r+0x2c>
 8011228:	42b5      	cmp	r5, r6
 801122a:	d1f6      	bne.n	801121a <__strtok_r+0x12>
 801122c:	2b00      	cmp	r3, #0
 801122e:	d1f0      	bne.n	8011212 <__strtok_r+0xa>
 8011230:	6014      	str	r4, [r2, #0]
 8011232:	7003      	strb	r3, [r0, #0]
 8011234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011236:	461c      	mov	r4, r3
 8011238:	e00c      	b.n	8011254 <__strtok_r+0x4c>
 801123a:	b915      	cbnz	r5, 8011242 <__strtok_r+0x3a>
 801123c:	460e      	mov	r6, r1
 801123e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011242:	f816 5b01 	ldrb.w	r5, [r6], #1
 8011246:	42ab      	cmp	r3, r5
 8011248:	d1f7      	bne.n	801123a <__strtok_r+0x32>
 801124a:	2b00      	cmp	r3, #0
 801124c:	d0f3      	beq.n	8011236 <__strtok_r+0x2e>
 801124e:	2300      	movs	r3, #0
 8011250:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011254:	6014      	str	r4, [r2, #0]
 8011256:	e7ed      	b.n	8011234 <__strtok_r+0x2c>

08011258 <_strtol_l.constprop.0>:
 8011258:	2b01      	cmp	r3, #1
 801125a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801125e:	4680      	mov	r8, r0
 8011260:	d001      	beq.n	8011266 <_strtol_l.constprop.0+0xe>
 8011262:	2b24      	cmp	r3, #36	; 0x24
 8011264:	d906      	bls.n	8011274 <_strtol_l.constprop.0+0x1c>
 8011266:	f7ff fae9 	bl	801083c <__errno>
 801126a:	2316      	movs	r3, #22
 801126c:	6003      	str	r3, [r0, #0]
 801126e:	2000      	movs	r0, #0
 8011270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011274:	460d      	mov	r5, r1
 8011276:	4f35      	ldr	r7, [pc, #212]	; (801134c <_strtol_l.constprop.0+0xf4>)
 8011278:	4628      	mov	r0, r5
 801127a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801127e:	5de6      	ldrb	r6, [r4, r7]
 8011280:	f016 0608 	ands.w	r6, r6, #8
 8011284:	d1f8      	bne.n	8011278 <_strtol_l.constprop.0+0x20>
 8011286:	2c2d      	cmp	r4, #45	; 0x2d
 8011288:	d12f      	bne.n	80112ea <_strtol_l.constprop.0+0x92>
 801128a:	2601      	movs	r6, #1
 801128c:	782c      	ldrb	r4, [r5, #0]
 801128e:	1c85      	adds	r5, r0, #2
 8011290:	2b00      	cmp	r3, #0
 8011292:	d057      	beq.n	8011344 <_strtol_l.constprop.0+0xec>
 8011294:	2b10      	cmp	r3, #16
 8011296:	d109      	bne.n	80112ac <_strtol_l.constprop.0+0x54>
 8011298:	2c30      	cmp	r4, #48	; 0x30
 801129a:	d107      	bne.n	80112ac <_strtol_l.constprop.0+0x54>
 801129c:	7828      	ldrb	r0, [r5, #0]
 801129e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80112a2:	2858      	cmp	r0, #88	; 0x58
 80112a4:	d149      	bne.n	801133a <_strtol_l.constprop.0+0xe2>
 80112a6:	2310      	movs	r3, #16
 80112a8:	786c      	ldrb	r4, [r5, #1]
 80112aa:	3502      	adds	r5, #2
 80112ac:	2700      	movs	r7, #0
 80112ae:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80112b2:	f10e 3eff 	add.w	lr, lr, #4294967295
 80112b6:	fbbe f9f3 	udiv	r9, lr, r3
 80112ba:	4638      	mov	r0, r7
 80112bc:	fb03 ea19 	mls	sl, r3, r9, lr
 80112c0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80112c4:	f1bc 0f09 	cmp.w	ip, #9
 80112c8:	d814      	bhi.n	80112f4 <_strtol_l.constprop.0+0x9c>
 80112ca:	4664      	mov	r4, ip
 80112cc:	42a3      	cmp	r3, r4
 80112ce:	dd22      	ble.n	8011316 <_strtol_l.constprop.0+0xbe>
 80112d0:	2f00      	cmp	r7, #0
 80112d2:	db1d      	blt.n	8011310 <_strtol_l.constprop.0+0xb8>
 80112d4:	4581      	cmp	r9, r0
 80112d6:	d31b      	bcc.n	8011310 <_strtol_l.constprop.0+0xb8>
 80112d8:	d101      	bne.n	80112de <_strtol_l.constprop.0+0x86>
 80112da:	45a2      	cmp	sl, r4
 80112dc:	db18      	blt.n	8011310 <_strtol_l.constprop.0+0xb8>
 80112de:	2701      	movs	r7, #1
 80112e0:	fb00 4003 	mla	r0, r0, r3, r4
 80112e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80112e8:	e7ea      	b.n	80112c0 <_strtol_l.constprop.0+0x68>
 80112ea:	2c2b      	cmp	r4, #43	; 0x2b
 80112ec:	bf04      	itt	eq
 80112ee:	782c      	ldrbeq	r4, [r5, #0]
 80112f0:	1c85      	addeq	r5, r0, #2
 80112f2:	e7cd      	b.n	8011290 <_strtol_l.constprop.0+0x38>
 80112f4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80112f8:	f1bc 0f19 	cmp.w	ip, #25
 80112fc:	d801      	bhi.n	8011302 <_strtol_l.constprop.0+0xaa>
 80112fe:	3c37      	subs	r4, #55	; 0x37
 8011300:	e7e4      	b.n	80112cc <_strtol_l.constprop.0+0x74>
 8011302:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011306:	f1bc 0f19 	cmp.w	ip, #25
 801130a:	d804      	bhi.n	8011316 <_strtol_l.constprop.0+0xbe>
 801130c:	3c57      	subs	r4, #87	; 0x57
 801130e:	e7dd      	b.n	80112cc <_strtol_l.constprop.0+0x74>
 8011310:	f04f 37ff 	mov.w	r7, #4294967295
 8011314:	e7e6      	b.n	80112e4 <_strtol_l.constprop.0+0x8c>
 8011316:	2f00      	cmp	r7, #0
 8011318:	da07      	bge.n	801132a <_strtol_l.constprop.0+0xd2>
 801131a:	2322      	movs	r3, #34	; 0x22
 801131c:	4670      	mov	r0, lr
 801131e:	f8c8 3000 	str.w	r3, [r8]
 8011322:	2a00      	cmp	r2, #0
 8011324:	d0a4      	beq.n	8011270 <_strtol_l.constprop.0+0x18>
 8011326:	1e69      	subs	r1, r5, #1
 8011328:	e005      	b.n	8011336 <_strtol_l.constprop.0+0xde>
 801132a:	b106      	cbz	r6, 801132e <_strtol_l.constprop.0+0xd6>
 801132c:	4240      	negs	r0, r0
 801132e:	2a00      	cmp	r2, #0
 8011330:	d09e      	beq.n	8011270 <_strtol_l.constprop.0+0x18>
 8011332:	2f00      	cmp	r7, #0
 8011334:	d1f7      	bne.n	8011326 <_strtol_l.constprop.0+0xce>
 8011336:	6011      	str	r1, [r2, #0]
 8011338:	e79a      	b.n	8011270 <_strtol_l.constprop.0+0x18>
 801133a:	2430      	movs	r4, #48	; 0x30
 801133c:	2b00      	cmp	r3, #0
 801133e:	d1b5      	bne.n	80112ac <_strtol_l.constprop.0+0x54>
 8011340:	2308      	movs	r3, #8
 8011342:	e7b3      	b.n	80112ac <_strtol_l.constprop.0+0x54>
 8011344:	2c30      	cmp	r4, #48	; 0x30
 8011346:	d0a9      	beq.n	801129c <_strtol_l.constprop.0+0x44>
 8011348:	230a      	movs	r3, #10
 801134a:	e7af      	b.n	80112ac <_strtol_l.constprop.0+0x54>
 801134c:	08013d51 	.word	0x08013d51

08011350 <strtol>:
 8011350:	4613      	mov	r3, r2
 8011352:	460a      	mov	r2, r1
 8011354:	4601      	mov	r1, r0
 8011356:	4802      	ldr	r0, [pc, #8]	; (8011360 <strtol+0x10>)
 8011358:	6800      	ldr	r0, [r0, #0]
 801135a:	f7ff bf7d 	b.w	8011258 <_strtol_l.constprop.0>
 801135e:	bf00      	nop
 8011360:	20000670 	.word	0x20000670

08011364 <__assert_func>:
 8011364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011366:	4614      	mov	r4, r2
 8011368:	461a      	mov	r2, r3
 801136a:	4b09      	ldr	r3, [pc, #36]	; (8011390 <__assert_func+0x2c>)
 801136c:	4605      	mov	r5, r0
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	68d8      	ldr	r0, [r3, #12]
 8011372:	b14c      	cbz	r4, 8011388 <__assert_func+0x24>
 8011374:	4b07      	ldr	r3, [pc, #28]	; (8011394 <__assert_func+0x30>)
 8011376:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801137a:	9100      	str	r1, [sp, #0]
 801137c:	462b      	mov	r3, r5
 801137e:	4906      	ldr	r1, [pc, #24]	; (8011398 <__assert_func+0x34>)
 8011380:	f000 fe88 	bl	8012094 <fiprintf>
 8011384:	f001 feb6 	bl	80130f4 <abort>
 8011388:	4b04      	ldr	r3, [pc, #16]	; (801139c <__assert_func+0x38>)
 801138a:	461c      	mov	r4, r3
 801138c:	e7f3      	b.n	8011376 <__assert_func+0x12>
 801138e:	bf00      	nop
 8011390:	20000670 	.word	0x20000670
 8011394:	08013d14 	.word	0x08013d14
 8011398:	08013d21 	.word	0x08013d21
 801139c:	08013d4f 	.word	0x08013d4f

080113a0 <quorem>:
 80113a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113a4:	6903      	ldr	r3, [r0, #16]
 80113a6:	690c      	ldr	r4, [r1, #16]
 80113a8:	4607      	mov	r7, r0
 80113aa:	42a3      	cmp	r3, r4
 80113ac:	f2c0 8082 	blt.w	80114b4 <quorem+0x114>
 80113b0:	3c01      	subs	r4, #1
 80113b2:	f100 0514 	add.w	r5, r0, #20
 80113b6:	f101 0814 	add.w	r8, r1, #20
 80113ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80113be:	9301      	str	r3, [sp, #4]
 80113c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80113c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80113c8:	3301      	adds	r3, #1
 80113ca:	429a      	cmp	r2, r3
 80113cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80113d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80113d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80113d8:	d331      	bcc.n	801143e <quorem+0x9e>
 80113da:	f04f 0e00 	mov.w	lr, #0
 80113de:	4640      	mov	r0, r8
 80113e0:	46ac      	mov	ip, r5
 80113e2:	46f2      	mov	sl, lr
 80113e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80113e8:	b293      	uxth	r3, r2
 80113ea:	fb06 e303 	mla	r3, r6, r3, lr
 80113ee:	0c12      	lsrs	r2, r2, #16
 80113f0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80113f4:	b29b      	uxth	r3, r3
 80113f6:	fb06 e202 	mla	r2, r6, r2, lr
 80113fa:	ebaa 0303 	sub.w	r3, sl, r3
 80113fe:	f8dc a000 	ldr.w	sl, [ip]
 8011402:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011406:	fa1f fa8a 	uxth.w	sl, sl
 801140a:	4453      	add	r3, sl
 801140c:	f8dc a000 	ldr.w	sl, [ip]
 8011410:	b292      	uxth	r2, r2
 8011412:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011416:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801141a:	b29b      	uxth	r3, r3
 801141c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011420:	4581      	cmp	r9, r0
 8011422:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011426:	f84c 3b04 	str.w	r3, [ip], #4
 801142a:	d2db      	bcs.n	80113e4 <quorem+0x44>
 801142c:	f855 300b 	ldr.w	r3, [r5, fp]
 8011430:	b92b      	cbnz	r3, 801143e <quorem+0x9e>
 8011432:	9b01      	ldr	r3, [sp, #4]
 8011434:	3b04      	subs	r3, #4
 8011436:	429d      	cmp	r5, r3
 8011438:	461a      	mov	r2, r3
 801143a:	d32f      	bcc.n	801149c <quorem+0xfc>
 801143c:	613c      	str	r4, [r7, #16]
 801143e:	4638      	mov	r0, r7
 8011440:	f001 f8e0 	bl	8012604 <__mcmp>
 8011444:	2800      	cmp	r0, #0
 8011446:	db25      	blt.n	8011494 <quorem+0xf4>
 8011448:	4628      	mov	r0, r5
 801144a:	f04f 0c00 	mov.w	ip, #0
 801144e:	3601      	adds	r6, #1
 8011450:	f858 1b04 	ldr.w	r1, [r8], #4
 8011454:	f8d0 e000 	ldr.w	lr, [r0]
 8011458:	b28b      	uxth	r3, r1
 801145a:	ebac 0303 	sub.w	r3, ip, r3
 801145e:	fa1f f28e 	uxth.w	r2, lr
 8011462:	4413      	add	r3, r2
 8011464:	0c0a      	lsrs	r2, r1, #16
 8011466:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801146a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801146e:	b29b      	uxth	r3, r3
 8011470:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011474:	45c1      	cmp	r9, r8
 8011476:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801147a:	f840 3b04 	str.w	r3, [r0], #4
 801147e:	d2e7      	bcs.n	8011450 <quorem+0xb0>
 8011480:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011484:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011488:	b922      	cbnz	r2, 8011494 <quorem+0xf4>
 801148a:	3b04      	subs	r3, #4
 801148c:	429d      	cmp	r5, r3
 801148e:	461a      	mov	r2, r3
 8011490:	d30a      	bcc.n	80114a8 <quorem+0x108>
 8011492:	613c      	str	r4, [r7, #16]
 8011494:	4630      	mov	r0, r6
 8011496:	b003      	add	sp, #12
 8011498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801149c:	6812      	ldr	r2, [r2, #0]
 801149e:	3b04      	subs	r3, #4
 80114a0:	2a00      	cmp	r2, #0
 80114a2:	d1cb      	bne.n	801143c <quorem+0x9c>
 80114a4:	3c01      	subs	r4, #1
 80114a6:	e7c6      	b.n	8011436 <quorem+0x96>
 80114a8:	6812      	ldr	r2, [r2, #0]
 80114aa:	3b04      	subs	r3, #4
 80114ac:	2a00      	cmp	r2, #0
 80114ae:	d1f0      	bne.n	8011492 <quorem+0xf2>
 80114b0:	3c01      	subs	r4, #1
 80114b2:	e7eb      	b.n	801148c <quorem+0xec>
 80114b4:	2000      	movs	r0, #0
 80114b6:	e7ee      	b.n	8011496 <quorem+0xf6>

080114b8 <_dtoa_r>:
 80114b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114bc:	4616      	mov	r6, r2
 80114be:	461f      	mov	r7, r3
 80114c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80114c2:	b099      	sub	sp, #100	; 0x64
 80114c4:	4605      	mov	r5, r0
 80114c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80114ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80114ce:	b974      	cbnz	r4, 80114ee <_dtoa_r+0x36>
 80114d0:	2010      	movs	r0, #16
 80114d2:	f000 fdf5 	bl	80120c0 <malloc>
 80114d6:	4602      	mov	r2, r0
 80114d8:	6268      	str	r0, [r5, #36]	; 0x24
 80114da:	b920      	cbnz	r0, 80114e6 <_dtoa_r+0x2e>
 80114dc:	21ea      	movs	r1, #234	; 0xea
 80114de:	4ba8      	ldr	r3, [pc, #672]	; (8011780 <_dtoa_r+0x2c8>)
 80114e0:	48a8      	ldr	r0, [pc, #672]	; (8011784 <_dtoa_r+0x2cc>)
 80114e2:	f7ff ff3f 	bl	8011364 <__assert_func>
 80114e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80114ea:	6004      	str	r4, [r0, #0]
 80114ec:	60c4      	str	r4, [r0, #12]
 80114ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80114f0:	6819      	ldr	r1, [r3, #0]
 80114f2:	b151      	cbz	r1, 801150a <_dtoa_r+0x52>
 80114f4:	685a      	ldr	r2, [r3, #4]
 80114f6:	2301      	movs	r3, #1
 80114f8:	4093      	lsls	r3, r2
 80114fa:	604a      	str	r2, [r1, #4]
 80114fc:	608b      	str	r3, [r1, #8]
 80114fe:	4628      	mov	r0, r5
 8011500:	f000 fe42 	bl	8012188 <_Bfree>
 8011504:	2200      	movs	r2, #0
 8011506:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011508:	601a      	str	r2, [r3, #0]
 801150a:	1e3b      	subs	r3, r7, #0
 801150c:	bfaf      	iteee	ge
 801150e:	2300      	movge	r3, #0
 8011510:	2201      	movlt	r2, #1
 8011512:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011516:	9305      	strlt	r3, [sp, #20]
 8011518:	bfa8      	it	ge
 801151a:	f8c8 3000 	strge.w	r3, [r8]
 801151e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8011522:	4b99      	ldr	r3, [pc, #612]	; (8011788 <_dtoa_r+0x2d0>)
 8011524:	bfb8      	it	lt
 8011526:	f8c8 2000 	strlt.w	r2, [r8]
 801152a:	ea33 0309 	bics.w	r3, r3, r9
 801152e:	d119      	bne.n	8011564 <_dtoa_r+0xac>
 8011530:	f242 730f 	movw	r3, #9999	; 0x270f
 8011534:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011536:	6013      	str	r3, [r2, #0]
 8011538:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801153c:	4333      	orrs	r3, r6
 801153e:	f000 857f 	beq.w	8012040 <_dtoa_r+0xb88>
 8011542:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011544:	b953      	cbnz	r3, 801155c <_dtoa_r+0xa4>
 8011546:	4b91      	ldr	r3, [pc, #580]	; (801178c <_dtoa_r+0x2d4>)
 8011548:	e022      	b.n	8011590 <_dtoa_r+0xd8>
 801154a:	4b91      	ldr	r3, [pc, #580]	; (8011790 <_dtoa_r+0x2d8>)
 801154c:	9303      	str	r3, [sp, #12]
 801154e:	3308      	adds	r3, #8
 8011550:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011552:	6013      	str	r3, [r2, #0]
 8011554:	9803      	ldr	r0, [sp, #12]
 8011556:	b019      	add	sp, #100	; 0x64
 8011558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801155c:	4b8b      	ldr	r3, [pc, #556]	; (801178c <_dtoa_r+0x2d4>)
 801155e:	9303      	str	r3, [sp, #12]
 8011560:	3303      	adds	r3, #3
 8011562:	e7f5      	b.n	8011550 <_dtoa_r+0x98>
 8011564:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8011568:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 801156c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011570:	2200      	movs	r2, #0
 8011572:	2300      	movs	r3, #0
 8011574:	f7ef fa84 	bl	8000a80 <__aeabi_dcmpeq>
 8011578:	4680      	mov	r8, r0
 801157a:	b158      	cbz	r0, 8011594 <_dtoa_r+0xdc>
 801157c:	2301      	movs	r3, #1
 801157e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011580:	6013      	str	r3, [r2, #0]
 8011582:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011584:	2b00      	cmp	r3, #0
 8011586:	f000 8558 	beq.w	801203a <_dtoa_r+0xb82>
 801158a:	4882      	ldr	r0, [pc, #520]	; (8011794 <_dtoa_r+0x2dc>)
 801158c:	6018      	str	r0, [r3, #0]
 801158e:	1e43      	subs	r3, r0, #1
 8011590:	9303      	str	r3, [sp, #12]
 8011592:	e7df      	b.n	8011554 <_dtoa_r+0x9c>
 8011594:	ab16      	add	r3, sp, #88	; 0x58
 8011596:	9301      	str	r3, [sp, #4]
 8011598:	ab17      	add	r3, sp, #92	; 0x5c
 801159a:	9300      	str	r3, [sp, #0]
 801159c:	4628      	mov	r0, r5
 801159e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80115a2:	f001 f8d7 	bl	8012754 <__d2b>
 80115a6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80115aa:	4683      	mov	fp, r0
 80115ac:	2c00      	cmp	r4, #0
 80115ae:	d07f      	beq.n	80116b0 <_dtoa_r+0x1f8>
 80115b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80115b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80115b6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80115ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80115be:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80115c2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80115c6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80115ca:	2200      	movs	r2, #0
 80115cc:	4b72      	ldr	r3, [pc, #456]	; (8011798 <_dtoa_r+0x2e0>)
 80115ce:	f7ee fe37 	bl	8000240 <__aeabi_dsub>
 80115d2:	a365      	add	r3, pc, #404	; (adr r3, 8011768 <_dtoa_r+0x2b0>)
 80115d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d8:	f7ee ffea 	bl	80005b0 <__aeabi_dmul>
 80115dc:	a364      	add	r3, pc, #400	; (adr r3, 8011770 <_dtoa_r+0x2b8>)
 80115de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115e2:	f7ee fe2f 	bl	8000244 <__adddf3>
 80115e6:	4606      	mov	r6, r0
 80115e8:	4620      	mov	r0, r4
 80115ea:	460f      	mov	r7, r1
 80115ec:	f7ee ff76 	bl	80004dc <__aeabi_i2d>
 80115f0:	a361      	add	r3, pc, #388	; (adr r3, 8011778 <_dtoa_r+0x2c0>)
 80115f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115f6:	f7ee ffdb 	bl	80005b0 <__aeabi_dmul>
 80115fa:	4602      	mov	r2, r0
 80115fc:	460b      	mov	r3, r1
 80115fe:	4630      	mov	r0, r6
 8011600:	4639      	mov	r1, r7
 8011602:	f7ee fe1f 	bl	8000244 <__adddf3>
 8011606:	4606      	mov	r6, r0
 8011608:	460f      	mov	r7, r1
 801160a:	f7ef fa81 	bl	8000b10 <__aeabi_d2iz>
 801160e:	2200      	movs	r2, #0
 8011610:	4682      	mov	sl, r0
 8011612:	2300      	movs	r3, #0
 8011614:	4630      	mov	r0, r6
 8011616:	4639      	mov	r1, r7
 8011618:	f7ef fa3c 	bl	8000a94 <__aeabi_dcmplt>
 801161c:	b148      	cbz	r0, 8011632 <_dtoa_r+0x17a>
 801161e:	4650      	mov	r0, sl
 8011620:	f7ee ff5c 	bl	80004dc <__aeabi_i2d>
 8011624:	4632      	mov	r2, r6
 8011626:	463b      	mov	r3, r7
 8011628:	f7ef fa2a 	bl	8000a80 <__aeabi_dcmpeq>
 801162c:	b908      	cbnz	r0, 8011632 <_dtoa_r+0x17a>
 801162e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011632:	f1ba 0f16 	cmp.w	sl, #22
 8011636:	d858      	bhi.n	80116ea <_dtoa_r+0x232>
 8011638:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801163c:	4b57      	ldr	r3, [pc, #348]	; (801179c <_dtoa_r+0x2e4>)
 801163e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011646:	f7ef fa25 	bl	8000a94 <__aeabi_dcmplt>
 801164a:	2800      	cmp	r0, #0
 801164c:	d04f      	beq.n	80116ee <_dtoa_r+0x236>
 801164e:	2300      	movs	r3, #0
 8011650:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011654:	930f      	str	r3, [sp, #60]	; 0x3c
 8011656:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011658:	1b1c      	subs	r4, r3, r4
 801165a:	1e63      	subs	r3, r4, #1
 801165c:	9309      	str	r3, [sp, #36]	; 0x24
 801165e:	bf49      	itett	mi
 8011660:	f1c4 0301 	rsbmi	r3, r4, #1
 8011664:	2300      	movpl	r3, #0
 8011666:	9306      	strmi	r3, [sp, #24]
 8011668:	2300      	movmi	r3, #0
 801166a:	bf54      	ite	pl
 801166c:	9306      	strpl	r3, [sp, #24]
 801166e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8011670:	f1ba 0f00 	cmp.w	sl, #0
 8011674:	db3d      	blt.n	80116f2 <_dtoa_r+0x23a>
 8011676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011678:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801167c:	4453      	add	r3, sl
 801167e:	9309      	str	r3, [sp, #36]	; 0x24
 8011680:	2300      	movs	r3, #0
 8011682:	930a      	str	r3, [sp, #40]	; 0x28
 8011684:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011686:	2b09      	cmp	r3, #9
 8011688:	f200 808c 	bhi.w	80117a4 <_dtoa_r+0x2ec>
 801168c:	2b05      	cmp	r3, #5
 801168e:	bfc4      	itt	gt
 8011690:	3b04      	subgt	r3, #4
 8011692:	9322      	strgt	r3, [sp, #136]	; 0x88
 8011694:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011696:	bfc8      	it	gt
 8011698:	2400      	movgt	r4, #0
 801169a:	f1a3 0302 	sub.w	r3, r3, #2
 801169e:	bfd8      	it	le
 80116a0:	2401      	movle	r4, #1
 80116a2:	2b03      	cmp	r3, #3
 80116a4:	f200 808a 	bhi.w	80117bc <_dtoa_r+0x304>
 80116a8:	e8df f003 	tbb	[pc, r3]
 80116ac:	5b4d4f2d 	.word	0x5b4d4f2d
 80116b0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80116b4:	441c      	add	r4, r3
 80116b6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80116ba:	2b20      	cmp	r3, #32
 80116bc:	bfc3      	ittte	gt
 80116be:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80116c2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80116c6:	fa09 f303 	lslgt.w	r3, r9, r3
 80116ca:	f1c3 0320 	rsble	r3, r3, #32
 80116ce:	bfc6      	itte	gt
 80116d0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80116d4:	4318      	orrgt	r0, r3
 80116d6:	fa06 f003 	lslle.w	r0, r6, r3
 80116da:	f7ee feef 	bl	80004bc <__aeabi_ui2d>
 80116de:	2301      	movs	r3, #1
 80116e0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80116e4:	3c01      	subs	r4, #1
 80116e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80116e8:	e76f      	b.n	80115ca <_dtoa_r+0x112>
 80116ea:	2301      	movs	r3, #1
 80116ec:	e7b2      	b.n	8011654 <_dtoa_r+0x19c>
 80116ee:	900f      	str	r0, [sp, #60]	; 0x3c
 80116f0:	e7b1      	b.n	8011656 <_dtoa_r+0x19e>
 80116f2:	9b06      	ldr	r3, [sp, #24]
 80116f4:	eba3 030a 	sub.w	r3, r3, sl
 80116f8:	9306      	str	r3, [sp, #24]
 80116fa:	f1ca 0300 	rsb	r3, sl, #0
 80116fe:	930a      	str	r3, [sp, #40]	; 0x28
 8011700:	2300      	movs	r3, #0
 8011702:	930e      	str	r3, [sp, #56]	; 0x38
 8011704:	e7be      	b.n	8011684 <_dtoa_r+0x1cc>
 8011706:	2300      	movs	r3, #0
 8011708:	930b      	str	r3, [sp, #44]	; 0x2c
 801170a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801170c:	2b00      	cmp	r3, #0
 801170e:	dc58      	bgt.n	80117c2 <_dtoa_r+0x30a>
 8011710:	f04f 0901 	mov.w	r9, #1
 8011714:	464b      	mov	r3, r9
 8011716:	f8cd 9020 	str.w	r9, [sp, #32]
 801171a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 801171e:	2200      	movs	r2, #0
 8011720:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8011722:	6042      	str	r2, [r0, #4]
 8011724:	2204      	movs	r2, #4
 8011726:	f102 0614 	add.w	r6, r2, #20
 801172a:	429e      	cmp	r6, r3
 801172c:	6841      	ldr	r1, [r0, #4]
 801172e:	d94e      	bls.n	80117ce <_dtoa_r+0x316>
 8011730:	4628      	mov	r0, r5
 8011732:	f000 fce9 	bl	8012108 <_Balloc>
 8011736:	9003      	str	r0, [sp, #12]
 8011738:	2800      	cmp	r0, #0
 801173a:	d14c      	bne.n	80117d6 <_dtoa_r+0x31e>
 801173c:	4602      	mov	r2, r0
 801173e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011742:	4b17      	ldr	r3, [pc, #92]	; (80117a0 <_dtoa_r+0x2e8>)
 8011744:	e6cc      	b.n	80114e0 <_dtoa_r+0x28>
 8011746:	2301      	movs	r3, #1
 8011748:	e7de      	b.n	8011708 <_dtoa_r+0x250>
 801174a:	2300      	movs	r3, #0
 801174c:	930b      	str	r3, [sp, #44]	; 0x2c
 801174e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011750:	eb0a 0903 	add.w	r9, sl, r3
 8011754:	f109 0301 	add.w	r3, r9, #1
 8011758:	2b01      	cmp	r3, #1
 801175a:	9308      	str	r3, [sp, #32]
 801175c:	bfb8      	it	lt
 801175e:	2301      	movlt	r3, #1
 8011760:	e7dd      	b.n	801171e <_dtoa_r+0x266>
 8011762:	2301      	movs	r3, #1
 8011764:	e7f2      	b.n	801174c <_dtoa_r+0x294>
 8011766:	bf00      	nop
 8011768:	636f4361 	.word	0x636f4361
 801176c:	3fd287a7 	.word	0x3fd287a7
 8011770:	8b60c8b3 	.word	0x8b60c8b3
 8011774:	3fc68a28 	.word	0x3fc68a28
 8011778:	509f79fb 	.word	0x509f79fb
 801177c:	3fd34413 	.word	0x3fd34413
 8011780:	08013ca0 	.word	0x08013ca0
 8011784:	08013e5e 	.word	0x08013e5e
 8011788:	7ff00000 	.word	0x7ff00000
 801178c:	08013e5a 	.word	0x08013e5a
 8011790:	08013e51 	.word	0x08013e51
 8011794:	08013c7d 	.word	0x08013c7d
 8011798:	3ff80000 	.word	0x3ff80000
 801179c:	08013f50 	.word	0x08013f50
 80117a0:	08013eb9 	.word	0x08013eb9
 80117a4:	2401      	movs	r4, #1
 80117a6:	2300      	movs	r3, #0
 80117a8:	940b      	str	r4, [sp, #44]	; 0x2c
 80117aa:	9322      	str	r3, [sp, #136]	; 0x88
 80117ac:	f04f 39ff 	mov.w	r9, #4294967295
 80117b0:	2200      	movs	r2, #0
 80117b2:	2312      	movs	r3, #18
 80117b4:	f8cd 9020 	str.w	r9, [sp, #32]
 80117b8:	9223      	str	r2, [sp, #140]	; 0x8c
 80117ba:	e7b0      	b.n	801171e <_dtoa_r+0x266>
 80117bc:	2301      	movs	r3, #1
 80117be:	930b      	str	r3, [sp, #44]	; 0x2c
 80117c0:	e7f4      	b.n	80117ac <_dtoa_r+0x2f4>
 80117c2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80117c6:	464b      	mov	r3, r9
 80117c8:	f8cd 9020 	str.w	r9, [sp, #32]
 80117cc:	e7a7      	b.n	801171e <_dtoa_r+0x266>
 80117ce:	3101      	adds	r1, #1
 80117d0:	6041      	str	r1, [r0, #4]
 80117d2:	0052      	lsls	r2, r2, #1
 80117d4:	e7a7      	b.n	8011726 <_dtoa_r+0x26e>
 80117d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80117d8:	9a03      	ldr	r2, [sp, #12]
 80117da:	601a      	str	r2, [r3, #0]
 80117dc:	9b08      	ldr	r3, [sp, #32]
 80117de:	2b0e      	cmp	r3, #14
 80117e0:	f200 80a8 	bhi.w	8011934 <_dtoa_r+0x47c>
 80117e4:	2c00      	cmp	r4, #0
 80117e6:	f000 80a5 	beq.w	8011934 <_dtoa_r+0x47c>
 80117ea:	f1ba 0f00 	cmp.w	sl, #0
 80117ee:	dd34      	ble.n	801185a <_dtoa_r+0x3a2>
 80117f0:	4a9a      	ldr	r2, [pc, #616]	; (8011a5c <_dtoa_r+0x5a4>)
 80117f2:	f00a 030f 	and.w	r3, sl, #15
 80117f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80117fa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80117fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011802:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8011806:	ea4f 142a 	mov.w	r4, sl, asr #4
 801180a:	d016      	beq.n	801183a <_dtoa_r+0x382>
 801180c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011810:	4b93      	ldr	r3, [pc, #588]	; (8011a60 <_dtoa_r+0x5a8>)
 8011812:	2703      	movs	r7, #3
 8011814:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011818:	f7ee fff4 	bl	8000804 <__aeabi_ddiv>
 801181c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011820:	f004 040f 	and.w	r4, r4, #15
 8011824:	4e8e      	ldr	r6, [pc, #568]	; (8011a60 <_dtoa_r+0x5a8>)
 8011826:	b954      	cbnz	r4, 801183e <_dtoa_r+0x386>
 8011828:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801182c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011830:	f7ee ffe8 	bl	8000804 <__aeabi_ddiv>
 8011834:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011838:	e029      	b.n	801188e <_dtoa_r+0x3d6>
 801183a:	2702      	movs	r7, #2
 801183c:	e7f2      	b.n	8011824 <_dtoa_r+0x36c>
 801183e:	07e1      	lsls	r1, r4, #31
 8011840:	d508      	bpl.n	8011854 <_dtoa_r+0x39c>
 8011842:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011846:	e9d6 2300 	ldrd	r2, r3, [r6]
 801184a:	f7ee feb1 	bl	80005b0 <__aeabi_dmul>
 801184e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011852:	3701      	adds	r7, #1
 8011854:	1064      	asrs	r4, r4, #1
 8011856:	3608      	adds	r6, #8
 8011858:	e7e5      	b.n	8011826 <_dtoa_r+0x36e>
 801185a:	f000 80a5 	beq.w	80119a8 <_dtoa_r+0x4f0>
 801185e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011862:	f1ca 0400 	rsb	r4, sl, #0
 8011866:	4b7d      	ldr	r3, [pc, #500]	; (8011a5c <_dtoa_r+0x5a4>)
 8011868:	f004 020f 	and.w	r2, r4, #15
 801186c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011874:	f7ee fe9c 	bl	80005b0 <__aeabi_dmul>
 8011878:	2702      	movs	r7, #2
 801187a:	2300      	movs	r3, #0
 801187c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011880:	4e77      	ldr	r6, [pc, #476]	; (8011a60 <_dtoa_r+0x5a8>)
 8011882:	1124      	asrs	r4, r4, #4
 8011884:	2c00      	cmp	r4, #0
 8011886:	f040 8084 	bne.w	8011992 <_dtoa_r+0x4da>
 801188a:	2b00      	cmp	r3, #0
 801188c:	d1d2      	bne.n	8011834 <_dtoa_r+0x37c>
 801188e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011890:	2b00      	cmp	r3, #0
 8011892:	f000 808b 	beq.w	80119ac <_dtoa_r+0x4f4>
 8011896:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801189a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801189e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80118a2:	2200      	movs	r2, #0
 80118a4:	4b6f      	ldr	r3, [pc, #444]	; (8011a64 <_dtoa_r+0x5ac>)
 80118a6:	f7ef f8f5 	bl	8000a94 <__aeabi_dcmplt>
 80118aa:	2800      	cmp	r0, #0
 80118ac:	d07e      	beq.n	80119ac <_dtoa_r+0x4f4>
 80118ae:	9b08      	ldr	r3, [sp, #32]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d07b      	beq.n	80119ac <_dtoa_r+0x4f4>
 80118b4:	f1b9 0f00 	cmp.w	r9, #0
 80118b8:	dd38      	ble.n	801192c <_dtoa_r+0x474>
 80118ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80118be:	2200      	movs	r2, #0
 80118c0:	4b69      	ldr	r3, [pc, #420]	; (8011a68 <_dtoa_r+0x5b0>)
 80118c2:	f7ee fe75 	bl	80005b0 <__aeabi_dmul>
 80118c6:	464c      	mov	r4, r9
 80118c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80118cc:	f10a 38ff 	add.w	r8, sl, #4294967295
 80118d0:	3701      	adds	r7, #1
 80118d2:	4638      	mov	r0, r7
 80118d4:	f7ee fe02 	bl	80004dc <__aeabi_i2d>
 80118d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80118dc:	f7ee fe68 	bl	80005b0 <__aeabi_dmul>
 80118e0:	2200      	movs	r2, #0
 80118e2:	4b62      	ldr	r3, [pc, #392]	; (8011a6c <_dtoa_r+0x5b4>)
 80118e4:	f7ee fcae 	bl	8000244 <__adddf3>
 80118e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80118ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80118f0:	9611      	str	r6, [sp, #68]	; 0x44
 80118f2:	2c00      	cmp	r4, #0
 80118f4:	d15d      	bne.n	80119b2 <_dtoa_r+0x4fa>
 80118f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80118fa:	2200      	movs	r2, #0
 80118fc:	4b5c      	ldr	r3, [pc, #368]	; (8011a70 <_dtoa_r+0x5b8>)
 80118fe:	f7ee fc9f 	bl	8000240 <__aeabi_dsub>
 8011902:	4602      	mov	r2, r0
 8011904:	460b      	mov	r3, r1
 8011906:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801190a:	4633      	mov	r3, r6
 801190c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801190e:	f7ef f8df 	bl	8000ad0 <__aeabi_dcmpgt>
 8011912:	2800      	cmp	r0, #0
 8011914:	f040 829c 	bne.w	8011e50 <_dtoa_r+0x998>
 8011918:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801191c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801191e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011922:	f7ef f8b7 	bl	8000a94 <__aeabi_dcmplt>
 8011926:	2800      	cmp	r0, #0
 8011928:	f040 8290 	bne.w	8011e4c <_dtoa_r+0x994>
 801192c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8011930:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011934:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011936:	2b00      	cmp	r3, #0
 8011938:	f2c0 8152 	blt.w	8011be0 <_dtoa_r+0x728>
 801193c:	f1ba 0f0e 	cmp.w	sl, #14
 8011940:	f300 814e 	bgt.w	8011be0 <_dtoa_r+0x728>
 8011944:	4b45      	ldr	r3, [pc, #276]	; (8011a5c <_dtoa_r+0x5a4>)
 8011946:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801194a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801194e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8011952:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011954:	2b00      	cmp	r3, #0
 8011956:	f280 80db 	bge.w	8011b10 <_dtoa_r+0x658>
 801195a:	9b08      	ldr	r3, [sp, #32]
 801195c:	2b00      	cmp	r3, #0
 801195e:	f300 80d7 	bgt.w	8011b10 <_dtoa_r+0x658>
 8011962:	f040 8272 	bne.w	8011e4a <_dtoa_r+0x992>
 8011966:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801196a:	2200      	movs	r2, #0
 801196c:	4b40      	ldr	r3, [pc, #256]	; (8011a70 <_dtoa_r+0x5b8>)
 801196e:	f7ee fe1f 	bl	80005b0 <__aeabi_dmul>
 8011972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011976:	f7ef f8a1 	bl	8000abc <__aeabi_dcmpge>
 801197a:	9c08      	ldr	r4, [sp, #32]
 801197c:	4626      	mov	r6, r4
 801197e:	2800      	cmp	r0, #0
 8011980:	f040 8248 	bne.w	8011e14 <_dtoa_r+0x95c>
 8011984:	2331      	movs	r3, #49	; 0x31
 8011986:	9f03      	ldr	r7, [sp, #12]
 8011988:	f10a 0a01 	add.w	sl, sl, #1
 801198c:	f807 3b01 	strb.w	r3, [r7], #1
 8011990:	e244      	b.n	8011e1c <_dtoa_r+0x964>
 8011992:	07e2      	lsls	r2, r4, #31
 8011994:	d505      	bpl.n	80119a2 <_dtoa_r+0x4ea>
 8011996:	e9d6 2300 	ldrd	r2, r3, [r6]
 801199a:	f7ee fe09 	bl	80005b0 <__aeabi_dmul>
 801199e:	2301      	movs	r3, #1
 80119a0:	3701      	adds	r7, #1
 80119a2:	1064      	asrs	r4, r4, #1
 80119a4:	3608      	adds	r6, #8
 80119a6:	e76d      	b.n	8011884 <_dtoa_r+0x3cc>
 80119a8:	2702      	movs	r7, #2
 80119aa:	e770      	b.n	801188e <_dtoa_r+0x3d6>
 80119ac:	46d0      	mov	r8, sl
 80119ae:	9c08      	ldr	r4, [sp, #32]
 80119b0:	e78f      	b.n	80118d2 <_dtoa_r+0x41a>
 80119b2:	9903      	ldr	r1, [sp, #12]
 80119b4:	4b29      	ldr	r3, [pc, #164]	; (8011a5c <_dtoa_r+0x5a4>)
 80119b6:	4421      	add	r1, r4
 80119b8:	9112      	str	r1, [sp, #72]	; 0x48
 80119ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80119bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80119c0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80119c4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80119c8:	2900      	cmp	r1, #0
 80119ca:	d055      	beq.n	8011a78 <_dtoa_r+0x5c0>
 80119cc:	2000      	movs	r0, #0
 80119ce:	4929      	ldr	r1, [pc, #164]	; (8011a74 <_dtoa_r+0x5bc>)
 80119d0:	f7ee ff18 	bl	8000804 <__aeabi_ddiv>
 80119d4:	463b      	mov	r3, r7
 80119d6:	4632      	mov	r2, r6
 80119d8:	f7ee fc32 	bl	8000240 <__aeabi_dsub>
 80119dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80119e0:	9f03      	ldr	r7, [sp, #12]
 80119e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80119e6:	f7ef f893 	bl	8000b10 <__aeabi_d2iz>
 80119ea:	4604      	mov	r4, r0
 80119ec:	f7ee fd76 	bl	80004dc <__aeabi_i2d>
 80119f0:	4602      	mov	r2, r0
 80119f2:	460b      	mov	r3, r1
 80119f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80119f8:	f7ee fc22 	bl	8000240 <__aeabi_dsub>
 80119fc:	4602      	mov	r2, r0
 80119fe:	460b      	mov	r3, r1
 8011a00:	3430      	adds	r4, #48	; 0x30
 8011a02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011a06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011a0a:	f807 4b01 	strb.w	r4, [r7], #1
 8011a0e:	f7ef f841 	bl	8000a94 <__aeabi_dcmplt>
 8011a12:	2800      	cmp	r0, #0
 8011a14:	d174      	bne.n	8011b00 <_dtoa_r+0x648>
 8011a16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a1a:	2000      	movs	r0, #0
 8011a1c:	4911      	ldr	r1, [pc, #68]	; (8011a64 <_dtoa_r+0x5ac>)
 8011a1e:	f7ee fc0f 	bl	8000240 <__aeabi_dsub>
 8011a22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011a26:	f7ef f835 	bl	8000a94 <__aeabi_dcmplt>
 8011a2a:	2800      	cmp	r0, #0
 8011a2c:	f040 80b7 	bne.w	8011b9e <_dtoa_r+0x6e6>
 8011a30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011a32:	429f      	cmp	r7, r3
 8011a34:	f43f af7a 	beq.w	801192c <_dtoa_r+0x474>
 8011a38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	4b0a      	ldr	r3, [pc, #40]	; (8011a68 <_dtoa_r+0x5b0>)
 8011a40:	f7ee fdb6 	bl	80005b0 <__aeabi_dmul>
 8011a44:	2200      	movs	r2, #0
 8011a46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011a4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011a4e:	4b06      	ldr	r3, [pc, #24]	; (8011a68 <_dtoa_r+0x5b0>)
 8011a50:	f7ee fdae 	bl	80005b0 <__aeabi_dmul>
 8011a54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011a58:	e7c3      	b.n	80119e2 <_dtoa_r+0x52a>
 8011a5a:	bf00      	nop
 8011a5c:	08013f50 	.word	0x08013f50
 8011a60:	08013f28 	.word	0x08013f28
 8011a64:	3ff00000 	.word	0x3ff00000
 8011a68:	40240000 	.word	0x40240000
 8011a6c:	401c0000 	.word	0x401c0000
 8011a70:	40140000 	.word	0x40140000
 8011a74:	3fe00000 	.word	0x3fe00000
 8011a78:	4630      	mov	r0, r6
 8011a7a:	4639      	mov	r1, r7
 8011a7c:	f7ee fd98 	bl	80005b0 <__aeabi_dmul>
 8011a80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011a82:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011a86:	9c03      	ldr	r4, [sp, #12]
 8011a88:	9314      	str	r3, [sp, #80]	; 0x50
 8011a8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011a8e:	f7ef f83f 	bl	8000b10 <__aeabi_d2iz>
 8011a92:	9015      	str	r0, [sp, #84]	; 0x54
 8011a94:	f7ee fd22 	bl	80004dc <__aeabi_i2d>
 8011a98:	4602      	mov	r2, r0
 8011a9a:	460b      	mov	r3, r1
 8011a9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011aa0:	f7ee fbce 	bl	8000240 <__aeabi_dsub>
 8011aa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011aa6:	4606      	mov	r6, r0
 8011aa8:	3330      	adds	r3, #48	; 0x30
 8011aaa:	f804 3b01 	strb.w	r3, [r4], #1
 8011aae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011ab0:	460f      	mov	r7, r1
 8011ab2:	429c      	cmp	r4, r3
 8011ab4:	f04f 0200 	mov.w	r2, #0
 8011ab8:	d124      	bne.n	8011b04 <_dtoa_r+0x64c>
 8011aba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011abe:	4bb0      	ldr	r3, [pc, #704]	; (8011d80 <_dtoa_r+0x8c8>)
 8011ac0:	f7ee fbc0 	bl	8000244 <__adddf3>
 8011ac4:	4602      	mov	r2, r0
 8011ac6:	460b      	mov	r3, r1
 8011ac8:	4630      	mov	r0, r6
 8011aca:	4639      	mov	r1, r7
 8011acc:	f7ef f800 	bl	8000ad0 <__aeabi_dcmpgt>
 8011ad0:	2800      	cmp	r0, #0
 8011ad2:	d163      	bne.n	8011b9c <_dtoa_r+0x6e4>
 8011ad4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011ad8:	2000      	movs	r0, #0
 8011ada:	49a9      	ldr	r1, [pc, #676]	; (8011d80 <_dtoa_r+0x8c8>)
 8011adc:	f7ee fbb0 	bl	8000240 <__aeabi_dsub>
 8011ae0:	4602      	mov	r2, r0
 8011ae2:	460b      	mov	r3, r1
 8011ae4:	4630      	mov	r0, r6
 8011ae6:	4639      	mov	r1, r7
 8011ae8:	f7ee ffd4 	bl	8000a94 <__aeabi_dcmplt>
 8011aec:	2800      	cmp	r0, #0
 8011aee:	f43f af1d 	beq.w	801192c <_dtoa_r+0x474>
 8011af2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8011af4:	1e7b      	subs	r3, r7, #1
 8011af6:	9314      	str	r3, [sp, #80]	; 0x50
 8011af8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8011afc:	2b30      	cmp	r3, #48	; 0x30
 8011afe:	d0f8      	beq.n	8011af2 <_dtoa_r+0x63a>
 8011b00:	46c2      	mov	sl, r8
 8011b02:	e03b      	b.n	8011b7c <_dtoa_r+0x6c4>
 8011b04:	4b9f      	ldr	r3, [pc, #636]	; (8011d84 <_dtoa_r+0x8cc>)
 8011b06:	f7ee fd53 	bl	80005b0 <__aeabi_dmul>
 8011b0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011b0e:	e7bc      	b.n	8011a8a <_dtoa_r+0x5d2>
 8011b10:	9f03      	ldr	r7, [sp, #12]
 8011b12:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8011b16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011b1a:	4640      	mov	r0, r8
 8011b1c:	4649      	mov	r1, r9
 8011b1e:	f7ee fe71 	bl	8000804 <__aeabi_ddiv>
 8011b22:	f7ee fff5 	bl	8000b10 <__aeabi_d2iz>
 8011b26:	4604      	mov	r4, r0
 8011b28:	f7ee fcd8 	bl	80004dc <__aeabi_i2d>
 8011b2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011b30:	f7ee fd3e 	bl	80005b0 <__aeabi_dmul>
 8011b34:	4602      	mov	r2, r0
 8011b36:	460b      	mov	r3, r1
 8011b38:	4640      	mov	r0, r8
 8011b3a:	4649      	mov	r1, r9
 8011b3c:	f7ee fb80 	bl	8000240 <__aeabi_dsub>
 8011b40:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8011b44:	f807 6b01 	strb.w	r6, [r7], #1
 8011b48:	9e03      	ldr	r6, [sp, #12]
 8011b4a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8011b4e:	1bbe      	subs	r6, r7, r6
 8011b50:	45b4      	cmp	ip, r6
 8011b52:	4602      	mov	r2, r0
 8011b54:	460b      	mov	r3, r1
 8011b56:	d136      	bne.n	8011bc6 <_dtoa_r+0x70e>
 8011b58:	f7ee fb74 	bl	8000244 <__adddf3>
 8011b5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011b60:	4680      	mov	r8, r0
 8011b62:	4689      	mov	r9, r1
 8011b64:	f7ee ffb4 	bl	8000ad0 <__aeabi_dcmpgt>
 8011b68:	bb58      	cbnz	r0, 8011bc2 <_dtoa_r+0x70a>
 8011b6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011b6e:	4640      	mov	r0, r8
 8011b70:	4649      	mov	r1, r9
 8011b72:	f7ee ff85 	bl	8000a80 <__aeabi_dcmpeq>
 8011b76:	b108      	cbz	r0, 8011b7c <_dtoa_r+0x6c4>
 8011b78:	07e1      	lsls	r1, r4, #31
 8011b7a:	d422      	bmi.n	8011bc2 <_dtoa_r+0x70a>
 8011b7c:	4628      	mov	r0, r5
 8011b7e:	4659      	mov	r1, fp
 8011b80:	f000 fb02 	bl	8012188 <_Bfree>
 8011b84:	2300      	movs	r3, #0
 8011b86:	703b      	strb	r3, [r7, #0]
 8011b88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011b8a:	f10a 0001 	add.w	r0, sl, #1
 8011b8e:	6018      	str	r0, [r3, #0]
 8011b90:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	f43f acde 	beq.w	8011554 <_dtoa_r+0x9c>
 8011b98:	601f      	str	r7, [r3, #0]
 8011b9a:	e4db      	b.n	8011554 <_dtoa_r+0x9c>
 8011b9c:	4627      	mov	r7, r4
 8011b9e:	463b      	mov	r3, r7
 8011ba0:	461f      	mov	r7, r3
 8011ba2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011ba6:	2a39      	cmp	r2, #57	; 0x39
 8011ba8:	d107      	bne.n	8011bba <_dtoa_r+0x702>
 8011baa:	9a03      	ldr	r2, [sp, #12]
 8011bac:	429a      	cmp	r2, r3
 8011bae:	d1f7      	bne.n	8011ba0 <_dtoa_r+0x6e8>
 8011bb0:	2230      	movs	r2, #48	; 0x30
 8011bb2:	9903      	ldr	r1, [sp, #12]
 8011bb4:	f108 0801 	add.w	r8, r8, #1
 8011bb8:	700a      	strb	r2, [r1, #0]
 8011bba:	781a      	ldrb	r2, [r3, #0]
 8011bbc:	3201      	adds	r2, #1
 8011bbe:	701a      	strb	r2, [r3, #0]
 8011bc0:	e79e      	b.n	8011b00 <_dtoa_r+0x648>
 8011bc2:	46d0      	mov	r8, sl
 8011bc4:	e7eb      	b.n	8011b9e <_dtoa_r+0x6e6>
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	4b6e      	ldr	r3, [pc, #440]	; (8011d84 <_dtoa_r+0x8cc>)
 8011bca:	f7ee fcf1 	bl	80005b0 <__aeabi_dmul>
 8011bce:	2200      	movs	r2, #0
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	4680      	mov	r8, r0
 8011bd4:	4689      	mov	r9, r1
 8011bd6:	f7ee ff53 	bl	8000a80 <__aeabi_dcmpeq>
 8011bda:	2800      	cmp	r0, #0
 8011bdc:	d09b      	beq.n	8011b16 <_dtoa_r+0x65e>
 8011bde:	e7cd      	b.n	8011b7c <_dtoa_r+0x6c4>
 8011be0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011be2:	2a00      	cmp	r2, #0
 8011be4:	f000 80d0 	beq.w	8011d88 <_dtoa_r+0x8d0>
 8011be8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011bea:	2a01      	cmp	r2, #1
 8011bec:	f300 80ae 	bgt.w	8011d4c <_dtoa_r+0x894>
 8011bf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011bf2:	2a00      	cmp	r2, #0
 8011bf4:	f000 80a6 	beq.w	8011d44 <_dtoa_r+0x88c>
 8011bf8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011bfc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011bfe:	9f06      	ldr	r7, [sp, #24]
 8011c00:	9a06      	ldr	r2, [sp, #24]
 8011c02:	2101      	movs	r1, #1
 8011c04:	441a      	add	r2, r3
 8011c06:	9206      	str	r2, [sp, #24]
 8011c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c0a:	4628      	mov	r0, r5
 8011c0c:	441a      	add	r2, r3
 8011c0e:	9209      	str	r2, [sp, #36]	; 0x24
 8011c10:	f000 fb70 	bl	80122f4 <__i2b>
 8011c14:	4606      	mov	r6, r0
 8011c16:	2f00      	cmp	r7, #0
 8011c18:	dd0c      	ble.n	8011c34 <_dtoa_r+0x77c>
 8011c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	dd09      	ble.n	8011c34 <_dtoa_r+0x77c>
 8011c20:	42bb      	cmp	r3, r7
 8011c22:	bfa8      	it	ge
 8011c24:	463b      	movge	r3, r7
 8011c26:	9a06      	ldr	r2, [sp, #24]
 8011c28:	1aff      	subs	r7, r7, r3
 8011c2a:	1ad2      	subs	r2, r2, r3
 8011c2c:	9206      	str	r2, [sp, #24]
 8011c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c30:	1ad3      	subs	r3, r2, r3
 8011c32:	9309      	str	r3, [sp, #36]	; 0x24
 8011c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c36:	b1f3      	cbz	r3, 8011c76 <_dtoa_r+0x7be>
 8011c38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	f000 80a8 	beq.w	8011d90 <_dtoa_r+0x8d8>
 8011c40:	2c00      	cmp	r4, #0
 8011c42:	dd10      	ble.n	8011c66 <_dtoa_r+0x7ae>
 8011c44:	4631      	mov	r1, r6
 8011c46:	4622      	mov	r2, r4
 8011c48:	4628      	mov	r0, r5
 8011c4a:	f000 fc11 	bl	8012470 <__pow5mult>
 8011c4e:	465a      	mov	r2, fp
 8011c50:	4601      	mov	r1, r0
 8011c52:	4606      	mov	r6, r0
 8011c54:	4628      	mov	r0, r5
 8011c56:	f000 fb63 	bl	8012320 <__multiply>
 8011c5a:	4680      	mov	r8, r0
 8011c5c:	4659      	mov	r1, fp
 8011c5e:	4628      	mov	r0, r5
 8011c60:	f000 fa92 	bl	8012188 <_Bfree>
 8011c64:	46c3      	mov	fp, r8
 8011c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c68:	1b1a      	subs	r2, r3, r4
 8011c6a:	d004      	beq.n	8011c76 <_dtoa_r+0x7be>
 8011c6c:	4659      	mov	r1, fp
 8011c6e:	4628      	mov	r0, r5
 8011c70:	f000 fbfe 	bl	8012470 <__pow5mult>
 8011c74:	4683      	mov	fp, r0
 8011c76:	2101      	movs	r1, #1
 8011c78:	4628      	mov	r0, r5
 8011c7a:	f000 fb3b 	bl	80122f4 <__i2b>
 8011c7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c80:	4604      	mov	r4, r0
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	f340 8086 	ble.w	8011d94 <_dtoa_r+0x8dc>
 8011c88:	461a      	mov	r2, r3
 8011c8a:	4601      	mov	r1, r0
 8011c8c:	4628      	mov	r0, r5
 8011c8e:	f000 fbef 	bl	8012470 <__pow5mult>
 8011c92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011c94:	4604      	mov	r4, r0
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	dd7f      	ble.n	8011d9a <_dtoa_r+0x8e2>
 8011c9a:	f04f 0800 	mov.w	r8, #0
 8011c9e:	6923      	ldr	r3, [r4, #16]
 8011ca0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011ca4:	6918      	ldr	r0, [r3, #16]
 8011ca6:	f000 fad7 	bl	8012258 <__hi0bits>
 8011caa:	f1c0 0020 	rsb	r0, r0, #32
 8011cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cb0:	4418      	add	r0, r3
 8011cb2:	f010 001f 	ands.w	r0, r0, #31
 8011cb6:	f000 8092 	beq.w	8011dde <_dtoa_r+0x926>
 8011cba:	f1c0 0320 	rsb	r3, r0, #32
 8011cbe:	2b04      	cmp	r3, #4
 8011cc0:	f340 808a 	ble.w	8011dd8 <_dtoa_r+0x920>
 8011cc4:	f1c0 001c 	rsb	r0, r0, #28
 8011cc8:	9b06      	ldr	r3, [sp, #24]
 8011cca:	4407      	add	r7, r0
 8011ccc:	4403      	add	r3, r0
 8011cce:	9306      	str	r3, [sp, #24]
 8011cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cd2:	4403      	add	r3, r0
 8011cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8011cd6:	9b06      	ldr	r3, [sp, #24]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	dd05      	ble.n	8011ce8 <_dtoa_r+0x830>
 8011cdc:	4659      	mov	r1, fp
 8011cde:	461a      	mov	r2, r3
 8011ce0:	4628      	mov	r0, r5
 8011ce2:	f000 fc1f 	bl	8012524 <__lshift>
 8011ce6:	4683      	mov	fp, r0
 8011ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	dd05      	ble.n	8011cfa <_dtoa_r+0x842>
 8011cee:	4621      	mov	r1, r4
 8011cf0:	461a      	mov	r2, r3
 8011cf2:	4628      	mov	r0, r5
 8011cf4:	f000 fc16 	bl	8012524 <__lshift>
 8011cf8:	4604      	mov	r4, r0
 8011cfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d070      	beq.n	8011de2 <_dtoa_r+0x92a>
 8011d00:	4621      	mov	r1, r4
 8011d02:	4658      	mov	r0, fp
 8011d04:	f000 fc7e 	bl	8012604 <__mcmp>
 8011d08:	2800      	cmp	r0, #0
 8011d0a:	da6a      	bge.n	8011de2 <_dtoa_r+0x92a>
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	4659      	mov	r1, fp
 8011d10:	220a      	movs	r2, #10
 8011d12:	4628      	mov	r0, r5
 8011d14:	f000 fa5a 	bl	80121cc <__multadd>
 8011d18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d1a:	4683      	mov	fp, r0
 8011d1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	f000 8194 	beq.w	801204e <_dtoa_r+0xb96>
 8011d26:	4631      	mov	r1, r6
 8011d28:	2300      	movs	r3, #0
 8011d2a:	220a      	movs	r2, #10
 8011d2c:	4628      	mov	r0, r5
 8011d2e:	f000 fa4d 	bl	80121cc <__multadd>
 8011d32:	f1b9 0f00 	cmp.w	r9, #0
 8011d36:	4606      	mov	r6, r0
 8011d38:	f300 8093 	bgt.w	8011e62 <_dtoa_r+0x9aa>
 8011d3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011d3e:	2b02      	cmp	r3, #2
 8011d40:	dc57      	bgt.n	8011df2 <_dtoa_r+0x93a>
 8011d42:	e08e      	b.n	8011e62 <_dtoa_r+0x9aa>
 8011d44:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011d46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011d4a:	e757      	b.n	8011bfc <_dtoa_r+0x744>
 8011d4c:	9b08      	ldr	r3, [sp, #32]
 8011d4e:	1e5c      	subs	r4, r3, #1
 8011d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d52:	42a3      	cmp	r3, r4
 8011d54:	bfb7      	itett	lt
 8011d56:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011d58:	1b1c      	subge	r4, r3, r4
 8011d5a:	1ae2      	sublt	r2, r4, r3
 8011d5c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8011d5e:	bfbe      	ittt	lt
 8011d60:	940a      	strlt	r4, [sp, #40]	; 0x28
 8011d62:	189b      	addlt	r3, r3, r2
 8011d64:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011d66:	9b08      	ldr	r3, [sp, #32]
 8011d68:	bfb8      	it	lt
 8011d6a:	2400      	movlt	r4, #0
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	bfbb      	ittet	lt
 8011d70:	9b06      	ldrlt	r3, [sp, #24]
 8011d72:	9a08      	ldrlt	r2, [sp, #32]
 8011d74:	9f06      	ldrge	r7, [sp, #24]
 8011d76:	1a9f      	sublt	r7, r3, r2
 8011d78:	bfac      	ite	ge
 8011d7a:	9b08      	ldrge	r3, [sp, #32]
 8011d7c:	2300      	movlt	r3, #0
 8011d7e:	e73f      	b.n	8011c00 <_dtoa_r+0x748>
 8011d80:	3fe00000 	.word	0x3fe00000
 8011d84:	40240000 	.word	0x40240000
 8011d88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011d8a:	9f06      	ldr	r7, [sp, #24]
 8011d8c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8011d8e:	e742      	b.n	8011c16 <_dtoa_r+0x75e>
 8011d90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d92:	e76b      	b.n	8011c6c <_dtoa_r+0x7b4>
 8011d94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011d96:	2b01      	cmp	r3, #1
 8011d98:	dc19      	bgt.n	8011dce <_dtoa_r+0x916>
 8011d9a:	9b04      	ldr	r3, [sp, #16]
 8011d9c:	b9bb      	cbnz	r3, 8011dce <_dtoa_r+0x916>
 8011d9e:	9b05      	ldr	r3, [sp, #20]
 8011da0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011da4:	b99b      	cbnz	r3, 8011dce <_dtoa_r+0x916>
 8011da6:	9b05      	ldr	r3, [sp, #20]
 8011da8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011dac:	0d1b      	lsrs	r3, r3, #20
 8011dae:	051b      	lsls	r3, r3, #20
 8011db0:	b183      	cbz	r3, 8011dd4 <_dtoa_r+0x91c>
 8011db2:	f04f 0801 	mov.w	r8, #1
 8011db6:	9b06      	ldr	r3, [sp, #24]
 8011db8:	3301      	adds	r3, #1
 8011dba:	9306      	str	r3, [sp, #24]
 8011dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011dbe:	3301      	adds	r3, #1
 8011dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8011dc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	f47f af6a 	bne.w	8011c9e <_dtoa_r+0x7e6>
 8011dca:	2001      	movs	r0, #1
 8011dcc:	e76f      	b.n	8011cae <_dtoa_r+0x7f6>
 8011dce:	f04f 0800 	mov.w	r8, #0
 8011dd2:	e7f6      	b.n	8011dc2 <_dtoa_r+0x90a>
 8011dd4:	4698      	mov	r8, r3
 8011dd6:	e7f4      	b.n	8011dc2 <_dtoa_r+0x90a>
 8011dd8:	f43f af7d 	beq.w	8011cd6 <_dtoa_r+0x81e>
 8011ddc:	4618      	mov	r0, r3
 8011dde:	301c      	adds	r0, #28
 8011de0:	e772      	b.n	8011cc8 <_dtoa_r+0x810>
 8011de2:	9b08      	ldr	r3, [sp, #32]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	dc36      	bgt.n	8011e56 <_dtoa_r+0x99e>
 8011de8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011dea:	2b02      	cmp	r3, #2
 8011dec:	dd33      	ble.n	8011e56 <_dtoa_r+0x99e>
 8011dee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011df2:	f1b9 0f00 	cmp.w	r9, #0
 8011df6:	d10d      	bne.n	8011e14 <_dtoa_r+0x95c>
 8011df8:	4621      	mov	r1, r4
 8011dfa:	464b      	mov	r3, r9
 8011dfc:	2205      	movs	r2, #5
 8011dfe:	4628      	mov	r0, r5
 8011e00:	f000 f9e4 	bl	80121cc <__multadd>
 8011e04:	4601      	mov	r1, r0
 8011e06:	4604      	mov	r4, r0
 8011e08:	4658      	mov	r0, fp
 8011e0a:	f000 fbfb 	bl	8012604 <__mcmp>
 8011e0e:	2800      	cmp	r0, #0
 8011e10:	f73f adb8 	bgt.w	8011984 <_dtoa_r+0x4cc>
 8011e14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011e16:	9f03      	ldr	r7, [sp, #12]
 8011e18:	ea6f 0a03 	mvn.w	sl, r3
 8011e1c:	f04f 0800 	mov.w	r8, #0
 8011e20:	4621      	mov	r1, r4
 8011e22:	4628      	mov	r0, r5
 8011e24:	f000 f9b0 	bl	8012188 <_Bfree>
 8011e28:	2e00      	cmp	r6, #0
 8011e2a:	f43f aea7 	beq.w	8011b7c <_dtoa_r+0x6c4>
 8011e2e:	f1b8 0f00 	cmp.w	r8, #0
 8011e32:	d005      	beq.n	8011e40 <_dtoa_r+0x988>
 8011e34:	45b0      	cmp	r8, r6
 8011e36:	d003      	beq.n	8011e40 <_dtoa_r+0x988>
 8011e38:	4641      	mov	r1, r8
 8011e3a:	4628      	mov	r0, r5
 8011e3c:	f000 f9a4 	bl	8012188 <_Bfree>
 8011e40:	4631      	mov	r1, r6
 8011e42:	4628      	mov	r0, r5
 8011e44:	f000 f9a0 	bl	8012188 <_Bfree>
 8011e48:	e698      	b.n	8011b7c <_dtoa_r+0x6c4>
 8011e4a:	2400      	movs	r4, #0
 8011e4c:	4626      	mov	r6, r4
 8011e4e:	e7e1      	b.n	8011e14 <_dtoa_r+0x95c>
 8011e50:	46c2      	mov	sl, r8
 8011e52:	4626      	mov	r6, r4
 8011e54:	e596      	b.n	8011984 <_dtoa_r+0x4cc>
 8011e56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	f000 80fd 	beq.w	801205c <_dtoa_r+0xba4>
 8011e62:	2f00      	cmp	r7, #0
 8011e64:	dd05      	ble.n	8011e72 <_dtoa_r+0x9ba>
 8011e66:	4631      	mov	r1, r6
 8011e68:	463a      	mov	r2, r7
 8011e6a:	4628      	mov	r0, r5
 8011e6c:	f000 fb5a 	bl	8012524 <__lshift>
 8011e70:	4606      	mov	r6, r0
 8011e72:	f1b8 0f00 	cmp.w	r8, #0
 8011e76:	d05c      	beq.n	8011f32 <_dtoa_r+0xa7a>
 8011e78:	4628      	mov	r0, r5
 8011e7a:	6871      	ldr	r1, [r6, #4]
 8011e7c:	f000 f944 	bl	8012108 <_Balloc>
 8011e80:	4607      	mov	r7, r0
 8011e82:	b928      	cbnz	r0, 8011e90 <_dtoa_r+0x9d8>
 8011e84:	4602      	mov	r2, r0
 8011e86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011e8a:	4b7f      	ldr	r3, [pc, #508]	; (8012088 <_dtoa_r+0xbd0>)
 8011e8c:	f7ff bb28 	b.w	80114e0 <_dtoa_r+0x28>
 8011e90:	6932      	ldr	r2, [r6, #16]
 8011e92:	f106 010c 	add.w	r1, r6, #12
 8011e96:	3202      	adds	r2, #2
 8011e98:	0092      	lsls	r2, r2, #2
 8011e9a:	300c      	adds	r0, #12
 8011e9c:	f000 f926 	bl	80120ec <memcpy>
 8011ea0:	2201      	movs	r2, #1
 8011ea2:	4639      	mov	r1, r7
 8011ea4:	4628      	mov	r0, r5
 8011ea6:	f000 fb3d 	bl	8012524 <__lshift>
 8011eaa:	46b0      	mov	r8, r6
 8011eac:	4606      	mov	r6, r0
 8011eae:	9b03      	ldr	r3, [sp, #12]
 8011eb0:	3301      	adds	r3, #1
 8011eb2:	9308      	str	r3, [sp, #32]
 8011eb4:	9b03      	ldr	r3, [sp, #12]
 8011eb6:	444b      	add	r3, r9
 8011eb8:	930a      	str	r3, [sp, #40]	; 0x28
 8011eba:	9b04      	ldr	r3, [sp, #16]
 8011ebc:	f003 0301 	and.w	r3, r3, #1
 8011ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8011ec2:	9b08      	ldr	r3, [sp, #32]
 8011ec4:	4621      	mov	r1, r4
 8011ec6:	3b01      	subs	r3, #1
 8011ec8:	4658      	mov	r0, fp
 8011eca:	9304      	str	r3, [sp, #16]
 8011ecc:	f7ff fa68 	bl	80113a0 <quorem>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	4641      	mov	r1, r8
 8011ed4:	3330      	adds	r3, #48	; 0x30
 8011ed6:	9006      	str	r0, [sp, #24]
 8011ed8:	4658      	mov	r0, fp
 8011eda:	930b      	str	r3, [sp, #44]	; 0x2c
 8011edc:	f000 fb92 	bl	8012604 <__mcmp>
 8011ee0:	4632      	mov	r2, r6
 8011ee2:	4681      	mov	r9, r0
 8011ee4:	4621      	mov	r1, r4
 8011ee6:	4628      	mov	r0, r5
 8011ee8:	f000 fba8 	bl	801263c <__mdiff>
 8011eec:	68c2      	ldr	r2, [r0, #12]
 8011eee:	4607      	mov	r7, r0
 8011ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ef2:	bb02      	cbnz	r2, 8011f36 <_dtoa_r+0xa7e>
 8011ef4:	4601      	mov	r1, r0
 8011ef6:	4658      	mov	r0, fp
 8011ef8:	f000 fb84 	bl	8012604 <__mcmp>
 8011efc:	4602      	mov	r2, r0
 8011efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f00:	4639      	mov	r1, r7
 8011f02:	4628      	mov	r0, r5
 8011f04:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8011f08:	f000 f93e 	bl	8012188 <_Bfree>
 8011f0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011f0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011f10:	9f08      	ldr	r7, [sp, #32]
 8011f12:	ea43 0102 	orr.w	r1, r3, r2
 8011f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f18:	430b      	orrs	r3, r1
 8011f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011f1c:	d10d      	bne.n	8011f3a <_dtoa_r+0xa82>
 8011f1e:	2b39      	cmp	r3, #57	; 0x39
 8011f20:	d029      	beq.n	8011f76 <_dtoa_r+0xabe>
 8011f22:	f1b9 0f00 	cmp.w	r9, #0
 8011f26:	dd01      	ble.n	8011f2c <_dtoa_r+0xa74>
 8011f28:	9b06      	ldr	r3, [sp, #24]
 8011f2a:	3331      	adds	r3, #49	; 0x31
 8011f2c:	9a04      	ldr	r2, [sp, #16]
 8011f2e:	7013      	strb	r3, [r2, #0]
 8011f30:	e776      	b.n	8011e20 <_dtoa_r+0x968>
 8011f32:	4630      	mov	r0, r6
 8011f34:	e7b9      	b.n	8011eaa <_dtoa_r+0x9f2>
 8011f36:	2201      	movs	r2, #1
 8011f38:	e7e2      	b.n	8011f00 <_dtoa_r+0xa48>
 8011f3a:	f1b9 0f00 	cmp.w	r9, #0
 8011f3e:	db06      	blt.n	8011f4e <_dtoa_r+0xa96>
 8011f40:	9922      	ldr	r1, [sp, #136]	; 0x88
 8011f42:	ea41 0909 	orr.w	r9, r1, r9
 8011f46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011f48:	ea59 0101 	orrs.w	r1, r9, r1
 8011f4c:	d120      	bne.n	8011f90 <_dtoa_r+0xad8>
 8011f4e:	2a00      	cmp	r2, #0
 8011f50:	ddec      	ble.n	8011f2c <_dtoa_r+0xa74>
 8011f52:	4659      	mov	r1, fp
 8011f54:	2201      	movs	r2, #1
 8011f56:	4628      	mov	r0, r5
 8011f58:	9308      	str	r3, [sp, #32]
 8011f5a:	f000 fae3 	bl	8012524 <__lshift>
 8011f5e:	4621      	mov	r1, r4
 8011f60:	4683      	mov	fp, r0
 8011f62:	f000 fb4f 	bl	8012604 <__mcmp>
 8011f66:	2800      	cmp	r0, #0
 8011f68:	9b08      	ldr	r3, [sp, #32]
 8011f6a:	dc02      	bgt.n	8011f72 <_dtoa_r+0xaba>
 8011f6c:	d1de      	bne.n	8011f2c <_dtoa_r+0xa74>
 8011f6e:	07da      	lsls	r2, r3, #31
 8011f70:	d5dc      	bpl.n	8011f2c <_dtoa_r+0xa74>
 8011f72:	2b39      	cmp	r3, #57	; 0x39
 8011f74:	d1d8      	bne.n	8011f28 <_dtoa_r+0xa70>
 8011f76:	2339      	movs	r3, #57	; 0x39
 8011f78:	9a04      	ldr	r2, [sp, #16]
 8011f7a:	7013      	strb	r3, [r2, #0]
 8011f7c:	463b      	mov	r3, r7
 8011f7e:	461f      	mov	r7, r3
 8011f80:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8011f84:	3b01      	subs	r3, #1
 8011f86:	2a39      	cmp	r2, #57	; 0x39
 8011f88:	d050      	beq.n	801202c <_dtoa_r+0xb74>
 8011f8a:	3201      	adds	r2, #1
 8011f8c:	701a      	strb	r2, [r3, #0]
 8011f8e:	e747      	b.n	8011e20 <_dtoa_r+0x968>
 8011f90:	2a00      	cmp	r2, #0
 8011f92:	dd03      	ble.n	8011f9c <_dtoa_r+0xae4>
 8011f94:	2b39      	cmp	r3, #57	; 0x39
 8011f96:	d0ee      	beq.n	8011f76 <_dtoa_r+0xabe>
 8011f98:	3301      	adds	r3, #1
 8011f9a:	e7c7      	b.n	8011f2c <_dtoa_r+0xa74>
 8011f9c:	9a08      	ldr	r2, [sp, #32]
 8011f9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011fa0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011fa4:	428a      	cmp	r2, r1
 8011fa6:	d02a      	beq.n	8011ffe <_dtoa_r+0xb46>
 8011fa8:	4659      	mov	r1, fp
 8011faa:	2300      	movs	r3, #0
 8011fac:	220a      	movs	r2, #10
 8011fae:	4628      	mov	r0, r5
 8011fb0:	f000 f90c 	bl	80121cc <__multadd>
 8011fb4:	45b0      	cmp	r8, r6
 8011fb6:	4683      	mov	fp, r0
 8011fb8:	f04f 0300 	mov.w	r3, #0
 8011fbc:	f04f 020a 	mov.w	r2, #10
 8011fc0:	4641      	mov	r1, r8
 8011fc2:	4628      	mov	r0, r5
 8011fc4:	d107      	bne.n	8011fd6 <_dtoa_r+0xb1e>
 8011fc6:	f000 f901 	bl	80121cc <__multadd>
 8011fca:	4680      	mov	r8, r0
 8011fcc:	4606      	mov	r6, r0
 8011fce:	9b08      	ldr	r3, [sp, #32]
 8011fd0:	3301      	adds	r3, #1
 8011fd2:	9308      	str	r3, [sp, #32]
 8011fd4:	e775      	b.n	8011ec2 <_dtoa_r+0xa0a>
 8011fd6:	f000 f8f9 	bl	80121cc <__multadd>
 8011fda:	4631      	mov	r1, r6
 8011fdc:	4680      	mov	r8, r0
 8011fde:	2300      	movs	r3, #0
 8011fe0:	220a      	movs	r2, #10
 8011fe2:	4628      	mov	r0, r5
 8011fe4:	f000 f8f2 	bl	80121cc <__multadd>
 8011fe8:	4606      	mov	r6, r0
 8011fea:	e7f0      	b.n	8011fce <_dtoa_r+0xb16>
 8011fec:	f1b9 0f00 	cmp.w	r9, #0
 8011ff0:	bfcc      	ite	gt
 8011ff2:	464f      	movgt	r7, r9
 8011ff4:	2701      	movle	r7, #1
 8011ff6:	f04f 0800 	mov.w	r8, #0
 8011ffa:	9a03      	ldr	r2, [sp, #12]
 8011ffc:	4417      	add	r7, r2
 8011ffe:	4659      	mov	r1, fp
 8012000:	2201      	movs	r2, #1
 8012002:	4628      	mov	r0, r5
 8012004:	9308      	str	r3, [sp, #32]
 8012006:	f000 fa8d 	bl	8012524 <__lshift>
 801200a:	4621      	mov	r1, r4
 801200c:	4683      	mov	fp, r0
 801200e:	f000 faf9 	bl	8012604 <__mcmp>
 8012012:	2800      	cmp	r0, #0
 8012014:	dcb2      	bgt.n	8011f7c <_dtoa_r+0xac4>
 8012016:	d102      	bne.n	801201e <_dtoa_r+0xb66>
 8012018:	9b08      	ldr	r3, [sp, #32]
 801201a:	07db      	lsls	r3, r3, #31
 801201c:	d4ae      	bmi.n	8011f7c <_dtoa_r+0xac4>
 801201e:	463b      	mov	r3, r7
 8012020:	461f      	mov	r7, r3
 8012022:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012026:	2a30      	cmp	r2, #48	; 0x30
 8012028:	d0fa      	beq.n	8012020 <_dtoa_r+0xb68>
 801202a:	e6f9      	b.n	8011e20 <_dtoa_r+0x968>
 801202c:	9a03      	ldr	r2, [sp, #12]
 801202e:	429a      	cmp	r2, r3
 8012030:	d1a5      	bne.n	8011f7e <_dtoa_r+0xac6>
 8012032:	2331      	movs	r3, #49	; 0x31
 8012034:	f10a 0a01 	add.w	sl, sl, #1
 8012038:	e779      	b.n	8011f2e <_dtoa_r+0xa76>
 801203a:	4b14      	ldr	r3, [pc, #80]	; (801208c <_dtoa_r+0xbd4>)
 801203c:	f7ff baa8 	b.w	8011590 <_dtoa_r+0xd8>
 8012040:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012042:	2b00      	cmp	r3, #0
 8012044:	f47f aa81 	bne.w	801154a <_dtoa_r+0x92>
 8012048:	4b11      	ldr	r3, [pc, #68]	; (8012090 <_dtoa_r+0xbd8>)
 801204a:	f7ff baa1 	b.w	8011590 <_dtoa_r+0xd8>
 801204e:	f1b9 0f00 	cmp.w	r9, #0
 8012052:	dc03      	bgt.n	801205c <_dtoa_r+0xba4>
 8012054:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012056:	2b02      	cmp	r3, #2
 8012058:	f73f aecb 	bgt.w	8011df2 <_dtoa_r+0x93a>
 801205c:	9f03      	ldr	r7, [sp, #12]
 801205e:	4621      	mov	r1, r4
 8012060:	4658      	mov	r0, fp
 8012062:	f7ff f99d 	bl	80113a0 <quorem>
 8012066:	9a03      	ldr	r2, [sp, #12]
 8012068:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801206c:	f807 3b01 	strb.w	r3, [r7], #1
 8012070:	1aba      	subs	r2, r7, r2
 8012072:	4591      	cmp	r9, r2
 8012074:	ddba      	ble.n	8011fec <_dtoa_r+0xb34>
 8012076:	4659      	mov	r1, fp
 8012078:	2300      	movs	r3, #0
 801207a:	220a      	movs	r2, #10
 801207c:	4628      	mov	r0, r5
 801207e:	f000 f8a5 	bl	80121cc <__multadd>
 8012082:	4683      	mov	fp, r0
 8012084:	e7eb      	b.n	801205e <_dtoa_r+0xba6>
 8012086:	bf00      	nop
 8012088:	08013eb9 	.word	0x08013eb9
 801208c:	08013c7c 	.word	0x08013c7c
 8012090:	08013e51 	.word	0x08013e51

08012094 <fiprintf>:
 8012094:	b40e      	push	{r1, r2, r3}
 8012096:	b503      	push	{r0, r1, lr}
 8012098:	4601      	mov	r1, r0
 801209a:	ab03      	add	r3, sp, #12
 801209c:	4805      	ldr	r0, [pc, #20]	; (80120b4 <fiprintf+0x20>)
 801209e:	f853 2b04 	ldr.w	r2, [r3], #4
 80120a2:	6800      	ldr	r0, [r0, #0]
 80120a4:	9301      	str	r3, [sp, #4]
 80120a6:	f000 fe25 	bl	8012cf4 <_vfiprintf_r>
 80120aa:	b002      	add	sp, #8
 80120ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80120b0:	b003      	add	sp, #12
 80120b2:	4770      	bx	lr
 80120b4:	20000670 	.word	0x20000670

080120b8 <_localeconv_r>:
 80120b8:	4800      	ldr	r0, [pc, #0]	; (80120bc <_localeconv_r+0x4>)
 80120ba:	4770      	bx	lr
 80120bc:	200007c4 	.word	0x200007c4

080120c0 <malloc>:
 80120c0:	4b02      	ldr	r3, [pc, #8]	; (80120cc <malloc+0xc>)
 80120c2:	4601      	mov	r1, r0
 80120c4:	6818      	ldr	r0, [r3, #0]
 80120c6:	f000 bc1d 	b.w	8012904 <_malloc_r>
 80120ca:	bf00      	nop
 80120cc:	20000670 	.word	0x20000670

080120d0 <memchr>:
 80120d0:	4603      	mov	r3, r0
 80120d2:	b510      	push	{r4, lr}
 80120d4:	b2c9      	uxtb	r1, r1
 80120d6:	4402      	add	r2, r0
 80120d8:	4293      	cmp	r3, r2
 80120da:	4618      	mov	r0, r3
 80120dc:	d101      	bne.n	80120e2 <memchr+0x12>
 80120de:	2000      	movs	r0, #0
 80120e0:	e003      	b.n	80120ea <memchr+0x1a>
 80120e2:	7804      	ldrb	r4, [r0, #0]
 80120e4:	3301      	adds	r3, #1
 80120e6:	428c      	cmp	r4, r1
 80120e8:	d1f6      	bne.n	80120d8 <memchr+0x8>
 80120ea:	bd10      	pop	{r4, pc}

080120ec <memcpy>:
 80120ec:	440a      	add	r2, r1
 80120ee:	4291      	cmp	r1, r2
 80120f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80120f4:	d100      	bne.n	80120f8 <memcpy+0xc>
 80120f6:	4770      	bx	lr
 80120f8:	b510      	push	{r4, lr}
 80120fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80120fe:	4291      	cmp	r1, r2
 8012100:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012104:	d1f9      	bne.n	80120fa <memcpy+0xe>
 8012106:	bd10      	pop	{r4, pc}

08012108 <_Balloc>:
 8012108:	b570      	push	{r4, r5, r6, lr}
 801210a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801210c:	4604      	mov	r4, r0
 801210e:	460d      	mov	r5, r1
 8012110:	b976      	cbnz	r6, 8012130 <_Balloc+0x28>
 8012112:	2010      	movs	r0, #16
 8012114:	f7ff ffd4 	bl	80120c0 <malloc>
 8012118:	4602      	mov	r2, r0
 801211a:	6260      	str	r0, [r4, #36]	; 0x24
 801211c:	b920      	cbnz	r0, 8012128 <_Balloc+0x20>
 801211e:	2166      	movs	r1, #102	; 0x66
 8012120:	4b17      	ldr	r3, [pc, #92]	; (8012180 <_Balloc+0x78>)
 8012122:	4818      	ldr	r0, [pc, #96]	; (8012184 <_Balloc+0x7c>)
 8012124:	f7ff f91e 	bl	8011364 <__assert_func>
 8012128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801212c:	6006      	str	r6, [r0, #0]
 801212e:	60c6      	str	r6, [r0, #12]
 8012130:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012132:	68f3      	ldr	r3, [r6, #12]
 8012134:	b183      	cbz	r3, 8012158 <_Balloc+0x50>
 8012136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012138:	68db      	ldr	r3, [r3, #12]
 801213a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801213e:	b9b8      	cbnz	r0, 8012170 <_Balloc+0x68>
 8012140:	2101      	movs	r1, #1
 8012142:	fa01 f605 	lsl.w	r6, r1, r5
 8012146:	1d72      	adds	r2, r6, #5
 8012148:	4620      	mov	r0, r4
 801214a:	0092      	lsls	r2, r2, #2
 801214c:	f000 fb5e 	bl	801280c <_calloc_r>
 8012150:	b160      	cbz	r0, 801216c <_Balloc+0x64>
 8012152:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012156:	e00e      	b.n	8012176 <_Balloc+0x6e>
 8012158:	2221      	movs	r2, #33	; 0x21
 801215a:	2104      	movs	r1, #4
 801215c:	4620      	mov	r0, r4
 801215e:	f000 fb55 	bl	801280c <_calloc_r>
 8012162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012164:	60f0      	str	r0, [r6, #12]
 8012166:	68db      	ldr	r3, [r3, #12]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d1e4      	bne.n	8012136 <_Balloc+0x2e>
 801216c:	2000      	movs	r0, #0
 801216e:	bd70      	pop	{r4, r5, r6, pc}
 8012170:	6802      	ldr	r2, [r0, #0]
 8012172:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012176:	2300      	movs	r3, #0
 8012178:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801217c:	e7f7      	b.n	801216e <_Balloc+0x66>
 801217e:	bf00      	nop
 8012180:	08013ca0 	.word	0x08013ca0
 8012184:	08013eca 	.word	0x08013eca

08012188 <_Bfree>:
 8012188:	b570      	push	{r4, r5, r6, lr}
 801218a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801218c:	4605      	mov	r5, r0
 801218e:	460c      	mov	r4, r1
 8012190:	b976      	cbnz	r6, 80121b0 <_Bfree+0x28>
 8012192:	2010      	movs	r0, #16
 8012194:	f7ff ff94 	bl	80120c0 <malloc>
 8012198:	4602      	mov	r2, r0
 801219a:	6268      	str	r0, [r5, #36]	; 0x24
 801219c:	b920      	cbnz	r0, 80121a8 <_Bfree+0x20>
 801219e:	218a      	movs	r1, #138	; 0x8a
 80121a0:	4b08      	ldr	r3, [pc, #32]	; (80121c4 <_Bfree+0x3c>)
 80121a2:	4809      	ldr	r0, [pc, #36]	; (80121c8 <_Bfree+0x40>)
 80121a4:	f7ff f8de 	bl	8011364 <__assert_func>
 80121a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80121ac:	6006      	str	r6, [r0, #0]
 80121ae:	60c6      	str	r6, [r0, #12]
 80121b0:	b13c      	cbz	r4, 80121c2 <_Bfree+0x3a>
 80121b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80121b4:	6862      	ldr	r2, [r4, #4]
 80121b6:	68db      	ldr	r3, [r3, #12]
 80121b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80121bc:	6021      	str	r1, [r4, #0]
 80121be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80121c2:	bd70      	pop	{r4, r5, r6, pc}
 80121c4:	08013ca0 	.word	0x08013ca0
 80121c8:	08013eca 	.word	0x08013eca

080121cc <__multadd>:
 80121cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121d0:	4607      	mov	r7, r0
 80121d2:	460c      	mov	r4, r1
 80121d4:	461e      	mov	r6, r3
 80121d6:	2000      	movs	r0, #0
 80121d8:	690d      	ldr	r5, [r1, #16]
 80121da:	f101 0c14 	add.w	ip, r1, #20
 80121de:	f8dc 3000 	ldr.w	r3, [ip]
 80121e2:	3001      	adds	r0, #1
 80121e4:	b299      	uxth	r1, r3
 80121e6:	fb02 6101 	mla	r1, r2, r1, r6
 80121ea:	0c1e      	lsrs	r6, r3, #16
 80121ec:	0c0b      	lsrs	r3, r1, #16
 80121ee:	fb02 3306 	mla	r3, r2, r6, r3
 80121f2:	b289      	uxth	r1, r1
 80121f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80121f8:	4285      	cmp	r5, r0
 80121fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80121fe:	f84c 1b04 	str.w	r1, [ip], #4
 8012202:	dcec      	bgt.n	80121de <__multadd+0x12>
 8012204:	b30e      	cbz	r6, 801224a <__multadd+0x7e>
 8012206:	68a3      	ldr	r3, [r4, #8]
 8012208:	42ab      	cmp	r3, r5
 801220a:	dc19      	bgt.n	8012240 <__multadd+0x74>
 801220c:	6861      	ldr	r1, [r4, #4]
 801220e:	4638      	mov	r0, r7
 8012210:	3101      	adds	r1, #1
 8012212:	f7ff ff79 	bl	8012108 <_Balloc>
 8012216:	4680      	mov	r8, r0
 8012218:	b928      	cbnz	r0, 8012226 <__multadd+0x5a>
 801221a:	4602      	mov	r2, r0
 801221c:	21b5      	movs	r1, #181	; 0xb5
 801221e:	4b0c      	ldr	r3, [pc, #48]	; (8012250 <__multadd+0x84>)
 8012220:	480c      	ldr	r0, [pc, #48]	; (8012254 <__multadd+0x88>)
 8012222:	f7ff f89f 	bl	8011364 <__assert_func>
 8012226:	6922      	ldr	r2, [r4, #16]
 8012228:	f104 010c 	add.w	r1, r4, #12
 801222c:	3202      	adds	r2, #2
 801222e:	0092      	lsls	r2, r2, #2
 8012230:	300c      	adds	r0, #12
 8012232:	f7ff ff5b 	bl	80120ec <memcpy>
 8012236:	4621      	mov	r1, r4
 8012238:	4638      	mov	r0, r7
 801223a:	f7ff ffa5 	bl	8012188 <_Bfree>
 801223e:	4644      	mov	r4, r8
 8012240:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012244:	3501      	adds	r5, #1
 8012246:	615e      	str	r6, [r3, #20]
 8012248:	6125      	str	r5, [r4, #16]
 801224a:	4620      	mov	r0, r4
 801224c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012250:	08013eb9 	.word	0x08013eb9
 8012254:	08013eca 	.word	0x08013eca

08012258 <__hi0bits>:
 8012258:	0c02      	lsrs	r2, r0, #16
 801225a:	0412      	lsls	r2, r2, #16
 801225c:	4603      	mov	r3, r0
 801225e:	b9ca      	cbnz	r2, 8012294 <__hi0bits+0x3c>
 8012260:	0403      	lsls	r3, r0, #16
 8012262:	2010      	movs	r0, #16
 8012264:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012268:	bf04      	itt	eq
 801226a:	021b      	lsleq	r3, r3, #8
 801226c:	3008      	addeq	r0, #8
 801226e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8012272:	bf04      	itt	eq
 8012274:	011b      	lsleq	r3, r3, #4
 8012276:	3004      	addeq	r0, #4
 8012278:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801227c:	bf04      	itt	eq
 801227e:	009b      	lsleq	r3, r3, #2
 8012280:	3002      	addeq	r0, #2
 8012282:	2b00      	cmp	r3, #0
 8012284:	db05      	blt.n	8012292 <__hi0bits+0x3a>
 8012286:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801228a:	f100 0001 	add.w	r0, r0, #1
 801228e:	bf08      	it	eq
 8012290:	2020      	moveq	r0, #32
 8012292:	4770      	bx	lr
 8012294:	2000      	movs	r0, #0
 8012296:	e7e5      	b.n	8012264 <__hi0bits+0xc>

08012298 <__lo0bits>:
 8012298:	6803      	ldr	r3, [r0, #0]
 801229a:	4602      	mov	r2, r0
 801229c:	f013 0007 	ands.w	r0, r3, #7
 80122a0:	d00b      	beq.n	80122ba <__lo0bits+0x22>
 80122a2:	07d9      	lsls	r1, r3, #31
 80122a4:	d421      	bmi.n	80122ea <__lo0bits+0x52>
 80122a6:	0798      	lsls	r0, r3, #30
 80122a8:	bf49      	itett	mi
 80122aa:	085b      	lsrmi	r3, r3, #1
 80122ac:	089b      	lsrpl	r3, r3, #2
 80122ae:	2001      	movmi	r0, #1
 80122b0:	6013      	strmi	r3, [r2, #0]
 80122b2:	bf5c      	itt	pl
 80122b4:	2002      	movpl	r0, #2
 80122b6:	6013      	strpl	r3, [r2, #0]
 80122b8:	4770      	bx	lr
 80122ba:	b299      	uxth	r1, r3
 80122bc:	b909      	cbnz	r1, 80122c2 <__lo0bits+0x2a>
 80122be:	2010      	movs	r0, #16
 80122c0:	0c1b      	lsrs	r3, r3, #16
 80122c2:	b2d9      	uxtb	r1, r3
 80122c4:	b909      	cbnz	r1, 80122ca <__lo0bits+0x32>
 80122c6:	3008      	adds	r0, #8
 80122c8:	0a1b      	lsrs	r3, r3, #8
 80122ca:	0719      	lsls	r1, r3, #28
 80122cc:	bf04      	itt	eq
 80122ce:	091b      	lsreq	r3, r3, #4
 80122d0:	3004      	addeq	r0, #4
 80122d2:	0799      	lsls	r1, r3, #30
 80122d4:	bf04      	itt	eq
 80122d6:	089b      	lsreq	r3, r3, #2
 80122d8:	3002      	addeq	r0, #2
 80122da:	07d9      	lsls	r1, r3, #31
 80122dc:	d403      	bmi.n	80122e6 <__lo0bits+0x4e>
 80122de:	085b      	lsrs	r3, r3, #1
 80122e0:	f100 0001 	add.w	r0, r0, #1
 80122e4:	d003      	beq.n	80122ee <__lo0bits+0x56>
 80122e6:	6013      	str	r3, [r2, #0]
 80122e8:	4770      	bx	lr
 80122ea:	2000      	movs	r0, #0
 80122ec:	4770      	bx	lr
 80122ee:	2020      	movs	r0, #32
 80122f0:	4770      	bx	lr
	...

080122f4 <__i2b>:
 80122f4:	b510      	push	{r4, lr}
 80122f6:	460c      	mov	r4, r1
 80122f8:	2101      	movs	r1, #1
 80122fa:	f7ff ff05 	bl	8012108 <_Balloc>
 80122fe:	4602      	mov	r2, r0
 8012300:	b928      	cbnz	r0, 801230e <__i2b+0x1a>
 8012302:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012306:	4b04      	ldr	r3, [pc, #16]	; (8012318 <__i2b+0x24>)
 8012308:	4804      	ldr	r0, [pc, #16]	; (801231c <__i2b+0x28>)
 801230a:	f7ff f82b 	bl	8011364 <__assert_func>
 801230e:	2301      	movs	r3, #1
 8012310:	6144      	str	r4, [r0, #20]
 8012312:	6103      	str	r3, [r0, #16]
 8012314:	bd10      	pop	{r4, pc}
 8012316:	bf00      	nop
 8012318:	08013eb9 	.word	0x08013eb9
 801231c:	08013eca 	.word	0x08013eca

08012320 <__multiply>:
 8012320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012324:	4691      	mov	r9, r2
 8012326:	690a      	ldr	r2, [r1, #16]
 8012328:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801232c:	460c      	mov	r4, r1
 801232e:	429a      	cmp	r2, r3
 8012330:	bfbe      	ittt	lt
 8012332:	460b      	movlt	r3, r1
 8012334:	464c      	movlt	r4, r9
 8012336:	4699      	movlt	r9, r3
 8012338:	6927      	ldr	r7, [r4, #16]
 801233a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801233e:	68a3      	ldr	r3, [r4, #8]
 8012340:	6861      	ldr	r1, [r4, #4]
 8012342:	eb07 060a 	add.w	r6, r7, sl
 8012346:	42b3      	cmp	r3, r6
 8012348:	b085      	sub	sp, #20
 801234a:	bfb8      	it	lt
 801234c:	3101      	addlt	r1, #1
 801234e:	f7ff fedb 	bl	8012108 <_Balloc>
 8012352:	b930      	cbnz	r0, 8012362 <__multiply+0x42>
 8012354:	4602      	mov	r2, r0
 8012356:	f240 115d 	movw	r1, #349	; 0x15d
 801235a:	4b43      	ldr	r3, [pc, #268]	; (8012468 <__multiply+0x148>)
 801235c:	4843      	ldr	r0, [pc, #268]	; (801246c <__multiply+0x14c>)
 801235e:	f7ff f801 	bl	8011364 <__assert_func>
 8012362:	f100 0514 	add.w	r5, r0, #20
 8012366:	462b      	mov	r3, r5
 8012368:	2200      	movs	r2, #0
 801236a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801236e:	4543      	cmp	r3, r8
 8012370:	d321      	bcc.n	80123b6 <__multiply+0x96>
 8012372:	f104 0314 	add.w	r3, r4, #20
 8012376:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801237a:	f109 0314 	add.w	r3, r9, #20
 801237e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012382:	9202      	str	r2, [sp, #8]
 8012384:	1b3a      	subs	r2, r7, r4
 8012386:	3a15      	subs	r2, #21
 8012388:	f022 0203 	bic.w	r2, r2, #3
 801238c:	3204      	adds	r2, #4
 801238e:	f104 0115 	add.w	r1, r4, #21
 8012392:	428f      	cmp	r7, r1
 8012394:	bf38      	it	cc
 8012396:	2204      	movcc	r2, #4
 8012398:	9201      	str	r2, [sp, #4]
 801239a:	9a02      	ldr	r2, [sp, #8]
 801239c:	9303      	str	r3, [sp, #12]
 801239e:	429a      	cmp	r2, r3
 80123a0:	d80c      	bhi.n	80123bc <__multiply+0x9c>
 80123a2:	2e00      	cmp	r6, #0
 80123a4:	dd03      	ble.n	80123ae <__multiply+0x8e>
 80123a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d059      	beq.n	8012462 <__multiply+0x142>
 80123ae:	6106      	str	r6, [r0, #16]
 80123b0:	b005      	add	sp, #20
 80123b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123b6:	f843 2b04 	str.w	r2, [r3], #4
 80123ba:	e7d8      	b.n	801236e <__multiply+0x4e>
 80123bc:	f8b3 a000 	ldrh.w	sl, [r3]
 80123c0:	f1ba 0f00 	cmp.w	sl, #0
 80123c4:	d023      	beq.n	801240e <__multiply+0xee>
 80123c6:	46a9      	mov	r9, r5
 80123c8:	f04f 0c00 	mov.w	ip, #0
 80123cc:	f104 0e14 	add.w	lr, r4, #20
 80123d0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80123d4:	f8d9 1000 	ldr.w	r1, [r9]
 80123d8:	fa1f fb82 	uxth.w	fp, r2
 80123dc:	b289      	uxth	r1, r1
 80123de:	fb0a 110b 	mla	r1, sl, fp, r1
 80123e2:	4461      	add	r1, ip
 80123e4:	f8d9 c000 	ldr.w	ip, [r9]
 80123e8:	0c12      	lsrs	r2, r2, #16
 80123ea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80123ee:	fb0a c202 	mla	r2, sl, r2, ip
 80123f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80123f6:	b289      	uxth	r1, r1
 80123f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80123fc:	4577      	cmp	r7, lr
 80123fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012402:	f849 1b04 	str.w	r1, [r9], #4
 8012406:	d8e3      	bhi.n	80123d0 <__multiply+0xb0>
 8012408:	9a01      	ldr	r2, [sp, #4]
 801240a:	f845 c002 	str.w	ip, [r5, r2]
 801240e:	9a03      	ldr	r2, [sp, #12]
 8012410:	3304      	adds	r3, #4
 8012412:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012416:	f1b9 0f00 	cmp.w	r9, #0
 801241a:	d020      	beq.n	801245e <__multiply+0x13e>
 801241c:	46ae      	mov	lr, r5
 801241e:	f04f 0a00 	mov.w	sl, #0
 8012422:	6829      	ldr	r1, [r5, #0]
 8012424:	f104 0c14 	add.w	ip, r4, #20
 8012428:	f8bc b000 	ldrh.w	fp, [ip]
 801242c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012430:	b289      	uxth	r1, r1
 8012432:	fb09 220b 	mla	r2, r9, fp, r2
 8012436:	4492      	add	sl, r2
 8012438:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801243c:	f84e 1b04 	str.w	r1, [lr], #4
 8012440:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012444:	f8be 1000 	ldrh.w	r1, [lr]
 8012448:	0c12      	lsrs	r2, r2, #16
 801244a:	fb09 1102 	mla	r1, r9, r2, r1
 801244e:	4567      	cmp	r7, ip
 8012450:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012454:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012458:	d8e6      	bhi.n	8012428 <__multiply+0x108>
 801245a:	9a01      	ldr	r2, [sp, #4]
 801245c:	50a9      	str	r1, [r5, r2]
 801245e:	3504      	adds	r5, #4
 8012460:	e79b      	b.n	801239a <__multiply+0x7a>
 8012462:	3e01      	subs	r6, #1
 8012464:	e79d      	b.n	80123a2 <__multiply+0x82>
 8012466:	bf00      	nop
 8012468:	08013eb9 	.word	0x08013eb9
 801246c:	08013eca 	.word	0x08013eca

08012470 <__pow5mult>:
 8012470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012474:	4615      	mov	r5, r2
 8012476:	f012 0203 	ands.w	r2, r2, #3
 801247a:	4606      	mov	r6, r0
 801247c:	460f      	mov	r7, r1
 801247e:	d007      	beq.n	8012490 <__pow5mult+0x20>
 8012480:	4c25      	ldr	r4, [pc, #148]	; (8012518 <__pow5mult+0xa8>)
 8012482:	3a01      	subs	r2, #1
 8012484:	2300      	movs	r3, #0
 8012486:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801248a:	f7ff fe9f 	bl	80121cc <__multadd>
 801248e:	4607      	mov	r7, r0
 8012490:	10ad      	asrs	r5, r5, #2
 8012492:	d03d      	beq.n	8012510 <__pow5mult+0xa0>
 8012494:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012496:	b97c      	cbnz	r4, 80124b8 <__pow5mult+0x48>
 8012498:	2010      	movs	r0, #16
 801249a:	f7ff fe11 	bl	80120c0 <malloc>
 801249e:	4602      	mov	r2, r0
 80124a0:	6270      	str	r0, [r6, #36]	; 0x24
 80124a2:	b928      	cbnz	r0, 80124b0 <__pow5mult+0x40>
 80124a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80124a8:	4b1c      	ldr	r3, [pc, #112]	; (801251c <__pow5mult+0xac>)
 80124aa:	481d      	ldr	r0, [pc, #116]	; (8012520 <__pow5mult+0xb0>)
 80124ac:	f7fe ff5a 	bl	8011364 <__assert_func>
 80124b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80124b4:	6004      	str	r4, [r0, #0]
 80124b6:	60c4      	str	r4, [r0, #12]
 80124b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80124bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80124c0:	b94c      	cbnz	r4, 80124d6 <__pow5mult+0x66>
 80124c2:	f240 2171 	movw	r1, #625	; 0x271
 80124c6:	4630      	mov	r0, r6
 80124c8:	f7ff ff14 	bl	80122f4 <__i2b>
 80124cc:	2300      	movs	r3, #0
 80124ce:	4604      	mov	r4, r0
 80124d0:	f8c8 0008 	str.w	r0, [r8, #8]
 80124d4:	6003      	str	r3, [r0, #0]
 80124d6:	f04f 0900 	mov.w	r9, #0
 80124da:	07eb      	lsls	r3, r5, #31
 80124dc:	d50a      	bpl.n	80124f4 <__pow5mult+0x84>
 80124de:	4639      	mov	r1, r7
 80124e0:	4622      	mov	r2, r4
 80124e2:	4630      	mov	r0, r6
 80124e4:	f7ff ff1c 	bl	8012320 <__multiply>
 80124e8:	4680      	mov	r8, r0
 80124ea:	4639      	mov	r1, r7
 80124ec:	4630      	mov	r0, r6
 80124ee:	f7ff fe4b 	bl	8012188 <_Bfree>
 80124f2:	4647      	mov	r7, r8
 80124f4:	106d      	asrs	r5, r5, #1
 80124f6:	d00b      	beq.n	8012510 <__pow5mult+0xa0>
 80124f8:	6820      	ldr	r0, [r4, #0]
 80124fa:	b938      	cbnz	r0, 801250c <__pow5mult+0x9c>
 80124fc:	4622      	mov	r2, r4
 80124fe:	4621      	mov	r1, r4
 8012500:	4630      	mov	r0, r6
 8012502:	f7ff ff0d 	bl	8012320 <__multiply>
 8012506:	6020      	str	r0, [r4, #0]
 8012508:	f8c0 9000 	str.w	r9, [r0]
 801250c:	4604      	mov	r4, r0
 801250e:	e7e4      	b.n	80124da <__pow5mult+0x6a>
 8012510:	4638      	mov	r0, r7
 8012512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012516:	bf00      	nop
 8012518:	08014018 	.word	0x08014018
 801251c:	08013ca0 	.word	0x08013ca0
 8012520:	08013eca 	.word	0x08013eca

08012524 <__lshift>:
 8012524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012528:	460c      	mov	r4, r1
 801252a:	4607      	mov	r7, r0
 801252c:	4691      	mov	r9, r2
 801252e:	6923      	ldr	r3, [r4, #16]
 8012530:	6849      	ldr	r1, [r1, #4]
 8012532:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012536:	68a3      	ldr	r3, [r4, #8]
 8012538:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801253c:	f108 0601 	add.w	r6, r8, #1
 8012540:	42b3      	cmp	r3, r6
 8012542:	db0b      	blt.n	801255c <__lshift+0x38>
 8012544:	4638      	mov	r0, r7
 8012546:	f7ff fddf 	bl	8012108 <_Balloc>
 801254a:	4605      	mov	r5, r0
 801254c:	b948      	cbnz	r0, 8012562 <__lshift+0x3e>
 801254e:	4602      	mov	r2, r0
 8012550:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012554:	4b29      	ldr	r3, [pc, #164]	; (80125fc <__lshift+0xd8>)
 8012556:	482a      	ldr	r0, [pc, #168]	; (8012600 <__lshift+0xdc>)
 8012558:	f7fe ff04 	bl	8011364 <__assert_func>
 801255c:	3101      	adds	r1, #1
 801255e:	005b      	lsls	r3, r3, #1
 8012560:	e7ee      	b.n	8012540 <__lshift+0x1c>
 8012562:	2300      	movs	r3, #0
 8012564:	f100 0114 	add.w	r1, r0, #20
 8012568:	f100 0210 	add.w	r2, r0, #16
 801256c:	4618      	mov	r0, r3
 801256e:	4553      	cmp	r3, sl
 8012570:	db37      	blt.n	80125e2 <__lshift+0xbe>
 8012572:	6920      	ldr	r0, [r4, #16]
 8012574:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012578:	f104 0314 	add.w	r3, r4, #20
 801257c:	f019 091f 	ands.w	r9, r9, #31
 8012580:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012584:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012588:	d02f      	beq.n	80125ea <__lshift+0xc6>
 801258a:	468a      	mov	sl, r1
 801258c:	f04f 0c00 	mov.w	ip, #0
 8012590:	f1c9 0e20 	rsb	lr, r9, #32
 8012594:	681a      	ldr	r2, [r3, #0]
 8012596:	fa02 f209 	lsl.w	r2, r2, r9
 801259a:	ea42 020c 	orr.w	r2, r2, ip
 801259e:	f84a 2b04 	str.w	r2, [sl], #4
 80125a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80125a6:	4298      	cmp	r0, r3
 80125a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80125ac:	d8f2      	bhi.n	8012594 <__lshift+0x70>
 80125ae:	1b03      	subs	r3, r0, r4
 80125b0:	3b15      	subs	r3, #21
 80125b2:	f023 0303 	bic.w	r3, r3, #3
 80125b6:	3304      	adds	r3, #4
 80125b8:	f104 0215 	add.w	r2, r4, #21
 80125bc:	4290      	cmp	r0, r2
 80125be:	bf38      	it	cc
 80125c0:	2304      	movcc	r3, #4
 80125c2:	f841 c003 	str.w	ip, [r1, r3]
 80125c6:	f1bc 0f00 	cmp.w	ip, #0
 80125ca:	d001      	beq.n	80125d0 <__lshift+0xac>
 80125cc:	f108 0602 	add.w	r6, r8, #2
 80125d0:	3e01      	subs	r6, #1
 80125d2:	4638      	mov	r0, r7
 80125d4:	4621      	mov	r1, r4
 80125d6:	612e      	str	r6, [r5, #16]
 80125d8:	f7ff fdd6 	bl	8012188 <_Bfree>
 80125dc:	4628      	mov	r0, r5
 80125de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80125e6:	3301      	adds	r3, #1
 80125e8:	e7c1      	b.n	801256e <__lshift+0x4a>
 80125ea:	3904      	subs	r1, #4
 80125ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80125f0:	4298      	cmp	r0, r3
 80125f2:	f841 2f04 	str.w	r2, [r1, #4]!
 80125f6:	d8f9      	bhi.n	80125ec <__lshift+0xc8>
 80125f8:	e7ea      	b.n	80125d0 <__lshift+0xac>
 80125fa:	bf00      	nop
 80125fc:	08013eb9 	.word	0x08013eb9
 8012600:	08013eca 	.word	0x08013eca

08012604 <__mcmp>:
 8012604:	4603      	mov	r3, r0
 8012606:	690a      	ldr	r2, [r1, #16]
 8012608:	6900      	ldr	r0, [r0, #16]
 801260a:	b530      	push	{r4, r5, lr}
 801260c:	1a80      	subs	r0, r0, r2
 801260e:	d10d      	bne.n	801262c <__mcmp+0x28>
 8012610:	3314      	adds	r3, #20
 8012612:	3114      	adds	r1, #20
 8012614:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012618:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801261c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012620:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012624:	4295      	cmp	r5, r2
 8012626:	d002      	beq.n	801262e <__mcmp+0x2a>
 8012628:	d304      	bcc.n	8012634 <__mcmp+0x30>
 801262a:	2001      	movs	r0, #1
 801262c:	bd30      	pop	{r4, r5, pc}
 801262e:	42a3      	cmp	r3, r4
 8012630:	d3f4      	bcc.n	801261c <__mcmp+0x18>
 8012632:	e7fb      	b.n	801262c <__mcmp+0x28>
 8012634:	f04f 30ff 	mov.w	r0, #4294967295
 8012638:	e7f8      	b.n	801262c <__mcmp+0x28>
	...

0801263c <__mdiff>:
 801263c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012640:	460d      	mov	r5, r1
 8012642:	4607      	mov	r7, r0
 8012644:	4611      	mov	r1, r2
 8012646:	4628      	mov	r0, r5
 8012648:	4614      	mov	r4, r2
 801264a:	f7ff ffdb 	bl	8012604 <__mcmp>
 801264e:	1e06      	subs	r6, r0, #0
 8012650:	d111      	bne.n	8012676 <__mdiff+0x3a>
 8012652:	4631      	mov	r1, r6
 8012654:	4638      	mov	r0, r7
 8012656:	f7ff fd57 	bl	8012108 <_Balloc>
 801265a:	4602      	mov	r2, r0
 801265c:	b928      	cbnz	r0, 801266a <__mdiff+0x2e>
 801265e:	f240 2132 	movw	r1, #562	; 0x232
 8012662:	4b3a      	ldr	r3, [pc, #232]	; (801274c <__mdiff+0x110>)
 8012664:	483a      	ldr	r0, [pc, #232]	; (8012750 <__mdiff+0x114>)
 8012666:	f7fe fe7d 	bl	8011364 <__assert_func>
 801266a:	2301      	movs	r3, #1
 801266c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012670:	4610      	mov	r0, r2
 8012672:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012676:	bfa4      	itt	ge
 8012678:	4623      	movge	r3, r4
 801267a:	462c      	movge	r4, r5
 801267c:	4638      	mov	r0, r7
 801267e:	6861      	ldr	r1, [r4, #4]
 8012680:	bfa6      	itte	ge
 8012682:	461d      	movge	r5, r3
 8012684:	2600      	movge	r6, #0
 8012686:	2601      	movlt	r6, #1
 8012688:	f7ff fd3e 	bl	8012108 <_Balloc>
 801268c:	4602      	mov	r2, r0
 801268e:	b918      	cbnz	r0, 8012698 <__mdiff+0x5c>
 8012690:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012694:	4b2d      	ldr	r3, [pc, #180]	; (801274c <__mdiff+0x110>)
 8012696:	e7e5      	b.n	8012664 <__mdiff+0x28>
 8012698:	f102 0814 	add.w	r8, r2, #20
 801269c:	46c2      	mov	sl, r8
 801269e:	f04f 0c00 	mov.w	ip, #0
 80126a2:	6927      	ldr	r7, [r4, #16]
 80126a4:	60c6      	str	r6, [r0, #12]
 80126a6:	692e      	ldr	r6, [r5, #16]
 80126a8:	f104 0014 	add.w	r0, r4, #20
 80126ac:	f105 0914 	add.w	r9, r5, #20
 80126b0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80126b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80126b8:	3410      	adds	r4, #16
 80126ba:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80126be:	f859 3b04 	ldr.w	r3, [r9], #4
 80126c2:	fa1f f18b 	uxth.w	r1, fp
 80126c6:	448c      	add	ip, r1
 80126c8:	b299      	uxth	r1, r3
 80126ca:	0c1b      	lsrs	r3, r3, #16
 80126cc:	ebac 0101 	sub.w	r1, ip, r1
 80126d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80126d4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80126d8:	b289      	uxth	r1, r1
 80126da:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80126de:	454e      	cmp	r6, r9
 80126e0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80126e4:	f84a 3b04 	str.w	r3, [sl], #4
 80126e8:	d8e7      	bhi.n	80126ba <__mdiff+0x7e>
 80126ea:	1b73      	subs	r3, r6, r5
 80126ec:	3b15      	subs	r3, #21
 80126ee:	f023 0303 	bic.w	r3, r3, #3
 80126f2:	3515      	adds	r5, #21
 80126f4:	3304      	adds	r3, #4
 80126f6:	42ae      	cmp	r6, r5
 80126f8:	bf38      	it	cc
 80126fa:	2304      	movcc	r3, #4
 80126fc:	4418      	add	r0, r3
 80126fe:	4443      	add	r3, r8
 8012700:	461e      	mov	r6, r3
 8012702:	4605      	mov	r5, r0
 8012704:	4575      	cmp	r5, lr
 8012706:	d30e      	bcc.n	8012726 <__mdiff+0xea>
 8012708:	f10e 0103 	add.w	r1, lr, #3
 801270c:	1a09      	subs	r1, r1, r0
 801270e:	f021 0103 	bic.w	r1, r1, #3
 8012712:	3803      	subs	r0, #3
 8012714:	4586      	cmp	lr, r0
 8012716:	bf38      	it	cc
 8012718:	2100      	movcc	r1, #0
 801271a:	4419      	add	r1, r3
 801271c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8012720:	b18b      	cbz	r3, 8012746 <__mdiff+0x10a>
 8012722:	6117      	str	r7, [r2, #16]
 8012724:	e7a4      	b.n	8012670 <__mdiff+0x34>
 8012726:	f855 8b04 	ldr.w	r8, [r5], #4
 801272a:	fa1f f188 	uxth.w	r1, r8
 801272e:	4461      	add	r1, ip
 8012730:	140c      	asrs	r4, r1, #16
 8012732:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012736:	b289      	uxth	r1, r1
 8012738:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801273c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8012740:	f846 1b04 	str.w	r1, [r6], #4
 8012744:	e7de      	b.n	8012704 <__mdiff+0xc8>
 8012746:	3f01      	subs	r7, #1
 8012748:	e7e8      	b.n	801271c <__mdiff+0xe0>
 801274a:	bf00      	nop
 801274c:	08013eb9 	.word	0x08013eb9
 8012750:	08013eca 	.word	0x08013eca

08012754 <__d2b>:
 8012754:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012758:	2101      	movs	r1, #1
 801275a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801275e:	4690      	mov	r8, r2
 8012760:	461d      	mov	r5, r3
 8012762:	f7ff fcd1 	bl	8012108 <_Balloc>
 8012766:	4604      	mov	r4, r0
 8012768:	b930      	cbnz	r0, 8012778 <__d2b+0x24>
 801276a:	4602      	mov	r2, r0
 801276c:	f240 310a 	movw	r1, #778	; 0x30a
 8012770:	4b24      	ldr	r3, [pc, #144]	; (8012804 <__d2b+0xb0>)
 8012772:	4825      	ldr	r0, [pc, #148]	; (8012808 <__d2b+0xb4>)
 8012774:	f7fe fdf6 	bl	8011364 <__assert_func>
 8012778:	f3c5 0313 	ubfx	r3, r5, #0, #20
 801277c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8012780:	bb2d      	cbnz	r5, 80127ce <__d2b+0x7a>
 8012782:	9301      	str	r3, [sp, #4]
 8012784:	f1b8 0300 	subs.w	r3, r8, #0
 8012788:	d026      	beq.n	80127d8 <__d2b+0x84>
 801278a:	4668      	mov	r0, sp
 801278c:	9300      	str	r3, [sp, #0]
 801278e:	f7ff fd83 	bl	8012298 <__lo0bits>
 8012792:	9900      	ldr	r1, [sp, #0]
 8012794:	b1f0      	cbz	r0, 80127d4 <__d2b+0x80>
 8012796:	9a01      	ldr	r2, [sp, #4]
 8012798:	f1c0 0320 	rsb	r3, r0, #32
 801279c:	fa02 f303 	lsl.w	r3, r2, r3
 80127a0:	430b      	orrs	r3, r1
 80127a2:	40c2      	lsrs	r2, r0
 80127a4:	6163      	str	r3, [r4, #20]
 80127a6:	9201      	str	r2, [sp, #4]
 80127a8:	9b01      	ldr	r3, [sp, #4]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	bf14      	ite	ne
 80127ae:	2102      	movne	r1, #2
 80127b0:	2101      	moveq	r1, #1
 80127b2:	61a3      	str	r3, [r4, #24]
 80127b4:	6121      	str	r1, [r4, #16]
 80127b6:	b1c5      	cbz	r5, 80127ea <__d2b+0x96>
 80127b8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80127bc:	4405      	add	r5, r0
 80127be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80127c2:	603d      	str	r5, [r7, #0]
 80127c4:	6030      	str	r0, [r6, #0]
 80127c6:	4620      	mov	r0, r4
 80127c8:	b002      	add	sp, #8
 80127ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80127d2:	e7d6      	b.n	8012782 <__d2b+0x2e>
 80127d4:	6161      	str	r1, [r4, #20]
 80127d6:	e7e7      	b.n	80127a8 <__d2b+0x54>
 80127d8:	a801      	add	r0, sp, #4
 80127da:	f7ff fd5d 	bl	8012298 <__lo0bits>
 80127de:	2101      	movs	r1, #1
 80127e0:	9b01      	ldr	r3, [sp, #4]
 80127e2:	6121      	str	r1, [r4, #16]
 80127e4:	6163      	str	r3, [r4, #20]
 80127e6:	3020      	adds	r0, #32
 80127e8:	e7e5      	b.n	80127b6 <__d2b+0x62>
 80127ea:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80127ee:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80127f2:	6038      	str	r0, [r7, #0]
 80127f4:	6918      	ldr	r0, [r3, #16]
 80127f6:	f7ff fd2f 	bl	8012258 <__hi0bits>
 80127fa:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80127fe:	6031      	str	r1, [r6, #0]
 8012800:	e7e1      	b.n	80127c6 <__d2b+0x72>
 8012802:	bf00      	nop
 8012804:	08013eb9 	.word	0x08013eb9
 8012808:	08013eca 	.word	0x08013eca

0801280c <_calloc_r>:
 801280c:	b570      	push	{r4, r5, r6, lr}
 801280e:	fba1 5402 	umull	r5, r4, r1, r2
 8012812:	b934      	cbnz	r4, 8012822 <_calloc_r+0x16>
 8012814:	4629      	mov	r1, r5
 8012816:	f000 f875 	bl	8012904 <_malloc_r>
 801281a:	4606      	mov	r6, r0
 801281c:	b928      	cbnz	r0, 801282a <_calloc_r+0x1e>
 801281e:	4630      	mov	r0, r6
 8012820:	bd70      	pop	{r4, r5, r6, pc}
 8012822:	220c      	movs	r2, #12
 8012824:	2600      	movs	r6, #0
 8012826:	6002      	str	r2, [r0, #0]
 8012828:	e7f9      	b.n	801281e <_calloc_r+0x12>
 801282a:	462a      	mov	r2, r5
 801282c:	4621      	mov	r1, r4
 801282e:	f7fe f82f 	bl	8010890 <memset>
 8012832:	e7f4      	b.n	801281e <_calloc_r+0x12>

08012834 <_free_r>:
 8012834:	b538      	push	{r3, r4, r5, lr}
 8012836:	4605      	mov	r5, r0
 8012838:	2900      	cmp	r1, #0
 801283a:	d040      	beq.n	80128be <_free_r+0x8a>
 801283c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012840:	1f0c      	subs	r4, r1, #4
 8012842:	2b00      	cmp	r3, #0
 8012844:	bfb8      	it	lt
 8012846:	18e4      	addlt	r4, r4, r3
 8012848:	f000 fea4 	bl	8013594 <__malloc_lock>
 801284c:	4a1c      	ldr	r2, [pc, #112]	; (80128c0 <_free_r+0x8c>)
 801284e:	6813      	ldr	r3, [r2, #0]
 8012850:	b933      	cbnz	r3, 8012860 <_free_r+0x2c>
 8012852:	6063      	str	r3, [r4, #4]
 8012854:	6014      	str	r4, [r2, #0]
 8012856:	4628      	mov	r0, r5
 8012858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801285c:	f000 bea0 	b.w	80135a0 <__malloc_unlock>
 8012860:	42a3      	cmp	r3, r4
 8012862:	d908      	bls.n	8012876 <_free_r+0x42>
 8012864:	6820      	ldr	r0, [r4, #0]
 8012866:	1821      	adds	r1, r4, r0
 8012868:	428b      	cmp	r3, r1
 801286a:	bf01      	itttt	eq
 801286c:	6819      	ldreq	r1, [r3, #0]
 801286e:	685b      	ldreq	r3, [r3, #4]
 8012870:	1809      	addeq	r1, r1, r0
 8012872:	6021      	streq	r1, [r4, #0]
 8012874:	e7ed      	b.n	8012852 <_free_r+0x1e>
 8012876:	461a      	mov	r2, r3
 8012878:	685b      	ldr	r3, [r3, #4]
 801287a:	b10b      	cbz	r3, 8012880 <_free_r+0x4c>
 801287c:	42a3      	cmp	r3, r4
 801287e:	d9fa      	bls.n	8012876 <_free_r+0x42>
 8012880:	6811      	ldr	r1, [r2, #0]
 8012882:	1850      	adds	r0, r2, r1
 8012884:	42a0      	cmp	r0, r4
 8012886:	d10b      	bne.n	80128a0 <_free_r+0x6c>
 8012888:	6820      	ldr	r0, [r4, #0]
 801288a:	4401      	add	r1, r0
 801288c:	1850      	adds	r0, r2, r1
 801288e:	4283      	cmp	r3, r0
 8012890:	6011      	str	r1, [r2, #0]
 8012892:	d1e0      	bne.n	8012856 <_free_r+0x22>
 8012894:	6818      	ldr	r0, [r3, #0]
 8012896:	685b      	ldr	r3, [r3, #4]
 8012898:	4401      	add	r1, r0
 801289a:	6011      	str	r1, [r2, #0]
 801289c:	6053      	str	r3, [r2, #4]
 801289e:	e7da      	b.n	8012856 <_free_r+0x22>
 80128a0:	d902      	bls.n	80128a8 <_free_r+0x74>
 80128a2:	230c      	movs	r3, #12
 80128a4:	602b      	str	r3, [r5, #0]
 80128a6:	e7d6      	b.n	8012856 <_free_r+0x22>
 80128a8:	6820      	ldr	r0, [r4, #0]
 80128aa:	1821      	adds	r1, r4, r0
 80128ac:	428b      	cmp	r3, r1
 80128ae:	bf01      	itttt	eq
 80128b0:	6819      	ldreq	r1, [r3, #0]
 80128b2:	685b      	ldreq	r3, [r3, #4]
 80128b4:	1809      	addeq	r1, r1, r0
 80128b6:	6021      	streq	r1, [r4, #0]
 80128b8:	6063      	str	r3, [r4, #4]
 80128ba:	6054      	str	r4, [r2, #4]
 80128bc:	e7cb      	b.n	8012856 <_free_r+0x22>
 80128be:	bd38      	pop	{r3, r4, r5, pc}
 80128c0:	20003654 	.word	0x20003654

080128c4 <sbrk_aligned>:
 80128c4:	b570      	push	{r4, r5, r6, lr}
 80128c6:	4e0e      	ldr	r6, [pc, #56]	; (8012900 <sbrk_aligned+0x3c>)
 80128c8:	460c      	mov	r4, r1
 80128ca:	6831      	ldr	r1, [r6, #0]
 80128cc:	4605      	mov	r5, r0
 80128ce:	b911      	cbnz	r1, 80128d6 <sbrk_aligned+0x12>
 80128d0:	f000 fb40 	bl	8012f54 <_sbrk_r>
 80128d4:	6030      	str	r0, [r6, #0]
 80128d6:	4621      	mov	r1, r4
 80128d8:	4628      	mov	r0, r5
 80128da:	f000 fb3b 	bl	8012f54 <_sbrk_r>
 80128de:	1c43      	adds	r3, r0, #1
 80128e0:	d00a      	beq.n	80128f8 <sbrk_aligned+0x34>
 80128e2:	1cc4      	adds	r4, r0, #3
 80128e4:	f024 0403 	bic.w	r4, r4, #3
 80128e8:	42a0      	cmp	r0, r4
 80128ea:	d007      	beq.n	80128fc <sbrk_aligned+0x38>
 80128ec:	1a21      	subs	r1, r4, r0
 80128ee:	4628      	mov	r0, r5
 80128f0:	f000 fb30 	bl	8012f54 <_sbrk_r>
 80128f4:	3001      	adds	r0, #1
 80128f6:	d101      	bne.n	80128fc <sbrk_aligned+0x38>
 80128f8:	f04f 34ff 	mov.w	r4, #4294967295
 80128fc:	4620      	mov	r0, r4
 80128fe:	bd70      	pop	{r4, r5, r6, pc}
 8012900:	20003658 	.word	0x20003658

08012904 <_malloc_r>:
 8012904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012908:	1ccd      	adds	r5, r1, #3
 801290a:	f025 0503 	bic.w	r5, r5, #3
 801290e:	3508      	adds	r5, #8
 8012910:	2d0c      	cmp	r5, #12
 8012912:	bf38      	it	cc
 8012914:	250c      	movcc	r5, #12
 8012916:	2d00      	cmp	r5, #0
 8012918:	4607      	mov	r7, r0
 801291a:	db01      	blt.n	8012920 <_malloc_r+0x1c>
 801291c:	42a9      	cmp	r1, r5
 801291e:	d905      	bls.n	801292c <_malloc_r+0x28>
 8012920:	230c      	movs	r3, #12
 8012922:	2600      	movs	r6, #0
 8012924:	603b      	str	r3, [r7, #0]
 8012926:	4630      	mov	r0, r6
 8012928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801292c:	4e2e      	ldr	r6, [pc, #184]	; (80129e8 <_malloc_r+0xe4>)
 801292e:	f000 fe31 	bl	8013594 <__malloc_lock>
 8012932:	6833      	ldr	r3, [r6, #0]
 8012934:	461c      	mov	r4, r3
 8012936:	bb34      	cbnz	r4, 8012986 <_malloc_r+0x82>
 8012938:	4629      	mov	r1, r5
 801293a:	4638      	mov	r0, r7
 801293c:	f7ff ffc2 	bl	80128c4 <sbrk_aligned>
 8012940:	1c43      	adds	r3, r0, #1
 8012942:	4604      	mov	r4, r0
 8012944:	d14d      	bne.n	80129e2 <_malloc_r+0xde>
 8012946:	6834      	ldr	r4, [r6, #0]
 8012948:	4626      	mov	r6, r4
 801294a:	2e00      	cmp	r6, #0
 801294c:	d140      	bne.n	80129d0 <_malloc_r+0xcc>
 801294e:	6823      	ldr	r3, [r4, #0]
 8012950:	4631      	mov	r1, r6
 8012952:	4638      	mov	r0, r7
 8012954:	eb04 0803 	add.w	r8, r4, r3
 8012958:	f000 fafc 	bl	8012f54 <_sbrk_r>
 801295c:	4580      	cmp	r8, r0
 801295e:	d13a      	bne.n	80129d6 <_malloc_r+0xd2>
 8012960:	6821      	ldr	r1, [r4, #0]
 8012962:	3503      	adds	r5, #3
 8012964:	1a6d      	subs	r5, r5, r1
 8012966:	f025 0503 	bic.w	r5, r5, #3
 801296a:	3508      	adds	r5, #8
 801296c:	2d0c      	cmp	r5, #12
 801296e:	bf38      	it	cc
 8012970:	250c      	movcc	r5, #12
 8012972:	4638      	mov	r0, r7
 8012974:	4629      	mov	r1, r5
 8012976:	f7ff ffa5 	bl	80128c4 <sbrk_aligned>
 801297a:	3001      	adds	r0, #1
 801297c:	d02b      	beq.n	80129d6 <_malloc_r+0xd2>
 801297e:	6823      	ldr	r3, [r4, #0]
 8012980:	442b      	add	r3, r5
 8012982:	6023      	str	r3, [r4, #0]
 8012984:	e00e      	b.n	80129a4 <_malloc_r+0xa0>
 8012986:	6822      	ldr	r2, [r4, #0]
 8012988:	1b52      	subs	r2, r2, r5
 801298a:	d41e      	bmi.n	80129ca <_malloc_r+0xc6>
 801298c:	2a0b      	cmp	r2, #11
 801298e:	d916      	bls.n	80129be <_malloc_r+0xba>
 8012990:	1961      	adds	r1, r4, r5
 8012992:	42a3      	cmp	r3, r4
 8012994:	6025      	str	r5, [r4, #0]
 8012996:	bf18      	it	ne
 8012998:	6059      	strne	r1, [r3, #4]
 801299a:	6863      	ldr	r3, [r4, #4]
 801299c:	bf08      	it	eq
 801299e:	6031      	streq	r1, [r6, #0]
 80129a0:	5162      	str	r2, [r4, r5]
 80129a2:	604b      	str	r3, [r1, #4]
 80129a4:	4638      	mov	r0, r7
 80129a6:	f104 060b 	add.w	r6, r4, #11
 80129aa:	f000 fdf9 	bl	80135a0 <__malloc_unlock>
 80129ae:	f026 0607 	bic.w	r6, r6, #7
 80129b2:	1d23      	adds	r3, r4, #4
 80129b4:	1af2      	subs	r2, r6, r3
 80129b6:	d0b6      	beq.n	8012926 <_malloc_r+0x22>
 80129b8:	1b9b      	subs	r3, r3, r6
 80129ba:	50a3      	str	r3, [r4, r2]
 80129bc:	e7b3      	b.n	8012926 <_malloc_r+0x22>
 80129be:	6862      	ldr	r2, [r4, #4]
 80129c0:	42a3      	cmp	r3, r4
 80129c2:	bf0c      	ite	eq
 80129c4:	6032      	streq	r2, [r6, #0]
 80129c6:	605a      	strne	r2, [r3, #4]
 80129c8:	e7ec      	b.n	80129a4 <_malloc_r+0xa0>
 80129ca:	4623      	mov	r3, r4
 80129cc:	6864      	ldr	r4, [r4, #4]
 80129ce:	e7b2      	b.n	8012936 <_malloc_r+0x32>
 80129d0:	4634      	mov	r4, r6
 80129d2:	6876      	ldr	r6, [r6, #4]
 80129d4:	e7b9      	b.n	801294a <_malloc_r+0x46>
 80129d6:	230c      	movs	r3, #12
 80129d8:	4638      	mov	r0, r7
 80129da:	603b      	str	r3, [r7, #0]
 80129dc:	f000 fde0 	bl	80135a0 <__malloc_unlock>
 80129e0:	e7a1      	b.n	8012926 <_malloc_r+0x22>
 80129e2:	6025      	str	r5, [r4, #0]
 80129e4:	e7de      	b.n	80129a4 <_malloc_r+0xa0>
 80129e6:	bf00      	nop
 80129e8:	20003654 	.word	0x20003654

080129ec <__ssputs_r>:
 80129ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129f0:	688e      	ldr	r6, [r1, #8]
 80129f2:	4682      	mov	sl, r0
 80129f4:	429e      	cmp	r6, r3
 80129f6:	460c      	mov	r4, r1
 80129f8:	4690      	mov	r8, r2
 80129fa:	461f      	mov	r7, r3
 80129fc:	d838      	bhi.n	8012a70 <__ssputs_r+0x84>
 80129fe:	898a      	ldrh	r2, [r1, #12]
 8012a00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012a04:	d032      	beq.n	8012a6c <__ssputs_r+0x80>
 8012a06:	6825      	ldr	r5, [r4, #0]
 8012a08:	6909      	ldr	r1, [r1, #16]
 8012a0a:	3301      	adds	r3, #1
 8012a0c:	eba5 0901 	sub.w	r9, r5, r1
 8012a10:	6965      	ldr	r5, [r4, #20]
 8012a12:	444b      	add	r3, r9
 8012a14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012a18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012a1c:	106d      	asrs	r5, r5, #1
 8012a1e:	429d      	cmp	r5, r3
 8012a20:	bf38      	it	cc
 8012a22:	461d      	movcc	r5, r3
 8012a24:	0553      	lsls	r3, r2, #21
 8012a26:	d531      	bpl.n	8012a8c <__ssputs_r+0xa0>
 8012a28:	4629      	mov	r1, r5
 8012a2a:	f7ff ff6b 	bl	8012904 <_malloc_r>
 8012a2e:	4606      	mov	r6, r0
 8012a30:	b950      	cbnz	r0, 8012a48 <__ssputs_r+0x5c>
 8012a32:	230c      	movs	r3, #12
 8012a34:	f04f 30ff 	mov.w	r0, #4294967295
 8012a38:	f8ca 3000 	str.w	r3, [sl]
 8012a3c:	89a3      	ldrh	r3, [r4, #12]
 8012a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a42:	81a3      	strh	r3, [r4, #12]
 8012a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a48:	464a      	mov	r2, r9
 8012a4a:	6921      	ldr	r1, [r4, #16]
 8012a4c:	f7ff fb4e 	bl	80120ec <memcpy>
 8012a50:	89a3      	ldrh	r3, [r4, #12]
 8012a52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a5a:	81a3      	strh	r3, [r4, #12]
 8012a5c:	6126      	str	r6, [r4, #16]
 8012a5e:	444e      	add	r6, r9
 8012a60:	6026      	str	r6, [r4, #0]
 8012a62:	463e      	mov	r6, r7
 8012a64:	6165      	str	r5, [r4, #20]
 8012a66:	eba5 0509 	sub.w	r5, r5, r9
 8012a6a:	60a5      	str	r5, [r4, #8]
 8012a6c:	42be      	cmp	r6, r7
 8012a6e:	d900      	bls.n	8012a72 <__ssputs_r+0x86>
 8012a70:	463e      	mov	r6, r7
 8012a72:	4632      	mov	r2, r6
 8012a74:	4641      	mov	r1, r8
 8012a76:	6820      	ldr	r0, [r4, #0]
 8012a78:	f000 fd72 	bl	8013560 <memmove>
 8012a7c:	68a3      	ldr	r3, [r4, #8]
 8012a7e:	2000      	movs	r0, #0
 8012a80:	1b9b      	subs	r3, r3, r6
 8012a82:	60a3      	str	r3, [r4, #8]
 8012a84:	6823      	ldr	r3, [r4, #0]
 8012a86:	4433      	add	r3, r6
 8012a88:	6023      	str	r3, [r4, #0]
 8012a8a:	e7db      	b.n	8012a44 <__ssputs_r+0x58>
 8012a8c:	462a      	mov	r2, r5
 8012a8e:	f000 fd8d 	bl	80135ac <_realloc_r>
 8012a92:	4606      	mov	r6, r0
 8012a94:	2800      	cmp	r0, #0
 8012a96:	d1e1      	bne.n	8012a5c <__ssputs_r+0x70>
 8012a98:	4650      	mov	r0, sl
 8012a9a:	6921      	ldr	r1, [r4, #16]
 8012a9c:	f7ff feca 	bl	8012834 <_free_r>
 8012aa0:	e7c7      	b.n	8012a32 <__ssputs_r+0x46>
	...

08012aa4 <_svfiprintf_r>:
 8012aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aa8:	4698      	mov	r8, r3
 8012aaa:	898b      	ldrh	r3, [r1, #12]
 8012aac:	4607      	mov	r7, r0
 8012aae:	061b      	lsls	r3, r3, #24
 8012ab0:	460d      	mov	r5, r1
 8012ab2:	4614      	mov	r4, r2
 8012ab4:	b09d      	sub	sp, #116	; 0x74
 8012ab6:	d50e      	bpl.n	8012ad6 <_svfiprintf_r+0x32>
 8012ab8:	690b      	ldr	r3, [r1, #16]
 8012aba:	b963      	cbnz	r3, 8012ad6 <_svfiprintf_r+0x32>
 8012abc:	2140      	movs	r1, #64	; 0x40
 8012abe:	f7ff ff21 	bl	8012904 <_malloc_r>
 8012ac2:	6028      	str	r0, [r5, #0]
 8012ac4:	6128      	str	r0, [r5, #16]
 8012ac6:	b920      	cbnz	r0, 8012ad2 <_svfiprintf_r+0x2e>
 8012ac8:	230c      	movs	r3, #12
 8012aca:	603b      	str	r3, [r7, #0]
 8012acc:	f04f 30ff 	mov.w	r0, #4294967295
 8012ad0:	e0d1      	b.n	8012c76 <_svfiprintf_r+0x1d2>
 8012ad2:	2340      	movs	r3, #64	; 0x40
 8012ad4:	616b      	str	r3, [r5, #20]
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8012ada:	2320      	movs	r3, #32
 8012adc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012ae0:	2330      	movs	r3, #48	; 0x30
 8012ae2:	f04f 0901 	mov.w	r9, #1
 8012ae6:	f8cd 800c 	str.w	r8, [sp, #12]
 8012aea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012c90 <_svfiprintf_r+0x1ec>
 8012aee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012af2:	4623      	mov	r3, r4
 8012af4:	469a      	mov	sl, r3
 8012af6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012afa:	b10a      	cbz	r2, 8012b00 <_svfiprintf_r+0x5c>
 8012afc:	2a25      	cmp	r2, #37	; 0x25
 8012afe:	d1f9      	bne.n	8012af4 <_svfiprintf_r+0x50>
 8012b00:	ebba 0b04 	subs.w	fp, sl, r4
 8012b04:	d00b      	beq.n	8012b1e <_svfiprintf_r+0x7a>
 8012b06:	465b      	mov	r3, fp
 8012b08:	4622      	mov	r2, r4
 8012b0a:	4629      	mov	r1, r5
 8012b0c:	4638      	mov	r0, r7
 8012b0e:	f7ff ff6d 	bl	80129ec <__ssputs_r>
 8012b12:	3001      	adds	r0, #1
 8012b14:	f000 80aa 	beq.w	8012c6c <_svfiprintf_r+0x1c8>
 8012b18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b1a:	445a      	add	r2, fp
 8012b1c:	9209      	str	r2, [sp, #36]	; 0x24
 8012b1e:	f89a 3000 	ldrb.w	r3, [sl]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	f000 80a2 	beq.w	8012c6c <_svfiprintf_r+0x1c8>
 8012b28:	2300      	movs	r3, #0
 8012b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8012b2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012b32:	f10a 0a01 	add.w	sl, sl, #1
 8012b36:	9304      	str	r3, [sp, #16]
 8012b38:	9307      	str	r3, [sp, #28]
 8012b3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b3e:	931a      	str	r3, [sp, #104]	; 0x68
 8012b40:	4654      	mov	r4, sl
 8012b42:	2205      	movs	r2, #5
 8012b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b48:	4851      	ldr	r0, [pc, #324]	; (8012c90 <_svfiprintf_r+0x1ec>)
 8012b4a:	f7ff fac1 	bl	80120d0 <memchr>
 8012b4e:	9a04      	ldr	r2, [sp, #16]
 8012b50:	b9d8      	cbnz	r0, 8012b8a <_svfiprintf_r+0xe6>
 8012b52:	06d0      	lsls	r0, r2, #27
 8012b54:	bf44      	itt	mi
 8012b56:	2320      	movmi	r3, #32
 8012b58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b5c:	0711      	lsls	r1, r2, #28
 8012b5e:	bf44      	itt	mi
 8012b60:	232b      	movmi	r3, #43	; 0x2b
 8012b62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012b66:	f89a 3000 	ldrb.w	r3, [sl]
 8012b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8012b6c:	d015      	beq.n	8012b9a <_svfiprintf_r+0xf6>
 8012b6e:	4654      	mov	r4, sl
 8012b70:	2000      	movs	r0, #0
 8012b72:	f04f 0c0a 	mov.w	ip, #10
 8012b76:	9a07      	ldr	r2, [sp, #28]
 8012b78:	4621      	mov	r1, r4
 8012b7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012b7e:	3b30      	subs	r3, #48	; 0x30
 8012b80:	2b09      	cmp	r3, #9
 8012b82:	d94e      	bls.n	8012c22 <_svfiprintf_r+0x17e>
 8012b84:	b1b0      	cbz	r0, 8012bb4 <_svfiprintf_r+0x110>
 8012b86:	9207      	str	r2, [sp, #28]
 8012b88:	e014      	b.n	8012bb4 <_svfiprintf_r+0x110>
 8012b8a:	eba0 0308 	sub.w	r3, r0, r8
 8012b8e:	fa09 f303 	lsl.w	r3, r9, r3
 8012b92:	4313      	orrs	r3, r2
 8012b94:	46a2      	mov	sl, r4
 8012b96:	9304      	str	r3, [sp, #16]
 8012b98:	e7d2      	b.n	8012b40 <_svfiprintf_r+0x9c>
 8012b9a:	9b03      	ldr	r3, [sp, #12]
 8012b9c:	1d19      	adds	r1, r3, #4
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	9103      	str	r1, [sp, #12]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	bfbb      	ittet	lt
 8012ba6:	425b      	neglt	r3, r3
 8012ba8:	f042 0202 	orrlt.w	r2, r2, #2
 8012bac:	9307      	strge	r3, [sp, #28]
 8012bae:	9307      	strlt	r3, [sp, #28]
 8012bb0:	bfb8      	it	lt
 8012bb2:	9204      	strlt	r2, [sp, #16]
 8012bb4:	7823      	ldrb	r3, [r4, #0]
 8012bb6:	2b2e      	cmp	r3, #46	; 0x2e
 8012bb8:	d10c      	bne.n	8012bd4 <_svfiprintf_r+0x130>
 8012bba:	7863      	ldrb	r3, [r4, #1]
 8012bbc:	2b2a      	cmp	r3, #42	; 0x2a
 8012bbe:	d135      	bne.n	8012c2c <_svfiprintf_r+0x188>
 8012bc0:	9b03      	ldr	r3, [sp, #12]
 8012bc2:	3402      	adds	r4, #2
 8012bc4:	1d1a      	adds	r2, r3, #4
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	9203      	str	r2, [sp, #12]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	bfb8      	it	lt
 8012bce:	f04f 33ff 	movlt.w	r3, #4294967295
 8012bd2:	9305      	str	r3, [sp, #20]
 8012bd4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8012c94 <_svfiprintf_r+0x1f0>
 8012bd8:	2203      	movs	r2, #3
 8012bda:	4650      	mov	r0, sl
 8012bdc:	7821      	ldrb	r1, [r4, #0]
 8012bde:	f7ff fa77 	bl	80120d0 <memchr>
 8012be2:	b140      	cbz	r0, 8012bf6 <_svfiprintf_r+0x152>
 8012be4:	2340      	movs	r3, #64	; 0x40
 8012be6:	eba0 000a 	sub.w	r0, r0, sl
 8012bea:	fa03 f000 	lsl.w	r0, r3, r0
 8012bee:	9b04      	ldr	r3, [sp, #16]
 8012bf0:	3401      	adds	r4, #1
 8012bf2:	4303      	orrs	r3, r0
 8012bf4:	9304      	str	r3, [sp, #16]
 8012bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bfa:	2206      	movs	r2, #6
 8012bfc:	4826      	ldr	r0, [pc, #152]	; (8012c98 <_svfiprintf_r+0x1f4>)
 8012bfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c02:	f7ff fa65 	bl	80120d0 <memchr>
 8012c06:	2800      	cmp	r0, #0
 8012c08:	d038      	beq.n	8012c7c <_svfiprintf_r+0x1d8>
 8012c0a:	4b24      	ldr	r3, [pc, #144]	; (8012c9c <_svfiprintf_r+0x1f8>)
 8012c0c:	bb1b      	cbnz	r3, 8012c56 <_svfiprintf_r+0x1b2>
 8012c0e:	9b03      	ldr	r3, [sp, #12]
 8012c10:	3307      	adds	r3, #7
 8012c12:	f023 0307 	bic.w	r3, r3, #7
 8012c16:	3308      	adds	r3, #8
 8012c18:	9303      	str	r3, [sp, #12]
 8012c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c1c:	4433      	add	r3, r6
 8012c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8012c20:	e767      	b.n	8012af2 <_svfiprintf_r+0x4e>
 8012c22:	460c      	mov	r4, r1
 8012c24:	2001      	movs	r0, #1
 8012c26:	fb0c 3202 	mla	r2, ip, r2, r3
 8012c2a:	e7a5      	b.n	8012b78 <_svfiprintf_r+0xd4>
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	f04f 0c0a 	mov.w	ip, #10
 8012c32:	4619      	mov	r1, r3
 8012c34:	3401      	adds	r4, #1
 8012c36:	9305      	str	r3, [sp, #20]
 8012c38:	4620      	mov	r0, r4
 8012c3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012c3e:	3a30      	subs	r2, #48	; 0x30
 8012c40:	2a09      	cmp	r2, #9
 8012c42:	d903      	bls.n	8012c4c <_svfiprintf_r+0x1a8>
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d0c5      	beq.n	8012bd4 <_svfiprintf_r+0x130>
 8012c48:	9105      	str	r1, [sp, #20]
 8012c4a:	e7c3      	b.n	8012bd4 <_svfiprintf_r+0x130>
 8012c4c:	4604      	mov	r4, r0
 8012c4e:	2301      	movs	r3, #1
 8012c50:	fb0c 2101 	mla	r1, ip, r1, r2
 8012c54:	e7f0      	b.n	8012c38 <_svfiprintf_r+0x194>
 8012c56:	ab03      	add	r3, sp, #12
 8012c58:	9300      	str	r3, [sp, #0]
 8012c5a:	462a      	mov	r2, r5
 8012c5c:	4638      	mov	r0, r7
 8012c5e:	4b10      	ldr	r3, [pc, #64]	; (8012ca0 <_svfiprintf_r+0x1fc>)
 8012c60:	a904      	add	r1, sp, #16
 8012c62:	f7fd febb 	bl	80109dc <_printf_float>
 8012c66:	1c42      	adds	r2, r0, #1
 8012c68:	4606      	mov	r6, r0
 8012c6a:	d1d6      	bne.n	8012c1a <_svfiprintf_r+0x176>
 8012c6c:	89ab      	ldrh	r3, [r5, #12]
 8012c6e:	065b      	lsls	r3, r3, #25
 8012c70:	f53f af2c 	bmi.w	8012acc <_svfiprintf_r+0x28>
 8012c74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c76:	b01d      	add	sp, #116	; 0x74
 8012c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c7c:	ab03      	add	r3, sp, #12
 8012c7e:	9300      	str	r3, [sp, #0]
 8012c80:	462a      	mov	r2, r5
 8012c82:	4638      	mov	r0, r7
 8012c84:	4b06      	ldr	r3, [pc, #24]	; (8012ca0 <_svfiprintf_r+0x1fc>)
 8012c86:	a904      	add	r1, sp, #16
 8012c88:	f7fe f944 	bl	8010f14 <_printf_i>
 8012c8c:	e7eb      	b.n	8012c66 <_svfiprintf_r+0x1c2>
 8012c8e:	bf00      	nop
 8012c90:	08014024 	.word	0x08014024
 8012c94:	0801402a 	.word	0x0801402a
 8012c98:	0801402e 	.word	0x0801402e
 8012c9c:	080109dd 	.word	0x080109dd
 8012ca0:	080129ed 	.word	0x080129ed

08012ca4 <__sfputc_r>:
 8012ca4:	6893      	ldr	r3, [r2, #8]
 8012ca6:	b410      	push	{r4}
 8012ca8:	3b01      	subs	r3, #1
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	6093      	str	r3, [r2, #8]
 8012cae:	da07      	bge.n	8012cc0 <__sfputc_r+0x1c>
 8012cb0:	6994      	ldr	r4, [r2, #24]
 8012cb2:	42a3      	cmp	r3, r4
 8012cb4:	db01      	blt.n	8012cba <__sfputc_r+0x16>
 8012cb6:	290a      	cmp	r1, #10
 8012cb8:	d102      	bne.n	8012cc0 <__sfputc_r+0x1c>
 8012cba:	bc10      	pop	{r4}
 8012cbc:	f000 b95a 	b.w	8012f74 <__swbuf_r>
 8012cc0:	6813      	ldr	r3, [r2, #0]
 8012cc2:	1c58      	adds	r0, r3, #1
 8012cc4:	6010      	str	r0, [r2, #0]
 8012cc6:	7019      	strb	r1, [r3, #0]
 8012cc8:	4608      	mov	r0, r1
 8012cca:	bc10      	pop	{r4}
 8012ccc:	4770      	bx	lr

08012cce <__sfputs_r>:
 8012cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cd0:	4606      	mov	r6, r0
 8012cd2:	460f      	mov	r7, r1
 8012cd4:	4614      	mov	r4, r2
 8012cd6:	18d5      	adds	r5, r2, r3
 8012cd8:	42ac      	cmp	r4, r5
 8012cda:	d101      	bne.n	8012ce0 <__sfputs_r+0x12>
 8012cdc:	2000      	movs	r0, #0
 8012cde:	e007      	b.n	8012cf0 <__sfputs_r+0x22>
 8012ce0:	463a      	mov	r2, r7
 8012ce2:	4630      	mov	r0, r6
 8012ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ce8:	f7ff ffdc 	bl	8012ca4 <__sfputc_r>
 8012cec:	1c43      	adds	r3, r0, #1
 8012cee:	d1f3      	bne.n	8012cd8 <__sfputs_r+0xa>
 8012cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012cf4 <_vfiprintf_r>:
 8012cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cf8:	460d      	mov	r5, r1
 8012cfa:	4614      	mov	r4, r2
 8012cfc:	4698      	mov	r8, r3
 8012cfe:	4606      	mov	r6, r0
 8012d00:	b09d      	sub	sp, #116	; 0x74
 8012d02:	b118      	cbz	r0, 8012d0c <_vfiprintf_r+0x18>
 8012d04:	6983      	ldr	r3, [r0, #24]
 8012d06:	b90b      	cbnz	r3, 8012d0c <_vfiprintf_r+0x18>
 8012d08:	f000 fb12 	bl	8013330 <__sinit>
 8012d0c:	4b89      	ldr	r3, [pc, #548]	; (8012f34 <_vfiprintf_r+0x240>)
 8012d0e:	429d      	cmp	r5, r3
 8012d10:	d11b      	bne.n	8012d4a <_vfiprintf_r+0x56>
 8012d12:	6875      	ldr	r5, [r6, #4]
 8012d14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d16:	07d9      	lsls	r1, r3, #31
 8012d18:	d405      	bmi.n	8012d26 <_vfiprintf_r+0x32>
 8012d1a:	89ab      	ldrh	r3, [r5, #12]
 8012d1c:	059a      	lsls	r2, r3, #22
 8012d1e:	d402      	bmi.n	8012d26 <_vfiprintf_r+0x32>
 8012d20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d22:	f000 fba3 	bl	801346c <__retarget_lock_acquire_recursive>
 8012d26:	89ab      	ldrh	r3, [r5, #12]
 8012d28:	071b      	lsls	r3, r3, #28
 8012d2a:	d501      	bpl.n	8012d30 <_vfiprintf_r+0x3c>
 8012d2c:	692b      	ldr	r3, [r5, #16]
 8012d2e:	b9eb      	cbnz	r3, 8012d6c <_vfiprintf_r+0x78>
 8012d30:	4629      	mov	r1, r5
 8012d32:	4630      	mov	r0, r6
 8012d34:	f000 f970 	bl	8013018 <__swsetup_r>
 8012d38:	b1c0      	cbz	r0, 8012d6c <_vfiprintf_r+0x78>
 8012d3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012d3c:	07dc      	lsls	r4, r3, #31
 8012d3e:	d50e      	bpl.n	8012d5e <_vfiprintf_r+0x6a>
 8012d40:	f04f 30ff 	mov.w	r0, #4294967295
 8012d44:	b01d      	add	sp, #116	; 0x74
 8012d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d4a:	4b7b      	ldr	r3, [pc, #492]	; (8012f38 <_vfiprintf_r+0x244>)
 8012d4c:	429d      	cmp	r5, r3
 8012d4e:	d101      	bne.n	8012d54 <_vfiprintf_r+0x60>
 8012d50:	68b5      	ldr	r5, [r6, #8]
 8012d52:	e7df      	b.n	8012d14 <_vfiprintf_r+0x20>
 8012d54:	4b79      	ldr	r3, [pc, #484]	; (8012f3c <_vfiprintf_r+0x248>)
 8012d56:	429d      	cmp	r5, r3
 8012d58:	bf08      	it	eq
 8012d5a:	68f5      	ldreq	r5, [r6, #12]
 8012d5c:	e7da      	b.n	8012d14 <_vfiprintf_r+0x20>
 8012d5e:	89ab      	ldrh	r3, [r5, #12]
 8012d60:	0598      	lsls	r0, r3, #22
 8012d62:	d4ed      	bmi.n	8012d40 <_vfiprintf_r+0x4c>
 8012d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d66:	f000 fb82 	bl	801346e <__retarget_lock_release_recursive>
 8012d6a:	e7e9      	b.n	8012d40 <_vfiprintf_r+0x4c>
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8012d70:	2320      	movs	r3, #32
 8012d72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012d76:	2330      	movs	r3, #48	; 0x30
 8012d78:	f04f 0901 	mov.w	r9, #1
 8012d7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d80:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8012f40 <_vfiprintf_r+0x24c>
 8012d84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012d88:	4623      	mov	r3, r4
 8012d8a:	469a      	mov	sl, r3
 8012d8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d90:	b10a      	cbz	r2, 8012d96 <_vfiprintf_r+0xa2>
 8012d92:	2a25      	cmp	r2, #37	; 0x25
 8012d94:	d1f9      	bne.n	8012d8a <_vfiprintf_r+0x96>
 8012d96:	ebba 0b04 	subs.w	fp, sl, r4
 8012d9a:	d00b      	beq.n	8012db4 <_vfiprintf_r+0xc0>
 8012d9c:	465b      	mov	r3, fp
 8012d9e:	4622      	mov	r2, r4
 8012da0:	4629      	mov	r1, r5
 8012da2:	4630      	mov	r0, r6
 8012da4:	f7ff ff93 	bl	8012cce <__sfputs_r>
 8012da8:	3001      	adds	r0, #1
 8012daa:	f000 80aa 	beq.w	8012f02 <_vfiprintf_r+0x20e>
 8012dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012db0:	445a      	add	r2, fp
 8012db2:	9209      	str	r2, [sp, #36]	; 0x24
 8012db4:	f89a 3000 	ldrb.w	r3, [sl]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	f000 80a2 	beq.w	8012f02 <_vfiprintf_r+0x20e>
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8012dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012dc8:	f10a 0a01 	add.w	sl, sl, #1
 8012dcc:	9304      	str	r3, [sp, #16]
 8012dce:	9307      	str	r3, [sp, #28]
 8012dd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012dd4:	931a      	str	r3, [sp, #104]	; 0x68
 8012dd6:	4654      	mov	r4, sl
 8012dd8:	2205      	movs	r2, #5
 8012dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012dde:	4858      	ldr	r0, [pc, #352]	; (8012f40 <_vfiprintf_r+0x24c>)
 8012de0:	f7ff f976 	bl	80120d0 <memchr>
 8012de4:	9a04      	ldr	r2, [sp, #16]
 8012de6:	b9d8      	cbnz	r0, 8012e20 <_vfiprintf_r+0x12c>
 8012de8:	06d1      	lsls	r1, r2, #27
 8012dea:	bf44      	itt	mi
 8012dec:	2320      	movmi	r3, #32
 8012dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012df2:	0713      	lsls	r3, r2, #28
 8012df4:	bf44      	itt	mi
 8012df6:	232b      	movmi	r3, #43	; 0x2b
 8012df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8012e00:	2b2a      	cmp	r3, #42	; 0x2a
 8012e02:	d015      	beq.n	8012e30 <_vfiprintf_r+0x13c>
 8012e04:	4654      	mov	r4, sl
 8012e06:	2000      	movs	r0, #0
 8012e08:	f04f 0c0a 	mov.w	ip, #10
 8012e0c:	9a07      	ldr	r2, [sp, #28]
 8012e0e:	4621      	mov	r1, r4
 8012e10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e14:	3b30      	subs	r3, #48	; 0x30
 8012e16:	2b09      	cmp	r3, #9
 8012e18:	d94e      	bls.n	8012eb8 <_vfiprintf_r+0x1c4>
 8012e1a:	b1b0      	cbz	r0, 8012e4a <_vfiprintf_r+0x156>
 8012e1c:	9207      	str	r2, [sp, #28]
 8012e1e:	e014      	b.n	8012e4a <_vfiprintf_r+0x156>
 8012e20:	eba0 0308 	sub.w	r3, r0, r8
 8012e24:	fa09 f303 	lsl.w	r3, r9, r3
 8012e28:	4313      	orrs	r3, r2
 8012e2a:	46a2      	mov	sl, r4
 8012e2c:	9304      	str	r3, [sp, #16]
 8012e2e:	e7d2      	b.n	8012dd6 <_vfiprintf_r+0xe2>
 8012e30:	9b03      	ldr	r3, [sp, #12]
 8012e32:	1d19      	adds	r1, r3, #4
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	9103      	str	r1, [sp, #12]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	bfbb      	ittet	lt
 8012e3c:	425b      	neglt	r3, r3
 8012e3e:	f042 0202 	orrlt.w	r2, r2, #2
 8012e42:	9307      	strge	r3, [sp, #28]
 8012e44:	9307      	strlt	r3, [sp, #28]
 8012e46:	bfb8      	it	lt
 8012e48:	9204      	strlt	r2, [sp, #16]
 8012e4a:	7823      	ldrb	r3, [r4, #0]
 8012e4c:	2b2e      	cmp	r3, #46	; 0x2e
 8012e4e:	d10c      	bne.n	8012e6a <_vfiprintf_r+0x176>
 8012e50:	7863      	ldrb	r3, [r4, #1]
 8012e52:	2b2a      	cmp	r3, #42	; 0x2a
 8012e54:	d135      	bne.n	8012ec2 <_vfiprintf_r+0x1ce>
 8012e56:	9b03      	ldr	r3, [sp, #12]
 8012e58:	3402      	adds	r4, #2
 8012e5a:	1d1a      	adds	r2, r3, #4
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	9203      	str	r2, [sp, #12]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	bfb8      	it	lt
 8012e64:	f04f 33ff 	movlt.w	r3, #4294967295
 8012e68:	9305      	str	r3, [sp, #20]
 8012e6a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8012f44 <_vfiprintf_r+0x250>
 8012e6e:	2203      	movs	r2, #3
 8012e70:	4650      	mov	r0, sl
 8012e72:	7821      	ldrb	r1, [r4, #0]
 8012e74:	f7ff f92c 	bl	80120d0 <memchr>
 8012e78:	b140      	cbz	r0, 8012e8c <_vfiprintf_r+0x198>
 8012e7a:	2340      	movs	r3, #64	; 0x40
 8012e7c:	eba0 000a 	sub.w	r0, r0, sl
 8012e80:	fa03 f000 	lsl.w	r0, r3, r0
 8012e84:	9b04      	ldr	r3, [sp, #16]
 8012e86:	3401      	adds	r4, #1
 8012e88:	4303      	orrs	r3, r0
 8012e8a:	9304      	str	r3, [sp, #16]
 8012e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e90:	2206      	movs	r2, #6
 8012e92:	482d      	ldr	r0, [pc, #180]	; (8012f48 <_vfiprintf_r+0x254>)
 8012e94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012e98:	f7ff f91a 	bl	80120d0 <memchr>
 8012e9c:	2800      	cmp	r0, #0
 8012e9e:	d03f      	beq.n	8012f20 <_vfiprintf_r+0x22c>
 8012ea0:	4b2a      	ldr	r3, [pc, #168]	; (8012f4c <_vfiprintf_r+0x258>)
 8012ea2:	bb1b      	cbnz	r3, 8012eec <_vfiprintf_r+0x1f8>
 8012ea4:	9b03      	ldr	r3, [sp, #12]
 8012ea6:	3307      	adds	r3, #7
 8012ea8:	f023 0307 	bic.w	r3, r3, #7
 8012eac:	3308      	adds	r3, #8
 8012eae:	9303      	str	r3, [sp, #12]
 8012eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012eb2:	443b      	add	r3, r7
 8012eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8012eb6:	e767      	b.n	8012d88 <_vfiprintf_r+0x94>
 8012eb8:	460c      	mov	r4, r1
 8012eba:	2001      	movs	r0, #1
 8012ebc:	fb0c 3202 	mla	r2, ip, r2, r3
 8012ec0:	e7a5      	b.n	8012e0e <_vfiprintf_r+0x11a>
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	f04f 0c0a 	mov.w	ip, #10
 8012ec8:	4619      	mov	r1, r3
 8012eca:	3401      	adds	r4, #1
 8012ecc:	9305      	str	r3, [sp, #20]
 8012ece:	4620      	mov	r0, r4
 8012ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ed4:	3a30      	subs	r2, #48	; 0x30
 8012ed6:	2a09      	cmp	r2, #9
 8012ed8:	d903      	bls.n	8012ee2 <_vfiprintf_r+0x1ee>
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d0c5      	beq.n	8012e6a <_vfiprintf_r+0x176>
 8012ede:	9105      	str	r1, [sp, #20]
 8012ee0:	e7c3      	b.n	8012e6a <_vfiprintf_r+0x176>
 8012ee2:	4604      	mov	r4, r0
 8012ee4:	2301      	movs	r3, #1
 8012ee6:	fb0c 2101 	mla	r1, ip, r1, r2
 8012eea:	e7f0      	b.n	8012ece <_vfiprintf_r+0x1da>
 8012eec:	ab03      	add	r3, sp, #12
 8012eee:	9300      	str	r3, [sp, #0]
 8012ef0:	462a      	mov	r2, r5
 8012ef2:	4630      	mov	r0, r6
 8012ef4:	4b16      	ldr	r3, [pc, #88]	; (8012f50 <_vfiprintf_r+0x25c>)
 8012ef6:	a904      	add	r1, sp, #16
 8012ef8:	f7fd fd70 	bl	80109dc <_printf_float>
 8012efc:	4607      	mov	r7, r0
 8012efe:	1c78      	adds	r0, r7, #1
 8012f00:	d1d6      	bne.n	8012eb0 <_vfiprintf_r+0x1bc>
 8012f02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012f04:	07d9      	lsls	r1, r3, #31
 8012f06:	d405      	bmi.n	8012f14 <_vfiprintf_r+0x220>
 8012f08:	89ab      	ldrh	r3, [r5, #12]
 8012f0a:	059a      	lsls	r2, r3, #22
 8012f0c:	d402      	bmi.n	8012f14 <_vfiprintf_r+0x220>
 8012f0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012f10:	f000 faad 	bl	801346e <__retarget_lock_release_recursive>
 8012f14:	89ab      	ldrh	r3, [r5, #12]
 8012f16:	065b      	lsls	r3, r3, #25
 8012f18:	f53f af12 	bmi.w	8012d40 <_vfiprintf_r+0x4c>
 8012f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012f1e:	e711      	b.n	8012d44 <_vfiprintf_r+0x50>
 8012f20:	ab03      	add	r3, sp, #12
 8012f22:	9300      	str	r3, [sp, #0]
 8012f24:	462a      	mov	r2, r5
 8012f26:	4630      	mov	r0, r6
 8012f28:	4b09      	ldr	r3, [pc, #36]	; (8012f50 <_vfiprintf_r+0x25c>)
 8012f2a:	a904      	add	r1, sp, #16
 8012f2c:	f7fd fff2 	bl	8010f14 <_printf_i>
 8012f30:	e7e4      	b.n	8012efc <_vfiprintf_r+0x208>
 8012f32:	bf00      	nop
 8012f34:	08014058 	.word	0x08014058
 8012f38:	08014078 	.word	0x08014078
 8012f3c:	08014038 	.word	0x08014038
 8012f40:	08014024 	.word	0x08014024
 8012f44:	0801402a 	.word	0x0801402a
 8012f48:	0801402e 	.word	0x0801402e
 8012f4c:	080109dd 	.word	0x080109dd
 8012f50:	08012ccf 	.word	0x08012ccf

08012f54 <_sbrk_r>:
 8012f54:	b538      	push	{r3, r4, r5, lr}
 8012f56:	2300      	movs	r3, #0
 8012f58:	4d05      	ldr	r5, [pc, #20]	; (8012f70 <_sbrk_r+0x1c>)
 8012f5a:	4604      	mov	r4, r0
 8012f5c:	4608      	mov	r0, r1
 8012f5e:	602b      	str	r3, [r5, #0]
 8012f60:	f7f1 f9ea 	bl	8004338 <_sbrk>
 8012f64:	1c43      	adds	r3, r0, #1
 8012f66:	d102      	bne.n	8012f6e <_sbrk_r+0x1a>
 8012f68:	682b      	ldr	r3, [r5, #0]
 8012f6a:	b103      	cbz	r3, 8012f6e <_sbrk_r+0x1a>
 8012f6c:	6023      	str	r3, [r4, #0]
 8012f6e:	bd38      	pop	{r3, r4, r5, pc}
 8012f70:	20003660 	.word	0x20003660

08012f74 <__swbuf_r>:
 8012f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f76:	460e      	mov	r6, r1
 8012f78:	4614      	mov	r4, r2
 8012f7a:	4605      	mov	r5, r0
 8012f7c:	b118      	cbz	r0, 8012f86 <__swbuf_r+0x12>
 8012f7e:	6983      	ldr	r3, [r0, #24]
 8012f80:	b90b      	cbnz	r3, 8012f86 <__swbuf_r+0x12>
 8012f82:	f000 f9d5 	bl	8013330 <__sinit>
 8012f86:	4b21      	ldr	r3, [pc, #132]	; (801300c <__swbuf_r+0x98>)
 8012f88:	429c      	cmp	r4, r3
 8012f8a:	d12b      	bne.n	8012fe4 <__swbuf_r+0x70>
 8012f8c:	686c      	ldr	r4, [r5, #4]
 8012f8e:	69a3      	ldr	r3, [r4, #24]
 8012f90:	60a3      	str	r3, [r4, #8]
 8012f92:	89a3      	ldrh	r3, [r4, #12]
 8012f94:	071a      	lsls	r2, r3, #28
 8012f96:	d52f      	bpl.n	8012ff8 <__swbuf_r+0x84>
 8012f98:	6923      	ldr	r3, [r4, #16]
 8012f9a:	b36b      	cbz	r3, 8012ff8 <__swbuf_r+0x84>
 8012f9c:	6923      	ldr	r3, [r4, #16]
 8012f9e:	6820      	ldr	r0, [r4, #0]
 8012fa0:	b2f6      	uxtb	r6, r6
 8012fa2:	1ac0      	subs	r0, r0, r3
 8012fa4:	6963      	ldr	r3, [r4, #20]
 8012fa6:	4637      	mov	r7, r6
 8012fa8:	4283      	cmp	r3, r0
 8012faa:	dc04      	bgt.n	8012fb6 <__swbuf_r+0x42>
 8012fac:	4621      	mov	r1, r4
 8012fae:	4628      	mov	r0, r5
 8012fb0:	f000 f92a 	bl	8013208 <_fflush_r>
 8012fb4:	bb30      	cbnz	r0, 8013004 <__swbuf_r+0x90>
 8012fb6:	68a3      	ldr	r3, [r4, #8]
 8012fb8:	3001      	adds	r0, #1
 8012fba:	3b01      	subs	r3, #1
 8012fbc:	60a3      	str	r3, [r4, #8]
 8012fbe:	6823      	ldr	r3, [r4, #0]
 8012fc0:	1c5a      	adds	r2, r3, #1
 8012fc2:	6022      	str	r2, [r4, #0]
 8012fc4:	701e      	strb	r6, [r3, #0]
 8012fc6:	6963      	ldr	r3, [r4, #20]
 8012fc8:	4283      	cmp	r3, r0
 8012fca:	d004      	beq.n	8012fd6 <__swbuf_r+0x62>
 8012fcc:	89a3      	ldrh	r3, [r4, #12]
 8012fce:	07db      	lsls	r3, r3, #31
 8012fd0:	d506      	bpl.n	8012fe0 <__swbuf_r+0x6c>
 8012fd2:	2e0a      	cmp	r6, #10
 8012fd4:	d104      	bne.n	8012fe0 <__swbuf_r+0x6c>
 8012fd6:	4621      	mov	r1, r4
 8012fd8:	4628      	mov	r0, r5
 8012fda:	f000 f915 	bl	8013208 <_fflush_r>
 8012fde:	b988      	cbnz	r0, 8013004 <__swbuf_r+0x90>
 8012fe0:	4638      	mov	r0, r7
 8012fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fe4:	4b0a      	ldr	r3, [pc, #40]	; (8013010 <__swbuf_r+0x9c>)
 8012fe6:	429c      	cmp	r4, r3
 8012fe8:	d101      	bne.n	8012fee <__swbuf_r+0x7a>
 8012fea:	68ac      	ldr	r4, [r5, #8]
 8012fec:	e7cf      	b.n	8012f8e <__swbuf_r+0x1a>
 8012fee:	4b09      	ldr	r3, [pc, #36]	; (8013014 <__swbuf_r+0xa0>)
 8012ff0:	429c      	cmp	r4, r3
 8012ff2:	bf08      	it	eq
 8012ff4:	68ec      	ldreq	r4, [r5, #12]
 8012ff6:	e7ca      	b.n	8012f8e <__swbuf_r+0x1a>
 8012ff8:	4621      	mov	r1, r4
 8012ffa:	4628      	mov	r0, r5
 8012ffc:	f000 f80c 	bl	8013018 <__swsetup_r>
 8013000:	2800      	cmp	r0, #0
 8013002:	d0cb      	beq.n	8012f9c <__swbuf_r+0x28>
 8013004:	f04f 37ff 	mov.w	r7, #4294967295
 8013008:	e7ea      	b.n	8012fe0 <__swbuf_r+0x6c>
 801300a:	bf00      	nop
 801300c:	08014058 	.word	0x08014058
 8013010:	08014078 	.word	0x08014078
 8013014:	08014038 	.word	0x08014038

08013018 <__swsetup_r>:
 8013018:	4b32      	ldr	r3, [pc, #200]	; (80130e4 <__swsetup_r+0xcc>)
 801301a:	b570      	push	{r4, r5, r6, lr}
 801301c:	681d      	ldr	r5, [r3, #0]
 801301e:	4606      	mov	r6, r0
 8013020:	460c      	mov	r4, r1
 8013022:	b125      	cbz	r5, 801302e <__swsetup_r+0x16>
 8013024:	69ab      	ldr	r3, [r5, #24]
 8013026:	b913      	cbnz	r3, 801302e <__swsetup_r+0x16>
 8013028:	4628      	mov	r0, r5
 801302a:	f000 f981 	bl	8013330 <__sinit>
 801302e:	4b2e      	ldr	r3, [pc, #184]	; (80130e8 <__swsetup_r+0xd0>)
 8013030:	429c      	cmp	r4, r3
 8013032:	d10f      	bne.n	8013054 <__swsetup_r+0x3c>
 8013034:	686c      	ldr	r4, [r5, #4]
 8013036:	89a3      	ldrh	r3, [r4, #12]
 8013038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801303c:	0719      	lsls	r1, r3, #28
 801303e:	d42c      	bmi.n	801309a <__swsetup_r+0x82>
 8013040:	06dd      	lsls	r5, r3, #27
 8013042:	d411      	bmi.n	8013068 <__swsetup_r+0x50>
 8013044:	2309      	movs	r3, #9
 8013046:	6033      	str	r3, [r6, #0]
 8013048:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801304c:	f04f 30ff 	mov.w	r0, #4294967295
 8013050:	81a3      	strh	r3, [r4, #12]
 8013052:	e03e      	b.n	80130d2 <__swsetup_r+0xba>
 8013054:	4b25      	ldr	r3, [pc, #148]	; (80130ec <__swsetup_r+0xd4>)
 8013056:	429c      	cmp	r4, r3
 8013058:	d101      	bne.n	801305e <__swsetup_r+0x46>
 801305a:	68ac      	ldr	r4, [r5, #8]
 801305c:	e7eb      	b.n	8013036 <__swsetup_r+0x1e>
 801305e:	4b24      	ldr	r3, [pc, #144]	; (80130f0 <__swsetup_r+0xd8>)
 8013060:	429c      	cmp	r4, r3
 8013062:	bf08      	it	eq
 8013064:	68ec      	ldreq	r4, [r5, #12]
 8013066:	e7e6      	b.n	8013036 <__swsetup_r+0x1e>
 8013068:	0758      	lsls	r0, r3, #29
 801306a:	d512      	bpl.n	8013092 <__swsetup_r+0x7a>
 801306c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801306e:	b141      	cbz	r1, 8013082 <__swsetup_r+0x6a>
 8013070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013074:	4299      	cmp	r1, r3
 8013076:	d002      	beq.n	801307e <__swsetup_r+0x66>
 8013078:	4630      	mov	r0, r6
 801307a:	f7ff fbdb 	bl	8012834 <_free_r>
 801307e:	2300      	movs	r3, #0
 8013080:	6363      	str	r3, [r4, #52]	; 0x34
 8013082:	89a3      	ldrh	r3, [r4, #12]
 8013084:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013088:	81a3      	strh	r3, [r4, #12]
 801308a:	2300      	movs	r3, #0
 801308c:	6063      	str	r3, [r4, #4]
 801308e:	6923      	ldr	r3, [r4, #16]
 8013090:	6023      	str	r3, [r4, #0]
 8013092:	89a3      	ldrh	r3, [r4, #12]
 8013094:	f043 0308 	orr.w	r3, r3, #8
 8013098:	81a3      	strh	r3, [r4, #12]
 801309a:	6923      	ldr	r3, [r4, #16]
 801309c:	b94b      	cbnz	r3, 80130b2 <__swsetup_r+0x9a>
 801309e:	89a3      	ldrh	r3, [r4, #12]
 80130a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80130a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80130a8:	d003      	beq.n	80130b2 <__swsetup_r+0x9a>
 80130aa:	4621      	mov	r1, r4
 80130ac:	4630      	mov	r0, r6
 80130ae:	f000 fa05 	bl	80134bc <__smakebuf_r>
 80130b2:	89a0      	ldrh	r0, [r4, #12]
 80130b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80130b8:	f010 0301 	ands.w	r3, r0, #1
 80130bc:	d00a      	beq.n	80130d4 <__swsetup_r+0xbc>
 80130be:	2300      	movs	r3, #0
 80130c0:	60a3      	str	r3, [r4, #8]
 80130c2:	6963      	ldr	r3, [r4, #20]
 80130c4:	425b      	negs	r3, r3
 80130c6:	61a3      	str	r3, [r4, #24]
 80130c8:	6923      	ldr	r3, [r4, #16]
 80130ca:	b943      	cbnz	r3, 80130de <__swsetup_r+0xc6>
 80130cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80130d0:	d1ba      	bne.n	8013048 <__swsetup_r+0x30>
 80130d2:	bd70      	pop	{r4, r5, r6, pc}
 80130d4:	0781      	lsls	r1, r0, #30
 80130d6:	bf58      	it	pl
 80130d8:	6963      	ldrpl	r3, [r4, #20]
 80130da:	60a3      	str	r3, [r4, #8]
 80130dc:	e7f4      	b.n	80130c8 <__swsetup_r+0xb0>
 80130de:	2000      	movs	r0, #0
 80130e0:	e7f7      	b.n	80130d2 <__swsetup_r+0xba>
 80130e2:	bf00      	nop
 80130e4:	20000670 	.word	0x20000670
 80130e8:	08014058 	.word	0x08014058
 80130ec:	08014078 	.word	0x08014078
 80130f0:	08014038 	.word	0x08014038

080130f4 <abort>:
 80130f4:	2006      	movs	r0, #6
 80130f6:	b508      	push	{r3, lr}
 80130f8:	f000 fab0 	bl	801365c <raise>
 80130fc:	2001      	movs	r0, #1
 80130fe:	f7f1 f8a8 	bl	8004252 <_exit>
	...

08013104 <__sflush_r>:
 8013104:	898a      	ldrh	r2, [r1, #12]
 8013106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013108:	4605      	mov	r5, r0
 801310a:	0710      	lsls	r0, r2, #28
 801310c:	460c      	mov	r4, r1
 801310e:	d457      	bmi.n	80131c0 <__sflush_r+0xbc>
 8013110:	684b      	ldr	r3, [r1, #4]
 8013112:	2b00      	cmp	r3, #0
 8013114:	dc04      	bgt.n	8013120 <__sflush_r+0x1c>
 8013116:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013118:	2b00      	cmp	r3, #0
 801311a:	dc01      	bgt.n	8013120 <__sflush_r+0x1c>
 801311c:	2000      	movs	r0, #0
 801311e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013120:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013122:	2e00      	cmp	r6, #0
 8013124:	d0fa      	beq.n	801311c <__sflush_r+0x18>
 8013126:	2300      	movs	r3, #0
 8013128:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801312c:	682f      	ldr	r7, [r5, #0]
 801312e:	602b      	str	r3, [r5, #0]
 8013130:	d032      	beq.n	8013198 <__sflush_r+0x94>
 8013132:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013134:	89a3      	ldrh	r3, [r4, #12]
 8013136:	075a      	lsls	r2, r3, #29
 8013138:	d505      	bpl.n	8013146 <__sflush_r+0x42>
 801313a:	6863      	ldr	r3, [r4, #4]
 801313c:	1ac0      	subs	r0, r0, r3
 801313e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013140:	b10b      	cbz	r3, 8013146 <__sflush_r+0x42>
 8013142:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013144:	1ac0      	subs	r0, r0, r3
 8013146:	2300      	movs	r3, #0
 8013148:	4602      	mov	r2, r0
 801314a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801314c:	4628      	mov	r0, r5
 801314e:	6a21      	ldr	r1, [r4, #32]
 8013150:	47b0      	blx	r6
 8013152:	1c43      	adds	r3, r0, #1
 8013154:	89a3      	ldrh	r3, [r4, #12]
 8013156:	d106      	bne.n	8013166 <__sflush_r+0x62>
 8013158:	6829      	ldr	r1, [r5, #0]
 801315a:	291d      	cmp	r1, #29
 801315c:	d82c      	bhi.n	80131b8 <__sflush_r+0xb4>
 801315e:	4a29      	ldr	r2, [pc, #164]	; (8013204 <__sflush_r+0x100>)
 8013160:	40ca      	lsrs	r2, r1
 8013162:	07d6      	lsls	r6, r2, #31
 8013164:	d528      	bpl.n	80131b8 <__sflush_r+0xb4>
 8013166:	2200      	movs	r2, #0
 8013168:	6062      	str	r2, [r4, #4]
 801316a:	6922      	ldr	r2, [r4, #16]
 801316c:	04d9      	lsls	r1, r3, #19
 801316e:	6022      	str	r2, [r4, #0]
 8013170:	d504      	bpl.n	801317c <__sflush_r+0x78>
 8013172:	1c42      	adds	r2, r0, #1
 8013174:	d101      	bne.n	801317a <__sflush_r+0x76>
 8013176:	682b      	ldr	r3, [r5, #0]
 8013178:	b903      	cbnz	r3, 801317c <__sflush_r+0x78>
 801317a:	6560      	str	r0, [r4, #84]	; 0x54
 801317c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801317e:	602f      	str	r7, [r5, #0]
 8013180:	2900      	cmp	r1, #0
 8013182:	d0cb      	beq.n	801311c <__sflush_r+0x18>
 8013184:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013188:	4299      	cmp	r1, r3
 801318a:	d002      	beq.n	8013192 <__sflush_r+0x8e>
 801318c:	4628      	mov	r0, r5
 801318e:	f7ff fb51 	bl	8012834 <_free_r>
 8013192:	2000      	movs	r0, #0
 8013194:	6360      	str	r0, [r4, #52]	; 0x34
 8013196:	e7c2      	b.n	801311e <__sflush_r+0x1a>
 8013198:	6a21      	ldr	r1, [r4, #32]
 801319a:	2301      	movs	r3, #1
 801319c:	4628      	mov	r0, r5
 801319e:	47b0      	blx	r6
 80131a0:	1c41      	adds	r1, r0, #1
 80131a2:	d1c7      	bne.n	8013134 <__sflush_r+0x30>
 80131a4:	682b      	ldr	r3, [r5, #0]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d0c4      	beq.n	8013134 <__sflush_r+0x30>
 80131aa:	2b1d      	cmp	r3, #29
 80131ac:	d001      	beq.n	80131b2 <__sflush_r+0xae>
 80131ae:	2b16      	cmp	r3, #22
 80131b0:	d101      	bne.n	80131b6 <__sflush_r+0xb2>
 80131b2:	602f      	str	r7, [r5, #0]
 80131b4:	e7b2      	b.n	801311c <__sflush_r+0x18>
 80131b6:	89a3      	ldrh	r3, [r4, #12]
 80131b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131bc:	81a3      	strh	r3, [r4, #12]
 80131be:	e7ae      	b.n	801311e <__sflush_r+0x1a>
 80131c0:	690f      	ldr	r7, [r1, #16]
 80131c2:	2f00      	cmp	r7, #0
 80131c4:	d0aa      	beq.n	801311c <__sflush_r+0x18>
 80131c6:	0793      	lsls	r3, r2, #30
 80131c8:	bf18      	it	ne
 80131ca:	2300      	movne	r3, #0
 80131cc:	680e      	ldr	r6, [r1, #0]
 80131ce:	bf08      	it	eq
 80131d0:	694b      	ldreq	r3, [r1, #20]
 80131d2:	1bf6      	subs	r6, r6, r7
 80131d4:	600f      	str	r7, [r1, #0]
 80131d6:	608b      	str	r3, [r1, #8]
 80131d8:	2e00      	cmp	r6, #0
 80131da:	dd9f      	ble.n	801311c <__sflush_r+0x18>
 80131dc:	4633      	mov	r3, r6
 80131de:	463a      	mov	r2, r7
 80131e0:	4628      	mov	r0, r5
 80131e2:	6a21      	ldr	r1, [r4, #32]
 80131e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80131e8:	47e0      	blx	ip
 80131ea:	2800      	cmp	r0, #0
 80131ec:	dc06      	bgt.n	80131fc <__sflush_r+0xf8>
 80131ee:	89a3      	ldrh	r3, [r4, #12]
 80131f0:	f04f 30ff 	mov.w	r0, #4294967295
 80131f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131f8:	81a3      	strh	r3, [r4, #12]
 80131fa:	e790      	b.n	801311e <__sflush_r+0x1a>
 80131fc:	4407      	add	r7, r0
 80131fe:	1a36      	subs	r6, r6, r0
 8013200:	e7ea      	b.n	80131d8 <__sflush_r+0xd4>
 8013202:	bf00      	nop
 8013204:	20400001 	.word	0x20400001

08013208 <_fflush_r>:
 8013208:	b538      	push	{r3, r4, r5, lr}
 801320a:	690b      	ldr	r3, [r1, #16]
 801320c:	4605      	mov	r5, r0
 801320e:	460c      	mov	r4, r1
 8013210:	b913      	cbnz	r3, 8013218 <_fflush_r+0x10>
 8013212:	2500      	movs	r5, #0
 8013214:	4628      	mov	r0, r5
 8013216:	bd38      	pop	{r3, r4, r5, pc}
 8013218:	b118      	cbz	r0, 8013222 <_fflush_r+0x1a>
 801321a:	6983      	ldr	r3, [r0, #24]
 801321c:	b90b      	cbnz	r3, 8013222 <_fflush_r+0x1a>
 801321e:	f000 f887 	bl	8013330 <__sinit>
 8013222:	4b14      	ldr	r3, [pc, #80]	; (8013274 <_fflush_r+0x6c>)
 8013224:	429c      	cmp	r4, r3
 8013226:	d11b      	bne.n	8013260 <_fflush_r+0x58>
 8013228:	686c      	ldr	r4, [r5, #4]
 801322a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d0ef      	beq.n	8013212 <_fflush_r+0xa>
 8013232:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013234:	07d0      	lsls	r0, r2, #31
 8013236:	d404      	bmi.n	8013242 <_fflush_r+0x3a>
 8013238:	0599      	lsls	r1, r3, #22
 801323a:	d402      	bmi.n	8013242 <_fflush_r+0x3a>
 801323c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801323e:	f000 f915 	bl	801346c <__retarget_lock_acquire_recursive>
 8013242:	4628      	mov	r0, r5
 8013244:	4621      	mov	r1, r4
 8013246:	f7ff ff5d 	bl	8013104 <__sflush_r>
 801324a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801324c:	4605      	mov	r5, r0
 801324e:	07da      	lsls	r2, r3, #31
 8013250:	d4e0      	bmi.n	8013214 <_fflush_r+0xc>
 8013252:	89a3      	ldrh	r3, [r4, #12]
 8013254:	059b      	lsls	r3, r3, #22
 8013256:	d4dd      	bmi.n	8013214 <_fflush_r+0xc>
 8013258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801325a:	f000 f908 	bl	801346e <__retarget_lock_release_recursive>
 801325e:	e7d9      	b.n	8013214 <_fflush_r+0xc>
 8013260:	4b05      	ldr	r3, [pc, #20]	; (8013278 <_fflush_r+0x70>)
 8013262:	429c      	cmp	r4, r3
 8013264:	d101      	bne.n	801326a <_fflush_r+0x62>
 8013266:	68ac      	ldr	r4, [r5, #8]
 8013268:	e7df      	b.n	801322a <_fflush_r+0x22>
 801326a:	4b04      	ldr	r3, [pc, #16]	; (801327c <_fflush_r+0x74>)
 801326c:	429c      	cmp	r4, r3
 801326e:	bf08      	it	eq
 8013270:	68ec      	ldreq	r4, [r5, #12]
 8013272:	e7da      	b.n	801322a <_fflush_r+0x22>
 8013274:	08014058 	.word	0x08014058
 8013278:	08014078 	.word	0x08014078
 801327c:	08014038 	.word	0x08014038

08013280 <std>:
 8013280:	2300      	movs	r3, #0
 8013282:	b510      	push	{r4, lr}
 8013284:	4604      	mov	r4, r0
 8013286:	e9c0 3300 	strd	r3, r3, [r0]
 801328a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801328e:	6083      	str	r3, [r0, #8]
 8013290:	8181      	strh	r1, [r0, #12]
 8013292:	6643      	str	r3, [r0, #100]	; 0x64
 8013294:	81c2      	strh	r2, [r0, #14]
 8013296:	6183      	str	r3, [r0, #24]
 8013298:	4619      	mov	r1, r3
 801329a:	2208      	movs	r2, #8
 801329c:	305c      	adds	r0, #92	; 0x5c
 801329e:	f7fd faf7 	bl	8010890 <memset>
 80132a2:	4b05      	ldr	r3, [pc, #20]	; (80132b8 <std+0x38>)
 80132a4:	6224      	str	r4, [r4, #32]
 80132a6:	6263      	str	r3, [r4, #36]	; 0x24
 80132a8:	4b04      	ldr	r3, [pc, #16]	; (80132bc <std+0x3c>)
 80132aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80132ac:	4b04      	ldr	r3, [pc, #16]	; (80132c0 <std+0x40>)
 80132ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80132b0:	4b04      	ldr	r3, [pc, #16]	; (80132c4 <std+0x44>)
 80132b2:	6323      	str	r3, [r4, #48]	; 0x30
 80132b4:	bd10      	pop	{r4, pc}
 80132b6:	bf00      	nop
 80132b8:	08013695 	.word	0x08013695
 80132bc:	080136b7 	.word	0x080136b7
 80132c0:	080136ef 	.word	0x080136ef
 80132c4:	08013713 	.word	0x08013713

080132c8 <_cleanup_r>:
 80132c8:	4901      	ldr	r1, [pc, #4]	; (80132d0 <_cleanup_r+0x8>)
 80132ca:	f000 b8af 	b.w	801342c <_fwalk_reent>
 80132ce:	bf00      	nop
 80132d0:	08013209 	.word	0x08013209

080132d4 <__sfmoreglue>:
 80132d4:	2268      	movs	r2, #104	; 0x68
 80132d6:	b570      	push	{r4, r5, r6, lr}
 80132d8:	1e4d      	subs	r5, r1, #1
 80132da:	4355      	muls	r5, r2
 80132dc:	460e      	mov	r6, r1
 80132de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80132e2:	f7ff fb0f 	bl	8012904 <_malloc_r>
 80132e6:	4604      	mov	r4, r0
 80132e8:	b140      	cbz	r0, 80132fc <__sfmoreglue+0x28>
 80132ea:	2100      	movs	r1, #0
 80132ec:	e9c0 1600 	strd	r1, r6, [r0]
 80132f0:	300c      	adds	r0, #12
 80132f2:	60a0      	str	r0, [r4, #8]
 80132f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80132f8:	f7fd faca 	bl	8010890 <memset>
 80132fc:	4620      	mov	r0, r4
 80132fe:	bd70      	pop	{r4, r5, r6, pc}

08013300 <__sfp_lock_acquire>:
 8013300:	4801      	ldr	r0, [pc, #4]	; (8013308 <__sfp_lock_acquire+0x8>)
 8013302:	f000 b8b3 	b.w	801346c <__retarget_lock_acquire_recursive>
 8013306:	bf00      	nop
 8013308:	2000365d 	.word	0x2000365d

0801330c <__sfp_lock_release>:
 801330c:	4801      	ldr	r0, [pc, #4]	; (8013314 <__sfp_lock_release+0x8>)
 801330e:	f000 b8ae 	b.w	801346e <__retarget_lock_release_recursive>
 8013312:	bf00      	nop
 8013314:	2000365d 	.word	0x2000365d

08013318 <__sinit_lock_acquire>:
 8013318:	4801      	ldr	r0, [pc, #4]	; (8013320 <__sinit_lock_acquire+0x8>)
 801331a:	f000 b8a7 	b.w	801346c <__retarget_lock_acquire_recursive>
 801331e:	bf00      	nop
 8013320:	2000365e 	.word	0x2000365e

08013324 <__sinit_lock_release>:
 8013324:	4801      	ldr	r0, [pc, #4]	; (801332c <__sinit_lock_release+0x8>)
 8013326:	f000 b8a2 	b.w	801346e <__retarget_lock_release_recursive>
 801332a:	bf00      	nop
 801332c:	2000365e 	.word	0x2000365e

08013330 <__sinit>:
 8013330:	b510      	push	{r4, lr}
 8013332:	4604      	mov	r4, r0
 8013334:	f7ff fff0 	bl	8013318 <__sinit_lock_acquire>
 8013338:	69a3      	ldr	r3, [r4, #24]
 801333a:	b11b      	cbz	r3, 8013344 <__sinit+0x14>
 801333c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013340:	f7ff bff0 	b.w	8013324 <__sinit_lock_release>
 8013344:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013348:	6523      	str	r3, [r4, #80]	; 0x50
 801334a:	4b13      	ldr	r3, [pc, #76]	; (8013398 <__sinit+0x68>)
 801334c:	4a13      	ldr	r2, [pc, #76]	; (801339c <__sinit+0x6c>)
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	62a2      	str	r2, [r4, #40]	; 0x28
 8013352:	42a3      	cmp	r3, r4
 8013354:	bf08      	it	eq
 8013356:	2301      	moveq	r3, #1
 8013358:	4620      	mov	r0, r4
 801335a:	bf08      	it	eq
 801335c:	61a3      	streq	r3, [r4, #24]
 801335e:	f000 f81f 	bl	80133a0 <__sfp>
 8013362:	6060      	str	r0, [r4, #4]
 8013364:	4620      	mov	r0, r4
 8013366:	f000 f81b 	bl	80133a0 <__sfp>
 801336a:	60a0      	str	r0, [r4, #8]
 801336c:	4620      	mov	r0, r4
 801336e:	f000 f817 	bl	80133a0 <__sfp>
 8013372:	2200      	movs	r2, #0
 8013374:	2104      	movs	r1, #4
 8013376:	60e0      	str	r0, [r4, #12]
 8013378:	6860      	ldr	r0, [r4, #4]
 801337a:	f7ff ff81 	bl	8013280 <std>
 801337e:	2201      	movs	r2, #1
 8013380:	2109      	movs	r1, #9
 8013382:	68a0      	ldr	r0, [r4, #8]
 8013384:	f7ff ff7c 	bl	8013280 <std>
 8013388:	2202      	movs	r2, #2
 801338a:	2112      	movs	r1, #18
 801338c:	68e0      	ldr	r0, [r4, #12]
 801338e:	f7ff ff77 	bl	8013280 <std>
 8013392:	2301      	movs	r3, #1
 8013394:	61a3      	str	r3, [r4, #24]
 8013396:	e7d1      	b.n	801333c <__sinit+0xc>
 8013398:	08013c68 	.word	0x08013c68
 801339c:	080132c9 	.word	0x080132c9

080133a0 <__sfp>:
 80133a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133a2:	4607      	mov	r7, r0
 80133a4:	f7ff ffac 	bl	8013300 <__sfp_lock_acquire>
 80133a8:	4b1e      	ldr	r3, [pc, #120]	; (8013424 <__sfp+0x84>)
 80133aa:	681e      	ldr	r6, [r3, #0]
 80133ac:	69b3      	ldr	r3, [r6, #24]
 80133ae:	b913      	cbnz	r3, 80133b6 <__sfp+0x16>
 80133b0:	4630      	mov	r0, r6
 80133b2:	f7ff ffbd 	bl	8013330 <__sinit>
 80133b6:	3648      	adds	r6, #72	; 0x48
 80133b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80133bc:	3b01      	subs	r3, #1
 80133be:	d503      	bpl.n	80133c8 <__sfp+0x28>
 80133c0:	6833      	ldr	r3, [r6, #0]
 80133c2:	b30b      	cbz	r3, 8013408 <__sfp+0x68>
 80133c4:	6836      	ldr	r6, [r6, #0]
 80133c6:	e7f7      	b.n	80133b8 <__sfp+0x18>
 80133c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80133cc:	b9d5      	cbnz	r5, 8013404 <__sfp+0x64>
 80133ce:	4b16      	ldr	r3, [pc, #88]	; (8013428 <__sfp+0x88>)
 80133d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80133d4:	60e3      	str	r3, [r4, #12]
 80133d6:	6665      	str	r5, [r4, #100]	; 0x64
 80133d8:	f000 f847 	bl	801346a <__retarget_lock_init_recursive>
 80133dc:	f7ff ff96 	bl	801330c <__sfp_lock_release>
 80133e0:	2208      	movs	r2, #8
 80133e2:	4629      	mov	r1, r5
 80133e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80133e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80133ec:	6025      	str	r5, [r4, #0]
 80133ee:	61a5      	str	r5, [r4, #24]
 80133f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80133f4:	f7fd fa4c 	bl	8010890 <memset>
 80133f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80133fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013400:	4620      	mov	r0, r4
 8013402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013404:	3468      	adds	r4, #104	; 0x68
 8013406:	e7d9      	b.n	80133bc <__sfp+0x1c>
 8013408:	2104      	movs	r1, #4
 801340a:	4638      	mov	r0, r7
 801340c:	f7ff ff62 	bl	80132d4 <__sfmoreglue>
 8013410:	4604      	mov	r4, r0
 8013412:	6030      	str	r0, [r6, #0]
 8013414:	2800      	cmp	r0, #0
 8013416:	d1d5      	bne.n	80133c4 <__sfp+0x24>
 8013418:	f7ff ff78 	bl	801330c <__sfp_lock_release>
 801341c:	230c      	movs	r3, #12
 801341e:	603b      	str	r3, [r7, #0]
 8013420:	e7ee      	b.n	8013400 <__sfp+0x60>
 8013422:	bf00      	nop
 8013424:	08013c68 	.word	0x08013c68
 8013428:	ffff0001 	.word	0xffff0001

0801342c <_fwalk_reent>:
 801342c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013430:	4606      	mov	r6, r0
 8013432:	4688      	mov	r8, r1
 8013434:	2700      	movs	r7, #0
 8013436:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801343a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801343e:	f1b9 0901 	subs.w	r9, r9, #1
 8013442:	d505      	bpl.n	8013450 <_fwalk_reent+0x24>
 8013444:	6824      	ldr	r4, [r4, #0]
 8013446:	2c00      	cmp	r4, #0
 8013448:	d1f7      	bne.n	801343a <_fwalk_reent+0xe>
 801344a:	4638      	mov	r0, r7
 801344c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013450:	89ab      	ldrh	r3, [r5, #12]
 8013452:	2b01      	cmp	r3, #1
 8013454:	d907      	bls.n	8013466 <_fwalk_reent+0x3a>
 8013456:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801345a:	3301      	adds	r3, #1
 801345c:	d003      	beq.n	8013466 <_fwalk_reent+0x3a>
 801345e:	4629      	mov	r1, r5
 8013460:	4630      	mov	r0, r6
 8013462:	47c0      	blx	r8
 8013464:	4307      	orrs	r7, r0
 8013466:	3568      	adds	r5, #104	; 0x68
 8013468:	e7e9      	b.n	801343e <_fwalk_reent+0x12>

0801346a <__retarget_lock_init_recursive>:
 801346a:	4770      	bx	lr

0801346c <__retarget_lock_acquire_recursive>:
 801346c:	4770      	bx	lr

0801346e <__retarget_lock_release_recursive>:
 801346e:	4770      	bx	lr

08013470 <__swhatbuf_r>:
 8013470:	b570      	push	{r4, r5, r6, lr}
 8013472:	460e      	mov	r6, r1
 8013474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013478:	4614      	mov	r4, r2
 801347a:	2900      	cmp	r1, #0
 801347c:	461d      	mov	r5, r3
 801347e:	b096      	sub	sp, #88	; 0x58
 8013480:	da08      	bge.n	8013494 <__swhatbuf_r+0x24>
 8013482:	2200      	movs	r2, #0
 8013484:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013488:	602a      	str	r2, [r5, #0]
 801348a:	061a      	lsls	r2, r3, #24
 801348c:	d410      	bmi.n	80134b0 <__swhatbuf_r+0x40>
 801348e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013492:	e00e      	b.n	80134b2 <__swhatbuf_r+0x42>
 8013494:	466a      	mov	r2, sp
 8013496:	f000 f96f 	bl	8013778 <_fstat_r>
 801349a:	2800      	cmp	r0, #0
 801349c:	dbf1      	blt.n	8013482 <__swhatbuf_r+0x12>
 801349e:	9a01      	ldr	r2, [sp, #4]
 80134a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80134a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80134a8:	425a      	negs	r2, r3
 80134aa:	415a      	adcs	r2, r3
 80134ac:	602a      	str	r2, [r5, #0]
 80134ae:	e7ee      	b.n	801348e <__swhatbuf_r+0x1e>
 80134b0:	2340      	movs	r3, #64	; 0x40
 80134b2:	2000      	movs	r0, #0
 80134b4:	6023      	str	r3, [r4, #0]
 80134b6:	b016      	add	sp, #88	; 0x58
 80134b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080134bc <__smakebuf_r>:
 80134bc:	898b      	ldrh	r3, [r1, #12]
 80134be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80134c0:	079d      	lsls	r5, r3, #30
 80134c2:	4606      	mov	r6, r0
 80134c4:	460c      	mov	r4, r1
 80134c6:	d507      	bpl.n	80134d8 <__smakebuf_r+0x1c>
 80134c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80134cc:	6023      	str	r3, [r4, #0]
 80134ce:	6123      	str	r3, [r4, #16]
 80134d0:	2301      	movs	r3, #1
 80134d2:	6163      	str	r3, [r4, #20]
 80134d4:	b002      	add	sp, #8
 80134d6:	bd70      	pop	{r4, r5, r6, pc}
 80134d8:	466a      	mov	r2, sp
 80134da:	ab01      	add	r3, sp, #4
 80134dc:	f7ff ffc8 	bl	8013470 <__swhatbuf_r>
 80134e0:	9900      	ldr	r1, [sp, #0]
 80134e2:	4605      	mov	r5, r0
 80134e4:	4630      	mov	r0, r6
 80134e6:	f7ff fa0d 	bl	8012904 <_malloc_r>
 80134ea:	b948      	cbnz	r0, 8013500 <__smakebuf_r+0x44>
 80134ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80134f0:	059a      	lsls	r2, r3, #22
 80134f2:	d4ef      	bmi.n	80134d4 <__smakebuf_r+0x18>
 80134f4:	f023 0303 	bic.w	r3, r3, #3
 80134f8:	f043 0302 	orr.w	r3, r3, #2
 80134fc:	81a3      	strh	r3, [r4, #12]
 80134fe:	e7e3      	b.n	80134c8 <__smakebuf_r+0xc>
 8013500:	4b0d      	ldr	r3, [pc, #52]	; (8013538 <__smakebuf_r+0x7c>)
 8013502:	62b3      	str	r3, [r6, #40]	; 0x28
 8013504:	89a3      	ldrh	r3, [r4, #12]
 8013506:	6020      	str	r0, [r4, #0]
 8013508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801350c:	81a3      	strh	r3, [r4, #12]
 801350e:	9b00      	ldr	r3, [sp, #0]
 8013510:	6120      	str	r0, [r4, #16]
 8013512:	6163      	str	r3, [r4, #20]
 8013514:	9b01      	ldr	r3, [sp, #4]
 8013516:	b15b      	cbz	r3, 8013530 <__smakebuf_r+0x74>
 8013518:	4630      	mov	r0, r6
 801351a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801351e:	f000 f93d 	bl	801379c <_isatty_r>
 8013522:	b128      	cbz	r0, 8013530 <__smakebuf_r+0x74>
 8013524:	89a3      	ldrh	r3, [r4, #12]
 8013526:	f023 0303 	bic.w	r3, r3, #3
 801352a:	f043 0301 	orr.w	r3, r3, #1
 801352e:	81a3      	strh	r3, [r4, #12]
 8013530:	89a0      	ldrh	r0, [r4, #12]
 8013532:	4305      	orrs	r5, r0
 8013534:	81a5      	strh	r5, [r4, #12]
 8013536:	e7cd      	b.n	80134d4 <__smakebuf_r+0x18>
 8013538:	080132c9 	.word	0x080132c9

0801353c <__ascii_mbtowc>:
 801353c:	b082      	sub	sp, #8
 801353e:	b901      	cbnz	r1, 8013542 <__ascii_mbtowc+0x6>
 8013540:	a901      	add	r1, sp, #4
 8013542:	b142      	cbz	r2, 8013556 <__ascii_mbtowc+0x1a>
 8013544:	b14b      	cbz	r3, 801355a <__ascii_mbtowc+0x1e>
 8013546:	7813      	ldrb	r3, [r2, #0]
 8013548:	600b      	str	r3, [r1, #0]
 801354a:	7812      	ldrb	r2, [r2, #0]
 801354c:	1e10      	subs	r0, r2, #0
 801354e:	bf18      	it	ne
 8013550:	2001      	movne	r0, #1
 8013552:	b002      	add	sp, #8
 8013554:	4770      	bx	lr
 8013556:	4610      	mov	r0, r2
 8013558:	e7fb      	b.n	8013552 <__ascii_mbtowc+0x16>
 801355a:	f06f 0001 	mvn.w	r0, #1
 801355e:	e7f8      	b.n	8013552 <__ascii_mbtowc+0x16>

08013560 <memmove>:
 8013560:	4288      	cmp	r0, r1
 8013562:	b510      	push	{r4, lr}
 8013564:	eb01 0402 	add.w	r4, r1, r2
 8013568:	d902      	bls.n	8013570 <memmove+0x10>
 801356a:	4284      	cmp	r4, r0
 801356c:	4623      	mov	r3, r4
 801356e:	d807      	bhi.n	8013580 <memmove+0x20>
 8013570:	1e43      	subs	r3, r0, #1
 8013572:	42a1      	cmp	r1, r4
 8013574:	d008      	beq.n	8013588 <memmove+0x28>
 8013576:	f811 2b01 	ldrb.w	r2, [r1], #1
 801357a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801357e:	e7f8      	b.n	8013572 <memmove+0x12>
 8013580:	4601      	mov	r1, r0
 8013582:	4402      	add	r2, r0
 8013584:	428a      	cmp	r2, r1
 8013586:	d100      	bne.n	801358a <memmove+0x2a>
 8013588:	bd10      	pop	{r4, pc}
 801358a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801358e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013592:	e7f7      	b.n	8013584 <memmove+0x24>

08013594 <__malloc_lock>:
 8013594:	4801      	ldr	r0, [pc, #4]	; (801359c <__malloc_lock+0x8>)
 8013596:	f7ff bf69 	b.w	801346c <__retarget_lock_acquire_recursive>
 801359a:	bf00      	nop
 801359c:	2000365c 	.word	0x2000365c

080135a0 <__malloc_unlock>:
 80135a0:	4801      	ldr	r0, [pc, #4]	; (80135a8 <__malloc_unlock+0x8>)
 80135a2:	f7ff bf64 	b.w	801346e <__retarget_lock_release_recursive>
 80135a6:	bf00      	nop
 80135a8:	2000365c 	.word	0x2000365c

080135ac <_realloc_r>:
 80135ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135b0:	4680      	mov	r8, r0
 80135b2:	4614      	mov	r4, r2
 80135b4:	460e      	mov	r6, r1
 80135b6:	b921      	cbnz	r1, 80135c2 <_realloc_r+0x16>
 80135b8:	4611      	mov	r1, r2
 80135ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80135be:	f7ff b9a1 	b.w	8012904 <_malloc_r>
 80135c2:	b92a      	cbnz	r2, 80135d0 <_realloc_r+0x24>
 80135c4:	f7ff f936 	bl	8012834 <_free_r>
 80135c8:	4625      	mov	r5, r4
 80135ca:	4628      	mov	r0, r5
 80135cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135d0:	f000 f906 	bl	80137e0 <_malloc_usable_size_r>
 80135d4:	4284      	cmp	r4, r0
 80135d6:	4607      	mov	r7, r0
 80135d8:	d802      	bhi.n	80135e0 <_realloc_r+0x34>
 80135da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80135de:	d812      	bhi.n	8013606 <_realloc_r+0x5a>
 80135e0:	4621      	mov	r1, r4
 80135e2:	4640      	mov	r0, r8
 80135e4:	f7ff f98e 	bl	8012904 <_malloc_r>
 80135e8:	4605      	mov	r5, r0
 80135ea:	2800      	cmp	r0, #0
 80135ec:	d0ed      	beq.n	80135ca <_realloc_r+0x1e>
 80135ee:	42bc      	cmp	r4, r7
 80135f0:	4622      	mov	r2, r4
 80135f2:	4631      	mov	r1, r6
 80135f4:	bf28      	it	cs
 80135f6:	463a      	movcs	r2, r7
 80135f8:	f7fe fd78 	bl	80120ec <memcpy>
 80135fc:	4631      	mov	r1, r6
 80135fe:	4640      	mov	r0, r8
 8013600:	f7ff f918 	bl	8012834 <_free_r>
 8013604:	e7e1      	b.n	80135ca <_realloc_r+0x1e>
 8013606:	4635      	mov	r5, r6
 8013608:	e7df      	b.n	80135ca <_realloc_r+0x1e>

0801360a <_raise_r>:
 801360a:	291f      	cmp	r1, #31
 801360c:	b538      	push	{r3, r4, r5, lr}
 801360e:	4604      	mov	r4, r0
 8013610:	460d      	mov	r5, r1
 8013612:	d904      	bls.n	801361e <_raise_r+0x14>
 8013614:	2316      	movs	r3, #22
 8013616:	6003      	str	r3, [r0, #0]
 8013618:	f04f 30ff 	mov.w	r0, #4294967295
 801361c:	bd38      	pop	{r3, r4, r5, pc}
 801361e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013620:	b112      	cbz	r2, 8013628 <_raise_r+0x1e>
 8013622:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013626:	b94b      	cbnz	r3, 801363c <_raise_r+0x32>
 8013628:	4620      	mov	r0, r4
 801362a:	f000 f831 	bl	8013690 <_getpid_r>
 801362e:	462a      	mov	r2, r5
 8013630:	4601      	mov	r1, r0
 8013632:	4620      	mov	r0, r4
 8013634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013638:	f000 b818 	b.w	801366c <_kill_r>
 801363c:	2b01      	cmp	r3, #1
 801363e:	d00a      	beq.n	8013656 <_raise_r+0x4c>
 8013640:	1c59      	adds	r1, r3, #1
 8013642:	d103      	bne.n	801364c <_raise_r+0x42>
 8013644:	2316      	movs	r3, #22
 8013646:	6003      	str	r3, [r0, #0]
 8013648:	2001      	movs	r0, #1
 801364a:	e7e7      	b.n	801361c <_raise_r+0x12>
 801364c:	2400      	movs	r4, #0
 801364e:	4628      	mov	r0, r5
 8013650:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013654:	4798      	blx	r3
 8013656:	2000      	movs	r0, #0
 8013658:	e7e0      	b.n	801361c <_raise_r+0x12>
	...

0801365c <raise>:
 801365c:	4b02      	ldr	r3, [pc, #8]	; (8013668 <raise+0xc>)
 801365e:	4601      	mov	r1, r0
 8013660:	6818      	ldr	r0, [r3, #0]
 8013662:	f7ff bfd2 	b.w	801360a <_raise_r>
 8013666:	bf00      	nop
 8013668:	20000670 	.word	0x20000670

0801366c <_kill_r>:
 801366c:	b538      	push	{r3, r4, r5, lr}
 801366e:	2300      	movs	r3, #0
 8013670:	4d06      	ldr	r5, [pc, #24]	; (801368c <_kill_r+0x20>)
 8013672:	4604      	mov	r4, r0
 8013674:	4608      	mov	r0, r1
 8013676:	4611      	mov	r1, r2
 8013678:	602b      	str	r3, [r5, #0]
 801367a:	f7f0 fdda 	bl	8004232 <_kill>
 801367e:	1c43      	adds	r3, r0, #1
 8013680:	d102      	bne.n	8013688 <_kill_r+0x1c>
 8013682:	682b      	ldr	r3, [r5, #0]
 8013684:	b103      	cbz	r3, 8013688 <_kill_r+0x1c>
 8013686:	6023      	str	r3, [r4, #0]
 8013688:	bd38      	pop	{r3, r4, r5, pc}
 801368a:	bf00      	nop
 801368c:	20003660 	.word	0x20003660

08013690 <_getpid_r>:
 8013690:	f7f0 bdc8 	b.w	8004224 <_getpid>

08013694 <__sread>:
 8013694:	b510      	push	{r4, lr}
 8013696:	460c      	mov	r4, r1
 8013698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801369c:	f000 f8a8 	bl	80137f0 <_read_r>
 80136a0:	2800      	cmp	r0, #0
 80136a2:	bfab      	itete	ge
 80136a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80136a6:	89a3      	ldrhlt	r3, [r4, #12]
 80136a8:	181b      	addge	r3, r3, r0
 80136aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80136ae:	bfac      	ite	ge
 80136b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80136b2:	81a3      	strhlt	r3, [r4, #12]
 80136b4:	bd10      	pop	{r4, pc}

080136b6 <__swrite>:
 80136b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136ba:	461f      	mov	r7, r3
 80136bc:	898b      	ldrh	r3, [r1, #12]
 80136be:	4605      	mov	r5, r0
 80136c0:	05db      	lsls	r3, r3, #23
 80136c2:	460c      	mov	r4, r1
 80136c4:	4616      	mov	r6, r2
 80136c6:	d505      	bpl.n	80136d4 <__swrite+0x1e>
 80136c8:	2302      	movs	r3, #2
 80136ca:	2200      	movs	r2, #0
 80136cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136d0:	f000 f874 	bl	80137bc <_lseek_r>
 80136d4:	89a3      	ldrh	r3, [r4, #12]
 80136d6:	4632      	mov	r2, r6
 80136d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80136dc:	81a3      	strh	r3, [r4, #12]
 80136de:	4628      	mov	r0, r5
 80136e0:	463b      	mov	r3, r7
 80136e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80136e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136ea:	f000 b823 	b.w	8013734 <_write_r>

080136ee <__sseek>:
 80136ee:	b510      	push	{r4, lr}
 80136f0:	460c      	mov	r4, r1
 80136f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136f6:	f000 f861 	bl	80137bc <_lseek_r>
 80136fa:	1c43      	adds	r3, r0, #1
 80136fc:	89a3      	ldrh	r3, [r4, #12]
 80136fe:	bf15      	itete	ne
 8013700:	6560      	strne	r0, [r4, #84]	; 0x54
 8013702:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013706:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801370a:	81a3      	strheq	r3, [r4, #12]
 801370c:	bf18      	it	ne
 801370e:	81a3      	strhne	r3, [r4, #12]
 8013710:	bd10      	pop	{r4, pc}

08013712 <__sclose>:
 8013712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013716:	f000 b81f 	b.w	8013758 <_close_r>

0801371a <__ascii_wctomb>:
 801371a:	4603      	mov	r3, r0
 801371c:	4608      	mov	r0, r1
 801371e:	b141      	cbz	r1, 8013732 <__ascii_wctomb+0x18>
 8013720:	2aff      	cmp	r2, #255	; 0xff
 8013722:	d904      	bls.n	801372e <__ascii_wctomb+0x14>
 8013724:	228a      	movs	r2, #138	; 0x8a
 8013726:	f04f 30ff 	mov.w	r0, #4294967295
 801372a:	601a      	str	r2, [r3, #0]
 801372c:	4770      	bx	lr
 801372e:	2001      	movs	r0, #1
 8013730:	700a      	strb	r2, [r1, #0]
 8013732:	4770      	bx	lr

08013734 <_write_r>:
 8013734:	b538      	push	{r3, r4, r5, lr}
 8013736:	4604      	mov	r4, r0
 8013738:	4608      	mov	r0, r1
 801373a:	4611      	mov	r1, r2
 801373c:	2200      	movs	r2, #0
 801373e:	4d05      	ldr	r5, [pc, #20]	; (8013754 <_write_r+0x20>)
 8013740:	602a      	str	r2, [r5, #0]
 8013742:	461a      	mov	r2, r3
 8013744:	f7f0 fdac 	bl	80042a0 <_write>
 8013748:	1c43      	adds	r3, r0, #1
 801374a:	d102      	bne.n	8013752 <_write_r+0x1e>
 801374c:	682b      	ldr	r3, [r5, #0]
 801374e:	b103      	cbz	r3, 8013752 <_write_r+0x1e>
 8013750:	6023      	str	r3, [r4, #0]
 8013752:	bd38      	pop	{r3, r4, r5, pc}
 8013754:	20003660 	.word	0x20003660

08013758 <_close_r>:
 8013758:	b538      	push	{r3, r4, r5, lr}
 801375a:	2300      	movs	r3, #0
 801375c:	4d05      	ldr	r5, [pc, #20]	; (8013774 <_close_r+0x1c>)
 801375e:	4604      	mov	r4, r0
 8013760:	4608      	mov	r0, r1
 8013762:	602b      	str	r3, [r5, #0]
 8013764:	f7f0 fdb8 	bl	80042d8 <_close>
 8013768:	1c43      	adds	r3, r0, #1
 801376a:	d102      	bne.n	8013772 <_close_r+0x1a>
 801376c:	682b      	ldr	r3, [r5, #0]
 801376e:	b103      	cbz	r3, 8013772 <_close_r+0x1a>
 8013770:	6023      	str	r3, [r4, #0]
 8013772:	bd38      	pop	{r3, r4, r5, pc}
 8013774:	20003660 	.word	0x20003660

08013778 <_fstat_r>:
 8013778:	b538      	push	{r3, r4, r5, lr}
 801377a:	2300      	movs	r3, #0
 801377c:	4d06      	ldr	r5, [pc, #24]	; (8013798 <_fstat_r+0x20>)
 801377e:	4604      	mov	r4, r0
 8013780:	4608      	mov	r0, r1
 8013782:	4611      	mov	r1, r2
 8013784:	602b      	str	r3, [r5, #0]
 8013786:	f7f0 fdb2 	bl	80042ee <_fstat>
 801378a:	1c43      	adds	r3, r0, #1
 801378c:	d102      	bne.n	8013794 <_fstat_r+0x1c>
 801378e:	682b      	ldr	r3, [r5, #0]
 8013790:	b103      	cbz	r3, 8013794 <_fstat_r+0x1c>
 8013792:	6023      	str	r3, [r4, #0]
 8013794:	bd38      	pop	{r3, r4, r5, pc}
 8013796:	bf00      	nop
 8013798:	20003660 	.word	0x20003660

0801379c <_isatty_r>:
 801379c:	b538      	push	{r3, r4, r5, lr}
 801379e:	2300      	movs	r3, #0
 80137a0:	4d05      	ldr	r5, [pc, #20]	; (80137b8 <_isatty_r+0x1c>)
 80137a2:	4604      	mov	r4, r0
 80137a4:	4608      	mov	r0, r1
 80137a6:	602b      	str	r3, [r5, #0]
 80137a8:	f7f0 fdb0 	bl	800430c <_isatty>
 80137ac:	1c43      	adds	r3, r0, #1
 80137ae:	d102      	bne.n	80137b6 <_isatty_r+0x1a>
 80137b0:	682b      	ldr	r3, [r5, #0]
 80137b2:	b103      	cbz	r3, 80137b6 <_isatty_r+0x1a>
 80137b4:	6023      	str	r3, [r4, #0]
 80137b6:	bd38      	pop	{r3, r4, r5, pc}
 80137b8:	20003660 	.word	0x20003660

080137bc <_lseek_r>:
 80137bc:	b538      	push	{r3, r4, r5, lr}
 80137be:	4604      	mov	r4, r0
 80137c0:	4608      	mov	r0, r1
 80137c2:	4611      	mov	r1, r2
 80137c4:	2200      	movs	r2, #0
 80137c6:	4d05      	ldr	r5, [pc, #20]	; (80137dc <_lseek_r+0x20>)
 80137c8:	602a      	str	r2, [r5, #0]
 80137ca:	461a      	mov	r2, r3
 80137cc:	f7f0 fda8 	bl	8004320 <_lseek>
 80137d0:	1c43      	adds	r3, r0, #1
 80137d2:	d102      	bne.n	80137da <_lseek_r+0x1e>
 80137d4:	682b      	ldr	r3, [r5, #0]
 80137d6:	b103      	cbz	r3, 80137da <_lseek_r+0x1e>
 80137d8:	6023      	str	r3, [r4, #0]
 80137da:	bd38      	pop	{r3, r4, r5, pc}
 80137dc:	20003660 	.word	0x20003660

080137e0 <_malloc_usable_size_r>:
 80137e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137e4:	1f18      	subs	r0, r3, #4
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	bfbc      	itt	lt
 80137ea:	580b      	ldrlt	r3, [r1, r0]
 80137ec:	18c0      	addlt	r0, r0, r3
 80137ee:	4770      	bx	lr

080137f0 <_read_r>:
 80137f0:	b538      	push	{r3, r4, r5, lr}
 80137f2:	4604      	mov	r4, r0
 80137f4:	4608      	mov	r0, r1
 80137f6:	4611      	mov	r1, r2
 80137f8:	2200      	movs	r2, #0
 80137fa:	4d05      	ldr	r5, [pc, #20]	; (8013810 <_read_r+0x20>)
 80137fc:	602a      	str	r2, [r5, #0]
 80137fe:	461a      	mov	r2, r3
 8013800:	f7f0 fd31 	bl	8004266 <_read>
 8013804:	1c43      	adds	r3, r0, #1
 8013806:	d102      	bne.n	801380e <_read_r+0x1e>
 8013808:	682b      	ldr	r3, [r5, #0]
 801380a:	b103      	cbz	r3, 801380e <_read_r+0x1e>
 801380c:	6023      	str	r3, [r4, #0]
 801380e:	bd38      	pop	{r3, r4, r5, pc}
 8013810:	20003660 	.word	0x20003660

08013814 <_init>:
 8013814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013816:	bf00      	nop
 8013818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801381a:	bc08      	pop	{r3}
 801381c:	469e      	mov	lr, r3
 801381e:	4770      	bx	lr

08013820 <_fini>:
 8013820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013822:	bf00      	nop
 8013824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013826:	bc08      	pop	{r3}
 8013828:	469e      	mov	lr, r3
 801382a:	4770      	bx	lr
